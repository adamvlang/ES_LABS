
LAB5.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000004f8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000190  80002800  80002800  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000004  00000008  80002990  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  0000000c  80002994  0000300c  2**0
                  ALLOC
  8 .bss          000000f0  00000010  00000010  00000000  2**2
                  ALLOC
  9 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000003e8  00000000  00000000  00003040  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000008b2  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00004c0b  00000000  00000000  00003cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000c2d  00000000  00000000  000088e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000343e  00000000  00000000  00009512  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000760  00000000  00000000  0000c950  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001384  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00000c35  00000000  00000000  0000e434  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00585381  00000000  00000000  0000f069  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000388  00000000  00000000  005943f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf dc 10 	sub	pc,pc,-9200

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fc 14 	sub	pc,pc,-1004

Disassembly of section .text:

80002008 <pm_set_osc0_mode>:
80002008:	78 a8       	ld.w	r8,r12[0x28]
8000200a:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000200e:	99 a8       	st.w	r12[0x28],r8
}
80002010:	5e fc       	retal	r12
80002012:	d7 03       	nop

80002014 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002014:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002016:	ec 5b bb 9f 	cp.w	r11,899999
8000201a:	e0 8b 00 04 	brhi	80002022 <pm_enable_osc0_crystal+0xe>
8000201e:	30 4b       	mov	r11,4
80002020:	c1 38       	rjmp	80002046 <pm_enable_osc0_crystal+0x32>
80002022:	e0 68 c6 bf 	mov	r8,50879
80002026:	ea 18 00 2d 	orh	r8,0x2d
8000202a:	10 3b       	cp.w	r11,r8
8000202c:	e0 8b 00 04 	brhi	80002034 <pm_enable_osc0_crystal+0x20>
80002030:	30 5b       	mov	r11,5
80002032:	c0 a8       	rjmp	80002046 <pm_enable_osc0_crystal+0x32>
80002034:	e0 68 12 00 	mov	r8,4608
80002038:	ea 18 00 7a 	orh	r8,0x7a
8000203c:	10 3b       	cp.w	r11,r8
8000203e:	f9 bb 03 06 	movlo	r11,6
80002042:	f9 bb 02 07 	movhs	r11,7
80002046:	f0 1f 00 02 	mcall	8000204c <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000204a:	d8 02       	popm	pc
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 08       	sub	r8,0

80002050 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002050:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002052:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002056:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002058:	78 08       	ld.w	r8,r12[0x0]
8000205a:	a3 a8       	sbr	r8,0x2
8000205c:	99 08       	st.w	r12[0x0],r8
}
8000205e:	5e fc       	retal	r12

80002060 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002060:	79 58       	ld.w	r8,r12[0x54]
80002062:	e2 18 00 80 	andl	r8,0x80,COH
80002066:	cf d0       	breq	80002060 <pm_wait_for_clk0_ready>
}
80002068:	5e fc       	retal	r12
8000206a:	d7 03       	nop

8000206c <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000206c:	eb cd 40 80 	pushm	r7,lr
80002070:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002072:	f0 1f 00 04 	mcall	80002080 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002076:	0e 9c       	mov	r12,r7
80002078:	f0 1f 00 03 	mcall	80002084 <pm_enable_clk0+0x18>
}
8000207c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	20 50       	sub	r0,5
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	20 60       	sub	r0,6

80002088 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002088:	eb cd 40 d0 	pushm	r4,r6-r7,lr
8000208c:	fa c4 ff f0 	sub	r4,sp,-16
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002090:	30 0e       	mov	lr,0

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
80002092:	09 f7       	ld.ub	r7,r4[0x7]
80002094:	ef d7 c0 03 	bfextu	r7,r7,0x0,0x3
80002098:	fd d7 d0 03 	bfins	lr,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
8000209c:	09 b4       	ld.ub	r4,r4[0x3]
8000209e:	08 96       	mov	r6,r4
800020a0:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
800020a4:	fd d4 d0 e1 	bfins	lr,r4,0x7,0x1
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
800020a8:	fd d7 d1 03 	bfins	lr,r7,0x8,0x3
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
800020ac:	fd d4 d1 e1 	bfins	lr,r4,0xf,0x1
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
800020b0:	fd da d2 03 	bfins	lr,r10,0x10,0x3
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
800020b4:	fd db d2 e1 	bfins	lr,r11,0x17,0x1
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
800020b8:	fd d8 d3 03 	bfins	lr,r8,0x18,0x3
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
800020bc:	fd d9 d3 e1 	bfins	lr,r9,0x1f,0x1

  pm->cksel = u_avr32_pm_cksel.cksel;
800020c0:	99 1e       	st.w	r12[0x4],lr

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
800020c2:	79 58       	ld.w	r8,r12[0x54]
800020c4:	e2 18 00 20 	andl	r8,0x20,COH
800020c8:	cf d0       	breq	800020c2 <pm_cksel+0x3a>
}
800020ca:	e3 cd 80 d0 	ldm	sp++,r4,r6-r7,pc

800020ce <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800020ce:	eb cd 40 80 	pushm	r7,lr
800020d2:	40 27       	lddsp	r7,sp[0x8]
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800020d4:	30 0e       	mov	lr,0

  u_avr32_pm_pll.PLL.pllosc   = osc;
800020d6:	fd d8 d0 21 	bfins	lr,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
800020da:	fd d9 d1 04 	bfins	lr,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
800020de:	fd da d2 04 	bfins	lr,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800020e2:	fd d7 d3 06 	bfins	lr,r7,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800020e6:	2f 8b       	sub	r11,-8
800020e8:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800020ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800020f0 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
800020f0:	d4 01       	pushm	lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800020f2:	2f 8b       	sub	r11,-8
800020f4:	f8 0b 03 2e 	ld.w	lr,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800020f8:	f5 e9 10 19 	or	r9,r10,r9<<0x1
800020fc:	f3 e8 10 28 	or	r8,r9,r8<<0x2
80002100:	fd d8 d0 43 	bfins	lr,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002104:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
80002108:	d8 02       	popm	pc

8000210a <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
8000210a:	2f 8b       	sub	r11,-8
8000210c:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
80002110:	a1 a8       	sbr	r8,0x0
80002112:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
80002116:	5e fc       	retal	r12

80002118 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002118:	79 58       	ld.w	r8,r12[0x54]
8000211a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000211e:	cf d0       	breq	80002118 <pm_wait_for_pll0_locked>
}
80002120:	5e fc       	retal	r12

80002122 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002122:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002124:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002128:	99 08       	st.w	r12[0x0],r8
}
8000212a:	5e fc       	retal	r12

8000212c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000212c:	eb cd 40 c0 	pushm	r6-r7,lr
80002130:	18 97       	mov	r7,r12
80002132:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002134:	f0 1f 00 06 	mcall	8000214c <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002138:	0c 9b       	mov	r11,r6
8000213a:	0e 9c       	mov	r12,r7
8000213c:	f0 1f 00 05 	mcall	80002150 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002140:	30 1b       	mov	r11,1
80002142:	0e 9c       	mov	r12,r7
80002144:	f0 1f 00 04 	mcall	80002154 <pm_switch_to_osc0+0x28>
}
80002148:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000214c:	80 00       	ld.sh	r0,r0[0x0]
8000214e:	20 14       	sub	r4,1
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	20 6c       	sub	r12,6
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	21 22       	sub	r2,18

80002158 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002158:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000215a:	30 3b       	mov	r11,3
8000215c:	33 bc       	mov	r12,59
8000215e:	f0 1f 00 2c 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002162:	30 3b       	mov	r11,3
80002164:	33 cc       	mov	r12,60
80002166:	f0 1f 00 2a 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000216a:	30 3b       	mov	r11,3
8000216c:	33 dc       	mov	r12,61
8000216e:	f0 1f 00 28 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002172:	30 3b       	mov	r11,3
80002174:	33 ec       	mov	r12,62
80002176:	f0 1f 00 26 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000217a:	30 3b       	mov	r11,3
8000217c:	33 3c       	mov	r12,51
8000217e:	f0 1f 00 24 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002182:	30 3b       	mov	r11,3
80002184:	33 4c       	mov	r12,52
80002186:	f0 1f 00 22 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000218a:	30 3b       	mov	r11,3
8000218c:	33 5c       	mov	r12,53
8000218e:	f0 1f 00 20 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002192:	30 3b       	mov	r11,3
80002194:	33 6c       	mov	r12,54
80002196:	f0 1f 00 1e 	mcall	8000220c <board_init+0xb4>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000219a:	30 0b       	mov	r11,0
8000219c:	35 8c       	mov	r12,88
8000219e:	f0 1f 00 1c 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
800021a2:	30 0b       	mov	r11,0
800021a4:	35 5c       	mov	r12,85
800021a6:	f0 1f 00 1a 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
800021aa:	30 0b       	mov	r11,0
800021ac:	35 2c       	mov	r12,82
800021ae:	f0 1f 00 18 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
800021b2:	30 0b       	mov	r11,0
800021b4:	31 4c       	mov	r12,20
800021b6:	f0 1f 00 16 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
800021ba:	30 0b       	mov	r11,0
800021bc:	31 9c       	mov	r12,25
800021be:	f0 1f 00 14 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
800021c2:	30 0b       	mov	r11,0
800021c4:	31 ac       	mov	r12,26
800021c6:	f0 1f 00 12 	mcall	8000220c <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
800021ca:	30 0b       	mov	r11,0
800021cc:	31 bc       	mov	r12,27
800021ce:	f0 1f 00 10 	mcall	8000220c <board_init+0xb4>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
800021d2:	30 4b       	mov	r11,4
800021d4:	48 fc       	lddpc	r12,80002210 <board_init+0xb8>
800021d6:	f0 1f 00 10 	mcall	80002214 <board_init+0xbc>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
800021da:	30 4b       	mov	r11,4
800021dc:	48 fc       	lddpc	r12,80002218 <board_init+0xc0>
800021de:	f0 1f 00 0e 	mcall	80002214 <board_init+0xbc>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
800021e2:	30 0b       	mov	r11,0
800021e4:	30 2c       	mov	r12,2
800021e6:	f0 1f 00 0a 	mcall	8000220c <board_init+0xb4>
800021ea:	30 0b       	mov	r11,0
800021ec:	30 7c       	mov	r12,7
800021ee:	f0 1f 00 08 	mcall	8000220c <board_init+0xb4>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800021f2:	30 2b       	mov	r11,2
800021f4:	48 ac       	lddpc	r12,8000221c <board_init+0xc4>
800021f6:	f0 1f 00 08 	mcall	80002214 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800021fa:	30 2b       	mov	r11,2
800021fc:	48 9c       	lddpc	r12,80002220 <board_init+0xc8>
800021fe:	f0 1f 00 06 	mcall	80002214 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
80002202:	30 2b       	mov	r11,2
80002204:	48 8c       	lddpc	r12,80002224 <board_init+0xcc>
80002206:	f0 1f 00 04 	mcall	80002214 <board_init+0xbc>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000220a:	d8 02       	popm	pc
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	23 00       	sub	r0,48
80002210:	80 00       	ld.sh	r0,r0[0x0]
80002212:	28 50       	sub	r0,-123
80002214:	80 00       	ld.sh	r0,r0[0x0]
80002216:	22 d0       	sub	r0,45
80002218:	80 00       	ld.sh	r0,r0[0x0]
8000221a:	28 00       	sub	r0,-128
8000221c:	80 00       	ld.sh	r0,r0[0x0]
8000221e:	28 40       	sub	r0,-124
80002220:	80 00       	ld.sh	r0,r0[0x0]
80002222:	28 30       	sub	r0,-125
80002224:	80 00       	ld.sh	r0,r0[0x0]
80002226:	28 20       	sub	r0,-126

80002228 <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002228:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
8000222c:	49 28       	lddpc	r8,80002274 <LED_Display+0x4c>
8000222e:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80002230:	49 28       	lddpc	r8,80002278 <LED_Display+0x50>
80002232:	f0 c9 ff 80 	sub	r9,r8,-128
80002236:	12 38       	cp.w	r8,r9
80002238:	5e 2c       	reths	r12
8000223a:	10 9b       	mov	r11,r8
8000223c:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
8000223e:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002242:	f0 f9 ff fc 	ld.w	r9,r8[-4]
80002246:	a9 69       	lsl	r9,0x8
80002248:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
8000224c:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002250:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
80002254:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002258:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
8000225c:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002260:	70 0a       	ld.w	r10,r8[0x0]
80002262:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002266:	70 0a       	ld.w	r10,r8[0x0]
80002268:	93 1a       	st.w	r9[0x4],r10
8000226a:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8000226c:	16 38       	cp.w	r8,r11
8000226e:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
80002270:	a1 9c       	lsr	r12,0x1
80002272:	ce 8b       	rjmp	80002242 <LED_Display+0x1a>
80002274:	00 00       	add	r0,r0
80002276:	00 08       	add	r8,r0
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	28 70       	sub	r0,-121

8000227c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000227c:	f8 08 16 05 	lsr	r8,r12,0x5
80002280:	a9 68       	lsl	r8,0x8
80002282:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002286:	58 1b       	cp.w	r11,1
80002288:	c0 d0       	breq	800022a2 <gpio_enable_module_pin+0x26>
8000228a:	c0 63       	brcs	80002296 <gpio_enable_module_pin+0x1a>
8000228c:	58 2b       	cp.w	r11,2
8000228e:	c1 00       	breq	800022ae <gpio_enable_module_pin+0x32>
80002290:	58 3b       	cp.w	r11,3
80002292:	c1 40       	breq	800022ba <gpio_enable_module_pin+0x3e>
80002294:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002296:	30 19       	mov	r9,1
80002298:	f2 0c 09 49 	lsl	r9,r9,r12
8000229c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000229e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800022a0:	c1 28       	rjmp	800022c4 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022a2:	30 19       	mov	r9,1
800022a4:	f2 0c 09 49 	lsl	r9,r9,r12
800022a8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800022aa:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800022ac:	c0 c8       	rjmp	800022c4 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800022ae:	30 19       	mov	r9,1
800022b0:	f2 0c 09 49 	lsl	r9,r9,r12
800022b4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022b6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800022b8:	c0 68       	rjmp	800022c4 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022ba:	30 19       	mov	r9,1
800022bc:	f2 0c 09 49 	lsl	r9,r9,r12
800022c0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022c2:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800022c4:	30 19       	mov	r9,1
800022c6:	f2 0c 09 4c 	lsl	r12,r9,r12
800022ca:	91 2c       	st.w	r8[0x8],r12
800022cc:	5e fd       	retal	0
800022ce:	d7 03       	nop

800022d0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800022d0:	d4 21       	pushm	r4-r7,lr
800022d2:	18 97       	mov	r7,r12
800022d4:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800022d6:	58 0b       	cp.w	r11,0
800022d8:	c0 31       	brne	800022de <gpio_enable_module+0xe>
800022da:	30 05       	mov	r5,0
800022dc:	c0 d8       	rjmp	800022f6 <gpio_enable_module+0x26>
800022de:	30 06       	mov	r6,0
800022e0:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800022e2:	6e 1b       	ld.w	r11,r7[0x4]
800022e4:	6e 0c       	ld.w	r12,r7[0x0]
800022e6:	f0 1f 00 06 	mcall	800022fc <gpio_enable_module+0x2c>
800022ea:	18 45       	or	r5,r12
		gpiomap++;
800022ec:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800022ee:	2f f6       	sub	r6,-1
800022f0:	0c 34       	cp.w	r4,r6
800022f2:	fe 9b ff f8 	brhi	800022e2 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800022f6:	0a 9c       	mov	r12,r5
800022f8:	d8 22       	popm	r4-r7,pc
800022fa:	00 00       	add	r0,r0
800022fc:	80 00       	ld.sh	r0,r0[0x0]
800022fe:	22 7c       	sub	r12,39

80002300 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002300:	f8 08 16 05 	lsr	r8,r12,0x5
80002304:	a9 68       	lsl	r8,0x8
80002306:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000230a:	16 99       	mov	r9,r11
8000230c:	e2 19 00 04 	andl	r9,0x4,COH
80002310:	c0 70       	breq	8000231e <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002312:	30 19       	mov	r9,1
80002314:	f2 0c 09 49 	lsl	r9,r9,r12
80002318:	f1 49 00 74 	st.w	r8[116],r9
8000231c:	c0 68       	rjmp	80002328 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000231e:	30 19       	mov	r9,1
80002320:	f2 0c 09 49 	lsl	r9,r9,r12
80002324:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002328:	16 99       	mov	r9,r11
8000232a:	e2 19 00 80 	andl	r9,0x80,COH
8000232e:	c2 40       	breq	80002376 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002330:	16 99       	mov	r9,r11
80002332:	e2 19 01 80 	andl	r9,0x180,COH
80002336:	c0 90       	breq	80002348 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002338:	30 19       	mov	r9,1
8000233a:	f2 0c 09 49 	lsl	r9,r9,r12
8000233e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002342:	f1 49 00 b8 	st.w	r8[184],r9
80002346:	c1 88       	rjmp	80002376 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002348:	16 99       	mov	r9,r11
8000234a:	e2 19 02 80 	andl	r9,0x280,COH
8000234e:	c0 90       	breq	80002360 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002350:	30 19       	mov	r9,1
80002352:	f2 0c 09 49 	lsl	r9,r9,r12
80002356:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000235a:	f1 49 00 b8 	st.w	r8[184],r9
8000235e:	c0 c8       	rjmp	80002376 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002360:	16 99       	mov	r9,r11
80002362:	e2 19 03 80 	andl	r9,0x380,COH
80002366:	c0 80       	breq	80002376 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002368:	30 19       	mov	r9,1
8000236a:	f2 0c 09 49 	lsl	r9,r9,r12
8000236e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002372:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002376:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000237a:	c1 50       	breq	800023a4 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
8000237c:	e2 1b 00 02 	andl	r11,0x2,COH
80002380:	c0 70       	breq	8000238e <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002382:	30 19       	mov	r9,1
80002384:	f2 0c 09 49 	lsl	r9,r9,r12
80002388:	f1 49 00 54 	st.w	r8[84],r9
8000238c:	c0 68       	rjmp	80002398 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000238e:	30 19       	mov	r9,1
80002390:	f2 0c 09 49 	lsl	r9,r9,r12
80002394:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002398:	30 19       	mov	r9,1
8000239a:	f2 0c 09 49 	lsl	r9,r9,r12
8000239e:	f1 49 00 44 	st.w	r8[68],r9
800023a2:	c0 68       	rjmp	800023ae <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800023a4:	30 19       	mov	r9,1
800023a6:	f2 0c 09 49 	lsl	r9,r9,r12
800023aa:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800023ae:	30 19       	mov	r9,1
800023b0:	f2 0c 09 4c 	lsl	r12,r9,r12
800023b4:	91 1c       	st.w	r8[0x4],r12
}
800023b6:	5e fc       	retal	r12

800023b8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800023b8:	fe 78 08 00 	mov	r8,-63488
800023bc:	e0 69 00 83 	mov	r9,131
800023c0:	f2 0c 01 0c 	sub	r12,r9,r12
800023c4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800023c8:	f2 ca ff c0 	sub	r10,r9,-64
800023cc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800023d0:	58 08       	cp.w	r8,0
800023d2:	c0 21       	brne	800023d6 <_get_interrupt_handler+0x1e>
800023d4:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
800023d6:	f0 08 12 00 	clz	r8,r8
800023da:	48 5a       	lddpc	r10,800023ec <_get_interrupt_handler+0x34>
800023dc:	f4 09 00 39 	add	r9,r10,r9<<0x3
800023e0:	f0 08 11 1f 	rsub	r8,r8,31
800023e4:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800023e6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800023ea:	5e fc       	retal	r12
800023ec:	80 00       	ld.sh	r0,r0[0x0]
800023ee:	28 f0       	sub	r0,-113

800023f0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800023f0:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800023f4:	fe c0 fd f4 	sub	r0,pc,-524

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800023f8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800023fc:	d5 53       	csrf	0x15
  cp      r0, r1
800023fe:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002400:	31 01       	mov	r1,16
  lda.w   r2, _data_lma
80002402:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002404:	c0 72       	brcc	80002412 <idata_load_loop_end>
  st.d    r0++, r4
80002406:	fe c2 fa 76 	sub	r2,pc,-1418

8000240a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000240a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000240c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000240e:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002410:	cf d3       	brcs	8000240a <idata_load_loop>

80002412 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002412:	31 00       	mov	r0,16
  mov     r2, 0
80002414:	e0 61 01 00 	mov	r1,256
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002418:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000241a:	c0 62       	brcc	80002426 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000241c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000241e:	30 03       	mov	r3,0

80002420 <udata_clear_loop>:
80002420:	a1 22       	st.d	r0++,r2
80002422:	02 30       	cp.w	r0,r1
80002424:	cf e3       	brcs	80002420 <udata_clear_loop>

80002426 <udata_clear_loop_end>:
80002426:	fe cf ff fa 	sub	pc,pc,-6
8000242a:	d7 03       	nop

8000242c <main>:
	volatile int i;
	for (i=0; i<1000000; i++);
}

int main (void)
{
8000242c:	eb cd 40 e0 	pushm	r5-r7,lr
80002430:	20 1d       	sub	sp,4
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
80002432:	f0 1f 00 2b 	mcall	800024dc <main+0xb0>
	int PLLDIV = 0;
	int PLLDIV2 = 1;
	int CPUSEL = 1;

	// Setup clock speed
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002436:	30 3a       	mov	r10,3
80002438:	e0 6b 1b 00 	mov	r11,6912
8000243c:	ea 1b 00 b7 	orh	r11,0xb7
80002440:	fe 7c 0c 00 	mov	r12,-62464
80002444:	f0 1f 00 27 	mcall	800024e0 <main+0xb4>
	pm_pll_setup(&AVR32_PM,				0, //PLL
80002448:	31 08       	mov	r8,16
8000244a:	1a d8       	st.w	--sp,r8
8000244c:	30 08       	mov	r8,0
8000244e:	10 99       	mov	r9,r8
80002450:	30 3a       	mov	r10,3
80002452:	10 9b       	mov	r11,r8
80002454:	fe 7c 0c 00 	mov	r12,-62464
80002458:	f0 1f 00 23 	mcall	800024e4 <main+0xb8>
										PLLMUL, //MUL
										PLLDIV, //DIV
										0, //OSC
										16 ); // LOCKCOUNT
	pm_pll_set_option(&AVR32_PM,		0, //PLL
8000245c:	30 08       	mov	r8,0
8000245e:	30 19       	mov	r9,1
80002460:	12 9a       	mov	r10,r9
80002462:	10 9b       	mov	r11,r8
80002464:	fe 7c 0c 00 	mov	r12,-62464
80002468:	f0 1f 00 20 	mcall	800024e8 <main+0xbc>
										1, // PLL_FREQ
										PLLDIV2, // PLL_DIV2
										0);// PLL_WBWDISABLE
	pm_pll_enable(&AVR32_PM, 0);
8000246c:	30 0b       	mov	r11,0
8000246e:	fe 7c 0c 00 	mov	r12,-62464
80002472:	f0 1f 00 1f 	mcall	800024ec <main+0xc0>
	pm_wait_for_pll0_locked(&AVR32_PM);
80002476:	fe 7c 0c 00 	mov	r12,-62464
8000247a:	f0 1f 00 1e 	mcall	800024f0 <main+0xc4>
	pm_cksel(&AVR32_PM,
8000247e:	30 1b       	mov	r11,1
80002480:	1a db       	st.w	--sp,r11
80002482:	1a db       	st.w	--sp,r11
80002484:	30 08       	mov	r8,0
80002486:	16 99       	mov	r9,r11
80002488:	10 9a       	mov	r10,r8
8000248a:	fe 7c 0c 00 	mov	r12,-62464
8000248e:	f0 1f 00 1a 	mcall	800024f4 <main+0xc8>
					0, //pbasel
					1, //pbbdiv
					0, //pbbsel
					1,	//hsbdiv
					CPUSEL); //hsbsel (CPUSEL)	
	pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
80002492:	30 2b       	mov	r11,2
80002494:	fe 7c 0c 00 	mov	r12,-62464
80002498:	f0 1f 00 18 	mcall	800024f8 <main+0xcc>
8000249c:	30 09       	mov	r9,0
8000249e:	2f dd       	sub	sp,-12
	
	// Blink led loop
	while(1){
		if (state == 0) {
			LED_Display(LED0);
800024a0:	30 16       	mov	r6,1
			state = 1;	
		}
		else {
			LED_Display(LED1);
800024a2:	30 25       	mov	r5,2
800024a4:	12 97       	mov	r7,r9
					CPUSEL); //hsbsel (CPUSEL)	
	pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
	
	// Blink led loop
	while(1){
		if (state == 0) {
800024a6:	58 09       	cp.w	r9,0
800024a8:	c0 61       	brne	800024b4 <main+0x88>
			LED_Display(LED0);
800024aa:	0c 9c       	mov	r12,r6
800024ac:	f0 1f 00 14 	mcall	800024fc <main+0xd0>
800024b0:	0c 99       	mov	r9,r6
800024b2:	c0 58       	rjmp	800024bc <main+0x90>
			state = 1;	
		}
		else {
			LED_Display(LED1);
800024b4:	0a 9c       	mov	r12,r5
800024b6:	f0 1f 00 12 	mcall	800024fc <main+0xd0>
800024ba:	0e 99       	mov	r9,r7
#include <asf.h>

static void software_delay(void){
	volatile int i;
	for (i=0; i<1000000; i++);
800024bc:	50 07       	stdsp	sp[0x0],r7
800024be:	40 08       	lddsp	r8,sp[0x0]
800024c0:	ee 58 42 3f 	cp.w	r8,999999
800024c4:	fe 99 ff f1 	brgt	800024a6 <main+0x7a>
800024c8:	40 08       	lddsp	r8,sp[0x0]
800024ca:	2f f8       	sub	r8,-1
800024cc:	50 08       	stdsp	sp[0x0],r8
800024ce:	40 08       	lddsp	r8,sp[0x0]
800024d0:	ee 58 42 3f 	cp.w	r8,999999
800024d4:	fe 9a ff fa 	brle	800024c8 <main+0x9c>
800024d8:	ce 7b       	rjmp	800024a6 <main+0x7a>
800024da:	00 00       	add	r0,r0
800024dc:	80 00       	ld.sh	r0,r0[0x0]
800024de:	21 58       	sub	r8,21
800024e0:	80 00       	ld.sh	r0,r0[0x0]
800024e2:	21 2c       	sub	r12,18
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	20 ce       	sub	lr,12
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	20 f0       	sub	r0,15
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	21 0a       	sub	r10,16
800024f0:	80 00       	ld.sh	r0,r0[0x0]
800024f2:	21 18       	sub	r8,17
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	20 88       	sub	r8,8
800024f8:	80 00       	ld.sh	r0,r0[0x0]
800024fa:	21 22       	sub	r2,18
800024fc:	80 00       	ld.sh	r0,r0[0x0]
800024fe:	22 28       	sub	r8,34

Disassembly of section .exception:

80002600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002600:	c0 08       	rjmp	80002600 <_evba>
	...

80002604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002604:	c0 08       	rjmp	80002604 <_handle_TLB_Multiple_Hit>
	...

80002608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002608:	c0 08       	rjmp	80002608 <_handle_Bus_Error_Data_Fetch>
	...

8000260c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000260c:	c0 08       	rjmp	8000260c <_handle_Bus_Error_Instruction_Fetch>
	...

80002610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002610:	c0 08       	rjmp	80002610 <_handle_NMI>
	...

80002614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002614:	c0 08       	rjmp	80002614 <_handle_Instruction_Address>
	...

80002618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002618:	c0 08       	rjmp	80002618 <_handle_ITLB_Protection>
	...

8000261c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000261c:	c0 08       	rjmp	8000261c <_handle_Breakpoint>
	...

80002620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002620:	c0 08       	rjmp	80002620 <_handle_Illegal_Opcode>
	...

80002624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002624:	c0 08       	rjmp	80002624 <_handle_Unimplemented_Instruction>
	...

80002628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002628:	c0 08       	rjmp	80002628 <_handle_Privilege_Violation>
	...

8000262c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000262c:	c0 08       	rjmp	8000262c <_handle_Floating_Point>
	...

80002630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002630:	c0 08       	rjmp	80002630 <_handle_Coprocessor_Absent>
	...

80002634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002634:	c0 08       	rjmp	80002634 <_handle_Data_Address_Read>
	...

80002638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002638:	c0 08       	rjmp	80002638 <_handle_Data_Address_Write>
	...

8000263c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000263c:	c0 08       	rjmp	8000263c <_handle_DTLB_Protection_Read>
	...

80002640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002640:	c0 08       	rjmp	80002640 <_handle_DTLB_Protection_Write>
	...

80002644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002644:	c0 08       	rjmp	80002644 <_handle_DTLB_Modified>
	...

80002650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002650:	c0 08       	rjmp	80002650 <_handle_ITLB_Miss>
	...

80002660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002660:	c0 08       	rjmp	80002660 <_handle_DTLB_Miss_Read>
	...

80002670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002670:	c0 08       	rjmp	80002670 <_handle_DTLB_Miss_Write>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002700:	c0 08       	rjmp	80002700 <_handle_Supervisor_Call>
80002702:	d7 03       	nop

80002704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002704:	30 0c       	mov	r12,0
80002706:	c5 9e       	rcall	800023b8 <_get_interrupt_handler>
80002708:	58 0c       	cp.w	r12,0
8000270a:	f8 0f 17 10 	movne	pc,r12
8000270e:	d6 03       	rete

80002710 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002710:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002712:	c5 3e       	rcall	800023b8 <_get_interrupt_handler>
80002714:	58 0c       	cp.w	r12,0
80002716:	f8 0f 17 10 	movne	pc,r12
8000271a:	d6 03       	rete

8000271c <_int2>:
8000271c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000271e:	c4 de       	rcall	800023b8 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002720:	58 0c       	cp.w	r12,0
80002722:	f8 0f 17 10 	movne	pc,r12
80002726:	d6 03       	rete

80002728 <_int3>:
80002728:	30 3c       	mov	r12,3
8000272a:	c4 7e       	rcall	800023b8 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000272c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000272e:	f8 0f 17 10 	movne	pc,r12
80002732:	d6 03       	rete
80002734:	d7 03       	nop
80002736:	d7 03       	nop
80002738:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000273a:	d7 03       	nop
8000273c:	d7 03       	nop
8000273e:	d7 03       	nop
80002740:	d7 03       	nop
80002742:	d7 03       	nop
80002744:	d7 03       	nop
80002746:	d7 03       	nop
80002748:	d7 03       	nop
8000274a:	d7 03       	nop
8000274c:	d7 03       	nop
8000274e:	d7 03       	nop
80002750:	d7 03       	nop
80002752:	d7 03       	nop
80002754:	d7 03       	nop
80002756:	d7 03       	nop
80002758:	d7 03       	nop
8000275a:	d7 03       	nop
8000275c:	d7 03       	nop
8000275e:	d7 03       	nop
80002760:	d7 03       	nop
80002762:	d7 03       	nop
80002764:	d7 03       	nop
80002766:	d7 03       	nop
80002768:	d7 03       	nop
8000276a:	d7 03       	nop
8000276c:	d7 03       	nop
8000276e:	d7 03       	nop
80002770:	d7 03       	nop
80002772:	d7 03       	nop
80002774:	d7 03       	nop
80002776:	d7 03       	nop
80002778:	d7 03       	nop
8000277a:	d7 03       	nop
8000277c:	d7 03       	nop
8000277e:	d7 03       	nop
80002780:	d7 03       	nop
80002782:	d7 03       	nop
80002784:	d7 03       	nop
80002786:	d7 03       	nop
80002788:	d7 03       	nop
8000278a:	d7 03       	nop
8000278c:	d7 03       	nop
8000278e:	d7 03       	nop
80002790:	d7 03       	nop
80002792:	d7 03       	nop
80002794:	d7 03       	nop
80002796:	d7 03       	nop
80002798:	d7 03       	nop
8000279a:	d7 03       	nop
8000279c:	d7 03       	nop
8000279e:	d7 03       	nop
800027a0:	d7 03       	nop
800027a2:	d7 03       	nop
800027a4:	d7 03       	nop
800027a6:	d7 03       	nop
800027a8:	d7 03       	nop
800027aa:	d7 03       	nop
800027ac:	d7 03       	nop
800027ae:	d7 03       	nop
800027b0:	d7 03       	nop
800027b2:	d7 03       	nop
800027b4:	d7 03       	nop
800027b6:	d7 03       	nop
800027b8:	d7 03       	nop
800027ba:	d7 03       	nop
800027bc:	d7 03       	nop
800027be:	d7 03       	nop
800027c0:	d7 03       	nop
800027c2:	d7 03       	nop
800027c4:	d7 03       	nop
800027c6:	d7 03       	nop
800027c8:	d7 03       	nop
800027ca:	d7 03       	nop
800027cc:	d7 03       	nop
800027ce:	d7 03       	nop
800027d0:	d7 03       	nop
800027d2:	d7 03       	nop
800027d4:	d7 03       	nop
800027d6:	d7 03       	nop
800027d8:	d7 03       	nop
800027da:	d7 03       	nop
800027dc:	d7 03       	nop
800027de:	d7 03       	nop
800027e0:	d7 03       	nop
800027e2:	d7 03       	nop
800027e4:	d7 03       	nop
800027e6:	d7 03       	nop
800027e8:	d7 03       	nop
800027ea:	d7 03       	nop
800027ec:	d7 03       	nop
800027ee:	d7 03       	nop
800027f0:	d7 03       	nop
800027f2:	d7 03       	nop
800027f4:	d7 03       	nop
800027f6:	d7 03       	nop
800027f8:	d7 03       	nop
800027fa:	d7 03       	nop
800027fc:	d7 03       	nop
800027fe:	d7 03       	nop
