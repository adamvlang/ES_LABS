
LAB5.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006b60  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008c00  80008c00  00009000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000754  80008e00  80008e00  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009554  80009554  00009954  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  80009558  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000150  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e998  00000668  00000668  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000f80  00000000  00000000  0000a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001f93  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002124b  00000000  00000000  0000d05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000055c6  00000000  00000000  0002e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ee9f  00000000  00000000  0003386c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002548  00000000  00000000  0004270c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004931  00000000  00000000  00044c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000aadc  00000000  00000000  00049585  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00b09965  00000000  00000000  00054061  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001140  00000000  00000000  00b5d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d0 60 	sub	pc,pc,-12192

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f0 64 	sub	pc,pc,-3996

Disassembly of section .text:

80002008 <dip204_select>:
80002008:	d4 01       	pushm	lr
8000200a:	30 2b       	mov	r11,2
/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000200c:	fe 7c 28 00 	mov	r12,-55296
80002010:	f0 1f 00 02 	mcall	80002018 <dip204_select+0x10>
}
80002014:	d8 02       	popm	pc
80002016:	00 00       	add	r0,r0
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	2e 30       	sub	r0,-29

8000201c <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
8000201c:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002020:	f8 c8 ff f8 	sub	r8,r12,-8
80002024:	30 69       	mov	r9,6
80002026:	f2 08 18 00 	cp.b	r8,r9
8000202a:	e0 8b 00 0f 	brhi	80002048 <dip204_write_byte+0x2c>
8000202e:	30 19       	mov	r9,1
80002030:	f2 08 09 48 	lsl	r8,r9,r8
80002034:	e2 18 00 55 	andl	r8,0x55,COH
80002038:	c0 80       	breq	80002048 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000203a:	18 9b       	mov	r11,r12
8000203c:	fe 7c 28 00 	mov	r12,-55296
80002040:	f0 1f 00 0c 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002044:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002048:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000204a:	f8 07 16 18 	lsr	r7,r12,0x18
8000204e:	0e 9b       	mov	r11,r7
80002050:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002054:	fe 7c 28 00 	mov	r12,-55296
80002058:	f0 1f 00 06 	mcall	80002070 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000205c:	ee 0b 15 04 	lsl	r11,r7,0x4
80002060:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002064:	fe 7c 28 00 	mov	r12,-55296
80002068:	f0 1f 00 02 	mcall	80002070 <dip204_write_byte+0x54>
8000206c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002070:	80 00       	ld.sh	r0,r0[0x0]
80002072:	2f 62       	sub	r2,-10

80002074 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002074:	eb cd 40 c0 	pushm	r6-r7,lr
80002078:	20 1d       	sub	sp,4
8000207a:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
8000207c:	fa c7 ff fc 	sub	r7,sp,-4
80002080:	30 08       	mov	r8,0
80002082:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002084:	30 0b       	mov	r11,0
80002086:	fe 7c 28 00 	mov	r12,-55296
8000208a:	f0 1f 00 08 	mcall	800020a8 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
8000208e:	0e 9b       	mov	r11,r7
80002090:	fe 7c 28 00 	mov	r12,-55296
80002094:	f0 1f 00 06 	mcall	800020ac <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002098:	1b b8       	ld.ub	r8,sp[0x3]
8000209a:	5c 98       	brev	r8
8000209c:	b9 88       	lsr	r8,0x18
8000209e:	ac 88       	st.b	r6[0x0],r8
}
800020a0:	2f fd       	sub	sp,-4
800020a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020a6:	00 00       	add	r0,r0
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	2f 62       	sub	r2,-10
800020ac:	80 00       	ld.sh	r0,r0[0x0]
800020ae:	2f 7e       	sub	lr,-9

800020b0 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800020b0:	eb cd 40 c0 	pushm	r6-r7,lr
800020b4:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800020b6:	fa c7 ff fc 	sub	r7,sp,-4
800020ba:	30 08       	mov	r8,0
800020bc:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800020be:	e0 6c 00 fc 	mov	r12,252
800020c2:	f0 1f 00 07 	mcall	800020dc <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800020c6:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800020c8:	0e 9c       	mov	r12,r7
800020ca:	f0 1f 00 06 	mcall	800020e0 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800020ce:	1b b8       	ld.ub	r8,sp[0x3]
800020d0:	ec 08 18 00 	cp.b	r8,r6
800020d4:	cf a5       	brlt	800020c8 <dip204_wait_busy+0x18>
}
800020d6:	2f fd       	sub	sp,-4
800020d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	20 1c       	sub	r12,1
800020e0:	80 00       	ld.sh	r0,r0[0x0]
800020e2:	20 74       	sub	r4,7

800020e4 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800020e4:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800020e6:	30 2b       	mov	r11,2
800020e8:	fe 7c 28 00 	mov	r12,-55296
800020ec:	f0 1f 00 02 	mcall	800020f4 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800020f0:	d8 02       	popm	pc
800020f2:	00 00       	add	r0,r0
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	2e 7c       	sub	r12,-25

800020f8 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
800020f8:	d4 21       	pushm	r4-r7,lr
800020fa:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
800020fc:	fa ca ff d4 	sub	r10,sp,-44
80002100:	18 9b       	mov	r11,r12
80002102:	1a 9c       	mov	r12,sp
80002104:	f0 1f 00 1e 	mcall	8000217c <dip204_printf_string+0x84>
80002108:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000210a:	31 38       	mov	r8,19
8000210c:	f0 0c 18 00 	cp.b	r12,r8
80002110:	e0 8b 00 0e 	brhi	8000212c <dip204_printf_string+0x34>
80002114:	30 0a       	mov	r10,0
80002116:	31 49       	mov	r9,20
80002118:	fa c8 ff e8 	sub	r8,sp,-24
8000211c:	18 08       	add	r8,r12
8000211e:	f1 6a ff e8 	st.b	r8[-24],r10
80002122:	2f fc       	sub	r12,-1
80002124:	5c 5c       	castu.b	r12
80002126:	f2 0c 18 00 	cp.b	r12,r9
8000212a:	cf 71       	brne	80002118 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
8000212c:	f0 1f 00 15 	mcall	80002180 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002130:	30 08       	mov	r8,0
80002132:	1b 89       	ld.ub	r9,sp[0x0]
80002134:	f0 09 18 00 	cp.b	r9,r8
80002138:	c1 e0       	breq	80002174 <dip204_printf_string+0x7c>
8000213a:	30 06       	mov	r6,0
8000213c:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
8000213e:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002142:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002144:	08 9c       	mov	r12,r4
80002146:	f0 1f 00 10 	mcall	80002184 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000214a:	fa c8 ff e8 	sub	r8,sp,-24
8000214e:	f0 06 00 06 	add	r6,r8,r6
80002152:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002156:	f0 1f 00 0c 	mcall	80002184 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000215a:	2f f7       	sub	r7,-1
8000215c:	5c 57       	castu.b	r7
    dip204_wait_busy();
8000215e:	f0 1f 00 0b 	mcall	80002188 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002162:	0e 96       	mov	r6,r7
80002164:	fa c8 ff e8 	sub	r8,sp,-24
80002168:	0e 08       	add	r8,r7
8000216a:	f1 38 ff e8 	ld.ub	r8,r8[-24]
8000216e:	ea 08 18 00 	cp.b	r8,r5
80002172:	ce 91       	brne	80002144 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002174:	f0 1f 00 06 	mcall	8000218c <dip204_printf_string+0x94>
}
80002178:	2f ad       	sub	sp,-24
8000217a:	d8 22       	popm	r4-r7,pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	34 00       	mov	r0,64
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	20 08       	sub	r8,0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 1c       	sub	r12,1
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	20 b0       	sub	r0,11
8000218c:	80 00       	ld.sh	r0,r0[0x0]
8000218e:	20 e4       	sub	r4,14

80002190 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002190:	eb cd 40 c0 	pushm	r6-r7,lr
80002194:	18 96       	mov	r6,r12
80002196:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002198:	f0 1f 00 11 	mcall	800021dc <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
8000219c:	31 48       	mov	r8,20
8000219e:	f0 06 18 00 	cp.b	r6,r8
800021a2:	5f 89       	srls	r9
800021a4:	30 48       	mov	r8,4
800021a6:	f0 07 18 00 	cp.b	r7,r8
800021aa:	5f 88       	srls	r8
800021ac:	f3 e8 00 08 	and	r8,r9,r8
800021b0:	c0 31       	brne	800021b6 <dip204_set_cursor_position+0x26>
800021b2:	30 06       	mov	r6,0
800021b4:	c0 68       	rjmp	800021c0 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
800021b6:	28 16       	sub	r6,-127
800021b8:	20 17       	sub	r7,1
800021ba:	a5 77       	lsl	r7,0x5
800021bc:	0e 06       	add	r6,r7
800021be:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800021c0:	e0 6c 00 f8 	mov	r12,248
800021c4:	f0 1f 00 07 	mcall	800021e0 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
800021c8:	0c 9c       	mov	r12,r6
800021ca:	f0 1f 00 06 	mcall	800021e0 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
800021ce:	f0 1f 00 06 	mcall	800021e4 <dip204_set_cursor_position+0x54>
  dip204_unselect();
800021d2:	f0 1f 00 06 	mcall	800021e8 <dip204_set_cursor_position+0x58>
}
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 08       	sub	r8,0
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	20 1c       	sub	r12,1
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	20 b0       	sub	r0,11
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	20 e4       	sub	r4,14

800021ec <dip204_clear_display>:


void dip204_clear_display(void)
{
800021ec:	d4 01       	pushm	lr
  dip204_select();
800021ee:	f0 1f 00 12 	mcall	80002234 <dip204_clear_display+0x48>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800021f2:	e0 6c 00 f8 	mov	r12,248
800021f6:	f0 1f 00 11 	mcall	80002238 <dip204_clear_display+0x4c>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
800021fa:	30 1c       	mov	r12,1
800021fc:	f0 1f 00 0f 	mcall	80002238 <dip204_clear_display+0x4c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002200:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002204:	f0 ca fe 33 	sub	r10,r8,-461
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002208:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000220c:	14 38       	cp.w	r8,r10
8000220e:	e0 88 00 08 	brls	8000221e <dip204_clear_display+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002212:	12 38       	cp.w	r8,r9
80002214:	fe 98 ff fa 	brls	80002208 <dip204_clear_display+0x1c>
80002218:	12 3a       	cp.w	r10,r9
8000221a:	c0 73       	brcs	80002228 <dip204_clear_display+0x3c>
8000221c:	cf 6b       	rjmp	80002208 <dip204_clear_display+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000221e:	12 38       	cp.w	r8,r9
80002220:	e0 8b 00 04 	brhi	80002228 <dip204_clear_display+0x3c>
80002224:	12 3a       	cp.w	r10,r9
80002226:	cf 12       	brcc	80002208 <dip204_clear_display+0x1c>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002228:	f0 1f 00 05 	mcall	8000223c <dip204_clear_display+0x50>
  dip204_unselect();
8000222c:	f0 1f 00 05 	mcall	80002240 <dip204_clear_display+0x54>
}
80002230:	d8 02       	popm	pc
80002232:	00 00       	add	r0,r0
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	20 08       	sub	r8,0
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	20 1c       	sub	r12,1
8000223c:	80 00       	ld.sh	r0,r0[0x0]
8000223e:	20 b0       	sub	r0,11
80002240:	80 00       	ld.sh	r0,r0[0x0]
80002242:	20 e4       	sub	r4,14

80002244 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002244:	eb cd 40 80 	pushm	r7,lr
80002248:	20 4d       	sub	sp,16
8000224a:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000224c:	58 1c       	cp.w	r12,1
8000224e:	c3 01       	brne	800022ae <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002250:	30 69       	mov	r9,6
80002252:	4f 88       	lddpc	r8,80002430 <dip204_init+0x1ec>
80002254:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002256:	30 2b       	mov	r11,2
80002258:	33 2c       	mov	r12,50
8000225a:	f0 1f 00 77 	mcall	80002434 <dip204_init+0x1f0>

    // PWM controller configuration
    pwm_opt.diva=0;
8000225e:	30 08       	mov	r8,0
80002260:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002262:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002264:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002266:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002268:	1a 9c       	mov	r12,sp
8000226a:	f0 1f 00 74 	mcall	80002438 <dip204_init+0x1f4>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000226e:	58 07       	cp.w	r7,0
80002270:	f9 b7 01 31 	movne	r7,49
80002274:	f9 b7 00 01 	moveq	r7,1
80002278:	4f 18       	lddpc	r8,8000243c <dip204_init+0x1f8>
8000227a:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000227c:	4f 1b       	lddpc	r11,80002440 <dip204_init+0x1fc>
8000227e:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002280:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002284:	ab a8       	sbr	r8,0xa
80002286:	30 89       	mov	r9,8
80002288:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
8000228c:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000228e:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002290:	33 28       	mov	r8,50
80002292:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002294:	30 08       	mov	r8,0
80002296:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002298:	4e 67       	lddpc	r7,80002430 <dip204_init+0x1ec>
8000229a:	6e 0c       	ld.w	r12,r7[0x0]
8000229c:	f0 1f 00 6a 	mcall	80002444 <dip204_init+0x200>
    // start PWM
    pwm_start_channels(1 << channel_id);
800022a0:	6e 08       	ld.w	r8,r7[0x0]
800022a2:	30 1c       	mov	r12,1
800022a4:	f8 08 09 4c 	lsl	r12,r12,r8
800022a8:	f0 1f 00 68 	mcall	80002448 <dip204_init+0x204>
800022ac:	c0 a8       	rjmp	800022c0 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
800022ae:	58 0b       	cp.w	r11,0
800022b0:	c0 50       	breq	800022ba <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800022b2:	33 2c       	mov	r12,50
800022b4:	f0 1f 00 66 	mcall	8000244c <dip204_init+0x208>
800022b8:	c0 48       	rjmp	800022c0 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800022ba:	33 2c       	mov	r12,50
800022bc:	f0 1f 00 65 	mcall	80002450 <dip204_init+0x20c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022c4:	f0 ca f7 00 	sub	r10,r8,-2304
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022c8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022cc:	14 38       	cp.w	r8,r10
800022ce:	e0 88 00 08 	brls	800022de <dip204_init+0x9a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022d2:	12 38       	cp.w	r8,r9
800022d4:	fe 98 ff fa 	brls	800022c8 <dip204_init+0x84>
800022d8:	12 3a       	cp.w	r10,r9
800022da:	c6 e3       	brcs	800023b6 <dip204_init+0x172>
800022dc:	cf 6b       	rjmp	800022c8 <dip204_init+0x84>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022de:	12 38       	cp.w	r8,r9
800022e0:	e0 8b 00 6b 	brhi	800023b6 <dip204_init+0x172>
800022e4:	12 3a       	cp.w	r10,r9
800022e6:	c6 83       	brcs	800023b6 <dip204_init+0x172>
800022e8:	cf 0b       	rjmp	800022c8 <dip204_init+0x84>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800022ea:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022ee:	14 38       	cp.w	r8,r10
800022f0:	e0 88 00 08 	brls	80002300 <dip204_init+0xbc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022f4:	12 38       	cp.w	r8,r9
800022f6:	fe 98 ff fa 	brls	800022ea <dip204_init+0xa6>
800022fa:	12 3a       	cp.w	r10,r9
800022fc:	c6 b3       	brcs	800023d2 <dip204_init+0x18e>
800022fe:	cf 6b       	rjmp	800022ea <dip204_init+0xa6>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002300:	12 38       	cp.w	r8,r9
80002302:	e0 8b 00 68 	brhi	800023d2 <dip204_init+0x18e>
80002306:	12 3a       	cp.w	r10,r9
80002308:	c6 53       	brcs	800023d2 <dip204_init+0x18e>
8000230a:	cf 0b       	rjmp	800022ea <dip204_init+0xa6>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000230c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002310:	14 38       	cp.w	r8,r10
80002312:	e0 88 00 08 	brls	80002322 <dip204_init+0xde>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002316:	12 38       	cp.w	r8,r9
80002318:	fe 98 ff fa 	brls	8000230c <dip204_init+0xc8>
8000231c:	12 3a       	cp.w	r10,r9
8000231e:	c6 23       	brcs	800023e2 <dip204_init+0x19e>
80002320:	cf 6b       	rjmp	8000230c <dip204_init+0xc8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002322:	12 38       	cp.w	r8,r9
80002324:	e0 8b 00 5f 	brhi	800023e2 <dip204_init+0x19e>
80002328:	12 3a       	cp.w	r10,r9
8000232a:	c5 c3       	brcs	800023e2 <dip204_init+0x19e>
8000232c:	cf 0b       	rjmp	8000230c <dip204_init+0xc8>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000232e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002332:	14 38       	cp.w	r8,r10
80002334:	e0 88 00 08 	brls	80002344 <dip204_init+0x100>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002338:	12 38       	cp.w	r8,r9
8000233a:	fe 98 ff fa 	brls	8000232e <dip204_init+0xea>
8000233e:	12 3a       	cp.w	r10,r9
80002340:	c5 93       	brcs	800023f2 <dip204_init+0x1ae>
80002342:	cf 6b       	rjmp	8000232e <dip204_init+0xea>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002344:	12 38       	cp.w	r8,r9
80002346:	e0 8b 00 56 	brhi	800023f2 <dip204_init+0x1ae>
8000234a:	12 3a       	cp.w	r10,r9
8000234c:	c5 33       	brcs	800023f2 <dip204_init+0x1ae>
8000234e:	cf 0b       	rjmp	8000232e <dip204_init+0xea>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002350:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002354:	14 38       	cp.w	r8,r10
80002356:	e0 88 00 08 	brls	80002366 <dip204_init+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000235a:	12 38       	cp.w	r8,r9
8000235c:	fe 98 ff fa 	brls	80002350 <dip204_init+0x10c>
80002360:	12 3a       	cp.w	r10,r9
80002362:	c5 03       	brcs	80002402 <dip204_init+0x1be>
80002364:	cf 6b       	rjmp	80002350 <dip204_init+0x10c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002366:	12 38       	cp.w	r8,r9
80002368:	e0 8b 00 4d 	brhi	80002402 <dip204_init+0x1be>
8000236c:	12 3a       	cp.w	r10,r9
8000236e:	c4 a3       	brcs	80002402 <dip204_init+0x1be>
80002370:	cf 0b       	rjmp	80002350 <dip204_init+0x10c>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002372:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002376:	14 38       	cp.w	r8,r10
80002378:	e0 88 00 08 	brls	80002388 <dip204_init+0x144>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000237c:	12 38       	cp.w	r8,r9
8000237e:	fe 98 ff fa 	brls	80002372 <dip204_init+0x12e>
80002382:	12 3a       	cp.w	r10,r9
80002384:	c4 73       	brcs	80002412 <dip204_init+0x1ce>
80002386:	cf 6b       	rjmp	80002372 <dip204_init+0x12e>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002388:	12 38       	cp.w	r8,r9
8000238a:	e0 8b 00 44 	brhi	80002412 <dip204_init+0x1ce>
8000238e:	12 3a       	cp.w	r10,r9
80002390:	c4 13       	brcs	80002412 <dip204_init+0x1ce>
80002392:	cf 0b       	rjmp	80002372 <dip204_init+0x12e>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002394:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002398:	14 38       	cp.w	r8,r10
8000239a:	e0 88 00 08 	brls	800023aa <dip204_init+0x166>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000239e:	12 38       	cp.w	r8,r9
800023a0:	fe 98 ff fa 	brls	80002394 <dip204_init+0x150>
800023a4:	12 3a       	cp.w	r10,r9
800023a6:	c3 e3       	brcs	80002422 <dip204_init+0x1de>
800023a8:	cf 6b       	rjmp	80002394 <dip204_init+0x150>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023aa:	12 38       	cp.w	r8,r9
800023ac:	e0 8b 00 3b 	brhi	80002422 <dip204_init+0x1de>
800023b0:	12 3a       	cp.w	r10,r9
800023b2:	c3 83       	brcs	80002422 <dip204_init+0x1de>
800023b4:	cf 0b       	rjmp	80002394 <dip204_init+0x150>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
800023b6:	f0 1f 00 28 	mcall	80002454 <dip204_init+0x210>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
800023ba:	e0 6c 00 f8 	mov	r12,248
800023be:	f0 1f 00 27 	mcall	80002458 <dip204_init+0x214>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
800023c2:	33 4c       	mov	r12,52
800023c4:	f0 1f 00 25 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023cc:	f0 ca ff 8c 	sub	r10,r8,-116
800023d0:	c8 db       	rjmp	800022ea <dip204_init+0xa6>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800023d2:	30 9c       	mov	r12,9
800023d4:	f0 1f 00 21 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023d8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023dc:	f0 ca ff 8c 	sub	r10,r8,-116
800023e0:	c9 6b       	rjmp	8000230c <dip204_init+0xc8>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
800023e2:	33 0c       	mov	r12,48
800023e4:	f0 1f 00 1d 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023e8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023ec:	f0 ca ff 8c 	sub	r10,r8,-116
800023f0:	c9 fb       	rjmp	8000232e <dip204_init+0xea>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800023f2:	30 fc       	mov	r12,15
800023f4:	f0 1f 00 19 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023f8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023fc:	f0 ca ff 8c 	sub	r10,r8,-116
80002400:	ca 8b       	rjmp	80002350 <dip204_init+0x10c>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002402:	30 1c       	mov	r12,1
80002404:	f0 1f 00 15 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002408:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000240c:	f0 ca fd c0 	sub	r10,r8,-576
80002410:	cb 1b       	rjmp	80002372 <dip204_init+0x12e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002412:	30 6c       	mov	r12,6
80002414:	f0 1f 00 11 	mcall	80002458 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002418:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000241c:	f0 ca ff 8c 	sub	r10,r8,-116
80002420:	cb ab       	rjmp	80002394 <dip204_init+0x150>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002422:	f0 1f 00 0f 	mcall	8000245c <dip204_init+0x218>
  // unselect chip
  dip204_unselect();
80002426:	f0 1f 00 0f 	mcall	80002460 <dip204_init+0x21c>
}
8000242a:	2f cd       	sub	sp,-16
8000242c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002430:	00 00       	add	r0,r0
80002432:	00 08       	add	r8,r0
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	2a b8       	sub	r8,-85
80002438:	80 00       	ld.sh	r0,r0[0x0]
8000243a:	28 30       	sub	r0,-125
8000243c:	00 00       	add	r0,r0
8000243e:	05 38       	ld.ub	r8,r2++
80002440:	00 00       	add	r0,r0
80002442:	05 18       	ld.sh	r8,r2++
80002444:	80 00       	ld.sh	r0,r0[0x0]
80002446:	27 e8       	sub	r8,126
80002448:	80 00       	ld.sh	r0,r0[0x0]
8000244a:	28 1e       	sub	lr,-127
8000244c:	80 00       	ld.sh	r0,r0[0x0]
8000244e:	2c 10       	sub	r0,-63
80002450:	80 00       	ld.sh	r0,r0[0x0]
80002452:	2b f4       	sub	r4,-65
80002454:	80 00       	ld.sh	r0,r0[0x0]
80002456:	20 08       	sub	r8,0
80002458:	80 00       	ld.sh	r0,r0[0x0]
8000245a:	20 1c       	sub	r12,1
8000245c:	80 00       	ld.sh	r0,r0[0x0]
8000245e:	20 b0       	sub	r0,11
80002460:	80 00       	ld.sh	r0,r0[0x0]
80002462:	20 e4       	sub	r4,14

80002464 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002464:	fe 68 14 00 	mov	r8,-125952
80002468:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000246a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000246e:	91 09       	st.w	r8[0x0],r9
}
80002470:	5e fc       	retal	r12

80002472 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002472:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002474:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002478:	99 a8       	st.w	r12[0x28],r8
}
8000247a:	5e fc       	retal	r12

8000247c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000247c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000247e:	ec 5b bb 9f 	cp.w	r11,899999
80002482:	e0 8b 00 04 	brhi	8000248a <pm_enable_osc0_crystal+0xe>
80002486:	30 4b       	mov	r11,4
80002488:	c1 38       	rjmp	800024ae <pm_enable_osc0_crystal+0x32>
8000248a:	e0 68 c6 bf 	mov	r8,50879
8000248e:	ea 18 00 2d 	orh	r8,0x2d
80002492:	10 3b       	cp.w	r11,r8
80002494:	e0 8b 00 04 	brhi	8000249c <pm_enable_osc0_crystal+0x20>
80002498:	30 5b       	mov	r11,5
8000249a:	c0 a8       	rjmp	800024ae <pm_enable_osc0_crystal+0x32>
8000249c:	e0 68 12 00 	mov	r8,4608
800024a0:	ea 18 00 7a 	orh	r8,0x7a
800024a4:	10 3b       	cp.w	r11,r8
800024a6:	f9 bb 03 06 	movlo	r11,6
800024aa:	f9 bb 02 07 	movhs	r11,7
800024ae:	f0 1f 00 02 	mcall	800024b4 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800024b2:	d8 02       	popm	pc
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	24 72       	sub	r2,71

800024b8 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800024b8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800024ba:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800024be:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800024c0:	78 08       	ld.w	r8,r12[0x0]
800024c2:	a3 a8       	sbr	r8,0x2
800024c4:	99 08       	st.w	r12[0x0],r8
}
800024c6:	5e fc       	retal	r12

800024c8 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800024c8:	79 58       	ld.w	r8,r12[0x54]
800024ca:	e2 18 00 80 	andl	r8,0x80,COH
800024ce:	cf d0       	breq	800024c8 <pm_wait_for_clk0_ready>
}
800024d0:	5e fc       	retal	r12
800024d2:	d7 03       	nop

800024d4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800024d4:	eb cd 40 80 	pushm	r7,lr
800024d8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800024da:	f0 1f 00 04 	mcall	800024e8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800024de:	0e 9c       	mov	r12,r7
800024e0:	f0 1f 00 03 	mcall	800024ec <pm_enable_clk0+0x18>
}
800024e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800024e8:	80 00       	ld.sh	r0,r0[0x0]
800024ea:	24 b8       	sub	r8,75
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	24 c8       	sub	r8,76

800024f0 <pm_set_osc32_mode>:
 * \param mode 32-kHz oscillator mode (i.e. AVR32_PM_OSCCTRL32_MODE_x).
 */
static void pm_set_osc32_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
800024f0:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.mode = mode;
800024f2:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
800024f6:	99 c8       	st.w	r12[0x30],r8
}
800024f8:	5e fc       	retal	r12
800024fa:	d7 03       	nop

800024fc <pm_enable_osc32_crystal>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_EXT_CLOCK);
}


void pm_enable_osc32_crystal(volatile avr32_pm_t *pm)
{
800024fc:	d4 01       	pushm	lr
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
800024fe:	30 1b       	mov	r11,1
80002500:	f0 1f 00 02 	mcall	80002508 <pm_enable_osc32_crystal+0xc>
}
80002504:	d8 02       	popm	pc
80002506:	00 00       	add	r0,r0
80002508:	80 00       	ld.sh	r0,r0[0x0]
8000250a:	24 f0       	sub	r0,79

8000250c <pm_enable_clk32_no_wait>:


void pm_enable_clk32_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
8000250c:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.osc32en = 1;
8000250e:	30 19       	mov	r9,1
80002510:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_pm_oscctrl32.OSCCTRL32.startup = startup;
80002514:	f1 db d2 03 	bfins	r8,r11,0x10,0x3
  // Write back
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
80002518:	99 c8       	st.w	r12[0x30],r8
}
8000251a:	5e fc       	retal	r12

8000251c <pm_wait_for_clk32_ready>:


void pm_wait_for_clk32_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC32RDY_MASK));
8000251c:	79 58       	ld.w	r8,r12[0x54]
8000251e:	e2 18 02 00 	andl	r8,0x200,COH
80002522:	cf d0       	breq	8000251c <pm_wait_for_clk32_ready>
}
80002524:	5e fc       	retal	r12
80002526:	d7 03       	nop

80002528 <pm_enable_clk32>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
}


void pm_enable_clk32(volatile avr32_pm_t *pm, unsigned int startup)
{
80002528:	eb cd 40 80 	pushm	r7,lr
8000252c:	18 97       	mov	r7,r12
  pm_enable_clk32_no_wait(pm, startup);
8000252e:	f0 1f 00 04 	mcall	8000253c <pm_enable_clk32+0x14>
  pm_wait_for_clk32_ready(pm);
80002532:	0e 9c       	mov	r12,r7
80002534:	f0 1f 00 03 	mcall	80002540 <pm_enable_clk32+0x18>
}
80002538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	25 0c       	sub	r12,80
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	25 1c       	sub	r12,81

80002544 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002544:	eb cd 40 d0 	pushm	r4,r6-r7,lr
80002548:	fa c4 ff f0 	sub	r4,sp,-16
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
8000254c:	30 0e       	mov	lr,0

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
8000254e:	09 f7       	ld.ub	r7,r4[0x7]
80002550:	ef d7 c0 03 	bfextu	r7,r7,0x0,0x3
80002554:	fd d7 d0 03 	bfins	lr,r7,0x0,0x3
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80002558:	09 b4       	ld.ub	r4,r4[0x3]
8000255a:	08 96       	mov	r6,r4
8000255c:	e9 d4 c0 01 	bfextu	r4,r4,0x0,0x1
80002560:	fd d4 d0 e1 	bfins	lr,r4,0x7,0x1
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
80002564:	fd d7 d1 03 	bfins	lr,r7,0x8,0x3
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
80002568:	fd d4 d1 e1 	bfins	lr,r4,0xf,0x1
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
8000256c:	fd da d2 03 	bfins	lr,r10,0x10,0x3
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
80002570:	fd db d2 e1 	bfins	lr,r11,0x17,0x1
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002574:	fd d8 d3 03 	bfins	lr,r8,0x18,0x3
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002578:	fd d9 d3 e1 	bfins	lr,r9,0x1f,0x1

  pm->cksel = u_avr32_pm_cksel.cksel;
8000257c:	99 1e       	st.w	r12[0x4],lr

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
8000257e:	79 58       	ld.w	r8,r12[0x54]
80002580:	e2 18 00 20 	andl	r8,0x20,COH
80002584:	cf d0       	breq	8000257e <pm_cksel+0x3a>
}
80002586:	e3 cd 80 d0 	ldm	sp++,r4,r6-r7,pc

8000258a <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
8000258a:	eb cd 40 80 	pushm	r7,lr
8000258e:	40 27       	lddsp	r7,sp[0x8]
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002590:	30 0e       	mov	lr,0

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002592:	fd d8 d0 21 	bfins	lr,r8,0x1,0x1
  u_avr32_pm_pll.PLL.plldiv   = div;
80002596:	fd d9 d1 04 	bfins	lr,r9,0x8,0x4
  u_avr32_pm_pll.PLL.pllmul   = mul;
8000259a:	fd da d2 04 	bfins	lr,r10,0x10,0x4
  u_avr32_pm_pll.PLL.pllcount = lockcount;
8000259e:	fd d7 d3 06 	bfins	lr,r7,0x18,0x6

  pm->pll[pll] = u_avr32_pm_pll.pll;
800025a2:	2f 8b       	sub	r11,-8
800025a4:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800025a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800025ac <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
800025ac:	d4 01       	pushm	lr
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800025ae:	2f 8b       	sub	r11,-8
800025b0:	f8 0b 03 2e 	ld.w	lr,r12[r11<<0x2]
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
800025b4:	f5 e9 10 19 	or	r9,r10,r9<<0x1
800025b8:	f3 e8 10 28 	or	r8,r9,r8<<0x2
800025bc:	fd d8 d0 43 	bfins	lr,r8,0x2,0x3
  pm->pll[pll] = u_avr32_pm_pll.pll;
800025c0:	f8 0b 09 2e 	st.w	r12[r11<<0x2],lr
}
800025c4:	d8 02       	popm	pc

800025c6 <pm_pll_enable>:


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800025c6:	2f 8b       	sub	r11,-8
800025c8:	f8 0b 03 28 	ld.w	r8,r12[r11<<0x2]
800025cc:	a1 a8       	sbr	r8,0x0
800025ce:	f8 0b 09 28 	st.w	r12[r11<<0x2],r8
}
800025d2:	5e fc       	retal	r12

800025d4 <pm_wait_for_pll0_locked>:
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800025d4:	79 58       	ld.w	r8,r12[0x54]
800025d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800025da:	cf d0       	breq	800025d4 <pm_wait_for_pll0_locked>
}
800025dc:	5e fc       	retal	r12

800025de <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800025de:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800025e0:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800025e4:	99 08       	st.w	r12[0x0],r8
}
800025e6:	5e fc       	retal	r12

800025e8 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800025e8:	eb cd 40 c0 	pushm	r6-r7,lr
800025ec:	18 97       	mov	r7,r12
800025ee:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800025f0:	f0 1f 00 06 	mcall	80002608 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800025f4:	0c 9b       	mov	r11,r6
800025f6:	0e 9c       	mov	r12,r7
800025f8:	f0 1f 00 05 	mcall	8000260c <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800025fc:	30 1b       	mov	r11,1
800025fe:	0e 9c       	mov	r12,r7
80002600:	f0 1f 00 04 	mcall	80002610 <pm_switch_to_osc0+0x28>
}
80002604:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	24 7c       	sub	r12,71
8000260c:	80 00       	ld.sh	r0,r0[0x0]
8000260e:	24 d4       	sub	r4,77
80002610:	80 00       	ld.sh	r0,r0[0x0]
80002612:	25 de       	sub	lr,93

80002614 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80002614:	eb cd 40 fc 	pushm	r2-r7,lr
80002618:	18 97       	mov	r7,r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
8000261a:	78 05       	ld.w	r5,r12[0x0]
  unsigned long in_osc0_f = param->osc0_f;
8000261c:	78 26       	ld.w	r6,r12[0x8]
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
  unsigned long pll_freq, rest;
  bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
8000261e:	78 3a       	ld.w	r10,r12[0xc]
80002620:	0c 9b       	mov	r11,r6
80002622:	fe 7c 0c 00 	mov	r12,-62464
80002626:	f0 1f 00 69 	mcall	800027c8 <pm_configure_clocks+0x1b4>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
8000262a:	0c 35       	cp.w	r5,r6
8000262c:	c0 51       	brne	80002636 <pm_configure_clocks+0x22>
  {
    param->cpu_f = in_osc0_f;
8000262e:	8f 05       	st.w	r7[0x0],r5
    param->pba_f = in_osc0_f;
80002630:	8f 15       	st.w	r7[0x4],r5
80002632:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80002636:	ea 06 0d 08 	divu	r8,r5,r6
8000263a:	12 9c       	mov	r12,r9

  for (div = 1; div < 32; div++)
  {
    if ((div * rest) % in_osc0_f == 0)
8000263c:	f8 06 0d 08 	divu	r8,r12,r6
80002640:	58 09       	cp.w	r9,0
80002642:	c0 31       	brne	80002648 <pm_configure_clocks+0x34>
80002644:	30 19       	mov	r9,1
80002646:	c1 28       	rjmp	8000266a <pm_configure_clocks+0x56>
80002648:	f8 08 15 01 	lsl	r8,r12,0x1
8000264c:	30 29       	mov	r9,2
8000264e:	f0 06 0d 0a 	divu	r10,r8,r6
80002652:	58 0b       	cp.w	r11,0
80002654:	c0 70       	breq	80002662 <pm_configure_clocks+0x4e>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80002656:	2f f9       	sub	r9,-1
80002658:	18 08       	add	r8,r12
8000265a:	e0 49 00 20 	cp.w	r9,32
8000265e:	cf 81       	brne	8000264e <pm_configure_clocks+0x3a>
80002660:	cb 18       	rjmp	800027c2 <pm_configure_clocks+0x1ae>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
80002662:	e0 49 00 20 	cp.w	r9,32
80002666:	e0 80 00 ae 	breq	800027c2 <pm_configure_clocks+0x1ae>
    return PM_FREQ_STATUS_FAIL;

  mul = (in_cpu_f * div) / in_osc0_f;
8000266a:	f2 05 02 4b 	mul	r11,r9,r5
8000266e:	f6 06 0d 0a 	divu	r10,r11,r6

  if (mul > PM_MAX_MUL)
80002672:	58 fa       	cp.w	r10,15
80002674:	e0 8b 00 a7 	brhi	800027c2 <pm_configure_clocks+0x1ae>
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002678:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000267c:	c0 30       	breq	80002682 <pm_configure_clocks+0x6e>
8000267e:	30 05       	mov	r5,0
80002680:	c0 78       	rjmp	8000268e <pm_configure_clocks+0x7a>
80002682:	30 05       	mov	r5,0
  {
    div /= 2;
80002684:	a1 99       	lsr	r9,0x1
    div2_cpu++;
80002686:	2f f5       	sub	r5,-1

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002688:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000268c:	cf c0       	breq	80002684 <pm_configure_clocks+0x70>

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
8000268e:	f4 06 02 4b 	mul	r11,r10,r6
80002692:	f6 03 15 01 	lsl	r3,r11,0x1
80002696:	e6 09 0d 02 	divu	r2,r3,r9
8000269a:	e0 6c 1b ff 	mov	r12,7167
8000269e:	ea 1c 0e 4e 	orh	r12,0xe4e
800026a2:	18 32       	cp.w	r2,r12
800026a4:	e0 8b 00 1d 	brhi	800026de <pm_configure_clocks+0xca>
  {
    if (2 * mul > PM_MAX_MUL)
800026a8:	f4 08 15 01 	lsl	r8,r10,0x1
800026ac:	58 f8       	cp.w	r8,15
800026ae:	e0 88 00 09 	brls	800026c0 <pm_configure_clocks+0xac>
800026b2:	c1 68       	rjmp	800026de <pm_configure_clocks+0xca>
800026b4:	f0 0a 15 01 	lsl	r10,r8,0x1
800026b8:	58 fa       	cp.w	r10,15
800026ba:	e0 8b 00 11 	brhi	800026dc <pm_configure_clocks+0xc8>
800026be:	14 98       	mov	r8,r10
      break;
    mul *= 2;
    div2_cpu++;
800026c0:	2f f5       	sub	r5,-1

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
800026c2:	f0 06 02 4b 	mul	r11,r8,r6
800026c6:	f6 03 15 01 	lsl	r3,r11,0x1
800026ca:	e6 09 0d 02 	divu	r2,r3,r9
800026ce:	e0 6c 1b ff 	mov	r12,7167
800026d2:	ea 1c 0e 4e 	orh	r12,0xe4e
800026d6:	18 32       	cp.w	r2,r12
800026d8:	fe 98 ff ee 	brls	800026b4 <pm_configure_clocks+0xa0>
800026dc:	10 9a       	mov	r10,r8
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
800026de:	58 05       	cp.w	r5,0
800026e0:	f9 b6 00 00 	moveq	r6,0
  {
    div2_cpu--;
800026e4:	f7 b5 01 01 	subne	r5,1
800026e8:	f9 b6 01 01 	movne	r6,1
    div2_en = 1;
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
800026ec:	f2 06 09 43 	lsl	r3,r9,r6
800026f0:	f6 03 0d 02 	divu	r2,r11,r3
800026f4:	04 94       	mov	r4,r2

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
800026f6:	e4 05 0a 48 	lsr	r8,r2,r5
800026fa:	8f 08       	st.w	r7[0x0],r8
  mul--;

  pm_pll_setup(&AVR32_PM
800026fc:	31 08       	mov	r8,16
800026fe:	1a d8       	st.w	--sp,r8
80002700:	30 08       	mov	r8,0
80002702:	20 1a       	sub	r10,1
80002704:	10 9b       	mov	r11,r8
80002706:	fe 7c 0c 00 	mov	r12,-62464
8000270a:	f0 1f 00 31 	mcall	800027cc <pm_configure_clocks+0x1b8>
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
8000270e:	e0 69 67 ff 	mov	r9,26623
80002712:	ea 19 09 89 	orh	r9,0x989
80002716:	12 32       	cp.w	r2,r9
80002718:	5f 8a       	srls	r10
8000271a:	30 08       	mov	r8,0
8000271c:	0c 99       	mov	r9,r6
8000271e:	10 9b       	mov	r11,r8
80002720:	fe 7c 0c 00 	mov	r12,-62464
80002724:	f0 1f 00 2b 	mcall	800027d0 <pm_configure_clocks+0x1bc>
80002728:	04 98       	mov	r8,r2
8000272a:	30 06       	mov	r6,0
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
8000272c:	2f fd       	sub	sp,-4
8000272e:	c0 78       	rjmp	8000273c <pm_configure_clocks+0x128>
         rest != param->pba_f)
  {
    div2_pba++;
80002730:	2f f6       	sub	r6,-1
    rest = pll_freq / (1 << div2_pba);
80002732:	e8 06 0a 48 	lsr	r8,r4,r6
    if (rest < param->pba_f)
80002736:	6e 19       	ld.w	r9,r7[0x4]
80002738:	12 38       	cp.w	r8,r9
8000273a:	c0 b3       	brcs	80002750 <pm_configure_clocks+0x13c>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
8000273c:	e0 6c 14 80 	mov	r12,5248
80002740:	ea 1c 03 ef 	orh	r12,0x3ef
80002744:	18 38       	cp.w	r8,r12
80002746:	fe 9b ff f5 	brhi	80002730 <pm_configure_clocks+0x11c>
         rest != param->pba_f)
8000274a:	6e 19       	ld.w	r9,r7[0x4]
8000274c:	10 39       	cp.w	r9,r8
8000274e:	cf 11       	brne	80002730 <pm_configure_clocks+0x11c>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80002750:	e8 06 0a 44 	lsr	r4,r4,r6
80002754:	8f 14       	st.w	r7[0x4],r4

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80002756:	30 0b       	mov	r11,0
80002758:	fe 7c 0c 00 	mov	r12,-62464
8000275c:	f0 1f 00 1e 	mcall	800027d4 <pm_configure_clocks+0x1c0>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80002760:	fe 7c 0c 00 	mov	r12,-62464
80002764:	f0 1f 00 1d 	mcall	800027d8 <pm_configure_clocks+0x1c4>

  if (div2_cpu)
80002768:	58 05       	cp.w	r5,0
8000276a:	f9 b9 00 00 	moveq	r9,0
  {
    b_div2_cpu = true;
    div2_cpu--;
8000276e:	f7 b5 01 01 	subne	r5,1
80002772:	f9 b9 01 01 	movne	r9,1
  }
  else
    b_div2_cpu = false;

  if (div2_pba)
80002776:	58 06       	cp.w	r6,0
80002778:	f9 bb 00 00 	moveq	r11,0
  {
    b_div2_pba = true;
    div2_pba--;
8000277c:	f7 b6 01 01 	subne	r6,1
80002780:	f9 bb 01 01 	movne	r11,1
  }
  else
    b_div2_pba = false;

  pm_cksel(&AVR32_PM
80002784:	1a d5       	st.w	--sp,r5
80002786:	1a d9       	st.w	--sp,r9
80002788:	0a 98       	mov	r8,r5
8000278a:	0c 9a       	mov	r10,r6
8000278c:	fe 7c 0c 00 	mov	r12,-62464
80002790:	f0 1f 00 13 	mcall	800027dc <pm_configure_clocks+0x1c8>
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
80002794:	2f ed       	sub	sp,-8
80002796:	6e 08       	ld.w	r8,r7[0x0]
80002798:	e0 69 8a 40 	mov	r9,35392
8000279c:	ea 19 01 f7 	orh	r9,0x1f7
800027a0:	12 38       	cp.w	r8,r9
800027a2:	e0 88 00 06 	brls	800027ae <pm_configure_clocks+0x19a>
  {
    flashc_set_wait_state(1);
800027a6:	30 1c       	mov	r12,1
800027a8:	f0 1f 00 0e 	mcall	800027e0 <pm_configure_clocks+0x1cc>
800027ac:	c0 48       	rjmp	800027b4 <pm_configure_clocks+0x1a0>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
800027ae:	30 0c       	mov	r12,0
800027b0:	f0 1f 00 0c 	mcall	800027e0 <pm_configure_clocks+0x1cc>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
800027b4:	30 2b       	mov	r11,2
800027b6:	fe 7c 0c 00 	mov	r12,-62464
800027ba:	f0 1f 00 0b 	mcall	800027e4 <pm_configure_clocks+0x1d0>
800027be:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

  return PM_FREQ_STATUS_OK;
800027c2:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
800027c6:	00 00       	add	r0,r0
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	25 e8       	sub	r8,94
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	25 8a       	sub	r10,88
800027d0:	80 00       	ld.sh	r0,r0[0x0]
800027d2:	25 ac       	sub	r12,90
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	25 c6       	sub	r6,92
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	25 d4       	sub	r4,93
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	25 44       	sub	r4,84
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	24 64       	sub	r4,70
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	25 de       	sub	lr,93

800027e8 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
800027e8:	58 0b       	cp.w	r11,0
800027ea:	c1 90       	breq	8000281c <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800027ec:	58 6c       	cp.w	r12,6
800027ee:	e0 8b 00 17 	brhi	8000281c <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800027f2:	76 0a       	ld.w	r10,r11[0x0]
800027f4:	fe 78 30 00 	mov	r8,-53248
800027f8:	f8 c9 ff f0 	sub	r9,r12,-16
800027fc:	a5 79       	lsl	r9,0x5
800027fe:	f0 09 00 09 	add	r9,r8,r9
80002802:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002804:	76 19       	ld.w	r9,r11[0x4]
80002806:	a5 7c       	lsl	r12,0x5
80002808:	f0 0c 00 0c 	add	r12,r8,r12
8000280c:	f8 c8 fd fc 	sub	r8,r12,-516
80002810:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80002812:	76 28       	ld.w	r8,r11[0x8]
80002814:	f8 cc fd f8 	sub	r12,r12,-520
80002818:	99 08       	st.w	r12[0x0],r8
8000281a:	5e fd       	retal	0

  return PWM_SUCCESS;
8000281c:	5e ff       	retal	1

8000281e <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000281e:	18 98       	mov	r8,r12
80002820:	e0 18 ff 80 	andl	r8,0xff80
80002824:	c0 20       	breq	80002828 <pwm_start_channels+0xa>
80002826:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80002828:	fe 78 30 00 	mov	r8,-53248
8000282c:	91 1c       	st.w	r8[0x4],r12
8000282e:	5e fd       	retal	0

80002830 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002830:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80002834:	58 0c       	cp.w	r12,0
80002836:	c0 21       	brne	8000283a <pwm_init+0xa>
80002838:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000283a:	e6 18 00 01 	andh	r8,0x1,COH
8000283e:	c0 91       	brne	80002850 <pwm_init+0x20>
80002840:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002842:	fe 78 30 00 	mov	r8,-53248
80002846:	37 f9       	mov	r9,127
80002848:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000284a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000284c:	d5 03       	csrf	0x10
8000284e:	c0 68       	rjmp	8000285a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80002850:	fe 78 30 00 	mov	r8,-53248
80002854:	37 f9       	mov	r9,127
80002856:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80002858:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000285a:	78 08       	ld.w	r8,r12[0x0]
8000285c:	78 39       	ld.w	r9,r12[0xc]
8000285e:	a9 69       	lsl	r9,0x8
80002860:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80002864:	78 18       	ld.w	r8,r12[0x4]
80002866:	10 49       	or	r9,r8
80002868:	78 28       	ld.w	r8,r12[0x8]
8000286a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000286e:	fe 78 30 00 	mov	r8,-53248
80002872:	91 09       	st.w	r8[0x0],r9
80002874:	5e fd       	retal	0

80002876 <rtc_is_busy>:
#include "rtc.h"


int rtc_is_busy(volatile avr32_rtc_t *rtc)
{
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
80002876:	78 0c       	ld.w	r12,r12[0x0]
}
80002878:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8000287c:	5e fc       	retal	r12
8000287e:	d7 03       	nop

80002880 <rtc_set_value>:
  return 1;
}


void rtc_set_value(volatile avr32_rtc_t *rtc, unsigned long val)
{
80002880:	eb cd 40 c0 	pushm	r6-r7,lr
80002884:	18 97       	mov	r7,r12
80002886:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
80002888:	0e 9c       	mov	r12,r7
8000288a:	f0 1f 00 06 	mcall	800028a0 <rtc_set_value+0x20>
8000288e:	cf d1       	brne	80002888 <rtc_set_value+0x8>
  // Set the new val value
  rtc->val = val;
80002890:	8f 16       	st.w	r7[0x4],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
80002892:	0e 9c       	mov	r12,r7
80002894:	f0 1f 00 03 	mcall	800028a0 <rtc_set_value+0x20>
80002898:	cf d1       	brne	80002892 <rtc_set_value+0x12>
}
8000289a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000289e:	00 00       	add	r0,r0
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	28 76       	sub	r6,-121

800028a4 <rtc_enable>:
  while (rtc_is_busy(rtc));
}


void rtc_enable(volatile avr32_rtc_t *rtc)
{
800028a4:	eb cd 40 80 	pushm	r7,lr
800028a8:	18 97       	mov	r7,r12
  // Wait until the rtc CTRL register is up-to-date
  while (rtc_is_busy(rtc));
800028aa:	0e 9c       	mov	r12,r7
800028ac:	f0 1f 00 06 	mcall	800028c4 <rtc_enable+0x20>
800028b0:	cf d1       	brne	800028aa <rtc_enable+0x6>
  // Enable the RTC
  rtc->ctrl |= AVR32_RTC_CTRL_EN_MASK;
800028b2:	6e 08       	ld.w	r8,r7[0x0]
800028b4:	a1 a8       	sbr	r8,0x0
800028b6:	8f 08       	st.w	r7[0x0],r8
  // Wait until write is done
  while (rtc_is_busy(rtc));
800028b8:	0e 9c       	mov	r12,r7
800028ba:	f0 1f 00 03 	mcall	800028c4 <rtc_enable+0x20>
800028be:	cf d1       	brne	800028b8 <rtc_enable+0x14>
}
800028c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	28 76       	sub	r6,-121

800028c8 <rtc_enable_interrupt>:
}


void rtc_enable_interrupt(volatile avr32_rtc_t *rtc)
{
  rtc->ier = AVR32_RTC_IER_TOPI_MASK;
800028c8:	30 18       	mov	r8,1
800028ca:	99 48       	st.w	r12[0x10],r8
}
800028cc:	5e fc       	retal	r12
800028ce:	d7 03       	nop

800028d0 <rtc_set_top_value>:
  if (global_interrupt_enabled) cpu_irq_enable();
}


void rtc_set_top_value(volatile avr32_rtc_t *rtc, unsigned long top)
{
800028d0:	eb cd 40 c0 	pushm	r6-r7,lr
800028d4:	18 97       	mov	r7,r12
800028d6:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
800028d8:	0e 9c       	mov	r12,r7
800028da:	f0 1f 00 06 	mcall	800028f0 <rtc_set_top_value+0x20>
800028de:	cf d1       	brne	800028d8 <rtc_set_top_value+0x8>
  // Set the new val value
  rtc->top = top;
800028e0:	8f 26       	st.w	r7[0x8],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
800028e2:	0e 9c       	mov	r12,r7
800028e4:	f0 1f 00 03 	mcall	800028f0 <rtc_set_top_value+0x20>
800028e8:	cf d1       	brne	800028e2 <rtc_set_top_value+0x12>
}
800028ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800028ee:	00 00       	add	r0,r0
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	28 76       	sub	r6,-121

800028f4 <rtc_clear_interrupt>:
}


void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800028f4:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800028f8:	e6 18 00 01 	andh	r8,0x1,COH
800028fc:	c0 71       	brne	8000290a <rtc_clear_interrupt+0x16>
800028fe:	d3 03       	ssrf	0x10
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
80002900:	30 18       	mov	r8,1
80002902:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
80002904:	78 78       	ld.w	r8,r12[0x1c]
  if (global_interrupt_enabled) cpu_irq_enable();
80002906:	d5 03       	csrf	0x10
80002908:	5e fc       	retal	r12
void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
8000290a:	30 18       	mov	r8,1
8000290c:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
8000290e:	78 78       	ld.w	r8,r12[0x1c]
80002910:	5e fc       	retal	r12
80002912:	d7 03       	nop

80002914 <rtc_init>:
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
}


int rtc_init(volatile avr32_rtc_t *rtc, unsigned char osc_type, unsigned char psel)
{
80002914:	eb cd 40 e0 	pushm	r5-r7,lr
80002918:	18 97       	mov	r7,r12
8000291a:	16 96       	mov	r6,r11
8000291c:	14 95       	mov	r5,r10
  // If exit, it means that the configuration has not been set correctly
  if (osc_type > (1 << AVR32_RTC_CTRL_CLK32_SIZE) - 1 ||
8000291e:	30 18       	mov	r8,1
80002920:	f0 0b 18 00 	cp.b	r11,r8
80002924:	5f b9       	srhi	r9
80002926:	30 f8       	mov	r8,15
80002928:	f0 0a 18 00 	cp.b	r10,r8
8000292c:	5f b8       	srhi	r8
8000292e:	f3 e8 10 08 	or	r8,r9,r8
80002932:	c0 30       	breq	80002938 <rtc_init+0x24>
80002934:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
      psel > (1 << AVR32_RTC_CTRL_PSEL_SIZE) - 1)
    return 0;

  // If we use the 32-kHz oscillator, we have to enable it first
  if (osc_type == RTC_OSC_32KHZ)
80002938:	30 18       	mov	r8,1
8000293a:	f0 0b 18 00 	cp.b	r11,r8
8000293e:	c0 a1       	brne	80002952 <rtc_init+0x3e>
  {
    // Select the 32-kHz oscillator crystal
    pm_enable_osc32_crystal(&AVR32_PM);
80002940:	fe 7c 0c 00 	mov	r12,-62464
80002944:	f0 1f 00 0f 	mcall	80002980 <rtc_init+0x6c>
    // Enable the 32-kHz clock and wait until the osc32 clock is ready.
    pm_enable_clk32(&AVR32_PM, AVR32_PM_OSCCTRL32_STARTUP_0_RCOSC);
80002948:	30 0b       	mov	r11,0
8000294a:	fe 7c 0c 00 	mov	r12,-62464
8000294e:	f0 1f 00 0e 	mcall	80002984 <rtc_init+0x70>
  }

  // Wait until the rtc accepts writes to the CTRL register
  while (rtc_is_busy(rtc));
80002952:	0e 9c       	mov	r12,r7
80002954:	f0 1f 00 0d 	mcall	80002988 <rtc_init+0x74>
80002958:	cf d1       	brne	80002952 <rtc_init+0x3e>

  // Set the new RTC configuration
  rtc->ctrl = osc_type << AVR32_RTC_CTRL_CLK32_OFFSET |
8000295a:	a3 76       	lsl	r6,0x3
8000295c:	b1 a6       	sbr	r6,0x10
8000295e:	ed e5 10 85 	or	r5,r6,r5<<0x8
80002962:	8f 05       	st.w	r7[0x0],r5
              psel << AVR32_RTC_CTRL_PSEL_OFFSET |
              AVR32_RTC_CTRL_CLKEN_MASK;

  // Wait until write is done
  while (rtc_is_busy(rtc));
80002964:	0e 9c       	mov	r12,r7
80002966:	f0 1f 00 09 	mcall	80002988 <rtc_init+0x74>
8000296a:	cf d1       	brne	80002964 <rtc_init+0x50>

  // Set the counter value to 0
  rtc_set_value(rtc, 0x00000000);
8000296c:	30 0b       	mov	r11,0
8000296e:	0e 9c       	mov	r12,r7
80002970:	f0 1f 00 07 	mcall	8000298c <rtc_init+0x78>
  // Set the top value to 0xFFFFFFFF
  rtc_set_top_value(rtc, 0xFFFFFFFF);
80002974:	3f fb       	mov	r11,-1
80002976:	0e 9c       	mov	r12,r7
80002978:	f0 1f 00 06 	mcall	80002990 <rtc_init+0x7c>
8000297c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	24 fc       	sub	r12,79
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	25 28       	sub	r8,82
80002988:	80 00       	ld.sh	r0,r0[0x0]
8000298a:	28 76       	sub	r6,-121
8000298c:	80 00       	ld.sh	r0,r0[0x0]
8000298e:	28 80       	sub	r0,-120
80002990:	80 00       	ld.sh	r0,r0[0x0]
80002992:	28 d0       	sub	r0,-115

80002994 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002994:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002996:	30 3b       	mov	r11,3
80002998:	33 bc       	mov	r12,59
8000299a:	f0 1f 00 2c 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000299e:	30 3b       	mov	r11,3
800029a0:	33 cc       	mov	r12,60
800029a2:	f0 1f 00 2a 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029a6:	30 3b       	mov	r11,3
800029a8:	33 dc       	mov	r12,61
800029aa:	f0 1f 00 28 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029ae:	30 3b       	mov	r11,3
800029b0:	33 ec       	mov	r12,62
800029b2:	f0 1f 00 26 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029b6:	30 3b       	mov	r11,3
800029b8:	33 3c       	mov	r12,51
800029ba:	f0 1f 00 24 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029be:	30 3b       	mov	r11,3
800029c0:	33 4c       	mov	r12,52
800029c2:	f0 1f 00 22 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029c6:	30 3b       	mov	r11,3
800029c8:	33 5c       	mov	r12,53
800029ca:	f0 1f 00 20 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800029ce:	30 3b       	mov	r11,3
800029d0:	33 6c       	mov	r12,54
800029d2:	f0 1f 00 1e 	mcall	80002a48 <board_init+0xb4>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
800029d6:	30 0b       	mov	r11,0
800029d8:	35 8c       	mov	r12,88
800029da:	f0 1f 00 1c 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
800029de:	30 0b       	mov	r11,0
800029e0:	35 5c       	mov	r12,85
800029e2:	f0 1f 00 1a 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
800029e6:	30 0b       	mov	r11,0
800029e8:	35 2c       	mov	r12,82
800029ea:	f0 1f 00 18 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
800029ee:	30 0b       	mov	r11,0
800029f0:	31 4c       	mov	r12,20
800029f2:	f0 1f 00 16 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
800029f6:	30 0b       	mov	r11,0
800029f8:	31 9c       	mov	r12,25
800029fa:	f0 1f 00 14 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
800029fe:	30 0b       	mov	r11,0
80002a00:	31 ac       	mov	r12,26
80002a02:	f0 1f 00 12 	mcall	80002a48 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80002a06:	30 0b       	mov	r11,0
80002a08:	31 bc       	mov	r12,27
80002a0a:	f0 1f 00 10 	mcall	80002a48 <board_init+0xb4>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002a0e:	30 4b       	mov	r11,4
80002a10:	48 fc       	lddpc	r12,80002a4c <board_init+0xb8>
80002a12:	f0 1f 00 10 	mcall	80002a50 <board_init+0xbc>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80002a16:	30 4b       	mov	r11,4
80002a18:	48 fc       	lddpc	r12,80002a54 <board_init+0xc0>
80002a1a:	f0 1f 00 0e 	mcall	80002a50 <board_init+0xbc>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80002a1e:	30 0b       	mov	r11,0
80002a20:	30 2c       	mov	r12,2
80002a22:	f0 1f 00 0a 	mcall	80002a48 <board_init+0xb4>
80002a26:	30 0b       	mov	r11,0
80002a28:	30 7c       	mov	r12,7
80002a2a:	f0 1f 00 08 	mcall	80002a48 <board_init+0xb4>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
80002a2e:	30 2b       	mov	r11,2
80002a30:	48 ac       	lddpc	r12,80002a58 <board_init+0xc4>
80002a32:	f0 1f 00 08 	mcall	80002a50 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
80002a36:	30 2b       	mov	r11,2
80002a38:	48 9c       	lddpc	r12,80002a5c <board_init+0xc8>
80002a3a:	f0 1f 00 06 	mcall	80002a50 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
80002a3e:	30 2b       	mov	r11,2
80002a40:	48 8c       	lddpc	r12,80002a60 <board_init+0xcc>
80002a42:	f0 1f 00 04 	mcall	80002a50 <board_init+0xbc>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80002a46:	d8 02       	popm	pc
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	2b 3c       	sub	r12,-77
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	8e 50       	ld.sh	r0,r7[0xa]
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	2b 0c       	sub	r12,-80
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	8e 00       	ld.sh	r0,r7[0x0]
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	8e 40       	ld.sh	r0,r7[0x8]
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	8e 30       	ld.sh	r0,r7[0x6]
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	8e 20       	ld.sh	r0,r7[0x4]

80002a64 <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002a64:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80002a68:	49 28       	lddpc	r8,80002ab0 <LED_Display+0x4c>
80002a6a:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80002a6c:	49 28       	lddpc	r8,80002ab4 <LED_Display+0x50>
80002a6e:	f0 c9 ff 80 	sub	r9,r8,-128
80002a72:	12 38       	cp.w	r8,r9
80002a74:	5e 2c       	reths	r12
80002a76:	10 9b       	mov	r11,r8
80002a78:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
80002a7a:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002a7e:	f0 f9 ff fc 	ld.w	r9,r8[-4]
80002a82:	a9 69       	lsl	r9,0x8
80002a84:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
80002a88:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002a8c:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
80002a90:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002a94:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
80002a98:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002a9c:	70 0a       	ld.w	r10,r8[0x0]
80002a9e:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002aa2:	70 0a       	ld.w	r10,r8[0x0]
80002aa4:	93 1a       	st.w	r9[0x4],r10
80002aa6:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80002aa8:	16 38       	cp.w	r8,r11
80002aaa:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
80002aac:	a1 9c       	lsr	r12,0x1
80002aae:	ce 8b       	rjmp	80002a7e <LED_Display+0x1a>
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 0c       	add	r12,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	8e 70       	ld.sh	r0,r7[0xe]

80002ab8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ab8:	f8 08 16 05 	lsr	r8,r12,0x5
80002abc:	a9 68       	lsl	r8,0x8
80002abe:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002ac2:	58 1b       	cp.w	r11,1
80002ac4:	c0 d0       	breq	80002ade <gpio_enable_module_pin+0x26>
80002ac6:	c0 63       	brcs	80002ad2 <gpio_enable_module_pin+0x1a>
80002ac8:	58 2b       	cp.w	r11,2
80002aca:	c1 00       	breq	80002aea <gpio_enable_module_pin+0x32>
80002acc:	58 3b       	cp.w	r11,3
80002ace:	c1 40       	breq	80002af6 <gpio_enable_module_pin+0x3e>
80002ad0:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002ad2:	30 19       	mov	r9,1
80002ad4:	f2 0c 09 49 	lsl	r9,r9,r12
80002ad8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ada:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002adc:	c1 28       	rjmp	80002b00 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002ade:	30 19       	mov	r9,1
80002ae0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ae4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ae6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002ae8:	c0 c8       	rjmp	80002b00 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002aea:	30 19       	mov	r9,1
80002aec:	f2 0c 09 49 	lsl	r9,r9,r12
80002af0:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002af2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002af4:	c0 68       	rjmp	80002b00 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002af6:	30 19       	mov	r9,1
80002af8:	f2 0c 09 49 	lsl	r9,r9,r12
80002afc:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002afe:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002b00:	30 19       	mov	r9,1
80002b02:	f2 0c 09 4c 	lsl	r12,r9,r12
80002b06:	91 2c       	st.w	r8[0x8],r12
80002b08:	5e fd       	retal	0
80002b0a:	d7 03       	nop

80002b0c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002b0c:	d4 21       	pushm	r4-r7,lr
80002b0e:	18 97       	mov	r7,r12
80002b10:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002b12:	58 0b       	cp.w	r11,0
80002b14:	c0 31       	brne	80002b1a <gpio_enable_module+0xe>
80002b16:	30 05       	mov	r5,0
80002b18:	c0 d8       	rjmp	80002b32 <gpio_enable_module+0x26>
80002b1a:	30 06       	mov	r6,0
80002b1c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002b1e:	6e 1b       	ld.w	r11,r7[0x4]
80002b20:	6e 0c       	ld.w	r12,r7[0x0]
80002b22:	f0 1f 00 06 	mcall	80002b38 <gpio_enable_module+0x2c>
80002b26:	18 45       	or	r5,r12
		gpiomap++;
80002b28:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002b2a:	2f f6       	sub	r6,-1
80002b2c:	0c 34       	cp.w	r4,r6
80002b2e:	fe 9b ff f8 	brhi	80002b1e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002b32:	0a 9c       	mov	r12,r5
80002b34:	d8 22       	popm	r4-r7,pc
80002b36:	00 00       	add	r0,r0
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	2a b8       	sub	r8,-85

80002b3c <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002b3c:	f8 08 16 05 	lsr	r8,r12,0x5
80002b40:	a9 68       	lsl	r8,0x8
80002b42:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002b46:	16 99       	mov	r9,r11
80002b48:	e2 19 00 04 	andl	r9,0x4,COH
80002b4c:	c0 70       	breq	80002b5a <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 0c 09 49 	lsl	r9,r9,r12
80002b54:	f1 49 00 74 	st.w	r8[116],r9
80002b58:	c0 68       	rjmp	80002b64 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002b5a:	30 19       	mov	r9,1
80002b5c:	f2 0c 09 49 	lsl	r9,r9,r12
80002b60:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002b64:	16 99       	mov	r9,r11
80002b66:	e2 19 00 80 	andl	r9,0x80,COH
80002b6a:	c2 40       	breq	80002bb2 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002b6c:	16 99       	mov	r9,r11
80002b6e:	e2 19 01 80 	andl	r9,0x180,COH
80002b72:	c0 90       	breq	80002b84 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002b74:	30 19       	mov	r9,1
80002b76:	f2 0c 09 49 	lsl	r9,r9,r12
80002b7a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002b7e:	f1 49 00 b8 	st.w	r8[184],r9
80002b82:	c1 88       	rjmp	80002bb2 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002b84:	16 99       	mov	r9,r11
80002b86:	e2 19 02 80 	andl	r9,0x280,COH
80002b8a:	c0 90       	breq	80002b9c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002b8c:	30 19       	mov	r9,1
80002b8e:	f2 0c 09 49 	lsl	r9,r9,r12
80002b92:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002b96:	f1 49 00 b8 	st.w	r8[184],r9
80002b9a:	c0 c8       	rjmp	80002bb2 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002b9c:	16 99       	mov	r9,r11
80002b9e:	e2 19 03 80 	andl	r9,0x380,COH
80002ba2:	c0 80       	breq	80002bb2 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002ba4:	30 19       	mov	r9,1
80002ba6:	f2 0c 09 49 	lsl	r9,r9,r12
80002baa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002bae:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002bb2:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002bb6:	c1 50       	breq	80002be0 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002bb8:	e2 1b 00 02 	andl	r11,0x2,COH
80002bbc:	c0 70       	breq	80002bca <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002bbe:	30 19       	mov	r9,1
80002bc0:	f2 0c 09 49 	lsl	r9,r9,r12
80002bc4:	f1 49 00 54 	st.w	r8[84],r9
80002bc8:	c0 68       	rjmp	80002bd4 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002bca:	30 19       	mov	r9,1
80002bcc:	f2 0c 09 49 	lsl	r9,r9,r12
80002bd0:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002bd4:	30 19       	mov	r9,1
80002bd6:	f2 0c 09 49 	lsl	r9,r9,r12
80002bda:	f1 49 00 44 	st.w	r8[68],r9
80002bde:	c0 68       	rjmp	80002bea <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002be0:	30 19       	mov	r9,1
80002be2:	f2 0c 09 49 	lsl	r9,r9,r12
80002be6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002bea:	30 19       	mov	r9,1
80002bec:	f2 0c 09 4c 	lsl	r12,r9,r12
80002bf0:	91 1c       	st.w	r8[0x4],r12
}
80002bf2:	5e fc       	retal	r12

80002bf4 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002bf4:	f8 08 16 05 	lsr	r8,r12,0x5
80002bf8:	a9 68       	lsl	r8,0x8
80002bfa:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002bfe:	30 19       	mov	r9,1
80002c00:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c04:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002c08:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c0c:	91 1c       	st.w	r8[0x4],r12
}
80002c0e:	5e fc       	retal	r12

80002c10 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c10:	f8 08 16 05 	lsr	r8,r12,0x5
80002c14:	a9 68       	lsl	r8,0x8
80002c16:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002c1a:	30 19       	mov	r9,1
80002c1c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c20:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002c24:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002c28:	91 1c       	st.w	r8[0x4],r12
}
80002c2a:	5e fc       	retal	r12

80002c2c <gpio_enable_pin_glitch_filter>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c2c:	f8 08 16 05 	lsr	r8,r12,0x5
80002c30:	a9 68       	lsl	r8,0x8
80002c32:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80002c36:	30 19       	mov	r9,1
80002c38:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c3c:	f1 4c 00 c4 	st.w	r8[196],r12
}
80002c40:	5e fc       	retal	r12

80002c42 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c42:	f8 08 16 05 	lsr	r8,r12,0x5
80002c46:	a9 68       	lsl	r8,0x8
80002c48:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80002c4c:	30 19       	mov	r9,1
80002c4e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c52:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80002c56:	12 3b       	cp.w	r11,r9
80002c58:	c0 a0       	breq	80002c6c <gpio_enable_pin_interrupt+0x2a>
80002c5a:	c0 43       	brcs	80002c62 <gpio_enable_pin_interrupt+0x20>
80002c5c:	58 2b       	cp.w	r11,2
80002c5e:	c1 11       	brne	80002c80 <gpio_enable_pin_interrupt+0x3e>
80002c60:	c0 b8       	rjmp	80002c76 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002c62:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002c66:	f1 4c 00 b8 	st.w	r8[184],r12
80002c6a:	c0 c8       	rjmp	80002c82 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80002c6c:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80002c70:	f1 4c 00 b8 	st.w	r8[184],r12
80002c74:	c0 78       	rjmp	80002c82 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80002c76:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
80002c7a:	f1 4c 00 b4 	st.w	r8[180],r12
80002c7e:	c0 28       	rjmp	80002c82 <gpio_enable_pin_interrupt+0x40>
80002c80:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80002c82:	f1 4c 00 94 	st.w	r8[148],r12
80002c86:	5e fd       	retal	0

80002c88 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002c88:	f8 08 16 05 	lsr	r8,r12,0x5
80002c8c:	a9 68       	lsl	r8,0x8
80002c8e:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80002c92:	30 19       	mov	r9,1
80002c94:	f2 0c 09 4c 	lsl	r12,r9,r12
80002c98:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002c9c:	5e fc       	retal	r12

80002c9e <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002c9e:	c0 08       	rjmp	80002c9e <_unhandled_interrupt>

80002ca0 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002ca0:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80002ca4:	49 99       	lddpc	r9,80002d08 <INTC_register_interrupt+0x68>
80002ca6:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002caa:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002cae:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002cb0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002cb4:	58 0a       	cp.w	r10,0
80002cb6:	c0 91       	brne	80002cc8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002cb8:	49 59       	lddpc	r9,80002d0c <INTC_register_interrupt+0x6c>
80002cba:	49 6a       	lddpc	r10,80002d10 <INTC_register_interrupt+0x70>
80002cbc:	12 1a       	sub	r10,r9
80002cbe:	fe 79 08 00 	mov	r9,-63488
80002cc2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002cc6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002cc8:	58 1a       	cp.w	r10,1
80002cca:	c0 a1       	brne	80002cde <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002ccc:	49 09       	lddpc	r9,80002d0c <INTC_register_interrupt+0x6c>
80002cce:	49 2a       	lddpc	r10,80002d14 <INTC_register_interrupt+0x74>
80002cd0:	12 1a       	sub	r10,r9
80002cd2:	bf aa       	sbr	r10,0x1e
80002cd4:	fe 79 08 00 	mov	r9,-63488
80002cd8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002cdc:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002cde:	58 2a       	cp.w	r10,2
80002ce0:	c0 a1       	brne	80002cf4 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002ce2:	48 b9       	lddpc	r9,80002d0c <INTC_register_interrupt+0x6c>
80002ce4:	48 da       	lddpc	r10,80002d18 <INTC_register_interrupt+0x78>
80002ce6:	12 1a       	sub	r10,r9
80002ce8:	bf ba       	sbr	r10,0x1f
80002cea:	fe 79 08 00 	mov	r9,-63488
80002cee:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002cf2:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80002cf4:	48 69       	lddpc	r9,80002d0c <INTC_register_interrupt+0x6c>
80002cf6:	48 aa       	lddpc	r10,80002d1c <INTC_register_interrupt+0x7c>
80002cf8:	12 1a       	sub	r10,r9
80002cfa:	ea 1a c0 00 	orh	r10,0xc000
80002cfe:	fe 79 08 00 	mov	r9,-63488
80002d02:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002d06:	5e fc       	retal	r12
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	8e f0       	ld.uh	r0,r7[0xe]
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	8c 00       	ld.sh	r0,r6[0x0]
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	8d 04       	st.w	r6[0x0],r4
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	8d 12       	st.w	r6[0x4],r2
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	8d 20       	st.w	r6[0x8],r0
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	8d 2e       	st.w	r6[0x8],lr

80002d20 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002d20:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002d22:	49 18       	lddpc	r8,80002d64 <INTC_init_interrupts+0x44>
80002d24:	e3 b8 00 01 	mtsr	0x4,r8
80002d28:	49 0e       	lddpc	lr,80002d68 <INTC_init_interrupts+0x48>
80002d2a:	30 07       	mov	r7,0
80002d2c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002d2e:	49 0c       	lddpc	r12,80002d6c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002d30:	49 05       	lddpc	r5,80002d70 <INTC_init_interrupts+0x50>
80002d32:	10 15       	sub	r5,r8
80002d34:	fe 76 08 00 	mov	r6,-63488
80002d38:	c1 08       	rjmp	80002d58 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002d3a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002d3c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002d3e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002d40:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002d44:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002d46:	10 3a       	cp.w	r10,r8
80002d48:	fe 9b ff fc 	brhi	80002d40 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002d4c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002d50:	2f f7       	sub	r7,-1
80002d52:	2f 8e       	sub	lr,-8
80002d54:	59 47       	cp.w	r7,20
80002d56:	c0 50       	breq	80002d60 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002d58:	7c 08       	ld.w	r8,lr[0x0]
80002d5a:	58 08       	cp.w	r8,0
80002d5c:	ce f1       	brne	80002d3a <INTC_init_interrupts+0x1a>
80002d5e:	cf 7b       	rjmp	80002d4c <INTC_init_interrupts+0x2c>
80002d60:	d8 22       	popm	r4-r7,pc
80002d62:	00 00       	add	r0,r0
80002d64:	80 00       	ld.sh	r0,r0[0x0]
80002d66:	8c 00       	ld.sh	r0,r6[0x0]
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	8e f0       	ld.uh	r0,r7[0xe]
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	2c 9e       	sub	lr,-55
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	8d 04       	st.w	r6[0x0],r4

80002d74 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002d74:	fe 78 08 00 	mov	r8,-63488
80002d78:	e0 69 00 83 	mov	r9,131
80002d7c:	f2 0c 01 0c 	sub	r12,r9,r12
80002d80:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002d84:	f2 ca ff c0 	sub	r10,r9,-64
80002d88:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002d8c:	58 08       	cp.w	r8,0
80002d8e:	c0 21       	brne	80002d92 <_get_interrupt_handler+0x1e>
80002d90:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002d92:	f0 08 12 00 	clz	r8,r8
80002d96:	48 5a       	lddpc	r10,80002da8 <_get_interrupt_handler+0x34>
80002d98:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002d9c:	f0 08 11 1f 	rsub	r8,r8,31
80002da0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002da2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002da6:	5e fc       	retal	r12
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	8e f0       	ld.uh	r0,r7[0xe]

80002dac <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80002dac:	f8 c8 00 01 	sub	r8,r12,1
80002db0:	f0 0b 00 0b 	add	r11,r8,r11
80002db4:	f6 0c 0d 0a 	divu	r10,r11,r12
80002db8:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80002dba:	f4 c8 00 01 	sub	r8,r10,1
80002dbe:	e0 48 00 fe 	cp.w	r8,254
80002dc2:	e0 88 00 03 	brls	80002dc8 <getBaudDiv+0x1c>
80002dc6:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80002dc8:	5c 8c       	casts.h	r12
}
80002dca:	5e fc       	retal	r12

80002dcc <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80002dcc:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002dd0:	30 18       	mov	r8,1
80002dd2:	f0 09 18 00 	cp.b	r9,r8
80002dd6:	e0 88 00 04 	brls	80002dde <spi_initMaster+0x12>
80002dda:	30 2c       	mov	r12,2
80002ddc:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002dde:	e0 68 00 80 	mov	r8,128
80002de2:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80002de4:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80002de6:	30 19       	mov	r9,1
80002de8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002dec:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002df0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80002df4:	30 09       	mov	r9,0
80002df6:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002dfa:	30 fa       	mov	r10,15
80002dfc:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80002e00:	99 18       	st.w	r12[0x4],r8
80002e02:	5e f9       	retal	r9

80002e04 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80002e04:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80002e06:	30 18       	mov	r8,1
80002e08:	f0 0b 18 00 	cp.b	r11,r8
80002e0c:	5f be       	srhi	lr
80002e0e:	f0 0a 18 00 	cp.b	r10,r8
80002e12:	5f b8       	srhi	r8
80002e14:	fd e8 10 08 	or	r8,lr,r8
80002e18:	c0 30       	breq	80002e1e <spi_selectionMode+0x1a>
80002e1a:	30 2c       	mov	r12,2
80002e1c:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80002e1e:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80002e20:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002e24:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80002e28:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80002e2c:	99 18       	st.w	r12[0x4],r8
80002e2e:	d8 0a       	popm	pc,r12=0

80002e30 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002e30:	78 18       	ld.w	r8,r12[0x4]
80002e32:	ea 18 00 0f 	orh	r8,0xf
80002e36:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002e38:	78 18       	ld.w	r8,r12[0x4]
80002e3a:	e2 18 00 04 	andl	r8,0x4,COH
80002e3e:	c0 f0       	breq	80002e5c <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80002e40:	30 e8       	mov	r8,14
80002e42:	f0 0b 18 00 	cp.b	r11,r8
80002e46:	e0 8b 00 19 	brhi	80002e78 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80002e4a:	78 18       	ld.w	r8,r12[0x4]
80002e4c:	b1 6b       	lsl	r11,0x10
80002e4e:	ea 1b ff f0 	orh	r11,0xfff0
80002e52:	e8 1b ff ff 	orl	r11,0xffff
80002e56:	10 6b       	and	r11,r8
80002e58:	99 1b       	st.w	r12[0x4],r11
80002e5a:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80002e5c:	30 38       	mov	r8,3
80002e5e:	f0 0b 18 00 	cp.b	r11,r8
80002e62:	e0 8b 00 0b 	brhi	80002e78 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002e66:	78 18       	ld.w	r8,r12[0x4]
80002e68:	2f 0b       	sub	r11,-16
80002e6a:	30 19       	mov	r9,1
80002e6c:	f2 0b 09 4b 	lsl	r11,r9,r11
80002e70:	5c db       	com	r11
80002e72:	10 6b       	and	r11,r8
80002e74:	99 1b       	st.w	r12[0x4],r11
80002e76:	5e fd       	retal	0
80002e78:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80002e7a:	5e fc       	retal	r12

80002e7c <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80002e7c:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002e80:	c0 58       	rjmp	80002e8a <spi_unselectChip+0xe>
		if (!timeout--) {
80002e82:	58 08       	cp.w	r8,0
80002e84:	c0 21       	brne	80002e88 <spi_unselectChip+0xc>
80002e86:	5e ff       	retal	1
80002e88:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002e8a:	78 49       	ld.w	r9,r12[0x10]
80002e8c:	e2 19 02 00 	andl	r9,0x200,COH
80002e90:	cf 90       	breq	80002e82 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002e92:	78 18       	ld.w	r8,r12[0x4]
80002e94:	ea 18 00 0f 	orh	r8,0xf
80002e98:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002e9a:	fc 18 01 00 	movh	r8,0x100
80002e9e:	99 08       	st.w	r12[0x0],r8
80002ea0:	5e fd       	retal	0
80002ea2:	d7 03       	nop

80002ea4 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80002ea4:	eb cd 40 f8 	pushm	r3-r7,lr
80002ea8:	18 95       	mov	r5,r12
80002eaa:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002eac:	f7 36 00 0c 	ld.ub	r6,r11[12]
80002eb0:	30 38       	mov	r8,3
80002eb2:	f0 06 18 00 	cp.b	r6,r8
80002eb6:	e0 8b 00 4d 	brhi	80002f50 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80002eba:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002ebe:	30 18       	mov	r8,1
80002ec0:	f0 04 18 00 	cp.b	r4,r8
80002ec4:	e0 8b 00 46 	brhi	80002f50 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80002ec8:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80002ecc:	30 78       	mov	r8,7
80002ece:	f0 03 18 00 	cp.b	r3,r8
80002ed2:	e0 88 00 3f 	brls	80002f50 <spi_setupChipReg+0xac>
80002ed6:	31 08       	mov	r8,16
80002ed8:	f0 03 18 00 	cp.b	r3,r8
80002edc:	e0 8b 00 3a 	brhi	80002f50 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80002ee0:	14 9b       	mov	r11,r10
80002ee2:	6e 1c       	ld.w	r12,r7[0x4]
80002ee4:	f0 1f 00 1d 	mcall	80002f58 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80002ee8:	c3 45       	brlt	80002f50 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80002eea:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80002eec:	ec 09 16 01 	lsr	r9,r6,0x1
80002ef0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80002ef4:	ec 16 00 01 	eorl	r6,0x1
80002ef8:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80002efc:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80002f00:	20 83       	sub	r3,8
80002f02:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80002f06:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80002f0a:	ef 39 00 09 	ld.ub	r9,r7[9]
80002f0e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80002f12:	ef 39 00 0a 	ld.ub	r9,r7[10]
80002f16:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80002f1a:	0f 89       	ld.ub	r9,r7[0x0]
80002f1c:	30 1a       	mov	r10,1
80002f1e:	f4 09 18 00 	cp.b	r9,r10
80002f22:	c0 e0       	breq	80002f3e <spi_setupChipReg+0x9a>
80002f24:	c0 a3       	brcs	80002f38 <spi_setupChipReg+0x94>
80002f26:	30 2a       	mov	r10,2
80002f28:	f4 09 18 00 	cp.b	r9,r10
80002f2c:	c0 c0       	breq	80002f44 <spi_setupChipReg+0xa0>
80002f2e:	30 3a       	mov	r10,3
80002f30:	f4 09 18 00 	cp.b	r9,r10
80002f34:	c0 e1       	brne	80002f50 <spi_setupChipReg+0xac>
80002f36:	c0 a8       	rjmp	80002f4a <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80002f38:	8b c8       	st.w	r5[0x30],r8
80002f3a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80002f3e:	8b d8       	st.w	r5[0x34],r8
80002f40:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80002f44:	8b e8       	st.w	r5[0x38],r8
80002f46:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80002f4a:	8b f8       	st.w	r5[0x3c],r8
80002f4c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80002f50:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80002f52:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002f56:	00 00       	add	r0,r0
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2d ac       	sub	r12,-38

80002f5c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80002f5c:	30 18       	mov	r8,1
80002f5e:	99 08       	st.w	r12[0x0],r8
}
80002f60:	5e fc       	retal	r12

80002f62 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80002f62:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002f66:	c0 58       	rjmp	80002f70 <spi_write+0xe>
		if (!timeout--) {
80002f68:	58 08       	cp.w	r8,0
80002f6a:	c0 21       	brne	80002f6e <spi_write+0xc>
80002f6c:	5e ff       	retal	1
80002f6e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80002f70:	78 49       	ld.w	r9,r12[0x10]
80002f72:	e2 19 00 02 	andl	r9,0x2,COH
80002f76:	cf 90       	breq	80002f68 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80002f78:	5c 7b       	castu.h	r11
80002f7a:	99 3b       	st.w	r12[0xc],r11
80002f7c:	5e fd       	retal	0

80002f7e <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80002f7e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002f82:	c0 58       	rjmp	80002f8c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80002f84:	58 08       	cp.w	r8,0
80002f86:	c0 21       	brne	80002f8a <spi_read+0xc>
80002f88:	5e ff       	retal	1
80002f8a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80002f8c:	78 49       	ld.w	r9,r12[0x10]
80002f8e:	e2 19 02 01 	andl	r9,0x201,COH
80002f92:	e0 49 02 01 	cp.w	r9,513
80002f96:	cf 71       	brne	80002f84 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80002f98:	78 28       	ld.w	r8,r12[0x8]
80002f9a:	b6 08       	st.h	r11[0x0],r8
80002f9c:	5e fd       	retal	0
80002f9e:	d7 03       	nop

80002fa0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002fa0:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002fa4:	fe c0 a3 a4 	sub	r0,pc,-23644

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002fa8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002fac:	d5 53       	csrf	0x15
  cp      r0, r1
80002fae:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002fb0:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80002fb4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80002fb6:	c0 72       	brcc	80002fc4 <idata_load_loop_end>
  cp      r0, r1
80002fb8:	fe c2 9a 60 	sub	r2,pc,-26016

80002fbc <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002fbc:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80002fbe:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80002fc0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80002fc2:	cf d3       	brcs	80002fbc <idata_load_loop>

80002fc4 <idata_load_loop_end>:
  mov     r2, 0
80002fc4:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002fc8:	e0 61 06 68 	mov	r1,1640
  cp      r0, r1
  brlo    udata_clear_loop
80002fcc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002fce:	c0 62       	brcc	80002fda <udata_clear_loop_end>
80002fd0:	30 02       	mov	r2,0
80002fd2:	30 03       	mov	r3,0

80002fd4 <udata_clear_loop>:
80002fd4:	a1 22       	st.d	r0++,r2
80002fd6:	02 30       	cp.w	r0,r1
80002fd8:	cf e3       	brcs	80002fd4 <udata_clear_loop>

80002fda <udata_clear_loop_end>:
80002fda:	fe cf fd 6a 	sub	pc,pc,-662
80002fde:	d7 03       	nop

80002fe0 <software_delay>:
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
	delay_init( FOSC0 );
	dip204_init(100, 1);
}

static void software_delay(void){
80002fe0:	20 1d       	sub	sp,4
	volatile int i;
	for (i=0; i<1000000; i++);
80002fe2:	30 08       	mov	r8,0
80002fe4:	50 08       	stdsp	sp[0x0],r8
80002fe6:	40 08       	lddsp	r8,sp[0x0]
80002fe8:	ee 58 42 3f 	cp.w	r8,999999
80002fec:	e0 89 00 0a 	brgt	80003000 <software_delay+0x20>
80002ff0:	40 08       	lddsp	r8,sp[0x0]
80002ff2:	2f f8       	sub	r8,-1
80002ff4:	50 08       	stdsp	sp[0x0],r8
80002ff6:	40 08       	lddsp	r8,sp[0x0]
80002ff8:	ee 58 42 3f 	cp.w	r8,999999
80002ffc:	fe 9a ff fa 	brle	80002ff0 <software_delay+0x10>
}
80003000:	2f fd       	sub	sp,-4
80003002:	5e fc       	retal	r12

80003004 <but_interrupt>:
}


__attribute__((__interrupt__))

void but_interrupt(void){
80003004:	d4 01       	pushm	lr
	dip204_clear_display();
80003006:	f0 1f 00 11 	mcall	80003048 <but_interrupt+0x44>
	dip204_set_cursor_position(1,1);
8000300a:	30 1b       	mov	r11,1
8000300c:	16 9c       	mov	r12,r11
8000300e:	f0 1f 00 10 	mcall	8000304c <but_interrupt+0x48>
	
	if (vol_state == 0)
80003012:	49 08       	lddpc	r8,80003050 <but_interrupt+0x4c>
80003014:	70 08       	ld.w	r8,r8[0x0]
80003016:	58 08       	cp.w	r8,0
80003018:	c0 51       	brne	80003022 <but_interrupt+0x1e>
	{
		vol_state = 1;
8000301a:	30 19       	mov	r9,1
8000301c:	48 d8       	lddpc	r8,80003050 <but_interrupt+0x4c>
8000301e:	91 09       	st.w	r8[0x0],r9
80003020:	c0 88       	rjmp	80003030 <but_interrupt+0x2c>
	}
	else if (vol_state == 1)
80003022:	48 c8       	lddpc	r8,80003050 <but_interrupt+0x4c>
80003024:	70 08       	ld.w	r8,r8[0x0]
80003026:	58 18       	cp.w	r8,1
80003028:	c0 41       	brne	80003030 <but_interrupt+0x2c>
	{
		vol_state = 0;
8000302a:	30 09       	mov	r9,0
8000302c:	48 98       	lddpc	r8,80003050 <but_interrupt+0x4c>
8000302e:	91 09       	st.w	r8[0x0],r9
	}
	dip204_printf_string("Sleep: %i", vol_state);
80003030:	48 88       	lddpc	r8,80003050 <but_interrupt+0x4c>
80003032:	70 08       	ld.w	r8,r8[0x0]
80003034:	1a d8       	st.w	--sp,r8
80003036:	48 8c       	lddpc	r12,80003054 <but_interrupt+0x50>
80003038:	f0 1f 00 08 	mcall	80003058 <but_interrupt+0x54>
	gpio_clear_pin_interrupt_flag(88);
8000303c:	35 8c       	mov	r12,88
8000303e:	f0 1f 00 08 	mcall	8000305c <but_interrupt+0x58>
80003042:	2f fd       	sub	sp,-4
}
80003044:	d4 02       	popm	lr
80003046:	d6 03       	rete
80003048:	80 00       	ld.sh	r0,r0[0x0]
8000304a:	21 ec       	sub	r12,30
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	21 90       	sub	r0,25
80003050:	00 00       	add	r0,r0
80003052:	00 10       	sub	r0,r0
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	8f b0       	st.w	r7[0x2c],r0
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	20 f8       	sub	r8,15
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	2c 88       	sub	r8,-56

80003060 <rtc_irq>:



__attribute__((__interrupt__))

void rtc_irq(void){
80003060:	d4 01       	pushm	lr
	static int led_state = 0;
	
	if (vol_state == 1){
80003062:	48 e8       	lddpc	r8,80003098 <rtc_irq+0x38>
80003064:	70 08       	ld.w	r8,r8[0x0]
80003066:	58 18       	cp.w	r8,1
80003068:	c1 21       	brne	8000308c <rtc_irq+0x2c>
		if (led_state == 0) {
8000306a:	48 d8       	lddpc	r8,8000309c <rtc_irq+0x3c>
8000306c:	70 08       	ld.w	r8,r8[0x0]
8000306e:	58 08       	cp.w	r8,0
80003070:	c0 81       	brne	80003080 <rtc_irq+0x20>
			LED_Display(LED0);
80003072:	30 1c       	mov	r12,1
80003074:	f0 1f 00 0b 	mcall	800030a0 <rtc_irq+0x40>
			led_state = 1;
80003078:	30 19       	mov	r9,1
8000307a:	48 98       	lddpc	r8,8000309c <rtc_irq+0x3c>
8000307c:	91 09       	st.w	r8[0x0],r9
8000307e:	c0 78       	rjmp	8000308c <rtc_irq+0x2c>
		}
		else {
			LED_Display(LED1);
80003080:	30 2c       	mov	r12,2
80003082:	f0 1f 00 08 	mcall	800030a0 <rtc_irq+0x40>
			led_state = 0;
80003086:	30 09       	mov	r9,0
80003088:	48 58       	lddpc	r8,8000309c <rtc_irq+0x3c>
8000308a:	91 09       	st.w	r8[0x0],r9
		}
	}
	rtc_clear_interrupt(&AVR32_RTC);
8000308c:	fe 7c 0d 00 	mov	r12,-62208
80003090:	f0 1f 00 05 	mcall	800030a4 <rtc_irq+0x44>
}
80003094:	d4 02       	popm	lr
80003096:	d6 03       	rete
80003098:	00 00       	add	r0,r0
8000309a:	00 10       	sub	r0,r0
8000309c:	00 00       	add	r0,r0
8000309e:	06 28       	rsub	r8,r3
800030a0:	80 00       	ld.sh	r0,r0[0x0]
800030a2:	2a 64       	sub	r4,-90
800030a4:	80 00       	ld.sh	r0,r0[0x0]
800030a6:	28 f4       	sub	r4,-113

800030a8 <set_interrupts>:
	dip204_hide_cursor();
	*/
	while(1){}
}

void set_interrupts(unsigned int ticks_to_interrupt, unsigned int rtcsel){
800030a8:	eb cd 40 c0 	pushm	r6-r7,lr
800030ac:	18 97       	mov	r7,r12
800030ae:	16 96       	mov	r6,r11
	
	Disable_global_interrupt();
800030b0:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
800030b2:	f0 1f 00 16 	mcall	80003108 <set_interrupts+0x60>

	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&rtc_irq, AVR32_RTC_IRQ, AVR32_INTC_INT0);
800030b6:	30 0a       	mov	r10,0
800030b8:	32 8b       	mov	r11,40
800030ba:	49 5c       	lddpc	r12,8000310c <set_interrupts+0x64>
800030bc:	f0 1f 00 15 	mcall	80003110 <set_interrupts+0x68>
	rtc_init(&AVR32_RTC, RTC_OSC_32KHZ, rtcsel);
800030c0:	f5 d6 c0 08 	bfextu	r10,r6,0x0,0x8
800030c4:	30 1b       	mov	r11,1
800030c6:	fe 7c 0d 00 	mov	r12,-62208
800030ca:	f0 1f 00 13 	mcall	80003114 <set_interrupts+0x6c>
	// Set top value to 0 to generate an interrupt every seconds */
	rtc_set_top_value(&AVR32_RTC, ticks_to_interrupt);
800030ce:	0e 9b       	mov	r11,r7
800030d0:	fe 7c 0d 00 	mov	r12,-62208
800030d4:	f0 1f 00 11 	mcall	80003118 <set_interrupts+0x70>
	// Enable the interrupts
	rtc_enable_interrupt(&AVR32_RTC);
800030d8:	fe 7c 0d 00 	mov	r12,-62208
800030dc:	f0 1f 00 10 	mcall	8000311c <set_interrupts+0x74>
	// Enable the RTC
	rtc_enable(&AVR32_RTC);
800030e0:	fe 7c 0d 00 	mov	r12,-62208
800030e4:	f0 1f 00 0f 	mcall	80003120 <set_interrupts+0x78>
	
	// Button interrupt
	INTC_register_interrupt(&but_interrupt, (AVR32_GPIO_IRQ_0+88/8), AVR32_INTC_INT0);
800030e8:	30 0a       	mov	r10,0
800030ea:	34 bb       	mov	r11,75
800030ec:	48 ec       	lddpc	r12,80003124 <set_interrupts+0x7c>
800030ee:	f0 1f 00 09 	mcall	80003110 <set_interrupts+0x68>
	gpio_enable_pin_glitch_filter(88);
800030f2:	35 8c       	mov	r12,88
800030f4:	f0 1f 00 0d 	mcall	80003128 <set_interrupts+0x80>
	gpio_enable_pin_interrupt(88, GPIO_FALLING_EDGE);
800030f8:	30 2b       	mov	r11,2
800030fa:	35 8c       	mov	r12,88
800030fc:	f0 1f 00 0c 	mcall	8000312c <set_interrupts+0x84>
	
	Enable_global_interrupt();
80003100:	d5 03       	csrf	0x10
}
80003102:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003106:	00 00       	add	r0,r0
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	2d 20       	sub	r0,-46
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	30 60       	mov	r0,6
80003110:	80 00       	ld.sh	r0,r0[0x0]
80003112:	2c a0       	sub	r0,-54
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	29 14       	sub	r4,-111
80003118:	80 00       	ld.sh	r0,r0[0x0]
8000311a:	28 d0       	sub	r0,-115
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	28 c8       	sub	r8,-116
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	28 a4       	sub	r4,-118
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	30 04       	mov	r4,0
80003128:	80 00       	ld.sh	r0,r0[0x0]
8000312a:	2c 2c       	sub	r12,-62
8000312c:	80 00       	ld.sh	r0,r0[0x0]
8000312e:	2c 42       	sub	r2,-60

80003130 <set_cpu_freq>:
	dip204_hide_cursor();
	*/
	blink_loop();
}

void set_cpu_freq(int cpu_freq, int bus_freq){
80003130:	d4 01       	pushm	lr
80003132:	20 4d       	sub	sp,16
	// Define struct
	// Input parameters in MHz
	pm_freq_param_t freq_parameters;
	freq_parameters.cpu_f = cpu_freq*1000000;
80003134:	ee 78 42 40 	mov	r8,1000000
80003138:	b1 3c       	mul	r12,r8
8000313a:	50 0c       	stdsp	sp[0x0],r12
	freq_parameters.pba_f = bus_freq*1000000;
8000313c:	f6 08 02 48 	mul	r8,r11,r8
80003140:	50 18       	stdsp	sp[0x4],r8
	freq_parameters.osc0_f = FOSC0;
80003142:	e0 68 1b 00 	mov	r8,6912
80003146:	ea 18 00 b7 	orh	r8,0xb7
8000314a:	50 28       	stdsp	sp[0x8],r8
	freq_parameters.osc0_startup = OSC0_STARTUP;
8000314c:	30 38       	mov	r8,3
8000314e:	50 38       	stdsp	sp[0xc],r8
	// Set frequency
	pm_configure_clocks(&freq_parameters);
80003150:	1a 9c       	mov	r12,sp
80003152:	f0 1f 00 03 	mcall	8000315c <set_cpu_freq+0x2c>
}
80003156:	2f cd       	sub	sp,-16
80003158:	d8 02       	popm	pc
8000315a:	00 00       	add	r0,r0
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	26 14       	sub	r4,97

80003160 <part4>:
	}
	dip204_printf_string("Sleep: %i", vol_state);
	gpio_clear_pin_interrupt_flag(88);
}

void part4(void){
80003160:	eb cd 40 f8 	pushm	r3-r7,lr
	int state = 0;

	set_cpu_freq(12,6);
80003164:	30 6b       	mov	r11,6
80003166:	30 cc       	mov	r12,12
80003168:	f0 1f 00 18 	mcall	800031c8 <part4+0x68>
	set_interrupts(0, 14);
8000316c:	30 eb       	mov	r11,14
8000316e:	30 0c       	mov	r12,0
80003170:	f0 1f 00 17 	mcall	800031cc <part4+0x6c>
	
	dip204_clear_display();
80003174:	f0 1f 00 17 	mcall	800031d0 <part4+0x70>
	dip204_set_cursor_position(1,1);
80003178:	30 1b       	mov	r11,1
8000317a:	16 9c       	mov	r12,r11
8000317c:	f0 1f 00 16 	mcall	800031d4 <part4+0x74>
	dip204_printf_string("Sleep: %i", vol_state);
80003180:	49 68       	lddpc	r8,800031d8 <part4+0x78>
80003182:	70 08       	ld.w	r8,r8[0x0]
80003184:	1a d8       	st.w	--sp,r8
80003186:	49 6c       	lddpc	r12,800031dc <part4+0x7c>
80003188:	f0 1f 00 16 	mcall	800031e0 <part4+0x80>
8000318c:	30 06       	mov	r6,0
8000318e:	2f fd       	sub	sp,-4
	
	while(1){
		if(vol_state == 1){
80003190:	49 27       	lddpc	r7,800031d8 <part4+0x78>
			if (state == 0) {
				LED_Display(LED0);
				state = 1;
			}
			else {
				LED_Display(LED1);
80003192:	30 24       	mov	r4,2
80003194:	0c 93       	mov	r3,r6
		if(vol_state == 1){
			SLEEP(AVR32_PM_SMODE_IDLE);
		}
		else if (vol_state == 0){
			if (state == 0) {
				LED_Display(LED0);
80003196:	30 15       	mov	r5,1
	dip204_clear_display();
	dip204_set_cursor_position(1,1);
	dip204_printf_string("Sleep: %i", vol_state);
	
	while(1){
		if(vol_state == 1){
80003198:	6e 08       	ld.w	r8,r7[0x0]
8000319a:	58 18       	cp.w	r8,1
8000319c:	c0 41       	brne	800031a4 <part4+0x44>
			SLEEP(AVR32_PM_SMODE_IDLE);
8000319e:	e9 b0 00 00 	sleep	0x0
800031a2:	cf bb       	rjmp	80003198 <part4+0x38>
		}
		else if (vol_state == 0){
800031a4:	6e 08       	ld.w	r8,r7[0x0]
800031a6:	58 08       	cp.w	r8,0
800031a8:	cf 81       	brne	80003198 <part4+0x38>
			if (state == 0) {
800031aa:	58 06       	cp.w	r6,0
800031ac:	c0 61       	brne	800031b8 <part4+0x58>
				LED_Display(LED0);
800031ae:	0a 9c       	mov	r12,r5
800031b0:	f0 1f 00 0d 	mcall	800031e4 <part4+0x84>
800031b4:	0a 96       	mov	r6,r5
800031b6:	c0 58       	rjmp	800031c0 <part4+0x60>
				state = 1;
			}
			else {
				LED_Display(LED1);
800031b8:	08 9c       	mov	r12,r4
800031ba:	f0 1f 00 0b 	mcall	800031e4 <part4+0x84>
800031be:	06 96       	mov	r6,r3
				state = 0;
			}
			software_delay();
800031c0:	f0 1f 00 0a 	mcall	800031e8 <part4+0x88>
800031c4:	ce ab       	rjmp	80003198 <part4+0x38>
800031c6:	00 00       	add	r0,r0
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	31 30       	mov	r0,19
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	30 a8       	mov	r8,10
800031d0:	80 00       	ld.sh	r0,r0[0x0]
800031d2:	21 ec       	sub	r12,30
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	21 90       	sub	r0,25
800031d8:	00 00       	add	r0,r0
800031da:	00 10       	sub	r0,r0
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	8f b0       	st.w	r7[0x2c],r0
800031e0:	80 00       	ld.sh	r0,r0[0x0]
800031e2:	20 f8       	sub	r8,15
800031e4:	80 00       	ld.sh	r0,r0[0x0]
800031e6:	2a 64       	sub	r4,-90
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	2f e0       	sub	r0,-2

800031ec <config_dip204>:
#include <asf.h>

volatile int vol_state = 1;

int config_dip204(void) {
800031ec:	eb cd 40 80 	pushm	r7,lr
800031f0:	20 4d       	sub	sp,16
		.spck_delay = 0,
		.trans_delay = 0,
		.stay_act = 1,
		.spi_mode = 0,
		.modfdis = 1
	};
800031f2:	49 88       	lddpc	r8,80003250 <config_dip204+0x64>
800031f4:	1a 97       	mov	r7,sp
800031f6:	f0 ea 00 00 	ld.d	r10,r8[0]
800031fa:	fa eb 00 00 	st.d	sp[0],r10
800031fe:	f0 e8 00 08 	ld.d	r8,r8[8]
80003202:	fa e9 00 08 	st.d	sp[8],r8
	
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80003206:	30 4b       	mov	r11,4
80003208:	49 3c       	lddpc	r12,80003254 <config_dip204+0x68>
8000320a:	f0 1f 00 14 	mcall	80003258 <config_dip204+0x6c>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
	spi_initMaster(DIP204_SPI, &spiOptions);
8000320e:	1a 9b       	mov	r11,sp
80003210:	fe 7c 28 00 	mov	r12,-55296
80003214:	f0 1f 00 12 	mcall	8000325c <config_dip204+0x70>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80003218:	30 09       	mov	r9,0
8000321a:	12 9a       	mov	r10,r9
8000321c:	12 9b       	mov	r11,r9
8000321e:	fe 7c 28 00 	mov	r12,-55296
80003222:	f0 1f 00 10 	mcall	80003260 <config_dip204+0x74>
	spi_enable(DIP204_SPI);
80003226:	fe 7c 28 00 	mov	r12,-55296
8000322a:	f0 1f 00 0f 	mcall	80003264 <config_dip204+0x78>
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
8000322e:	e0 6a 1b 00 	mov	r10,6912
80003232:	ea 1a 00 b7 	orh	r10,0xb7
80003236:	1a 9b       	mov	r11,sp
80003238:	fe 7c 28 00 	mov	r12,-55296
8000323c:	f0 1f 00 0b 	mcall	80003268 <config_dip204+0x7c>
	delay_init( FOSC0 );
	dip204_init(100, 1);
80003240:	30 1b       	mov	r11,1
80003242:	36 4c       	mov	r12,100
80003244:	f0 1f 00 0a 	mcall	8000326c <config_dip204+0x80>
}
80003248:	2f cd       	sub	sp,-16
8000324a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000324e:	00 00       	add	r0,r0
80003250:	80 00       	ld.sh	r0,r0[0x0]
80003252:	8f bc       	st.w	r7[0x2c],r12
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	8f 90       	st.w	r7[0x24],r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	2b 0c       	sub	r12,-80
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	2d cc       	sub	r12,-36
80003260:	80 00       	ld.sh	r0,r0[0x0]
80003262:	2e 04       	sub	r4,-32
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	2f 5c       	sub	r12,-11
80003268:	80 00       	ld.sh	r0,r0[0x0]
8000326a:	2e a4       	sub	r4,-22
8000326c:	80 00       	ld.sh	r0,r0[0x0]
8000326e:	22 44       	sub	r4,36

80003270 <main>:
			software_delay();
		}
	}
}

int main(void) {
80003270:	d4 01       	pushm	lr
	board_init();
80003272:	f0 1f 00 04 	mcall	80003280 <main+0x10>
	config_dip204();
80003276:	f0 1f 00 04 	mcall	80003284 <main+0x14>
	// Using support functions
	//part2(12,6);
	// Blink leds with interrupt
	//part3(12,6);
	// Use sleep mode
	part4();
8000327a:	f0 1f 00 04 	mcall	80003288 <main+0x18>
	
	return 0;
	
8000327e:	d8 0a       	popm	pc,r12=0
80003280:	80 00       	ld.sh	r0,r0[0x0]
80003282:	29 94       	sub	r4,-103
80003284:	80 00       	ld.sh	r0,r0[0x0]
80003286:	31 ec       	mov	r12,30
80003288:	80 00       	ld.sh	r0,r0[0x0]
8000328a:	31 60       	mov	r0,22

8000328c <memcpy>:
8000328c:	58 8a       	cp.w	r10,8
8000328e:	c2 f5       	brlt	800032ec <memcpy+0x60>
80003290:	f9 eb 10 09 	or	r9,r12,r11
80003294:	e2 19 00 03 	andl	r9,0x3,COH
80003298:	e0 81 00 97 	brne	800033c6 <memcpy+0x13a>
8000329c:	e0 4a 00 20 	cp.w	r10,32
800032a0:	c3 b4       	brge	80003316 <memcpy+0x8a>
800032a2:	f4 08 14 02 	asr	r8,r10,0x2
800032a6:	f0 09 11 08 	rsub	r9,r8,8
800032aa:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800032ae:	76 69       	ld.w	r9,r11[0x18]
800032b0:	99 69       	st.w	r12[0x18],r9
800032b2:	76 59       	ld.w	r9,r11[0x14]
800032b4:	99 59       	st.w	r12[0x14],r9
800032b6:	76 49       	ld.w	r9,r11[0x10]
800032b8:	99 49       	st.w	r12[0x10],r9
800032ba:	76 39       	ld.w	r9,r11[0xc]
800032bc:	99 39       	st.w	r12[0xc],r9
800032be:	76 29       	ld.w	r9,r11[0x8]
800032c0:	99 29       	st.w	r12[0x8],r9
800032c2:	76 19       	ld.w	r9,r11[0x4]
800032c4:	99 19       	st.w	r12[0x4],r9
800032c6:	76 09       	ld.w	r9,r11[0x0]
800032c8:	99 09       	st.w	r12[0x0],r9
800032ca:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800032ce:	f8 08 00 28 	add	r8,r12,r8<<0x2
800032d2:	e0 1a 00 03 	andl	r10,0x3
800032d6:	f4 0a 11 04 	rsub	r10,r10,4
800032da:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800032de:	17 a9       	ld.ub	r9,r11[0x2]
800032e0:	b0 a9       	st.b	r8[0x2],r9
800032e2:	17 99       	ld.ub	r9,r11[0x1]
800032e4:	b0 99       	st.b	r8[0x1],r9
800032e6:	17 89       	ld.ub	r9,r11[0x0]
800032e8:	b0 89       	st.b	r8[0x0],r9
800032ea:	5e fc       	retal	r12
800032ec:	f4 0a 11 09 	rsub	r10,r10,9
800032f0:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800032f4:	17 f9       	ld.ub	r9,r11[0x7]
800032f6:	b8 f9       	st.b	r12[0x7],r9
800032f8:	17 e9       	ld.ub	r9,r11[0x6]
800032fa:	b8 e9       	st.b	r12[0x6],r9
800032fc:	17 d9       	ld.ub	r9,r11[0x5]
800032fe:	b8 d9       	st.b	r12[0x5],r9
80003300:	17 c9       	ld.ub	r9,r11[0x4]
80003302:	b8 c9       	st.b	r12[0x4],r9
80003304:	17 b9       	ld.ub	r9,r11[0x3]
80003306:	b8 b9       	st.b	r12[0x3],r9
80003308:	17 a9       	ld.ub	r9,r11[0x2]
8000330a:	b8 a9       	st.b	r12[0x2],r9
8000330c:	17 99       	ld.ub	r9,r11[0x1]
8000330e:	b8 99       	st.b	r12[0x1],r9
80003310:	17 89       	ld.ub	r9,r11[0x0]
80003312:	b8 89       	st.b	r12[0x0],r9
80003314:	5e fc       	retal	r12
80003316:	eb cd 40 c0 	pushm	r6-r7,lr
8000331a:	18 99       	mov	r9,r12
8000331c:	22 0a       	sub	r10,32
8000331e:	b7 07       	ld.d	r6,r11++
80003320:	b3 26       	st.d	r9++,r6
80003322:	b7 07       	ld.d	r6,r11++
80003324:	b3 26       	st.d	r9++,r6
80003326:	b7 07       	ld.d	r6,r11++
80003328:	b3 26       	st.d	r9++,r6
8000332a:	b7 07       	ld.d	r6,r11++
8000332c:	b3 26       	st.d	r9++,r6
8000332e:	22 0a       	sub	r10,32
80003330:	cf 74       	brge	8000331e <memcpy+0x92>
80003332:	2f 0a       	sub	r10,-16
80003334:	c0 65       	brlt	80003340 <memcpy+0xb4>
80003336:	b7 07       	ld.d	r6,r11++
80003338:	b3 26       	st.d	r9++,r6
8000333a:	b7 07       	ld.d	r6,r11++
8000333c:	b3 26       	st.d	r9++,r6
8000333e:	21 0a       	sub	r10,16
80003340:	5c 3a       	neg	r10
80003342:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003346:	d7 03       	nop
80003348:	d7 03       	nop
8000334a:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000334e:	f3 66 00 0e 	st.b	r9[14],r6
80003352:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003356:	f3 66 00 0d 	st.b	r9[13],r6
8000335a:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000335e:	f3 66 00 0c 	st.b	r9[12],r6
80003362:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003366:	f3 66 00 0b 	st.b	r9[11],r6
8000336a:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000336e:	f3 66 00 0a 	st.b	r9[10],r6
80003372:	f7 36 00 09 	ld.ub	r6,r11[9]
80003376:	f3 66 00 09 	st.b	r9[9],r6
8000337a:	f7 36 00 08 	ld.ub	r6,r11[8]
8000337e:	f3 66 00 08 	st.b	r9[8],r6
80003382:	f7 36 00 07 	ld.ub	r6,r11[7]
80003386:	f3 66 00 07 	st.b	r9[7],r6
8000338a:	f7 36 00 06 	ld.ub	r6,r11[6]
8000338e:	f3 66 00 06 	st.b	r9[6],r6
80003392:	f7 36 00 05 	ld.ub	r6,r11[5]
80003396:	f3 66 00 05 	st.b	r9[5],r6
8000339a:	f7 36 00 04 	ld.ub	r6,r11[4]
8000339e:	f3 66 00 04 	st.b	r9[4],r6
800033a2:	f7 36 00 03 	ld.ub	r6,r11[3]
800033a6:	f3 66 00 03 	st.b	r9[3],r6
800033aa:	f7 36 00 02 	ld.ub	r6,r11[2]
800033ae:	f3 66 00 02 	st.b	r9[2],r6
800033b2:	f7 36 00 01 	ld.ub	r6,r11[1]
800033b6:	f3 66 00 01 	st.b	r9[1],r6
800033ba:	f7 36 00 00 	ld.ub	r6,r11[0]
800033be:	f3 66 00 00 	st.b	r9[0],r6
800033c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800033c6:	20 1a       	sub	r10,1
800033c8:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800033cc:	f8 0a 0b 09 	st.b	r12[r10],r9
800033d0:	cf b1       	brne	800033c6 <memcpy+0x13a>
800033d2:	5e fc       	retal	r12

800033d4 <_vsprintf_r>:
800033d4:	d4 01       	pushm	lr
800033d6:	21 7d       	sub	sp,92
800033d8:	e0 68 ff ff 	mov	r8,65535
800033dc:	ea 18 7f ff 	orh	r8,0x7fff
800033e0:	50 58       	stdsp	sp[0x14],r8
800033e2:	50 28       	stdsp	sp[0x8],r8
800033e4:	e0 68 02 08 	mov	r8,520
800033e8:	ba 68       	st.h	sp[0xc],r8
800033ea:	3f f8       	mov	r8,-1
800033ec:	50 4b       	stdsp	sp[0x10],r11
800033ee:	50 0b       	stdsp	sp[0x0],r11
800033f0:	ba 78       	st.h	sp[0xe],r8
800033f2:	1a 9b       	mov	r11,sp
800033f4:	ca 8d       	rcall	80003744 <_vfprintf_r>
800033f6:	30 09       	mov	r9,0
800033f8:	40 08       	lddsp	r8,sp[0x0]
800033fa:	b0 89       	st.b	r8[0x0],r9
800033fc:	2e 9d       	sub	sp,-92
800033fe:	d8 02       	popm	pc

80003400 <vsprintf>:
80003400:	d4 01       	pushm	lr
80003402:	e0 68 01 04 	mov	r8,260
80003406:	14 99       	mov	r9,r10
80003408:	16 9a       	mov	r10,r11
8000340a:	18 9b       	mov	r11,r12
8000340c:	70 0c       	ld.w	r12,r8[0x0]
8000340e:	ce 3f       	rcall	800033d4 <_vsprintf_r>
80003410:	d8 02       	popm	pc
80003412:	d7 03       	nop

80003414 <get_arg>:
80003414:	d4 31       	pushm	r0-r7,lr
80003416:	20 8d       	sub	sp,32
80003418:	fa c4 ff bc 	sub	r4,sp,-68
8000341c:	50 4b       	stdsp	sp[0x10],r11
8000341e:	68 2e       	ld.w	lr,r4[0x8]
80003420:	50 58       	stdsp	sp[0x14],r8
80003422:	12 96       	mov	r6,r9
80003424:	7c 0b       	ld.w	r11,lr[0x0]
80003426:	70 05       	ld.w	r5,r8[0x0]
80003428:	50 6e       	stdsp	sp[0x18],lr
8000342a:	58 0b       	cp.w	r11,0
8000342c:	f4 0b 17 00 	moveq	r11,r10
80003430:	68 03       	ld.w	r3,r4[0x0]
80003432:	68 11       	ld.w	r1,r4[0x4]
80003434:	40 49       	lddsp	r9,sp[0x10]
80003436:	30 08       	mov	r8,0
80003438:	c2 89       	rjmp	80003688 <get_arg+0x274>
8000343a:	2f fb       	sub	r11,-1
8000343c:	32 5c       	mov	r12,37
8000343e:	17 8a       	ld.ub	r10,r11[0x0]
80003440:	f8 0a 18 00 	cp.b	r10,r12
80003444:	5f 1e       	srne	lr
80003446:	f0 0a 18 00 	cp.b	r10,r8
8000344a:	5f 1c       	srne	r12
8000344c:	fd ec 00 0c 	and	r12,lr,r12
80003450:	f0 0c 18 00 	cp.b	r12,r8
80003454:	cf 31       	brne	8000343a <get_arg+0x26>
80003456:	58 0a       	cp.w	r10,0
80003458:	e0 80 01 25 	breq	800036a2 <get_arg+0x28e>
8000345c:	30 0c       	mov	r12,0
8000345e:	3f fa       	mov	r10,-1
80003460:	18 90       	mov	r0,r12
80003462:	50 3a       	stdsp	sp[0xc],r10
80003464:	18 94       	mov	r4,r12
80003466:	18 92       	mov	r2,r12
80003468:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000346c:	16 97       	mov	r7,r11
8000346e:	50 7c       	stdsp	sp[0x1c],r12
80003470:	fe cc a1 c8 	sub	r12,pc,-24120
80003474:	0f 3a       	ld.ub	r10,r7++
80003476:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000347a:	40 7c       	lddsp	r12,sp[0x1c]
8000347c:	1c 0c       	add	r12,lr
8000347e:	fe ce a2 9e 	sub	lr,pc,-23906
80003482:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003486:	20 1e       	sub	lr,1
80003488:	50 0e       	stdsp	sp[0x0],lr
8000348a:	fe ce a3 16 	sub	lr,pc,-23786
8000348e:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003492:	50 7c       	stdsp	sp[0x1c],r12
80003494:	40 0c       	lddsp	r12,sp[0x0]
80003496:	58 7c       	cp.w	r12,7
80003498:	e0 8b 00 f1 	brhi	8000367a <get_arg+0x266>
8000349c:	fe ce a4 c8 	sub	lr,pc,-23352
800034a0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800034a4:	36 8b       	mov	r11,104
800034a6:	f6 0a 18 00 	cp.b	r10,r11
800034aa:	e0 80 00 e8 	breq	8000367a <get_arg+0x266>
800034ae:	37 1b       	mov	r11,113
800034b0:	f6 0a 18 00 	cp.b	r10,r11
800034b4:	c0 70       	breq	800034c2 <get_arg+0xae>
800034b6:	34 cb       	mov	r11,76
800034b8:	f6 0a 18 00 	cp.b	r10,r11
800034bc:	c0 51       	brne	800034c6 <get_arg+0xb2>
800034be:	a3 b4       	sbr	r4,0x3
800034c0:	cd d8       	rjmp	8000367a <get_arg+0x266>
800034c2:	a5 b4       	sbr	r4,0x5
800034c4:	cd b8       	rjmp	8000367a <get_arg+0x266>
800034c6:	08 9a       	mov	r10,r4
800034c8:	0e 9b       	mov	r11,r7
800034ca:	a5 aa       	sbr	r10,0x4
800034cc:	17 3c       	ld.ub	r12,r11++
800034ce:	a5 b4       	sbr	r4,0x5
800034d0:	36 ce       	mov	lr,108
800034d2:	fc 0c 18 00 	cp.b	r12,lr
800034d6:	e0 80 00 d3 	breq	8000367c <get_arg+0x268>
800034da:	14 94       	mov	r4,r10
800034dc:	cc f8       	rjmp	8000367a <get_arg+0x266>
800034de:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800034e2:	36 7c       	mov	r12,103
800034e4:	f8 0a 18 00 	cp.b	r10,r12
800034e8:	e0 8b 00 27 	brhi	80003536 <get_arg+0x122>
800034ec:	36 5b       	mov	r11,101
800034ee:	f6 0a 18 00 	cp.b	r10,r11
800034f2:	c4 82       	brcc	80003582 <get_arg+0x16e>
800034f4:	34 fb       	mov	r11,79
800034f6:	f6 0a 18 00 	cp.b	r10,r11
800034fa:	c4 80       	breq	8000358a <get_arg+0x176>
800034fc:	e0 8b 00 0c 	brhi	80003514 <get_arg+0x100>
80003500:	34 5b       	mov	r11,69
80003502:	f6 0a 18 00 	cp.b	r10,r11
80003506:	c3 e0       	breq	80003582 <get_arg+0x16e>
80003508:	34 7b       	mov	r11,71
8000350a:	f6 0a 18 00 	cp.b	r10,r11
8000350e:	c3 a0       	breq	80003582 <get_arg+0x16e>
80003510:	34 4b       	mov	r11,68
80003512:	c0 88       	rjmp	80003522 <get_arg+0x10e>
80003514:	35 8b       	mov	r11,88
80003516:	f6 0a 18 00 	cp.b	r10,r11
8000351a:	c2 c0       	breq	80003572 <get_arg+0x15e>
8000351c:	e0 8b 00 07 	brhi	8000352a <get_arg+0x116>
80003520:	35 5b       	mov	r11,85
80003522:	f6 0a 18 00 	cp.b	r10,r11
80003526:	c3 51       	brne	80003590 <get_arg+0x17c>
80003528:	c3 18       	rjmp	8000358a <get_arg+0x176>
8000352a:	36 3b       	mov	r11,99
8000352c:	f6 0a 18 00 	cp.b	r10,r11
80003530:	c2 f0       	breq	8000358e <get_arg+0x17a>
80003532:	36 4b       	mov	r11,100
80003534:	c0 e8       	rjmp	80003550 <get_arg+0x13c>
80003536:	37 0b       	mov	r11,112
80003538:	f6 0a 18 00 	cp.b	r10,r11
8000353c:	c2 50       	breq	80003586 <get_arg+0x172>
8000353e:	e0 8b 00 0d 	brhi	80003558 <get_arg+0x144>
80003542:	36 eb       	mov	r11,110
80003544:	f6 0a 18 00 	cp.b	r10,r11
80003548:	c1 f0       	breq	80003586 <get_arg+0x172>
8000354a:	e0 8b 00 14 	brhi	80003572 <get_arg+0x15e>
8000354e:	36 9b       	mov	r11,105
80003550:	f6 0a 18 00 	cp.b	r10,r11
80003554:	c1 e1       	brne	80003590 <get_arg+0x17c>
80003556:	c0 e8       	rjmp	80003572 <get_arg+0x15e>
80003558:	37 5b       	mov	r11,117
8000355a:	f6 0a 18 00 	cp.b	r10,r11
8000355e:	c0 a0       	breq	80003572 <get_arg+0x15e>
80003560:	37 8b       	mov	r11,120
80003562:	f6 0a 18 00 	cp.b	r10,r11
80003566:	c0 60       	breq	80003572 <get_arg+0x15e>
80003568:	37 3b       	mov	r11,115
8000356a:	f6 0a 18 00 	cp.b	r10,r11
8000356e:	c1 11       	brne	80003590 <get_arg+0x17c>
80003570:	c0 b8       	rjmp	80003586 <get_arg+0x172>
80003572:	ed b4 00 04 	bld	r4,0x4
80003576:	c0 a0       	breq	8000358a <get_arg+0x176>
80003578:	ed b4 00 05 	bld	r4,0x5
8000357c:	c0 91       	brne	8000358e <get_arg+0x17a>
8000357e:	30 20       	mov	r0,2
80003580:	c0 88       	rjmp	80003590 <get_arg+0x17c>
80003582:	30 40       	mov	r0,4
80003584:	c0 68       	rjmp	80003590 <get_arg+0x17c>
80003586:	30 30       	mov	r0,3
80003588:	c0 48       	rjmp	80003590 <get_arg+0x17c>
8000358a:	30 10       	mov	r0,1
8000358c:	c0 28       	rjmp	80003590 <get_arg+0x17c>
8000358e:	30 00       	mov	r0,0
80003590:	40 3b       	lddsp	r11,sp[0xc]
80003592:	5b fb       	cp.w	r11,-1
80003594:	c0 40       	breq	8000359c <get_arg+0x188>
80003596:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000359a:	c7 08       	rjmp	8000367a <get_arg+0x266>
8000359c:	58 60       	cp.w	r0,6
8000359e:	e0 8b 00 6e 	brhi	8000367a <get_arg+0x266>
800035a2:	6c 0a       	ld.w	r10,r6[0x0]
800035a4:	ea cc ff ff 	sub	r12,r5,-1
800035a8:	fe ce a5 b4 	sub	lr,pc,-23116
800035ac:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800035b0:	f4 cb ff f8 	sub	r11,r10,-8
800035b4:	8d 0b       	st.w	r6[0x0],r11
800035b6:	f4 ea 00 00 	ld.d	r10,r10[0]
800035ba:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800035be:	c0 f8       	rjmp	800035dc <get_arg+0x1c8>
800035c0:	f4 cb ff fc 	sub	r11,r10,-4
800035c4:	8d 0b       	st.w	r6[0x0],r11
800035c6:	74 0a       	ld.w	r10,r10[0x0]
800035c8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800035cc:	c0 88       	rjmp	800035dc <get_arg+0x1c8>
800035ce:	f4 cb ff f8 	sub	r11,r10,-8
800035d2:	8d 0b       	st.w	r6[0x0],r11
800035d4:	f4 ea 00 00 	ld.d	r10,r10[0]
800035d8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800035dc:	0e 9b       	mov	r11,r7
800035de:	18 95       	mov	r5,r12
800035e0:	c4 e8       	rjmp	8000367c <get_arg+0x268>
800035e2:	62 0a       	ld.w	r10,r1[0x0]
800035e4:	5b fa       	cp.w	r10,-1
800035e6:	c0 b1       	brne	800035fc <get_arg+0x1e8>
800035e8:	50 19       	stdsp	sp[0x4],r9
800035ea:	50 28       	stdsp	sp[0x8],r8
800035ec:	e0 6a 00 80 	mov	r10,128
800035f0:	30 0b       	mov	r11,0
800035f2:	02 9c       	mov	r12,r1
800035f4:	e0 a0 1d 78 	rcall	800070e4 <memset>
800035f8:	40 28       	lddsp	r8,sp[0x8]
800035fa:	40 19       	lddsp	r9,sp[0x4]
800035fc:	e4 cc 00 01 	sub	r12,r2,1
80003600:	0e 9b       	mov	r11,r7
80003602:	50 3c       	stdsp	sp[0xc],r12
80003604:	f2 0c 0c 49 	max	r9,r9,r12
80003608:	c3 a8       	rjmp	8000367c <get_arg+0x268>
8000360a:	62 0a       	ld.w	r10,r1[0x0]
8000360c:	5b fa       	cp.w	r10,-1
8000360e:	c0 b1       	brne	80003624 <get_arg+0x210>
80003610:	50 19       	stdsp	sp[0x4],r9
80003612:	50 28       	stdsp	sp[0x8],r8
80003614:	e0 6a 00 80 	mov	r10,128
80003618:	30 0b       	mov	r11,0
8000361a:	02 9c       	mov	r12,r1
8000361c:	e0 a0 1d 64 	rcall	800070e4 <memset>
80003620:	40 28       	lddsp	r8,sp[0x8]
80003622:	40 19       	lddsp	r9,sp[0x4]
80003624:	20 12       	sub	r2,1
80003626:	30 0a       	mov	r10,0
80003628:	0e 9b       	mov	r11,r7
8000362a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000362e:	f2 02 0c 49 	max	r9,r9,r2
80003632:	c2 58       	rjmp	8000367c <get_arg+0x268>
80003634:	16 97       	mov	r7,r11
80003636:	6c 0a       	ld.w	r10,r6[0x0]
80003638:	f4 cb ff fc 	sub	r11,r10,-4
8000363c:	8d 0b       	st.w	r6[0x0],r11
8000363e:	74 0a       	ld.w	r10,r10[0x0]
80003640:	0e 9b       	mov	r11,r7
80003642:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003646:	2f f5       	sub	r5,-1
80003648:	c1 a8       	rjmp	8000367c <get_arg+0x268>
8000364a:	f4 c2 00 30 	sub	r2,r10,48
8000364e:	c0 68       	rjmp	8000365a <get_arg+0x246>
80003650:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003654:	2f f7       	sub	r7,-1
80003656:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000365a:	0f 8a       	ld.ub	r10,r7[0x0]
8000365c:	58 0a       	cp.w	r10,0
8000365e:	c0 e0       	breq	8000367a <get_arg+0x266>
80003660:	23 0a       	sub	r10,48
80003662:	58 9a       	cp.w	r10,9
80003664:	fe 98 ff f6 	brls	80003650 <get_arg+0x23c>
80003668:	c0 98       	rjmp	8000367a <get_arg+0x266>
8000366a:	2f f7       	sub	r7,-1
8000366c:	0f 8a       	ld.ub	r10,r7[0x0]
8000366e:	58 0a       	cp.w	r10,0
80003670:	c0 50       	breq	8000367a <get_arg+0x266>
80003672:	23 0a       	sub	r10,48
80003674:	58 9a       	cp.w	r10,9
80003676:	fe 98 ff fa 	brls	8000366a <get_arg+0x256>
8000367a:	0e 9b       	mov	r11,r7
8000367c:	40 7c       	lddsp	r12,sp[0x1c]
8000367e:	30 ba       	mov	r10,11
80003680:	f4 0c 18 00 	cp.b	r12,r10
80003684:	fe 91 fe f2 	brne	80003468 <get_arg+0x54>
80003688:	40 42       	lddsp	r2,sp[0x10]
8000368a:	17 8c       	ld.ub	r12,r11[0x0]
8000368c:	0a 32       	cp.w	r2,r5
8000368e:	5f 4a       	srge	r10
80003690:	f0 0c 18 00 	cp.b	r12,r8
80003694:	5f 1c       	srne	r12
80003696:	f9 ea 00 0a 	and	r10,r12,r10
8000369a:	f0 0a 18 00 	cp.b	r10,r8
8000369e:	fe 91 fe cf 	brne	8000343c <get_arg+0x28>
800036a2:	30 08       	mov	r8,0
800036a4:	40 4e       	lddsp	lr,sp[0x10]
800036a6:	17 8a       	ld.ub	r10,r11[0x0]
800036a8:	e2 05 00 21 	add	r1,r1,r5<<0x2
800036ac:	f0 0a 18 00 	cp.b	r10,r8
800036b0:	fc 09 17 10 	movne	r9,lr
800036b4:	e6 05 00 38 	add	r8,r3,r5<<0x3
800036b8:	06 9e       	mov	lr,r3
800036ba:	c2 a8       	rjmp	8000370e <get_arg+0x2fa>
800036bc:	62 0a       	ld.w	r10,r1[0x0]
800036be:	58 3a       	cp.w	r10,3
800036c0:	c1 e0       	breq	800036fc <get_arg+0x2e8>
800036c2:	e0 89 00 07 	brgt	800036d0 <get_arg+0x2bc>
800036c6:	58 1a       	cp.w	r10,1
800036c8:	c1 a0       	breq	800036fc <get_arg+0x2e8>
800036ca:	58 2a       	cp.w	r10,2
800036cc:	c1 81       	brne	800036fc <get_arg+0x2e8>
800036ce:	c0 58       	rjmp	800036d8 <get_arg+0x2c4>
800036d0:	58 5a       	cp.w	r10,5
800036d2:	c0 c0       	breq	800036ea <get_arg+0x2d6>
800036d4:	c0 b5       	brlt	800036ea <get_arg+0x2d6>
800036d6:	c1 38       	rjmp	800036fc <get_arg+0x2e8>
800036d8:	6c 0a       	ld.w	r10,r6[0x0]
800036da:	f4 cc ff f8 	sub	r12,r10,-8
800036de:	8d 0c       	st.w	r6[0x0],r12
800036e0:	f4 e2 00 00 	ld.d	r2,r10[0]
800036e4:	f0 e3 00 00 	st.d	r8[0],r2
800036e8:	c1 08       	rjmp	80003708 <get_arg+0x2f4>
800036ea:	6c 0a       	ld.w	r10,r6[0x0]
800036ec:	f4 cc ff f8 	sub	r12,r10,-8
800036f0:	8d 0c       	st.w	r6[0x0],r12
800036f2:	f4 e2 00 00 	ld.d	r2,r10[0]
800036f6:	f0 e3 00 00 	st.d	r8[0],r2
800036fa:	c0 78       	rjmp	80003708 <get_arg+0x2f4>
800036fc:	6c 0a       	ld.w	r10,r6[0x0]
800036fe:	f4 cc ff fc 	sub	r12,r10,-4
80003702:	8d 0c       	st.w	r6[0x0],r12
80003704:	74 0a       	ld.w	r10,r10[0x0]
80003706:	91 0a       	st.w	r8[0x0],r10
80003708:	2f f5       	sub	r5,-1
8000370a:	2f 88       	sub	r8,-8
8000370c:	2f c1       	sub	r1,-4
8000370e:	12 35       	cp.w	r5,r9
80003710:	fe 9a ff d6 	brle	800036bc <get_arg+0x2a8>
80003714:	1c 93       	mov	r3,lr
80003716:	40 52       	lddsp	r2,sp[0x14]
80003718:	40 6e       	lddsp	lr,sp[0x18]
8000371a:	85 05       	st.w	r2[0x0],r5
8000371c:	9d 0b       	st.w	lr[0x0],r11
8000371e:	40 4b       	lddsp	r11,sp[0x10]
80003720:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003724:	2f 8d       	sub	sp,-32
80003726:	d8 32       	popm	r0-r7,pc

80003728 <__sprint_r>:
80003728:	d4 21       	pushm	r4-r7,lr
8000372a:	14 97       	mov	r7,r10
8000372c:	74 28       	ld.w	r8,r10[0x8]
8000372e:	58 08       	cp.w	r8,0
80003730:	c0 41       	brne	80003738 <__sprint_r+0x10>
80003732:	95 18       	st.w	r10[0x4],r8
80003734:	10 9c       	mov	r12,r8
80003736:	d8 22       	popm	r4-r7,pc
80003738:	e0 a0 18 b4 	rcall	800068a0 <__sfvwrite_r>
8000373c:	30 08       	mov	r8,0
8000373e:	8f 18       	st.w	r7[0x4],r8
80003740:	8f 28       	st.w	r7[0x8],r8
80003742:	d8 22       	popm	r4-r7,pc

80003744 <_vfprintf_r>:
80003744:	d4 31       	pushm	r0-r7,lr
80003746:	fa cd 06 bc 	sub	sp,sp,1724
8000374a:	51 09       	stdsp	sp[0x40],r9
8000374c:	16 91       	mov	r1,r11
8000374e:	14 97       	mov	r7,r10
80003750:	18 95       	mov	r5,r12
80003752:	e0 a0 1a 1d 	rcall	80006b8c <_localeconv_r>
80003756:	78 0c       	ld.w	r12,r12[0x0]
80003758:	50 cc       	stdsp	sp[0x30],r12
8000375a:	58 05       	cp.w	r5,0
8000375c:	c0 70       	breq	8000376a <_vfprintf_r+0x26>
8000375e:	6a 68       	ld.w	r8,r5[0x18]
80003760:	58 08       	cp.w	r8,0
80003762:	c0 41       	brne	8000376a <_vfprintf_r+0x26>
80003764:	0a 9c       	mov	r12,r5
80003766:	e0 a0 17 3d 	rcall	800065e0 <__sinit>
8000376a:	fe c8 a3 b2 	sub	r8,pc,-23630
8000376e:	10 31       	cp.w	r1,r8
80003770:	c0 31       	brne	80003776 <_vfprintf_r+0x32>
80003772:	6a 01       	ld.w	r1,r5[0x0]
80003774:	c0 c8       	rjmp	8000378c <_vfprintf_r+0x48>
80003776:	fe c8 a3 9e 	sub	r8,pc,-23650
8000377a:	10 31       	cp.w	r1,r8
8000377c:	c0 31       	brne	80003782 <_vfprintf_r+0x3e>
8000377e:	6a 11       	ld.w	r1,r5[0x4]
80003780:	c0 68       	rjmp	8000378c <_vfprintf_r+0x48>
80003782:	fe c8 a3 8a 	sub	r8,pc,-23670
80003786:	10 31       	cp.w	r1,r8
80003788:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000378c:	82 68       	ld.sh	r8,r1[0xc]
8000378e:	ed b8 00 03 	bld	r8,0x3
80003792:	c0 41       	brne	8000379a <_vfprintf_r+0x56>
80003794:	62 48       	ld.w	r8,r1[0x10]
80003796:	58 08       	cp.w	r8,0
80003798:	c0 71       	brne	800037a6 <_vfprintf_r+0x62>
8000379a:	02 9b       	mov	r11,r1
8000379c:	0a 9c       	mov	r12,r5
8000379e:	e0 a0 0f 5d 	rcall	80005658 <__swsetup_r>
800037a2:	e0 81 0f 54 	brne	8000564a <_vfprintf_r+0x1f06>
800037a6:	82 68       	ld.sh	r8,r1[0xc]
800037a8:	10 99       	mov	r9,r8
800037aa:	e2 19 00 1a 	andl	r9,0x1a,COH
800037ae:	58 a9       	cp.w	r9,10
800037b0:	c3 c1       	brne	80003828 <_vfprintf_r+0xe4>
800037b2:	82 79       	ld.sh	r9,r1[0xe]
800037b4:	30 0a       	mov	r10,0
800037b6:	f4 09 19 00 	cp.h	r9,r10
800037ba:	c3 75       	brlt	80003828 <_vfprintf_r+0xe4>
800037bc:	a1 d8       	cbr	r8,0x1
800037be:	fb 58 05 d0 	st.h	sp[1488],r8
800037c2:	62 88       	ld.w	r8,r1[0x20]
800037c4:	fb 48 05 e4 	st.w	sp[1508],r8
800037c8:	62 a8       	ld.w	r8,r1[0x28]
800037ca:	fb 48 05 ec 	st.w	sp[1516],r8
800037ce:	fa c8 ff bc 	sub	r8,sp,-68
800037d2:	fb 48 05 d4 	st.w	sp[1492],r8
800037d6:	fb 48 05 c4 	st.w	sp[1476],r8
800037da:	e0 68 04 00 	mov	r8,1024
800037de:	fb 48 05 d8 	st.w	sp[1496],r8
800037e2:	fb 48 05 cc 	st.w	sp[1484],r8
800037e6:	30 08       	mov	r8,0
800037e8:	fb 59 05 d2 	st.h	sp[1490],r9
800037ec:	0e 9a       	mov	r10,r7
800037ee:	41 09       	lddsp	r9,sp[0x40]
800037f0:	fa c7 fa 3c 	sub	r7,sp,-1476
800037f4:	fb 48 05 dc 	st.w	sp[1500],r8
800037f8:	0a 9c       	mov	r12,r5
800037fa:	0e 9b       	mov	r11,r7
800037fc:	ca 4f       	rcall	80003744 <_vfprintf_r>
800037fe:	50 bc       	stdsp	sp[0x2c],r12
80003800:	c0 95       	brlt	80003812 <_vfprintf_r+0xce>
80003802:	0e 9b       	mov	r11,r7
80003804:	0a 9c       	mov	r12,r5
80003806:	e0 a0 16 15 	rcall	80006430 <_fflush_r>
8000380a:	40 be       	lddsp	lr,sp[0x2c]
8000380c:	f9 be 01 ff 	movne	lr,-1
80003810:	50 be       	stdsp	sp[0x2c],lr
80003812:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003816:	ed b8 00 06 	bld	r8,0x6
8000381a:	e0 81 0f 1a 	brne	8000564e <_vfprintf_r+0x1f0a>
8000381e:	82 68       	ld.sh	r8,r1[0xc]
80003820:	a7 a8       	sbr	r8,0x6
80003822:	a2 68       	st.h	r1[0xc],r8
80003824:	e0 8f 0f 15 	bral	8000564e <_vfprintf_r+0x1f0a>
80003828:	30 08       	mov	r8,0
8000382a:	fb 48 06 b4 	st.w	sp[1716],r8
8000382e:	fb 48 06 90 	st.w	sp[1680],r8
80003832:	fb 48 06 8c 	st.w	sp[1676],r8
80003836:	fb 48 06 b0 	st.w	sp[1712],r8
8000383a:	30 08       	mov	r8,0
8000383c:	30 09       	mov	r9,0
8000383e:	50 a7       	stdsp	sp[0x28],r7
80003840:	50 78       	stdsp	sp[0x1c],r8
80003842:	fa c3 f9 e0 	sub	r3,sp,-1568
80003846:	3f f8       	mov	r8,-1
80003848:	50 59       	stdsp	sp[0x14],r9
8000384a:	fb 43 06 88 	st.w	sp[1672],r3
8000384e:	fb 48 05 44 	st.w	sp[1348],r8
80003852:	12 9c       	mov	r12,r9
80003854:	50 69       	stdsp	sp[0x18],r9
80003856:	50 d9       	stdsp	sp[0x34],r9
80003858:	50 e9       	stdsp	sp[0x38],r9
8000385a:	50 b9       	stdsp	sp[0x2c],r9
8000385c:	12 97       	mov	r7,r9
8000385e:	0a 94       	mov	r4,r5
80003860:	40 a2       	lddsp	r2,sp[0x28]
80003862:	32 5a       	mov	r10,37
80003864:	30 08       	mov	r8,0
80003866:	c0 28       	rjmp	8000386a <_vfprintf_r+0x126>
80003868:	2f f2       	sub	r2,-1
8000386a:	05 89       	ld.ub	r9,r2[0x0]
8000386c:	f0 09 18 00 	cp.b	r9,r8
80003870:	5f 1b       	srne	r11
80003872:	f4 09 18 00 	cp.b	r9,r10
80003876:	5f 19       	srne	r9
80003878:	f3 eb 00 0b 	and	r11,r9,r11
8000387c:	f0 0b 18 00 	cp.b	r11,r8
80003880:	cf 41       	brne	80003868 <_vfprintf_r+0x124>
80003882:	40 ab       	lddsp	r11,sp[0x28]
80003884:	e4 0b 01 06 	sub	r6,r2,r11
80003888:	c1 e0       	breq	800038c4 <_vfprintf_r+0x180>
8000388a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000388e:	0c 08       	add	r8,r6
80003890:	87 0b       	st.w	r3[0x0],r11
80003892:	fb 48 06 90 	st.w	sp[1680],r8
80003896:	87 16       	st.w	r3[0x4],r6
80003898:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000389c:	2f f8       	sub	r8,-1
8000389e:	fb 48 06 8c 	st.w	sp[1676],r8
800038a2:	58 78       	cp.w	r8,7
800038a4:	e0 89 00 04 	brgt	800038ac <_vfprintf_r+0x168>
800038a8:	2f 83       	sub	r3,-8
800038aa:	c0 a8       	rjmp	800038be <_vfprintf_r+0x17a>
800038ac:	fa ca f9 78 	sub	r10,sp,-1672
800038b0:	02 9b       	mov	r11,r1
800038b2:	08 9c       	mov	r12,r4
800038b4:	c3 af       	rcall	80003728 <__sprint_r>
800038b6:	e0 81 0e c6 	brne	80005642 <_vfprintf_r+0x1efe>
800038ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800038be:	40 ba       	lddsp	r10,sp[0x2c]
800038c0:	0c 0a       	add	r10,r6
800038c2:	50 ba       	stdsp	sp[0x2c],r10
800038c4:	05 89       	ld.ub	r9,r2[0x0]
800038c6:	30 08       	mov	r8,0
800038c8:	f0 09 18 00 	cp.b	r9,r8
800038cc:	e0 80 0e aa 	breq	80005620 <_vfprintf_r+0x1edc>
800038d0:	30 09       	mov	r9,0
800038d2:	fb 68 06 bb 	st.b	sp[1723],r8
800038d6:	0e 96       	mov	r6,r7
800038d8:	e4 c8 ff ff 	sub	r8,r2,-1
800038dc:	3f fe       	mov	lr,-1
800038de:	50 93       	stdsp	sp[0x24],r3
800038e0:	50 41       	stdsp	sp[0x10],r1
800038e2:	0e 93       	mov	r3,r7
800038e4:	04 91       	mov	r1,r2
800038e6:	50 89       	stdsp	sp[0x20],r9
800038e8:	50 a8       	stdsp	sp[0x28],r8
800038ea:	50 2e       	stdsp	sp[0x8],lr
800038ec:	50 39       	stdsp	sp[0xc],r9
800038ee:	12 95       	mov	r5,r9
800038f0:	12 90       	mov	r0,r9
800038f2:	10 97       	mov	r7,r8
800038f4:	08 92       	mov	r2,r4
800038f6:	c0 78       	rjmp	80003904 <_vfprintf_r+0x1c0>
800038f8:	3f fc       	mov	r12,-1
800038fa:	08 97       	mov	r7,r4
800038fc:	50 2c       	stdsp	sp[0x8],r12
800038fe:	c0 38       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003900:	30 0b       	mov	r11,0
80003902:	50 3b       	stdsp	sp[0xc],r11
80003904:	0f 38       	ld.ub	r8,r7++
80003906:	c0 28       	rjmp	8000390a <_vfprintf_r+0x1c6>
80003908:	12 90       	mov	r0,r9
8000390a:	f0 c9 00 20 	sub	r9,r8,32
8000390e:	e0 49 00 58 	cp.w	r9,88
80003912:	e0 8b 0a 30 	brhi	80004d72 <_vfprintf_r+0x162e>
80003916:	fe ca a9 06 	sub	r10,pc,-22266
8000391a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000391e:	50 a7       	stdsp	sp[0x28],r7
80003920:	50 80       	stdsp	sp[0x20],r0
80003922:	0c 97       	mov	r7,r6
80003924:	04 94       	mov	r4,r2
80003926:	06 96       	mov	r6,r3
80003928:	02 92       	mov	r2,r1
8000392a:	fe c9 a6 de 	sub	r9,pc,-22818
8000392e:	40 93       	lddsp	r3,sp[0x24]
80003930:	10 90       	mov	r0,r8
80003932:	40 41       	lddsp	r1,sp[0x10]
80003934:	50 d9       	stdsp	sp[0x34],r9
80003936:	e0 8f 08 8e 	bral	80004a52 <_vfprintf_r+0x130e>
8000393a:	30 08       	mov	r8,0
8000393c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003940:	f0 09 18 00 	cp.b	r9,r8
80003944:	ce 01       	brne	80003904 <_vfprintf_r+0x1c0>
80003946:	32 08       	mov	r8,32
80003948:	c6 e8       	rjmp	80003a24 <_vfprintf_r+0x2e0>
8000394a:	a1 a5       	sbr	r5,0x0
8000394c:	cd cb       	rjmp	80003904 <_vfprintf_r+0x1c0>
8000394e:	0f 89       	ld.ub	r9,r7[0x0]
80003950:	f2 c8 00 30 	sub	r8,r9,48
80003954:	58 98       	cp.w	r8,9
80003956:	e0 8b 00 1d 	brhi	80003990 <_vfprintf_r+0x24c>
8000395a:	ee c8 ff ff 	sub	r8,r7,-1
8000395e:	30 0b       	mov	r11,0
80003960:	23 09       	sub	r9,48
80003962:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003966:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000396a:	11 39       	ld.ub	r9,r8++
8000396c:	f2 ca 00 30 	sub	r10,r9,48
80003970:	58 9a       	cp.w	r10,9
80003972:	fe 98 ff f7 	brls	80003960 <_vfprintf_r+0x21c>
80003976:	e0 49 00 24 	cp.w	r9,36
8000397a:	cc 31       	brne	80003900 <_vfprintf_r+0x1bc>
8000397c:	e0 4b 00 20 	cp.w	r11,32
80003980:	e0 89 0e 60 	brgt	80005640 <_vfprintf_r+0x1efc>
80003984:	20 1b       	sub	r11,1
80003986:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000398a:	12 3b       	cp.w	r11,r9
8000398c:	c0 95       	brlt	8000399e <_vfprintf_r+0x25a>
8000398e:	c1 08       	rjmp	800039ae <_vfprintf_r+0x26a>
80003990:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003994:	ec ca ff ff 	sub	r10,r6,-1
80003998:	12 36       	cp.w	r6,r9
8000399a:	c1 f5       	brlt	800039d8 <_vfprintf_r+0x294>
8000399c:	c2 68       	rjmp	800039e8 <_vfprintf_r+0x2a4>
8000399e:	fa ce f9 44 	sub	lr,sp,-1724
800039a2:	10 97       	mov	r7,r8
800039a4:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800039a8:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800039ac:	c3 58       	rjmp	80003a16 <_vfprintf_r+0x2d2>
800039ae:	10 97       	mov	r7,r8
800039b0:	fa c8 f9 50 	sub	r8,sp,-1712
800039b4:	1a d8       	st.w	--sp,r8
800039b6:	fa c8 fa b8 	sub	r8,sp,-1352
800039ba:	1a d8       	st.w	--sp,r8
800039bc:	fa c8 fb b4 	sub	r8,sp,-1100
800039c0:	02 9a       	mov	r10,r1
800039c2:	1a d8       	st.w	--sp,r8
800039c4:	04 9c       	mov	r12,r2
800039c6:	fa c8 f9 40 	sub	r8,sp,-1728
800039ca:	fa c9 ff b4 	sub	r9,sp,-76
800039ce:	fe b0 fd 23 	rcall	80003414 <get_arg>
800039d2:	2f dd       	sub	sp,-12
800039d4:	78 00       	ld.w	r0,r12[0x0]
800039d6:	c2 08       	rjmp	80003a16 <_vfprintf_r+0x2d2>
800039d8:	fa cc f9 44 	sub	r12,sp,-1724
800039dc:	14 96       	mov	r6,r10
800039de:	f8 03 00 38 	add	r8,r12,r3<<0x3
800039e2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800039e6:	c1 88       	rjmp	80003a16 <_vfprintf_r+0x2d2>
800039e8:	41 08       	lddsp	r8,sp[0x40]
800039ea:	59 f9       	cp.w	r9,31
800039ec:	e0 89 00 11 	brgt	80003a0e <_vfprintf_r+0x2ca>
800039f0:	f0 cb ff fc 	sub	r11,r8,-4
800039f4:	51 0b       	stdsp	sp[0x40],r11
800039f6:	70 00       	ld.w	r0,r8[0x0]
800039f8:	fa cb f9 44 	sub	r11,sp,-1724
800039fc:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003a00:	f1 40 fd 88 	st.w	r8[-632],r0
80003a04:	2f f9       	sub	r9,-1
80003a06:	14 96       	mov	r6,r10
80003a08:	fb 49 06 b4 	st.w	sp[1716],r9
80003a0c:	c0 58       	rjmp	80003a16 <_vfprintf_r+0x2d2>
80003a0e:	70 00       	ld.w	r0,r8[0x0]
80003a10:	14 96       	mov	r6,r10
80003a12:	2f c8       	sub	r8,-4
80003a14:	51 08       	stdsp	sp[0x40],r8
80003a16:	58 00       	cp.w	r0,0
80003a18:	fe 94 ff 76 	brge	80003904 <_vfprintf_r+0x1c0>
80003a1c:	5c 30       	neg	r0
80003a1e:	a3 a5       	sbr	r5,0x2
80003a20:	c7 2b       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003a22:	32 b8       	mov	r8,43
80003a24:	fb 68 06 bb 	st.b	sp[1723],r8
80003a28:	c6 eb       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003a2a:	0f 38       	ld.ub	r8,r7++
80003a2c:	e0 48 00 2a 	cp.w	r8,42
80003a30:	c0 30       	breq	80003a36 <_vfprintf_r+0x2f2>
80003a32:	30 09       	mov	r9,0
80003a34:	c7 98       	rjmp	80003b26 <_vfprintf_r+0x3e2>
80003a36:	0f 88       	ld.ub	r8,r7[0x0]
80003a38:	f0 c9 00 30 	sub	r9,r8,48
80003a3c:	58 99       	cp.w	r9,9
80003a3e:	e0 8b 00 1f 	brhi	80003a7c <_vfprintf_r+0x338>
80003a42:	ee c4 ff ff 	sub	r4,r7,-1
80003a46:	30 0b       	mov	r11,0
80003a48:	23 08       	sub	r8,48
80003a4a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003a4e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003a52:	09 38       	ld.ub	r8,r4++
80003a54:	f0 c9 00 30 	sub	r9,r8,48
80003a58:	58 99       	cp.w	r9,9
80003a5a:	fe 98 ff f7 	brls	80003a48 <_vfprintf_r+0x304>
80003a5e:	e0 48 00 24 	cp.w	r8,36
80003a62:	fe 91 ff 4f 	brne	80003900 <_vfprintf_r+0x1bc>
80003a66:	e0 4b 00 20 	cp.w	r11,32
80003a6a:	e0 89 0d eb 	brgt	80005640 <_vfprintf_r+0x1efc>
80003a6e:	20 1b       	sub	r11,1
80003a70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003a74:	10 3b       	cp.w	r11,r8
80003a76:	c0 a5       	brlt	80003a8a <_vfprintf_r+0x346>
80003a78:	c1 18       	rjmp	80003a9a <_vfprintf_r+0x356>
80003a7a:	d7 03       	nop
80003a7c:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003a80:	ec c9 ff ff 	sub	r9,r6,-1
80003a84:	14 36       	cp.w	r6,r10
80003a86:	c1 f5       	brlt	80003ac4 <_vfprintf_r+0x380>
80003a88:	c2 88       	rjmp	80003ad8 <_vfprintf_r+0x394>
80003a8a:	fa ca f9 44 	sub	r10,sp,-1724
80003a8e:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003a92:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003a96:	50 2b       	stdsp	sp[0x8],r11
80003a98:	c3 c8       	rjmp	80003b10 <_vfprintf_r+0x3cc>
80003a9a:	fa c8 f9 50 	sub	r8,sp,-1712
80003a9e:	1a d8       	st.w	--sp,r8
80003aa0:	fa c8 fa b8 	sub	r8,sp,-1352
80003aa4:	1a d8       	st.w	--sp,r8
80003aa6:	fa c8 fb b4 	sub	r8,sp,-1100
80003aaa:	02 9a       	mov	r10,r1
80003aac:	1a d8       	st.w	--sp,r8
80003aae:	04 9c       	mov	r12,r2
80003ab0:	fa c8 f9 40 	sub	r8,sp,-1728
80003ab4:	fa c9 ff b4 	sub	r9,sp,-76
80003ab8:	fe b0 fc ae 	rcall	80003414 <get_arg>
80003abc:	2f dd       	sub	sp,-12
80003abe:	78 0c       	ld.w	r12,r12[0x0]
80003ac0:	50 2c       	stdsp	sp[0x8],r12
80003ac2:	c2 78       	rjmp	80003b10 <_vfprintf_r+0x3cc>
80003ac4:	12 96       	mov	r6,r9
80003ac6:	0e 94       	mov	r4,r7
80003ac8:	fa c9 f9 44 	sub	r9,sp,-1724
80003acc:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003ad0:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003ad4:	50 28       	stdsp	sp[0x8],r8
80003ad6:	c1 d8       	rjmp	80003b10 <_vfprintf_r+0x3cc>
80003ad8:	41 08       	lddsp	r8,sp[0x40]
80003ada:	59 fa       	cp.w	r10,31
80003adc:	e0 89 00 14 	brgt	80003b04 <_vfprintf_r+0x3c0>
80003ae0:	f0 cb ff fc 	sub	r11,r8,-4
80003ae4:	70 08       	ld.w	r8,r8[0x0]
80003ae6:	51 0b       	stdsp	sp[0x40],r11
80003ae8:	50 28       	stdsp	sp[0x8],r8
80003aea:	fa c6 f9 44 	sub	r6,sp,-1724
80003aee:	40 2e       	lddsp	lr,sp[0x8]
80003af0:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003af4:	f1 4e fd 88 	st.w	r8[-632],lr
80003af8:	2f fa       	sub	r10,-1
80003afa:	0e 94       	mov	r4,r7
80003afc:	fb 4a 06 b4 	st.w	sp[1716],r10
80003b00:	12 96       	mov	r6,r9
80003b02:	c0 78       	rjmp	80003b10 <_vfprintf_r+0x3cc>
80003b04:	70 0c       	ld.w	r12,r8[0x0]
80003b06:	0e 94       	mov	r4,r7
80003b08:	2f c8       	sub	r8,-4
80003b0a:	50 2c       	stdsp	sp[0x8],r12
80003b0c:	12 96       	mov	r6,r9
80003b0e:	51 08       	stdsp	sp[0x40],r8
80003b10:	40 2b       	lddsp	r11,sp[0x8]
80003b12:	58 0b       	cp.w	r11,0
80003b14:	fe 95 fe f2 	brlt	800038f8 <_vfprintf_r+0x1b4>
80003b18:	08 97       	mov	r7,r4
80003b1a:	cf 5a       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b1c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003b20:	0f 38       	ld.ub	r8,r7++
80003b22:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003b26:	f0 ca 00 30 	sub	r10,r8,48
80003b2a:	58 9a       	cp.w	r10,9
80003b2c:	fe 98 ff f8 	brls	80003b1c <_vfprintf_r+0x3d8>
80003b30:	3f fa       	mov	r10,-1
80003b32:	f2 0a 0c 49 	max	r9,r9,r10
80003b36:	50 29       	stdsp	sp[0x8],r9
80003b38:	ce 9a       	rjmp	8000390a <_vfprintf_r+0x1c6>
80003b3a:	a7 b5       	sbr	r5,0x7
80003b3c:	ce 4a       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b3e:	30 09       	mov	r9,0
80003b40:	23 08       	sub	r8,48
80003b42:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003b46:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003b4a:	0f 38       	ld.ub	r8,r7++
80003b4c:	f0 ca 00 30 	sub	r10,r8,48
80003b50:	58 9a       	cp.w	r10,9
80003b52:	fe 98 ff f7 	brls	80003b40 <_vfprintf_r+0x3fc>
80003b56:	e0 48 00 24 	cp.w	r8,36
80003b5a:	fe 91 fe d7 	brne	80003908 <_vfprintf_r+0x1c4>
80003b5e:	e0 49 00 20 	cp.w	r9,32
80003b62:	e0 89 0d 6f 	brgt	80005640 <_vfprintf_r+0x1efc>
80003b66:	f2 c3 00 01 	sub	r3,r9,1
80003b6a:	30 19       	mov	r9,1
80003b6c:	50 39       	stdsp	sp[0xc],r9
80003b6e:	cc ba       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b70:	a3 b5       	sbr	r5,0x3
80003b72:	cc 9a       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b74:	a7 a5       	sbr	r5,0x6
80003b76:	cc 7a       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b78:	0a 98       	mov	r8,r5
80003b7a:	a5 b5       	sbr	r5,0x5
80003b7c:	a5 a8       	sbr	r8,0x4
80003b7e:	0f 89       	ld.ub	r9,r7[0x0]
80003b80:	36 ce       	mov	lr,108
80003b82:	fc 09 18 00 	cp.b	r9,lr
80003b86:	f7 b7 00 ff 	subeq	r7,-1
80003b8a:	f0 05 17 10 	movne	r5,r8
80003b8e:	cb ba       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b90:	a5 b5       	sbr	r5,0x5
80003b92:	cb 9a       	rjmp	80003904 <_vfprintf_r+0x1c0>
80003b94:	50 a7       	stdsp	sp[0x28],r7
80003b96:	50 80       	stdsp	sp[0x20],r0
80003b98:	0c 97       	mov	r7,r6
80003b9a:	10 90       	mov	r0,r8
80003b9c:	06 96       	mov	r6,r3
80003b9e:	04 94       	mov	r4,r2
80003ba0:	40 93       	lddsp	r3,sp[0x24]
80003ba2:	02 92       	mov	r2,r1
80003ba4:	0e 99       	mov	r9,r7
80003ba6:	40 41       	lddsp	r1,sp[0x10]
80003ba8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003bac:	40 3c       	lddsp	r12,sp[0xc]
80003bae:	58 0c       	cp.w	r12,0
80003bb0:	c1 d0       	breq	80003bea <_vfprintf_r+0x4a6>
80003bb2:	10 36       	cp.w	r6,r8
80003bb4:	c0 64       	brge	80003bc0 <_vfprintf_r+0x47c>
80003bb6:	fa cb f9 44 	sub	r11,sp,-1724
80003bba:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003bbe:	c1 d8       	rjmp	80003bf8 <_vfprintf_r+0x4b4>
80003bc0:	fa c8 f9 50 	sub	r8,sp,-1712
80003bc4:	1a d8       	st.w	--sp,r8
80003bc6:	fa c8 fa b8 	sub	r8,sp,-1352
80003bca:	1a d8       	st.w	--sp,r8
80003bcc:	fa c8 fb b4 	sub	r8,sp,-1100
80003bd0:	1a d8       	st.w	--sp,r8
80003bd2:	fa c8 f9 40 	sub	r8,sp,-1728
80003bd6:	fa c9 ff b4 	sub	r9,sp,-76
80003bda:	04 9a       	mov	r10,r2
80003bdc:	0c 9b       	mov	r11,r6
80003bde:	08 9c       	mov	r12,r4
80003be0:	fe b0 fc 1a 	rcall	80003414 <get_arg>
80003be4:	2f dd       	sub	sp,-12
80003be6:	19 b8       	ld.ub	r8,r12[0x3]
80003be8:	c2 28       	rjmp	80003c2c <_vfprintf_r+0x4e8>
80003bea:	2f f7       	sub	r7,-1
80003bec:	10 39       	cp.w	r9,r8
80003bee:	c0 84       	brge	80003bfe <_vfprintf_r+0x4ba>
80003bf0:	fa ca f9 44 	sub	r10,sp,-1724
80003bf4:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003bf8:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003bfc:	c1 88       	rjmp	80003c2c <_vfprintf_r+0x4e8>
80003bfe:	41 09       	lddsp	r9,sp[0x40]
80003c00:	59 f8       	cp.w	r8,31
80003c02:	e0 89 00 12 	brgt	80003c26 <_vfprintf_r+0x4e2>
80003c06:	f2 ca ff fc 	sub	r10,r9,-4
80003c0a:	51 0a       	stdsp	sp[0x40],r10
80003c0c:	72 09       	ld.w	r9,r9[0x0]
80003c0e:	fa c6 f9 44 	sub	r6,sp,-1724
80003c12:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003c16:	2f f8       	sub	r8,-1
80003c18:	f5 49 fd 88 	st.w	r10[-632],r9
80003c1c:	fb 48 06 b4 	st.w	sp[1716],r8
80003c20:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003c24:	c0 48       	rjmp	80003c2c <_vfprintf_r+0x4e8>
80003c26:	13 b8       	ld.ub	r8,r9[0x3]
80003c28:	2f c9       	sub	r9,-4
80003c2a:	51 09       	stdsp	sp[0x40],r9
80003c2c:	fb 68 06 60 	st.b	sp[1632],r8
80003c30:	30 0e       	mov	lr,0
80003c32:	30 08       	mov	r8,0
80003c34:	30 12       	mov	r2,1
80003c36:	fb 68 06 bb 	st.b	sp[1723],r8
80003c3a:	50 2e       	stdsp	sp[0x8],lr
80003c3c:	e0 8f 08 ad 	bral	80004d96 <_vfprintf_r+0x1652>
80003c40:	50 a7       	stdsp	sp[0x28],r7
80003c42:	50 80       	stdsp	sp[0x20],r0
80003c44:	0c 97       	mov	r7,r6
80003c46:	04 94       	mov	r4,r2
80003c48:	06 96       	mov	r6,r3
80003c4a:	02 92       	mov	r2,r1
80003c4c:	40 93       	lddsp	r3,sp[0x24]
80003c4e:	10 90       	mov	r0,r8
80003c50:	40 41       	lddsp	r1,sp[0x10]
80003c52:	a5 a5       	sbr	r5,0x4
80003c54:	c0 a8       	rjmp	80003c68 <_vfprintf_r+0x524>
80003c56:	50 a7       	stdsp	sp[0x28],r7
80003c58:	50 80       	stdsp	sp[0x20],r0
80003c5a:	0c 97       	mov	r7,r6
80003c5c:	04 94       	mov	r4,r2
80003c5e:	06 96       	mov	r6,r3
80003c60:	02 92       	mov	r2,r1
80003c62:	40 93       	lddsp	r3,sp[0x24]
80003c64:	10 90       	mov	r0,r8
80003c66:	40 41       	lddsp	r1,sp[0x10]
80003c68:	ed b5 00 05 	bld	r5,0x5
80003c6c:	c5 11       	brne	80003d0e <_vfprintf_r+0x5ca>
80003c6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c72:	40 3c       	lddsp	r12,sp[0xc]
80003c74:	58 0c       	cp.w	r12,0
80003c76:	c1 e0       	breq	80003cb2 <_vfprintf_r+0x56e>
80003c78:	10 36       	cp.w	r6,r8
80003c7a:	c0 64       	brge	80003c86 <_vfprintf_r+0x542>
80003c7c:	fa cb f9 44 	sub	r11,sp,-1724
80003c80:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003c84:	c2 08       	rjmp	80003cc4 <_vfprintf_r+0x580>
80003c86:	fa c8 f9 50 	sub	r8,sp,-1712
80003c8a:	1a d8       	st.w	--sp,r8
80003c8c:	fa c8 fa b8 	sub	r8,sp,-1352
80003c90:	0c 9b       	mov	r11,r6
80003c92:	1a d8       	st.w	--sp,r8
80003c94:	fa c8 fb b4 	sub	r8,sp,-1100
80003c98:	1a d8       	st.w	--sp,r8
80003c9a:	fa c9 ff b4 	sub	r9,sp,-76
80003c9e:	fa c8 f9 40 	sub	r8,sp,-1728
80003ca2:	04 9a       	mov	r10,r2
80003ca4:	08 9c       	mov	r12,r4
80003ca6:	fe b0 fb b7 	rcall	80003414 <get_arg>
80003caa:	2f dd       	sub	sp,-12
80003cac:	78 1b       	ld.w	r11,r12[0x4]
80003cae:	78 09       	ld.w	r9,r12[0x0]
80003cb0:	c2 b8       	rjmp	80003d06 <_vfprintf_r+0x5c2>
80003cb2:	ee ca ff ff 	sub	r10,r7,-1
80003cb6:	10 37       	cp.w	r7,r8
80003cb8:	c0 b4       	brge	80003cce <_vfprintf_r+0x58a>
80003cba:	fa c9 f9 44 	sub	r9,sp,-1724
80003cbe:	14 97       	mov	r7,r10
80003cc0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003cc4:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003cc8:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003ccc:	c1 d8       	rjmp	80003d06 <_vfprintf_r+0x5c2>
80003cce:	41 09       	lddsp	r9,sp[0x40]
80003cd0:	59 f8       	cp.w	r8,31
80003cd2:	e0 89 00 14 	brgt	80003cfa <_vfprintf_r+0x5b6>
80003cd6:	f2 cb ff f8 	sub	r11,r9,-8
80003cda:	51 0b       	stdsp	sp[0x40],r11
80003cdc:	fa c6 f9 44 	sub	r6,sp,-1724
80003ce0:	72 1b       	ld.w	r11,r9[0x4]
80003ce2:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003ce6:	72 09       	ld.w	r9,r9[0x0]
80003ce8:	f9 4b fd 8c 	st.w	r12[-628],r11
80003cec:	f9 49 fd 88 	st.w	r12[-632],r9
80003cf0:	2f f8       	sub	r8,-1
80003cf2:	14 97       	mov	r7,r10
80003cf4:	fb 48 06 b4 	st.w	sp[1716],r8
80003cf8:	c0 78       	rjmp	80003d06 <_vfprintf_r+0x5c2>
80003cfa:	f2 c8 ff f8 	sub	r8,r9,-8
80003cfe:	72 1b       	ld.w	r11,r9[0x4]
80003d00:	14 97       	mov	r7,r10
80003d02:	51 08       	stdsp	sp[0x40],r8
80003d04:	72 09       	ld.w	r9,r9[0x0]
80003d06:	16 98       	mov	r8,r11
80003d08:	fa e9 00 00 	st.d	sp[0],r8
80003d0c:	ca e8       	rjmp	80003e68 <_vfprintf_r+0x724>
80003d0e:	ed b5 00 04 	bld	r5,0x4
80003d12:	c1 71       	brne	80003d40 <_vfprintf_r+0x5fc>
80003d14:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d18:	40 3e       	lddsp	lr,sp[0xc]
80003d1a:	58 0e       	cp.w	lr,0
80003d1c:	c0 80       	breq	80003d2c <_vfprintf_r+0x5e8>
80003d1e:	10 36       	cp.w	r6,r8
80003d20:	c6 94       	brge	80003df2 <_vfprintf_r+0x6ae>
80003d22:	fa cc f9 44 	sub	r12,sp,-1724
80003d26:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003d2a:	c8 28       	rjmp	80003e2e <_vfprintf_r+0x6ea>
80003d2c:	ee ca ff ff 	sub	r10,r7,-1
80003d30:	10 37       	cp.w	r7,r8
80003d32:	e0 84 00 81 	brge	80003e34 <_vfprintf_r+0x6f0>
80003d36:	fa cb f9 44 	sub	r11,sp,-1724
80003d3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d3e:	c7 78       	rjmp	80003e2c <_vfprintf_r+0x6e8>
80003d40:	ed b5 00 06 	bld	r5,0x6
80003d44:	c4 b1       	brne	80003dda <_vfprintf_r+0x696>
80003d46:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d4a:	40 3c       	lddsp	r12,sp[0xc]
80003d4c:	58 0c       	cp.w	r12,0
80003d4e:	c1 d0       	breq	80003d88 <_vfprintf_r+0x644>
80003d50:	10 36       	cp.w	r6,r8
80003d52:	c0 64       	brge	80003d5e <_vfprintf_r+0x61a>
80003d54:	fa cb f9 44 	sub	r11,sp,-1724
80003d58:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d5c:	c1 f8       	rjmp	80003d9a <_vfprintf_r+0x656>
80003d5e:	fa c8 f9 50 	sub	r8,sp,-1712
80003d62:	1a d8       	st.w	--sp,r8
80003d64:	fa c8 fa b8 	sub	r8,sp,-1352
80003d68:	1a d8       	st.w	--sp,r8
80003d6a:	fa c8 fb b4 	sub	r8,sp,-1100
80003d6e:	1a d8       	st.w	--sp,r8
80003d70:	fa c8 f9 40 	sub	r8,sp,-1728
80003d74:	fa c9 ff b4 	sub	r9,sp,-76
80003d78:	04 9a       	mov	r10,r2
80003d7a:	0c 9b       	mov	r11,r6
80003d7c:	08 9c       	mov	r12,r4
80003d7e:	fe b0 fb 4b 	rcall	80003414 <get_arg>
80003d82:	2f dd       	sub	sp,-12
80003d84:	98 18       	ld.sh	r8,r12[0x2]
80003d86:	c2 68       	rjmp	80003dd2 <_vfprintf_r+0x68e>
80003d88:	ee ca ff ff 	sub	r10,r7,-1
80003d8c:	10 37       	cp.w	r7,r8
80003d8e:	c0 94       	brge	80003da0 <_vfprintf_r+0x65c>
80003d90:	fa c9 f9 44 	sub	r9,sp,-1724
80003d94:	14 97       	mov	r7,r10
80003d96:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003d9a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003d9e:	c1 a8       	rjmp	80003dd2 <_vfprintf_r+0x68e>
80003da0:	41 09       	lddsp	r9,sp[0x40]
80003da2:	59 f8       	cp.w	r8,31
80003da4:	e0 89 00 13 	brgt	80003dca <_vfprintf_r+0x686>
80003da8:	f2 cb ff fc 	sub	r11,r9,-4
80003dac:	51 0b       	stdsp	sp[0x40],r11
80003dae:	72 09       	ld.w	r9,r9[0x0]
80003db0:	fa c6 f9 44 	sub	r6,sp,-1724
80003db4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003db8:	2f f8       	sub	r8,-1
80003dba:	f7 49 fd 88 	st.w	r11[-632],r9
80003dbe:	fb 48 06 b4 	st.w	sp[1716],r8
80003dc2:	14 97       	mov	r7,r10
80003dc4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003dc8:	c0 58       	rjmp	80003dd2 <_vfprintf_r+0x68e>
80003dca:	92 18       	ld.sh	r8,r9[0x2]
80003dcc:	14 97       	mov	r7,r10
80003dce:	2f c9       	sub	r9,-4
80003dd0:	51 09       	stdsp	sp[0x40],r9
80003dd2:	50 18       	stdsp	sp[0x4],r8
80003dd4:	bf 58       	asr	r8,0x1f
80003dd6:	50 08       	stdsp	sp[0x0],r8
80003dd8:	c4 88       	rjmp	80003e68 <_vfprintf_r+0x724>
80003dda:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003dde:	40 3c       	lddsp	r12,sp[0xc]
80003de0:	58 0c       	cp.w	r12,0
80003de2:	c1 d0       	breq	80003e1c <_vfprintf_r+0x6d8>
80003de4:	10 36       	cp.w	r6,r8
80003de6:	c0 64       	brge	80003df2 <_vfprintf_r+0x6ae>
80003de8:	fa cb f9 44 	sub	r11,sp,-1724
80003dec:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003df0:	c1 f8       	rjmp	80003e2e <_vfprintf_r+0x6ea>
80003df2:	fa c8 f9 50 	sub	r8,sp,-1712
80003df6:	1a d8       	st.w	--sp,r8
80003df8:	fa c8 fa b8 	sub	r8,sp,-1352
80003dfc:	0c 9b       	mov	r11,r6
80003dfe:	1a d8       	st.w	--sp,r8
80003e00:	fa c8 fb b4 	sub	r8,sp,-1100
80003e04:	04 9a       	mov	r10,r2
80003e06:	1a d8       	st.w	--sp,r8
80003e08:	08 9c       	mov	r12,r4
80003e0a:	fa c8 f9 40 	sub	r8,sp,-1728
80003e0e:	fa c9 ff b4 	sub	r9,sp,-76
80003e12:	fe b0 fb 01 	rcall	80003414 <get_arg>
80003e16:	2f dd       	sub	sp,-12
80003e18:	78 0b       	ld.w	r11,r12[0x0]
80003e1a:	c2 48       	rjmp	80003e62 <_vfprintf_r+0x71e>
80003e1c:	ee ca ff ff 	sub	r10,r7,-1
80003e20:	10 37       	cp.w	r7,r8
80003e22:	c0 94       	brge	80003e34 <_vfprintf_r+0x6f0>
80003e24:	fa c9 f9 44 	sub	r9,sp,-1724
80003e28:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003e2c:	14 97       	mov	r7,r10
80003e2e:	ec fb fd 88 	ld.w	r11,r6[-632]
80003e32:	c1 88       	rjmp	80003e62 <_vfprintf_r+0x71e>
80003e34:	41 09       	lddsp	r9,sp[0x40]
80003e36:	59 f8       	cp.w	r8,31
80003e38:	e0 89 00 11 	brgt	80003e5a <_vfprintf_r+0x716>
80003e3c:	f2 cb ff fc 	sub	r11,r9,-4
80003e40:	51 0b       	stdsp	sp[0x40],r11
80003e42:	fa c6 f9 44 	sub	r6,sp,-1724
80003e46:	72 0b       	ld.w	r11,r9[0x0]
80003e48:	ec 08 00 39 	add	r9,r6,r8<<0x3
80003e4c:	f3 4b fd 88 	st.w	r9[-632],r11
80003e50:	2f f8       	sub	r8,-1
80003e52:	14 97       	mov	r7,r10
80003e54:	fb 48 06 b4 	st.w	sp[1716],r8
80003e58:	c0 58       	rjmp	80003e62 <_vfprintf_r+0x71e>
80003e5a:	72 0b       	ld.w	r11,r9[0x0]
80003e5c:	14 97       	mov	r7,r10
80003e5e:	2f c9       	sub	r9,-4
80003e60:	51 09       	stdsp	sp[0x40],r9
80003e62:	50 1b       	stdsp	sp[0x4],r11
80003e64:	bf 5b       	asr	r11,0x1f
80003e66:	50 0b       	stdsp	sp[0x0],r11
80003e68:	fa ea 00 00 	ld.d	r10,sp[0]
80003e6c:	58 0a       	cp.w	r10,0
80003e6e:	5c 2b       	cpc	r11
80003e70:	c0 e4       	brge	80003e8c <_vfprintf_r+0x748>
80003e72:	30 08       	mov	r8,0
80003e74:	fa ea 00 00 	ld.d	r10,sp[0]
80003e78:	30 09       	mov	r9,0
80003e7a:	f0 0a 01 0a 	sub	r10,r8,r10
80003e7e:	f2 0b 01 4b 	sbc	r11,r9,r11
80003e82:	32 d8       	mov	r8,45
80003e84:	fa eb 00 00 	st.d	sp[0],r10
80003e88:	fb 68 06 bb 	st.b	sp[1723],r8
80003e8c:	30 18       	mov	r8,1
80003e8e:	e0 8f 06 fa 	bral	80004c82 <_vfprintf_r+0x153e>
80003e92:	50 a7       	stdsp	sp[0x28],r7
80003e94:	50 80       	stdsp	sp[0x20],r0
80003e96:	0c 97       	mov	r7,r6
80003e98:	04 94       	mov	r4,r2
80003e9a:	06 96       	mov	r6,r3
80003e9c:	02 92       	mov	r2,r1
80003e9e:	40 93       	lddsp	r3,sp[0x24]
80003ea0:	10 90       	mov	r0,r8
80003ea2:	40 41       	lddsp	r1,sp[0x10]
80003ea4:	0e 99       	mov	r9,r7
80003ea6:	ed b5 00 03 	bld	r5,0x3
80003eaa:	c4 11       	brne	80003f2c <_vfprintf_r+0x7e8>
80003eac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003eb0:	40 3a       	lddsp	r10,sp[0xc]
80003eb2:	58 0a       	cp.w	r10,0
80003eb4:	c1 90       	breq	80003ee6 <_vfprintf_r+0x7a2>
80003eb6:	10 36       	cp.w	r6,r8
80003eb8:	c6 45       	brlt	80003f80 <_vfprintf_r+0x83c>
80003eba:	fa c8 f9 50 	sub	r8,sp,-1712
80003ebe:	1a d8       	st.w	--sp,r8
80003ec0:	fa c8 fa b8 	sub	r8,sp,-1352
80003ec4:	1a d8       	st.w	--sp,r8
80003ec6:	fa c8 fb b4 	sub	r8,sp,-1100
80003eca:	0c 9b       	mov	r11,r6
80003ecc:	1a d8       	st.w	--sp,r8
80003ece:	04 9a       	mov	r10,r2
80003ed0:	fa c8 f9 40 	sub	r8,sp,-1728
80003ed4:	fa c9 ff b4 	sub	r9,sp,-76
80003ed8:	08 9c       	mov	r12,r4
80003eda:	fe b0 fa 9d 	rcall	80003414 <get_arg>
80003ede:	2f dd       	sub	sp,-12
80003ee0:	78 16       	ld.w	r6,r12[0x4]
80003ee2:	50 76       	stdsp	sp[0x1c],r6
80003ee4:	c4 88       	rjmp	80003f74 <_vfprintf_r+0x830>
80003ee6:	2f f7       	sub	r7,-1
80003ee8:	10 39       	cp.w	r9,r8
80003eea:	c0 c4       	brge	80003f02 <_vfprintf_r+0x7be>
80003eec:	fa ce f9 44 	sub	lr,sp,-1724
80003ef0:	fc 06 00 36 	add	r6,lr,r6<<0x3
80003ef4:	ec fc fd 8c 	ld.w	r12,r6[-628]
80003ef8:	50 7c       	stdsp	sp[0x1c],r12
80003efa:	ec f6 fd 88 	ld.w	r6,r6[-632]
80003efe:	50 56       	stdsp	sp[0x14],r6
80003f00:	c6 68       	rjmp	80003fcc <_vfprintf_r+0x888>
80003f02:	41 09       	lddsp	r9,sp[0x40]
80003f04:	59 f8       	cp.w	r8,31
80003f06:	e0 89 00 10 	brgt	80003f26 <_vfprintf_r+0x7e2>
80003f0a:	f2 ca ff f8 	sub	r10,r9,-8
80003f0e:	72 1b       	ld.w	r11,r9[0x4]
80003f10:	51 0a       	stdsp	sp[0x40],r10
80003f12:	72 09       	ld.w	r9,r9[0x0]
80003f14:	fa ca f9 44 	sub	r10,sp,-1724
80003f18:	50 7b       	stdsp	sp[0x1c],r11
80003f1a:	50 59       	stdsp	sp[0x14],r9
80003f1c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80003f20:	40 5b       	lddsp	r11,sp[0x14]
80003f22:	40 7a       	lddsp	r10,sp[0x1c]
80003f24:	c4 78       	rjmp	80003fb2 <_vfprintf_r+0x86e>
80003f26:	72 18       	ld.w	r8,r9[0x4]
80003f28:	50 78       	stdsp	sp[0x1c],r8
80003f2a:	c4 c8       	rjmp	80003fc2 <_vfprintf_r+0x87e>
80003f2c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f30:	40 3e       	lddsp	lr,sp[0xc]
80003f32:	58 0e       	cp.w	lr,0
80003f34:	c2 30       	breq	80003f7a <_vfprintf_r+0x836>
80003f36:	10 36       	cp.w	r6,r8
80003f38:	c0 94       	brge	80003f4a <_vfprintf_r+0x806>
80003f3a:	fa cc f9 44 	sub	r12,sp,-1724
80003f3e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003f42:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003f46:	50 7b       	stdsp	sp[0x1c],r11
80003f48:	cd 9b       	rjmp	80003efa <_vfprintf_r+0x7b6>
80003f4a:	fa c8 f9 50 	sub	r8,sp,-1712
80003f4e:	1a d8       	st.w	--sp,r8
80003f50:	fa c8 fa b8 	sub	r8,sp,-1352
80003f54:	04 9a       	mov	r10,r2
80003f56:	1a d8       	st.w	--sp,r8
80003f58:	fa c8 fb b4 	sub	r8,sp,-1100
80003f5c:	0c 9b       	mov	r11,r6
80003f5e:	1a d8       	st.w	--sp,r8
80003f60:	08 9c       	mov	r12,r4
80003f62:	fa c8 f9 40 	sub	r8,sp,-1728
80003f66:	fa c9 ff b4 	sub	r9,sp,-76
80003f6a:	fe b0 fa 55 	rcall	80003414 <get_arg>
80003f6e:	2f dd       	sub	sp,-12
80003f70:	78 1a       	ld.w	r10,r12[0x4]
80003f72:	50 7a       	stdsp	sp[0x1c],r10
80003f74:	78 0c       	ld.w	r12,r12[0x0]
80003f76:	50 5c       	stdsp	sp[0x14],r12
80003f78:	c2 a8       	rjmp	80003fcc <_vfprintf_r+0x888>
80003f7a:	2f f7       	sub	r7,-1
80003f7c:	10 39       	cp.w	r9,r8
80003f7e:	c0 94       	brge	80003f90 <_vfprintf_r+0x84c>
80003f80:	fa c9 f9 44 	sub	r9,sp,-1724
80003f84:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003f88:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80003f8c:	50 78       	stdsp	sp[0x1c],r8
80003f8e:	cb 6b       	rjmp	80003efa <_vfprintf_r+0x7b6>
80003f90:	41 09       	lddsp	r9,sp[0x40]
80003f92:	59 f8       	cp.w	r8,31
80003f94:	e0 89 00 15 	brgt	80003fbe <_vfprintf_r+0x87a>
80003f98:	f2 ca ff f8 	sub	r10,r9,-8
80003f9c:	72 16       	ld.w	r6,r9[0x4]
80003f9e:	72 09       	ld.w	r9,r9[0x0]
80003fa0:	51 0a       	stdsp	sp[0x40],r10
80003fa2:	50 59       	stdsp	sp[0x14],r9
80003fa4:	fa ce f9 44 	sub	lr,sp,-1724
80003fa8:	50 76       	stdsp	sp[0x1c],r6
80003faa:	fc 08 00 39 	add	r9,lr,r8<<0x3
80003fae:	40 5b       	lddsp	r11,sp[0x14]
80003fb0:	0c 9a       	mov	r10,r6
80003fb2:	f2 eb fd 88 	st.d	r9[-632],r10
80003fb6:	2f f8       	sub	r8,-1
80003fb8:	fb 48 06 b4 	st.w	sp[1716],r8
80003fbc:	c0 88       	rjmp	80003fcc <_vfprintf_r+0x888>
80003fbe:	72 1c       	ld.w	r12,r9[0x4]
80003fc0:	50 7c       	stdsp	sp[0x1c],r12
80003fc2:	f2 c8 ff f8 	sub	r8,r9,-8
80003fc6:	51 08       	stdsp	sp[0x40],r8
80003fc8:	72 09       	ld.w	r9,r9[0x0]
80003fca:	50 59       	stdsp	sp[0x14],r9
80003fcc:	40 5b       	lddsp	r11,sp[0x14]
80003fce:	40 7a       	lddsp	r10,sp[0x1c]
80003fd0:	e0 a0 1c de 	rcall	8000798c <__isinfd>
80003fd4:	18 96       	mov	r6,r12
80003fd6:	c1 70       	breq	80004004 <_vfprintf_r+0x8c0>
80003fd8:	30 08       	mov	r8,0
80003fda:	30 09       	mov	r9,0
80003fdc:	40 5b       	lddsp	r11,sp[0x14]
80003fde:	40 7a       	lddsp	r10,sp[0x1c]
80003fe0:	e0 a0 21 cc 	rcall	80008378 <__avr32_f64_cmp_lt>
80003fe4:	c0 40       	breq	80003fec <_vfprintf_r+0x8a8>
80003fe6:	32 d8       	mov	r8,45
80003fe8:	fb 68 06 bb 	st.b	sp[1723],r8
80003fec:	fe c8 ad 8c 	sub	r8,pc,-21108
80003ff0:	fe c6 ad 8c 	sub	r6,pc,-21108
80003ff4:	a7 d5       	cbr	r5,0x7
80003ff6:	e0 40 00 47 	cp.w	r0,71
80003ffa:	f0 06 17 a0 	movle	r6,r8
80003ffe:	30 32       	mov	r2,3
80004000:	e0 8f 06 ce 	bral	80004d9c <_vfprintf_r+0x1658>
80004004:	40 5b       	lddsp	r11,sp[0x14]
80004006:	40 7a       	lddsp	r10,sp[0x1c]
80004008:	e0 a0 1c d7 	rcall	800079b6 <__isnand>
8000400c:	c0 e0       	breq	80004028 <_vfprintf_r+0x8e4>
8000400e:	50 26       	stdsp	sp[0x8],r6
80004010:	fe c8 ad a8 	sub	r8,pc,-21080
80004014:	fe c6 ad a8 	sub	r6,pc,-21080
80004018:	a7 d5       	cbr	r5,0x7
8000401a:	e0 40 00 47 	cp.w	r0,71
8000401e:	f0 06 17 a0 	movle	r6,r8
80004022:	30 32       	mov	r2,3
80004024:	e0 8f 06 c2 	bral	80004da8 <_vfprintf_r+0x1664>
80004028:	40 2a       	lddsp	r10,sp[0x8]
8000402a:	5b fa       	cp.w	r10,-1
8000402c:	c0 41       	brne	80004034 <_vfprintf_r+0x8f0>
8000402e:	30 69       	mov	r9,6
80004030:	50 29       	stdsp	sp[0x8],r9
80004032:	c1 18       	rjmp	80004054 <_vfprintf_r+0x910>
80004034:	e0 40 00 47 	cp.w	r0,71
80004038:	5f 09       	sreq	r9
8000403a:	e0 40 00 67 	cp.w	r0,103
8000403e:	5f 08       	sreq	r8
80004040:	f3 e8 10 08 	or	r8,r9,r8
80004044:	f8 08 18 00 	cp.b	r8,r12
80004048:	c0 60       	breq	80004054 <_vfprintf_r+0x910>
8000404a:	40 28       	lddsp	r8,sp[0x8]
8000404c:	58 08       	cp.w	r8,0
8000404e:	f9 b8 00 01 	moveq	r8,1
80004052:	50 28       	stdsp	sp[0x8],r8
80004054:	40 78       	lddsp	r8,sp[0x1c]
80004056:	40 59       	lddsp	r9,sp[0x14]
80004058:	fa e9 06 94 	st.d	sp[1684],r8
8000405c:	a9 a5       	sbr	r5,0x8
8000405e:	fa f8 06 94 	ld.w	r8,sp[1684]
80004062:	58 08       	cp.w	r8,0
80004064:	c0 65       	brlt	80004070 <_vfprintf_r+0x92c>
80004066:	40 5e       	lddsp	lr,sp[0x14]
80004068:	30 0c       	mov	r12,0
8000406a:	50 6e       	stdsp	sp[0x18],lr
8000406c:	50 9c       	stdsp	sp[0x24],r12
8000406e:	c0 78       	rjmp	8000407c <_vfprintf_r+0x938>
80004070:	40 5b       	lddsp	r11,sp[0x14]
80004072:	32 da       	mov	r10,45
80004074:	ee 1b 80 00 	eorh	r11,0x8000
80004078:	50 9a       	stdsp	sp[0x24],r10
8000407a:	50 6b       	stdsp	sp[0x18],r11
8000407c:	e0 40 00 46 	cp.w	r0,70
80004080:	5f 09       	sreq	r9
80004082:	e0 40 00 66 	cp.w	r0,102
80004086:	5f 08       	sreq	r8
80004088:	f3 e8 10 08 	or	r8,r9,r8
8000408c:	50 48       	stdsp	sp[0x10],r8
8000408e:	c0 40       	breq	80004096 <_vfprintf_r+0x952>
80004090:	40 22       	lddsp	r2,sp[0x8]
80004092:	30 39       	mov	r9,3
80004094:	c1 08       	rjmp	800040b4 <_vfprintf_r+0x970>
80004096:	e0 40 00 45 	cp.w	r0,69
8000409a:	5f 09       	sreq	r9
8000409c:	e0 40 00 65 	cp.w	r0,101
800040a0:	5f 08       	sreq	r8
800040a2:	40 22       	lddsp	r2,sp[0x8]
800040a4:	10 49       	or	r9,r8
800040a6:	2f f2       	sub	r2,-1
800040a8:	40 46       	lddsp	r6,sp[0x10]
800040aa:	ec 09 18 00 	cp.b	r9,r6
800040ae:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800040b2:	30 29       	mov	r9,2
800040b4:	fa c8 f9 5c 	sub	r8,sp,-1700
800040b8:	1a d8       	st.w	--sp,r8
800040ba:	fa c8 f9 54 	sub	r8,sp,-1708
800040be:	1a d8       	st.w	--sp,r8
800040c0:	fa c8 f9 4c 	sub	r8,sp,-1716
800040c4:	08 9c       	mov	r12,r4
800040c6:	1a d8       	st.w	--sp,r8
800040c8:	04 98       	mov	r8,r2
800040ca:	40 9b       	lddsp	r11,sp[0x24]
800040cc:	40 aa       	lddsp	r10,sp[0x28]
800040ce:	e0 a0 0b c3 	rcall	80005854 <_dtoa_r>
800040d2:	e0 40 00 47 	cp.w	r0,71
800040d6:	5f 19       	srne	r9
800040d8:	e0 40 00 67 	cp.w	r0,103
800040dc:	5f 18       	srne	r8
800040de:	18 96       	mov	r6,r12
800040e0:	2f dd       	sub	sp,-12
800040e2:	f3 e8 00 08 	and	r8,r9,r8
800040e6:	c0 41       	brne	800040ee <_vfprintf_r+0x9aa>
800040e8:	ed b5 00 00 	bld	r5,0x0
800040ec:	c3 01       	brne	8000414c <_vfprintf_r+0xa08>
800040ee:	ec 02 00 0e 	add	lr,r6,r2
800040f2:	50 3e       	stdsp	sp[0xc],lr
800040f4:	40 4c       	lddsp	r12,sp[0x10]
800040f6:	58 0c       	cp.w	r12,0
800040f8:	c1 50       	breq	80004122 <_vfprintf_r+0x9de>
800040fa:	0d 89       	ld.ub	r9,r6[0x0]
800040fc:	33 08       	mov	r8,48
800040fe:	f0 09 18 00 	cp.b	r9,r8
80004102:	c0 b1       	brne	80004118 <_vfprintf_r+0x9d4>
80004104:	30 08       	mov	r8,0
80004106:	30 09       	mov	r9,0
80004108:	40 6b       	lddsp	r11,sp[0x18]
8000410a:	40 7a       	lddsp	r10,sp[0x1c]
8000410c:	e0 a0 20 ef 	rcall	800082ea <__avr32_f64_cmp_eq>
80004110:	fb b2 00 01 	rsubeq	r2,1
80004114:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004118:	40 3b       	lddsp	r11,sp[0xc]
8000411a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000411e:	10 0b       	add	r11,r8
80004120:	50 3b       	stdsp	sp[0xc],r11
80004122:	40 6b       	lddsp	r11,sp[0x18]
80004124:	30 08       	mov	r8,0
80004126:	30 09       	mov	r9,0
80004128:	40 7a       	lddsp	r10,sp[0x1c]
8000412a:	e0 a0 20 e0 	rcall	800082ea <__avr32_f64_cmp_eq>
8000412e:	c0 90       	breq	80004140 <_vfprintf_r+0x9fc>
80004130:	40 3a       	lddsp	r10,sp[0xc]
80004132:	fb 4a 06 a4 	st.w	sp[1700],r10
80004136:	c0 58       	rjmp	80004140 <_vfprintf_r+0x9fc>
80004138:	10 c9       	st.b	r8++,r9
8000413a:	fb 48 06 a4 	st.w	sp[1700],r8
8000413e:	c0 28       	rjmp	80004142 <_vfprintf_r+0x9fe>
80004140:	33 09       	mov	r9,48
80004142:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004146:	40 3e       	lddsp	lr,sp[0xc]
80004148:	1c 38       	cp.w	r8,lr
8000414a:	cf 73       	brcs	80004138 <_vfprintf_r+0x9f4>
8000414c:	e0 40 00 47 	cp.w	r0,71
80004150:	5f 09       	sreq	r9
80004152:	e0 40 00 67 	cp.w	r0,103
80004156:	5f 08       	sreq	r8
80004158:	f3 e8 10 08 	or	r8,r9,r8
8000415c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004160:	0c 19       	sub	r9,r6
80004162:	50 69       	stdsp	sp[0x18],r9
80004164:	58 08       	cp.w	r8,0
80004166:	c0 b0       	breq	8000417c <_vfprintf_r+0xa38>
80004168:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000416c:	5b d8       	cp.w	r8,-3
8000416e:	c0 55       	brlt	80004178 <_vfprintf_r+0xa34>
80004170:	40 2c       	lddsp	r12,sp[0x8]
80004172:	18 38       	cp.w	r8,r12
80004174:	e0 8a 00 6a 	brle	80004248 <_vfprintf_r+0xb04>
80004178:	20 20       	sub	r0,2
8000417a:	c0 58       	rjmp	80004184 <_vfprintf_r+0xa40>
8000417c:	e0 40 00 65 	cp.w	r0,101
80004180:	e0 89 00 46 	brgt	8000420c <_vfprintf_r+0xac8>
80004184:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004188:	fb 60 06 9c 	st.b	sp[1692],r0
8000418c:	20 1b       	sub	r11,1
8000418e:	fb 4b 06 ac 	st.w	sp[1708],r11
80004192:	c0 47       	brpl	8000419a <_vfprintf_r+0xa56>
80004194:	5c 3b       	neg	r11
80004196:	32 d8       	mov	r8,45
80004198:	c0 28       	rjmp	8000419c <_vfprintf_r+0xa58>
8000419a:	32 b8       	mov	r8,43
8000419c:	fb 68 06 9d 	st.b	sp[1693],r8
800041a0:	58 9b       	cp.w	r11,9
800041a2:	e0 8a 00 1d 	brle	800041dc <_vfprintf_r+0xa98>
800041a6:	fa c9 fa 35 	sub	r9,sp,-1483
800041aa:	30 aa       	mov	r10,10
800041ac:	12 98       	mov	r8,r9
800041ae:	0e 9c       	mov	r12,r7
800041b0:	0c 92       	mov	r2,r6
800041b2:	f6 0a 0c 06 	divs	r6,r11,r10
800041b6:	0e 9b       	mov	r11,r7
800041b8:	2d 0b       	sub	r11,-48
800041ba:	10 fb       	st.b	--r8,r11
800041bc:	0c 9b       	mov	r11,r6
800041be:	58 96       	cp.w	r6,9
800041c0:	fe 99 ff f9 	brgt	800041b2 <_vfprintf_r+0xa6e>
800041c4:	2d 0b       	sub	r11,-48
800041c6:	18 97       	mov	r7,r12
800041c8:	04 96       	mov	r6,r2
800041ca:	10 fb       	st.b	--r8,r11
800041cc:	fa ca f9 62 	sub	r10,sp,-1694
800041d0:	c0 38       	rjmp	800041d6 <_vfprintf_r+0xa92>
800041d2:	11 3b       	ld.ub	r11,r8++
800041d4:	14 cb       	st.b	r10++,r11
800041d6:	12 38       	cp.w	r8,r9
800041d8:	cf d3       	brcs	800041d2 <_vfprintf_r+0xa8e>
800041da:	c0 98       	rjmp	800041ec <_vfprintf_r+0xaa8>
800041dc:	2d 0b       	sub	r11,-48
800041de:	33 08       	mov	r8,48
800041e0:	fb 6b 06 9f 	st.b	sp[1695],r11
800041e4:	fb 68 06 9e 	st.b	sp[1694],r8
800041e8:	fa ca f9 60 	sub	r10,sp,-1696
800041ec:	fa c8 f9 64 	sub	r8,sp,-1692
800041f0:	f4 08 01 08 	sub	r8,r10,r8
800041f4:	50 e8       	stdsp	sp[0x38],r8
800041f6:	10 92       	mov	r2,r8
800041f8:	40 6b       	lddsp	r11,sp[0x18]
800041fa:	16 02       	add	r2,r11
800041fc:	58 1b       	cp.w	r11,1
800041fe:	e0 89 00 05 	brgt	80004208 <_vfprintf_r+0xac4>
80004202:	ed b5 00 00 	bld	r5,0x0
80004206:	c3 51       	brne	80004270 <_vfprintf_r+0xb2c>
80004208:	2f f2       	sub	r2,-1
8000420a:	c3 38       	rjmp	80004270 <_vfprintf_r+0xb2c>
8000420c:	e0 40 00 66 	cp.w	r0,102
80004210:	c1 c1       	brne	80004248 <_vfprintf_r+0xb04>
80004212:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004216:	58 02       	cp.w	r2,0
80004218:	e0 8a 00 0c 	brle	80004230 <_vfprintf_r+0xaec>
8000421c:	40 2a       	lddsp	r10,sp[0x8]
8000421e:	58 0a       	cp.w	r10,0
80004220:	c0 41       	brne	80004228 <_vfprintf_r+0xae4>
80004222:	ed b5 00 00 	bld	r5,0x0
80004226:	c2 51       	brne	80004270 <_vfprintf_r+0xb2c>
80004228:	2f f2       	sub	r2,-1
8000422a:	40 29       	lddsp	r9,sp[0x8]
8000422c:	12 02       	add	r2,r9
8000422e:	c0 b8       	rjmp	80004244 <_vfprintf_r+0xb00>
80004230:	40 28       	lddsp	r8,sp[0x8]
80004232:	58 08       	cp.w	r8,0
80004234:	c0 61       	brne	80004240 <_vfprintf_r+0xafc>
80004236:	ed b5 00 00 	bld	r5,0x0
8000423a:	c0 30       	breq	80004240 <_vfprintf_r+0xafc>
8000423c:	30 12       	mov	r2,1
8000423e:	c1 98       	rjmp	80004270 <_vfprintf_r+0xb2c>
80004240:	40 22       	lddsp	r2,sp[0x8]
80004242:	2f e2       	sub	r2,-2
80004244:	36 60       	mov	r0,102
80004246:	c1 58       	rjmp	80004270 <_vfprintf_r+0xb2c>
80004248:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000424c:	40 6e       	lddsp	lr,sp[0x18]
8000424e:	1c 32       	cp.w	r2,lr
80004250:	c0 65       	brlt	8000425c <_vfprintf_r+0xb18>
80004252:	ed b5 00 00 	bld	r5,0x0
80004256:	f7 b2 00 ff 	subeq	r2,-1
8000425a:	c0 a8       	rjmp	8000426e <_vfprintf_r+0xb2a>
8000425c:	e4 08 11 02 	rsub	r8,r2,2
80004260:	40 6c       	lddsp	r12,sp[0x18]
80004262:	58 02       	cp.w	r2,0
80004264:	f0 02 17 a0 	movle	r2,r8
80004268:	f9 b2 09 01 	movgt	r2,1
8000426c:	18 02       	add	r2,r12
8000426e:	36 70       	mov	r0,103
80004270:	40 9b       	lddsp	r11,sp[0x24]
80004272:	58 0b       	cp.w	r11,0
80004274:	e0 80 05 94 	breq	80004d9c <_vfprintf_r+0x1658>
80004278:	32 d8       	mov	r8,45
8000427a:	fb 68 06 bb 	st.b	sp[1723],r8
8000427e:	e0 8f 05 93 	bral	80004da4 <_vfprintf_r+0x1660>
80004282:	50 a7       	stdsp	sp[0x28],r7
80004284:	04 94       	mov	r4,r2
80004286:	0c 97       	mov	r7,r6
80004288:	02 92       	mov	r2,r1
8000428a:	06 96       	mov	r6,r3
8000428c:	40 41       	lddsp	r1,sp[0x10]
8000428e:	40 93       	lddsp	r3,sp[0x24]
80004290:	0e 99       	mov	r9,r7
80004292:	ed b5 00 05 	bld	r5,0x5
80004296:	c4 81       	brne	80004326 <_vfprintf_r+0xbe2>
80004298:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000429c:	40 3e       	lddsp	lr,sp[0xc]
8000429e:	58 0e       	cp.w	lr,0
800042a0:	c1 d0       	breq	800042da <_vfprintf_r+0xb96>
800042a2:	10 36       	cp.w	r6,r8
800042a4:	c0 64       	brge	800042b0 <_vfprintf_r+0xb6c>
800042a6:	fa cc f9 44 	sub	r12,sp,-1724
800042aa:	f8 06 00 36 	add	r6,r12,r6<<0x3
800042ae:	c1 d8       	rjmp	800042e8 <_vfprintf_r+0xba4>
800042b0:	fa c8 f9 50 	sub	r8,sp,-1712
800042b4:	1a d8       	st.w	--sp,r8
800042b6:	fa c8 fa b8 	sub	r8,sp,-1352
800042ba:	04 9a       	mov	r10,r2
800042bc:	1a d8       	st.w	--sp,r8
800042be:	fa c8 fb b4 	sub	r8,sp,-1100
800042c2:	0c 9b       	mov	r11,r6
800042c4:	1a d8       	st.w	--sp,r8
800042c6:	08 9c       	mov	r12,r4
800042c8:	fa c8 f9 40 	sub	r8,sp,-1728
800042cc:	fa c9 ff b4 	sub	r9,sp,-76
800042d0:	fe b0 f8 a2 	rcall	80003414 <get_arg>
800042d4:	2f dd       	sub	sp,-12
800042d6:	78 0a       	ld.w	r10,r12[0x0]
800042d8:	c2 08       	rjmp	80004318 <_vfprintf_r+0xbd4>
800042da:	2f f7       	sub	r7,-1
800042dc:	10 39       	cp.w	r9,r8
800042de:	c0 84       	brge	800042ee <_vfprintf_r+0xbaa>
800042e0:	fa cb f9 44 	sub	r11,sp,-1724
800042e4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800042e8:	ec fa fd 88 	ld.w	r10,r6[-632]
800042ec:	c1 68       	rjmp	80004318 <_vfprintf_r+0xbd4>
800042ee:	41 09       	lddsp	r9,sp[0x40]
800042f0:	59 f8       	cp.w	r8,31
800042f2:	e0 89 00 10 	brgt	80004312 <_vfprintf_r+0xbce>
800042f6:	f2 ca ff fc 	sub	r10,r9,-4
800042fa:	51 0a       	stdsp	sp[0x40],r10
800042fc:	fa c6 f9 44 	sub	r6,sp,-1724
80004300:	72 0a       	ld.w	r10,r9[0x0]
80004302:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004306:	f3 4a fd 88 	st.w	r9[-632],r10
8000430a:	2f f8       	sub	r8,-1
8000430c:	fb 48 06 b4 	st.w	sp[1716],r8
80004310:	c0 48       	rjmp	80004318 <_vfprintf_r+0xbd4>
80004312:	72 0a       	ld.w	r10,r9[0x0]
80004314:	2f c9       	sub	r9,-4
80004316:	51 09       	stdsp	sp[0x40],r9
80004318:	40 be       	lddsp	lr,sp[0x2c]
8000431a:	1c 98       	mov	r8,lr
8000431c:	95 1e       	st.w	r10[0x4],lr
8000431e:	bf 58       	asr	r8,0x1f
80004320:	95 08       	st.w	r10[0x0],r8
80004322:	fe 9f fa 9f 	bral	80003860 <_vfprintf_r+0x11c>
80004326:	ed b5 00 04 	bld	r5,0x4
8000432a:	c4 80       	breq	800043ba <_vfprintf_r+0xc76>
8000432c:	e2 15 00 40 	andl	r5,0x40,COH
80004330:	c4 50       	breq	800043ba <_vfprintf_r+0xc76>
80004332:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004336:	40 3c       	lddsp	r12,sp[0xc]
80004338:	58 0c       	cp.w	r12,0
8000433a:	c1 d0       	breq	80004374 <_vfprintf_r+0xc30>
8000433c:	10 36       	cp.w	r6,r8
8000433e:	c0 64       	brge	8000434a <_vfprintf_r+0xc06>
80004340:	fa cb f9 44 	sub	r11,sp,-1724
80004344:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004348:	c1 d8       	rjmp	80004382 <_vfprintf_r+0xc3e>
8000434a:	fa c8 f9 50 	sub	r8,sp,-1712
8000434e:	1a d8       	st.w	--sp,r8
80004350:	fa c8 fa b8 	sub	r8,sp,-1352
80004354:	04 9a       	mov	r10,r2
80004356:	1a d8       	st.w	--sp,r8
80004358:	fa c8 fb b4 	sub	r8,sp,-1100
8000435c:	0c 9b       	mov	r11,r6
8000435e:	1a d8       	st.w	--sp,r8
80004360:	08 9c       	mov	r12,r4
80004362:	fa c8 f9 40 	sub	r8,sp,-1728
80004366:	fa c9 ff b4 	sub	r9,sp,-76
8000436a:	fe b0 f8 55 	rcall	80003414 <get_arg>
8000436e:	2f dd       	sub	sp,-12
80004370:	78 0a       	ld.w	r10,r12[0x0]
80004372:	c2 08       	rjmp	800043b2 <_vfprintf_r+0xc6e>
80004374:	2f f7       	sub	r7,-1
80004376:	10 39       	cp.w	r9,r8
80004378:	c0 84       	brge	80004388 <_vfprintf_r+0xc44>
8000437a:	fa ca f9 44 	sub	r10,sp,-1724
8000437e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004382:	ec fa fd 88 	ld.w	r10,r6[-632]
80004386:	c1 68       	rjmp	800043b2 <_vfprintf_r+0xc6e>
80004388:	41 09       	lddsp	r9,sp[0x40]
8000438a:	59 f8       	cp.w	r8,31
8000438c:	e0 89 00 10 	brgt	800043ac <_vfprintf_r+0xc68>
80004390:	f2 ca ff fc 	sub	r10,r9,-4
80004394:	51 0a       	stdsp	sp[0x40],r10
80004396:	fa c6 f9 44 	sub	r6,sp,-1724
8000439a:	72 0a       	ld.w	r10,r9[0x0]
8000439c:	ec 08 00 39 	add	r9,r6,r8<<0x3
800043a0:	f3 4a fd 88 	st.w	r9[-632],r10
800043a4:	2f f8       	sub	r8,-1
800043a6:	fb 48 06 b4 	st.w	sp[1716],r8
800043aa:	c0 48       	rjmp	800043b2 <_vfprintf_r+0xc6e>
800043ac:	72 0a       	ld.w	r10,r9[0x0]
800043ae:	2f c9       	sub	r9,-4
800043b0:	51 09       	stdsp	sp[0x40],r9
800043b2:	40 be       	lddsp	lr,sp[0x2c]
800043b4:	b4 0e       	st.h	r10[0x0],lr
800043b6:	fe 9f fa 55 	bral	80003860 <_vfprintf_r+0x11c>
800043ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800043be:	40 3c       	lddsp	r12,sp[0xc]
800043c0:	58 0c       	cp.w	r12,0
800043c2:	c1 d0       	breq	800043fc <_vfprintf_r+0xcb8>
800043c4:	10 36       	cp.w	r6,r8
800043c6:	c0 64       	brge	800043d2 <_vfprintf_r+0xc8e>
800043c8:	fa cb f9 44 	sub	r11,sp,-1724
800043cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800043d0:	c1 d8       	rjmp	8000440a <_vfprintf_r+0xcc6>
800043d2:	fa c8 f9 50 	sub	r8,sp,-1712
800043d6:	1a d8       	st.w	--sp,r8
800043d8:	fa c8 fa b8 	sub	r8,sp,-1352
800043dc:	04 9a       	mov	r10,r2
800043de:	1a d8       	st.w	--sp,r8
800043e0:	fa c8 fb b4 	sub	r8,sp,-1100
800043e4:	0c 9b       	mov	r11,r6
800043e6:	1a d8       	st.w	--sp,r8
800043e8:	08 9c       	mov	r12,r4
800043ea:	fa c8 f9 40 	sub	r8,sp,-1728
800043ee:	fa c9 ff b4 	sub	r9,sp,-76
800043f2:	fe b0 f8 11 	rcall	80003414 <get_arg>
800043f6:	2f dd       	sub	sp,-12
800043f8:	78 0a       	ld.w	r10,r12[0x0]
800043fa:	c2 08       	rjmp	8000443a <_vfprintf_r+0xcf6>
800043fc:	2f f7       	sub	r7,-1
800043fe:	10 39       	cp.w	r9,r8
80004400:	c0 84       	brge	80004410 <_vfprintf_r+0xccc>
80004402:	fa ca f9 44 	sub	r10,sp,-1724
80004406:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000440a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000440e:	c1 68       	rjmp	8000443a <_vfprintf_r+0xcf6>
80004410:	41 09       	lddsp	r9,sp[0x40]
80004412:	59 f8       	cp.w	r8,31
80004414:	e0 89 00 10 	brgt	80004434 <_vfprintf_r+0xcf0>
80004418:	f2 ca ff fc 	sub	r10,r9,-4
8000441c:	51 0a       	stdsp	sp[0x40],r10
8000441e:	fa c6 f9 44 	sub	r6,sp,-1724
80004422:	72 0a       	ld.w	r10,r9[0x0]
80004424:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004428:	f3 4a fd 88 	st.w	r9[-632],r10
8000442c:	2f f8       	sub	r8,-1
8000442e:	fb 48 06 b4 	st.w	sp[1716],r8
80004432:	c0 48       	rjmp	8000443a <_vfprintf_r+0xcf6>
80004434:	72 0a       	ld.w	r10,r9[0x0]
80004436:	2f c9       	sub	r9,-4
80004438:	51 09       	stdsp	sp[0x40],r9
8000443a:	40 be       	lddsp	lr,sp[0x2c]
8000443c:	95 0e       	st.w	r10[0x0],lr
8000443e:	fe 9f fa 11 	bral	80003860 <_vfprintf_r+0x11c>
80004442:	50 a7       	stdsp	sp[0x28],r7
80004444:	50 80       	stdsp	sp[0x20],r0
80004446:	0c 97       	mov	r7,r6
80004448:	04 94       	mov	r4,r2
8000444a:	06 96       	mov	r6,r3
8000444c:	02 92       	mov	r2,r1
8000444e:	40 93       	lddsp	r3,sp[0x24]
80004450:	10 90       	mov	r0,r8
80004452:	40 41       	lddsp	r1,sp[0x10]
80004454:	a5 a5       	sbr	r5,0x4
80004456:	c0 a8       	rjmp	8000446a <_vfprintf_r+0xd26>
80004458:	50 a7       	stdsp	sp[0x28],r7
8000445a:	50 80       	stdsp	sp[0x20],r0
8000445c:	0c 97       	mov	r7,r6
8000445e:	04 94       	mov	r4,r2
80004460:	06 96       	mov	r6,r3
80004462:	02 92       	mov	r2,r1
80004464:	40 93       	lddsp	r3,sp[0x24]
80004466:	10 90       	mov	r0,r8
80004468:	40 41       	lddsp	r1,sp[0x10]
8000446a:	ed b5 00 05 	bld	r5,0x5
8000446e:	c5 d1       	brne	80004528 <_vfprintf_r+0xde4>
80004470:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004474:	40 3c       	lddsp	r12,sp[0xc]
80004476:	58 0c       	cp.w	r12,0
80004478:	c2 60       	breq	800044c4 <_vfprintf_r+0xd80>
8000447a:	10 36       	cp.w	r6,r8
8000447c:	c0 a4       	brge	80004490 <_vfprintf_r+0xd4c>
8000447e:	fa cb f9 44 	sub	r11,sp,-1724
80004482:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004486:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000448a:	fa e9 00 00 	st.d	sp[0],r8
8000448e:	c1 88       	rjmp	800044be <_vfprintf_r+0xd7a>
80004490:	fa c8 f9 50 	sub	r8,sp,-1712
80004494:	1a d8       	st.w	--sp,r8
80004496:	fa c8 fa b8 	sub	r8,sp,-1352
8000449a:	04 9a       	mov	r10,r2
8000449c:	1a d8       	st.w	--sp,r8
8000449e:	0c 9b       	mov	r11,r6
800044a0:	fa c8 fb b4 	sub	r8,sp,-1100
800044a4:	08 9c       	mov	r12,r4
800044a6:	1a d8       	st.w	--sp,r8
800044a8:	fa c8 f9 40 	sub	r8,sp,-1728
800044ac:	fa c9 ff b4 	sub	r9,sp,-76
800044b0:	fe b0 f7 b2 	rcall	80003414 <get_arg>
800044b4:	2f dd       	sub	sp,-12
800044b6:	f8 ea 00 00 	ld.d	r10,r12[0]
800044ba:	fa eb 00 00 	st.d	sp[0],r10
800044be:	30 08       	mov	r8,0
800044c0:	e0 8f 03 de 	bral	80004c7c <_vfprintf_r+0x1538>
800044c4:	ee ca ff ff 	sub	r10,r7,-1
800044c8:	10 37       	cp.w	r7,r8
800044ca:	c0 b4       	brge	800044e0 <_vfprintf_r+0xd9c>
800044cc:	fa c9 f9 44 	sub	r9,sp,-1724
800044d0:	14 97       	mov	r7,r10
800044d2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800044d6:	ec ea fd 88 	ld.d	r10,r6[-632]
800044da:	fa eb 00 00 	st.d	sp[0],r10
800044de:	c1 88       	rjmp	8000450e <_vfprintf_r+0xdca>
800044e0:	41 09       	lddsp	r9,sp[0x40]
800044e2:	59 f8       	cp.w	r8,31
800044e4:	e0 89 00 18 	brgt	80004514 <_vfprintf_r+0xdd0>
800044e8:	f2 e6 00 00 	ld.d	r6,r9[0]
800044ec:	f2 cb ff f8 	sub	r11,r9,-8
800044f0:	fa e7 00 00 	st.d	sp[0],r6
800044f4:	51 0b       	stdsp	sp[0x40],r11
800044f6:	fa c6 f9 44 	sub	r6,sp,-1724
800044fa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800044fe:	fa e6 00 00 	ld.d	r6,sp[0]
80004502:	f2 e7 fd 88 	st.d	r9[-632],r6
80004506:	2f f8       	sub	r8,-1
80004508:	14 97       	mov	r7,r10
8000450a:	fb 48 06 b4 	st.w	sp[1716],r8
8000450e:	40 38       	lddsp	r8,sp[0xc]
80004510:	e0 8f 03 b6 	bral	80004c7c <_vfprintf_r+0x1538>
80004514:	f2 e6 00 00 	ld.d	r6,r9[0]
80004518:	40 38       	lddsp	r8,sp[0xc]
8000451a:	fa e7 00 00 	st.d	sp[0],r6
8000451e:	2f 89       	sub	r9,-8
80004520:	14 97       	mov	r7,r10
80004522:	51 09       	stdsp	sp[0x40],r9
80004524:	e0 8f 03 ac 	bral	80004c7c <_vfprintf_r+0x1538>
80004528:	ed b5 00 04 	bld	r5,0x4
8000452c:	c1 61       	brne	80004558 <_vfprintf_r+0xe14>
8000452e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004532:	40 3e       	lddsp	lr,sp[0xc]
80004534:	58 0e       	cp.w	lr,0
80004536:	c0 80       	breq	80004546 <_vfprintf_r+0xe02>
80004538:	10 36       	cp.w	r6,r8
8000453a:	c6 74       	brge	80004608 <_vfprintf_r+0xec4>
8000453c:	fa cc f9 44 	sub	r12,sp,-1724
80004540:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004544:	c8 08       	rjmp	80004644 <_vfprintf_r+0xf00>
80004546:	ee ca ff ff 	sub	r10,r7,-1
8000454a:	10 37       	cp.w	r7,r8
8000454c:	c7 f4       	brge	8000464a <_vfprintf_r+0xf06>
8000454e:	fa cb f9 44 	sub	r11,sp,-1724
80004552:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004556:	c7 68       	rjmp	80004642 <_vfprintf_r+0xefe>
80004558:	ed b5 00 06 	bld	r5,0x6
8000455c:	c4 a1       	brne	800045f0 <_vfprintf_r+0xeac>
8000455e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004562:	40 3c       	lddsp	r12,sp[0xc]
80004564:	58 0c       	cp.w	r12,0
80004566:	c1 d0       	breq	800045a0 <_vfprintf_r+0xe5c>
80004568:	10 36       	cp.w	r6,r8
8000456a:	c0 64       	brge	80004576 <_vfprintf_r+0xe32>
8000456c:	fa cb f9 44 	sub	r11,sp,-1724
80004570:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004574:	c1 f8       	rjmp	800045b2 <_vfprintf_r+0xe6e>
80004576:	fa c8 f9 50 	sub	r8,sp,-1712
8000457a:	1a d8       	st.w	--sp,r8
8000457c:	fa c8 fa b8 	sub	r8,sp,-1352
80004580:	1a d8       	st.w	--sp,r8
80004582:	fa c8 fb b4 	sub	r8,sp,-1100
80004586:	1a d8       	st.w	--sp,r8
80004588:	fa c8 f9 40 	sub	r8,sp,-1728
8000458c:	fa c9 ff b4 	sub	r9,sp,-76
80004590:	04 9a       	mov	r10,r2
80004592:	0c 9b       	mov	r11,r6
80004594:	08 9c       	mov	r12,r4
80004596:	fe b0 f7 3f 	rcall	80003414 <get_arg>
8000459a:	2f dd       	sub	sp,-12
8000459c:	98 18       	ld.sh	r8,r12[0x2]
8000459e:	c2 68       	rjmp	800045ea <_vfprintf_r+0xea6>
800045a0:	ee ca ff ff 	sub	r10,r7,-1
800045a4:	10 37       	cp.w	r7,r8
800045a6:	c0 94       	brge	800045b8 <_vfprintf_r+0xe74>
800045a8:	fa c9 f9 44 	sub	r9,sp,-1724
800045ac:	14 97       	mov	r7,r10
800045ae:	f2 06 00 36 	add	r6,r9,r6<<0x3
800045b2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800045b6:	c1 a8       	rjmp	800045ea <_vfprintf_r+0xea6>
800045b8:	41 09       	lddsp	r9,sp[0x40]
800045ba:	59 f8       	cp.w	r8,31
800045bc:	e0 89 00 13 	brgt	800045e2 <_vfprintf_r+0xe9e>
800045c0:	f2 cb ff fc 	sub	r11,r9,-4
800045c4:	51 0b       	stdsp	sp[0x40],r11
800045c6:	72 09       	ld.w	r9,r9[0x0]
800045c8:	fa c6 f9 44 	sub	r6,sp,-1724
800045cc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800045d0:	2f f8       	sub	r8,-1
800045d2:	f7 49 fd 88 	st.w	r11[-632],r9
800045d6:	fb 48 06 b4 	st.w	sp[1716],r8
800045da:	14 97       	mov	r7,r10
800045dc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800045e0:	c0 58       	rjmp	800045ea <_vfprintf_r+0xea6>
800045e2:	92 18       	ld.sh	r8,r9[0x2]
800045e4:	14 97       	mov	r7,r10
800045e6:	2f c9       	sub	r9,-4
800045e8:	51 09       	stdsp	sp[0x40],r9
800045ea:	5c 78       	castu.h	r8
800045ec:	50 18       	stdsp	sp[0x4],r8
800045ee:	c4 68       	rjmp	8000467a <_vfprintf_r+0xf36>
800045f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045f4:	40 3c       	lddsp	r12,sp[0xc]
800045f6:	58 0c       	cp.w	r12,0
800045f8:	c1 d0       	breq	80004632 <_vfprintf_r+0xeee>
800045fa:	10 36       	cp.w	r6,r8
800045fc:	c0 64       	brge	80004608 <_vfprintf_r+0xec4>
800045fe:	fa cb f9 44 	sub	r11,sp,-1724
80004602:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004606:	c1 f8       	rjmp	80004644 <_vfprintf_r+0xf00>
80004608:	fa c8 f9 50 	sub	r8,sp,-1712
8000460c:	1a d8       	st.w	--sp,r8
8000460e:	fa c8 fa b8 	sub	r8,sp,-1352
80004612:	0c 9b       	mov	r11,r6
80004614:	1a d8       	st.w	--sp,r8
80004616:	fa c8 fb b4 	sub	r8,sp,-1100
8000461a:	04 9a       	mov	r10,r2
8000461c:	1a d8       	st.w	--sp,r8
8000461e:	08 9c       	mov	r12,r4
80004620:	fa c8 f9 40 	sub	r8,sp,-1728
80004624:	fa c9 ff b4 	sub	r9,sp,-76
80004628:	fe b0 f6 f6 	rcall	80003414 <get_arg>
8000462c:	2f dd       	sub	sp,-12
8000462e:	78 0b       	ld.w	r11,r12[0x0]
80004630:	c2 48       	rjmp	80004678 <_vfprintf_r+0xf34>
80004632:	ee ca ff ff 	sub	r10,r7,-1
80004636:	10 37       	cp.w	r7,r8
80004638:	c0 94       	brge	8000464a <_vfprintf_r+0xf06>
8000463a:	fa c9 f9 44 	sub	r9,sp,-1724
8000463e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004642:	14 97       	mov	r7,r10
80004644:	ec fb fd 88 	ld.w	r11,r6[-632]
80004648:	c1 88       	rjmp	80004678 <_vfprintf_r+0xf34>
8000464a:	41 09       	lddsp	r9,sp[0x40]
8000464c:	59 f8       	cp.w	r8,31
8000464e:	e0 89 00 11 	brgt	80004670 <_vfprintf_r+0xf2c>
80004652:	f2 cb ff fc 	sub	r11,r9,-4
80004656:	51 0b       	stdsp	sp[0x40],r11
80004658:	fa c6 f9 44 	sub	r6,sp,-1724
8000465c:	72 0b       	ld.w	r11,r9[0x0]
8000465e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004662:	f3 4b fd 88 	st.w	r9[-632],r11
80004666:	2f f8       	sub	r8,-1
80004668:	14 97       	mov	r7,r10
8000466a:	fb 48 06 b4 	st.w	sp[1716],r8
8000466e:	c0 58       	rjmp	80004678 <_vfprintf_r+0xf34>
80004670:	72 0b       	ld.w	r11,r9[0x0]
80004672:	14 97       	mov	r7,r10
80004674:	2f c9       	sub	r9,-4
80004676:	51 09       	stdsp	sp[0x40],r9
80004678:	50 1b       	stdsp	sp[0x4],r11
8000467a:	30 0e       	mov	lr,0
8000467c:	50 0e       	stdsp	sp[0x0],lr
8000467e:	1c 98       	mov	r8,lr
80004680:	e0 8f 02 fe 	bral	80004c7c <_vfprintf_r+0x1538>
80004684:	50 a7       	stdsp	sp[0x28],r7
80004686:	50 80       	stdsp	sp[0x20],r0
80004688:	0c 97       	mov	r7,r6
8000468a:	04 94       	mov	r4,r2
8000468c:	06 96       	mov	r6,r3
8000468e:	02 92       	mov	r2,r1
80004690:	40 93       	lddsp	r3,sp[0x24]
80004692:	40 41       	lddsp	r1,sp[0x10]
80004694:	0e 99       	mov	r9,r7
80004696:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000469a:	40 3c       	lddsp	r12,sp[0xc]
8000469c:	58 0c       	cp.w	r12,0
8000469e:	c1 d0       	breq	800046d8 <_vfprintf_r+0xf94>
800046a0:	10 36       	cp.w	r6,r8
800046a2:	c0 64       	brge	800046ae <_vfprintf_r+0xf6a>
800046a4:	fa cb f9 44 	sub	r11,sp,-1724
800046a8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046ac:	c1 d8       	rjmp	800046e6 <_vfprintf_r+0xfa2>
800046ae:	fa c8 f9 50 	sub	r8,sp,-1712
800046b2:	1a d8       	st.w	--sp,r8
800046b4:	fa c8 fa b8 	sub	r8,sp,-1352
800046b8:	1a d8       	st.w	--sp,r8
800046ba:	fa c8 fb b4 	sub	r8,sp,-1100
800046be:	1a d8       	st.w	--sp,r8
800046c0:	fa c9 ff b4 	sub	r9,sp,-76
800046c4:	fa c8 f9 40 	sub	r8,sp,-1728
800046c8:	04 9a       	mov	r10,r2
800046ca:	0c 9b       	mov	r11,r6
800046cc:	08 9c       	mov	r12,r4
800046ce:	fe b0 f6 a3 	rcall	80003414 <get_arg>
800046d2:	2f dd       	sub	sp,-12
800046d4:	78 09       	ld.w	r9,r12[0x0]
800046d6:	c2 18       	rjmp	80004718 <_vfprintf_r+0xfd4>
800046d8:	2f f7       	sub	r7,-1
800046da:	10 39       	cp.w	r9,r8
800046dc:	c0 84       	brge	800046ec <_vfprintf_r+0xfa8>
800046de:	fa ca f9 44 	sub	r10,sp,-1724
800046e2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800046e6:	ec f9 fd 88 	ld.w	r9,r6[-632]
800046ea:	c1 78       	rjmp	80004718 <_vfprintf_r+0xfd4>
800046ec:	41 09       	lddsp	r9,sp[0x40]
800046ee:	59 f8       	cp.w	r8,31
800046f0:	e0 89 00 10 	brgt	80004710 <_vfprintf_r+0xfcc>
800046f4:	f2 ca ff fc 	sub	r10,r9,-4
800046f8:	51 0a       	stdsp	sp[0x40],r10
800046fa:	fa c6 f9 44 	sub	r6,sp,-1724
800046fe:	72 09       	ld.w	r9,r9[0x0]
80004700:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004704:	f5 49 fd 88 	st.w	r10[-632],r9
80004708:	2f f8       	sub	r8,-1
8000470a:	fb 48 06 b4 	st.w	sp[1716],r8
8000470e:	c0 58       	rjmp	80004718 <_vfprintf_r+0xfd4>
80004710:	f2 c8 ff fc 	sub	r8,r9,-4
80004714:	51 08       	stdsp	sp[0x40],r8
80004716:	72 09       	ld.w	r9,r9[0x0]
80004718:	33 08       	mov	r8,48
8000471a:	fb 68 06 b8 	st.b	sp[1720],r8
8000471e:	37 88       	mov	r8,120
80004720:	30 0e       	mov	lr,0
80004722:	fb 68 06 b9 	st.b	sp[1721],r8
80004726:	fe cc b4 b6 	sub	r12,pc,-19274
8000472a:	50 19       	stdsp	sp[0x4],r9
8000472c:	a1 b5       	sbr	r5,0x1
8000472e:	50 0e       	stdsp	sp[0x0],lr
80004730:	50 dc       	stdsp	sp[0x34],r12
80004732:	30 28       	mov	r8,2
80004734:	37 80       	mov	r0,120
80004736:	e0 8f 02 a3 	bral	80004c7c <_vfprintf_r+0x1538>
8000473a:	50 a7       	stdsp	sp[0x28],r7
8000473c:	50 80       	stdsp	sp[0x20],r0
8000473e:	10 90       	mov	r0,r8
80004740:	30 08       	mov	r8,0
80004742:	fb 68 06 bb 	st.b	sp[1723],r8
80004746:	0c 97       	mov	r7,r6
80004748:	04 94       	mov	r4,r2
8000474a:	06 96       	mov	r6,r3
8000474c:	02 92       	mov	r2,r1
8000474e:	40 93       	lddsp	r3,sp[0x24]
80004750:	40 41       	lddsp	r1,sp[0x10]
80004752:	0e 99       	mov	r9,r7
80004754:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004758:	40 3b       	lddsp	r11,sp[0xc]
8000475a:	58 0b       	cp.w	r11,0
8000475c:	c1 d0       	breq	80004796 <_vfprintf_r+0x1052>
8000475e:	10 36       	cp.w	r6,r8
80004760:	c0 64       	brge	8000476c <_vfprintf_r+0x1028>
80004762:	fa ca f9 44 	sub	r10,sp,-1724
80004766:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000476a:	c1 d8       	rjmp	800047a4 <_vfprintf_r+0x1060>
8000476c:	fa c8 f9 50 	sub	r8,sp,-1712
80004770:	1a d8       	st.w	--sp,r8
80004772:	fa c8 fa b8 	sub	r8,sp,-1352
80004776:	1a d8       	st.w	--sp,r8
80004778:	fa c8 fb b4 	sub	r8,sp,-1100
8000477c:	0c 9b       	mov	r11,r6
8000477e:	1a d8       	st.w	--sp,r8
80004780:	04 9a       	mov	r10,r2
80004782:	fa c8 f9 40 	sub	r8,sp,-1728
80004786:	fa c9 ff b4 	sub	r9,sp,-76
8000478a:	08 9c       	mov	r12,r4
8000478c:	fe b0 f6 44 	rcall	80003414 <get_arg>
80004790:	2f dd       	sub	sp,-12
80004792:	78 06       	ld.w	r6,r12[0x0]
80004794:	c2 08       	rjmp	800047d4 <_vfprintf_r+0x1090>
80004796:	2f f7       	sub	r7,-1
80004798:	10 39       	cp.w	r9,r8
8000479a:	c0 84       	brge	800047aa <_vfprintf_r+0x1066>
8000479c:	fa c9 f9 44 	sub	r9,sp,-1724
800047a0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047a4:	ec f6 fd 88 	ld.w	r6,r6[-632]
800047a8:	c1 68       	rjmp	800047d4 <_vfprintf_r+0x1090>
800047aa:	41 09       	lddsp	r9,sp[0x40]
800047ac:	59 f8       	cp.w	r8,31
800047ae:	e0 89 00 10 	brgt	800047ce <_vfprintf_r+0x108a>
800047b2:	f2 ca ff fc 	sub	r10,r9,-4
800047b6:	51 0a       	stdsp	sp[0x40],r10
800047b8:	72 06       	ld.w	r6,r9[0x0]
800047ba:	fa ce f9 44 	sub	lr,sp,-1724
800047be:	fc 08 00 39 	add	r9,lr,r8<<0x3
800047c2:	f3 46 fd 88 	st.w	r9[-632],r6
800047c6:	2f f8       	sub	r8,-1
800047c8:	fb 48 06 b4 	st.w	sp[1716],r8
800047cc:	c0 48       	rjmp	800047d4 <_vfprintf_r+0x1090>
800047ce:	72 06       	ld.w	r6,r9[0x0]
800047d0:	2f c9       	sub	r9,-4
800047d2:	51 09       	stdsp	sp[0x40],r9
800047d4:	40 2c       	lddsp	r12,sp[0x8]
800047d6:	58 0c       	cp.w	r12,0
800047d8:	c1 05       	brlt	800047f8 <_vfprintf_r+0x10b4>
800047da:	18 9a       	mov	r10,r12
800047dc:	30 0b       	mov	r11,0
800047de:	0c 9c       	mov	r12,r6
800047e0:	e0 a0 14 58 	rcall	80007090 <memchr>
800047e4:	e0 80 02 df 	breq	80004da2 <_vfprintf_r+0x165e>
800047e8:	f8 06 01 02 	sub	r2,r12,r6
800047ec:	40 2b       	lddsp	r11,sp[0x8]
800047ee:	16 32       	cp.w	r2,r11
800047f0:	e0 89 02 d9 	brgt	80004da2 <_vfprintf_r+0x165e>
800047f4:	e0 8f 02 d4 	bral	80004d9c <_vfprintf_r+0x1658>
800047f8:	30 0a       	mov	r10,0
800047fa:	0c 9c       	mov	r12,r6
800047fc:	50 2a       	stdsp	sp[0x8],r10
800047fe:	e0 a0 19 33 	rcall	80007a64 <strlen>
80004802:	18 92       	mov	r2,r12
80004804:	e0 8f 02 d2 	bral	80004da8 <_vfprintf_r+0x1664>
80004808:	50 a7       	stdsp	sp[0x28],r7
8000480a:	50 80       	stdsp	sp[0x20],r0
8000480c:	0c 97       	mov	r7,r6
8000480e:	04 94       	mov	r4,r2
80004810:	06 96       	mov	r6,r3
80004812:	02 92       	mov	r2,r1
80004814:	40 93       	lddsp	r3,sp[0x24]
80004816:	10 90       	mov	r0,r8
80004818:	40 41       	lddsp	r1,sp[0x10]
8000481a:	a5 a5       	sbr	r5,0x4
8000481c:	c0 a8       	rjmp	80004830 <_vfprintf_r+0x10ec>
8000481e:	50 a7       	stdsp	sp[0x28],r7
80004820:	50 80       	stdsp	sp[0x20],r0
80004822:	0c 97       	mov	r7,r6
80004824:	04 94       	mov	r4,r2
80004826:	06 96       	mov	r6,r3
80004828:	02 92       	mov	r2,r1
8000482a:	40 93       	lddsp	r3,sp[0x24]
8000482c:	10 90       	mov	r0,r8
8000482e:	40 41       	lddsp	r1,sp[0x10]
80004830:	ed b5 00 05 	bld	r5,0x5
80004834:	c5 61       	brne	800048e0 <_vfprintf_r+0x119c>
80004836:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000483a:	40 39       	lddsp	r9,sp[0xc]
8000483c:	58 09       	cp.w	r9,0
8000483e:	c2 10       	breq	80004880 <_vfprintf_r+0x113c>
80004840:	10 36       	cp.w	r6,r8
80004842:	c0 74       	brge	80004850 <_vfprintf_r+0x110c>
80004844:	fa c8 f9 44 	sub	r8,sp,-1724
80004848:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000484c:	c2 38       	rjmp	80004892 <_vfprintf_r+0x114e>
8000484e:	d7 03       	nop
80004850:	fa c8 f9 50 	sub	r8,sp,-1712
80004854:	1a d8       	st.w	--sp,r8
80004856:	fa c8 fa b8 	sub	r8,sp,-1352
8000485a:	1a d8       	st.w	--sp,r8
8000485c:	fa c8 fb b4 	sub	r8,sp,-1100
80004860:	1a d8       	st.w	--sp,r8
80004862:	fa c8 f9 40 	sub	r8,sp,-1728
80004866:	fa c9 ff b4 	sub	r9,sp,-76
8000486a:	04 9a       	mov	r10,r2
8000486c:	0c 9b       	mov	r11,r6
8000486e:	08 9c       	mov	r12,r4
80004870:	fe b0 f5 d2 	rcall	80003414 <get_arg>
80004874:	2f dd       	sub	sp,-12
80004876:	f8 e8 00 00 	ld.d	r8,r12[0]
8000487a:	fa e9 00 00 	st.d	sp[0],r8
8000487e:	c2 e8       	rjmp	800048da <_vfprintf_r+0x1196>
80004880:	ee ca ff ff 	sub	r10,r7,-1
80004884:	10 37       	cp.w	r7,r8
80004886:	c0 b4       	brge	8000489c <_vfprintf_r+0x1158>
80004888:	fa c8 f9 44 	sub	r8,sp,-1724
8000488c:	14 97       	mov	r7,r10
8000488e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004892:	ec ea fd 88 	ld.d	r10,r6[-632]
80004896:	fa eb 00 00 	st.d	sp[0],r10
8000489a:	c2 08       	rjmp	800048da <_vfprintf_r+0x1196>
8000489c:	41 09       	lddsp	r9,sp[0x40]
8000489e:	59 f8       	cp.w	r8,31
800048a0:	e0 89 00 16 	brgt	800048cc <_vfprintf_r+0x1188>
800048a4:	f2 e6 00 00 	ld.d	r6,r9[0]
800048a8:	f2 cb ff f8 	sub	r11,r9,-8
800048ac:	fa e7 00 00 	st.d	sp[0],r6
800048b0:	51 0b       	stdsp	sp[0x40],r11
800048b2:	fa c6 f9 44 	sub	r6,sp,-1724
800048b6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800048ba:	fa e6 00 00 	ld.d	r6,sp[0]
800048be:	f2 e7 fd 88 	st.d	r9[-632],r6
800048c2:	2f f8       	sub	r8,-1
800048c4:	14 97       	mov	r7,r10
800048c6:	fb 48 06 b4 	st.w	sp[1716],r8
800048ca:	c0 88       	rjmp	800048da <_vfprintf_r+0x1196>
800048cc:	f2 e6 00 00 	ld.d	r6,r9[0]
800048d0:	2f 89       	sub	r9,-8
800048d2:	fa e7 00 00 	st.d	sp[0],r6
800048d6:	51 09       	stdsp	sp[0x40],r9
800048d8:	14 97       	mov	r7,r10
800048da:	30 18       	mov	r8,1
800048dc:	e0 8f 01 d0 	bral	80004c7c <_vfprintf_r+0x1538>
800048e0:	ed b5 00 04 	bld	r5,0x4
800048e4:	c1 61       	brne	80004910 <_vfprintf_r+0x11cc>
800048e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048ea:	40 3e       	lddsp	lr,sp[0xc]
800048ec:	58 0e       	cp.w	lr,0
800048ee:	c0 80       	breq	800048fe <_vfprintf_r+0x11ba>
800048f0:	10 36       	cp.w	r6,r8
800048f2:	c6 74       	brge	800049c0 <_vfprintf_r+0x127c>
800048f4:	fa cc f9 44 	sub	r12,sp,-1724
800048f8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800048fc:	c8 08       	rjmp	800049fc <_vfprintf_r+0x12b8>
800048fe:	ee ca ff ff 	sub	r10,r7,-1
80004902:	10 37       	cp.w	r7,r8
80004904:	c7 f4       	brge	80004a02 <_vfprintf_r+0x12be>
80004906:	fa cb f9 44 	sub	r11,sp,-1724
8000490a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000490e:	c7 68       	rjmp	800049fa <_vfprintf_r+0x12b6>
80004910:	ed b5 00 06 	bld	r5,0x6
80004914:	c4 a1       	brne	800049a8 <_vfprintf_r+0x1264>
80004916:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000491a:	40 3c       	lddsp	r12,sp[0xc]
8000491c:	58 0c       	cp.w	r12,0
8000491e:	c1 d0       	breq	80004958 <_vfprintf_r+0x1214>
80004920:	10 36       	cp.w	r6,r8
80004922:	c0 64       	brge	8000492e <_vfprintf_r+0x11ea>
80004924:	fa cb f9 44 	sub	r11,sp,-1724
80004928:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000492c:	c1 f8       	rjmp	8000496a <_vfprintf_r+0x1226>
8000492e:	fa c8 f9 50 	sub	r8,sp,-1712
80004932:	1a d8       	st.w	--sp,r8
80004934:	fa c8 fa b8 	sub	r8,sp,-1352
80004938:	1a d8       	st.w	--sp,r8
8000493a:	fa c8 fb b4 	sub	r8,sp,-1100
8000493e:	1a d8       	st.w	--sp,r8
80004940:	fa c8 f9 40 	sub	r8,sp,-1728
80004944:	fa c9 ff b4 	sub	r9,sp,-76
80004948:	04 9a       	mov	r10,r2
8000494a:	0c 9b       	mov	r11,r6
8000494c:	08 9c       	mov	r12,r4
8000494e:	fe b0 f5 63 	rcall	80003414 <get_arg>
80004952:	2f dd       	sub	sp,-12
80004954:	98 18       	ld.sh	r8,r12[0x2]
80004956:	c2 68       	rjmp	800049a2 <_vfprintf_r+0x125e>
80004958:	ee ca ff ff 	sub	r10,r7,-1
8000495c:	10 37       	cp.w	r7,r8
8000495e:	c0 94       	brge	80004970 <_vfprintf_r+0x122c>
80004960:	fa c9 f9 44 	sub	r9,sp,-1724
80004964:	14 97       	mov	r7,r10
80004966:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000496a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000496e:	c1 a8       	rjmp	800049a2 <_vfprintf_r+0x125e>
80004970:	41 09       	lddsp	r9,sp[0x40]
80004972:	59 f8       	cp.w	r8,31
80004974:	e0 89 00 13 	brgt	8000499a <_vfprintf_r+0x1256>
80004978:	f2 cb ff fc 	sub	r11,r9,-4
8000497c:	51 0b       	stdsp	sp[0x40],r11
8000497e:	72 09       	ld.w	r9,r9[0x0]
80004980:	fa c6 f9 44 	sub	r6,sp,-1724
80004984:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004988:	2f f8       	sub	r8,-1
8000498a:	f7 49 fd 88 	st.w	r11[-632],r9
8000498e:	fb 48 06 b4 	st.w	sp[1716],r8
80004992:	14 97       	mov	r7,r10
80004994:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004998:	c0 58       	rjmp	800049a2 <_vfprintf_r+0x125e>
8000499a:	92 18       	ld.sh	r8,r9[0x2]
8000499c:	14 97       	mov	r7,r10
8000499e:	2f c9       	sub	r9,-4
800049a0:	51 09       	stdsp	sp[0x40],r9
800049a2:	5c 78       	castu.h	r8
800049a4:	50 18       	stdsp	sp[0x4],r8
800049a6:	c4 68       	rjmp	80004a32 <_vfprintf_r+0x12ee>
800049a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049ac:	40 3c       	lddsp	r12,sp[0xc]
800049ae:	58 0c       	cp.w	r12,0
800049b0:	c1 d0       	breq	800049ea <_vfprintf_r+0x12a6>
800049b2:	10 36       	cp.w	r6,r8
800049b4:	c0 64       	brge	800049c0 <_vfprintf_r+0x127c>
800049b6:	fa cb f9 44 	sub	r11,sp,-1724
800049ba:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049be:	c1 f8       	rjmp	800049fc <_vfprintf_r+0x12b8>
800049c0:	fa c8 f9 50 	sub	r8,sp,-1712
800049c4:	1a d8       	st.w	--sp,r8
800049c6:	fa c8 fa b8 	sub	r8,sp,-1352
800049ca:	0c 9b       	mov	r11,r6
800049cc:	1a d8       	st.w	--sp,r8
800049ce:	fa c8 fb b4 	sub	r8,sp,-1100
800049d2:	04 9a       	mov	r10,r2
800049d4:	1a d8       	st.w	--sp,r8
800049d6:	08 9c       	mov	r12,r4
800049d8:	fa c8 f9 40 	sub	r8,sp,-1728
800049dc:	fa c9 ff b4 	sub	r9,sp,-76
800049e0:	fe b0 f5 1a 	rcall	80003414 <get_arg>
800049e4:	2f dd       	sub	sp,-12
800049e6:	78 0b       	ld.w	r11,r12[0x0]
800049e8:	c2 48       	rjmp	80004a30 <_vfprintf_r+0x12ec>
800049ea:	ee ca ff ff 	sub	r10,r7,-1
800049ee:	10 37       	cp.w	r7,r8
800049f0:	c0 94       	brge	80004a02 <_vfprintf_r+0x12be>
800049f2:	fa c9 f9 44 	sub	r9,sp,-1724
800049f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049fa:	14 97       	mov	r7,r10
800049fc:	ec fb fd 88 	ld.w	r11,r6[-632]
80004a00:	c1 88       	rjmp	80004a30 <_vfprintf_r+0x12ec>
80004a02:	41 09       	lddsp	r9,sp[0x40]
80004a04:	59 f8       	cp.w	r8,31
80004a06:	e0 89 00 11 	brgt	80004a28 <_vfprintf_r+0x12e4>
80004a0a:	f2 cb ff fc 	sub	r11,r9,-4
80004a0e:	51 0b       	stdsp	sp[0x40],r11
80004a10:	fa c6 f9 44 	sub	r6,sp,-1724
80004a14:	72 0b       	ld.w	r11,r9[0x0]
80004a16:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a1a:	f3 4b fd 88 	st.w	r9[-632],r11
80004a1e:	2f f8       	sub	r8,-1
80004a20:	14 97       	mov	r7,r10
80004a22:	fb 48 06 b4 	st.w	sp[1716],r8
80004a26:	c0 58       	rjmp	80004a30 <_vfprintf_r+0x12ec>
80004a28:	72 0b       	ld.w	r11,r9[0x0]
80004a2a:	14 97       	mov	r7,r10
80004a2c:	2f c9       	sub	r9,-4
80004a2e:	51 09       	stdsp	sp[0x40],r9
80004a30:	50 1b       	stdsp	sp[0x4],r11
80004a32:	30 0e       	mov	lr,0
80004a34:	30 18       	mov	r8,1
80004a36:	50 0e       	stdsp	sp[0x0],lr
80004a38:	c2 29       	rjmp	80004c7c <_vfprintf_r+0x1538>
80004a3a:	50 a7       	stdsp	sp[0x28],r7
80004a3c:	50 80       	stdsp	sp[0x20],r0
80004a3e:	0c 97       	mov	r7,r6
80004a40:	04 94       	mov	r4,r2
80004a42:	06 96       	mov	r6,r3
80004a44:	02 92       	mov	r2,r1
80004a46:	fe cc b7 d6 	sub	r12,pc,-18474
80004a4a:	40 93       	lddsp	r3,sp[0x24]
80004a4c:	10 90       	mov	r0,r8
80004a4e:	40 41       	lddsp	r1,sp[0x10]
80004a50:	50 dc       	stdsp	sp[0x34],r12
80004a52:	ed b5 00 05 	bld	r5,0x5
80004a56:	c5 51       	brne	80004b00 <_vfprintf_r+0x13bc>
80004a58:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a5c:	40 3b       	lddsp	r11,sp[0xc]
80004a5e:	58 0b       	cp.w	r11,0
80004a60:	c2 20       	breq	80004aa4 <_vfprintf_r+0x1360>
80004a62:	10 36       	cp.w	r6,r8
80004a64:	c0 a4       	brge	80004a78 <_vfprintf_r+0x1334>
80004a66:	fa ca f9 44 	sub	r10,sp,-1724
80004a6a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a6e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004a72:	fa e9 00 00 	st.d	sp[0],r8
80004a76:	cf 28       	rjmp	80004c5a <_vfprintf_r+0x1516>
80004a78:	fa c8 f9 50 	sub	r8,sp,-1712
80004a7c:	1a d8       	st.w	--sp,r8
80004a7e:	fa c8 fa b8 	sub	r8,sp,-1352
80004a82:	04 9a       	mov	r10,r2
80004a84:	1a d8       	st.w	--sp,r8
80004a86:	0c 9b       	mov	r11,r6
80004a88:	fa c8 fb b4 	sub	r8,sp,-1100
80004a8c:	08 9c       	mov	r12,r4
80004a8e:	1a d8       	st.w	--sp,r8
80004a90:	fa c8 f9 40 	sub	r8,sp,-1728
80004a94:	fa c9 ff b4 	sub	r9,sp,-76
80004a98:	fe b0 f4 be 	rcall	80003414 <get_arg>
80004a9c:	2f dd       	sub	sp,-12
80004a9e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004aa2:	c0 c8       	rjmp	80004aba <_vfprintf_r+0x1376>
80004aa4:	ee ca ff ff 	sub	r10,r7,-1
80004aa8:	10 37       	cp.w	r7,r8
80004aaa:	c0 b4       	brge	80004ac0 <_vfprintf_r+0x137c>
80004aac:	fa c9 f9 44 	sub	r9,sp,-1724
80004ab0:	14 97       	mov	r7,r10
80004ab2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ab6:	ec ea fd 88 	ld.d	r10,r6[-632]
80004aba:	fa eb 00 00 	st.d	sp[0],r10
80004abe:	cc e8       	rjmp	80004c5a <_vfprintf_r+0x1516>
80004ac0:	41 09       	lddsp	r9,sp[0x40]
80004ac2:	59 f8       	cp.w	r8,31
80004ac4:	e0 89 00 16 	brgt	80004af0 <_vfprintf_r+0x13ac>
80004ac8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004acc:	f2 cb ff f8 	sub	r11,r9,-8
80004ad0:	fa e7 00 00 	st.d	sp[0],r6
80004ad4:	51 0b       	stdsp	sp[0x40],r11
80004ad6:	fa c6 f9 44 	sub	r6,sp,-1724
80004ada:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ade:	fa e6 00 00 	ld.d	r6,sp[0]
80004ae2:	f2 e7 fd 88 	st.d	r9[-632],r6
80004ae6:	2f f8       	sub	r8,-1
80004ae8:	14 97       	mov	r7,r10
80004aea:	fb 48 06 b4 	st.w	sp[1716],r8
80004aee:	cb 68       	rjmp	80004c5a <_vfprintf_r+0x1516>
80004af0:	f2 e6 00 00 	ld.d	r6,r9[0]
80004af4:	2f 89       	sub	r9,-8
80004af6:	fa e7 00 00 	st.d	sp[0],r6
80004afa:	51 09       	stdsp	sp[0x40],r9
80004afc:	14 97       	mov	r7,r10
80004afe:	ca e8       	rjmp	80004c5a <_vfprintf_r+0x1516>
80004b00:	ed b5 00 04 	bld	r5,0x4
80004b04:	c1 71       	brne	80004b32 <_vfprintf_r+0x13ee>
80004b06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b0a:	40 3e       	lddsp	lr,sp[0xc]
80004b0c:	58 0e       	cp.w	lr,0
80004b0e:	c0 80       	breq	80004b1e <_vfprintf_r+0x13da>
80004b10:	10 36       	cp.w	r6,r8
80004b12:	c6 94       	brge	80004be4 <_vfprintf_r+0x14a0>
80004b14:	fa cc f9 44 	sub	r12,sp,-1724
80004b18:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b1c:	c8 28       	rjmp	80004c20 <_vfprintf_r+0x14dc>
80004b1e:	ee ca ff ff 	sub	r10,r7,-1
80004b22:	10 37       	cp.w	r7,r8
80004b24:	e0 84 00 81 	brge	80004c26 <_vfprintf_r+0x14e2>
80004b28:	fa cb f9 44 	sub	r11,sp,-1724
80004b2c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b30:	c7 78       	rjmp	80004c1e <_vfprintf_r+0x14da>
80004b32:	ed b5 00 06 	bld	r5,0x6
80004b36:	c4 b1       	brne	80004bcc <_vfprintf_r+0x1488>
80004b38:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b3c:	40 3c       	lddsp	r12,sp[0xc]
80004b3e:	58 0c       	cp.w	r12,0
80004b40:	c1 d0       	breq	80004b7a <_vfprintf_r+0x1436>
80004b42:	10 36       	cp.w	r6,r8
80004b44:	c0 64       	brge	80004b50 <_vfprintf_r+0x140c>
80004b46:	fa cb f9 44 	sub	r11,sp,-1724
80004b4a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b4e:	c1 f8       	rjmp	80004b8c <_vfprintf_r+0x1448>
80004b50:	fa c8 f9 50 	sub	r8,sp,-1712
80004b54:	1a d8       	st.w	--sp,r8
80004b56:	fa c8 fa b8 	sub	r8,sp,-1352
80004b5a:	1a d8       	st.w	--sp,r8
80004b5c:	fa c8 fb b4 	sub	r8,sp,-1100
80004b60:	1a d8       	st.w	--sp,r8
80004b62:	fa c8 f9 40 	sub	r8,sp,-1728
80004b66:	fa c9 ff b4 	sub	r9,sp,-76
80004b6a:	04 9a       	mov	r10,r2
80004b6c:	0c 9b       	mov	r11,r6
80004b6e:	08 9c       	mov	r12,r4
80004b70:	fe b0 f4 52 	rcall	80003414 <get_arg>
80004b74:	2f dd       	sub	sp,-12
80004b76:	98 18       	ld.sh	r8,r12[0x2]
80004b78:	c2 78       	rjmp	80004bc6 <_vfprintf_r+0x1482>
80004b7a:	ee ca ff ff 	sub	r10,r7,-1
80004b7e:	10 37       	cp.w	r7,r8
80004b80:	c0 a4       	brge	80004b94 <_vfprintf_r+0x1450>
80004b82:	fa c9 f9 44 	sub	r9,sp,-1724
80004b86:	14 97       	mov	r7,r10
80004b88:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b8c:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004b90:	c1 b8       	rjmp	80004bc6 <_vfprintf_r+0x1482>
80004b92:	d7 03       	nop
80004b94:	41 09       	lddsp	r9,sp[0x40]
80004b96:	59 f8       	cp.w	r8,31
80004b98:	e0 89 00 13 	brgt	80004bbe <_vfprintf_r+0x147a>
80004b9c:	f2 cb ff fc 	sub	r11,r9,-4
80004ba0:	51 0b       	stdsp	sp[0x40],r11
80004ba2:	72 09       	ld.w	r9,r9[0x0]
80004ba4:	fa c6 f9 44 	sub	r6,sp,-1724
80004ba8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004bac:	2f f8       	sub	r8,-1
80004bae:	f7 49 fd 88 	st.w	r11[-632],r9
80004bb2:	fb 48 06 b4 	st.w	sp[1716],r8
80004bb6:	14 97       	mov	r7,r10
80004bb8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004bbc:	c0 58       	rjmp	80004bc6 <_vfprintf_r+0x1482>
80004bbe:	92 18       	ld.sh	r8,r9[0x2]
80004bc0:	14 97       	mov	r7,r10
80004bc2:	2f c9       	sub	r9,-4
80004bc4:	51 09       	stdsp	sp[0x40],r9
80004bc6:	5c 78       	castu.h	r8
80004bc8:	50 18       	stdsp	sp[0x4],r8
80004bca:	c4 68       	rjmp	80004c56 <_vfprintf_r+0x1512>
80004bcc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bd0:	40 3c       	lddsp	r12,sp[0xc]
80004bd2:	58 0c       	cp.w	r12,0
80004bd4:	c1 d0       	breq	80004c0e <_vfprintf_r+0x14ca>
80004bd6:	10 36       	cp.w	r6,r8
80004bd8:	c0 64       	brge	80004be4 <_vfprintf_r+0x14a0>
80004bda:	fa cb f9 44 	sub	r11,sp,-1724
80004bde:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004be2:	c1 f8       	rjmp	80004c20 <_vfprintf_r+0x14dc>
80004be4:	fa c8 f9 50 	sub	r8,sp,-1712
80004be8:	1a d8       	st.w	--sp,r8
80004bea:	fa c8 fa b8 	sub	r8,sp,-1352
80004bee:	0c 9b       	mov	r11,r6
80004bf0:	1a d8       	st.w	--sp,r8
80004bf2:	fa c8 fb b4 	sub	r8,sp,-1100
80004bf6:	04 9a       	mov	r10,r2
80004bf8:	1a d8       	st.w	--sp,r8
80004bfa:	08 9c       	mov	r12,r4
80004bfc:	fa c8 f9 40 	sub	r8,sp,-1728
80004c00:	fa c9 ff b4 	sub	r9,sp,-76
80004c04:	fe b0 f4 08 	rcall	80003414 <get_arg>
80004c08:	2f dd       	sub	sp,-12
80004c0a:	78 0b       	ld.w	r11,r12[0x0]
80004c0c:	c2 48       	rjmp	80004c54 <_vfprintf_r+0x1510>
80004c0e:	ee ca ff ff 	sub	r10,r7,-1
80004c12:	10 37       	cp.w	r7,r8
80004c14:	c0 94       	brge	80004c26 <_vfprintf_r+0x14e2>
80004c16:	fa c9 f9 44 	sub	r9,sp,-1724
80004c1a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c1e:	14 97       	mov	r7,r10
80004c20:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c24:	c1 88       	rjmp	80004c54 <_vfprintf_r+0x1510>
80004c26:	41 09       	lddsp	r9,sp[0x40]
80004c28:	59 f8       	cp.w	r8,31
80004c2a:	e0 89 00 11 	brgt	80004c4c <_vfprintf_r+0x1508>
80004c2e:	f2 cb ff fc 	sub	r11,r9,-4
80004c32:	51 0b       	stdsp	sp[0x40],r11
80004c34:	fa c6 f9 44 	sub	r6,sp,-1724
80004c38:	72 0b       	ld.w	r11,r9[0x0]
80004c3a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c3e:	f3 4b fd 88 	st.w	r9[-632],r11
80004c42:	2f f8       	sub	r8,-1
80004c44:	14 97       	mov	r7,r10
80004c46:	fb 48 06 b4 	st.w	sp[1716],r8
80004c4a:	c0 58       	rjmp	80004c54 <_vfprintf_r+0x1510>
80004c4c:	72 0b       	ld.w	r11,r9[0x0]
80004c4e:	14 97       	mov	r7,r10
80004c50:	2f c9       	sub	r9,-4
80004c52:	51 09       	stdsp	sp[0x40],r9
80004c54:	50 1b       	stdsp	sp[0x4],r11
80004c56:	30 0e       	mov	lr,0
80004c58:	50 0e       	stdsp	sp[0x0],lr
80004c5a:	40 08       	lddsp	r8,sp[0x0]
80004c5c:	40 1c       	lddsp	r12,sp[0x4]
80004c5e:	18 48       	or	r8,r12
80004c60:	5f 19       	srne	r9
80004c62:	0a 98       	mov	r8,r5
80004c64:	eb e9 00 09 	and	r9,r5,r9
80004c68:	a1 b8       	sbr	r8,0x1
80004c6a:	58 09       	cp.w	r9,0
80004c6c:	c0 70       	breq	80004c7a <_vfprintf_r+0x1536>
80004c6e:	10 95       	mov	r5,r8
80004c70:	fb 60 06 b9 	st.b	sp[1721],r0
80004c74:	33 08       	mov	r8,48
80004c76:	fb 68 06 b8 	st.b	sp[1720],r8
80004c7a:	30 28       	mov	r8,2
80004c7c:	30 09       	mov	r9,0
80004c7e:	fb 69 06 bb 	st.b	sp[1723],r9
80004c82:	0a 99       	mov	r9,r5
80004c84:	a7 d9       	cbr	r9,0x7
80004c86:	40 2b       	lddsp	r11,sp[0x8]
80004c88:	40 16       	lddsp	r6,sp[0x4]
80004c8a:	58 0b       	cp.w	r11,0
80004c8c:	5f 1a       	srne	r10
80004c8e:	f2 05 17 40 	movge	r5,r9
80004c92:	fa c2 f9 78 	sub	r2,sp,-1672
80004c96:	40 09       	lddsp	r9,sp[0x0]
80004c98:	0c 49       	or	r9,r6
80004c9a:	5f 19       	srne	r9
80004c9c:	f5 e9 10 09 	or	r9,r10,r9
80004ca0:	c5 c0       	breq	80004d58 <_vfprintf_r+0x1614>
80004ca2:	30 19       	mov	r9,1
80004ca4:	f2 08 18 00 	cp.b	r8,r9
80004ca8:	c0 60       	breq	80004cb4 <_vfprintf_r+0x1570>
80004caa:	30 29       	mov	r9,2
80004cac:	f2 08 18 00 	cp.b	r8,r9
80004cb0:	c0 41       	brne	80004cb8 <_vfprintf_r+0x1574>
80004cb2:	c3 c8       	rjmp	80004d2a <_vfprintf_r+0x15e6>
80004cb4:	04 96       	mov	r6,r2
80004cb6:	c3 08       	rjmp	80004d16 <_vfprintf_r+0x15d2>
80004cb8:	04 96       	mov	r6,r2
80004cba:	fa e8 00 00 	ld.d	r8,sp[0]
80004cbe:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004cc2:	2d 0a       	sub	r10,-48
80004cc4:	0c fa       	st.b	--r6,r10
80004cc6:	f0 0b 16 03 	lsr	r11,r8,0x3
80004cca:	f2 0c 16 03 	lsr	r12,r9,0x3
80004cce:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004cd2:	18 99       	mov	r9,r12
80004cd4:	16 98       	mov	r8,r11
80004cd6:	58 08       	cp.w	r8,0
80004cd8:	5c 29       	cpc	r9
80004cda:	cf 21       	brne	80004cbe <_vfprintf_r+0x157a>
80004cdc:	fa e9 00 00 	st.d	sp[0],r8
80004ce0:	ed b5 00 00 	bld	r5,0x0
80004ce4:	c4 51       	brne	80004d6e <_vfprintf_r+0x162a>
80004ce6:	33 09       	mov	r9,48
80004ce8:	f2 0a 18 00 	cp.b	r10,r9
80004cec:	c4 10       	breq	80004d6e <_vfprintf_r+0x162a>
80004cee:	0c f9       	st.b	--r6,r9
80004cf0:	c3 f8       	rjmp	80004d6e <_vfprintf_r+0x162a>
80004cf2:	fa ea 00 00 	ld.d	r10,sp[0]
80004cf6:	30 a8       	mov	r8,10
80004cf8:	30 09       	mov	r9,0
80004cfa:	e0 a0 1e 31 	rcall	8000895c <__avr32_umod64>
80004cfe:	30 a8       	mov	r8,10
80004d00:	2d 0a       	sub	r10,-48
80004d02:	30 09       	mov	r9,0
80004d04:	ac 8a       	st.b	r6[0x0],r10
80004d06:	fa ea 00 00 	ld.d	r10,sp[0]
80004d0a:	e0 a0 1c f7 	rcall	800086f8 <__avr32_udiv64>
80004d0e:	16 99       	mov	r9,r11
80004d10:	14 98       	mov	r8,r10
80004d12:	fa e9 00 00 	st.d	sp[0],r8
80004d16:	20 16       	sub	r6,1
80004d18:	fa ea 00 00 	ld.d	r10,sp[0]
80004d1c:	58 9a       	cp.w	r10,9
80004d1e:	5c 2b       	cpc	r11
80004d20:	fe 9b ff e9 	brhi	80004cf2 <_vfprintf_r+0x15ae>
80004d24:	1b f8       	ld.ub	r8,sp[0x7]
80004d26:	2d 08       	sub	r8,-48
80004d28:	c2 08       	rjmp	80004d68 <_vfprintf_r+0x1624>
80004d2a:	04 96       	mov	r6,r2
80004d2c:	fa e8 00 00 	ld.d	r8,sp[0]
80004d30:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004d34:	40 de       	lddsp	lr,sp[0x34]
80004d36:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004d3a:	0c fa       	st.b	--r6,r10
80004d3c:	f2 0b 16 04 	lsr	r11,r9,0x4
80004d40:	f0 0a 16 04 	lsr	r10,r8,0x4
80004d44:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004d48:	16 99       	mov	r9,r11
80004d4a:	14 98       	mov	r8,r10
80004d4c:	58 08       	cp.w	r8,0
80004d4e:	5c 29       	cpc	r9
80004d50:	cf 01       	brne	80004d30 <_vfprintf_r+0x15ec>
80004d52:	fa e9 00 00 	st.d	sp[0],r8
80004d56:	c0 c8       	rjmp	80004d6e <_vfprintf_r+0x162a>
80004d58:	58 08       	cp.w	r8,0
80004d5a:	c0 91       	brne	80004d6c <_vfprintf_r+0x1628>
80004d5c:	ed b5 00 00 	bld	r5,0x0
80004d60:	c0 61       	brne	80004d6c <_vfprintf_r+0x1628>
80004d62:	fa c6 f9 79 	sub	r6,sp,-1671
80004d66:	33 08       	mov	r8,48
80004d68:	ac 88       	st.b	r6[0x0],r8
80004d6a:	c0 28       	rjmp	80004d6e <_vfprintf_r+0x162a>
80004d6c:	04 96       	mov	r6,r2
80004d6e:	0c 12       	sub	r2,r6
80004d70:	c1 c8       	rjmp	80004da8 <_vfprintf_r+0x1664>
80004d72:	50 a7       	stdsp	sp[0x28],r7
80004d74:	50 80       	stdsp	sp[0x20],r0
80004d76:	40 93       	lddsp	r3,sp[0x24]
80004d78:	0c 97       	mov	r7,r6
80004d7a:	10 90       	mov	r0,r8
80004d7c:	04 94       	mov	r4,r2
80004d7e:	40 41       	lddsp	r1,sp[0x10]
80004d80:	58 08       	cp.w	r8,0
80004d82:	e0 80 04 4f 	breq	80005620 <_vfprintf_r+0x1edc>
80004d86:	fb 68 06 60 	st.b	sp[1632],r8
80004d8a:	30 0c       	mov	r12,0
80004d8c:	30 08       	mov	r8,0
80004d8e:	30 12       	mov	r2,1
80004d90:	fb 68 06 bb 	st.b	sp[1723],r8
80004d94:	50 2c       	stdsp	sp[0x8],r12
80004d96:	fa c6 f9 a0 	sub	r6,sp,-1632
80004d9a:	c0 78       	rjmp	80004da8 <_vfprintf_r+0x1664>
80004d9c:	30 0b       	mov	r11,0
80004d9e:	50 2b       	stdsp	sp[0x8],r11
80004da0:	c0 48       	rjmp	80004da8 <_vfprintf_r+0x1664>
80004da2:	40 22       	lddsp	r2,sp[0x8]
80004da4:	30 0a       	mov	r10,0
80004da6:	50 2a       	stdsp	sp[0x8],r10
80004da8:	40 29       	lddsp	r9,sp[0x8]
80004daa:	e4 09 0c 49 	max	r9,r2,r9
80004dae:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004db2:	50 39       	stdsp	sp[0xc],r9
80004db4:	0a 9e       	mov	lr,r5
80004db6:	30 09       	mov	r9,0
80004db8:	e2 1e 00 02 	andl	lr,0x2,COH
80004dbc:	f2 08 18 00 	cp.b	r8,r9
80004dc0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004dc4:	f7 b8 01 ff 	subne	r8,-1
80004dc8:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004dcc:	0a 9b       	mov	r11,r5
80004dce:	58 0e       	cp.w	lr,0
80004dd0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004dd4:	f7 bc 01 fe 	subne	r12,-2
80004dd8:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004ddc:	e2 1b 00 84 	andl	r11,0x84,COH
80004de0:	50 fe       	stdsp	sp[0x3c],lr
80004de2:	50 9b       	stdsp	sp[0x24],r11
80004de4:	c4 71       	brne	80004e72 <_vfprintf_r+0x172e>
80004de6:	40 8a       	lddsp	r10,sp[0x20]
80004de8:	40 39       	lddsp	r9,sp[0xc]
80004dea:	12 1a       	sub	r10,r9
80004dec:	50 4a       	stdsp	sp[0x10],r10
80004dee:	58 0a       	cp.w	r10,0
80004df0:	e0 89 00 20 	brgt	80004e30 <_vfprintf_r+0x16ec>
80004df4:	c3 f8       	rjmp	80004e72 <_vfprintf_r+0x172e>
80004df6:	2f 09       	sub	r9,-16
80004df8:	2f f8       	sub	r8,-1
80004dfa:	fe ce bb 72 	sub	lr,pc,-17550
80004dfe:	31 0c       	mov	r12,16
80004e00:	fb 49 06 90 	st.w	sp[1680],r9
80004e04:	87 0e       	st.w	r3[0x0],lr
80004e06:	87 1c       	st.w	r3[0x4],r12
80004e08:	fb 48 06 8c 	st.w	sp[1676],r8
80004e0c:	58 78       	cp.w	r8,7
80004e0e:	e0 89 00 04 	brgt	80004e16 <_vfprintf_r+0x16d2>
80004e12:	2f 83       	sub	r3,-8
80004e14:	c0 b8       	rjmp	80004e2a <_vfprintf_r+0x16e6>
80004e16:	fa ca f9 78 	sub	r10,sp,-1672
80004e1a:	02 9b       	mov	r11,r1
80004e1c:	08 9c       	mov	r12,r4
80004e1e:	fe b0 f4 85 	rcall	80003728 <__sprint_r>
80004e22:	e0 81 04 10 	brne	80005642 <_vfprintf_r+0x1efe>
80004e26:	fa c3 f9 e0 	sub	r3,sp,-1568
80004e2a:	40 4b       	lddsp	r11,sp[0x10]
80004e2c:	21 0b       	sub	r11,16
80004e2e:	50 4b       	stdsp	sp[0x10],r11
80004e30:	fa f9 06 90 	ld.w	r9,sp[1680]
80004e34:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004e38:	fe ca bb b0 	sub	r10,pc,-17488
80004e3c:	40 4e       	lddsp	lr,sp[0x10]
80004e3e:	59 0e       	cp.w	lr,16
80004e40:	fe 99 ff db 	brgt	80004df6 <_vfprintf_r+0x16b2>
80004e44:	1c 09       	add	r9,lr
80004e46:	2f f8       	sub	r8,-1
80004e48:	87 0a       	st.w	r3[0x0],r10
80004e4a:	fb 49 06 90 	st.w	sp[1680],r9
80004e4e:	87 1e       	st.w	r3[0x4],lr
80004e50:	fb 48 06 8c 	st.w	sp[1676],r8
80004e54:	58 78       	cp.w	r8,7
80004e56:	e0 89 00 04 	brgt	80004e5e <_vfprintf_r+0x171a>
80004e5a:	2f 83       	sub	r3,-8
80004e5c:	c0 b8       	rjmp	80004e72 <_vfprintf_r+0x172e>
80004e5e:	fa ca f9 78 	sub	r10,sp,-1672
80004e62:	02 9b       	mov	r11,r1
80004e64:	08 9c       	mov	r12,r4
80004e66:	fe b0 f4 61 	rcall	80003728 <__sprint_r>
80004e6a:	e0 81 03 ec 	brne	80005642 <_vfprintf_r+0x1efe>
80004e6e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004e72:	30 09       	mov	r9,0
80004e74:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004e78:	f2 08 18 00 	cp.b	r8,r9
80004e7c:	c1 f0       	breq	80004eba <_vfprintf_r+0x1776>
80004e7e:	fa f8 06 90 	ld.w	r8,sp[1680]
80004e82:	fa c9 f9 45 	sub	r9,sp,-1723
80004e86:	2f f8       	sub	r8,-1
80004e88:	87 09       	st.w	r3[0x0],r9
80004e8a:	fb 48 06 90 	st.w	sp[1680],r8
80004e8e:	30 19       	mov	r9,1
80004e90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004e94:	87 19       	st.w	r3[0x4],r9
80004e96:	2f f8       	sub	r8,-1
80004e98:	fb 48 06 8c 	st.w	sp[1676],r8
80004e9c:	58 78       	cp.w	r8,7
80004e9e:	e0 89 00 04 	brgt	80004ea6 <_vfprintf_r+0x1762>
80004ea2:	2f 83       	sub	r3,-8
80004ea4:	c0 b8       	rjmp	80004eba <_vfprintf_r+0x1776>
80004ea6:	fa ca f9 78 	sub	r10,sp,-1672
80004eaa:	02 9b       	mov	r11,r1
80004eac:	08 9c       	mov	r12,r4
80004eae:	fe b0 f4 3d 	rcall	80003728 <__sprint_r>
80004eb2:	e0 81 03 c8 	brne	80005642 <_vfprintf_r+0x1efe>
80004eb6:	fa c3 f9 e0 	sub	r3,sp,-1568
80004eba:	40 fc       	lddsp	r12,sp[0x3c]
80004ebc:	58 0c       	cp.w	r12,0
80004ebe:	c1 f0       	breq	80004efc <_vfprintf_r+0x17b8>
80004ec0:	fa f8 06 90 	ld.w	r8,sp[1680]
80004ec4:	fa c9 f9 48 	sub	r9,sp,-1720
80004ec8:	2f e8       	sub	r8,-2
80004eca:	87 09       	st.w	r3[0x0],r9
80004ecc:	fb 48 06 90 	st.w	sp[1680],r8
80004ed0:	30 29       	mov	r9,2
80004ed2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004ed6:	87 19       	st.w	r3[0x4],r9
80004ed8:	2f f8       	sub	r8,-1
80004eda:	fb 48 06 8c 	st.w	sp[1676],r8
80004ede:	58 78       	cp.w	r8,7
80004ee0:	e0 89 00 04 	brgt	80004ee8 <_vfprintf_r+0x17a4>
80004ee4:	2f 83       	sub	r3,-8
80004ee6:	c0 b8       	rjmp	80004efc <_vfprintf_r+0x17b8>
80004ee8:	fa ca f9 78 	sub	r10,sp,-1672
80004eec:	02 9b       	mov	r11,r1
80004eee:	08 9c       	mov	r12,r4
80004ef0:	fe b0 f4 1c 	rcall	80003728 <__sprint_r>
80004ef4:	e0 81 03 a7 	brne	80005642 <_vfprintf_r+0x1efe>
80004ef8:	fa c3 f9 e0 	sub	r3,sp,-1568
80004efc:	40 9b       	lddsp	r11,sp[0x24]
80004efe:	e0 4b 00 80 	cp.w	r11,128
80004f02:	c4 71       	brne	80004f90 <_vfprintf_r+0x184c>
80004f04:	40 8a       	lddsp	r10,sp[0x20]
80004f06:	40 39       	lddsp	r9,sp[0xc]
80004f08:	12 1a       	sub	r10,r9
80004f0a:	50 4a       	stdsp	sp[0x10],r10
80004f0c:	58 0a       	cp.w	r10,0
80004f0e:	e0 89 00 20 	brgt	80004f4e <_vfprintf_r+0x180a>
80004f12:	c3 f8       	rjmp	80004f90 <_vfprintf_r+0x184c>
80004f14:	2f 09       	sub	r9,-16
80004f16:	2f f8       	sub	r8,-1
80004f18:	fe ce bc 80 	sub	lr,pc,-17280
80004f1c:	31 0c       	mov	r12,16
80004f1e:	fb 49 06 90 	st.w	sp[1680],r9
80004f22:	87 0e       	st.w	r3[0x0],lr
80004f24:	87 1c       	st.w	r3[0x4],r12
80004f26:	fb 48 06 8c 	st.w	sp[1676],r8
80004f2a:	58 78       	cp.w	r8,7
80004f2c:	e0 89 00 04 	brgt	80004f34 <_vfprintf_r+0x17f0>
80004f30:	2f 83       	sub	r3,-8
80004f32:	c0 b8       	rjmp	80004f48 <_vfprintf_r+0x1804>
80004f34:	fa ca f9 78 	sub	r10,sp,-1672
80004f38:	02 9b       	mov	r11,r1
80004f3a:	08 9c       	mov	r12,r4
80004f3c:	fe b0 f3 f6 	rcall	80003728 <__sprint_r>
80004f40:	e0 81 03 81 	brne	80005642 <_vfprintf_r+0x1efe>
80004f44:	fa c3 f9 e0 	sub	r3,sp,-1568
80004f48:	40 4b       	lddsp	r11,sp[0x10]
80004f4a:	21 0b       	sub	r11,16
80004f4c:	50 4b       	stdsp	sp[0x10],r11
80004f4e:	fa f9 06 90 	ld.w	r9,sp[1680]
80004f52:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004f56:	fe ca bc be 	sub	r10,pc,-17218
80004f5a:	40 4e       	lddsp	lr,sp[0x10]
80004f5c:	59 0e       	cp.w	lr,16
80004f5e:	fe 99 ff db 	brgt	80004f14 <_vfprintf_r+0x17d0>
80004f62:	1c 09       	add	r9,lr
80004f64:	2f f8       	sub	r8,-1
80004f66:	87 0a       	st.w	r3[0x0],r10
80004f68:	fb 49 06 90 	st.w	sp[1680],r9
80004f6c:	87 1e       	st.w	r3[0x4],lr
80004f6e:	fb 48 06 8c 	st.w	sp[1676],r8
80004f72:	58 78       	cp.w	r8,7
80004f74:	e0 89 00 04 	brgt	80004f7c <_vfprintf_r+0x1838>
80004f78:	2f 83       	sub	r3,-8
80004f7a:	c0 b8       	rjmp	80004f90 <_vfprintf_r+0x184c>
80004f7c:	fa ca f9 78 	sub	r10,sp,-1672
80004f80:	02 9b       	mov	r11,r1
80004f82:	08 9c       	mov	r12,r4
80004f84:	fe b0 f3 d2 	rcall	80003728 <__sprint_r>
80004f88:	e0 81 03 5d 	brne	80005642 <_vfprintf_r+0x1efe>
80004f8c:	fa c3 f9 e0 	sub	r3,sp,-1568
80004f90:	40 2c       	lddsp	r12,sp[0x8]
80004f92:	04 1c       	sub	r12,r2
80004f94:	50 2c       	stdsp	sp[0x8],r12
80004f96:	58 0c       	cp.w	r12,0
80004f98:	e0 89 00 20 	brgt	80004fd8 <_vfprintf_r+0x1894>
80004f9c:	c3 f8       	rjmp	8000501a <_vfprintf_r+0x18d6>
80004f9e:	2f 09       	sub	r9,-16
80004fa0:	2f f8       	sub	r8,-1
80004fa2:	fe cb bd 0a 	sub	r11,pc,-17142
80004fa6:	31 0a       	mov	r10,16
80004fa8:	fb 49 06 90 	st.w	sp[1680],r9
80004fac:	87 0b       	st.w	r3[0x0],r11
80004fae:	87 1a       	st.w	r3[0x4],r10
80004fb0:	fb 48 06 8c 	st.w	sp[1676],r8
80004fb4:	58 78       	cp.w	r8,7
80004fb6:	e0 89 00 04 	brgt	80004fbe <_vfprintf_r+0x187a>
80004fba:	2f 83       	sub	r3,-8
80004fbc:	c0 b8       	rjmp	80004fd2 <_vfprintf_r+0x188e>
80004fbe:	fa ca f9 78 	sub	r10,sp,-1672
80004fc2:	02 9b       	mov	r11,r1
80004fc4:	08 9c       	mov	r12,r4
80004fc6:	fe b0 f3 b1 	rcall	80003728 <__sprint_r>
80004fca:	e0 81 03 3c 	brne	80005642 <_vfprintf_r+0x1efe>
80004fce:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fd2:	40 29       	lddsp	r9,sp[0x8]
80004fd4:	21 09       	sub	r9,16
80004fd6:	50 29       	stdsp	sp[0x8],r9
80004fd8:	fa f9 06 90 	ld.w	r9,sp[1680]
80004fdc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004fe0:	fe ca bd 48 	sub	r10,pc,-17080
80004fe4:	40 2e       	lddsp	lr,sp[0x8]
80004fe6:	59 0e       	cp.w	lr,16
80004fe8:	fe 99 ff db 	brgt	80004f9e <_vfprintf_r+0x185a>
80004fec:	1c 09       	add	r9,lr
80004fee:	2f f8       	sub	r8,-1
80004ff0:	87 0a       	st.w	r3[0x0],r10
80004ff2:	fb 49 06 90 	st.w	sp[1680],r9
80004ff6:	87 1e       	st.w	r3[0x4],lr
80004ff8:	fb 48 06 8c 	st.w	sp[1676],r8
80004ffc:	58 78       	cp.w	r8,7
80004ffe:	e0 89 00 04 	brgt	80005006 <_vfprintf_r+0x18c2>
80005002:	2f 83       	sub	r3,-8
80005004:	c0 b8       	rjmp	8000501a <_vfprintf_r+0x18d6>
80005006:	fa ca f9 78 	sub	r10,sp,-1672
8000500a:	02 9b       	mov	r11,r1
8000500c:	08 9c       	mov	r12,r4
8000500e:	fe b0 f3 8d 	rcall	80003728 <__sprint_r>
80005012:	e0 81 03 18 	brne	80005642 <_vfprintf_r+0x1efe>
80005016:	fa c3 f9 e0 	sub	r3,sp,-1568
8000501a:	ed b5 00 08 	bld	r5,0x8
8000501e:	c0 b0       	breq	80005034 <_vfprintf_r+0x18f0>
80005020:	fa f8 06 90 	ld.w	r8,sp[1680]
80005024:	87 12       	st.w	r3[0x4],r2
80005026:	87 06       	st.w	r3[0x0],r6
80005028:	f0 02 00 02 	add	r2,r8,r2
8000502c:	fb 42 06 90 	st.w	sp[1680],r2
80005030:	e0 8f 01 d4 	bral	800053d8 <_vfprintf_r+0x1c94>
80005034:	e0 40 00 65 	cp.w	r0,101
80005038:	e0 8a 01 d6 	brle	800053e4 <_vfprintf_r+0x1ca0>
8000503c:	30 08       	mov	r8,0
8000503e:	30 09       	mov	r9,0
80005040:	40 5b       	lddsp	r11,sp[0x14]
80005042:	40 7a       	lddsp	r10,sp[0x1c]
80005044:	e0 a0 19 53 	rcall	800082ea <__avr32_f64_cmp_eq>
80005048:	c7 90       	breq	8000513a <_vfprintf_r+0x19f6>
8000504a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000504e:	fe c9 bd ca 	sub	r9,pc,-16950
80005052:	2f f8       	sub	r8,-1
80005054:	87 09       	st.w	r3[0x0],r9
80005056:	fb 48 06 90 	st.w	sp[1680],r8
8000505a:	30 19       	mov	r9,1
8000505c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005060:	87 19       	st.w	r3[0x4],r9
80005062:	2f f8       	sub	r8,-1
80005064:	fb 48 06 8c 	st.w	sp[1676],r8
80005068:	58 78       	cp.w	r8,7
8000506a:	e0 89 00 05 	brgt	80005074 <_vfprintf_r+0x1930>
8000506e:	2f 83       	sub	r3,-8
80005070:	c0 c8       	rjmp	80005088 <_vfprintf_r+0x1944>
80005072:	d7 03       	nop
80005074:	fa ca f9 78 	sub	r10,sp,-1672
80005078:	02 9b       	mov	r11,r1
8000507a:	08 9c       	mov	r12,r4
8000507c:	fe b0 f3 56 	rcall	80003728 <__sprint_r>
80005080:	e0 81 02 e1 	brne	80005642 <_vfprintf_r+0x1efe>
80005084:	fa c3 f9 e0 	sub	r3,sp,-1568
80005088:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000508c:	40 6c       	lddsp	r12,sp[0x18]
8000508e:	18 38       	cp.w	r8,r12
80005090:	c0 55       	brlt	8000509a <_vfprintf_r+0x1956>
80005092:	ed b5 00 00 	bld	r5,0x0
80005096:	e0 81 02 6b 	brne	8000556c <_vfprintf_r+0x1e28>
8000509a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000509e:	2f f8       	sub	r8,-1
800050a0:	40 cb       	lddsp	r11,sp[0x30]
800050a2:	fb 48 06 90 	st.w	sp[1680],r8
800050a6:	30 19       	mov	r9,1
800050a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050ac:	87 0b       	st.w	r3[0x0],r11
800050ae:	2f f8       	sub	r8,-1
800050b0:	87 19       	st.w	r3[0x4],r9
800050b2:	fb 48 06 8c 	st.w	sp[1676],r8
800050b6:	58 78       	cp.w	r8,7
800050b8:	e0 89 00 04 	brgt	800050c0 <_vfprintf_r+0x197c>
800050bc:	2f 83       	sub	r3,-8
800050be:	c0 b8       	rjmp	800050d4 <_vfprintf_r+0x1990>
800050c0:	fa ca f9 78 	sub	r10,sp,-1672
800050c4:	02 9b       	mov	r11,r1
800050c6:	08 9c       	mov	r12,r4
800050c8:	fe b0 f3 30 	rcall	80003728 <__sprint_r>
800050cc:	e0 81 02 bb 	brne	80005642 <_vfprintf_r+0x1efe>
800050d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800050d4:	40 66       	lddsp	r6,sp[0x18]
800050d6:	20 16       	sub	r6,1
800050d8:	58 06       	cp.w	r6,0
800050da:	e0 89 00 1d 	brgt	80005114 <_vfprintf_r+0x19d0>
800050de:	e0 8f 02 47 	bral	8000556c <_vfprintf_r+0x1e28>
800050e2:	2f 09       	sub	r9,-16
800050e4:	2f f8       	sub	r8,-1
800050e6:	fb 49 06 90 	st.w	sp[1680],r9
800050ea:	87 02       	st.w	r3[0x0],r2
800050ec:	87 10       	st.w	r3[0x4],r0
800050ee:	fb 48 06 8c 	st.w	sp[1676],r8
800050f2:	58 78       	cp.w	r8,7
800050f4:	e0 89 00 04 	brgt	800050fc <_vfprintf_r+0x19b8>
800050f8:	2f 83       	sub	r3,-8
800050fa:	c0 b8       	rjmp	80005110 <_vfprintf_r+0x19cc>
800050fc:	fa ca f9 78 	sub	r10,sp,-1672
80005100:	02 9b       	mov	r11,r1
80005102:	08 9c       	mov	r12,r4
80005104:	fe b0 f3 12 	rcall	80003728 <__sprint_r>
80005108:	e0 81 02 9d 	brne	80005642 <_vfprintf_r+0x1efe>
8000510c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005110:	21 06       	sub	r6,16
80005112:	c0 48       	rjmp	8000511a <_vfprintf_r+0x19d6>
80005114:	fe c2 be 7c 	sub	r2,pc,-16772
80005118:	31 00       	mov	r0,16
8000511a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000511e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005122:	fe ca be 8a 	sub	r10,pc,-16758
80005126:	59 06       	cp.w	r6,16
80005128:	fe 99 ff dd 	brgt	800050e2 <_vfprintf_r+0x199e>
8000512c:	0c 09       	add	r9,r6
8000512e:	87 0a       	st.w	r3[0x0],r10
80005130:	fb 49 06 90 	st.w	sp[1680],r9
80005134:	2f f8       	sub	r8,-1
80005136:	87 16       	st.w	r3[0x4],r6
80005138:	c5 39       	rjmp	800053de <_vfprintf_r+0x1c9a>
8000513a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000513e:	58 0a       	cp.w	r10,0
80005140:	e0 89 00 92 	brgt	80005264 <_vfprintf_r+0x1b20>
80005144:	fa f8 06 90 	ld.w	r8,sp[1680]
80005148:	fe c9 be c4 	sub	r9,pc,-16700
8000514c:	2f f8       	sub	r8,-1
8000514e:	87 09       	st.w	r3[0x0],r9
80005150:	fb 48 06 90 	st.w	sp[1680],r8
80005154:	30 19       	mov	r9,1
80005156:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000515a:	87 19       	st.w	r3[0x4],r9
8000515c:	2f f8       	sub	r8,-1
8000515e:	fb 48 06 8c 	st.w	sp[1676],r8
80005162:	58 78       	cp.w	r8,7
80005164:	e0 89 00 04 	brgt	8000516c <_vfprintf_r+0x1a28>
80005168:	2f 83       	sub	r3,-8
8000516a:	c0 b8       	rjmp	80005180 <_vfprintf_r+0x1a3c>
8000516c:	fa ca f9 78 	sub	r10,sp,-1672
80005170:	02 9b       	mov	r11,r1
80005172:	08 9c       	mov	r12,r4
80005174:	fe b0 f2 da 	rcall	80003728 <__sprint_r>
80005178:	e0 81 02 65 	brne	80005642 <_vfprintf_r+0x1efe>
8000517c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005180:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005184:	58 08       	cp.w	r8,0
80005186:	c0 81       	brne	80005196 <_vfprintf_r+0x1a52>
80005188:	40 6a       	lddsp	r10,sp[0x18]
8000518a:	58 0a       	cp.w	r10,0
8000518c:	c0 51       	brne	80005196 <_vfprintf_r+0x1a52>
8000518e:	ed b5 00 00 	bld	r5,0x0
80005192:	e0 81 01 ed 	brne	8000556c <_vfprintf_r+0x1e28>
80005196:	40 c9       	lddsp	r9,sp[0x30]
80005198:	fa f8 06 90 	ld.w	r8,sp[1680]
8000519c:	2f f8       	sub	r8,-1
8000519e:	87 09       	st.w	r3[0x0],r9
800051a0:	fb 48 06 90 	st.w	sp[1680],r8
800051a4:	30 19       	mov	r9,1
800051a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051aa:	87 19       	st.w	r3[0x4],r9
800051ac:	2f f8       	sub	r8,-1
800051ae:	fb 48 06 8c 	st.w	sp[1676],r8
800051b2:	58 78       	cp.w	r8,7
800051b4:	e0 89 00 04 	brgt	800051bc <_vfprintf_r+0x1a78>
800051b8:	2f 83       	sub	r3,-8
800051ba:	c0 b8       	rjmp	800051d0 <_vfprintf_r+0x1a8c>
800051bc:	fa ca f9 78 	sub	r10,sp,-1672
800051c0:	02 9b       	mov	r11,r1
800051c2:	08 9c       	mov	r12,r4
800051c4:	fe b0 f2 b2 	rcall	80003728 <__sprint_r>
800051c8:	e0 81 02 3d 	brne	80005642 <_vfprintf_r+0x1efe>
800051cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800051d0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800051d4:	5c 32       	neg	r2
800051d6:	58 02       	cp.w	r2,0
800051d8:	e0 89 00 1d 	brgt	80005212 <_vfprintf_r+0x1ace>
800051dc:	c3 d8       	rjmp	80005256 <_vfprintf_r+0x1b12>
800051de:	2f 09       	sub	r9,-16
800051e0:	2f f8       	sub	r8,-1
800051e2:	31 0e       	mov	lr,16
800051e4:	fb 49 06 90 	st.w	sp[1680],r9
800051e8:	87 00       	st.w	r3[0x0],r0
800051ea:	87 1e       	st.w	r3[0x4],lr
800051ec:	fb 48 06 8c 	st.w	sp[1676],r8
800051f0:	58 78       	cp.w	r8,7
800051f2:	e0 89 00 04 	brgt	800051fa <_vfprintf_r+0x1ab6>
800051f6:	2f 83       	sub	r3,-8
800051f8:	c0 b8       	rjmp	8000520e <_vfprintf_r+0x1aca>
800051fa:	fa ca f9 78 	sub	r10,sp,-1672
800051fe:	02 9b       	mov	r11,r1
80005200:	08 9c       	mov	r12,r4
80005202:	fe b0 f2 93 	rcall	80003728 <__sprint_r>
80005206:	e0 81 02 1e 	brne	80005642 <_vfprintf_r+0x1efe>
8000520a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000520e:	21 02       	sub	r2,16
80005210:	c0 38       	rjmp	80005216 <_vfprintf_r+0x1ad2>
80005212:	fe c0 bf 7a 	sub	r0,pc,-16518
80005216:	fa f9 06 90 	ld.w	r9,sp[1680]
8000521a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000521e:	fe ca bf 86 	sub	r10,pc,-16506
80005222:	59 02       	cp.w	r2,16
80005224:	fe 99 ff dd 	brgt	800051de <_vfprintf_r+0x1a9a>
80005228:	04 09       	add	r9,r2
8000522a:	2f f8       	sub	r8,-1
8000522c:	87 0a       	st.w	r3[0x0],r10
8000522e:	fb 49 06 90 	st.w	sp[1680],r9
80005232:	87 12       	st.w	r3[0x4],r2
80005234:	fb 48 06 8c 	st.w	sp[1676],r8
80005238:	58 78       	cp.w	r8,7
8000523a:	e0 89 00 04 	brgt	80005242 <_vfprintf_r+0x1afe>
8000523e:	2f 83       	sub	r3,-8
80005240:	c0 b8       	rjmp	80005256 <_vfprintf_r+0x1b12>
80005242:	fa ca f9 78 	sub	r10,sp,-1672
80005246:	02 9b       	mov	r11,r1
80005248:	08 9c       	mov	r12,r4
8000524a:	fe b0 f2 6f 	rcall	80003728 <__sprint_r>
8000524e:	e0 81 01 fa 	brne	80005642 <_vfprintf_r+0x1efe>
80005252:	fa c3 f9 e0 	sub	r3,sp,-1568
80005256:	40 6c       	lddsp	r12,sp[0x18]
80005258:	fa f8 06 90 	ld.w	r8,sp[1680]
8000525c:	87 06       	st.w	r3[0x0],r6
8000525e:	87 1c       	st.w	r3[0x4],r12
80005260:	18 08       	add	r8,r12
80005262:	cb 98       	rjmp	800053d4 <_vfprintf_r+0x1c90>
80005264:	fa f9 06 90 	ld.w	r9,sp[1680]
80005268:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000526c:	40 6b       	lddsp	r11,sp[0x18]
8000526e:	16 3a       	cp.w	r10,r11
80005270:	c6 f5       	brlt	8000534e <_vfprintf_r+0x1c0a>
80005272:	16 09       	add	r9,r11
80005274:	2f f8       	sub	r8,-1
80005276:	87 06       	st.w	r3[0x0],r6
80005278:	fb 49 06 90 	st.w	sp[1680],r9
8000527c:	87 1b       	st.w	r3[0x4],r11
8000527e:	fb 48 06 8c 	st.w	sp[1676],r8
80005282:	58 78       	cp.w	r8,7
80005284:	e0 89 00 04 	brgt	8000528c <_vfprintf_r+0x1b48>
80005288:	2f 83       	sub	r3,-8
8000528a:	c0 b8       	rjmp	800052a0 <_vfprintf_r+0x1b5c>
8000528c:	fa ca f9 78 	sub	r10,sp,-1672
80005290:	02 9b       	mov	r11,r1
80005292:	08 9c       	mov	r12,r4
80005294:	fe b0 f2 4a 	rcall	80003728 <__sprint_r>
80005298:	e0 81 01 d5 	brne	80005642 <_vfprintf_r+0x1efe>
8000529c:	fa c3 f9 e0 	sub	r3,sp,-1568
800052a0:	fa f6 06 ac 	ld.w	r6,sp[1708]
800052a4:	40 6a       	lddsp	r10,sp[0x18]
800052a6:	14 16       	sub	r6,r10
800052a8:	58 06       	cp.w	r6,0
800052aa:	e0 89 00 1c 	brgt	800052e2 <_vfprintf_r+0x1b9e>
800052ae:	c3 d8       	rjmp	80005328 <_vfprintf_r+0x1be4>
800052b0:	2f 09       	sub	r9,-16
800052b2:	2f f8       	sub	r8,-1
800052b4:	fb 49 06 90 	st.w	sp[1680],r9
800052b8:	87 02       	st.w	r3[0x0],r2
800052ba:	87 10       	st.w	r3[0x4],r0
800052bc:	fb 48 06 8c 	st.w	sp[1676],r8
800052c0:	58 78       	cp.w	r8,7
800052c2:	e0 89 00 04 	brgt	800052ca <_vfprintf_r+0x1b86>
800052c6:	2f 83       	sub	r3,-8
800052c8:	c0 b8       	rjmp	800052de <_vfprintf_r+0x1b9a>
800052ca:	fa ca f9 78 	sub	r10,sp,-1672
800052ce:	02 9b       	mov	r11,r1
800052d0:	08 9c       	mov	r12,r4
800052d2:	fe b0 f2 2b 	rcall	80003728 <__sprint_r>
800052d6:	e0 81 01 b6 	brne	80005642 <_vfprintf_r+0x1efe>
800052da:	fa c3 f9 e0 	sub	r3,sp,-1568
800052de:	21 06       	sub	r6,16
800052e0:	c0 48       	rjmp	800052e8 <_vfprintf_r+0x1ba4>
800052e2:	fe c2 c0 4a 	sub	r2,pc,-16310
800052e6:	31 00       	mov	r0,16
800052e8:	fa f9 06 90 	ld.w	r9,sp[1680]
800052ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052f0:	fe ca c0 58 	sub	r10,pc,-16296
800052f4:	59 06       	cp.w	r6,16
800052f6:	fe 99 ff dd 	brgt	800052b0 <_vfprintf_r+0x1b6c>
800052fa:	0c 09       	add	r9,r6
800052fc:	2f f8       	sub	r8,-1
800052fe:	87 0a       	st.w	r3[0x0],r10
80005300:	fb 49 06 90 	st.w	sp[1680],r9
80005304:	87 16       	st.w	r3[0x4],r6
80005306:	fb 48 06 8c 	st.w	sp[1676],r8
8000530a:	58 78       	cp.w	r8,7
8000530c:	e0 89 00 04 	brgt	80005314 <_vfprintf_r+0x1bd0>
80005310:	2f 83       	sub	r3,-8
80005312:	c0 b8       	rjmp	80005328 <_vfprintf_r+0x1be4>
80005314:	fa ca f9 78 	sub	r10,sp,-1672
80005318:	02 9b       	mov	r11,r1
8000531a:	08 9c       	mov	r12,r4
8000531c:	fe b0 f2 06 	rcall	80003728 <__sprint_r>
80005320:	e0 81 01 91 	brne	80005642 <_vfprintf_r+0x1efe>
80005324:	fa c3 f9 e0 	sub	r3,sp,-1568
80005328:	ed b5 00 00 	bld	r5,0x0
8000532c:	e0 81 01 20 	brne	8000556c <_vfprintf_r+0x1e28>
80005330:	40 c9       	lddsp	r9,sp[0x30]
80005332:	fa f8 06 90 	ld.w	r8,sp[1680]
80005336:	2f f8       	sub	r8,-1
80005338:	87 09       	st.w	r3[0x0],r9
8000533a:	fb 48 06 90 	st.w	sp[1680],r8
8000533e:	30 19       	mov	r9,1
80005340:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005344:	87 19       	st.w	r3[0x4],r9
80005346:	2f f8       	sub	r8,-1
80005348:	fb 48 06 8c 	st.w	sp[1676],r8
8000534c:	c0 29       	rjmp	80005550 <_vfprintf_r+0x1e0c>
8000534e:	14 09       	add	r9,r10
80005350:	2f f8       	sub	r8,-1
80005352:	fb 49 06 90 	st.w	sp[1680],r9
80005356:	87 06       	st.w	r3[0x0],r6
80005358:	87 1a       	st.w	r3[0x4],r10
8000535a:	fb 48 06 8c 	st.w	sp[1676],r8
8000535e:	58 78       	cp.w	r8,7
80005360:	e0 89 00 04 	brgt	80005368 <_vfprintf_r+0x1c24>
80005364:	2f 83       	sub	r3,-8
80005366:	c0 b8       	rjmp	8000537c <_vfprintf_r+0x1c38>
80005368:	fa ca f9 78 	sub	r10,sp,-1672
8000536c:	02 9b       	mov	r11,r1
8000536e:	08 9c       	mov	r12,r4
80005370:	fe b0 f1 dc 	rcall	80003728 <__sprint_r>
80005374:	e0 81 01 67 	brne	80005642 <_vfprintf_r+0x1efe>
80005378:	fa c3 f9 e0 	sub	r3,sp,-1568
8000537c:	40 c8       	lddsp	r8,sp[0x30]
8000537e:	87 08       	st.w	r3[0x0],r8
80005380:	fa f8 06 90 	ld.w	r8,sp[1680]
80005384:	2f f8       	sub	r8,-1
80005386:	30 19       	mov	r9,1
80005388:	fb 48 06 90 	st.w	sp[1680],r8
8000538c:	87 19       	st.w	r3[0x4],r9
8000538e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005392:	2f f8       	sub	r8,-1
80005394:	fb 48 06 8c 	st.w	sp[1676],r8
80005398:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000539c:	58 78       	cp.w	r8,7
8000539e:	e0 89 00 04 	brgt	800053a6 <_vfprintf_r+0x1c62>
800053a2:	2f 83       	sub	r3,-8
800053a4:	c0 b8       	rjmp	800053ba <_vfprintf_r+0x1c76>
800053a6:	fa ca f9 78 	sub	r10,sp,-1672
800053aa:	02 9b       	mov	r11,r1
800053ac:	08 9c       	mov	r12,r4
800053ae:	fe b0 f1 bd 	rcall	80003728 <__sprint_r>
800053b2:	e0 81 01 48 	brne	80005642 <_vfprintf_r+0x1efe>
800053b6:	fa c3 f9 e0 	sub	r3,sp,-1568
800053ba:	04 06       	add	r6,r2
800053bc:	fa f8 06 ac 	ld.w	r8,sp[1708]
800053c0:	87 06       	st.w	r3[0x0],r6
800053c2:	fa f9 06 90 	ld.w	r9,sp[1680]
800053c6:	40 66       	lddsp	r6,sp[0x18]
800053c8:	40 6e       	lddsp	lr,sp[0x18]
800053ca:	10 16       	sub	r6,r8
800053cc:	f2 08 01 08 	sub	r8,r9,r8
800053d0:	87 16       	st.w	r3[0x4],r6
800053d2:	1c 08       	add	r8,lr
800053d4:	fb 48 06 90 	st.w	sp[1680],r8
800053d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053dc:	2f f8       	sub	r8,-1
800053de:	fb 48 06 8c 	st.w	sp[1676],r8
800053e2:	cb 78       	rjmp	80005550 <_vfprintf_r+0x1e0c>
800053e4:	40 6c       	lddsp	r12,sp[0x18]
800053e6:	58 1c       	cp.w	r12,1
800053e8:	e0 89 00 06 	brgt	800053f4 <_vfprintf_r+0x1cb0>
800053ec:	ed b5 00 00 	bld	r5,0x0
800053f0:	e0 81 00 85 	brne	800054fa <_vfprintf_r+0x1db6>
800053f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800053f8:	2f f8       	sub	r8,-1
800053fa:	30 19       	mov	r9,1
800053fc:	fb 48 06 90 	st.w	sp[1680],r8
80005400:	87 06       	st.w	r3[0x0],r6
80005402:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005406:	87 19       	st.w	r3[0x4],r9
80005408:	2f f8       	sub	r8,-1
8000540a:	fb 48 06 8c 	st.w	sp[1676],r8
8000540e:	58 78       	cp.w	r8,7
80005410:	e0 89 00 04 	brgt	80005418 <_vfprintf_r+0x1cd4>
80005414:	2f 83       	sub	r3,-8
80005416:	c0 b8       	rjmp	8000542c <_vfprintf_r+0x1ce8>
80005418:	fa ca f9 78 	sub	r10,sp,-1672
8000541c:	02 9b       	mov	r11,r1
8000541e:	08 9c       	mov	r12,r4
80005420:	fe b0 f1 84 	rcall	80003728 <__sprint_r>
80005424:	e0 81 01 0f 	brne	80005642 <_vfprintf_r+0x1efe>
80005428:	fa c3 f9 e0 	sub	r3,sp,-1568
8000542c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005430:	2f f8       	sub	r8,-1
80005432:	40 cb       	lddsp	r11,sp[0x30]
80005434:	fb 48 06 90 	st.w	sp[1680],r8
80005438:	30 19       	mov	r9,1
8000543a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000543e:	87 0b       	st.w	r3[0x0],r11
80005440:	2f f8       	sub	r8,-1
80005442:	87 19       	st.w	r3[0x4],r9
80005444:	fb 48 06 8c 	st.w	sp[1676],r8
80005448:	58 78       	cp.w	r8,7
8000544a:	e0 89 00 05 	brgt	80005454 <_vfprintf_r+0x1d10>
8000544e:	2f 83       	sub	r3,-8
80005450:	c0 c8       	rjmp	80005468 <_vfprintf_r+0x1d24>
80005452:	d7 03       	nop
80005454:	fa ca f9 78 	sub	r10,sp,-1672
80005458:	02 9b       	mov	r11,r1
8000545a:	08 9c       	mov	r12,r4
8000545c:	fe b0 f1 66 	rcall	80003728 <__sprint_r>
80005460:	e0 81 00 f1 	brne	80005642 <_vfprintf_r+0x1efe>
80005464:	fa c3 f9 e0 	sub	r3,sp,-1568
80005468:	30 08       	mov	r8,0
8000546a:	30 09       	mov	r9,0
8000546c:	40 5b       	lddsp	r11,sp[0x14]
8000546e:	40 7a       	lddsp	r10,sp[0x1c]
80005470:	e0 a0 17 3d 	rcall	800082ea <__avr32_f64_cmp_eq>
80005474:	40 68       	lddsp	r8,sp[0x18]
80005476:	20 18       	sub	r8,1
80005478:	58 0c       	cp.w	r12,0
8000547a:	c0 d1       	brne	80005494 <_vfprintf_r+0x1d50>
8000547c:	2f f6       	sub	r6,-1
8000547e:	87 18       	st.w	r3[0x4],r8
80005480:	87 06       	st.w	r3[0x0],r6
80005482:	fa f6 06 90 	ld.w	r6,sp[1680]
80005486:	10 06       	add	r6,r8
80005488:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000548c:	fb 46 06 90 	st.w	sp[1680],r6
80005490:	2f f8       	sub	r8,-1
80005492:	c3 18       	rjmp	800054f4 <_vfprintf_r+0x1db0>
80005494:	10 96       	mov	r6,r8
80005496:	58 08       	cp.w	r8,0
80005498:	e0 89 00 1c 	brgt	800054d0 <_vfprintf_r+0x1d8c>
8000549c:	c4 b8       	rjmp	80005532 <_vfprintf_r+0x1dee>
8000549e:	2f 09       	sub	r9,-16
800054a0:	2f f8       	sub	r8,-1
800054a2:	fb 49 06 90 	st.w	sp[1680],r9
800054a6:	87 02       	st.w	r3[0x0],r2
800054a8:	87 10       	st.w	r3[0x4],r0
800054aa:	fb 48 06 8c 	st.w	sp[1676],r8
800054ae:	58 78       	cp.w	r8,7
800054b0:	e0 89 00 04 	brgt	800054b8 <_vfprintf_r+0x1d74>
800054b4:	2f 83       	sub	r3,-8
800054b6:	c0 b8       	rjmp	800054cc <_vfprintf_r+0x1d88>
800054b8:	fa ca f9 78 	sub	r10,sp,-1672
800054bc:	02 9b       	mov	r11,r1
800054be:	08 9c       	mov	r12,r4
800054c0:	fe b0 f1 34 	rcall	80003728 <__sprint_r>
800054c4:	e0 81 00 bf 	brne	80005642 <_vfprintf_r+0x1efe>
800054c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800054cc:	21 06       	sub	r6,16
800054ce:	c0 48       	rjmp	800054d6 <_vfprintf_r+0x1d92>
800054d0:	fe c2 c2 38 	sub	r2,pc,-15816
800054d4:	31 00       	mov	r0,16
800054d6:	fa f9 06 90 	ld.w	r9,sp[1680]
800054da:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054de:	fe ca c2 46 	sub	r10,pc,-15802
800054e2:	59 06       	cp.w	r6,16
800054e4:	fe 99 ff dd 	brgt	8000549e <_vfprintf_r+0x1d5a>
800054e8:	0c 09       	add	r9,r6
800054ea:	87 0a       	st.w	r3[0x0],r10
800054ec:	fb 49 06 90 	st.w	sp[1680],r9
800054f0:	2f f8       	sub	r8,-1
800054f2:	87 16       	st.w	r3[0x4],r6
800054f4:	fb 48 06 8c 	st.w	sp[1676],r8
800054f8:	c0 e8       	rjmp	80005514 <_vfprintf_r+0x1dd0>
800054fa:	fa f8 06 90 	ld.w	r8,sp[1680]
800054fe:	2f f8       	sub	r8,-1
80005500:	30 19       	mov	r9,1
80005502:	fb 48 06 90 	st.w	sp[1680],r8
80005506:	87 06       	st.w	r3[0x0],r6
80005508:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000550c:	87 19       	st.w	r3[0x4],r9
8000550e:	2f f8       	sub	r8,-1
80005510:	fb 48 06 8c 	st.w	sp[1676],r8
80005514:	58 78       	cp.w	r8,7
80005516:	e0 89 00 04 	brgt	8000551e <_vfprintf_r+0x1dda>
8000551a:	2f 83       	sub	r3,-8
8000551c:	c0 b8       	rjmp	80005532 <_vfprintf_r+0x1dee>
8000551e:	fa ca f9 78 	sub	r10,sp,-1672
80005522:	02 9b       	mov	r11,r1
80005524:	08 9c       	mov	r12,r4
80005526:	fe b0 f1 01 	rcall	80003728 <__sprint_r>
8000552a:	e0 81 00 8c 	brne	80005642 <_vfprintf_r+0x1efe>
8000552e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005532:	40 ea       	lddsp	r10,sp[0x38]
80005534:	fa f8 06 90 	ld.w	r8,sp[1680]
80005538:	14 08       	add	r8,r10
8000553a:	fa c9 f9 64 	sub	r9,sp,-1692
8000553e:	fb 48 06 90 	st.w	sp[1680],r8
80005542:	87 1a       	st.w	r3[0x4],r10
80005544:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005548:	87 09       	st.w	r3[0x0],r9
8000554a:	2f f8       	sub	r8,-1
8000554c:	fb 48 06 8c 	st.w	sp[1676],r8
80005550:	58 78       	cp.w	r8,7
80005552:	e0 89 00 04 	brgt	8000555a <_vfprintf_r+0x1e16>
80005556:	2f 83       	sub	r3,-8
80005558:	c0 a8       	rjmp	8000556c <_vfprintf_r+0x1e28>
8000555a:	fa ca f9 78 	sub	r10,sp,-1672
8000555e:	02 9b       	mov	r11,r1
80005560:	08 9c       	mov	r12,r4
80005562:	fe b0 f0 e3 	rcall	80003728 <__sprint_r>
80005566:	c6 e1       	brne	80005642 <_vfprintf_r+0x1efe>
80005568:	fa c3 f9 e0 	sub	r3,sp,-1568
8000556c:	e2 15 00 04 	andl	r5,0x4,COH
80005570:	c3 f0       	breq	800055ee <_vfprintf_r+0x1eaa>
80005572:	40 86       	lddsp	r6,sp[0x20]
80005574:	40 39       	lddsp	r9,sp[0xc]
80005576:	12 16       	sub	r6,r9
80005578:	58 06       	cp.w	r6,0
8000557a:	e0 89 00 1a 	brgt	800055ae <_vfprintf_r+0x1e6a>
8000557e:	c3 88       	rjmp	800055ee <_vfprintf_r+0x1eaa>
80005580:	2f 09       	sub	r9,-16
80005582:	2f f8       	sub	r8,-1
80005584:	fb 49 06 90 	st.w	sp[1680],r9
80005588:	87 05       	st.w	r3[0x0],r5
8000558a:	87 12       	st.w	r3[0x4],r2
8000558c:	fb 48 06 8c 	st.w	sp[1676],r8
80005590:	58 78       	cp.w	r8,7
80005592:	e0 89 00 04 	brgt	8000559a <_vfprintf_r+0x1e56>
80005596:	2f 83       	sub	r3,-8
80005598:	c0 98       	rjmp	800055aa <_vfprintf_r+0x1e66>
8000559a:	00 9a       	mov	r10,r0
8000559c:	02 9b       	mov	r11,r1
8000559e:	08 9c       	mov	r12,r4
800055a0:	fe b0 f0 c4 	rcall	80003728 <__sprint_r>
800055a4:	c4 f1       	brne	80005642 <_vfprintf_r+0x1efe>
800055a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800055aa:	21 06       	sub	r6,16
800055ac:	c0 68       	rjmp	800055b8 <_vfprintf_r+0x1e74>
800055ae:	fe c5 c3 26 	sub	r5,pc,-15578
800055b2:	31 02       	mov	r2,16
800055b4:	fa c0 f9 78 	sub	r0,sp,-1672
800055b8:	fa f9 06 90 	ld.w	r9,sp[1680]
800055bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055c0:	fe ca c3 38 	sub	r10,pc,-15560
800055c4:	59 06       	cp.w	r6,16
800055c6:	fe 99 ff dd 	brgt	80005580 <_vfprintf_r+0x1e3c>
800055ca:	0c 09       	add	r9,r6
800055cc:	2f f8       	sub	r8,-1
800055ce:	87 0a       	st.w	r3[0x0],r10
800055d0:	87 16       	st.w	r3[0x4],r6
800055d2:	fb 49 06 90 	st.w	sp[1680],r9
800055d6:	fb 48 06 8c 	st.w	sp[1676],r8
800055da:	58 78       	cp.w	r8,7
800055dc:	e0 8a 00 09 	brle	800055ee <_vfprintf_r+0x1eaa>
800055e0:	fa ca f9 78 	sub	r10,sp,-1672
800055e4:	02 9b       	mov	r11,r1
800055e6:	08 9c       	mov	r12,r4
800055e8:	fe b0 f0 a0 	rcall	80003728 <__sprint_r>
800055ec:	c2 b1       	brne	80005642 <_vfprintf_r+0x1efe>
800055ee:	40 bc       	lddsp	r12,sp[0x2c]
800055f0:	40 36       	lddsp	r6,sp[0xc]
800055f2:	40 8e       	lddsp	lr,sp[0x20]
800055f4:	ec 0e 0c 48 	max	r8,r6,lr
800055f8:	10 0c       	add	r12,r8
800055fa:	50 bc       	stdsp	sp[0x2c],r12
800055fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005600:	58 08       	cp.w	r8,0
80005602:	c0 80       	breq	80005612 <_vfprintf_r+0x1ece>
80005604:	fa ca f9 78 	sub	r10,sp,-1672
80005608:	02 9b       	mov	r11,r1
8000560a:	08 9c       	mov	r12,r4
8000560c:	fe b0 f0 8e 	rcall	80003728 <__sprint_r>
80005610:	c1 91       	brne	80005642 <_vfprintf_r+0x1efe>
80005612:	30 0b       	mov	r11,0
80005614:	fa c3 f9 e0 	sub	r3,sp,-1568
80005618:	fb 4b 06 8c 	st.w	sp[1676],r11
8000561c:	fe 9f f1 22 	bral	80003860 <_vfprintf_r+0x11c>
80005620:	08 95       	mov	r5,r4
80005622:	fa f8 06 90 	ld.w	r8,sp[1680]
80005626:	58 08       	cp.w	r8,0
80005628:	c0 80       	breq	80005638 <_vfprintf_r+0x1ef4>
8000562a:	08 9c       	mov	r12,r4
8000562c:	fa ca f9 78 	sub	r10,sp,-1672
80005630:	02 9b       	mov	r11,r1
80005632:	fe b0 f0 7b 	rcall	80003728 <__sprint_r>
80005636:	c0 61       	brne	80005642 <_vfprintf_r+0x1efe>
80005638:	30 08       	mov	r8,0
8000563a:	fb 48 06 8c 	st.w	sp[1676],r8
8000563e:	c0 28       	rjmp	80005642 <_vfprintf_r+0x1efe>
80005640:	40 41       	lddsp	r1,sp[0x10]
80005642:	82 68       	ld.sh	r8,r1[0xc]
80005644:	ed b8 00 06 	bld	r8,0x6
80005648:	c0 31       	brne	8000564e <_vfprintf_r+0x1f0a>
8000564a:	3f fa       	mov	r10,-1
8000564c:	50 ba       	stdsp	sp[0x2c],r10
8000564e:	40 bc       	lddsp	r12,sp[0x2c]
80005650:	fe 3d f9 44 	sub	sp,-1724
80005654:	d8 32       	popm	r0-r7,pc
80005656:	d7 03       	nop

80005658 <__swsetup_r>:
80005658:	d4 21       	pushm	r4-r7,lr
8000565a:	e0 68 01 04 	mov	r8,260
8000565e:	18 96       	mov	r6,r12
80005660:	16 97       	mov	r7,r11
80005662:	70 0c       	ld.w	r12,r8[0x0]
80005664:	58 0c       	cp.w	r12,0
80005666:	c0 60       	breq	80005672 <__swsetup_r+0x1a>
80005668:	78 68       	ld.w	r8,r12[0x18]
8000566a:	58 08       	cp.w	r8,0
8000566c:	c0 31       	brne	80005672 <__swsetup_r+0x1a>
8000566e:	e0 a0 07 b9 	rcall	800065e0 <__sinit>
80005672:	fe c8 c2 ba 	sub	r8,pc,-15686
80005676:	10 37       	cp.w	r7,r8
80005678:	c0 61       	brne	80005684 <__swsetup_r+0x2c>
8000567a:	e0 68 01 04 	mov	r8,260
8000567e:	70 08       	ld.w	r8,r8[0x0]
80005680:	70 07       	ld.w	r7,r8[0x0]
80005682:	c1 28       	rjmp	800056a6 <__swsetup_r+0x4e>
80005684:	fe c8 c2 ac 	sub	r8,pc,-15700
80005688:	10 37       	cp.w	r7,r8
8000568a:	c0 61       	brne	80005696 <__swsetup_r+0x3e>
8000568c:	e0 68 01 04 	mov	r8,260
80005690:	70 08       	ld.w	r8,r8[0x0]
80005692:	70 17       	ld.w	r7,r8[0x4]
80005694:	c0 98       	rjmp	800056a6 <__swsetup_r+0x4e>
80005696:	fe c8 c2 9e 	sub	r8,pc,-15714
8000569a:	10 37       	cp.w	r7,r8
8000569c:	c0 51       	brne	800056a6 <__swsetup_r+0x4e>
8000569e:	e0 68 01 04 	mov	r8,260
800056a2:	70 08       	ld.w	r8,r8[0x0]
800056a4:	70 27       	ld.w	r7,r8[0x8]
800056a6:	8e 68       	ld.sh	r8,r7[0xc]
800056a8:	ed b8 00 03 	bld	r8,0x3
800056ac:	c1 e0       	breq	800056e8 <__swsetup_r+0x90>
800056ae:	ed b8 00 04 	bld	r8,0x4
800056b2:	c3 e1       	brne	8000572e <__swsetup_r+0xd6>
800056b4:	ed b8 00 02 	bld	r8,0x2
800056b8:	c1 51       	brne	800056e2 <__swsetup_r+0x8a>
800056ba:	6e db       	ld.w	r11,r7[0x34]
800056bc:	58 0b       	cp.w	r11,0
800056be:	c0 a0       	breq	800056d2 <__swsetup_r+0x7a>
800056c0:	ee c8 ff bc 	sub	r8,r7,-68
800056c4:	10 3b       	cp.w	r11,r8
800056c6:	c0 40       	breq	800056ce <__swsetup_r+0x76>
800056c8:	0c 9c       	mov	r12,r6
800056ca:	e0 a0 08 25 	rcall	80006714 <_free_r>
800056ce:	30 08       	mov	r8,0
800056d0:	8f d8       	st.w	r7[0x34],r8
800056d2:	8e 68       	ld.sh	r8,r7[0xc]
800056d4:	e0 18 ff db 	andl	r8,0xffdb
800056d8:	ae 68       	st.h	r7[0xc],r8
800056da:	30 08       	mov	r8,0
800056dc:	8f 18       	st.w	r7[0x4],r8
800056de:	6e 48       	ld.w	r8,r7[0x10]
800056e0:	8f 08       	st.w	r7[0x0],r8
800056e2:	8e 68       	ld.sh	r8,r7[0xc]
800056e4:	a3 b8       	sbr	r8,0x3
800056e6:	ae 68       	st.h	r7[0xc],r8
800056e8:	6e 48       	ld.w	r8,r7[0x10]
800056ea:	58 08       	cp.w	r8,0
800056ec:	c0 b1       	brne	80005702 <__swsetup_r+0xaa>
800056ee:	8e 68       	ld.sh	r8,r7[0xc]
800056f0:	e2 18 02 80 	andl	r8,0x280,COH
800056f4:	e0 48 02 00 	cp.w	r8,512
800056f8:	c0 50       	breq	80005702 <__swsetup_r+0xaa>
800056fa:	0c 9c       	mov	r12,r6
800056fc:	0e 9b       	mov	r11,r7
800056fe:	e0 a0 0a 4b 	rcall	80006b94 <__smakebuf_r>
80005702:	8e 69       	ld.sh	r9,r7[0xc]
80005704:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005708:	c0 70       	breq	80005716 <__swsetup_r+0xbe>
8000570a:	30 08       	mov	r8,0
8000570c:	8f 28       	st.w	r7[0x8],r8
8000570e:	6e 58       	ld.w	r8,r7[0x14]
80005710:	5c 38       	neg	r8
80005712:	8f 68       	st.w	r7[0x18],r8
80005714:	c0 68       	rjmp	80005720 <__swsetup_r+0xc8>
80005716:	ed b9 00 01 	bld	r9,0x1
8000571a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000571e:	8f 28       	st.w	r7[0x8],r8
80005720:	6e 48       	ld.w	r8,r7[0x10]
80005722:	58 08       	cp.w	r8,0
80005724:	c0 61       	brne	80005730 <__swsetup_r+0xd8>
80005726:	8e 68       	ld.sh	r8,r7[0xc]
80005728:	ed b8 00 07 	bld	r8,0x7
8000572c:	c0 21       	brne	80005730 <__swsetup_r+0xd8>
8000572e:	dc 2a       	popm	r4-r7,pc,r12=-1
80005730:	d8 2a       	popm	r4-r7,pc,r12=0
80005732:	d7 03       	nop

80005734 <quorem>:
80005734:	d4 31       	pushm	r0-r7,lr
80005736:	20 2d       	sub	sp,8
80005738:	18 97       	mov	r7,r12
8000573a:	78 48       	ld.w	r8,r12[0x10]
8000573c:	76 46       	ld.w	r6,r11[0x10]
8000573e:	0c 38       	cp.w	r8,r6
80005740:	c0 34       	brge	80005746 <quorem+0x12>
80005742:	30 0c       	mov	r12,0
80005744:	c8 58       	rjmp	8000584e <quorem+0x11a>
80005746:	ec c2 ff fc 	sub	r2,r6,-4
8000574a:	f6 c3 ff ec 	sub	r3,r11,-20
8000574e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005752:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005756:	2f f9       	sub	r9,-1
80005758:	20 16       	sub	r6,1
8000575a:	f8 09 0d 08 	divu	r8,r12,r9
8000575e:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005762:	ee c4 ff ec 	sub	r4,r7,-20
80005766:	10 95       	mov	r5,r8
80005768:	58 08       	cp.w	r8,0
8000576a:	c4 10       	breq	800057ec <quorem+0xb8>
8000576c:	30 09       	mov	r9,0
8000576e:	06 9a       	mov	r10,r3
80005770:	08 98       	mov	r8,r4
80005772:	12 91       	mov	r1,r9
80005774:	50 0b       	stdsp	sp[0x0],r11
80005776:	70 0e       	ld.w	lr,r8[0x0]
80005778:	b1 8e       	lsr	lr,0x10
8000577a:	50 1e       	stdsp	sp[0x4],lr
8000577c:	15 0e       	ld.w	lr,r10++
8000577e:	fc 00 16 10 	lsr	r0,lr,0x10
80005782:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005786:	ea 0e 03 41 	mac	r1,r5,lr
8000578a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000578e:	b1 81       	lsr	r1,0x10
80005790:	40 1b       	lddsp	r11,sp[0x4]
80005792:	ea 00 02 40 	mul	r0,r5,r0
80005796:	e2 00 00 00 	add	r0,r1,r0
8000579a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000579e:	02 1b       	sub	r11,r1
800057a0:	50 1b       	stdsp	sp[0x4],r11
800057a2:	70 0b       	ld.w	r11,r8[0x0]
800057a4:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800057a8:	02 09       	add	r9,r1
800057aa:	f2 0e 01 0e 	sub	lr,r9,lr
800057ae:	b0 1e       	st.h	r8[0x2],lr
800057b0:	fc 09 14 10 	asr	r9,lr,0x10
800057b4:	40 1e       	lddsp	lr,sp[0x4]
800057b6:	fc 09 00 09 	add	r9,lr,r9
800057ba:	b0 09       	st.h	r8[0x0],r9
800057bc:	e0 01 16 10 	lsr	r1,r0,0x10
800057c0:	2f c8       	sub	r8,-4
800057c2:	b1 49       	asr	r9,0x10
800057c4:	04 3a       	cp.w	r10,r2
800057c6:	fe 98 ff d8 	brls	80005776 <quorem+0x42>
800057ca:	40 0b       	lddsp	r11,sp[0x0]
800057cc:	58 0c       	cp.w	r12,0
800057ce:	c0 f1       	brne	800057ec <quorem+0xb8>
800057d0:	ec c8 ff fb 	sub	r8,r6,-5
800057d4:	ee 08 00 28 	add	r8,r7,r8<<0x2
800057d8:	c0 28       	rjmp	800057dc <quorem+0xa8>
800057da:	20 16       	sub	r6,1
800057dc:	20 48       	sub	r8,4
800057de:	08 38       	cp.w	r8,r4
800057e0:	e0 88 00 05 	brls	800057ea <quorem+0xb6>
800057e4:	70 09       	ld.w	r9,r8[0x0]
800057e6:	58 09       	cp.w	r9,0
800057e8:	cf 90       	breq	800057da <quorem+0xa6>
800057ea:	8f 46       	st.w	r7[0x10],r6
800057ec:	0e 9c       	mov	r12,r7
800057ee:	e0 a0 0c fb 	rcall	800071e4 <__mcmp>
800057f2:	c2 d5       	brlt	8000584c <quorem+0x118>
800057f4:	2f f5       	sub	r5,-1
800057f6:	08 98       	mov	r8,r4
800057f8:	30 09       	mov	r9,0
800057fa:	07 0b       	ld.w	r11,r3++
800057fc:	f6 0a 16 10 	lsr	r10,r11,0x10
80005800:	70 0c       	ld.w	r12,r8[0x0]
80005802:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005806:	f8 0e 16 10 	lsr	lr,r12,0x10
8000580a:	14 1e       	sub	lr,r10
8000580c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005810:	16 1a       	sub	r10,r11
80005812:	12 0a       	add	r10,r9
80005814:	b0 1a       	st.h	r8[0x2],r10
80005816:	b1 4a       	asr	r10,0x10
80005818:	fc 0a 00 09 	add	r9,lr,r10
8000581c:	b0 09       	st.h	r8[0x0],r9
8000581e:	2f c8       	sub	r8,-4
80005820:	b1 49       	asr	r9,0x10
80005822:	04 33       	cp.w	r3,r2
80005824:	fe 98 ff eb 	brls	800057fa <quorem+0xc6>
80005828:	ec c8 ff fb 	sub	r8,r6,-5
8000582c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005830:	58 09       	cp.w	r9,0
80005832:	c0 d1       	brne	8000584c <quorem+0x118>
80005834:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005838:	c0 28       	rjmp	8000583c <quorem+0x108>
8000583a:	20 16       	sub	r6,1
8000583c:	20 48       	sub	r8,4
8000583e:	08 38       	cp.w	r8,r4
80005840:	e0 88 00 05 	brls	8000584a <quorem+0x116>
80005844:	70 09       	ld.w	r9,r8[0x0]
80005846:	58 09       	cp.w	r9,0
80005848:	cf 90       	breq	8000583a <quorem+0x106>
8000584a:	8f 46       	st.w	r7[0x10],r6
8000584c:	0a 9c       	mov	r12,r5
8000584e:	2f ed       	sub	sp,-8
80005850:	d8 32       	popm	r0-r7,pc
80005852:	d7 03       	nop

80005854 <_dtoa_r>:
80005854:	d4 31       	pushm	r0-r7,lr
80005856:	21 ad       	sub	sp,104
80005858:	fa c4 ff 74 	sub	r4,sp,-140
8000585c:	18 97       	mov	r7,r12
8000585e:	16 95       	mov	r5,r11
80005860:	68 2c       	ld.w	r12,r4[0x8]
80005862:	50 c9       	stdsp	sp[0x30],r9
80005864:	68 16       	ld.w	r6,r4[0x4]
80005866:	68 09       	ld.w	r9,r4[0x0]
80005868:	50 e8       	stdsp	sp[0x38],r8
8000586a:	14 94       	mov	r4,r10
8000586c:	51 2c       	stdsp	sp[0x48],r12
8000586e:	fa e5 00 08 	st.d	sp[8],r4
80005872:	51 59       	stdsp	sp[0x54],r9
80005874:	6e 95       	ld.w	r5,r7[0x24]
80005876:	58 05       	cp.w	r5,0
80005878:	c0 91       	brne	8000588a <_dtoa_r+0x36>
8000587a:	31 0c       	mov	r12,16
8000587c:	e0 a0 09 ea 	rcall	80006c50 <malloc>
80005880:	99 35       	st.w	r12[0xc],r5
80005882:	8f 9c       	st.w	r7[0x24],r12
80005884:	99 15       	st.w	r12[0x4],r5
80005886:	99 25       	st.w	r12[0x8],r5
80005888:	99 05       	st.w	r12[0x0],r5
8000588a:	6e 99       	ld.w	r9,r7[0x24]
8000588c:	72 08       	ld.w	r8,r9[0x0]
8000588e:	58 08       	cp.w	r8,0
80005890:	c0 f0       	breq	800058ae <_dtoa_r+0x5a>
80005892:	72 1a       	ld.w	r10,r9[0x4]
80005894:	91 1a       	st.w	r8[0x4],r10
80005896:	30 1a       	mov	r10,1
80005898:	72 19       	ld.w	r9,r9[0x4]
8000589a:	f4 09 09 49 	lsl	r9,r10,r9
8000589e:	10 9b       	mov	r11,r8
800058a0:	91 29       	st.w	r8[0x8],r9
800058a2:	0e 9c       	mov	r12,r7
800058a4:	e0 a0 0c ba 	rcall	80007218 <_Bfree>
800058a8:	6e 98       	ld.w	r8,r7[0x24]
800058aa:	30 09       	mov	r9,0
800058ac:	91 09       	st.w	r8[0x0],r9
800058ae:	40 28       	lddsp	r8,sp[0x8]
800058b0:	10 94       	mov	r4,r8
800058b2:	58 08       	cp.w	r8,0
800058b4:	c0 64       	brge	800058c0 <_dtoa_r+0x6c>
800058b6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800058ba:	50 28       	stdsp	sp[0x8],r8
800058bc:	30 18       	mov	r8,1
800058be:	c0 28       	rjmp	800058c2 <_dtoa_r+0x6e>
800058c0:	30 08       	mov	r8,0
800058c2:	8d 08       	st.w	r6[0x0],r8
800058c4:	fc 1c 7f f0 	movh	r12,0x7ff0
800058c8:	40 26       	lddsp	r6,sp[0x8]
800058ca:	0c 98       	mov	r8,r6
800058cc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800058d0:	18 38       	cp.w	r8,r12
800058d2:	c2 01       	brne	80005912 <_dtoa_r+0xbe>
800058d4:	e0 68 27 0f 	mov	r8,9999
800058d8:	41 5b       	lddsp	r11,sp[0x54]
800058da:	97 08       	st.w	r11[0x0],r8
800058dc:	40 3a       	lddsp	r10,sp[0xc]
800058de:	58 0a       	cp.w	r10,0
800058e0:	c0 71       	brne	800058ee <_dtoa_r+0x9a>
800058e2:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800058e6:	c0 41       	brne	800058ee <_dtoa_r+0x9a>
800058e8:	fe cc c5 40 	sub	r12,pc,-15040
800058ec:	c0 38       	rjmp	800058f2 <_dtoa_r+0x9e>
800058ee:	fe cc c5 3a 	sub	r12,pc,-15046
800058f2:	41 29       	lddsp	r9,sp[0x48]
800058f4:	58 09       	cp.w	r9,0
800058f6:	e0 80 05 9a 	breq	8000642a <_dtoa_r+0xbd6>
800058fa:	f8 c8 ff fd 	sub	r8,r12,-3
800058fe:	f8 c9 ff f8 	sub	r9,r12,-8
80005902:	11 8b       	ld.ub	r11,r8[0x0]
80005904:	30 0a       	mov	r10,0
80005906:	41 25       	lddsp	r5,sp[0x48]
80005908:	f4 0b 18 00 	cp.b	r11,r10
8000590c:	f2 08 17 10 	movne	r8,r9
80005910:	c1 68       	rjmp	8000593c <_dtoa_r+0xe8>
80005912:	fa ea 00 08 	ld.d	r10,sp[8]
80005916:	30 08       	mov	r8,0
80005918:	fa eb 00 3c 	st.d	sp[60],r10
8000591c:	30 09       	mov	r9,0
8000591e:	e0 a0 14 e6 	rcall	800082ea <__avr32_f64_cmp_eq>
80005922:	c1 00       	breq	80005942 <_dtoa_r+0xee>
80005924:	30 18       	mov	r8,1
80005926:	41 5a       	lddsp	r10,sp[0x54]
80005928:	95 08       	st.w	r10[0x0],r8
8000592a:	fe cc c6 a6 	sub	r12,pc,-14682
8000592e:	41 29       	lddsp	r9,sp[0x48]
80005930:	f8 08 00 08 	add	r8,r12,r8
80005934:	58 09       	cp.w	r9,0
80005936:	e0 80 05 7a 	breq	8000642a <_dtoa_r+0xbd6>
8000593a:	12 95       	mov	r5,r9
8000593c:	8b 08       	st.w	r5[0x0],r8
8000593e:	e0 8f 05 76 	bral	8000642a <_dtoa_r+0xbd6>
80005942:	fa c8 ff 9c 	sub	r8,sp,-100
80005946:	fa c9 ff a0 	sub	r9,sp,-96
8000594a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000594e:	0e 9c       	mov	r12,r7
80005950:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005954:	e0 a0 0c b4 	rcall	800072bc <__d2b>
80005958:	18 93       	mov	r3,r12
8000595a:	58 05       	cp.w	r5,0
8000595c:	c0 d0       	breq	80005976 <_dtoa_r+0x122>
8000595e:	fa ea 00 3c 	ld.d	r10,sp[60]
80005962:	30 04       	mov	r4,0
80005964:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005968:	ea c5 03 ff 	sub	r5,r5,1023
8000596c:	10 9b       	mov	r11,r8
8000596e:	51 74       	stdsp	sp[0x5c],r4
80005970:	ea 1b 3f f0 	orh	r11,0x3ff0
80005974:	c2 58       	rjmp	800059be <_dtoa_r+0x16a>
80005976:	41 88       	lddsp	r8,sp[0x60]
80005978:	41 9c       	lddsp	r12,sp[0x64]
8000597a:	10 0c       	add	r12,r8
8000597c:	f8 c5 fb ce 	sub	r5,r12,-1074
80005980:	e0 45 00 20 	cp.w	r5,32
80005984:	e0 8a 00 0e 	brle	800059a0 <_dtoa_r+0x14c>
80005988:	f8 cc fb ee 	sub	r12,r12,-1042
8000598c:	40 3b       	lddsp	r11,sp[0xc]
8000598e:	ea 08 11 40 	rsub	r8,r5,64
80005992:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005996:	ec 08 09 46 	lsl	r6,r6,r8
8000599a:	0c 4c       	or	r12,r6
8000599c:	c0 78       	rjmp	800059aa <_dtoa_r+0x156>
8000599e:	d7 03       	nop
800059a0:	ea 0c 11 20 	rsub	r12,r5,32
800059a4:	40 3a       	lddsp	r10,sp[0xc]
800059a6:	f4 0c 09 4c 	lsl	r12,r10,r12
800059aa:	e0 a0 14 2c 	rcall	80008202 <__avr32_u32_to_f64>
800059ae:	fc 18 fe 10 	movh	r8,0xfe10
800059b2:	30 19       	mov	r9,1
800059b4:	ea c5 04 33 	sub	r5,r5,1075
800059b8:	f0 0b 00 0b 	add	r11,r8,r11
800059bc:	51 79       	stdsp	sp[0x5c],r9
800059be:	30 08       	mov	r8,0
800059c0:	fc 19 3f f8 	movh	r9,0x3ff8
800059c4:	e0 a0 12 b4 	rcall	80007f2c <__avr32_f64_sub>
800059c8:	e0 68 43 61 	mov	r8,17249
800059cc:	ea 18 63 6f 	orh	r8,0x636f
800059d0:	e0 69 87 a7 	mov	r9,34727
800059d4:	ea 19 3f d2 	orh	r9,0x3fd2
800059d8:	e0 a0 11 be 	rcall	80007d54 <__avr32_f64_mul>
800059dc:	e0 68 c8 b3 	mov	r8,51379
800059e0:	ea 18 8b 60 	orh	r8,0x8b60
800059e4:	e0 69 8a 28 	mov	r9,35368
800059e8:	ea 19 3f c6 	orh	r9,0x3fc6
800059ec:	e0 a0 13 6e 	rcall	800080c8 <__avr32_f64_add>
800059f0:	0a 9c       	mov	r12,r5
800059f2:	14 90       	mov	r0,r10
800059f4:	16 91       	mov	r1,r11
800059f6:	e0 a0 14 0a 	rcall	8000820a <__avr32_s32_to_f64>
800059fa:	e0 68 79 fb 	mov	r8,31227
800059fe:	ea 18 50 9f 	orh	r8,0x509f
80005a02:	e0 69 44 13 	mov	r9,17427
80005a06:	ea 19 3f d3 	orh	r9,0x3fd3
80005a0a:	e0 a0 11 a5 	rcall	80007d54 <__avr32_f64_mul>
80005a0e:	14 98       	mov	r8,r10
80005a10:	16 99       	mov	r9,r11
80005a12:	00 9a       	mov	r10,r0
80005a14:	02 9b       	mov	r11,r1
80005a16:	e0 a0 13 59 	rcall	800080c8 <__avr32_f64_add>
80005a1a:	14 90       	mov	r0,r10
80005a1c:	16 91       	mov	r1,r11
80005a1e:	e0 a0 13 df 	rcall	800081dc <__avr32_f64_to_s32>
80005a22:	30 08       	mov	r8,0
80005a24:	18 96       	mov	r6,r12
80005a26:	30 09       	mov	r9,0
80005a28:	00 9a       	mov	r10,r0
80005a2a:	02 9b       	mov	r11,r1
80005a2c:	e0 a0 14 a6 	rcall	80008378 <__avr32_f64_cmp_lt>
80005a30:	c0 c0       	breq	80005a48 <_dtoa_r+0x1f4>
80005a32:	0c 9c       	mov	r12,r6
80005a34:	e0 a0 13 eb 	rcall	8000820a <__avr32_s32_to_f64>
80005a38:	14 98       	mov	r8,r10
80005a3a:	16 99       	mov	r9,r11
80005a3c:	00 9a       	mov	r10,r0
80005a3e:	02 9b       	mov	r11,r1
80005a40:	e0 a0 14 55 	rcall	800082ea <__avr32_f64_cmp_eq>
80005a44:	f7 b6 00 01 	subeq	r6,1
80005a48:	59 66       	cp.w	r6,22
80005a4a:	e0 88 00 05 	brls	80005a54 <_dtoa_r+0x200>
80005a4e:	30 18       	mov	r8,1
80005a50:	51 48       	stdsp	sp[0x50],r8
80005a52:	c1 38       	rjmp	80005a78 <_dtoa_r+0x224>
80005a54:	fe c8 c5 f0 	sub	r8,pc,-14864
80005a58:	fa ea 00 3c 	ld.d	r10,sp[60]
80005a5c:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005a60:	e0 a0 14 8c 	rcall	80008378 <__avr32_f64_cmp_lt>
80005a64:	f9 b4 00 00 	moveq	r4,0
80005a68:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005a6c:	f7 b6 01 01 	subne	r6,1
80005a70:	f9 bc 01 00 	movne	r12,0
80005a74:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005a78:	41 90       	lddsp	r0,sp[0x64]
80005a7a:	20 10       	sub	r0,1
80005a7c:	0a 10       	sub	r0,r5
80005a7e:	c0 46       	brmi	80005a86 <_dtoa_r+0x232>
80005a80:	50 40       	stdsp	sp[0x10],r0
80005a82:	30 00       	mov	r0,0
80005a84:	c0 48       	rjmp	80005a8c <_dtoa_r+0x238>
80005a86:	30 0b       	mov	r11,0
80005a88:	5c 30       	neg	r0
80005a8a:	50 4b       	stdsp	sp[0x10],r11
80005a8c:	ec 02 11 00 	rsub	r2,r6,0
80005a90:	58 06       	cp.w	r6,0
80005a92:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005a96:	f5 d6 e4 0a 	addge	r10,r10,r6
80005a9a:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005a9e:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005aa2:	f9 b2 04 00 	movge	r2,0
80005aa6:	e1 d6 e5 10 	sublt	r0,r0,r6
80005aaa:	f9 b9 05 00 	movlt	r9,0
80005aae:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005ab2:	40 c8       	lddsp	r8,sp[0x30]
80005ab4:	58 98       	cp.w	r8,9
80005ab6:	e0 8b 00 20 	brhi	80005af6 <_dtoa_r+0x2a2>
80005aba:	58 58       	cp.w	r8,5
80005abc:	f9 b4 0a 01 	movle	r4,1
80005ac0:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005ac4:	f7 b5 09 04 	subgt	r5,4
80005ac8:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005acc:	f9 b4 09 00 	movgt	r4,0
80005ad0:	40 cc       	lddsp	r12,sp[0x30]
80005ad2:	58 3c       	cp.w	r12,3
80005ad4:	c2 d0       	breq	80005b2e <_dtoa_r+0x2da>
80005ad6:	e0 89 00 05 	brgt	80005ae0 <_dtoa_r+0x28c>
80005ada:	58 2c       	cp.w	r12,2
80005adc:	c1 01       	brne	80005afc <_dtoa_r+0x2a8>
80005ade:	c1 88       	rjmp	80005b0e <_dtoa_r+0x2ba>
80005ae0:	40 cb       	lddsp	r11,sp[0x30]
80005ae2:	58 4b       	cp.w	r11,4
80005ae4:	c0 60       	breq	80005af0 <_dtoa_r+0x29c>
80005ae6:	58 5b       	cp.w	r11,5
80005ae8:	c0 a1       	brne	80005afc <_dtoa_r+0x2a8>
80005aea:	30 1a       	mov	r10,1
80005aec:	50 da       	stdsp	sp[0x34],r10
80005aee:	c2 28       	rjmp	80005b32 <_dtoa_r+0x2de>
80005af0:	30 19       	mov	r9,1
80005af2:	50 d9       	stdsp	sp[0x34],r9
80005af4:	c0 f8       	rjmp	80005b12 <_dtoa_r+0x2be>
80005af6:	30 08       	mov	r8,0
80005af8:	30 14       	mov	r4,1
80005afa:	50 c8       	stdsp	sp[0x30],r8
80005afc:	3f f5       	mov	r5,-1
80005afe:	30 1c       	mov	r12,1
80005b00:	30 0b       	mov	r11,0
80005b02:	50 95       	stdsp	sp[0x24],r5
80005b04:	50 dc       	stdsp	sp[0x34],r12
80005b06:	0a 91       	mov	r1,r5
80005b08:	31 28       	mov	r8,18
80005b0a:	50 eb       	stdsp	sp[0x38],r11
80005b0c:	c2 08       	rjmp	80005b4c <_dtoa_r+0x2f8>
80005b0e:	30 0a       	mov	r10,0
80005b10:	50 da       	stdsp	sp[0x34],r10
80005b12:	40 e9       	lddsp	r9,sp[0x38]
80005b14:	58 09       	cp.w	r9,0
80005b16:	e0 89 00 07 	brgt	80005b24 <_dtoa_r+0x2d0>
80005b1a:	30 18       	mov	r8,1
80005b1c:	50 98       	stdsp	sp[0x24],r8
80005b1e:	10 91       	mov	r1,r8
80005b20:	50 e8       	stdsp	sp[0x38],r8
80005b22:	c1 58       	rjmp	80005b4c <_dtoa_r+0x2f8>
80005b24:	40 e5       	lddsp	r5,sp[0x38]
80005b26:	50 95       	stdsp	sp[0x24],r5
80005b28:	0a 91       	mov	r1,r5
80005b2a:	0a 98       	mov	r8,r5
80005b2c:	c1 08       	rjmp	80005b4c <_dtoa_r+0x2f8>
80005b2e:	30 0c       	mov	r12,0
80005b30:	50 dc       	stdsp	sp[0x34],r12
80005b32:	40 eb       	lddsp	r11,sp[0x38]
80005b34:	ec 0b 00 0b 	add	r11,r6,r11
80005b38:	50 9b       	stdsp	sp[0x24],r11
80005b3a:	16 98       	mov	r8,r11
80005b3c:	2f f8       	sub	r8,-1
80005b3e:	58 08       	cp.w	r8,0
80005b40:	e0 89 00 05 	brgt	80005b4a <_dtoa_r+0x2f6>
80005b44:	10 91       	mov	r1,r8
80005b46:	30 18       	mov	r8,1
80005b48:	c0 28       	rjmp	80005b4c <_dtoa_r+0x2f8>
80005b4a:	10 91       	mov	r1,r8
80005b4c:	30 09       	mov	r9,0
80005b4e:	6e 9a       	ld.w	r10,r7[0x24]
80005b50:	95 19       	st.w	r10[0x4],r9
80005b52:	30 49       	mov	r9,4
80005b54:	c0 68       	rjmp	80005b60 <_dtoa_r+0x30c>
80005b56:	d7 03       	nop
80005b58:	6a 1a       	ld.w	r10,r5[0x4]
80005b5a:	a1 79       	lsl	r9,0x1
80005b5c:	2f fa       	sub	r10,-1
80005b5e:	8b 1a       	st.w	r5[0x4],r10
80005b60:	6e 95       	ld.w	r5,r7[0x24]
80005b62:	f2 ca ff ec 	sub	r10,r9,-20
80005b66:	10 3a       	cp.w	r10,r8
80005b68:	fe 98 ff f8 	brls	80005b58 <_dtoa_r+0x304>
80005b6c:	6a 1b       	ld.w	r11,r5[0x4]
80005b6e:	0e 9c       	mov	r12,r7
80005b70:	e0 a0 0b 6e 	rcall	8000724c <_Balloc>
80005b74:	58 e1       	cp.w	r1,14
80005b76:	5f 88       	srls	r8
80005b78:	8b 0c       	st.w	r5[0x0],r12
80005b7a:	f1 e4 00 04 	and	r4,r8,r4
80005b7e:	6e 98       	ld.w	r8,r7[0x24]
80005b80:	70 08       	ld.w	r8,r8[0x0]
80005b82:	50 88       	stdsp	sp[0x20],r8
80005b84:	e0 80 01 82 	breq	80005e88 <_dtoa_r+0x634>
80005b88:	58 06       	cp.w	r6,0
80005b8a:	e0 8a 00 43 	brle	80005c10 <_dtoa_r+0x3bc>
80005b8e:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005b92:	fe c8 c7 2e 	sub	r8,pc,-14546
80005b96:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005b9a:	fa e5 00 18 	st.d	sp[24],r4
80005b9e:	ec 04 14 04 	asr	r4,r6,0x4
80005ba2:	ed b4 00 04 	bld	r4,0x4
80005ba6:	c0 30       	breq	80005bac <_dtoa_r+0x358>
80005ba8:	30 25       	mov	r5,2
80005baa:	c1 08       	rjmp	80005bca <_dtoa_r+0x376>
80005bac:	fe c8 c6 80 	sub	r8,pc,-14720
80005bb0:	f0 e8 00 20 	ld.d	r8,r8[32]
80005bb4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005bb8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005bbc:	e0 a0 14 12 	rcall	800083e0 <__avr32_f64_div>
80005bc0:	30 35       	mov	r5,3
80005bc2:	14 98       	mov	r8,r10
80005bc4:	16 99       	mov	r9,r11
80005bc6:	fa e9 00 08 	st.d	sp[8],r8
80005bca:	fe cc c6 9e 	sub	r12,pc,-14690
80005bce:	50 a3       	stdsp	sp[0x28],r3
80005bd0:	0c 93       	mov	r3,r6
80005bd2:	18 96       	mov	r6,r12
80005bd4:	c0 f8       	rjmp	80005bf2 <_dtoa_r+0x39e>
80005bd6:	fa ea 00 18 	ld.d	r10,sp[24]
80005bda:	ed b4 00 00 	bld	r4,0x0
80005bde:	c0 81       	brne	80005bee <_dtoa_r+0x39a>
80005be0:	ec e8 00 00 	ld.d	r8,r6[0]
80005be4:	2f f5       	sub	r5,-1
80005be6:	e0 a0 10 b7 	rcall	80007d54 <__avr32_f64_mul>
80005bea:	fa eb 00 18 	st.d	sp[24],r10
80005bee:	a1 54       	asr	r4,0x1
80005bf0:	2f 86       	sub	r6,-8
80005bf2:	58 04       	cp.w	r4,0
80005bf4:	cf 11       	brne	80005bd6 <_dtoa_r+0x382>
80005bf6:	fa e8 00 18 	ld.d	r8,sp[24]
80005bfa:	fa ea 00 08 	ld.d	r10,sp[8]
80005bfe:	06 96       	mov	r6,r3
80005c00:	e0 a0 13 f0 	rcall	800083e0 <__avr32_f64_div>
80005c04:	40 a3       	lddsp	r3,sp[0x28]
80005c06:	14 98       	mov	r8,r10
80005c08:	16 99       	mov	r9,r11
80005c0a:	fa e9 00 08 	st.d	sp[8],r8
80005c0e:	c2 f8       	rjmp	80005c6c <_dtoa_r+0x418>
80005c10:	ec 08 11 00 	rsub	r8,r6,0
80005c14:	c0 31       	brne	80005c1a <_dtoa_r+0x3c6>
80005c16:	30 25       	mov	r5,2
80005c18:	c2 a8       	rjmp	80005c6c <_dtoa_r+0x418>
80005c1a:	fe cc c6 ee 	sub	r12,pc,-14610
80005c1e:	f0 04 14 04 	asr	r4,r8,0x4
80005c22:	50 1c       	stdsp	sp[0x4],r12
80005c24:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005c28:	fe c9 c7 c4 	sub	r9,pc,-14396
80005c2c:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c30:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005c34:	e0 a0 10 90 	rcall	80007d54 <__avr32_f64_mul>
80005c38:	40 1c       	lddsp	r12,sp[0x4]
80005c3a:	50 63       	stdsp	sp[0x18],r3
80005c3c:	30 25       	mov	r5,2
80005c3e:	0c 93       	mov	r3,r6
80005c40:	fa eb 00 08 	st.d	sp[8],r10
80005c44:	18 96       	mov	r6,r12
80005c46:	c0 f8       	rjmp	80005c64 <_dtoa_r+0x410>
80005c48:	fa ea 00 08 	ld.d	r10,sp[8]
80005c4c:	ed b4 00 00 	bld	r4,0x0
80005c50:	c0 81       	brne	80005c60 <_dtoa_r+0x40c>
80005c52:	ec e8 00 00 	ld.d	r8,r6[0]
80005c56:	2f f5       	sub	r5,-1
80005c58:	e0 a0 10 7e 	rcall	80007d54 <__avr32_f64_mul>
80005c5c:	fa eb 00 08 	st.d	sp[8],r10
80005c60:	a1 54       	asr	r4,0x1
80005c62:	2f 86       	sub	r6,-8
80005c64:	58 04       	cp.w	r4,0
80005c66:	cf 11       	brne	80005c48 <_dtoa_r+0x3f4>
80005c68:	06 96       	mov	r6,r3
80005c6a:	40 63       	lddsp	r3,sp[0x18]
80005c6c:	41 4a       	lddsp	r10,sp[0x50]
80005c6e:	58 0a       	cp.w	r10,0
80005c70:	c2 a0       	breq	80005cc4 <_dtoa_r+0x470>
80005c72:	fa e8 00 08 	ld.d	r8,sp[8]
80005c76:	58 01       	cp.w	r1,0
80005c78:	5f 94       	srgt	r4
80005c7a:	fa e9 00 18 	st.d	sp[24],r8
80005c7e:	30 08       	mov	r8,0
80005c80:	fc 19 3f f0 	movh	r9,0x3ff0
80005c84:	fa ea 00 18 	ld.d	r10,sp[24]
80005c88:	e0 a0 13 78 	rcall	80008378 <__avr32_f64_cmp_lt>
80005c8c:	f9 bc 00 00 	moveq	r12,0
80005c90:	f9 bc 01 01 	movne	r12,1
80005c94:	e9 ec 00 0c 	and	r12,r4,r12
80005c98:	c1 60       	breq	80005cc4 <_dtoa_r+0x470>
80005c9a:	40 98       	lddsp	r8,sp[0x24]
80005c9c:	58 08       	cp.w	r8,0
80005c9e:	e0 8a 00 f1 	brle	80005e80 <_dtoa_r+0x62c>
80005ca2:	30 08       	mov	r8,0
80005ca4:	fc 19 40 24 	movh	r9,0x4024
80005ca8:	ec c4 00 01 	sub	r4,r6,1
80005cac:	fa ea 00 18 	ld.d	r10,sp[24]
80005cb0:	2f f5       	sub	r5,-1
80005cb2:	50 64       	stdsp	sp[0x18],r4
80005cb4:	e0 a0 10 50 	rcall	80007d54 <__avr32_f64_mul>
80005cb8:	40 94       	lddsp	r4,sp[0x24]
80005cba:	14 98       	mov	r8,r10
80005cbc:	16 99       	mov	r9,r11
80005cbe:	fa e9 00 08 	st.d	sp[8],r8
80005cc2:	c0 38       	rjmp	80005cc8 <_dtoa_r+0x474>
80005cc4:	50 66       	stdsp	sp[0x18],r6
80005cc6:	02 94       	mov	r4,r1
80005cc8:	0a 9c       	mov	r12,r5
80005cca:	e0 a0 12 a0 	rcall	8000820a <__avr32_s32_to_f64>
80005cce:	fa e8 00 08 	ld.d	r8,sp[8]
80005cd2:	e0 a0 10 41 	rcall	80007d54 <__avr32_f64_mul>
80005cd6:	30 08       	mov	r8,0
80005cd8:	fc 19 40 1c 	movh	r9,0x401c
80005cdc:	e0 a0 11 f6 	rcall	800080c8 <__avr32_f64_add>
80005ce0:	14 98       	mov	r8,r10
80005ce2:	16 99       	mov	r9,r11
80005ce4:	fa e9 00 28 	st.d	sp[40],r8
80005ce8:	fc 18 fc c0 	movh	r8,0xfcc0
80005cec:	40 a5       	lddsp	r5,sp[0x28]
80005cee:	10 05       	add	r5,r8
80005cf0:	50 a5       	stdsp	sp[0x28],r5
80005cf2:	58 04       	cp.w	r4,0
80005cf4:	c2 11       	brne	80005d36 <_dtoa_r+0x4e2>
80005cf6:	fa ea 00 08 	ld.d	r10,sp[8]
80005cfa:	30 08       	mov	r8,0
80005cfc:	fc 19 40 14 	movh	r9,0x4014
80005d00:	e0 a0 11 16 	rcall	80007f2c <__avr32_f64_sub>
80005d04:	40 bc       	lddsp	r12,sp[0x2c]
80005d06:	fa eb 00 08 	st.d	sp[8],r10
80005d0a:	14 98       	mov	r8,r10
80005d0c:	16 99       	mov	r9,r11
80005d0e:	18 9a       	mov	r10,r12
80005d10:	0a 9b       	mov	r11,r5
80005d12:	e0 a0 13 33 	rcall	80008378 <__avr32_f64_cmp_lt>
80005d16:	e0 81 02 54 	brne	800061be <_dtoa_r+0x96a>
80005d1a:	0a 98       	mov	r8,r5
80005d1c:	40 b9       	lddsp	r9,sp[0x2c]
80005d1e:	ee 18 80 00 	eorh	r8,0x8000
80005d22:	fa ea 00 08 	ld.d	r10,sp[8]
80005d26:	10 95       	mov	r5,r8
80005d28:	12 98       	mov	r8,r9
80005d2a:	0a 99       	mov	r9,r5
80005d2c:	e0 a0 13 26 	rcall	80008378 <__avr32_f64_cmp_lt>
80005d30:	e0 81 02 3e 	brne	800061ac <_dtoa_r+0x958>
80005d34:	ca 68       	rjmp	80005e80 <_dtoa_r+0x62c>
80005d36:	fe c9 c8 d2 	sub	r9,pc,-14126
80005d3a:	e8 c8 00 01 	sub	r8,r4,1
80005d3e:	40 d5       	lddsp	r5,sp[0x34]
80005d40:	58 05       	cp.w	r5,0
80005d42:	c4 f0       	breq	80005de0 <_dtoa_r+0x58c>
80005d44:	30 0c       	mov	r12,0
80005d46:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005d4a:	51 3c       	stdsp	sp[0x4c],r12
80005d4c:	30 0a       	mov	r10,0
80005d4e:	fc 1b 3f e0 	movh	r11,0x3fe0
80005d52:	e0 a0 13 47 	rcall	800083e0 <__avr32_f64_div>
80005d56:	fa e8 00 28 	ld.d	r8,sp[40]
80005d5a:	40 85       	lddsp	r5,sp[0x20]
80005d5c:	e0 a0 10 e8 	rcall	80007f2c <__avr32_f64_sub>
80005d60:	fa eb 00 28 	st.d	sp[40],r10
80005d64:	fa ea 00 08 	ld.d	r10,sp[8]
80005d68:	e0 a0 12 3a 	rcall	800081dc <__avr32_f64_to_s32>
80005d6c:	51 6c       	stdsp	sp[0x58],r12
80005d6e:	e0 a0 12 4e 	rcall	8000820a <__avr32_s32_to_f64>
80005d72:	14 98       	mov	r8,r10
80005d74:	16 99       	mov	r9,r11
80005d76:	fa ea 00 08 	ld.d	r10,sp[8]
80005d7a:	e0 a0 10 d9 	rcall	80007f2c <__avr32_f64_sub>
80005d7e:	fa eb 00 08 	st.d	sp[8],r10
80005d82:	41 68       	lddsp	r8,sp[0x58]
80005d84:	2d 08       	sub	r8,-48
80005d86:	0a c8       	st.b	r5++,r8
80005d88:	41 39       	lddsp	r9,sp[0x4c]
80005d8a:	2f f9       	sub	r9,-1
80005d8c:	51 39       	stdsp	sp[0x4c],r9
80005d8e:	fa e8 00 28 	ld.d	r8,sp[40]
80005d92:	e0 a0 12 f3 	rcall	80008378 <__avr32_f64_cmp_lt>
80005d96:	e0 81 03 39 	brne	80006408 <_dtoa_r+0xbb4>
80005d9a:	fa e8 00 08 	ld.d	r8,sp[8]
80005d9e:	30 0a       	mov	r10,0
80005da0:	fc 1b 3f f0 	movh	r11,0x3ff0
80005da4:	e0 a0 10 c4 	rcall	80007f2c <__avr32_f64_sub>
80005da8:	fa e8 00 28 	ld.d	r8,sp[40]
80005dac:	e0 a0 12 e6 	rcall	80008378 <__avr32_f64_cmp_lt>
80005db0:	fa ea 00 28 	ld.d	r10,sp[40]
80005db4:	30 08       	mov	r8,0
80005db6:	fc 19 40 24 	movh	r9,0x4024
80005dba:	e0 81 00 da 	brne	80005f6e <_dtoa_r+0x71a>
80005dbe:	41 3c       	lddsp	r12,sp[0x4c]
80005dc0:	08 3c       	cp.w	r12,r4
80005dc2:	c5 f4       	brge	80005e80 <_dtoa_r+0x62c>
80005dc4:	e0 a0 0f c8 	rcall	80007d54 <__avr32_f64_mul>
80005dc8:	30 08       	mov	r8,0
80005dca:	fa eb 00 28 	st.d	sp[40],r10
80005dce:	fc 19 40 24 	movh	r9,0x4024
80005dd2:	fa ea 00 08 	ld.d	r10,sp[8]
80005dd6:	e0 a0 0f bf 	rcall	80007d54 <__avr32_f64_mul>
80005dda:	fa eb 00 08 	st.d	sp[8],r10
80005dde:	cc 3b       	rjmp	80005d64 <_dtoa_r+0x510>
80005de0:	40 85       	lddsp	r5,sp[0x20]
80005de2:	08 05       	add	r5,r4
80005de4:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005de8:	51 35       	stdsp	sp[0x4c],r5
80005dea:	fa e8 00 28 	ld.d	r8,sp[40]
80005dee:	40 85       	lddsp	r5,sp[0x20]
80005df0:	e0 a0 0f b2 	rcall	80007d54 <__avr32_f64_mul>
80005df4:	fa eb 00 28 	st.d	sp[40],r10
80005df8:	fa ea 00 08 	ld.d	r10,sp[8]
80005dfc:	e0 a0 11 f0 	rcall	800081dc <__avr32_f64_to_s32>
80005e00:	51 6c       	stdsp	sp[0x58],r12
80005e02:	e0 a0 12 04 	rcall	8000820a <__avr32_s32_to_f64>
80005e06:	14 98       	mov	r8,r10
80005e08:	16 99       	mov	r9,r11
80005e0a:	fa ea 00 08 	ld.d	r10,sp[8]
80005e0e:	e0 a0 10 8f 	rcall	80007f2c <__avr32_f64_sub>
80005e12:	fa eb 00 08 	st.d	sp[8],r10
80005e16:	41 68       	lddsp	r8,sp[0x58]
80005e18:	2d 08       	sub	r8,-48
80005e1a:	0a c8       	st.b	r5++,r8
80005e1c:	41 3c       	lddsp	r12,sp[0x4c]
80005e1e:	18 35       	cp.w	r5,r12
80005e20:	c2 81       	brne	80005e70 <_dtoa_r+0x61c>
80005e22:	30 08       	mov	r8,0
80005e24:	fc 19 3f e0 	movh	r9,0x3fe0
80005e28:	fa ea 00 28 	ld.d	r10,sp[40]
80005e2c:	e0 a0 11 4e 	rcall	800080c8 <__avr32_f64_add>
80005e30:	40 85       	lddsp	r5,sp[0x20]
80005e32:	fa e8 00 08 	ld.d	r8,sp[8]
80005e36:	08 05       	add	r5,r4
80005e38:	e0 a0 12 a0 	rcall	80008378 <__avr32_f64_cmp_lt>
80005e3c:	e0 81 00 99 	brne	80005f6e <_dtoa_r+0x71a>
80005e40:	fa e8 00 28 	ld.d	r8,sp[40]
80005e44:	30 0a       	mov	r10,0
80005e46:	fc 1b 3f e0 	movh	r11,0x3fe0
80005e4a:	e0 a0 10 71 	rcall	80007f2c <__avr32_f64_sub>
80005e4e:	14 98       	mov	r8,r10
80005e50:	16 99       	mov	r9,r11
80005e52:	fa ea 00 08 	ld.d	r10,sp[8]
80005e56:	e0 a0 12 91 	rcall	80008378 <__avr32_f64_cmp_lt>
80005e5a:	c1 30       	breq	80005e80 <_dtoa_r+0x62c>
80005e5c:	33 09       	mov	r9,48
80005e5e:	0a 98       	mov	r8,r5
80005e60:	11 7a       	ld.ub	r10,--r8
80005e62:	f2 0a 18 00 	cp.b	r10,r9
80005e66:	e0 81 02 d1 	brne	80006408 <_dtoa_r+0xbb4>
80005e6a:	10 95       	mov	r5,r8
80005e6c:	cf 9b       	rjmp	80005e5e <_dtoa_r+0x60a>
80005e6e:	d7 03       	nop
80005e70:	30 08       	mov	r8,0
80005e72:	fc 19 40 24 	movh	r9,0x4024
80005e76:	e0 a0 0f 6f 	rcall	80007d54 <__avr32_f64_mul>
80005e7a:	fa eb 00 08 	st.d	sp[8],r10
80005e7e:	cb db       	rjmp	80005df8 <_dtoa_r+0x5a4>
80005e80:	fa ea 00 3c 	ld.d	r10,sp[60]
80005e84:	fa eb 00 08 	st.d	sp[8],r10
80005e88:	58 e6       	cp.w	r6,14
80005e8a:	5f ab       	srle	r11
80005e8c:	41 8a       	lddsp	r10,sp[0x60]
80005e8e:	30 08       	mov	r8,0
80005e90:	f4 09 11 ff 	rsub	r9,r10,-1
80005e94:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80005e98:	f0 09 18 00 	cp.b	r9,r8
80005e9c:	e0 80 00 82 	breq	80005fa0 <_dtoa_r+0x74c>
80005ea0:	40 ea       	lddsp	r10,sp[0x38]
80005ea2:	58 01       	cp.w	r1,0
80005ea4:	5f a9       	srle	r9
80005ea6:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80005eaa:	fe ca ca 46 	sub	r10,pc,-13754
80005eae:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80005eb2:	fa e5 00 10 	st.d	sp[16],r4
80005eb6:	f0 09 18 00 	cp.b	r9,r8
80005eba:	c1 40       	breq	80005ee2 <_dtoa_r+0x68e>
80005ebc:	58 01       	cp.w	r1,0
80005ebe:	e0 81 01 77 	brne	800061ac <_dtoa_r+0x958>
80005ec2:	30 08       	mov	r8,0
80005ec4:	fc 19 40 14 	movh	r9,0x4014
80005ec8:	08 9a       	mov	r10,r4
80005eca:	0a 9b       	mov	r11,r5
80005ecc:	e0 a0 0f 44 	rcall	80007d54 <__avr32_f64_mul>
80005ed0:	fa e8 00 08 	ld.d	r8,sp[8]
80005ed4:	e0 a0 12 1e 	rcall	80008310 <__avr32_f64_cmp_ge>
80005ed8:	e0 81 01 6a 	brne	800061ac <_dtoa_r+0x958>
80005edc:	02 92       	mov	r2,r1
80005ede:	e0 8f 01 72 	bral	800061c2 <_dtoa_r+0x96e>
80005ee2:	40 85       	lddsp	r5,sp[0x20]
80005ee4:	30 14       	mov	r4,1
80005ee6:	fa e8 00 10 	ld.d	r8,sp[16]
80005eea:	fa ea 00 08 	ld.d	r10,sp[8]
80005eee:	e0 a0 12 79 	rcall	800083e0 <__avr32_f64_div>
80005ef2:	e0 a0 11 75 	rcall	800081dc <__avr32_f64_to_s32>
80005ef6:	18 92       	mov	r2,r12
80005ef8:	e0 a0 11 89 	rcall	8000820a <__avr32_s32_to_f64>
80005efc:	fa e8 00 10 	ld.d	r8,sp[16]
80005f00:	e0 a0 0f 2a 	rcall	80007d54 <__avr32_f64_mul>
80005f04:	14 98       	mov	r8,r10
80005f06:	16 99       	mov	r9,r11
80005f08:	fa ea 00 08 	ld.d	r10,sp[8]
80005f0c:	e0 a0 10 10 	rcall	80007f2c <__avr32_f64_sub>
80005f10:	fa eb 00 08 	st.d	sp[8],r10
80005f14:	e4 c8 ff d0 	sub	r8,r2,-48
80005f18:	0a c8       	st.b	r5++,r8
80005f1a:	fc 19 40 24 	movh	r9,0x4024
80005f1e:	30 08       	mov	r8,0
80005f20:	02 34       	cp.w	r4,r1
80005f22:	c3 31       	brne	80005f88 <_dtoa_r+0x734>
80005f24:	fa e8 00 08 	ld.d	r8,sp[8]
80005f28:	e0 a0 10 d0 	rcall	800080c8 <__avr32_f64_add>
80005f2c:	16 91       	mov	r1,r11
80005f2e:	14 90       	mov	r0,r10
80005f30:	14 98       	mov	r8,r10
80005f32:	02 99       	mov	r9,r1
80005f34:	fa ea 00 10 	ld.d	r10,sp[16]
80005f38:	e0 a0 12 20 	rcall	80008378 <__avr32_f64_cmp_lt>
80005f3c:	c1 a1       	brne	80005f70 <_dtoa_r+0x71c>
80005f3e:	fa e8 00 10 	ld.d	r8,sp[16]
80005f42:	00 9a       	mov	r10,r0
80005f44:	02 9b       	mov	r11,r1
80005f46:	e0 a0 11 d2 	rcall	800082ea <__avr32_f64_cmp_eq>
80005f4a:	e0 80 02 5e 	breq	80006406 <_dtoa_r+0xbb2>
80005f4e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80005f52:	c0 f1       	brne	80005f70 <_dtoa_r+0x71c>
80005f54:	e0 8f 02 59 	bral	80006406 <_dtoa_r+0xbb2>
80005f58:	40 8a       	lddsp	r10,sp[0x20]
80005f5a:	14 38       	cp.w	r8,r10
80005f5c:	c0 30       	breq	80005f62 <_dtoa_r+0x70e>
80005f5e:	10 95       	mov	r5,r8
80005f60:	c0 98       	rjmp	80005f72 <_dtoa_r+0x71e>
80005f62:	33 08       	mov	r8,48
80005f64:	40 89       	lddsp	r9,sp[0x20]
80005f66:	2f f6       	sub	r6,-1
80005f68:	b2 88       	st.b	r9[0x0],r8
80005f6a:	40 88       	lddsp	r8,sp[0x20]
80005f6c:	c0 88       	rjmp	80005f7c <_dtoa_r+0x728>
80005f6e:	40 66       	lddsp	r6,sp[0x18]
80005f70:	33 99       	mov	r9,57
80005f72:	0a 98       	mov	r8,r5
80005f74:	11 7a       	ld.ub	r10,--r8
80005f76:	f2 0a 18 00 	cp.b	r10,r9
80005f7a:	ce f0       	breq	80005f58 <_dtoa_r+0x704>
80005f7c:	50 66       	stdsp	sp[0x18],r6
80005f7e:	11 89       	ld.ub	r9,r8[0x0]
80005f80:	2f f9       	sub	r9,-1
80005f82:	b0 89       	st.b	r8[0x0],r9
80005f84:	e0 8f 02 42 	bral	80006408 <_dtoa_r+0xbb4>
80005f88:	e0 a0 0e e6 	rcall	80007d54 <__avr32_f64_mul>
80005f8c:	2f f4       	sub	r4,-1
80005f8e:	fa eb 00 08 	st.d	sp[8],r10
80005f92:	30 08       	mov	r8,0
80005f94:	30 09       	mov	r9,0
80005f96:	e0 a0 11 aa 	rcall	800082ea <__avr32_f64_cmp_eq>
80005f9a:	ca 60       	breq	80005ee6 <_dtoa_r+0x692>
80005f9c:	e0 8f 02 35 	bral	80006406 <_dtoa_r+0xbb2>
80005fa0:	40 d8       	lddsp	r8,sp[0x34]
80005fa2:	58 08       	cp.w	r8,0
80005fa4:	c0 51       	brne	80005fae <_dtoa_r+0x75a>
80005fa6:	04 98       	mov	r8,r2
80005fa8:	00 95       	mov	r5,r0
80005faa:	40 d4       	lddsp	r4,sp[0x34]
80005fac:	c3 78       	rjmp	8000601a <_dtoa_r+0x7c6>
80005fae:	40 c5       	lddsp	r5,sp[0x30]
80005fb0:	58 15       	cp.w	r5,1
80005fb2:	e0 89 00 0f 	brgt	80005fd0 <_dtoa_r+0x77c>
80005fb6:	41 74       	lddsp	r4,sp[0x5c]
80005fb8:	58 04       	cp.w	r4,0
80005fba:	c0 40       	breq	80005fc2 <_dtoa_r+0x76e>
80005fbc:	f4 c9 fb cd 	sub	r9,r10,-1075
80005fc0:	c0 48       	rjmp	80005fc8 <_dtoa_r+0x774>
80005fc2:	41 99       	lddsp	r9,sp[0x64]
80005fc4:	f2 09 11 36 	rsub	r9,r9,54
80005fc8:	04 98       	mov	r8,r2
80005fca:	00 95       	mov	r5,r0
80005fcc:	c1 c8       	rjmp	80006004 <_dtoa_r+0x7b0>
80005fce:	d7 03       	nop
80005fd0:	e2 c8 00 01 	sub	r8,r1,1
80005fd4:	58 01       	cp.w	r1,0
80005fd6:	e0 05 17 40 	movge	r5,r0
80005fda:	e2 09 17 40 	movge	r9,r1
80005fde:	e1 d1 e5 15 	sublt	r5,r0,r1
80005fe2:	f9 b9 05 00 	movlt	r9,0
80005fe6:	10 32       	cp.w	r2,r8
80005fe8:	e5 d8 e4 18 	subge	r8,r2,r8
80005fec:	f1 d2 e5 18 	sublt	r8,r8,r2
80005ff0:	e5 d8 e5 02 	addlt	r2,r2,r8
80005ff4:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80005ff8:	f9 d8 e5 0c 	addlt	r12,r12,r8
80005ffc:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006000:	f9 b8 05 00 	movlt	r8,0
80006004:	40 4b       	lddsp	r11,sp[0x10]
80006006:	12 0b       	add	r11,r9
80006008:	50 08       	stdsp	sp[0x0],r8
8000600a:	50 4b       	stdsp	sp[0x10],r11
8000600c:	12 00       	add	r0,r9
8000600e:	30 1b       	mov	r11,1
80006010:	0e 9c       	mov	r12,r7
80006012:	e0 a0 0a d1 	rcall	800075b4 <__i2b>
80006016:	40 08       	lddsp	r8,sp[0x0]
80006018:	18 94       	mov	r4,r12
8000601a:	40 4a       	lddsp	r10,sp[0x10]
8000601c:	58 05       	cp.w	r5,0
8000601e:	5f 99       	srgt	r9
80006020:	58 0a       	cp.w	r10,0
80006022:	5f 9a       	srgt	r10
80006024:	f5 e9 00 09 	and	r9,r10,r9
80006028:	c0 80       	breq	80006038 <_dtoa_r+0x7e4>
8000602a:	40 4c       	lddsp	r12,sp[0x10]
8000602c:	f8 05 0d 49 	min	r9,r12,r5
80006030:	12 1c       	sub	r12,r9
80006032:	12 10       	sub	r0,r9
80006034:	50 4c       	stdsp	sp[0x10],r12
80006036:	12 15       	sub	r5,r9
80006038:	58 02       	cp.w	r2,0
8000603a:	e0 8a 00 27 	brle	80006088 <_dtoa_r+0x834>
8000603e:	40 db       	lddsp	r11,sp[0x34]
80006040:	58 0b       	cp.w	r11,0
80006042:	c1 d0       	breq	8000607c <_dtoa_r+0x828>
80006044:	58 08       	cp.w	r8,0
80006046:	e0 8a 00 17 	brle	80006074 <_dtoa_r+0x820>
8000604a:	10 9a       	mov	r10,r8
8000604c:	50 08       	stdsp	sp[0x0],r8
8000604e:	08 9b       	mov	r11,r4
80006050:	0e 9c       	mov	r12,r7
80006052:	e0 a0 0a f7 	rcall	80007640 <__pow5mult>
80006056:	06 9a       	mov	r10,r3
80006058:	18 9b       	mov	r11,r12
8000605a:	18 94       	mov	r4,r12
8000605c:	0e 9c       	mov	r12,r7
8000605e:	e0 a0 0a 2b 	rcall	800074b4 <__multiply>
80006062:	18 99       	mov	r9,r12
80006064:	06 9b       	mov	r11,r3
80006066:	50 19       	stdsp	sp[0x4],r9
80006068:	0e 9c       	mov	r12,r7
8000606a:	e0 a0 08 d7 	rcall	80007218 <_Bfree>
8000606e:	40 19       	lddsp	r9,sp[0x4]
80006070:	40 08       	lddsp	r8,sp[0x0]
80006072:	12 93       	mov	r3,r9
80006074:	e4 08 01 0a 	sub	r10,r2,r8
80006078:	c0 80       	breq	80006088 <_dtoa_r+0x834>
8000607a:	c0 28       	rjmp	8000607e <_dtoa_r+0x82a>
8000607c:	04 9a       	mov	r10,r2
8000607e:	06 9b       	mov	r11,r3
80006080:	0e 9c       	mov	r12,r7
80006082:	e0 a0 0a df 	rcall	80007640 <__pow5mult>
80006086:	18 93       	mov	r3,r12
80006088:	30 1b       	mov	r11,1
8000608a:	0e 9c       	mov	r12,r7
8000608c:	e0 a0 0a 94 	rcall	800075b4 <__i2b>
80006090:	41 1a       	lddsp	r10,sp[0x44]
80006092:	18 92       	mov	r2,r12
80006094:	58 0a       	cp.w	r10,0
80006096:	e0 8a 00 07 	brle	800060a4 <_dtoa_r+0x850>
8000609a:	18 9b       	mov	r11,r12
8000609c:	0e 9c       	mov	r12,r7
8000609e:	e0 a0 0a d1 	rcall	80007640 <__pow5mult>
800060a2:	18 92       	mov	r2,r12
800060a4:	40 c9       	lddsp	r9,sp[0x30]
800060a6:	58 19       	cp.w	r9,1
800060a8:	e0 89 00 14 	brgt	800060d0 <_dtoa_r+0x87c>
800060ac:	40 38       	lddsp	r8,sp[0xc]
800060ae:	58 08       	cp.w	r8,0
800060b0:	c1 01       	brne	800060d0 <_dtoa_r+0x87c>
800060b2:	40 29       	lddsp	r9,sp[0x8]
800060b4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800060b8:	c0 c1       	brne	800060d0 <_dtoa_r+0x87c>
800060ba:	12 98       	mov	r8,r9
800060bc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800060c0:	c0 80       	breq	800060d0 <_dtoa_r+0x87c>
800060c2:	40 4c       	lddsp	r12,sp[0x10]
800060c4:	30 1b       	mov	r11,1
800060c6:	2f fc       	sub	r12,-1
800060c8:	2f f0       	sub	r0,-1
800060ca:	50 4c       	stdsp	sp[0x10],r12
800060cc:	50 6b       	stdsp	sp[0x18],r11
800060ce:	c0 38       	rjmp	800060d4 <_dtoa_r+0x880>
800060d0:	30 0a       	mov	r10,0
800060d2:	50 6a       	stdsp	sp[0x18],r10
800060d4:	41 19       	lddsp	r9,sp[0x44]
800060d6:	58 09       	cp.w	r9,0
800060d8:	c0 31       	brne	800060de <_dtoa_r+0x88a>
800060da:	30 1c       	mov	r12,1
800060dc:	c0 98       	rjmp	800060ee <_dtoa_r+0x89a>
800060de:	64 48       	ld.w	r8,r2[0x10]
800060e0:	2f c8       	sub	r8,-4
800060e2:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800060e6:	e0 a0 08 08 	rcall	800070f6 <__hi0bits>
800060ea:	f8 0c 11 20 	rsub	r12,r12,32
800060ee:	40 4b       	lddsp	r11,sp[0x10]
800060f0:	f8 0b 00 08 	add	r8,r12,r11
800060f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800060f8:	c0 c0       	breq	80006110 <_dtoa_r+0x8bc>
800060fa:	f0 08 11 20 	rsub	r8,r8,32
800060fe:	58 48       	cp.w	r8,4
80006100:	e0 8a 00 06 	brle	8000610c <_dtoa_r+0x8b8>
80006104:	20 48       	sub	r8,4
80006106:	10 0b       	add	r11,r8
80006108:	50 4b       	stdsp	sp[0x10],r11
8000610a:	c0 78       	rjmp	80006118 <_dtoa_r+0x8c4>
8000610c:	58 48       	cp.w	r8,4
8000610e:	c0 70       	breq	8000611c <_dtoa_r+0x8c8>
80006110:	40 4a       	lddsp	r10,sp[0x10]
80006112:	2e 48       	sub	r8,-28
80006114:	10 0a       	add	r10,r8
80006116:	50 4a       	stdsp	sp[0x10],r10
80006118:	10 00       	add	r0,r8
8000611a:	10 05       	add	r5,r8
8000611c:	58 00       	cp.w	r0,0
8000611e:	e0 8a 00 08 	brle	8000612e <_dtoa_r+0x8da>
80006122:	06 9b       	mov	r11,r3
80006124:	00 9a       	mov	r10,r0
80006126:	0e 9c       	mov	r12,r7
80006128:	e0 a0 09 82 	rcall	8000742c <__lshift>
8000612c:	18 93       	mov	r3,r12
8000612e:	40 49       	lddsp	r9,sp[0x10]
80006130:	58 09       	cp.w	r9,0
80006132:	e0 8a 00 08 	brle	80006142 <_dtoa_r+0x8ee>
80006136:	04 9b       	mov	r11,r2
80006138:	12 9a       	mov	r10,r9
8000613a:	0e 9c       	mov	r12,r7
8000613c:	e0 a0 09 78 	rcall	8000742c <__lshift>
80006140:	18 92       	mov	r2,r12
80006142:	41 48       	lddsp	r8,sp[0x50]
80006144:	58 08       	cp.w	r8,0
80006146:	c1 b0       	breq	8000617c <_dtoa_r+0x928>
80006148:	04 9b       	mov	r11,r2
8000614a:	06 9c       	mov	r12,r3
8000614c:	e0 a0 08 4c 	rcall	800071e4 <__mcmp>
80006150:	c1 64       	brge	8000617c <_dtoa_r+0x928>
80006152:	06 9b       	mov	r11,r3
80006154:	30 09       	mov	r9,0
80006156:	30 aa       	mov	r10,10
80006158:	0e 9c       	mov	r12,r7
8000615a:	e0 a0 0a 35 	rcall	800075c4 <__multadd>
8000615e:	20 16       	sub	r6,1
80006160:	18 93       	mov	r3,r12
80006162:	40 dc       	lddsp	r12,sp[0x34]
80006164:	58 0c       	cp.w	r12,0
80006166:	c0 31       	brne	8000616c <_dtoa_r+0x918>
80006168:	40 91       	lddsp	r1,sp[0x24]
8000616a:	c0 98       	rjmp	8000617c <_dtoa_r+0x928>
8000616c:	08 9b       	mov	r11,r4
8000616e:	40 91       	lddsp	r1,sp[0x24]
80006170:	30 09       	mov	r9,0
80006172:	30 aa       	mov	r10,10
80006174:	0e 9c       	mov	r12,r7
80006176:	e0 a0 0a 27 	rcall	800075c4 <__multadd>
8000617a:	18 94       	mov	r4,r12
8000617c:	58 01       	cp.w	r1,0
8000617e:	5f a9       	srle	r9
80006180:	40 cb       	lddsp	r11,sp[0x30]
80006182:	58 2b       	cp.w	r11,2
80006184:	5f 98       	srgt	r8
80006186:	f3 e8 00 08 	and	r8,r9,r8
8000618a:	c2 50       	breq	800061d4 <_dtoa_r+0x980>
8000618c:	58 01       	cp.w	r1,0
8000618e:	c1 11       	brne	800061b0 <_dtoa_r+0x95c>
80006190:	04 9b       	mov	r11,r2
80006192:	02 99       	mov	r9,r1
80006194:	30 5a       	mov	r10,5
80006196:	0e 9c       	mov	r12,r7
80006198:	e0 a0 0a 16 	rcall	800075c4 <__multadd>
8000619c:	18 92       	mov	r2,r12
8000619e:	18 9b       	mov	r11,r12
800061a0:	06 9c       	mov	r12,r3
800061a2:	e0 a0 08 21 	rcall	800071e4 <__mcmp>
800061a6:	e0 89 00 0f 	brgt	800061c4 <_dtoa_r+0x970>
800061aa:	c0 38       	rjmp	800061b0 <_dtoa_r+0x95c>
800061ac:	30 02       	mov	r2,0
800061ae:	04 94       	mov	r4,r2
800061b0:	40 ea       	lddsp	r10,sp[0x38]
800061b2:	30 09       	mov	r9,0
800061b4:	5c da       	com	r10
800061b6:	40 85       	lddsp	r5,sp[0x20]
800061b8:	50 6a       	stdsp	sp[0x18],r10
800061ba:	50 49       	stdsp	sp[0x10],r9
800061bc:	c0 f9       	rjmp	800063da <_dtoa_r+0xb86>
800061be:	08 92       	mov	r2,r4
800061c0:	40 66       	lddsp	r6,sp[0x18]
800061c2:	04 94       	mov	r4,r2
800061c4:	2f f6       	sub	r6,-1
800061c6:	50 66       	stdsp	sp[0x18],r6
800061c8:	33 18       	mov	r8,49
800061ca:	40 85       	lddsp	r5,sp[0x20]
800061cc:	0a c8       	st.b	r5++,r8
800061ce:	30 08       	mov	r8,0
800061d0:	50 48       	stdsp	sp[0x10],r8
800061d2:	c0 49       	rjmp	800063da <_dtoa_r+0xb86>
800061d4:	40 dc       	lddsp	r12,sp[0x34]
800061d6:	58 0c       	cp.w	r12,0
800061d8:	e0 80 00 b5 	breq	80006342 <_dtoa_r+0xaee>
800061dc:	58 05       	cp.w	r5,0
800061de:	e0 8a 00 08 	brle	800061ee <_dtoa_r+0x99a>
800061e2:	08 9b       	mov	r11,r4
800061e4:	0a 9a       	mov	r10,r5
800061e6:	0e 9c       	mov	r12,r7
800061e8:	e0 a0 09 22 	rcall	8000742c <__lshift>
800061ec:	18 94       	mov	r4,r12
800061ee:	40 6b       	lddsp	r11,sp[0x18]
800061f0:	58 0b       	cp.w	r11,0
800061f2:	c0 31       	brne	800061f8 <_dtoa_r+0x9a4>
800061f4:	08 9c       	mov	r12,r4
800061f6:	c1 38       	rjmp	8000621c <_dtoa_r+0x9c8>
800061f8:	68 1b       	ld.w	r11,r4[0x4]
800061fa:	0e 9c       	mov	r12,r7
800061fc:	e0 a0 08 28 	rcall	8000724c <_Balloc>
80006200:	68 4a       	ld.w	r10,r4[0x10]
80006202:	18 95       	mov	r5,r12
80006204:	e8 cb ff f4 	sub	r11,r4,-12
80006208:	2f ea       	sub	r10,-2
8000620a:	2f 4c       	sub	r12,-12
8000620c:	a3 6a       	lsl	r10,0x2
8000620e:	fe b0 e8 3f 	rcall	8000328c <memcpy>
80006212:	0a 9b       	mov	r11,r5
80006214:	30 1a       	mov	r10,1
80006216:	0e 9c       	mov	r12,r7
80006218:	e0 a0 09 0a 	rcall	8000742c <__lshift>
8000621c:	50 44       	stdsp	sp[0x10],r4
8000621e:	40 3a       	lddsp	r10,sp[0xc]
80006220:	30 19       	mov	r9,1
80006222:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006226:	18 94       	mov	r4,r12
80006228:	50 da       	stdsp	sp[0x34],r10
8000622a:	40 85       	lddsp	r5,sp[0x20]
8000622c:	50 99       	stdsp	sp[0x24],r9
8000622e:	50 26       	stdsp	sp[0x8],r6
80006230:	50 e1       	stdsp	sp[0x38],r1
80006232:	04 9b       	mov	r11,r2
80006234:	06 9c       	mov	r12,r3
80006236:	fe b0 fa 7f 	rcall	80005734 <quorem>
8000623a:	40 4b       	lddsp	r11,sp[0x10]
8000623c:	f8 c0 ff d0 	sub	r0,r12,-48
80006240:	06 9c       	mov	r12,r3
80006242:	e0 a0 07 d1 	rcall	800071e4 <__mcmp>
80006246:	08 9a       	mov	r10,r4
80006248:	50 6c       	stdsp	sp[0x18],r12
8000624a:	04 9b       	mov	r11,r2
8000624c:	0e 9c       	mov	r12,r7
8000624e:	e0 a0 08 87 	rcall	8000735c <__mdiff>
80006252:	18 91       	mov	r1,r12
80006254:	78 38       	ld.w	r8,r12[0xc]
80006256:	58 08       	cp.w	r8,0
80006258:	c0 30       	breq	8000625e <_dtoa_r+0xa0a>
8000625a:	30 16       	mov	r6,1
8000625c:	c0 68       	rjmp	80006268 <_dtoa_r+0xa14>
8000625e:	18 9b       	mov	r11,r12
80006260:	06 9c       	mov	r12,r3
80006262:	e0 a0 07 c1 	rcall	800071e4 <__mcmp>
80006266:	18 96       	mov	r6,r12
80006268:	0e 9c       	mov	r12,r7
8000626a:	02 9b       	mov	r11,r1
8000626c:	e0 a0 07 d6 	rcall	80007218 <_Bfree>
80006270:	40 cc       	lddsp	r12,sp[0x30]
80006272:	ed ec 10 08 	or	r8,r6,r12
80006276:	c0 d1       	brne	80006290 <_dtoa_r+0xa3c>
80006278:	40 db       	lddsp	r11,sp[0x34]
8000627a:	58 0b       	cp.w	r11,0
8000627c:	c0 a1       	brne	80006290 <_dtoa_r+0xa3c>
8000627e:	40 26       	lddsp	r6,sp[0x8]
80006280:	e0 40 00 39 	cp.w	r0,57
80006284:	c3 00       	breq	800062e4 <_dtoa_r+0xa90>
80006286:	40 6a       	lddsp	r10,sp[0x18]
80006288:	58 0a       	cp.w	r10,0
8000628a:	e0 89 00 24 	brgt	800062d2 <_dtoa_r+0xa7e>
8000628e:	c2 f8       	rjmp	800062ec <_dtoa_r+0xa98>
80006290:	40 69       	lddsp	r9,sp[0x18]
80006292:	58 09       	cp.w	r9,0
80006294:	c0 85       	brlt	800062a4 <_dtoa_r+0xa50>
80006296:	12 98       	mov	r8,r9
80006298:	40 cc       	lddsp	r12,sp[0x30]
8000629a:	18 48       	or	r8,r12
8000629c:	c1 d1       	brne	800062d6 <_dtoa_r+0xa82>
8000629e:	40 db       	lddsp	r11,sp[0x34]
800062a0:	58 0b       	cp.w	r11,0
800062a2:	c1 a1       	brne	800062d6 <_dtoa_r+0xa82>
800062a4:	0c 99       	mov	r9,r6
800062a6:	40 26       	lddsp	r6,sp[0x8]
800062a8:	58 09       	cp.w	r9,0
800062aa:	e0 8a 00 21 	brle	800062ec <_dtoa_r+0xa98>
800062ae:	06 9b       	mov	r11,r3
800062b0:	30 1a       	mov	r10,1
800062b2:	0e 9c       	mov	r12,r7
800062b4:	e0 a0 08 bc 	rcall	8000742c <__lshift>
800062b8:	04 9b       	mov	r11,r2
800062ba:	18 93       	mov	r3,r12
800062bc:	e0 a0 07 94 	rcall	800071e4 <__mcmp>
800062c0:	e0 89 00 06 	brgt	800062cc <_dtoa_r+0xa78>
800062c4:	c1 41       	brne	800062ec <_dtoa_r+0xa98>
800062c6:	ed b0 00 00 	bld	r0,0x0
800062ca:	c1 11       	brne	800062ec <_dtoa_r+0xa98>
800062cc:	e0 40 00 39 	cp.w	r0,57
800062d0:	c0 a0       	breq	800062e4 <_dtoa_r+0xa90>
800062d2:	2f f0       	sub	r0,-1
800062d4:	c0 c8       	rjmp	800062ec <_dtoa_r+0xa98>
800062d6:	58 06       	cp.w	r6,0
800062d8:	e0 8a 00 0c 	brle	800062f0 <_dtoa_r+0xa9c>
800062dc:	40 26       	lddsp	r6,sp[0x8]
800062de:	e0 40 00 39 	cp.w	r0,57
800062e2:	c0 41       	brne	800062ea <_dtoa_r+0xa96>
800062e4:	33 98       	mov	r8,57
800062e6:	0a c8       	st.b	r5++,r8
800062e8:	c6 78       	rjmp	800063b6 <_dtoa_r+0xb62>
800062ea:	2f f0       	sub	r0,-1
800062ec:	0a c0       	st.b	r5++,r0
800062ee:	c7 58       	rjmp	800063d8 <_dtoa_r+0xb84>
800062f0:	0a c0       	st.b	r5++,r0
800062f2:	40 9a       	lddsp	r10,sp[0x24]
800062f4:	40 e9       	lddsp	r9,sp[0x38]
800062f6:	12 3a       	cp.w	r10,r9
800062f8:	c4 30       	breq	8000637e <_dtoa_r+0xb2a>
800062fa:	06 9b       	mov	r11,r3
800062fc:	30 09       	mov	r9,0
800062fe:	30 aa       	mov	r10,10
80006300:	0e 9c       	mov	r12,r7
80006302:	e0 a0 09 61 	rcall	800075c4 <__multadd>
80006306:	40 48       	lddsp	r8,sp[0x10]
80006308:	18 93       	mov	r3,r12
8000630a:	08 38       	cp.w	r8,r4
8000630c:	c0 91       	brne	8000631e <_dtoa_r+0xaca>
8000630e:	10 9b       	mov	r11,r8
80006310:	30 09       	mov	r9,0
80006312:	30 aa       	mov	r10,10
80006314:	0e 9c       	mov	r12,r7
80006316:	e0 a0 09 57 	rcall	800075c4 <__multadd>
8000631a:	50 4c       	stdsp	sp[0x10],r12
8000631c:	c0 e8       	rjmp	80006338 <_dtoa_r+0xae4>
8000631e:	40 4b       	lddsp	r11,sp[0x10]
80006320:	30 09       	mov	r9,0
80006322:	30 aa       	mov	r10,10
80006324:	0e 9c       	mov	r12,r7
80006326:	e0 a0 09 4f 	rcall	800075c4 <__multadd>
8000632a:	08 9b       	mov	r11,r4
8000632c:	50 4c       	stdsp	sp[0x10],r12
8000632e:	30 09       	mov	r9,0
80006330:	30 aa       	mov	r10,10
80006332:	0e 9c       	mov	r12,r7
80006334:	e0 a0 09 48 	rcall	800075c4 <__multadd>
80006338:	18 94       	mov	r4,r12
8000633a:	40 9c       	lddsp	r12,sp[0x24]
8000633c:	2f fc       	sub	r12,-1
8000633e:	50 9c       	stdsp	sp[0x24],r12
80006340:	c7 9b       	rjmp	80006232 <_dtoa_r+0x9de>
80006342:	30 18       	mov	r8,1
80006344:	06 90       	mov	r0,r3
80006346:	40 85       	lddsp	r5,sp[0x20]
80006348:	08 93       	mov	r3,r4
8000634a:	0c 94       	mov	r4,r6
8000634c:	10 96       	mov	r6,r8
8000634e:	04 9b       	mov	r11,r2
80006350:	00 9c       	mov	r12,r0
80006352:	fe b0 f9 f1 	rcall	80005734 <quorem>
80006356:	2d 0c       	sub	r12,-48
80006358:	0a cc       	st.b	r5++,r12
8000635a:	02 36       	cp.w	r6,r1
8000635c:	c0 a4       	brge	80006370 <_dtoa_r+0xb1c>
8000635e:	00 9b       	mov	r11,r0
80006360:	30 09       	mov	r9,0
80006362:	30 aa       	mov	r10,10
80006364:	0e 9c       	mov	r12,r7
80006366:	2f f6       	sub	r6,-1
80006368:	e0 a0 09 2e 	rcall	800075c4 <__multadd>
8000636c:	18 90       	mov	r0,r12
8000636e:	cf 0b       	rjmp	8000634e <_dtoa_r+0xafa>
80006370:	08 96       	mov	r6,r4
80006372:	30 0b       	mov	r11,0
80006374:	06 94       	mov	r4,r3
80006376:	50 4b       	stdsp	sp[0x10],r11
80006378:	00 93       	mov	r3,r0
8000637a:	18 90       	mov	r0,r12
8000637c:	c0 28       	rjmp	80006380 <_dtoa_r+0xb2c>
8000637e:	40 26       	lddsp	r6,sp[0x8]
80006380:	06 9b       	mov	r11,r3
80006382:	30 1a       	mov	r10,1
80006384:	0e 9c       	mov	r12,r7
80006386:	e0 a0 08 53 	rcall	8000742c <__lshift>
8000638a:	04 9b       	mov	r11,r2
8000638c:	18 93       	mov	r3,r12
8000638e:	e0 a0 07 2b 	rcall	800071e4 <__mcmp>
80006392:	e0 89 00 12 	brgt	800063b6 <_dtoa_r+0xb62>
80006396:	c1 b1       	brne	800063cc <_dtoa_r+0xb78>
80006398:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000639c:	c0 d1       	brne	800063b6 <_dtoa_r+0xb62>
8000639e:	c1 78       	rjmp	800063cc <_dtoa_r+0xb78>
800063a0:	40 89       	lddsp	r9,sp[0x20]
800063a2:	12 38       	cp.w	r8,r9
800063a4:	c0 30       	breq	800063aa <_dtoa_r+0xb56>
800063a6:	10 95       	mov	r5,r8
800063a8:	c0 88       	rjmp	800063b8 <_dtoa_r+0xb64>
800063aa:	2f f6       	sub	r6,-1
800063ac:	50 66       	stdsp	sp[0x18],r6
800063ae:	33 18       	mov	r8,49
800063b0:	40 8c       	lddsp	r12,sp[0x20]
800063b2:	b8 88       	st.b	r12[0x0],r8
800063b4:	c1 38       	rjmp	800063da <_dtoa_r+0xb86>
800063b6:	33 9a       	mov	r10,57
800063b8:	0a 98       	mov	r8,r5
800063ba:	11 79       	ld.ub	r9,--r8
800063bc:	f4 09 18 00 	cp.b	r9,r10
800063c0:	cf 00       	breq	800063a0 <_dtoa_r+0xb4c>
800063c2:	2f f9       	sub	r9,-1
800063c4:	b0 89       	st.b	r8[0x0],r9
800063c6:	c0 98       	rjmp	800063d8 <_dtoa_r+0xb84>
800063c8:	10 95       	mov	r5,r8
800063ca:	c0 28       	rjmp	800063ce <_dtoa_r+0xb7a>
800063cc:	33 09       	mov	r9,48
800063ce:	0a 98       	mov	r8,r5
800063d0:	11 7a       	ld.ub	r10,--r8
800063d2:	f2 0a 18 00 	cp.b	r10,r9
800063d6:	cf 90       	breq	800063c8 <_dtoa_r+0xb74>
800063d8:	50 66       	stdsp	sp[0x18],r6
800063da:	04 9b       	mov	r11,r2
800063dc:	0e 9c       	mov	r12,r7
800063de:	e0 a0 07 1d 	rcall	80007218 <_Bfree>
800063e2:	58 04       	cp.w	r4,0
800063e4:	c1 20       	breq	80006408 <_dtoa_r+0xbb4>
800063e6:	40 4b       	lddsp	r11,sp[0x10]
800063e8:	08 3b       	cp.w	r11,r4
800063ea:	5f 19       	srne	r9
800063ec:	58 0b       	cp.w	r11,0
800063ee:	5f 18       	srne	r8
800063f0:	f3 e8 00 08 	and	r8,r9,r8
800063f4:	c0 40       	breq	800063fc <_dtoa_r+0xba8>
800063f6:	0e 9c       	mov	r12,r7
800063f8:	e0 a0 07 10 	rcall	80007218 <_Bfree>
800063fc:	08 9b       	mov	r11,r4
800063fe:	0e 9c       	mov	r12,r7
80006400:	e0 a0 07 0c 	rcall	80007218 <_Bfree>
80006404:	c0 28       	rjmp	80006408 <_dtoa_r+0xbb4>
80006406:	50 66       	stdsp	sp[0x18],r6
80006408:	0e 9c       	mov	r12,r7
8000640a:	06 9b       	mov	r11,r3
8000640c:	e0 a0 07 06 	rcall	80007218 <_Bfree>
80006410:	30 08       	mov	r8,0
80006412:	aa 88       	st.b	r5[0x0],r8
80006414:	40 68       	lddsp	r8,sp[0x18]
80006416:	41 5a       	lddsp	r10,sp[0x54]
80006418:	2f f8       	sub	r8,-1
8000641a:	41 29       	lddsp	r9,sp[0x48]
8000641c:	95 08       	st.w	r10[0x0],r8
8000641e:	40 8c       	lddsp	r12,sp[0x20]
80006420:	58 09       	cp.w	r9,0
80006422:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006426:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000642a:	2e 6d       	sub	sp,-104
8000642c:	d8 32       	popm	r0-r7,pc
8000642e:	d7 03       	nop

80006430 <_fflush_r>:
80006430:	d4 21       	pushm	r4-r7,lr
80006432:	16 97       	mov	r7,r11
80006434:	18 96       	mov	r6,r12
80006436:	76 48       	ld.w	r8,r11[0x10]
80006438:	58 08       	cp.w	r8,0
8000643a:	c7 f0       	breq	80006538 <_fflush_r+0x108>
8000643c:	58 0c       	cp.w	r12,0
8000643e:	c0 50       	breq	80006448 <_fflush_r+0x18>
80006440:	78 68       	ld.w	r8,r12[0x18]
80006442:	58 08       	cp.w	r8,0
80006444:	c0 21       	brne	80006448 <_fflush_r+0x18>
80006446:	cc dc       	rcall	800065e0 <__sinit>
80006448:	fe c8 d0 90 	sub	r8,pc,-12144
8000644c:	10 37       	cp.w	r7,r8
8000644e:	c0 31       	brne	80006454 <_fflush_r+0x24>
80006450:	6c 07       	ld.w	r7,r6[0x0]
80006452:	c0 c8       	rjmp	8000646a <_fflush_r+0x3a>
80006454:	fe c8 d0 7c 	sub	r8,pc,-12164
80006458:	10 37       	cp.w	r7,r8
8000645a:	c0 31       	brne	80006460 <_fflush_r+0x30>
8000645c:	6c 17       	ld.w	r7,r6[0x4]
8000645e:	c0 68       	rjmp	8000646a <_fflush_r+0x3a>
80006460:	fe c8 d0 68 	sub	r8,pc,-12184
80006464:	10 37       	cp.w	r7,r8
80006466:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000646a:	8e 6a       	ld.sh	r10,r7[0xc]
8000646c:	14 98       	mov	r8,r10
8000646e:	ed ba 00 03 	bld	r10,0x3
80006472:	c4 20       	breq	800064f6 <_fflush_r+0xc6>
80006474:	ab ba       	sbr	r10,0xb
80006476:	ae 6a       	st.h	r7[0xc],r10
80006478:	6e 18       	ld.w	r8,r7[0x4]
8000647a:	58 08       	cp.w	r8,0
8000647c:	e0 89 00 06 	brgt	80006488 <_fflush_r+0x58>
80006480:	6f 08       	ld.w	r8,r7[0x40]
80006482:	58 08       	cp.w	r8,0
80006484:	e0 8a 00 5a 	brle	80006538 <_fflush_r+0x108>
80006488:	6e b8       	ld.w	r8,r7[0x2c]
8000648a:	58 08       	cp.w	r8,0
8000648c:	c5 60       	breq	80006538 <_fflush_r+0x108>
8000648e:	e2 1a 10 00 	andl	r10,0x1000,COH
80006492:	c0 30       	breq	80006498 <_fflush_r+0x68>
80006494:	6f 55       	ld.w	r5,r7[0x54]
80006496:	c0 f8       	rjmp	800064b4 <_fflush_r+0x84>
80006498:	30 19       	mov	r9,1
8000649a:	6e 8b       	ld.w	r11,r7[0x20]
8000649c:	0c 9c       	mov	r12,r6
8000649e:	5d 18       	icall	r8
800064a0:	18 95       	mov	r5,r12
800064a2:	5b fc       	cp.w	r12,-1
800064a4:	c0 81       	brne	800064b4 <_fflush_r+0x84>
800064a6:	6c 38       	ld.w	r8,r6[0xc]
800064a8:	59 d8       	cp.w	r8,29
800064aa:	c4 70       	breq	80006538 <_fflush_r+0x108>
800064ac:	8e 68       	ld.sh	r8,r7[0xc]
800064ae:	a7 a8       	sbr	r8,0x6
800064b0:	ae 68       	st.h	r7[0xc],r8
800064b2:	d8 22       	popm	r4-r7,pc
800064b4:	8e 68       	ld.sh	r8,r7[0xc]
800064b6:	ed b8 00 02 	bld	r8,0x2
800064ba:	c0 91       	brne	800064cc <_fflush_r+0x9c>
800064bc:	6e 18       	ld.w	r8,r7[0x4]
800064be:	10 15       	sub	r5,r8
800064c0:	6e d8       	ld.w	r8,r7[0x34]
800064c2:	58 08       	cp.w	r8,0
800064c4:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800064c8:	eb d8 e1 15 	subne	r5,r5,r8
800064cc:	6e b8       	ld.w	r8,r7[0x2c]
800064ce:	0c 9c       	mov	r12,r6
800064d0:	30 09       	mov	r9,0
800064d2:	0a 9a       	mov	r10,r5
800064d4:	6e 8b       	ld.w	r11,r7[0x20]
800064d6:	5d 18       	icall	r8
800064d8:	8e 68       	ld.sh	r8,r7[0xc]
800064da:	0a 3c       	cp.w	r12,r5
800064dc:	c2 61       	brne	80006528 <_fflush_r+0xf8>
800064de:	ab d8       	cbr	r8,0xb
800064e0:	30 0c       	mov	r12,0
800064e2:	6e 49       	ld.w	r9,r7[0x10]
800064e4:	ae 68       	st.h	r7[0xc],r8
800064e6:	8f 1c       	st.w	r7[0x4],r12
800064e8:	8f 09       	st.w	r7[0x0],r9
800064ea:	ed b8 00 0c 	bld	r8,0xc
800064ee:	c2 51       	brne	80006538 <_fflush_r+0x108>
800064f0:	ef 45 00 54 	st.w	r7[84],r5
800064f4:	d8 22       	popm	r4-r7,pc
800064f6:	6e 45       	ld.w	r5,r7[0x10]
800064f8:	58 05       	cp.w	r5,0
800064fa:	c1 f0       	breq	80006538 <_fflush_r+0x108>
800064fc:	6e 04       	ld.w	r4,r7[0x0]
800064fe:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006502:	8f 05       	st.w	r7[0x0],r5
80006504:	f9 b8 01 00 	movne	r8,0
80006508:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000650c:	0a 14       	sub	r4,r5
8000650e:	8f 28       	st.w	r7[0x8],r8
80006510:	c1 18       	rjmp	80006532 <_fflush_r+0x102>
80006512:	08 99       	mov	r9,r4
80006514:	0a 9a       	mov	r10,r5
80006516:	6e a8       	ld.w	r8,r7[0x28]
80006518:	6e 8b       	ld.w	r11,r7[0x20]
8000651a:	0c 9c       	mov	r12,r6
8000651c:	5d 18       	icall	r8
8000651e:	18 14       	sub	r4,r12
80006520:	58 0c       	cp.w	r12,0
80006522:	e0 89 00 07 	brgt	80006530 <_fflush_r+0x100>
80006526:	8e 68       	ld.sh	r8,r7[0xc]
80006528:	a7 a8       	sbr	r8,0x6
8000652a:	3f fc       	mov	r12,-1
8000652c:	ae 68       	st.h	r7[0xc],r8
8000652e:	d8 22       	popm	r4-r7,pc
80006530:	18 05       	add	r5,r12
80006532:	58 04       	cp.w	r4,0
80006534:	fe 99 ff ef 	brgt	80006512 <_fflush_r+0xe2>
80006538:	d8 2a       	popm	r4-r7,pc,r12=0
8000653a:	d7 03       	nop

8000653c <__sfp_lock_acquire>:
8000653c:	5e fc       	retal	r12

8000653e <__sfp_lock_release>:
8000653e:	5e fc       	retal	r12

80006540 <_cleanup_r>:
80006540:	d4 01       	pushm	lr
80006542:	fe cb e8 6a 	sub	r11,pc,-6038
80006546:	e0 a0 02 fd 	rcall	80006b40 <_fwalk>
8000654a:	d8 02       	popm	pc

8000654c <__sfmoreglue>:
8000654c:	d4 21       	pushm	r4-r7,lr
8000654e:	16 95       	mov	r5,r11
80006550:	f6 06 10 5c 	mul	r6,r11,92
80006554:	ec cb ff f4 	sub	r11,r6,-12
80006558:	e0 a0 03 84 	rcall	80006c60 <_malloc_r>
8000655c:	18 97       	mov	r7,r12
8000655e:	c0 90       	breq	80006570 <__sfmoreglue+0x24>
80006560:	99 15       	st.w	r12[0x4],r5
80006562:	30 0b       	mov	r11,0
80006564:	2f 4c       	sub	r12,-12
80006566:	0c 9a       	mov	r10,r6
80006568:	8f 2c       	st.w	r7[0x8],r12
8000656a:	8f 0b       	st.w	r7[0x0],r11
8000656c:	e0 a0 05 bc 	rcall	800070e4 <memset>
80006570:	0e 9c       	mov	r12,r7
80006572:	d8 22       	popm	r4-r7,pc

80006574 <__sfp>:
80006574:	d4 21       	pushm	r4-r7,lr
80006576:	fe c8 d5 a6 	sub	r8,pc,-10842
8000657a:	18 96       	mov	r6,r12
8000657c:	70 07       	ld.w	r7,r8[0x0]
8000657e:	6e 68       	ld.w	r8,r7[0x18]
80006580:	58 08       	cp.w	r8,0
80006582:	c0 31       	brne	80006588 <__sfp+0x14>
80006584:	0e 9c       	mov	r12,r7
80006586:	c2 dc       	rcall	800065e0 <__sinit>
80006588:	ee c7 ff 28 	sub	r7,r7,-216
8000658c:	30 05       	mov	r5,0
8000658e:	6e 2c       	ld.w	r12,r7[0x8]
80006590:	6e 18       	ld.w	r8,r7[0x4]
80006592:	c0 68       	rjmp	8000659e <__sfp+0x2a>
80006594:	98 69       	ld.sh	r9,r12[0xc]
80006596:	ea 09 19 00 	cp.h	r9,r5
8000659a:	c1 10       	breq	800065bc <__sfp+0x48>
8000659c:	2a 4c       	sub	r12,-92
8000659e:	20 18       	sub	r8,1
800065a0:	cf a7       	brpl	80006594 <__sfp+0x20>
800065a2:	6e 08       	ld.w	r8,r7[0x0]
800065a4:	58 08       	cp.w	r8,0
800065a6:	c0 61       	brne	800065b2 <__sfp+0x3e>
800065a8:	30 4b       	mov	r11,4
800065aa:	0c 9c       	mov	r12,r6
800065ac:	cd 0f       	rcall	8000654c <__sfmoreglue>
800065ae:	8f 0c       	st.w	r7[0x0],r12
800065b0:	c0 30       	breq	800065b6 <__sfp+0x42>
800065b2:	6e 07       	ld.w	r7,r7[0x0]
800065b4:	ce db       	rjmp	8000658e <__sfp+0x1a>
800065b6:	30 c8       	mov	r8,12
800065b8:	8d 38       	st.w	r6[0xc],r8
800065ba:	d8 22       	popm	r4-r7,pc
800065bc:	30 08       	mov	r8,0
800065be:	f9 48 00 4c 	st.w	r12[76],r8
800065c2:	99 08       	st.w	r12[0x0],r8
800065c4:	99 28       	st.w	r12[0x8],r8
800065c6:	99 18       	st.w	r12[0x4],r8
800065c8:	99 48       	st.w	r12[0x10],r8
800065ca:	99 58       	st.w	r12[0x14],r8
800065cc:	99 68       	st.w	r12[0x18],r8
800065ce:	99 d8       	st.w	r12[0x34],r8
800065d0:	99 e8       	st.w	r12[0x38],r8
800065d2:	f9 48 00 48 	st.w	r12[72],r8
800065d6:	3f f8       	mov	r8,-1
800065d8:	b8 78       	st.h	r12[0xe],r8
800065da:	30 18       	mov	r8,1
800065dc:	b8 68       	st.h	r12[0xc],r8
800065de:	d8 22       	popm	r4-r7,pc

800065e0 <__sinit>:
800065e0:	d4 21       	pushm	r4-r7,lr
800065e2:	18 96       	mov	r6,r12
800065e4:	78 67       	ld.w	r7,r12[0x18]
800065e6:	58 07       	cp.w	r7,0
800065e8:	c4 91       	brne	8000667a <__sinit+0x9a>
800065ea:	fe c8 00 aa 	sub	r8,pc,170
800065ee:	30 15       	mov	r5,1
800065f0:	99 a8       	st.w	r12[0x28],r8
800065f2:	f9 47 00 d8 	st.w	r12[216],r7
800065f6:	f9 47 00 dc 	st.w	r12[220],r7
800065fa:	f9 47 00 e0 	st.w	r12[224],r7
800065fe:	99 65       	st.w	r12[0x18],r5
80006600:	cb af       	rcall	80006574 <__sfp>
80006602:	8d 0c       	st.w	r6[0x0],r12
80006604:	0c 9c       	mov	r12,r6
80006606:	cb 7f       	rcall	80006574 <__sfp>
80006608:	8d 1c       	st.w	r6[0x4],r12
8000660a:	0c 9c       	mov	r12,r6
8000660c:	cb 4f       	rcall	80006574 <__sfp>
8000660e:	6c 09       	ld.w	r9,r6[0x0]
80006610:	30 48       	mov	r8,4
80006612:	93 07       	st.w	r9[0x0],r7
80006614:	b2 68       	st.h	r9[0xc],r8
80006616:	93 17       	st.w	r9[0x4],r7
80006618:	93 27       	st.w	r9[0x8],r7
8000661a:	6c 18       	ld.w	r8,r6[0x4]
8000661c:	b2 77       	st.h	r9[0xe],r7
8000661e:	93 47       	st.w	r9[0x10],r7
80006620:	93 57       	st.w	r9[0x14],r7
80006622:	93 67       	st.w	r9[0x18],r7
80006624:	93 89       	st.w	r9[0x20],r9
80006626:	91 07       	st.w	r8[0x0],r7
80006628:	91 17       	st.w	r8[0x4],r7
8000662a:	91 27       	st.w	r8[0x8],r7
8000662c:	fe ce eb e4 	sub	lr,pc,-5148
80006630:	fe cb ec 14 	sub	r11,pc,-5100
80006634:	93 9e       	st.w	r9[0x24],lr
80006636:	93 ab       	st.w	r9[0x28],r11
80006638:	fe ca ec 3c 	sub	r10,pc,-5060
8000663c:	fe c4 ec 48 	sub	r4,pc,-5048
80006640:	93 ba       	st.w	r9[0x2c],r10
80006642:	93 c4       	st.w	r9[0x30],r4
80006644:	30 99       	mov	r9,9
80006646:	b0 69       	st.h	r8[0xc],r9
80006648:	b0 75       	st.h	r8[0xe],r5
8000664a:	91 c4       	st.w	r8[0x30],r4
8000664c:	91 47       	st.w	r8[0x10],r7
8000664e:	91 57       	st.w	r8[0x14],r7
80006650:	91 67       	st.w	r8[0x18],r7
80006652:	91 88       	st.w	r8[0x20],r8
80006654:	91 9e       	st.w	r8[0x24],lr
80006656:	91 ab       	st.w	r8[0x28],r11
80006658:	91 ba       	st.w	r8[0x2c],r10
8000665a:	8d 2c       	st.w	r6[0x8],r12
8000665c:	31 28       	mov	r8,18
8000665e:	99 07       	st.w	r12[0x0],r7
80006660:	b8 68       	st.h	r12[0xc],r8
80006662:	99 17       	st.w	r12[0x4],r7
80006664:	99 27       	st.w	r12[0x8],r7
80006666:	30 28       	mov	r8,2
80006668:	b8 78       	st.h	r12[0xe],r8
8000666a:	99 c4       	st.w	r12[0x30],r4
8000666c:	99 67       	st.w	r12[0x18],r7
8000666e:	99 9e       	st.w	r12[0x24],lr
80006670:	99 ab       	st.w	r12[0x28],r11
80006672:	99 ba       	st.w	r12[0x2c],r10
80006674:	99 47       	st.w	r12[0x10],r7
80006676:	99 57       	st.w	r12[0x14],r7
80006678:	99 8c       	st.w	r12[0x20],r12
8000667a:	d8 22       	popm	r4-r7,pc

8000667c <_malloc_trim_r>:
8000667c:	d4 21       	pushm	r4-r7,lr
8000667e:	16 95       	mov	r5,r11
80006680:	18 97       	mov	r7,r12
80006682:	e0 a0 05 38 	rcall	800070f2 <__malloc_lock>
80006686:	e0 64 01 08 	mov	r4,264
8000668a:	68 28       	ld.w	r8,r4[0x8]
8000668c:	70 16       	ld.w	r6,r8[0x4]
8000668e:	e0 16 ff fc 	andl	r6,0xfffc
80006692:	ec c8 ff 91 	sub	r8,r6,-111
80006696:	f0 05 01 05 	sub	r5,r8,r5
8000669a:	e0 15 ff 80 	andl	r5,0xff80
8000669e:	ea c5 00 80 	sub	r5,r5,128
800066a2:	e0 45 00 7f 	cp.w	r5,127
800066a6:	e0 8a 00 25 	brle	800066f0 <_malloc_trim_r+0x74>
800066aa:	30 0b       	mov	r11,0
800066ac:	0e 9c       	mov	r12,r7
800066ae:	e0 a0 09 93 	rcall	800079d4 <_sbrk_r>
800066b2:	68 28       	ld.w	r8,r4[0x8]
800066b4:	0c 08       	add	r8,r6
800066b6:	10 3c       	cp.w	r12,r8
800066b8:	c1 c1       	brne	800066f0 <_malloc_trim_r+0x74>
800066ba:	ea 0b 11 00 	rsub	r11,r5,0
800066be:	0e 9c       	mov	r12,r7
800066c0:	e0 a0 09 8a 	rcall	800079d4 <_sbrk_r>
800066c4:	5b fc       	cp.w	r12,-1
800066c6:	c1 91       	brne	800066f8 <_malloc_trim_r+0x7c>
800066c8:	30 0b       	mov	r11,0
800066ca:	0e 9c       	mov	r12,r7
800066cc:	e0 a0 09 84 	rcall	800079d4 <_sbrk_r>
800066d0:	68 28       	ld.w	r8,r4[0x8]
800066d2:	f8 08 01 09 	sub	r9,r12,r8
800066d6:	58 f9       	cp.w	r9,15
800066d8:	e0 8a 00 0c 	brle	800066f0 <_malloc_trim_r+0x74>
800066dc:	a1 a9       	sbr	r9,0x0
800066de:	91 19       	st.w	r8[0x4],r9
800066e0:	e0 68 05 14 	mov	r8,1300
800066e4:	70 09       	ld.w	r9,r8[0x0]
800066e6:	e0 68 06 38 	mov	r8,1592
800066ea:	f8 09 01 09 	sub	r9,r12,r9
800066ee:	91 09       	st.w	r8[0x0],r9
800066f0:	0e 9c       	mov	r12,r7
800066f2:	e0 a0 05 01 	rcall	800070f4 <__malloc_unlock>
800066f6:	d8 2a       	popm	r4-r7,pc,r12=0
800066f8:	68 28       	ld.w	r8,r4[0x8]
800066fa:	0a 16       	sub	r6,r5
800066fc:	a1 a6       	sbr	r6,0x0
800066fe:	91 16       	st.w	r8[0x4],r6
80006700:	e0 68 06 38 	mov	r8,1592
80006704:	70 09       	ld.w	r9,r8[0x0]
80006706:	0a 19       	sub	r9,r5
80006708:	0e 9c       	mov	r12,r7
8000670a:	91 09       	st.w	r8[0x0],r9
8000670c:	e0 a0 04 f4 	rcall	800070f4 <__malloc_unlock>
80006710:	da 2a       	popm	r4-r7,pc,r12=1
80006712:	d7 03       	nop

80006714 <_free_r>:
80006714:	d4 21       	pushm	r4-r7,lr
80006716:	16 96       	mov	r6,r11
80006718:	18 97       	mov	r7,r12
8000671a:	58 0b       	cp.w	r11,0
8000671c:	e0 80 00 c0 	breq	8000689c <_free_r+0x188>
80006720:	e0 a0 04 e9 	rcall	800070f2 <__malloc_lock>
80006724:	20 86       	sub	r6,8
80006726:	e0 6a 01 08 	mov	r10,264
8000672a:	6c 18       	ld.w	r8,r6[0x4]
8000672c:	74 2e       	ld.w	lr,r10[0x8]
8000672e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006732:	a1 c8       	cbr	r8,0x0
80006734:	ec 08 00 09 	add	r9,r6,r8
80006738:	72 1b       	ld.w	r11,r9[0x4]
8000673a:	e0 1b ff fc 	andl	r11,0xfffc
8000673e:	1c 39       	cp.w	r9,lr
80006740:	c1 e1       	brne	8000677c <_free_r+0x68>
80006742:	f6 08 00 08 	add	r8,r11,r8
80006746:	58 0c       	cp.w	r12,0
80006748:	c0 81       	brne	80006758 <_free_r+0x44>
8000674a:	6c 09       	ld.w	r9,r6[0x0]
8000674c:	12 16       	sub	r6,r9
8000674e:	12 08       	add	r8,r9
80006750:	6c 3b       	ld.w	r11,r6[0xc]
80006752:	6c 29       	ld.w	r9,r6[0x8]
80006754:	97 29       	st.w	r11[0x8],r9
80006756:	93 3b       	st.w	r9[0xc],r11
80006758:	10 99       	mov	r9,r8
8000675a:	95 26       	st.w	r10[0x8],r6
8000675c:	a1 a9       	sbr	r9,0x0
8000675e:	8d 19       	st.w	r6[0x4],r9
80006760:	e0 69 05 10 	mov	r9,1296
80006764:	72 09       	ld.w	r9,r9[0x0]
80006766:	12 38       	cp.w	r8,r9
80006768:	c0 63       	brcs	80006774 <_free_r+0x60>
8000676a:	e0 68 06 34 	mov	r8,1588
8000676e:	0e 9c       	mov	r12,r7
80006770:	70 0b       	ld.w	r11,r8[0x0]
80006772:	c8 5f       	rcall	8000667c <_malloc_trim_r>
80006774:	0e 9c       	mov	r12,r7
80006776:	e0 a0 04 bf 	rcall	800070f4 <__malloc_unlock>
8000677a:	d8 22       	popm	r4-r7,pc
8000677c:	93 1b       	st.w	r9[0x4],r11
8000677e:	58 0c       	cp.w	r12,0
80006780:	c0 30       	breq	80006786 <_free_r+0x72>
80006782:	30 0c       	mov	r12,0
80006784:	c1 08       	rjmp	800067a4 <_free_r+0x90>
80006786:	6c 0e       	ld.w	lr,r6[0x0]
80006788:	f4 c5 ff f8 	sub	r5,r10,-8
8000678c:	1c 16       	sub	r6,lr
8000678e:	1c 08       	add	r8,lr
80006790:	6c 2e       	ld.w	lr,r6[0x8]
80006792:	0a 3e       	cp.w	lr,r5
80006794:	f9 bc 00 01 	moveq	r12,1
80006798:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000679c:	eb fe 1a 02 	st.wne	r5[0x8],lr
800067a0:	fd f5 1a 03 	st.wne	lr[0xc],r5
800067a4:	f2 0b 00 0e 	add	lr,r9,r11
800067a8:	7c 1e       	ld.w	lr,lr[0x4]
800067aa:	ed be 00 00 	bld	lr,0x0
800067ae:	c1 40       	breq	800067d6 <_free_r+0xc2>
800067b0:	16 08       	add	r8,r11
800067b2:	58 0c       	cp.w	r12,0
800067b4:	c0 d1       	brne	800067ce <_free_r+0xba>
800067b6:	e0 6e 01 08 	mov	lr,264
800067ba:	72 2b       	ld.w	r11,r9[0x8]
800067bc:	2f 8e       	sub	lr,-8
800067be:	1c 3b       	cp.w	r11,lr
800067c0:	c0 71       	brne	800067ce <_free_r+0xba>
800067c2:	97 36       	st.w	r11[0xc],r6
800067c4:	97 26       	st.w	r11[0x8],r6
800067c6:	8d 2b       	st.w	r6[0x8],r11
800067c8:	8d 3b       	st.w	r6[0xc],r11
800067ca:	30 1c       	mov	r12,1
800067cc:	c0 58       	rjmp	800067d6 <_free_r+0xc2>
800067ce:	72 2b       	ld.w	r11,r9[0x8]
800067d0:	72 39       	ld.w	r9,r9[0xc]
800067d2:	93 2b       	st.w	r9[0x8],r11
800067d4:	97 39       	st.w	r11[0xc],r9
800067d6:	10 99       	mov	r9,r8
800067d8:	ec 08 09 08 	st.w	r6[r8],r8
800067dc:	a1 a9       	sbr	r9,0x0
800067de:	8d 19       	st.w	r6[0x4],r9
800067e0:	58 0c       	cp.w	r12,0
800067e2:	c5 a1       	brne	80006896 <_free_r+0x182>
800067e4:	e0 48 01 ff 	cp.w	r8,511
800067e8:	e0 8b 00 13 	brhi	8000680e <_free_r+0xfa>
800067ec:	a3 98       	lsr	r8,0x3
800067ee:	f4 08 00 39 	add	r9,r10,r8<<0x3
800067f2:	72 2b       	ld.w	r11,r9[0x8]
800067f4:	8d 39       	st.w	r6[0xc],r9
800067f6:	8d 2b       	st.w	r6[0x8],r11
800067f8:	97 36       	st.w	r11[0xc],r6
800067fa:	93 26       	st.w	r9[0x8],r6
800067fc:	a3 48       	asr	r8,0x2
800067fe:	74 19       	ld.w	r9,r10[0x4]
80006800:	30 1b       	mov	r11,1
80006802:	f6 08 09 48 	lsl	r8,r11,r8
80006806:	f3 e8 10 08 	or	r8,r9,r8
8000680a:	95 18       	st.w	r10[0x4],r8
8000680c:	c4 58       	rjmp	80006896 <_free_r+0x182>
8000680e:	f0 0b 16 09 	lsr	r11,r8,0x9
80006812:	58 4b       	cp.w	r11,4
80006814:	e0 8b 00 06 	brhi	80006820 <_free_r+0x10c>
80006818:	f0 0b 16 06 	lsr	r11,r8,0x6
8000681c:	2c 8b       	sub	r11,-56
8000681e:	c2 08       	rjmp	8000685e <_free_r+0x14a>
80006820:	59 4b       	cp.w	r11,20
80006822:	e0 8b 00 04 	brhi	8000682a <_free_r+0x116>
80006826:	2a 5b       	sub	r11,-91
80006828:	c1 b8       	rjmp	8000685e <_free_r+0x14a>
8000682a:	e0 4b 00 54 	cp.w	r11,84
8000682e:	e0 8b 00 06 	brhi	8000683a <_free_r+0x126>
80006832:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006836:	29 2b       	sub	r11,-110
80006838:	c1 38       	rjmp	8000685e <_free_r+0x14a>
8000683a:	e0 4b 01 54 	cp.w	r11,340
8000683e:	e0 8b 00 06 	brhi	8000684a <_free_r+0x136>
80006842:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006846:	28 9b       	sub	r11,-119
80006848:	c0 b8       	rjmp	8000685e <_free_r+0x14a>
8000684a:	e0 4b 05 54 	cp.w	r11,1364
8000684e:	e0 88 00 05 	brls	80006858 <_free_r+0x144>
80006852:	37 eb       	mov	r11,126
80006854:	c0 58       	rjmp	8000685e <_free_r+0x14a>
80006856:	d7 03       	nop
80006858:	f0 0b 16 12 	lsr	r11,r8,0x12
8000685c:	28 4b       	sub	r11,-124
8000685e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006862:	78 29       	ld.w	r9,r12[0x8]
80006864:	18 39       	cp.w	r9,r12
80006866:	c0 e1       	brne	80006882 <_free_r+0x16e>
80006868:	74 18       	ld.w	r8,r10[0x4]
8000686a:	a3 4b       	asr	r11,0x2
8000686c:	30 1c       	mov	r12,1
8000686e:	f8 0b 09 4b 	lsl	r11,r12,r11
80006872:	f1 eb 10 0b 	or	r11,r8,r11
80006876:	12 98       	mov	r8,r9
80006878:	95 1b       	st.w	r10[0x4],r11
8000687a:	c0 a8       	rjmp	8000688e <_free_r+0x17a>
8000687c:	72 29       	ld.w	r9,r9[0x8]
8000687e:	18 39       	cp.w	r9,r12
80006880:	c0 60       	breq	8000688c <_free_r+0x178>
80006882:	72 1a       	ld.w	r10,r9[0x4]
80006884:	e0 1a ff fc 	andl	r10,0xfffc
80006888:	14 38       	cp.w	r8,r10
8000688a:	cf 93       	brcs	8000687c <_free_r+0x168>
8000688c:	72 38       	ld.w	r8,r9[0xc]
8000688e:	8d 38       	st.w	r6[0xc],r8
80006890:	8d 29       	st.w	r6[0x8],r9
80006892:	93 36       	st.w	r9[0xc],r6
80006894:	91 26       	st.w	r8[0x8],r6
80006896:	0e 9c       	mov	r12,r7
80006898:	e0 a0 04 2e 	rcall	800070f4 <__malloc_unlock>
8000689c:	d8 22       	popm	r4-r7,pc
8000689e:	d7 03       	nop

800068a0 <__sfvwrite_r>:
800068a0:	d4 31       	pushm	r0-r7,lr
800068a2:	20 3d       	sub	sp,12
800068a4:	14 94       	mov	r4,r10
800068a6:	18 95       	mov	r5,r12
800068a8:	16 97       	mov	r7,r11
800068aa:	74 28       	ld.w	r8,r10[0x8]
800068ac:	58 08       	cp.w	r8,0
800068ae:	e0 80 01 45 	breq	80006b38 <__sfvwrite_r+0x298>
800068b2:	96 68       	ld.sh	r8,r11[0xc]
800068b4:	ed b8 00 03 	bld	r8,0x3
800068b8:	c0 41       	brne	800068c0 <__sfvwrite_r+0x20>
800068ba:	76 48       	ld.w	r8,r11[0x10]
800068bc:	58 08       	cp.w	r8,0
800068be:	c0 c1       	brne	800068d6 <__sfvwrite_r+0x36>
800068c0:	0e 9b       	mov	r11,r7
800068c2:	0a 9c       	mov	r12,r5
800068c4:	fe b0 f6 ca 	rcall	80005658 <__swsetup_r>
800068c8:	c0 70       	breq	800068d6 <__sfvwrite_r+0x36>
800068ca:	8e 68       	ld.sh	r8,r7[0xc]
800068cc:	a7 a8       	sbr	r8,0x6
800068ce:	ae 68       	st.h	r7[0xc],r8
800068d0:	30 98       	mov	r8,9
800068d2:	8b 38       	st.w	r5[0xc],r8
800068d4:	c3 09       	rjmp	80006b34 <__sfvwrite_r+0x294>
800068d6:	8e 63       	ld.sh	r3,r7[0xc]
800068d8:	68 00       	ld.w	r0,r4[0x0]
800068da:	06 96       	mov	r6,r3
800068dc:	e2 16 00 02 	andl	r6,0x2,COH
800068e0:	c2 10       	breq	80006922 <__sfvwrite_r+0x82>
800068e2:	30 03       	mov	r3,0
800068e4:	e0 62 04 00 	mov	r2,1024
800068e8:	06 96       	mov	r6,r3
800068ea:	c0 48       	rjmp	800068f2 <__sfvwrite_r+0x52>
800068ec:	60 03       	ld.w	r3,r0[0x0]
800068ee:	60 16       	ld.w	r6,r0[0x4]
800068f0:	2f 80       	sub	r0,-8
800068f2:	58 06       	cp.w	r6,0
800068f4:	cf c0       	breq	800068ec <__sfvwrite_r+0x4c>
800068f6:	e0 46 04 00 	cp.w	r6,1024
800068fa:	ec 09 17 80 	movls	r9,r6
800068fe:	e4 09 17 b0 	movhi	r9,r2
80006902:	06 9a       	mov	r10,r3
80006904:	6e a8       	ld.w	r8,r7[0x28]
80006906:	6e 8b       	ld.w	r11,r7[0x20]
80006908:	0a 9c       	mov	r12,r5
8000690a:	5d 18       	icall	r8
8000690c:	18 16       	sub	r6,r12
8000690e:	58 0c       	cp.w	r12,0
80006910:	e0 8a 01 0f 	brle	80006b2e <__sfvwrite_r+0x28e>
80006914:	68 28       	ld.w	r8,r4[0x8]
80006916:	18 18       	sub	r8,r12
80006918:	89 28       	st.w	r4[0x8],r8
8000691a:	e0 80 01 0f 	breq	80006b38 <__sfvwrite_r+0x298>
8000691e:	18 03       	add	r3,r12
80006920:	ce 9b       	rjmp	800068f2 <__sfvwrite_r+0x52>
80006922:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006926:	c0 70       	breq	80006934 <__sfvwrite_r+0x94>
80006928:	50 06       	stdsp	sp[0x0],r6
8000692a:	0c 93       	mov	r3,r6
8000692c:	0c 91       	mov	r1,r6
8000692e:	50 15       	stdsp	sp[0x4],r5
80006930:	08 92       	mov	r2,r4
80006932:	c9 e8       	rjmp	80006a6e <__sfvwrite_r+0x1ce>
80006934:	06 96       	mov	r6,r3
80006936:	08 91       	mov	r1,r4
80006938:	c0 48       	rjmp	80006940 <__sfvwrite_r+0xa0>
8000693a:	60 03       	ld.w	r3,r0[0x0]
8000693c:	60 16       	ld.w	r6,r0[0x4]
8000693e:	2f 80       	sub	r0,-8
80006940:	58 06       	cp.w	r6,0
80006942:	cf c0       	breq	8000693a <__sfvwrite_r+0x9a>
80006944:	8e 68       	ld.sh	r8,r7[0xc]
80006946:	6e 24       	ld.w	r4,r7[0x8]
80006948:	10 99       	mov	r9,r8
8000694a:	e2 19 02 00 	andl	r9,0x200,COH
8000694e:	c5 50       	breq	800069f8 <__sfvwrite_r+0x158>
80006950:	08 36       	cp.w	r6,r4
80006952:	c4 33       	brcs	800069d8 <__sfvwrite_r+0x138>
80006954:	10 99       	mov	r9,r8
80006956:	e2 19 04 80 	andl	r9,0x480,COH
8000695a:	c3 f0       	breq	800069d8 <__sfvwrite_r+0x138>
8000695c:	6e 4b       	ld.w	r11,r7[0x10]
8000695e:	6e 09       	ld.w	r9,r7[0x0]
80006960:	16 19       	sub	r9,r11
80006962:	50 09       	stdsp	sp[0x0],r9
80006964:	6e 59       	ld.w	r9,r7[0x14]
80006966:	10 9c       	mov	r12,r8
80006968:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000696c:	30 28       	mov	r8,2
8000696e:	f4 08 0c 08 	divs	r8,r10,r8
80006972:	fa e9 00 04 	st.d	sp[4],r8
80006976:	10 94       	mov	r4,r8
80006978:	40 09       	lddsp	r9,sp[0x0]
8000697a:	e2 1c 04 00 	andl	r12,0x400,COH
8000697e:	2f f9       	sub	r9,-1
80006980:	0c 09       	add	r9,r6
80006982:	12 38       	cp.w	r8,r9
80006984:	f2 04 17 30 	movlo	r4,r9
80006988:	58 0c       	cp.w	r12,0
8000698a:	c1 00       	breq	800069aa <__sfvwrite_r+0x10a>
8000698c:	08 9b       	mov	r11,r4
8000698e:	0a 9c       	mov	r12,r5
80006990:	c6 8d       	rcall	80006c60 <_malloc_r>
80006992:	18 92       	mov	r2,r12
80006994:	c1 40       	breq	800069bc <__sfvwrite_r+0x11c>
80006996:	40 0a       	lddsp	r10,sp[0x0]
80006998:	6e 4b       	ld.w	r11,r7[0x10]
8000699a:	fe b0 e4 79 	rcall	8000328c <memcpy>
8000699e:	8e 68       	ld.sh	r8,r7[0xc]
800069a0:	e0 18 fb 7f 	andl	r8,0xfb7f
800069a4:	a7 b8       	sbr	r8,0x7
800069a6:	ae 68       	st.h	r7[0xc],r8
800069a8:	c0 d8       	rjmp	800069c2 <__sfvwrite_r+0x122>
800069aa:	08 9a       	mov	r10,r4
800069ac:	0a 9c       	mov	r12,r5
800069ae:	e0 a0 06 8f 	rcall	800076cc <_realloc_r>
800069b2:	18 92       	mov	r2,r12
800069b4:	c0 71       	brne	800069c2 <__sfvwrite_r+0x122>
800069b6:	6e 4b       	ld.w	r11,r7[0x10]
800069b8:	0a 9c       	mov	r12,r5
800069ba:	ca de       	rcall	80006714 <_free_r>
800069bc:	30 c8       	mov	r8,12
800069be:	8b 38       	st.w	r5[0xc],r8
800069c0:	cb 78       	rjmp	80006b2e <__sfvwrite_r+0x28e>
800069c2:	40 0a       	lddsp	r10,sp[0x0]
800069c4:	40 09       	lddsp	r9,sp[0x0]
800069c6:	e8 0a 01 0a 	sub	r10,r4,r10
800069ca:	e4 09 00 08 	add	r8,r2,r9
800069ce:	8f 54       	st.w	r7[0x14],r4
800069d0:	8f 2a       	st.w	r7[0x8],r10
800069d2:	8f 08       	st.w	r7[0x0],r8
800069d4:	8f 42       	st.w	r7[0x10],r2
800069d6:	0c 94       	mov	r4,r6
800069d8:	08 36       	cp.w	r6,r4
800069da:	ec 04 17 30 	movlo	r4,r6
800069de:	06 9b       	mov	r11,r3
800069e0:	08 9a       	mov	r10,r4
800069e2:	6e 0c       	ld.w	r12,r7[0x0]
800069e4:	e0 a0 03 61 	rcall	800070a6 <memmove>
800069e8:	6e 08       	ld.w	r8,r7[0x0]
800069ea:	08 08       	add	r8,r4
800069ec:	8f 08       	st.w	r7[0x0],r8
800069ee:	6e 28       	ld.w	r8,r7[0x8]
800069f0:	08 18       	sub	r8,r4
800069f2:	0c 94       	mov	r4,r6
800069f4:	8f 28       	st.w	r7[0x8],r8
800069f6:	c3 08       	rjmp	80006a56 <__sfvwrite_r+0x1b6>
800069f8:	08 36       	cp.w	r6,r4
800069fa:	5f ba       	srhi	r10
800069fc:	6e 0c       	ld.w	r12,r7[0x0]
800069fe:	6e 48       	ld.w	r8,r7[0x10]
80006a00:	10 3c       	cp.w	r12,r8
80006a02:	5f b8       	srhi	r8
80006a04:	f5 e8 00 08 	and	r8,r10,r8
80006a08:	f2 08 18 00 	cp.b	r8,r9
80006a0c:	c0 e0       	breq	80006a28 <__sfvwrite_r+0x188>
80006a0e:	06 9b       	mov	r11,r3
80006a10:	08 9a       	mov	r10,r4
80006a12:	e0 a0 03 4a 	rcall	800070a6 <memmove>
80006a16:	6e 08       	ld.w	r8,r7[0x0]
80006a18:	08 08       	add	r8,r4
80006a1a:	0e 9b       	mov	r11,r7
80006a1c:	8f 08       	st.w	r7[0x0],r8
80006a1e:	0a 9c       	mov	r12,r5
80006a20:	fe b0 fd 08 	rcall	80006430 <_fflush_r>
80006a24:	c1 90       	breq	80006a56 <__sfvwrite_r+0x1b6>
80006a26:	c8 48       	rjmp	80006b2e <__sfvwrite_r+0x28e>
80006a28:	6e 59       	ld.w	r9,r7[0x14]
80006a2a:	12 36       	cp.w	r6,r9
80006a2c:	c0 a3       	brcs	80006a40 <__sfvwrite_r+0x1a0>
80006a2e:	6e a8       	ld.w	r8,r7[0x28]
80006a30:	06 9a       	mov	r10,r3
80006a32:	6e 8b       	ld.w	r11,r7[0x20]
80006a34:	0a 9c       	mov	r12,r5
80006a36:	5d 18       	icall	r8
80006a38:	18 94       	mov	r4,r12
80006a3a:	e0 89 00 0e 	brgt	80006a56 <__sfvwrite_r+0x1b6>
80006a3e:	c7 88       	rjmp	80006b2e <__sfvwrite_r+0x28e>
80006a40:	0c 9a       	mov	r10,r6
80006a42:	06 9b       	mov	r11,r3
80006a44:	e0 a0 03 31 	rcall	800070a6 <memmove>
80006a48:	6e 08       	ld.w	r8,r7[0x0]
80006a4a:	0c 08       	add	r8,r6
80006a4c:	0c 94       	mov	r4,r6
80006a4e:	8f 08       	st.w	r7[0x0],r8
80006a50:	6e 28       	ld.w	r8,r7[0x8]
80006a52:	0c 18       	sub	r8,r6
80006a54:	8f 28       	st.w	r7[0x8],r8
80006a56:	62 28       	ld.w	r8,r1[0x8]
80006a58:	08 18       	sub	r8,r4
80006a5a:	83 28       	st.w	r1[0x8],r8
80006a5c:	c6 e0       	breq	80006b38 <__sfvwrite_r+0x298>
80006a5e:	08 16       	sub	r6,r4
80006a60:	08 03       	add	r3,r4
80006a62:	c6 fb       	rjmp	80006940 <__sfvwrite_r+0xa0>
80006a64:	60 03       	ld.w	r3,r0[0x0]
80006a66:	60 11       	ld.w	r1,r0[0x4]
80006a68:	30 08       	mov	r8,0
80006a6a:	2f 80       	sub	r0,-8
80006a6c:	50 08       	stdsp	sp[0x0],r8
80006a6e:	58 01       	cp.w	r1,0
80006a70:	cf a0       	breq	80006a64 <__sfvwrite_r+0x1c4>
80006a72:	40 0a       	lddsp	r10,sp[0x0]
80006a74:	58 0a       	cp.w	r10,0
80006a76:	c1 51       	brne	80006aa0 <__sfvwrite_r+0x200>
80006a78:	e2 c6 ff ff 	sub	r6,r1,-1
80006a7c:	02 9a       	mov	r10,r1
80006a7e:	30 ab       	mov	r11,10
80006a80:	06 9c       	mov	r12,r3
80006a82:	e0 a0 03 07 	rcall	80007090 <memchr>
80006a86:	f8 c8 ff ff 	sub	r8,r12,-1
80006a8a:	58 0c       	cp.w	r12,0
80006a8c:	f1 d3 e1 16 	subne	r6,r8,r3
80006a90:	f9 b9 01 01 	movne	r9,1
80006a94:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006a98:	f9 b8 00 01 	moveq	r8,1
80006a9c:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006aa0:	02 36       	cp.w	r6,r1
80006aa2:	ec 04 17 80 	movls	r4,r6
80006aa6:	e2 04 17 b0 	movhi	r4,r1
80006aaa:	6e 59       	ld.w	r9,r7[0x14]
80006aac:	6e 25       	ld.w	r5,r7[0x8]
80006aae:	f2 05 00 05 	add	r5,r9,r5
80006ab2:	0a 34       	cp.w	r4,r5
80006ab4:	5f 9a       	srgt	r10
80006ab6:	6e 0c       	ld.w	r12,r7[0x0]
80006ab8:	6e 48       	ld.w	r8,r7[0x10]
80006aba:	10 3c       	cp.w	r12,r8
80006abc:	5f b8       	srhi	r8
80006abe:	f5 e8 00 08 	and	r8,r10,r8
80006ac2:	30 0a       	mov	r10,0
80006ac4:	f4 08 18 00 	cp.b	r8,r10
80006ac8:	c0 e0       	breq	80006ae4 <__sfvwrite_r+0x244>
80006aca:	06 9b       	mov	r11,r3
80006acc:	0a 9a       	mov	r10,r5
80006ace:	e0 a0 02 ec 	rcall	800070a6 <memmove>
80006ad2:	6e 08       	ld.w	r8,r7[0x0]
80006ad4:	0a 08       	add	r8,r5
80006ad6:	0e 9b       	mov	r11,r7
80006ad8:	8f 08       	st.w	r7[0x0],r8
80006ada:	40 1c       	lddsp	r12,sp[0x4]
80006adc:	fe b0 fc aa 	rcall	80006430 <_fflush_r>
80006ae0:	c1 80       	breq	80006b10 <__sfvwrite_r+0x270>
80006ae2:	c2 68       	rjmp	80006b2e <__sfvwrite_r+0x28e>
80006ae4:	12 34       	cp.w	r4,r9
80006ae6:	c0 a5       	brlt	80006afa <__sfvwrite_r+0x25a>
80006ae8:	6e a8       	ld.w	r8,r7[0x28]
80006aea:	06 9a       	mov	r10,r3
80006aec:	6e 8b       	ld.w	r11,r7[0x20]
80006aee:	40 1c       	lddsp	r12,sp[0x4]
80006af0:	5d 18       	icall	r8
80006af2:	18 95       	mov	r5,r12
80006af4:	e0 89 00 0e 	brgt	80006b10 <__sfvwrite_r+0x270>
80006af8:	c1 b8       	rjmp	80006b2e <__sfvwrite_r+0x28e>
80006afa:	08 9a       	mov	r10,r4
80006afc:	06 9b       	mov	r11,r3
80006afe:	e0 a0 02 d4 	rcall	800070a6 <memmove>
80006b02:	6e 08       	ld.w	r8,r7[0x0]
80006b04:	08 08       	add	r8,r4
80006b06:	08 95       	mov	r5,r4
80006b08:	8f 08       	st.w	r7[0x0],r8
80006b0a:	6e 28       	ld.w	r8,r7[0x8]
80006b0c:	08 18       	sub	r8,r4
80006b0e:	8f 28       	st.w	r7[0x8],r8
80006b10:	0a 16       	sub	r6,r5
80006b12:	c0 71       	brne	80006b20 <__sfvwrite_r+0x280>
80006b14:	0e 9b       	mov	r11,r7
80006b16:	40 1c       	lddsp	r12,sp[0x4]
80006b18:	fe b0 fc 8c 	rcall	80006430 <_fflush_r>
80006b1c:	c0 91       	brne	80006b2e <__sfvwrite_r+0x28e>
80006b1e:	50 06       	stdsp	sp[0x0],r6
80006b20:	64 28       	ld.w	r8,r2[0x8]
80006b22:	0a 18       	sub	r8,r5
80006b24:	85 28       	st.w	r2[0x8],r8
80006b26:	c0 90       	breq	80006b38 <__sfvwrite_r+0x298>
80006b28:	0a 11       	sub	r1,r5
80006b2a:	0a 03       	add	r3,r5
80006b2c:	ca 1b       	rjmp	80006a6e <__sfvwrite_r+0x1ce>
80006b2e:	8e 68       	ld.sh	r8,r7[0xc]
80006b30:	a7 a8       	sbr	r8,0x6
80006b32:	ae 68       	st.h	r7[0xc],r8
80006b34:	3f fc       	mov	r12,-1
80006b36:	c0 28       	rjmp	80006b3a <__sfvwrite_r+0x29a>
80006b38:	30 0c       	mov	r12,0
80006b3a:	2f dd       	sub	sp,-12
80006b3c:	d8 32       	popm	r0-r7,pc
80006b3e:	d7 03       	nop

80006b40 <_fwalk>:
80006b40:	d4 31       	pushm	r0-r7,lr
80006b42:	30 05       	mov	r5,0
80006b44:	16 91       	mov	r1,r11
80006b46:	f8 c7 ff 28 	sub	r7,r12,-216
80006b4a:	0a 92       	mov	r2,r5
80006b4c:	fe b0 fc f8 	rcall	8000653c <__sfp_lock_acquire>
80006b50:	3f f3       	mov	r3,-1
80006b52:	c1 68       	rjmp	80006b7e <_fwalk+0x3e>
80006b54:	6e 26       	ld.w	r6,r7[0x8]
80006b56:	6e 14       	ld.w	r4,r7[0x4]
80006b58:	2f 46       	sub	r6,-12
80006b5a:	c0 c8       	rjmp	80006b72 <_fwalk+0x32>
80006b5c:	8c 08       	ld.sh	r8,r6[0x0]
80006b5e:	e4 08 19 00 	cp.h	r8,r2
80006b62:	c0 70       	breq	80006b70 <_fwalk+0x30>
80006b64:	8c 18       	ld.sh	r8,r6[0x2]
80006b66:	e6 08 19 00 	cp.h	r8,r3
80006b6a:	c0 30       	breq	80006b70 <_fwalk+0x30>
80006b6c:	5d 11       	icall	r1
80006b6e:	18 45       	or	r5,r12
80006b70:	2a 46       	sub	r6,-92
80006b72:	20 14       	sub	r4,1
80006b74:	ec cc 00 0c 	sub	r12,r6,12
80006b78:	58 04       	cp.w	r4,0
80006b7a:	cf 14       	brge	80006b5c <_fwalk+0x1c>
80006b7c:	6e 07       	ld.w	r7,r7[0x0]
80006b7e:	58 07       	cp.w	r7,0
80006b80:	ce a1       	brne	80006b54 <_fwalk+0x14>
80006b82:	fe b0 fc de 	rcall	8000653e <__sfp_lock_release>
80006b86:	0a 9c       	mov	r12,r5
80006b88:	d8 32       	popm	r0-r7,pc
80006b8a:	d7 03       	nop

80006b8c <_localeconv_r>:
80006b8c:	fe cc d7 74 	sub	r12,pc,-10380
80006b90:	5e fc       	retal	r12
80006b92:	d7 03       	nop

80006b94 <__smakebuf_r>:
80006b94:	d4 21       	pushm	r4-r7,lr
80006b96:	20 fd       	sub	sp,60
80006b98:	96 68       	ld.sh	r8,r11[0xc]
80006b9a:	16 97       	mov	r7,r11
80006b9c:	18 96       	mov	r6,r12
80006b9e:	e2 18 00 02 	andl	r8,0x2,COH
80006ba2:	c3 c1       	brne	80006c1a <__smakebuf_r+0x86>
80006ba4:	96 7b       	ld.sh	r11,r11[0xe]
80006ba6:	f0 0b 19 00 	cp.h	r11,r8
80006baa:	c0 55       	brlt	80006bb4 <__smakebuf_r+0x20>
80006bac:	1a 9a       	mov	r10,sp
80006bae:	e0 a0 08 9d 	rcall	80007ce8 <_fstat_r>
80006bb2:	c0 f4       	brge	80006bd0 <__smakebuf_r+0x3c>
80006bb4:	8e 65       	ld.sh	r5,r7[0xc]
80006bb6:	0a 98       	mov	r8,r5
80006bb8:	ab b8       	sbr	r8,0xb
80006bba:	e2 15 00 80 	andl	r5,0x80,COH
80006bbe:	ae 68       	st.h	r7[0xc],r8
80006bc0:	30 04       	mov	r4,0
80006bc2:	e0 68 04 00 	mov	r8,1024
80006bc6:	f9 b5 01 40 	movne	r5,64
80006bca:	f0 05 17 00 	moveq	r5,r8
80006bce:	c1 c8       	rjmp	80006c06 <__smakebuf_r+0x72>
80006bd0:	40 18       	lddsp	r8,sp[0x4]
80006bd2:	e2 18 f0 00 	andl	r8,0xf000,COH
80006bd6:	e0 48 20 00 	cp.w	r8,8192
80006bda:	5f 04       	sreq	r4
80006bdc:	e0 48 80 00 	cp.w	r8,32768
80006be0:	c0 e1       	brne	80006bfc <__smakebuf_r+0x68>
80006be2:	6e b9       	ld.w	r9,r7[0x2c]
80006be4:	fe c8 f1 e8 	sub	r8,pc,-3608
80006be8:	10 39       	cp.w	r9,r8
80006bea:	c0 91       	brne	80006bfc <__smakebuf_r+0x68>
80006bec:	8e 68       	ld.sh	r8,r7[0xc]
80006bee:	e0 65 04 00 	mov	r5,1024
80006bf2:	ab a8       	sbr	r8,0xa
80006bf4:	ef 45 00 50 	st.w	r7[80],r5
80006bf8:	ae 68       	st.h	r7[0xc],r8
80006bfa:	c0 68       	rjmp	80006c06 <__smakebuf_r+0x72>
80006bfc:	8e 68       	ld.sh	r8,r7[0xc]
80006bfe:	e0 65 04 00 	mov	r5,1024
80006c02:	ab b8       	sbr	r8,0xb
80006c04:	ae 68       	st.h	r7[0xc],r8
80006c06:	0a 9b       	mov	r11,r5
80006c08:	0c 9c       	mov	r12,r6
80006c0a:	c2 bc       	rcall	80006c60 <_malloc_r>
80006c0c:	8e 68       	ld.sh	r8,r7[0xc]
80006c0e:	c0 d1       	brne	80006c28 <__smakebuf_r+0x94>
80006c10:	ed b8 00 09 	bld	r8,0x9
80006c14:	c1 b0       	breq	80006c4a <__smakebuf_r+0xb6>
80006c16:	a1 b8       	sbr	r8,0x1
80006c18:	ae 68       	st.h	r7[0xc],r8
80006c1a:	ee c8 ff b9 	sub	r8,r7,-71
80006c1e:	8f 48       	st.w	r7[0x10],r8
80006c20:	8f 08       	st.w	r7[0x0],r8
80006c22:	30 18       	mov	r8,1
80006c24:	8f 58       	st.w	r7[0x14],r8
80006c26:	c1 28       	rjmp	80006c4a <__smakebuf_r+0xb6>
80006c28:	a7 b8       	sbr	r8,0x7
80006c2a:	8f 4c       	st.w	r7[0x10],r12
80006c2c:	ae 68       	st.h	r7[0xc],r8
80006c2e:	8f 55       	st.w	r7[0x14],r5
80006c30:	fe c8 06 f0 	sub	r8,pc,1776
80006c34:	8f 0c       	st.w	r7[0x0],r12
80006c36:	8d a8       	st.w	r6[0x28],r8
80006c38:	58 04       	cp.w	r4,0
80006c3a:	c0 80       	breq	80006c4a <__smakebuf_r+0xb6>
80006c3c:	8e 7c       	ld.sh	r12,r7[0xe]
80006c3e:	e0 a0 07 47 	rcall	80007acc <isatty>
80006c42:	c0 40       	breq	80006c4a <__smakebuf_r+0xb6>
80006c44:	8e 68       	ld.sh	r8,r7[0xc]
80006c46:	a1 a8       	sbr	r8,0x0
80006c48:	ae 68       	st.h	r7[0xc],r8
80006c4a:	2f 1d       	sub	sp,-60
80006c4c:	d8 22       	popm	r4-r7,pc
80006c4e:	d7 03       	nop

80006c50 <malloc>:
80006c50:	d4 01       	pushm	lr
80006c52:	e0 68 01 04 	mov	r8,260
80006c56:	18 9b       	mov	r11,r12
80006c58:	70 0c       	ld.w	r12,r8[0x0]
80006c5a:	c0 3c       	rcall	80006c60 <_malloc_r>
80006c5c:	d8 02       	popm	pc
80006c5e:	d7 03       	nop

80006c60 <_malloc_r>:
80006c60:	d4 31       	pushm	r0-r7,lr
80006c62:	f6 c8 ff f5 	sub	r8,r11,-11
80006c66:	18 95       	mov	r5,r12
80006c68:	10 97       	mov	r7,r8
80006c6a:	e0 17 ff f8 	andl	r7,0xfff8
80006c6e:	59 68       	cp.w	r8,22
80006c70:	f9 b7 08 10 	movls	r7,16
80006c74:	16 37       	cp.w	r7,r11
80006c76:	5f 38       	srlo	r8
80006c78:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006c7c:	c0 50       	breq	80006c86 <_malloc_r+0x26>
80006c7e:	30 c8       	mov	r8,12
80006c80:	99 38       	st.w	r12[0xc],r8
80006c82:	e0 8f 01 f7 	bral	80007070 <_malloc_r+0x410>
80006c86:	e0 a0 02 36 	rcall	800070f2 <__malloc_lock>
80006c8a:	e0 47 01 f7 	cp.w	r7,503
80006c8e:	e0 8b 00 1d 	brhi	80006cc8 <_malloc_r+0x68>
80006c92:	ee 03 16 03 	lsr	r3,r7,0x3
80006c96:	e0 68 01 08 	mov	r8,264
80006c9a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006c9e:	70 36       	ld.w	r6,r8[0xc]
80006ca0:	10 36       	cp.w	r6,r8
80006ca2:	c0 61       	brne	80006cae <_malloc_r+0x4e>
80006ca4:	ec c8 ff f8 	sub	r8,r6,-8
80006ca8:	70 36       	ld.w	r6,r8[0xc]
80006caa:	10 36       	cp.w	r6,r8
80006cac:	c0 c0       	breq	80006cc4 <_malloc_r+0x64>
80006cae:	6c 18       	ld.w	r8,r6[0x4]
80006cb0:	e0 18 ff fc 	andl	r8,0xfffc
80006cb4:	6c 3a       	ld.w	r10,r6[0xc]
80006cb6:	ec 08 00 09 	add	r9,r6,r8
80006cba:	0a 9c       	mov	r12,r5
80006cbc:	6c 28       	ld.w	r8,r6[0x8]
80006cbe:	95 28       	st.w	r10[0x8],r8
80006cc0:	91 3a       	st.w	r8[0xc],r10
80006cc2:	c4 78       	rjmp	80006d50 <_malloc_r+0xf0>
80006cc4:	2f e3       	sub	r3,-2
80006cc6:	c4 d8       	rjmp	80006d60 <_malloc_r+0x100>
80006cc8:	ee 03 16 09 	lsr	r3,r7,0x9
80006ccc:	c0 41       	brne	80006cd4 <_malloc_r+0x74>
80006cce:	ee 03 16 03 	lsr	r3,r7,0x3
80006cd2:	c2 68       	rjmp	80006d1e <_malloc_r+0xbe>
80006cd4:	58 43       	cp.w	r3,4
80006cd6:	e0 8b 00 06 	brhi	80006ce2 <_malloc_r+0x82>
80006cda:	ee 03 16 06 	lsr	r3,r7,0x6
80006cde:	2c 83       	sub	r3,-56
80006ce0:	c1 f8       	rjmp	80006d1e <_malloc_r+0xbe>
80006ce2:	59 43       	cp.w	r3,20
80006ce4:	e0 8b 00 04 	brhi	80006cec <_malloc_r+0x8c>
80006ce8:	2a 53       	sub	r3,-91
80006cea:	c1 a8       	rjmp	80006d1e <_malloc_r+0xbe>
80006cec:	e0 43 00 54 	cp.w	r3,84
80006cf0:	e0 8b 00 06 	brhi	80006cfc <_malloc_r+0x9c>
80006cf4:	ee 03 16 0c 	lsr	r3,r7,0xc
80006cf8:	29 23       	sub	r3,-110
80006cfa:	c1 28       	rjmp	80006d1e <_malloc_r+0xbe>
80006cfc:	e0 43 01 54 	cp.w	r3,340
80006d00:	e0 8b 00 06 	brhi	80006d0c <_malloc_r+0xac>
80006d04:	ee 03 16 0f 	lsr	r3,r7,0xf
80006d08:	28 93       	sub	r3,-119
80006d0a:	c0 a8       	rjmp	80006d1e <_malloc_r+0xbe>
80006d0c:	e0 43 05 54 	cp.w	r3,1364
80006d10:	e0 88 00 04 	brls	80006d18 <_malloc_r+0xb8>
80006d14:	37 e3       	mov	r3,126
80006d16:	c0 48       	rjmp	80006d1e <_malloc_r+0xbe>
80006d18:	ee 03 16 12 	lsr	r3,r7,0x12
80006d1c:	28 43       	sub	r3,-124
80006d1e:	e0 6a 01 08 	mov	r10,264
80006d22:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006d26:	74 36       	ld.w	r6,r10[0xc]
80006d28:	c1 98       	rjmp	80006d5a <_malloc_r+0xfa>
80006d2a:	6c 19       	ld.w	r9,r6[0x4]
80006d2c:	e0 19 ff fc 	andl	r9,0xfffc
80006d30:	f2 07 01 0b 	sub	r11,r9,r7
80006d34:	58 fb       	cp.w	r11,15
80006d36:	e0 8a 00 04 	brle	80006d3e <_malloc_r+0xde>
80006d3a:	20 13       	sub	r3,1
80006d3c:	c1 18       	rjmp	80006d5e <_malloc_r+0xfe>
80006d3e:	6c 38       	ld.w	r8,r6[0xc]
80006d40:	58 0b       	cp.w	r11,0
80006d42:	c0 b5       	brlt	80006d58 <_malloc_r+0xf8>
80006d44:	6c 2a       	ld.w	r10,r6[0x8]
80006d46:	ec 09 00 09 	add	r9,r6,r9
80006d4a:	0a 9c       	mov	r12,r5
80006d4c:	91 2a       	st.w	r8[0x8],r10
80006d4e:	95 38       	st.w	r10[0xc],r8
80006d50:	72 18       	ld.w	r8,r9[0x4]
80006d52:	a1 a8       	sbr	r8,0x0
80006d54:	93 18       	st.w	r9[0x4],r8
80006d56:	cb c8       	rjmp	80006ece <_malloc_r+0x26e>
80006d58:	10 96       	mov	r6,r8
80006d5a:	14 36       	cp.w	r6,r10
80006d5c:	ce 71       	brne	80006d2a <_malloc_r+0xca>
80006d5e:	2f f3       	sub	r3,-1
80006d60:	e0 6a 01 08 	mov	r10,264
80006d64:	f4 cc ff f8 	sub	r12,r10,-8
80006d68:	78 26       	ld.w	r6,r12[0x8]
80006d6a:	18 36       	cp.w	r6,r12
80006d6c:	c6 c0       	breq	80006e44 <_malloc_r+0x1e4>
80006d6e:	6c 19       	ld.w	r9,r6[0x4]
80006d70:	e0 19 ff fc 	andl	r9,0xfffc
80006d74:	f2 07 01 08 	sub	r8,r9,r7
80006d78:	58 f8       	cp.w	r8,15
80006d7a:	e0 89 00 8f 	brgt	80006e98 <_malloc_r+0x238>
80006d7e:	99 3c       	st.w	r12[0xc],r12
80006d80:	99 2c       	st.w	r12[0x8],r12
80006d82:	58 08       	cp.w	r8,0
80006d84:	c0 55       	brlt	80006d8e <_malloc_r+0x12e>
80006d86:	ec 09 00 09 	add	r9,r6,r9
80006d8a:	0a 9c       	mov	r12,r5
80006d8c:	ce 2b       	rjmp	80006d50 <_malloc_r+0xf0>
80006d8e:	e0 49 01 ff 	cp.w	r9,511
80006d92:	e0 8b 00 13 	brhi	80006db8 <_malloc_r+0x158>
80006d96:	a3 99       	lsr	r9,0x3
80006d98:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006d9c:	70 2b       	ld.w	r11,r8[0x8]
80006d9e:	8d 38       	st.w	r6[0xc],r8
80006da0:	8d 2b       	st.w	r6[0x8],r11
80006da2:	97 36       	st.w	r11[0xc],r6
80006da4:	91 26       	st.w	r8[0x8],r6
80006da6:	a3 49       	asr	r9,0x2
80006da8:	74 18       	ld.w	r8,r10[0x4]
80006daa:	30 1b       	mov	r11,1
80006dac:	f6 09 09 49 	lsl	r9,r11,r9
80006db0:	f1 e9 10 09 	or	r9,r8,r9
80006db4:	95 19       	st.w	r10[0x4],r9
80006db6:	c4 78       	rjmp	80006e44 <_malloc_r+0x1e4>
80006db8:	f2 0a 16 09 	lsr	r10,r9,0x9
80006dbc:	58 4a       	cp.w	r10,4
80006dbe:	e0 8b 00 07 	brhi	80006dcc <_malloc_r+0x16c>
80006dc2:	f2 0a 16 06 	lsr	r10,r9,0x6
80006dc6:	2c 8a       	sub	r10,-56
80006dc8:	c2 08       	rjmp	80006e08 <_malloc_r+0x1a8>
80006dca:	d7 03       	nop
80006dcc:	59 4a       	cp.w	r10,20
80006dce:	e0 8b 00 04 	brhi	80006dd6 <_malloc_r+0x176>
80006dd2:	2a 5a       	sub	r10,-91
80006dd4:	c1 a8       	rjmp	80006e08 <_malloc_r+0x1a8>
80006dd6:	e0 4a 00 54 	cp.w	r10,84
80006dda:	e0 8b 00 06 	brhi	80006de6 <_malloc_r+0x186>
80006dde:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006de2:	29 2a       	sub	r10,-110
80006de4:	c1 28       	rjmp	80006e08 <_malloc_r+0x1a8>
80006de6:	e0 4a 01 54 	cp.w	r10,340
80006dea:	e0 8b 00 06 	brhi	80006df6 <_malloc_r+0x196>
80006dee:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006df2:	28 9a       	sub	r10,-119
80006df4:	c0 a8       	rjmp	80006e08 <_malloc_r+0x1a8>
80006df6:	e0 4a 05 54 	cp.w	r10,1364
80006dfa:	e0 88 00 04 	brls	80006e02 <_malloc_r+0x1a2>
80006dfe:	37 ea       	mov	r10,126
80006e00:	c0 48       	rjmp	80006e08 <_malloc_r+0x1a8>
80006e02:	f2 0a 16 12 	lsr	r10,r9,0x12
80006e06:	28 4a       	sub	r10,-124
80006e08:	e0 6b 01 08 	mov	r11,264
80006e0c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006e10:	68 28       	ld.w	r8,r4[0x8]
80006e12:	08 38       	cp.w	r8,r4
80006e14:	c0 e1       	brne	80006e30 <_malloc_r+0x1d0>
80006e16:	76 19       	ld.w	r9,r11[0x4]
80006e18:	a3 4a       	asr	r10,0x2
80006e1a:	30 1e       	mov	lr,1
80006e1c:	fc 0a 09 4a 	lsl	r10,lr,r10
80006e20:	f3 ea 10 0a 	or	r10,r9,r10
80006e24:	10 99       	mov	r9,r8
80006e26:	97 1a       	st.w	r11[0x4],r10
80006e28:	c0 a8       	rjmp	80006e3c <_malloc_r+0x1dc>
80006e2a:	70 28       	ld.w	r8,r8[0x8]
80006e2c:	08 38       	cp.w	r8,r4
80006e2e:	c0 60       	breq	80006e3a <_malloc_r+0x1da>
80006e30:	70 1a       	ld.w	r10,r8[0x4]
80006e32:	e0 1a ff fc 	andl	r10,0xfffc
80006e36:	14 39       	cp.w	r9,r10
80006e38:	cf 93       	brcs	80006e2a <_malloc_r+0x1ca>
80006e3a:	70 39       	ld.w	r9,r8[0xc]
80006e3c:	8d 39       	st.w	r6[0xc],r9
80006e3e:	8d 28       	st.w	r6[0x8],r8
80006e40:	91 36       	st.w	r8[0xc],r6
80006e42:	93 26       	st.w	r9[0x8],r6
80006e44:	e6 08 14 02 	asr	r8,r3,0x2
80006e48:	30 1b       	mov	r11,1
80006e4a:	e0 64 01 08 	mov	r4,264
80006e4e:	f6 08 09 4b 	lsl	r11,r11,r8
80006e52:	68 18       	ld.w	r8,r4[0x4]
80006e54:	10 3b       	cp.w	r11,r8
80006e56:	e0 8b 00 69 	brhi	80006f28 <_malloc_r+0x2c8>
80006e5a:	f7 e8 00 09 	and	r9,r11,r8
80006e5e:	c0 b1       	brne	80006e74 <_malloc_r+0x214>
80006e60:	e0 13 ff fc 	andl	r3,0xfffc
80006e64:	a1 7b       	lsl	r11,0x1
80006e66:	2f c3       	sub	r3,-4
80006e68:	c0 38       	rjmp	80006e6e <_malloc_r+0x20e>
80006e6a:	2f c3       	sub	r3,-4
80006e6c:	a1 7b       	lsl	r11,0x1
80006e6e:	f7 e8 00 09 	and	r9,r11,r8
80006e72:	cf c0       	breq	80006e6a <_malloc_r+0x20a>
80006e74:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80006e78:	06 92       	mov	r2,r3
80006e7a:	1c 91       	mov	r1,lr
80006e7c:	62 36       	ld.w	r6,r1[0xc]
80006e7e:	c2 d8       	rjmp	80006ed8 <_malloc_r+0x278>
80006e80:	6c 1a       	ld.w	r10,r6[0x4]
80006e82:	e0 1a ff fc 	andl	r10,0xfffc
80006e86:	f4 07 01 08 	sub	r8,r10,r7
80006e8a:	58 f8       	cp.w	r8,15
80006e8c:	e0 8a 00 15 	brle	80006eb6 <_malloc_r+0x256>
80006e90:	6c 3a       	ld.w	r10,r6[0xc]
80006e92:	6c 29       	ld.w	r9,r6[0x8]
80006e94:	95 29       	st.w	r10[0x8],r9
80006e96:	93 3a       	st.w	r9[0xc],r10
80006e98:	0e 99       	mov	r9,r7
80006e9a:	ec 07 00 07 	add	r7,r6,r7
80006e9e:	a1 a9       	sbr	r9,0x0
80006ea0:	99 37       	st.w	r12[0xc],r7
80006ea2:	99 27       	st.w	r12[0x8],r7
80006ea4:	8d 19       	st.w	r6[0x4],r9
80006ea6:	ee 08 09 08 	st.w	r7[r8],r8
80006eaa:	8f 2c       	st.w	r7[0x8],r12
80006eac:	8f 3c       	st.w	r7[0xc],r12
80006eae:	a1 a8       	sbr	r8,0x0
80006eb0:	0a 9c       	mov	r12,r5
80006eb2:	8f 18       	st.w	r7[0x4],r8
80006eb4:	c0 d8       	rjmp	80006ece <_malloc_r+0x26e>
80006eb6:	6c 39       	ld.w	r9,r6[0xc]
80006eb8:	58 08       	cp.w	r8,0
80006eba:	c0 e5       	brlt	80006ed6 <_malloc_r+0x276>
80006ebc:	ec 0a 00 0a 	add	r10,r6,r10
80006ec0:	74 18       	ld.w	r8,r10[0x4]
80006ec2:	a1 a8       	sbr	r8,0x0
80006ec4:	0a 9c       	mov	r12,r5
80006ec6:	95 18       	st.w	r10[0x4],r8
80006ec8:	6c 28       	ld.w	r8,r6[0x8]
80006eca:	93 28       	st.w	r9[0x8],r8
80006ecc:	91 39       	st.w	r8[0xc],r9
80006ece:	c1 3d       	rcall	800070f4 <__malloc_unlock>
80006ed0:	ec cc ff f8 	sub	r12,r6,-8
80006ed4:	d8 32       	popm	r0-r7,pc
80006ed6:	12 96       	mov	r6,r9
80006ed8:	02 36       	cp.w	r6,r1
80006eda:	cd 31       	brne	80006e80 <_malloc_r+0x220>
80006edc:	2f f2       	sub	r2,-1
80006ede:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80006ee2:	c0 30       	breq	80006ee8 <_malloc_r+0x288>
80006ee4:	2f 81       	sub	r1,-8
80006ee6:	cc bb       	rjmp	80006e7c <_malloc_r+0x21c>
80006ee8:	1c 98       	mov	r8,lr
80006eea:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80006eee:	c0 81       	brne	80006efe <_malloc_r+0x29e>
80006ef0:	68 19       	ld.w	r9,r4[0x4]
80006ef2:	f6 08 11 ff 	rsub	r8,r11,-1
80006ef6:	f3 e8 00 08 	and	r8,r9,r8
80006efa:	89 18       	st.w	r4[0x4],r8
80006efc:	c0 78       	rjmp	80006f0a <_malloc_r+0x2aa>
80006efe:	f0 c9 00 08 	sub	r9,r8,8
80006f02:	20 13       	sub	r3,1
80006f04:	70 08       	ld.w	r8,r8[0x0]
80006f06:	12 38       	cp.w	r8,r9
80006f08:	cf 10       	breq	80006eea <_malloc_r+0x28a>
80006f0a:	a1 7b       	lsl	r11,0x1
80006f0c:	68 18       	ld.w	r8,r4[0x4]
80006f0e:	10 3b       	cp.w	r11,r8
80006f10:	e0 8b 00 0c 	brhi	80006f28 <_malloc_r+0x2c8>
80006f14:	58 0b       	cp.w	r11,0
80006f16:	c0 90       	breq	80006f28 <_malloc_r+0x2c8>
80006f18:	04 93       	mov	r3,r2
80006f1a:	c0 38       	rjmp	80006f20 <_malloc_r+0x2c0>
80006f1c:	2f c3       	sub	r3,-4
80006f1e:	a1 7b       	lsl	r11,0x1
80006f20:	f7 e8 00 09 	and	r9,r11,r8
80006f24:	ca 81       	brne	80006e74 <_malloc_r+0x214>
80006f26:	cf bb       	rjmp	80006f1c <_malloc_r+0x2bc>
80006f28:	68 23       	ld.w	r3,r4[0x8]
80006f2a:	66 12       	ld.w	r2,r3[0x4]
80006f2c:	e0 12 ff fc 	andl	r2,0xfffc
80006f30:	0e 32       	cp.w	r2,r7
80006f32:	5f 39       	srlo	r9
80006f34:	e4 07 01 08 	sub	r8,r2,r7
80006f38:	58 f8       	cp.w	r8,15
80006f3a:	5f aa       	srle	r10
80006f3c:	f5 e9 10 09 	or	r9,r10,r9
80006f40:	e0 80 00 9a 	breq	80007074 <_malloc_r+0x414>
80006f44:	e0 68 06 34 	mov	r8,1588
80006f48:	70 01       	ld.w	r1,r8[0x0]
80006f4a:	e0 68 05 14 	mov	r8,1300
80006f4e:	2f 01       	sub	r1,-16
80006f50:	70 08       	ld.w	r8,r8[0x0]
80006f52:	0e 01       	add	r1,r7
80006f54:	5b f8       	cp.w	r8,-1
80006f56:	c0 40       	breq	80006f5e <_malloc_r+0x2fe>
80006f58:	28 11       	sub	r1,-127
80006f5a:	e0 11 ff 80 	andl	r1,0xff80
80006f5e:	02 9b       	mov	r11,r1
80006f60:	0a 9c       	mov	r12,r5
80006f62:	e0 a0 05 39 	rcall	800079d4 <_sbrk_r>
80006f66:	18 96       	mov	r6,r12
80006f68:	5b fc       	cp.w	r12,-1
80006f6a:	c7 50       	breq	80007054 <_malloc_r+0x3f4>
80006f6c:	e6 02 00 08 	add	r8,r3,r2
80006f70:	10 3c       	cp.w	r12,r8
80006f72:	c0 32       	brcc	80006f78 <_malloc_r+0x318>
80006f74:	08 33       	cp.w	r3,r4
80006f76:	c6 f1       	brne	80007054 <_malloc_r+0x3f4>
80006f78:	e0 6a 06 38 	mov	r10,1592
80006f7c:	74 09       	ld.w	r9,r10[0x0]
80006f7e:	e2 09 00 09 	add	r9,r1,r9
80006f82:	95 09       	st.w	r10[0x0],r9
80006f84:	10 36       	cp.w	r6,r8
80006f86:	c0 a1       	brne	80006f9a <_malloc_r+0x33a>
80006f88:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80006f8c:	c0 71       	brne	80006f9a <_malloc_r+0x33a>
80006f8e:	e2 02 00 02 	add	r2,r1,r2
80006f92:	68 28       	ld.w	r8,r4[0x8]
80006f94:	a1 a2       	sbr	r2,0x0
80006f96:	91 12       	st.w	r8[0x4],r2
80006f98:	c4 f8       	rjmp	80007036 <_malloc_r+0x3d6>
80006f9a:	e0 6a 05 14 	mov	r10,1300
80006f9e:	74 0b       	ld.w	r11,r10[0x0]
80006fa0:	5b fb       	cp.w	r11,-1
80006fa2:	c0 31       	brne	80006fa8 <_malloc_r+0x348>
80006fa4:	95 06       	st.w	r10[0x0],r6
80006fa6:	c0 78       	rjmp	80006fb4 <_malloc_r+0x354>
80006fa8:	ec 09 00 09 	add	r9,r6,r9
80006fac:	e0 6a 06 38 	mov	r10,1592
80006fb0:	10 19       	sub	r9,r8
80006fb2:	95 09       	st.w	r10[0x0],r9
80006fb4:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80006fb8:	f0 09 11 08 	rsub	r9,r8,8
80006fbc:	58 08       	cp.w	r8,0
80006fbe:	f2 08 17 10 	movne	r8,r9
80006fc2:	ed d8 e1 06 	addne	r6,r6,r8
80006fc6:	28 08       	sub	r8,-128
80006fc8:	ec 01 00 01 	add	r1,r6,r1
80006fcc:	0a 9c       	mov	r12,r5
80006fce:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80006fd2:	f0 01 01 01 	sub	r1,r8,r1
80006fd6:	02 9b       	mov	r11,r1
80006fd8:	e0 a0 04 fe 	rcall	800079d4 <_sbrk_r>
80006fdc:	e0 68 06 38 	mov	r8,1592
80006fe0:	5b fc       	cp.w	r12,-1
80006fe2:	ec 0c 17 00 	moveq	r12,r6
80006fe6:	f9 b1 00 00 	moveq	r1,0
80006fea:	70 09       	ld.w	r9,r8[0x0]
80006fec:	0c 1c       	sub	r12,r6
80006fee:	89 26       	st.w	r4[0x8],r6
80006ff0:	02 0c       	add	r12,r1
80006ff2:	12 01       	add	r1,r9
80006ff4:	a1 ac       	sbr	r12,0x0
80006ff6:	91 01       	st.w	r8[0x0],r1
80006ff8:	8d 1c       	st.w	r6[0x4],r12
80006ffa:	08 33       	cp.w	r3,r4
80006ffc:	c1 d0       	breq	80007036 <_malloc_r+0x3d6>
80006ffe:	58 f2       	cp.w	r2,15
80007000:	e0 8b 00 05 	brhi	8000700a <_malloc_r+0x3aa>
80007004:	30 18       	mov	r8,1
80007006:	8d 18       	st.w	r6[0x4],r8
80007008:	c2 68       	rjmp	80007054 <_malloc_r+0x3f4>
8000700a:	30 59       	mov	r9,5
8000700c:	20 c2       	sub	r2,12
8000700e:	e0 12 ff f8 	andl	r2,0xfff8
80007012:	e6 02 00 08 	add	r8,r3,r2
80007016:	91 29       	st.w	r8[0x8],r9
80007018:	91 19       	st.w	r8[0x4],r9
8000701a:	66 18       	ld.w	r8,r3[0x4]
8000701c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007020:	e5 e8 10 08 	or	r8,r2,r8
80007024:	87 18       	st.w	r3[0x4],r8
80007026:	58 f2       	cp.w	r2,15
80007028:	e0 88 00 07 	brls	80007036 <_malloc_r+0x3d6>
8000702c:	e6 cb ff f8 	sub	r11,r3,-8
80007030:	0a 9c       	mov	r12,r5
80007032:	fe b0 fb 71 	rcall	80006714 <_free_r>
80007036:	e0 69 06 30 	mov	r9,1584
8000703a:	72 0a       	ld.w	r10,r9[0x0]
8000703c:	e0 68 06 38 	mov	r8,1592
80007040:	70 08       	ld.w	r8,r8[0x0]
80007042:	14 38       	cp.w	r8,r10
80007044:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007048:	e0 69 06 2c 	mov	r9,1580
8000704c:	72 0a       	ld.w	r10,r9[0x0]
8000704e:	14 38       	cp.w	r8,r10
80007050:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007054:	68 28       	ld.w	r8,r4[0x8]
80007056:	70 18       	ld.w	r8,r8[0x4]
80007058:	e0 18 ff fc 	andl	r8,0xfffc
8000705c:	0e 38       	cp.w	r8,r7
8000705e:	5f 39       	srlo	r9
80007060:	0e 18       	sub	r8,r7
80007062:	58 f8       	cp.w	r8,15
80007064:	5f aa       	srle	r10
80007066:	f5 e9 10 09 	or	r9,r10,r9
8000706a:	c0 50       	breq	80007074 <_malloc_r+0x414>
8000706c:	0a 9c       	mov	r12,r5
8000706e:	c4 3c       	rcall	800070f4 <__malloc_unlock>
80007070:	d8 3a       	popm	r0-r7,pc,r12=0
80007072:	d7 03       	nop
80007074:	68 26       	ld.w	r6,r4[0x8]
80007076:	a1 a8       	sbr	r8,0x0
80007078:	0e 99       	mov	r9,r7
8000707a:	a1 a9       	sbr	r9,0x0
8000707c:	8d 19       	st.w	r6[0x4],r9
8000707e:	ec 07 00 07 	add	r7,r6,r7
80007082:	0a 9c       	mov	r12,r5
80007084:	89 27       	st.w	r4[0x8],r7
80007086:	8f 18       	st.w	r7[0x4],r8
80007088:	c3 6c       	rcall	800070f4 <__malloc_unlock>
8000708a:	ec cc ff f8 	sub	r12,r6,-8
8000708e:	d8 32       	popm	r0-r7,pc

80007090 <memchr>:
80007090:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007094:	c0 68       	rjmp	800070a0 <memchr+0x10>
80007096:	20 1a       	sub	r10,1
80007098:	19 88       	ld.ub	r8,r12[0x0]
8000709a:	16 38       	cp.w	r8,r11
8000709c:	5e 0c       	reteq	r12
8000709e:	2f fc       	sub	r12,-1
800070a0:	58 0a       	cp.w	r10,0
800070a2:	cf a1       	brne	80007096 <memchr+0x6>
800070a4:	5e fa       	retal	r10

800070a6 <memmove>:
800070a6:	d4 01       	pushm	lr
800070a8:	18 3b       	cp.w	r11,r12
800070aa:	c1 92       	brcc	800070dc <memmove+0x36>
800070ac:	f6 0a 00 09 	add	r9,r11,r10
800070b0:	12 3c       	cp.w	r12,r9
800070b2:	c1 52       	brcc	800070dc <memmove+0x36>
800070b4:	f8 0a 00 0b 	add	r11,r12,r10
800070b8:	30 08       	mov	r8,0
800070ba:	c0 68       	rjmp	800070c6 <memmove+0x20>
800070bc:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800070c0:	20 1a       	sub	r10,1
800070c2:	f6 08 0b 0e 	st.b	r11[r8],lr
800070c6:	20 18       	sub	r8,1
800070c8:	58 0a       	cp.w	r10,0
800070ca:	cf 91       	brne	800070bc <memmove+0x16>
800070cc:	d8 02       	popm	pc
800070ce:	f6 08 07 09 	ld.ub	r9,r11[r8]
800070d2:	20 1a       	sub	r10,1
800070d4:	f8 08 0b 09 	st.b	r12[r8],r9
800070d8:	2f f8       	sub	r8,-1
800070da:	c0 28       	rjmp	800070de <memmove+0x38>
800070dc:	30 08       	mov	r8,0
800070de:	58 0a       	cp.w	r10,0
800070e0:	cf 71       	brne	800070ce <memmove+0x28>
800070e2:	d8 02       	popm	pc

800070e4 <memset>:
800070e4:	18 98       	mov	r8,r12
800070e6:	c0 38       	rjmp	800070ec <memset+0x8>
800070e8:	10 cb       	st.b	r8++,r11
800070ea:	20 1a       	sub	r10,1
800070ec:	58 0a       	cp.w	r10,0
800070ee:	cf d1       	brne	800070e8 <memset+0x4>
800070f0:	5e fc       	retal	r12

800070f2 <__malloc_lock>:
800070f2:	5e fc       	retal	r12

800070f4 <__malloc_unlock>:
800070f4:	5e fc       	retal	r12

800070f6 <__hi0bits>:
800070f6:	18 98       	mov	r8,r12
800070f8:	e0 1c 00 00 	andl	r12,0x0
800070fc:	f0 09 15 10 	lsl	r9,r8,0x10
80007100:	58 0c       	cp.w	r12,0
80007102:	f2 08 17 00 	moveq	r8,r9
80007106:	f9 bc 00 10 	moveq	r12,16
8000710a:	f9 bc 01 00 	movne	r12,0
8000710e:	10 9a       	mov	r10,r8
80007110:	f0 09 15 08 	lsl	r9,r8,0x8
80007114:	e6 1a ff 00 	andh	r10,0xff00,COH
80007118:	f7 bc 00 f8 	subeq	r12,-8
8000711c:	f2 08 17 00 	moveq	r8,r9
80007120:	10 9a       	mov	r10,r8
80007122:	f0 09 15 04 	lsl	r9,r8,0x4
80007126:	e6 1a f0 00 	andh	r10,0xf000,COH
8000712a:	f7 bc 00 fc 	subeq	r12,-4
8000712e:	f2 08 17 00 	moveq	r8,r9
80007132:	10 9a       	mov	r10,r8
80007134:	f0 09 15 02 	lsl	r9,r8,0x2
80007138:	e6 1a c0 00 	andh	r10,0xc000,COH
8000713c:	f7 bc 00 fe 	subeq	r12,-2
80007140:	f2 08 17 00 	moveq	r8,r9
80007144:	58 08       	cp.w	r8,0
80007146:	5e 5c       	retlt	r12
80007148:	ed b8 00 1e 	bld	r8,0x1e
8000714c:	f9 bc 01 20 	movne	r12,32
80007150:	f7 bc 00 ff 	subeq	r12,-1
80007154:	5e fc       	retal	r12

80007156 <__lo0bits>:
80007156:	18 99       	mov	r9,r12
80007158:	78 08       	ld.w	r8,r12[0x0]
8000715a:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000715e:	c1 50       	breq	80007188 <__lo0bits+0x32>
80007160:	ed b8 00 00 	bld	r8,0x0
80007164:	c0 21       	brne	80007168 <__lo0bits+0x12>
80007166:	5e fd       	retal	0
80007168:	10 9b       	mov	r11,r8
8000716a:	f0 0a 16 01 	lsr	r10,r8,0x1
8000716e:	e2 1b 00 02 	andl	r11,0x2,COH
80007172:	a3 88       	lsr	r8,0x2
80007174:	58 0b       	cp.w	r11,0
80007176:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000717a:	f9 bc 01 01 	movne	r12,1
8000717e:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007182:	f9 bc 00 02 	moveq	r12,2
80007186:	5e fc       	retal	r12
80007188:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000718c:	f0 0b 16 10 	lsr	r11,r8,0x10
80007190:	58 0a       	cp.w	r10,0
80007192:	f6 08 17 00 	moveq	r8,r11
80007196:	f9 bc 00 10 	moveq	r12,16
8000719a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000719e:	f0 0a 16 08 	lsr	r10,r8,0x8
800071a2:	58 0b       	cp.w	r11,0
800071a4:	f7 bc 00 f8 	subeq	r12,-8
800071a8:	f4 08 17 00 	moveq	r8,r10
800071ac:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800071b0:	f0 0a 16 04 	lsr	r10,r8,0x4
800071b4:	58 0b       	cp.w	r11,0
800071b6:	f7 bc 00 fc 	subeq	r12,-4
800071ba:	f4 08 17 00 	moveq	r8,r10
800071be:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800071c2:	f0 0a 16 02 	lsr	r10,r8,0x2
800071c6:	58 0b       	cp.w	r11,0
800071c8:	f7 bc 00 fe 	subeq	r12,-2
800071cc:	f4 08 17 00 	moveq	r8,r10
800071d0:	ed b8 00 00 	bld	r8,0x0
800071d4:	c0 60       	breq	800071e0 <__lo0bits+0x8a>
800071d6:	a1 98       	lsr	r8,0x1
800071d8:	c0 31       	brne	800071de <__lo0bits+0x88>
800071da:	32 0c       	mov	r12,32
800071dc:	5e fc       	retal	r12
800071de:	2f fc       	sub	r12,-1
800071e0:	93 08       	st.w	r9[0x0],r8
800071e2:	5e fc       	retal	r12

800071e4 <__mcmp>:
800071e4:	d4 01       	pushm	lr
800071e6:	18 98       	mov	r8,r12
800071e8:	76 49       	ld.w	r9,r11[0x10]
800071ea:	78 4c       	ld.w	r12,r12[0x10]
800071ec:	12 1c       	sub	r12,r9
800071ee:	c1 31       	brne	80007214 <__mcmp+0x30>
800071f0:	2f b9       	sub	r9,-5
800071f2:	a3 69       	lsl	r9,0x2
800071f4:	12 0b       	add	r11,r9
800071f6:	f0 09 00 09 	add	r9,r8,r9
800071fa:	2e c8       	sub	r8,-20
800071fc:	13 4e       	ld.w	lr,--r9
800071fe:	17 4a       	ld.w	r10,--r11
80007200:	14 3e       	cp.w	lr,r10
80007202:	c0 60       	breq	8000720e <__mcmp+0x2a>
80007204:	f9 bc 03 ff 	movlo	r12,-1
80007208:	f9 bc 02 01 	movhs	r12,1
8000720c:	d8 02       	popm	pc
8000720e:	10 39       	cp.w	r9,r8
80007210:	fe 9b ff f6 	brhi	800071fc <__mcmp+0x18>
80007214:	d8 02       	popm	pc
80007216:	d7 03       	nop

80007218 <_Bfree>:
80007218:	d4 21       	pushm	r4-r7,lr
8000721a:	18 97       	mov	r7,r12
8000721c:	16 95       	mov	r5,r11
8000721e:	78 96       	ld.w	r6,r12[0x24]
80007220:	58 06       	cp.w	r6,0
80007222:	c0 91       	brne	80007234 <_Bfree+0x1c>
80007224:	31 0c       	mov	r12,16
80007226:	fe b0 fd 15 	rcall	80006c50 <malloc>
8000722a:	99 36       	st.w	r12[0xc],r6
8000722c:	8f 9c       	st.w	r7[0x24],r12
8000722e:	99 16       	st.w	r12[0x4],r6
80007230:	99 26       	st.w	r12[0x8],r6
80007232:	99 06       	st.w	r12[0x0],r6
80007234:	58 05       	cp.w	r5,0
80007236:	c0 90       	breq	80007248 <_Bfree+0x30>
80007238:	6a 19       	ld.w	r9,r5[0x4]
8000723a:	6e 98       	ld.w	r8,r7[0x24]
8000723c:	70 38       	ld.w	r8,r8[0xc]
8000723e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007242:	8b 0a       	st.w	r5[0x0],r10
80007244:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007248:	d8 22       	popm	r4-r7,pc
8000724a:	d7 03       	nop

8000724c <_Balloc>:
8000724c:	d4 21       	pushm	r4-r7,lr
8000724e:	18 97       	mov	r7,r12
80007250:	16 96       	mov	r6,r11
80007252:	78 95       	ld.w	r5,r12[0x24]
80007254:	58 05       	cp.w	r5,0
80007256:	c0 91       	brne	80007268 <_Balloc+0x1c>
80007258:	31 0c       	mov	r12,16
8000725a:	fe b0 fc fb 	rcall	80006c50 <malloc>
8000725e:	99 35       	st.w	r12[0xc],r5
80007260:	8f 9c       	st.w	r7[0x24],r12
80007262:	99 15       	st.w	r12[0x4],r5
80007264:	99 25       	st.w	r12[0x8],r5
80007266:	99 05       	st.w	r12[0x0],r5
80007268:	6e 95       	ld.w	r5,r7[0x24]
8000726a:	6a 38       	ld.w	r8,r5[0xc]
8000726c:	58 08       	cp.w	r8,0
8000726e:	c0 b1       	brne	80007284 <_Balloc+0x38>
80007270:	31 0a       	mov	r10,16
80007272:	30 4b       	mov	r11,4
80007274:	0e 9c       	mov	r12,r7
80007276:	e0 a0 04 93 	rcall	80007b9c <_calloc_r>
8000727a:	8b 3c       	st.w	r5[0xc],r12
8000727c:	6e 98       	ld.w	r8,r7[0x24]
8000727e:	70 3c       	ld.w	r12,r8[0xc]
80007280:	58 0c       	cp.w	r12,0
80007282:	c1 b0       	breq	800072b8 <_Balloc+0x6c>
80007284:	6e 98       	ld.w	r8,r7[0x24]
80007286:	70 38       	ld.w	r8,r8[0xc]
80007288:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000728c:	70 0c       	ld.w	r12,r8[0x0]
8000728e:	58 0c       	cp.w	r12,0
80007290:	c0 40       	breq	80007298 <_Balloc+0x4c>
80007292:	78 09       	ld.w	r9,r12[0x0]
80007294:	91 09       	st.w	r8[0x0],r9
80007296:	c0 e8       	rjmp	800072b2 <_Balloc+0x66>
80007298:	0e 9c       	mov	r12,r7
8000729a:	30 17       	mov	r7,1
8000729c:	0e 9b       	mov	r11,r7
8000729e:	ee 06 09 47 	lsl	r7,r7,r6
800072a2:	ee ca ff fb 	sub	r10,r7,-5
800072a6:	a3 6a       	lsl	r10,0x2
800072a8:	e0 a0 04 7a 	rcall	80007b9c <_calloc_r>
800072ac:	c0 60       	breq	800072b8 <_Balloc+0x6c>
800072ae:	99 16       	st.w	r12[0x4],r6
800072b0:	99 27       	st.w	r12[0x8],r7
800072b2:	30 08       	mov	r8,0
800072b4:	99 38       	st.w	r12[0xc],r8
800072b6:	99 48       	st.w	r12[0x10],r8
800072b8:	d8 22       	popm	r4-r7,pc
800072ba:	d7 03       	nop

800072bc <__d2b>:
800072bc:	d4 31       	pushm	r0-r7,lr
800072be:	20 2d       	sub	sp,8
800072c0:	16 93       	mov	r3,r11
800072c2:	12 96       	mov	r6,r9
800072c4:	10 95       	mov	r5,r8
800072c6:	14 92       	mov	r2,r10
800072c8:	30 1b       	mov	r11,1
800072ca:	cc 1f       	rcall	8000724c <_Balloc>
800072cc:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800072d0:	50 09       	stdsp	sp[0x0],r9
800072d2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800072d6:	b5 a9       	sbr	r9,0x14
800072d8:	f0 01 16 14 	lsr	r1,r8,0x14
800072dc:	fb f9 1a 00 	st.wne	sp[0x0],r9
800072e0:	18 94       	mov	r4,r12
800072e2:	58 02       	cp.w	r2,0
800072e4:	c1 d0       	breq	8000731e <__d2b+0x62>
800072e6:	fa cc ff f8 	sub	r12,sp,-8
800072ea:	18 d2       	st.w	--r12,r2
800072ec:	c3 5f       	rcall	80007156 <__lo0bits>
800072ee:	40 18       	lddsp	r8,sp[0x4]
800072f0:	c0 d0       	breq	8000730a <__d2b+0x4e>
800072f2:	40 09       	lddsp	r9,sp[0x0]
800072f4:	f8 0a 11 20 	rsub	r10,r12,32
800072f8:	f2 0a 09 4a 	lsl	r10,r9,r10
800072fc:	f5 e8 10 08 	or	r8,r10,r8
80007300:	89 58       	st.w	r4[0x14],r8
80007302:	f2 0c 0a 49 	lsr	r9,r9,r12
80007306:	50 09       	stdsp	sp[0x0],r9
80007308:	c0 28       	rjmp	8000730c <__d2b+0x50>
8000730a:	89 58       	st.w	r4[0x14],r8
8000730c:	40 08       	lddsp	r8,sp[0x0]
8000730e:	58 08       	cp.w	r8,0
80007310:	f9 b3 01 02 	movne	r3,2
80007314:	f9 b3 00 01 	moveq	r3,1
80007318:	89 68       	st.w	r4[0x18],r8
8000731a:	89 43       	st.w	r4[0x10],r3
8000731c:	c0 88       	rjmp	8000732c <__d2b+0x70>
8000731e:	1a 9c       	mov	r12,sp
80007320:	c1 bf       	rcall	80007156 <__lo0bits>
80007322:	30 13       	mov	r3,1
80007324:	40 08       	lddsp	r8,sp[0x0]
80007326:	2e 0c       	sub	r12,-32
80007328:	89 43       	st.w	r4[0x10],r3
8000732a:	89 58       	st.w	r4[0x14],r8
8000732c:	58 01       	cp.w	r1,0
8000732e:	c0 90       	breq	80007340 <__d2b+0x84>
80007330:	e2 c1 04 33 	sub	r1,r1,1075
80007334:	18 01       	add	r1,r12
80007336:	8d 01       	st.w	r6[0x0],r1
80007338:	f8 0c 11 35 	rsub	r12,r12,53
8000733c:	8b 0c       	st.w	r5[0x0],r12
8000733e:	c0 c8       	rjmp	80007356 <__d2b+0x9a>
80007340:	e6 c8 ff fc 	sub	r8,r3,-4
80007344:	f8 cc 04 32 	sub	r12,r12,1074
80007348:	a5 73       	lsl	r3,0x5
8000734a:	8d 0c       	st.w	r6[0x0],r12
8000734c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007350:	cd 3e       	rcall	800070f6 <__hi0bits>
80007352:	18 13       	sub	r3,r12
80007354:	8b 03       	st.w	r5[0x0],r3
80007356:	08 9c       	mov	r12,r4
80007358:	2f ed       	sub	sp,-8
8000735a:	d8 32       	popm	r0-r7,pc

8000735c <__mdiff>:
8000735c:	d4 31       	pushm	r0-r7,lr
8000735e:	74 48       	ld.w	r8,r10[0x10]
80007360:	76 45       	ld.w	r5,r11[0x10]
80007362:	16 97       	mov	r7,r11
80007364:	14 96       	mov	r6,r10
80007366:	10 15       	sub	r5,r8
80007368:	c1 31       	brne	8000738e <__mdiff+0x32>
8000736a:	2f b8       	sub	r8,-5
8000736c:	ee ce ff ec 	sub	lr,r7,-20
80007370:	a3 68       	lsl	r8,0x2
80007372:	f4 08 00 0b 	add	r11,r10,r8
80007376:	ee 08 00 08 	add	r8,r7,r8
8000737a:	11 4a       	ld.w	r10,--r8
8000737c:	17 49       	ld.w	r9,--r11
8000737e:	12 3a       	cp.w	r10,r9
80007380:	c0 30       	breq	80007386 <__mdiff+0x2a>
80007382:	c0 e2       	brcc	8000739e <__mdiff+0x42>
80007384:	c0 78       	rjmp	80007392 <__mdiff+0x36>
80007386:	1c 38       	cp.w	r8,lr
80007388:	fe 9b ff f9 	brhi	8000737a <__mdiff+0x1e>
8000738c:	c4 98       	rjmp	8000741e <__mdiff+0xc2>
8000738e:	58 05       	cp.w	r5,0
80007390:	c0 64       	brge	8000739c <__mdiff+0x40>
80007392:	0e 98       	mov	r8,r7
80007394:	30 15       	mov	r5,1
80007396:	0c 97       	mov	r7,r6
80007398:	10 96       	mov	r6,r8
8000739a:	c0 28       	rjmp	8000739e <__mdiff+0x42>
8000739c:	30 05       	mov	r5,0
8000739e:	6e 1b       	ld.w	r11,r7[0x4]
800073a0:	c5 6f       	rcall	8000724c <_Balloc>
800073a2:	6e 49       	ld.w	r9,r7[0x10]
800073a4:	6c 44       	ld.w	r4,r6[0x10]
800073a6:	99 35       	st.w	r12[0xc],r5
800073a8:	2f b4       	sub	r4,-5
800073aa:	f2 c5 ff fb 	sub	r5,r9,-5
800073ae:	ec 04 00 24 	add	r4,r6,r4<<0x2
800073b2:	ee 05 00 25 	add	r5,r7,r5<<0x2
800073b6:	2e c6       	sub	r6,-20
800073b8:	2e c7       	sub	r7,-20
800073ba:	f8 c8 ff ec 	sub	r8,r12,-20
800073be:	30 0a       	mov	r10,0
800073c0:	0f 0e       	ld.w	lr,r7++
800073c2:	0d 0b       	ld.w	r11,r6++
800073c4:	fc 02 16 10 	lsr	r2,lr,0x10
800073c8:	f6 03 16 10 	lsr	r3,r11,0x10
800073cc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800073d0:	e4 03 01 03 	sub	r3,r2,r3
800073d4:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800073d8:	fc 0b 01 0b 	sub	r11,lr,r11
800073dc:	f6 0a 00 0a 	add	r10,r11,r10
800073e0:	b0 1a       	st.h	r8[0x2],r10
800073e2:	b1 4a       	asr	r10,0x10
800073e4:	e6 0a 00 0a 	add	r10,r3,r10
800073e8:	b0 0a       	st.h	r8[0x0],r10
800073ea:	2f c8       	sub	r8,-4
800073ec:	b1 4a       	asr	r10,0x10
800073ee:	08 36       	cp.w	r6,r4
800073f0:	ce 83       	brcs	800073c0 <__mdiff+0x64>
800073f2:	c0 d8       	rjmp	8000740c <__mdiff+0xb0>
800073f4:	0f 0b       	ld.w	r11,r7++
800073f6:	f6 0e 16 10 	lsr	lr,r11,0x10
800073fa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800073fe:	16 0a       	add	r10,r11
80007400:	b0 1a       	st.h	r8[0x2],r10
80007402:	b1 4a       	asr	r10,0x10
80007404:	1c 0a       	add	r10,lr
80007406:	b0 0a       	st.h	r8[0x0],r10
80007408:	2f c8       	sub	r8,-4
8000740a:	b1 4a       	asr	r10,0x10
8000740c:	0a 37       	cp.w	r7,r5
8000740e:	cf 33       	brcs	800073f4 <__mdiff+0x98>
80007410:	c0 28       	rjmp	80007414 <__mdiff+0xb8>
80007412:	20 19       	sub	r9,1
80007414:	11 4a       	ld.w	r10,--r8
80007416:	58 0a       	cp.w	r10,0
80007418:	cf d0       	breq	80007412 <__mdiff+0xb6>
8000741a:	99 49       	st.w	r12[0x10],r9
8000741c:	d8 32       	popm	r0-r7,pc
8000741e:	30 0b       	mov	r11,0
80007420:	c1 6f       	rcall	8000724c <_Balloc>
80007422:	30 18       	mov	r8,1
80007424:	99 48       	st.w	r12[0x10],r8
80007426:	30 08       	mov	r8,0
80007428:	99 58       	st.w	r12[0x14],r8
8000742a:	d8 32       	popm	r0-r7,pc

8000742c <__lshift>:
8000742c:	d4 31       	pushm	r0-r7,lr
8000742e:	16 97       	mov	r7,r11
80007430:	76 46       	ld.w	r6,r11[0x10]
80007432:	f4 02 14 05 	asr	r2,r10,0x5
80007436:	2f f6       	sub	r6,-1
80007438:	14 93       	mov	r3,r10
8000743a:	18 94       	mov	r4,r12
8000743c:	04 06       	add	r6,r2
8000743e:	76 1b       	ld.w	r11,r11[0x4]
80007440:	6e 28       	ld.w	r8,r7[0x8]
80007442:	c0 38       	rjmp	80007448 <__lshift+0x1c>
80007444:	2f fb       	sub	r11,-1
80007446:	a1 78       	lsl	r8,0x1
80007448:	10 36       	cp.w	r6,r8
8000744a:	fe 99 ff fd 	brgt	80007444 <__lshift+0x18>
8000744e:	08 9c       	mov	r12,r4
80007450:	cf ee       	rcall	8000724c <_Balloc>
80007452:	30 09       	mov	r9,0
80007454:	18 95       	mov	r5,r12
80007456:	f8 c8 ff ec 	sub	r8,r12,-20
8000745a:	12 9a       	mov	r10,r9
8000745c:	c0 38       	rjmp	80007462 <__lshift+0x36>
8000745e:	10 aa       	st.w	r8++,r10
80007460:	2f f9       	sub	r9,-1
80007462:	04 39       	cp.w	r9,r2
80007464:	cf d5       	brlt	8000745e <__lshift+0x32>
80007466:	6e 4b       	ld.w	r11,r7[0x10]
80007468:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000746c:	2f bb       	sub	r11,-5
8000746e:	ee c9 ff ec 	sub	r9,r7,-20
80007472:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007476:	58 03       	cp.w	r3,0
80007478:	c1 30       	breq	8000749e <__lshift+0x72>
8000747a:	e6 0c 11 20 	rsub	r12,r3,32
8000747e:	30 0a       	mov	r10,0
80007480:	72 02       	ld.w	r2,r9[0x0]
80007482:	e4 03 09 42 	lsl	r2,r2,r3
80007486:	04 4a       	or	r10,r2
80007488:	10 aa       	st.w	r8++,r10
8000748a:	13 0a       	ld.w	r10,r9++
8000748c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007490:	16 39       	cp.w	r9,r11
80007492:	cf 73       	brcs	80007480 <__lshift+0x54>
80007494:	91 0a       	st.w	r8[0x0],r10
80007496:	58 0a       	cp.w	r10,0
80007498:	c0 70       	breq	800074a6 <__lshift+0x7a>
8000749a:	2f f6       	sub	r6,-1
8000749c:	c0 58       	rjmp	800074a6 <__lshift+0x7a>
8000749e:	13 0a       	ld.w	r10,r9++
800074a0:	10 aa       	st.w	r8++,r10
800074a2:	16 39       	cp.w	r9,r11
800074a4:	cf d3       	brcs	8000749e <__lshift+0x72>
800074a6:	08 9c       	mov	r12,r4
800074a8:	20 16       	sub	r6,1
800074aa:	0e 9b       	mov	r11,r7
800074ac:	8b 46       	st.w	r5[0x10],r6
800074ae:	cb 5e       	rcall	80007218 <_Bfree>
800074b0:	0a 9c       	mov	r12,r5
800074b2:	d8 32       	popm	r0-r7,pc

800074b4 <__multiply>:
800074b4:	d4 31       	pushm	r0-r7,lr
800074b6:	20 2d       	sub	sp,8
800074b8:	76 49       	ld.w	r9,r11[0x10]
800074ba:	74 48       	ld.w	r8,r10[0x10]
800074bc:	16 96       	mov	r6,r11
800074be:	14 95       	mov	r5,r10
800074c0:	10 39       	cp.w	r9,r8
800074c2:	ec 08 17 50 	movlt	r8,r6
800074c6:	ea 06 17 50 	movlt	r6,r5
800074ca:	f0 05 17 50 	movlt	r5,r8
800074ce:	6c 28       	ld.w	r8,r6[0x8]
800074d0:	76 43       	ld.w	r3,r11[0x10]
800074d2:	74 42       	ld.w	r2,r10[0x10]
800074d4:	76 1b       	ld.w	r11,r11[0x4]
800074d6:	e4 03 00 07 	add	r7,r2,r3
800074da:	10 37       	cp.w	r7,r8
800074dc:	f7 bb 09 ff 	subgt	r11,-1
800074e0:	cb 6e       	rcall	8000724c <_Balloc>
800074e2:	ee c4 ff fb 	sub	r4,r7,-5
800074e6:	f8 c9 ff ec 	sub	r9,r12,-20
800074ea:	f8 04 00 24 	add	r4,r12,r4<<0x2
800074ee:	30 0a       	mov	r10,0
800074f0:	12 98       	mov	r8,r9
800074f2:	c0 28       	rjmp	800074f6 <__multiply+0x42>
800074f4:	10 aa       	st.w	r8++,r10
800074f6:	08 38       	cp.w	r8,r4
800074f8:	cf e3       	brcs	800074f4 <__multiply+0x40>
800074fa:	2f b3       	sub	r3,-5
800074fc:	2f b2       	sub	r2,-5
800074fe:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007502:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007506:	ec cb ff ec 	sub	r11,r6,-20
8000750a:	50 12       	stdsp	sp[0x4],r2
8000750c:	ea ca ff ec 	sub	r10,r5,-20
80007510:	c4 48       	rjmp	80007598 <__multiply+0xe4>
80007512:	94 95       	ld.uh	r5,r10[0x2]
80007514:	58 05       	cp.w	r5,0
80007516:	c2 00       	breq	80007556 <__multiply+0xa2>
80007518:	12 98       	mov	r8,r9
8000751a:	16 96       	mov	r6,r11
8000751c:	30 0e       	mov	lr,0
8000751e:	50 09       	stdsp	sp[0x0],r9
80007520:	0d 02       	ld.w	r2,r6++
80007522:	e4 00 16 10 	lsr	r0,r2,0x10
80007526:	70 01       	ld.w	r1,r8[0x0]
80007528:	70 09       	ld.w	r9,r8[0x0]
8000752a:	b1 81       	lsr	r1,0x10
8000752c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007530:	e0 05 03 41 	mac	r1,r0,r5
80007534:	ab 32       	mul	r2,r5
80007536:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000753a:	00 02       	add	r2,r0
8000753c:	e4 0e 00 0e 	add	lr,r2,lr
80007540:	b0 1e       	st.h	r8[0x2],lr
80007542:	b1 8e       	lsr	lr,0x10
80007544:	1c 01       	add	r1,lr
80007546:	b0 01       	st.h	r8[0x0],r1
80007548:	e2 0e 16 10 	lsr	lr,r1,0x10
8000754c:	2f c8       	sub	r8,-4
8000754e:	06 36       	cp.w	r6,r3
80007550:	ce 83       	brcs	80007520 <__multiply+0x6c>
80007552:	40 09       	lddsp	r9,sp[0x0]
80007554:	91 0e       	st.w	r8[0x0],lr
80007556:	94 86       	ld.uh	r6,r10[0x0]
80007558:	58 06       	cp.w	r6,0
8000755a:	c1 d0       	breq	80007594 <__multiply+0xe0>
8000755c:	72 02       	ld.w	r2,r9[0x0]
8000755e:	12 98       	mov	r8,r9
80007560:	16 9e       	mov	lr,r11
80007562:	30 05       	mov	r5,0
80007564:	b0 12       	st.h	r8[0x2],r2
80007566:	1d 01       	ld.w	r1,lr++
80007568:	90 82       	ld.uh	r2,r8[0x0]
8000756a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000756e:	ad 30       	mul	r0,r6
80007570:	e0 02 00 02 	add	r2,r0,r2
80007574:	e4 05 00 05 	add	r5,r2,r5
80007578:	b0 05       	st.h	r8[0x0],r5
8000757a:	b1 85       	lsr	r5,0x10
8000757c:	b1 81       	lsr	r1,0x10
8000757e:	2f c8       	sub	r8,-4
80007580:	ad 31       	mul	r1,r6
80007582:	90 92       	ld.uh	r2,r8[0x2]
80007584:	e2 02 00 02 	add	r2,r1,r2
80007588:	0a 02       	add	r2,r5
8000758a:	e4 05 16 10 	lsr	r5,r2,0x10
8000758e:	06 3e       	cp.w	lr,r3
80007590:	ce a3       	brcs	80007564 <__multiply+0xb0>
80007592:	91 02       	st.w	r8[0x0],r2
80007594:	2f ca       	sub	r10,-4
80007596:	2f c9       	sub	r9,-4
80007598:	40 18       	lddsp	r8,sp[0x4]
8000759a:	10 3a       	cp.w	r10,r8
8000759c:	cb b3       	brcs	80007512 <__multiply+0x5e>
8000759e:	c0 28       	rjmp	800075a2 <__multiply+0xee>
800075a0:	20 17       	sub	r7,1
800075a2:	58 07       	cp.w	r7,0
800075a4:	e0 8a 00 05 	brle	800075ae <__multiply+0xfa>
800075a8:	09 48       	ld.w	r8,--r4
800075aa:	58 08       	cp.w	r8,0
800075ac:	cf a0       	breq	800075a0 <__multiply+0xec>
800075ae:	99 47       	st.w	r12[0x10],r7
800075b0:	2f ed       	sub	sp,-8
800075b2:	d8 32       	popm	r0-r7,pc

800075b4 <__i2b>:
800075b4:	d4 21       	pushm	r4-r7,lr
800075b6:	16 97       	mov	r7,r11
800075b8:	30 1b       	mov	r11,1
800075ba:	c4 9e       	rcall	8000724c <_Balloc>
800075bc:	30 19       	mov	r9,1
800075be:	99 57       	st.w	r12[0x14],r7
800075c0:	99 49       	st.w	r12[0x10],r9
800075c2:	d8 22       	popm	r4-r7,pc

800075c4 <__multadd>:
800075c4:	d4 31       	pushm	r0-r7,lr
800075c6:	30 08       	mov	r8,0
800075c8:	12 95       	mov	r5,r9
800075ca:	16 97       	mov	r7,r11
800075cc:	18 96       	mov	r6,r12
800075ce:	76 44       	ld.w	r4,r11[0x10]
800075d0:	f6 c9 ff ec 	sub	r9,r11,-20
800075d4:	72 0b       	ld.w	r11,r9[0x0]
800075d6:	f6 0c 16 10 	lsr	r12,r11,0x10
800075da:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800075de:	f4 0c 02 4c 	mul	r12,r10,r12
800075e2:	f4 0b 03 45 	mac	r5,r10,r11
800075e6:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800075ea:	b1 85       	lsr	r5,0x10
800075ec:	18 05       	add	r5,r12
800075ee:	ea 0c 15 10 	lsl	r12,r5,0x10
800075f2:	f8 0b 00 0b 	add	r11,r12,r11
800075f6:	12 ab       	st.w	r9++,r11
800075f8:	2f f8       	sub	r8,-1
800075fa:	b1 85       	lsr	r5,0x10
800075fc:	08 38       	cp.w	r8,r4
800075fe:	ce b5       	brlt	800075d4 <__multadd+0x10>
80007600:	58 05       	cp.w	r5,0
80007602:	c1 c0       	breq	8000763a <__multadd+0x76>
80007604:	6e 28       	ld.w	r8,r7[0x8]
80007606:	10 34       	cp.w	r4,r8
80007608:	c1 35       	brlt	8000762e <__multadd+0x6a>
8000760a:	6e 1b       	ld.w	r11,r7[0x4]
8000760c:	0c 9c       	mov	r12,r6
8000760e:	2f fb       	sub	r11,-1
80007610:	c1 ee       	rcall	8000724c <_Balloc>
80007612:	6e 4a       	ld.w	r10,r7[0x10]
80007614:	ee cb ff f4 	sub	r11,r7,-12
80007618:	18 93       	mov	r3,r12
8000761a:	2f ea       	sub	r10,-2
8000761c:	2f 4c       	sub	r12,-12
8000761e:	a3 6a       	lsl	r10,0x2
80007620:	fe b0 de 36 	rcall	8000328c <memcpy>
80007624:	0e 9b       	mov	r11,r7
80007626:	0c 9c       	mov	r12,r6
80007628:	fe b0 fd f8 	rcall	80007218 <_Bfree>
8000762c:	06 97       	mov	r7,r3
8000762e:	e8 c8 ff ff 	sub	r8,r4,-1
80007632:	2f b4       	sub	r4,-5
80007634:	8f 48       	st.w	r7[0x10],r8
80007636:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000763a:	0e 9c       	mov	r12,r7
8000763c:	d8 32       	popm	r0-r7,pc
8000763e:	d7 03       	nop

80007640 <__pow5mult>:
80007640:	d4 31       	pushm	r0-r7,lr
80007642:	14 96       	mov	r6,r10
80007644:	18 97       	mov	r7,r12
80007646:	16 94       	mov	r4,r11
80007648:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000764c:	c0 90       	breq	8000765e <__pow5mult+0x1e>
8000764e:	20 18       	sub	r8,1
80007650:	fe c9 e1 f8 	sub	r9,pc,-7688
80007654:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007658:	30 09       	mov	r9,0
8000765a:	cb 5f       	rcall	800075c4 <__multadd>
8000765c:	18 94       	mov	r4,r12
8000765e:	a3 46       	asr	r6,0x2
80007660:	c3 40       	breq	800076c8 <__pow5mult+0x88>
80007662:	6e 95       	ld.w	r5,r7[0x24]
80007664:	58 05       	cp.w	r5,0
80007666:	c0 91       	brne	80007678 <__pow5mult+0x38>
80007668:	31 0c       	mov	r12,16
8000766a:	fe b0 fa f3 	rcall	80006c50 <malloc>
8000766e:	99 35       	st.w	r12[0xc],r5
80007670:	8f 9c       	st.w	r7[0x24],r12
80007672:	99 15       	st.w	r12[0x4],r5
80007674:	99 25       	st.w	r12[0x8],r5
80007676:	99 05       	st.w	r12[0x0],r5
80007678:	6e 93       	ld.w	r3,r7[0x24]
8000767a:	66 25       	ld.w	r5,r3[0x8]
8000767c:	58 05       	cp.w	r5,0
8000767e:	c0 c1       	brne	80007696 <__pow5mult+0x56>
80007680:	e0 6b 02 71 	mov	r11,625
80007684:	0e 9c       	mov	r12,r7
80007686:	c9 7f       	rcall	800075b4 <__i2b>
80007688:	87 2c       	st.w	r3[0x8],r12
8000768a:	30 08       	mov	r8,0
8000768c:	18 95       	mov	r5,r12
8000768e:	99 08       	st.w	r12[0x0],r8
80007690:	c0 38       	rjmp	80007696 <__pow5mult+0x56>
80007692:	06 9c       	mov	r12,r3
80007694:	18 95       	mov	r5,r12
80007696:	ed b6 00 00 	bld	r6,0x0
8000769a:	c0 b1       	brne	800076b0 <__pow5mult+0x70>
8000769c:	08 9b       	mov	r11,r4
8000769e:	0a 9a       	mov	r10,r5
800076a0:	0e 9c       	mov	r12,r7
800076a2:	c0 9f       	rcall	800074b4 <__multiply>
800076a4:	08 9b       	mov	r11,r4
800076a6:	18 93       	mov	r3,r12
800076a8:	0e 9c       	mov	r12,r7
800076aa:	06 94       	mov	r4,r3
800076ac:	fe b0 fd b6 	rcall	80007218 <_Bfree>
800076b0:	a1 56       	asr	r6,0x1
800076b2:	c0 b0       	breq	800076c8 <__pow5mult+0x88>
800076b4:	6a 03       	ld.w	r3,r5[0x0]
800076b6:	58 03       	cp.w	r3,0
800076b8:	ce d1       	brne	80007692 <__pow5mult+0x52>
800076ba:	0a 9a       	mov	r10,r5
800076bc:	0a 9b       	mov	r11,r5
800076be:	0e 9c       	mov	r12,r7
800076c0:	cf ae       	rcall	800074b4 <__multiply>
800076c2:	8b 0c       	st.w	r5[0x0],r12
800076c4:	99 03       	st.w	r12[0x0],r3
800076c6:	ce 7b       	rjmp	80007694 <__pow5mult+0x54>
800076c8:	08 9c       	mov	r12,r4
800076ca:	d8 32       	popm	r0-r7,pc

800076cc <_realloc_r>:
800076cc:	d4 31       	pushm	r0-r7,lr
800076ce:	20 1d       	sub	sp,4
800076d0:	16 94       	mov	r4,r11
800076d2:	18 92       	mov	r2,r12
800076d4:	14 9b       	mov	r11,r10
800076d6:	58 04       	cp.w	r4,0
800076d8:	c0 51       	brne	800076e2 <_realloc_r+0x16>
800076da:	fe b0 fa c3 	rcall	80006c60 <_malloc_r>
800076de:	18 95       	mov	r5,r12
800076e0:	c5 39       	rjmp	80007986 <_realloc_r+0x2ba>
800076e2:	50 0a       	stdsp	sp[0x0],r10
800076e4:	fe b0 fd 07 	rcall	800070f2 <__malloc_lock>
800076e8:	40 0b       	lddsp	r11,sp[0x0]
800076ea:	f6 c8 ff f5 	sub	r8,r11,-11
800076ee:	e8 c1 00 08 	sub	r1,r4,8
800076f2:	10 96       	mov	r6,r8
800076f4:	62 1c       	ld.w	r12,r1[0x4]
800076f6:	e0 16 ff f8 	andl	r6,0xfff8
800076fa:	59 68       	cp.w	r8,22
800076fc:	f9 b6 08 10 	movls	r6,16
80007700:	16 36       	cp.w	r6,r11
80007702:	5f 38       	srlo	r8
80007704:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007708:	c0 50       	breq	80007712 <_realloc_r+0x46>
8000770a:	30 c8       	mov	r8,12
8000770c:	30 05       	mov	r5,0
8000770e:	85 38       	st.w	r2[0xc],r8
80007710:	c3 b9       	rjmp	80007986 <_realloc_r+0x2ba>
80007712:	18 90       	mov	r0,r12
80007714:	e0 10 ff fc 	andl	r0,0xfffc
80007718:	0c 30       	cp.w	r0,r6
8000771a:	e0 84 01 0b 	brge	80007930 <_realloc_r+0x264>
8000771e:	e0 68 01 08 	mov	r8,264
80007722:	e2 00 00 09 	add	r9,r1,r0
80007726:	70 25       	ld.w	r5,r8[0x8]
80007728:	0a 39       	cp.w	r9,r5
8000772a:	c0 90       	breq	8000773c <_realloc_r+0x70>
8000772c:	72 1a       	ld.w	r10,r9[0x4]
8000772e:	a1 ca       	cbr	r10,0x0
80007730:	f2 0a 00 0a 	add	r10,r9,r10
80007734:	74 1a       	ld.w	r10,r10[0x4]
80007736:	ed ba 00 00 	bld	r10,0x0
8000773a:	c2 20       	breq	8000777e <_realloc_r+0xb2>
8000773c:	72 1a       	ld.w	r10,r9[0x4]
8000773e:	e0 1a ff fc 	andl	r10,0xfffc
80007742:	f4 00 00 03 	add	r3,r10,r0
80007746:	0a 39       	cp.w	r9,r5
80007748:	c1 31       	brne	8000776e <_realloc_r+0xa2>
8000774a:	ec c7 ff f0 	sub	r7,r6,-16
8000774e:	0e 33       	cp.w	r3,r7
80007750:	c1 95       	brlt	80007782 <_realloc_r+0xb6>
80007752:	e2 06 00 09 	add	r9,r1,r6
80007756:	0c 13       	sub	r3,r6
80007758:	a1 a3       	sbr	r3,0x0
8000775a:	93 13       	st.w	r9[0x4],r3
8000775c:	91 29       	st.w	r8[0x8],r9
8000775e:	04 9c       	mov	r12,r2
80007760:	62 18       	ld.w	r8,r1[0x4]
80007762:	08 95       	mov	r5,r4
80007764:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007768:	10 46       	or	r6,r8
8000776a:	83 16       	st.w	r1[0x4],r6
8000776c:	c0 b9       	rjmp	80007982 <_realloc_r+0x2b6>
8000776e:	0c 33       	cp.w	r3,r6
80007770:	c0 95       	brlt	80007782 <_realloc_r+0xb6>
80007772:	72 28       	ld.w	r8,r9[0x8]
80007774:	02 97       	mov	r7,r1
80007776:	72 39       	ld.w	r9,r9[0xc]
80007778:	93 28       	st.w	r9[0x8],r8
8000777a:	91 39       	st.w	r8[0xc],r9
8000777c:	cd c8       	rjmp	80007934 <_realloc_r+0x268>
8000777e:	30 0a       	mov	r10,0
80007780:	14 99       	mov	r9,r10
80007782:	ed bc 00 00 	bld	r12,0x0
80007786:	e0 80 00 95 	breq	800078b0 <_realloc_r+0x1e4>
8000778a:	62 07       	ld.w	r7,r1[0x0]
8000778c:	e2 07 01 07 	sub	r7,r1,r7
80007790:	6e 1c       	ld.w	r12,r7[0x4]
80007792:	e0 1c ff fc 	andl	r12,0xfffc
80007796:	58 09       	cp.w	r9,0
80007798:	c5 60       	breq	80007844 <_realloc_r+0x178>
8000779a:	f8 00 00 03 	add	r3,r12,r0
8000779e:	0a 39       	cp.w	r9,r5
800077a0:	c4 81       	brne	80007830 <_realloc_r+0x164>
800077a2:	14 03       	add	r3,r10
800077a4:	ec c9 ff f0 	sub	r9,r6,-16
800077a8:	12 33       	cp.w	r3,r9
800077aa:	c4 d5       	brlt	80007844 <_realloc_r+0x178>
800077ac:	6e 3a       	ld.w	r10,r7[0xc]
800077ae:	6e 29       	ld.w	r9,r7[0x8]
800077b0:	95 29       	st.w	r10[0x8],r9
800077b2:	93 3a       	st.w	r9[0xc],r10
800077b4:	ee c5 ff f8 	sub	r5,r7,-8
800077b8:	e0 ca 00 04 	sub	r10,r0,4
800077bc:	e0 4a 00 24 	cp.w	r10,36
800077c0:	e0 8b 00 25 	brhi	8000780a <_realloc_r+0x13e>
800077c4:	0a 99       	mov	r9,r5
800077c6:	59 3a       	cp.w	r10,19
800077c8:	e0 88 00 1a 	brls	800077fc <_realloc_r+0x130>
800077cc:	09 09       	ld.w	r9,r4++
800077ce:	8b 09       	st.w	r5[0x0],r9
800077d0:	09 09       	ld.w	r9,r4++
800077d2:	8f 39       	st.w	r7[0xc],r9
800077d4:	ee c9 ff f0 	sub	r9,r7,-16
800077d8:	59 ba       	cp.w	r10,27
800077da:	e0 88 00 11 	brls	800077fc <_realloc_r+0x130>
800077de:	09 0b       	ld.w	r11,r4++
800077e0:	93 0b       	st.w	r9[0x0],r11
800077e2:	09 09       	ld.w	r9,r4++
800077e4:	8f 59       	st.w	r7[0x14],r9
800077e6:	ee c9 ff e8 	sub	r9,r7,-24
800077ea:	e0 4a 00 24 	cp.w	r10,36
800077ee:	c0 71       	brne	800077fc <_realloc_r+0x130>
800077f0:	09 0a       	ld.w	r10,r4++
800077f2:	93 0a       	st.w	r9[0x0],r10
800077f4:	ee c9 ff e0 	sub	r9,r7,-32
800077f8:	09 0a       	ld.w	r10,r4++
800077fa:	8f 7a       	st.w	r7[0x1c],r10
800077fc:	09 0a       	ld.w	r10,r4++
800077fe:	12 aa       	st.w	r9++,r10
80007800:	68 0a       	ld.w	r10,r4[0x0]
80007802:	93 0a       	st.w	r9[0x0],r10
80007804:	68 1a       	ld.w	r10,r4[0x4]
80007806:	93 1a       	st.w	r9[0x4],r10
80007808:	c0 78       	rjmp	80007816 <_realloc_r+0x14a>
8000780a:	50 08       	stdsp	sp[0x0],r8
8000780c:	08 9b       	mov	r11,r4
8000780e:	0a 9c       	mov	r12,r5
80007810:	fe b0 fc 4b 	rcall	800070a6 <memmove>
80007814:	40 08       	lddsp	r8,sp[0x0]
80007816:	ee 06 00 09 	add	r9,r7,r6
8000781a:	0c 13       	sub	r3,r6
8000781c:	a1 a3       	sbr	r3,0x0
8000781e:	93 13       	st.w	r9[0x4],r3
80007820:	91 29       	st.w	r8[0x8],r9
80007822:	04 9c       	mov	r12,r2
80007824:	6e 18       	ld.w	r8,r7[0x4]
80007826:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000782a:	10 46       	or	r6,r8
8000782c:	8f 16       	st.w	r7[0x4],r6
8000782e:	ca a8       	rjmp	80007982 <_realloc_r+0x2b6>
80007830:	14 03       	add	r3,r10
80007832:	0c 33       	cp.w	r3,r6
80007834:	c0 85       	brlt	80007844 <_realloc_r+0x178>
80007836:	72 28       	ld.w	r8,r9[0x8]
80007838:	72 39       	ld.w	r9,r9[0xc]
8000783a:	93 28       	st.w	r9[0x8],r8
8000783c:	91 39       	st.w	r8[0xc],r9
8000783e:	6e 28       	ld.w	r8,r7[0x8]
80007840:	6e 39       	ld.w	r9,r7[0xc]
80007842:	c0 78       	rjmp	80007850 <_realloc_r+0x184>
80007844:	f8 00 00 03 	add	r3,r12,r0
80007848:	0c 33       	cp.w	r3,r6
8000784a:	c3 35       	brlt	800078b0 <_realloc_r+0x1e4>
8000784c:	6e 39       	ld.w	r9,r7[0xc]
8000784e:	6e 28       	ld.w	r8,r7[0x8]
80007850:	93 28       	st.w	r9[0x8],r8
80007852:	91 39       	st.w	r8[0xc],r9
80007854:	e0 ca 00 04 	sub	r10,r0,4
80007858:	ee cc ff f8 	sub	r12,r7,-8
8000785c:	e0 4a 00 24 	cp.w	r10,36
80007860:	e0 8b 00 24 	brhi	800078a8 <_realloc_r+0x1dc>
80007864:	59 3a       	cp.w	r10,19
80007866:	e0 88 00 1a 	brls	8000789a <_realloc_r+0x1ce>
8000786a:	09 08       	ld.w	r8,r4++
8000786c:	99 08       	st.w	r12[0x0],r8
8000786e:	09 08       	ld.w	r8,r4++
80007870:	8f 38       	st.w	r7[0xc],r8
80007872:	ee cc ff f0 	sub	r12,r7,-16
80007876:	59 ba       	cp.w	r10,27
80007878:	e0 88 00 11 	brls	8000789a <_realloc_r+0x1ce>
8000787c:	09 08       	ld.w	r8,r4++
8000787e:	99 08       	st.w	r12[0x0],r8
80007880:	09 08       	ld.w	r8,r4++
80007882:	8f 58       	st.w	r7[0x14],r8
80007884:	ee cc ff e8 	sub	r12,r7,-24
80007888:	e0 4a 00 24 	cp.w	r10,36
8000788c:	c0 71       	brne	8000789a <_realloc_r+0x1ce>
8000788e:	09 08       	ld.w	r8,r4++
80007890:	99 08       	st.w	r12[0x0],r8
80007892:	ee cc ff e0 	sub	r12,r7,-32
80007896:	09 08       	ld.w	r8,r4++
80007898:	8f 78       	st.w	r7[0x1c],r8
8000789a:	09 08       	ld.w	r8,r4++
8000789c:	18 a8       	st.w	r12++,r8
8000789e:	68 08       	ld.w	r8,r4[0x0]
800078a0:	99 08       	st.w	r12[0x0],r8
800078a2:	68 18       	ld.w	r8,r4[0x4]
800078a4:	99 18       	st.w	r12[0x4],r8
800078a6:	c4 78       	rjmp	80007934 <_realloc_r+0x268>
800078a8:	08 9b       	mov	r11,r4
800078aa:	fe b0 fb fe 	rcall	800070a6 <memmove>
800078ae:	c4 38       	rjmp	80007934 <_realloc_r+0x268>
800078b0:	04 9c       	mov	r12,r2
800078b2:	fe b0 f9 d7 	rcall	80006c60 <_malloc_r>
800078b6:	18 95       	mov	r5,r12
800078b8:	c3 a0       	breq	8000792c <_realloc_r+0x260>
800078ba:	62 18       	ld.w	r8,r1[0x4]
800078bc:	f8 c9 00 08 	sub	r9,r12,8
800078c0:	a1 c8       	cbr	r8,0x0
800078c2:	e2 08 00 08 	add	r8,r1,r8
800078c6:	10 39       	cp.w	r9,r8
800078c8:	c0 71       	brne	800078d6 <_realloc_r+0x20a>
800078ca:	72 13       	ld.w	r3,r9[0x4]
800078cc:	02 97       	mov	r7,r1
800078ce:	e0 13 ff fc 	andl	r3,0xfffc
800078d2:	00 03       	add	r3,r0
800078d4:	c3 08       	rjmp	80007934 <_realloc_r+0x268>
800078d6:	e0 ca 00 04 	sub	r10,r0,4
800078da:	e0 4a 00 24 	cp.w	r10,36
800078de:	e0 8b 00 20 	brhi	8000791e <_realloc_r+0x252>
800078e2:	08 99       	mov	r9,r4
800078e4:	18 98       	mov	r8,r12
800078e6:	59 3a       	cp.w	r10,19
800078e8:	e0 88 00 14 	brls	80007910 <_realloc_r+0x244>
800078ec:	13 0b       	ld.w	r11,r9++
800078ee:	10 ab       	st.w	r8++,r11
800078f0:	13 0b       	ld.w	r11,r9++
800078f2:	10 ab       	st.w	r8++,r11
800078f4:	59 ba       	cp.w	r10,27
800078f6:	e0 88 00 0d 	brls	80007910 <_realloc_r+0x244>
800078fa:	13 0b       	ld.w	r11,r9++
800078fc:	10 ab       	st.w	r8++,r11
800078fe:	13 0b       	ld.w	r11,r9++
80007900:	10 ab       	st.w	r8++,r11
80007902:	e0 4a 00 24 	cp.w	r10,36
80007906:	c0 51       	brne	80007910 <_realloc_r+0x244>
80007908:	13 0a       	ld.w	r10,r9++
8000790a:	10 aa       	st.w	r8++,r10
8000790c:	13 0a       	ld.w	r10,r9++
8000790e:	10 aa       	st.w	r8++,r10
80007910:	13 0a       	ld.w	r10,r9++
80007912:	10 aa       	st.w	r8++,r10
80007914:	72 0a       	ld.w	r10,r9[0x0]
80007916:	91 0a       	st.w	r8[0x0],r10
80007918:	72 19       	ld.w	r9,r9[0x4]
8000791a:	91 19       	st.w	r8[0x4],r9
8000791c:	c0 48       	rjmp	80007924 <_realloc_r+0x258>
8000791e:	08 9b       	mov	r11,r4
80007920:	fe b0 fb c3 	rcall	800070a6 <memmove>
80007924:	08 9b       	mov	r11,r4
80007926:	04 9c       	mov	r12,r2
80007928:	fe b0 f6 f6 	rcall	80006714 <_free_r>
8000792c:	04 9c       	mov	r12,r2
8000792e:	c2 a8       	rjmp	80007982 <_realloc_r+0x2b6>
80007930:	00 93       	mov	r3,r0
80007932:	02 97       	mov	r7,r1
80007934:	e6 06 01 09 	sub	r9,r3,r6
80007938:	6e 18       	ld.w	r8,r7[0x4]
8000793a:	58 f9       	cp.w	r9,15
8000793c:	e0 88 00 16 	brls	80007968 <_realloc_r+0x29c>
80007940:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007944:	ed e8 10 08 	or	r8,r6,r8
80007948:	8f 18       	st.w	r7[0x4],r8
8000794a:	12 98       	mov	r8,r9
8000794c:	a1 a8       	sbr	r8,0x0
8000794e:	ee 06 00 0b 	add	r11,r7,r6
80007952:	f6 09 00 09 	add	r9,r11,r9
80007956:	97 18       	st.w	r11[0x4],r8
80007958:	72 18       	ld.w	r8,r9[0x4]
8000795a:	a1 a8       	sbr	r8,0x0
8000795c:	2f 8b       	sub	r11,-8
8000795e:	93 18       	st.w	r9[0x4],r8
80007960:	04 9c       	mov	r12,r2
80007962:	fe b0 f6 d9 	rcall	80006714 <_free_r>
80007966:	c0 b8       	rjmp	8000797c <_realloc_r+0x2b0>
80007968:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000796c:	e7 e8 10 08 	or	r8,r3,r8
80007970:	8f 18       	st.w	r7[0x4],r8
80007972:	ee 03 00 03 	add	r3,r7,r3
80007976:	66 18       	ld.w	r8,r3[0x4]
80007978:	a1 a8       	sbr	r8,0x0
8000797a:	87 18       	st.w	r3[0x4],r8
8000797c:	04 9c       	mov	r12,r2
8000797e:	ee c5 ff f8 	sub	r5,r7,-8
80007982:	fe b0 fb b9 	rcall	800070f4 <__malloc_unlock>
80007986:	0a 9c       	mov	r12,r5
80007988:	2f fd       	sub	sp,-4
8000798a:	d8 32       	popm	r0-r7,pc

8000798c <__isinfd>:
8000798c:	14 98       	mov	r8,r10
8000798e:	fc 19 7f f0 	movh	r9,0x7ff0
80007992:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007996:	f0 0b 11 00 	rsub	r11,r8,0
8000799a:	f7 e8 10 08 	or	r8,r11,r8
8000799e:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800079a2:	f2 08 01 08 	sub	r8,r9,r8
800079a6:	f0 0c 11 00 	rsub	r12,r8,0
800079aa:	f9 e8 10 08 	or	r8,r12,r8
800079ae:	f0 0c 14 1f 	asr	r12,r8,0x1f
800079b2:	2f fc       	sub	r12,-1
800079b4:	5e fc       	retal	r12

800079b6 <__isnand>:
800079b6:	14 98       	mov	r8,r10
800079b8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800079bc:	f0 0c 11 00 	rsub	r12,r8,0
800079c0:	10 4c       	or	r12,r8
800079c2:	fc 18 7f f0 	movh	r8,0x7ff0
800079c6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800079ca:	f0 0c 01 0c 	sub	r12,r8,r12
800079ce:	bf 9c       	lsr	r12,0x1f
800079d0:	5e fc       	retal	r12
800079d2:	d7 03       	nop

800079d4 <_sbrk_r>:
800079d4:	d4 21       	pushm	r4-r7,lr
800079d6:	30 08       	mov	r8,0
800079d8:	18 97       	mov	r7,r12
800079da:	e0 66 06 64 	mov	r6,1636
800079de:	16 9c       	mov	r12,r11
800079e0:	8d 08       	st.w	r6[0x0],r8
800079e2:	ca fc       	rcall	80007b40 <_sbrk>
800079e4:	5b fc       	cp.w	r12,-1
800079e6:	c0 51       	brne	800079f0 <_sbrk_r+0x1c>
800079e8:	6c 08       	ld.w	r8,r6[0x0]
800079ea:	58 08       	cp.w	r8,0
800079ec:	ef f8 1a 03 	st.wne	r7[0xc],r8
800079f0:	d8 22       	popm	r4-r7,pc
800079f2:	d7 03       	nop

800079f4 <__sclose>:
800079f4:	d4 01       	pushm	lr
800079f6:	96 7b       	ld.sh	r11,r11[0xe]
800079f8:	cf ec       	rcall	80007bf4 <_close_r>
800079fa:	d8 02       	popm	pc

800079fc <__sseek>:
800079fc:	d4 21       	pushm	r4-r7,lr
800079fe:	16 97       	mov	r7,r11
80007a00:	96 7b       	ld.sh	r11,r11[0xe]
80007a02:	c8 5d       	rcall	80007d0c <_lseek_r>
80007a04:	8e 68       	ld.sh	r8,r7[0xc]
80007a06:	10 99       	mov	r9,r8
80007a08:	ad c8       	cbr	r8,0xc
80007a0a:	ad a9       	sbr	r9,0xc
80007a0c:	5b fc       	cp.w	r12,-1
80007a0e:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007a12:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007a16:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007a1a:	d8 22       	popm	r4-r7,pc

80007a1c <__swrite>:
80007a1c:	d4 21       	pushm	r4-r7,lr
80007a1e:	96 68       	ld.sh	r8,r11[0xc]
80007a20:	16 97       	mov	r7,r11
80007a22:	14 95       	mov	r5,r10
80007a24:	12 94       	mov	r4,r9
80007a26:	e2 18 01 00 	andl	r8,0x100,COH
80007a2a:	18 96       	mov	r6,r12
80007a2c:	c0 50       	breq	80007a36 <__swrite+0x1a>
80007a2e:	30 29       	mov	r9,2
80007a30:	30 0a       	mov	r10,0
80007a32:	96 7b       	ld.sh	r11,r11[0xe]
80007a34:	c6 cd       	rcall	80007d0c <_lseek_r>
80007a36:	8e 68       	ld.sh	r8,r7[0xc]
80007a38:	ad c8       	cbr	r8,0xc
80007a3a:	08 99       	mov	r9,r4
80007a3c:	0a 9a       	mov	r10,r5
80007a3e:	8e 7b       	ld.sh	r11,r7[0xe]
80007a40:	0c 9c       	mov	r12,r6
80007a42:	ae 68       	st.h	r7[0xc],r8
80007a44:	c9 ac       	rcall	80007b78 <_write_r>
80007a46:	d8 22       	popm	r4-r7,pc

80007a48 <__sread>:
80007a48:	d4 21       	pushm	r4-r7,lr
80007a4a:	16 97       	mov	r7,r11
80007a4c:	96 7b       	ld.sh	r11,r11[0xe]
80007a4e:	c7 1d       	rcall	80007d30 <_read_r>
80007a50:	c0 65       	brlt	80007a5c <__sread+0x14>
80007a52:	6f 58       	ld.w	r8,r7[0x54]
80007a54:	18 08       	add	r8,r12
80007a56:	ef 48 00 54 	st.w	r7[84],r8
80007a5a:	d8 22       	popm	r4-r7,pc
80007a5c:	8e 68       	ld.sh	r8,r7[0xc]
80007a5e:	ad c8       	cbr	r8,0xc
80007a60:	ae 68       	st.h	r7[0xc],r8
80007a62:	d8 22       	popm	r4-r7,pc

80007a64 <strlen>:
80007a64:	30 09       	mov	r9,0
80007a66:	18 98       	mov	r8,r12
80007a68:	c0 28       	rjmp	80007a6c <strlen+0x8>
80007a6a:	2f f8       	sub	r8,-1
80007a6c:	11 8a       	ld.ub	r10,r8[0x0]
80007a6e:	f2 0a 18 00 	cp.b	r10,r9
80007a72:	cf c1       	brne	80007a6a <strlen+0x6>
80007a74:	f0 0c 01 0c 	sub	r12,r8,r12
80007a78:	5e fc       	retal	r12
80007a7a:	d7 03       	nop

80007a7c <_close>:
80007a7c:	30 28       	mov	r8,2
80007a7e:	d6 73       	breakpoint
80007a80:	3f fc       	mov	r12,-1
80007a82:	35 8b       	mov	r11,88
80007a84:	58 0c       	cp.w	r12,0
80007a86:	5e 4c       	retge	r12
80007a88:	e0 6a 06 64 	mov	r10,1636
80007a8c:	95 0b       	st.w	r10[0x0],r11
80007a8e:	5e fc       	retal	r12

80007a90 <_lseek>:
80007a90:	30 58       	mov	r8,5
80007a92:	d6 73       	breakpoint
80007a94:	3f fc       	mov	r12,-1
80007a96:	35 8b       	mov	r11,88
80007a98:	58 0c       	cp.w	r12,0
80007a9a:	5e 4c       	retge	r12
80007a9c:	e0 6a 06 64 	mov	r10,1636
80007aa0:	95 0b       	st.w	r10[0x0],r11
80007aa2:	5e fc       	retal	r12

80007aa4 <_read>:
80007aa4:	30 38       	mov	r8,3
80007aa6:	d6 73       	breakpoint
80007aa8:	3f fc       	mov	r12,-1
80007aaa:	35 8b       	mov	r11,88
80007aac:	58 0c       	cp.w	r12,0
80007aae:	5e 4c       	retge	r12
80007ab0:	e0 6a 06 64 	mov	r10,1636
80007ab4:	95 0b       	st.w	r10[0x0],r11
80007ab6:	5e fc       	retal	r12

80007ab8 <_write>:
80007ab8:	30 48       	mov	r8,4
80007aba:	d6 73       	breakpoint
80007abc:	3f fc       	mov	r12,-1
80007abe:	35 8b       	mov	r11,88
80007ac0:	58 0c       	cp.w	r12,0
80007ac2:	5e 4c       	retge	r12
80007ac4:	e0 6a 06 64 	mov	r10,1636
80007ac8:	95 0b       	st.w	r10[0x0],r11
80007aca:	5e fc       	retal	r12

80007acc <isatty>:
80007acc:	30 b8       	mov	r8,11
80007ace:	d6 73       	breakpoint
80007ad0:	3f fc       	mov	r12,-1
80007ad2:	35 8b       	mov	r11,88
80007ad4:	58 0c       	cp.w	r12,0
80007ad6:	5e 4c       	retge	r12
80007ad8:	e0 6a 06 64 	mov	r10,1636
80007adc:	95 0b       	st.w	r10[0x0],r11
80007ade:	5e fc       	retal	r12

80007ae0 <_fstat_host>:
80007ae0:	30 98       	mov	r8,9
80007ae2:	d6 73       	breakpoint
80007ae4:	3f fc       	mov	r12,-1
80007ae6:	35 8b       	mov	r11,88
80007ae8:	58 0c       	cp.w	r12,0
80007aea:	5e 4c       	retge	r12
80007aec:	e0 6a 06 64 	mov	r10,1636
80007af0:	95 0b       	st.w	r10[0x0],r11
80007af2:	5e fc       	retal	r12

80007af4 <_fstat>:
80007af4:	d4 21       	pushm	r4-r7,lr
80007af6:	21 0d       	sub	sp,64
80007af8:	16 97       	mov	r7,r11
80007afa:	1a 9b       	mov	r11,sp
80007afc:	cf 2f       	rcall	80007ae0 <_fstat_host>
80007afe:	c0 34       	brge	80007b04 <_fstat+0x10>
80007b00:	3f fc       	mov	r12,-1
80007b02:	c1 c8       	rjmp	80007b3a <_fstat+0x46>
80007b04:	40 08       	lddsp	r8,sp[0x0]
80007b06:	ae 08       	st.h	r7[0x0],r8
80007b08:	40 18       	lddsp	r8,sp[0x4]
80007b0a:	ae 18       	st.h	r7[0x2],r8
80007b0c:	40 28       	lddsp	r8,sp[0x8]
80007b0e:	8f 18       	st.w	r7[0x4],r8
80007b10:	40 38       	lddsp	r8,sp[0xc]
80007b12:	ae 48       	st.h	r7[0x8],r8
80007b14:	40 48       	lddsp	r8,sp[0x10]
80007b16:	ae 58       	st.h	r7[0xa],r8
80007b18:	40 58       	lddsp	r8,sp[0x14]
80007b1a:	ae 68       	st.h	r7[0xc],r8
80007b1c:	40 68       	lddsp	r8,sp[0x18]
80007b1e:	ae 78       	st.h	r7[0xe],r8
80007b20:	40 88       	lddsp	r8,sp[0x20]
80007b22:	8f 48       	st.w	r7[0x10],r8
80007b24:	40 a8       	lddsp	r8,sp[0x28]
80007b26:	8f b8       	st.w	r7[0x2c],r8
80007b28:	40 c8       	lddsp	r8,sp[0x30]
80007b2a:	8f c8       	st.w	r7[0x30],r8
80007b2c:	40 d8       	lddsp	r8,sp[0x34]
80007b2e:	8f 58       	st.w	r7[0x14],r8
80007b30:	40 e8       	lddsp	r8,sp[0x38]
80007b32:	30 0c       	mov	r12,0
80007b34:	8f 78       	st.w	r7[0x1c],r8
80007b36:	40 f8       	lddsp	r8,sp[0x3c]
80007b38:	8f 98       	st.w	r7[0x24],r8
80007b3a:	2f 0d       	sub	sp,-64
80007b3c:	d8 22       	popm	r4-r7,pc
80007b3e:	d7 03       	nop

80007b40 <_sbrk>:
80007b40:	d4 01       	pushm	lr
80007b42:	e0 68 06 60 	mov	r8,1632
80007b46:	70 09       	ld.w	r9,r8[0x0]
80007b48:	58 09       	cp.w	r9,0
80007b4a:	c0 41       	brne	80007b52 <_sbrk+0x12>
80007b4c:	e0 69 06 68 	mov	r9,1640
80007b50:	91 09       	st.w	r8[0x0],r9
80007b52:	e0 69 06 60 	mov	r9,1632
80007b56:	e0 6a f0 00 	mov	r10,61440
80007b5a:	72 08       	ld.w	r8,r9[0x0]
80007b5c:	f0 0c 00 0c 	add	r12,r8,r12
80007b60:	14 3c       	cp.w	r12,r10
80007b62:	e0 8b 00 04 	brhi	80007b6a <_sbrk+0x2a>
80007b66:	93 0c       	st.w	r9[0x0],r12
80007b68:	c0 58       	rjmp	80007b72 <_sbrk+0x32>
80007b6a:	c5 5c       	rcall	80007c14 <__errno>
80007b6c:	30 c8       	mov	r8,12
80007b6e:	99 08       	st.w	r12[0x0],r8
80007b70:	3f f8       	mov	r8,-1
80007b72:	10 9c       	mov	r12,r8
80007b74:	d8 02       	popm	pc
80007b76:	d7 03       	nop

80007b78 <_write_r>:
80007b78:	d4 21       	pushm	r4-r7,lr
80007b7a:	16 98       	mov	r8,r11
80007b7c:	18 97       	mov	r7,r12
80007b7e:	10 9c       	mov	r12,r8
80007b80:	30 08       	mov	r8,0
80007b82:	14 9b       	mov	r11,r10
80007b84:	e0 66 06 64 	mov	r6,1636
80007b88:	12 9a       	mov	r10,r9
80007b8a:	8d 08       	st.w	r6[0x0],r8
80007b8c:	c9 6f       	rcall	80007ab8 <_write>
80007b8e:	5b fc       	cp.w	r12,-1
80007b90:	c0 51       	brne	80007b9a <_write_r+0x22>
80007b92:	6c 08       	ld.w	r8,r6[0x0]
80007b94:	58 08       	cp.w	r8,0
80007b96:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007b9a:	d8 22       	popm	r4-r7,pc

80007b9c <_calloc_r>:
80007b9c:	d4 21       	pushm	r4-r7,lr
80007b9e:	f4 0b 02 4b 	mul	r11,r10,r11
80007ba2:	fe b0 f8 5f 	rcall	80006c60 <_malloc_r>
80007ba6:	18 97       	mov	r7,r12
80007ba8:	c2 30       	breq	80007bee <_calloc_r+0x52>
80007baa:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007bae:	e0 1a ff fc 	andl	r10,0xfffc
80007bb2:	20 4a       	sub	r10,4
80007bb4:	e0 4a 00 24 	cp.w	r10,36
80007bb8:	e0 8b 00 18 	brhi	80007be8 <_calloc_r+0x4c>
80007bbc:	18 98       	mov	r8,r12
80007bbe:	59 3a       	cp.w	r10,19
80007bc0:	e0 88 00 0f 	brls	80007bde <_calloc_r+0x42>
80007bc4:	30 09       	mov	r9,0
80007bc6:	10 a9       	st.w	r8++,r9
80007bc8:	10 a9       	st.w	r8++,r9
80007bca:	59 ba       	cp.w	r10,27
80007bcc:	e0 88 00 09 	brls	80007bde <_calloc_r+0x42>
80007bd0:	10 a9       	st.w	r8++,r9
80007bd2:	10 a9       	st.w	r8++,r9
80007bd4:	e0 4a 00 24 	cp.w	r10,36
80007bd8:	c0 31       	brne	80007bde <_calloc_r+0x42>
80007bda:	10 a9       	st.w	r8++,r9
80007bdc:	10 a9       	st.w	r8++,r9
80007bde:	30 09       	mov	r9,0
80007be0:	10 a9       	st.w	r8++,r9
80007be2:	91 19       	st.w	r8[0x4],r9
80007be4:	91 09       	st.w	r8[0x0],r9
80007be6:	c0 48       	rjmp	80007bee <_calloc_r+0x52>
80007be8:	30 0b       	mov	r11,0
80007bea:	fe b0 fa 7d 	rcall	800070e4 <memset>
80007bee:	0e 9c       	mov	r12,r7
80007bf0:	d8 22       	popm	r4-r7,pc
80007bf2:	d7 03       	nop

80007bf4 <_close_r>:
80007bf4:	d4 21       	pushm	r4-r7,lr
80007bf6:	30 08       	mov	r8,0
80007bf8:	18 97       	mov	r7,r12
80007bfa:	e0 66 06 64 	mov	r6,1636
80007bfe:	16 9c       	mov	r12,r11
80007c00:	8d 08       	st.w	r6[0x0],r8
80007c02:	c3 df       	rcall	80007a7c <_close>
80007c04:	5b fc       	cp.w	r12,-1
80007c06:	c0 51       	brne	80007c10 <_close_r+0x1c>
80007c08:	6c 08       	ld.w	r8,r6[0x0]
80007c0a:	58 08       	cp.w	r8,0
80007c0c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007c10:	d8 22       	popm	r4-r7,pc
80007c12:	d7 03       	nop

80007c14 <__errno>:
80007c14:	e0 68 01 04 	mov	r8,260
80007c18:	70 0c       	ld.w	r12,r8[0x0]
80007c1a:	2f 4c       	sub	r12,-12
80007c1c:	5e fc       	retal	r12
80007c1e:	d7 03       	nop

80007c20 <_fclose_r>:
80007c20:	d4 21       	pushm	r4-r7,lr
80007c22:	18 96       	mov	r6,r12
80007c24:	16 97       	mov	r7,r11
80007c26:	58 0b       	cp.w	r11,0
80007c28:	c0 31       	brne	80007c2e <_fclose_r+0xe>
80007c2a:	16 95       	mov	r5,r11
80007c2c:	c5 38       	rjmp	80007cd2 <_fclose_r+0xb2>
80007c2e:	fe b0 f4 87 	rcall	8000653c <__sfp_lock_acquire>
80007c32:	58 06       	cp.w	r6,0
80007c34:	c0 70       	breq	80007c42 <_fclose_r+0x22>
80007c36:	6c 68       	ld.w	r8,r6[0x18]
80007c38:	58 08       	cp.w	r8,0
80007c3a:	c0 41       	brne	80007c42 <_fclose_r+0x22>
80007c3c:	0c 9c       	mov	r12,r6
80007c3e:	fe b0 f4 d1 	rcall	800065e0 <__sinit>
80007c42:	fe c8 e8 8a 	sub	r8,pc,-6006
80007c46:	10 37       	cp.w	r7,r8
80007c48:	c0 31       	brne	80007c4e <_fclose_r+0x2e>
80007c4a:	6c 07       	ld.w	r7,r6[0x0]
80007c4c:	c0 c8       	rjmp	80007c64 <_fclose_r+0x44>
80007c4e:	fe c8 e8 76 	sub	r8,pc,-6026
80007c52:	10 37       	cp.w	r7,r8
80007c54:	c0 31       	brne	80007c5a <_fclose_r+0x3a>
80007c56:	6c 17       	ld.w	r7,r6[0x4]
80007c58:	c0 68       	rjmp	80007c64 <_fclose_r+0x44>
80007c5a:	fe c8 e8 62 	sub	r8,pc,-6046
80007c5e:	10 37       	cp.w	r7,r8
80007c60:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007c64:	8e 69       	ld.sh	r9,r7[0xc]
80007c66:	30 08       	mov	r8,0
80007c68:	f0 09 19 00 	cp.h	r9,r8
80007c6c:	c0 51       	brne	80007c76 <_fclose_r+0x56>
80007c6e:	fe b0 f4 68 	rcall	8000653e <__sfp_lock_release>
80007c72:	30 05       	mov	r5,0
80007c74:	c2 f8       	rjmp	80007cd2 <_fclose_r+0xb2>
80007c76:	0e 9b       	mov	r11,r7
80007c78:	0c 9c       	mov	r12,r6
80007c7a:	fe b0 f3 db 	rcall	80006430 <_fflush_r>
80007c7e:	6e c8       	ld.w	r8,r7[0x30]
80007c80:	18 95       	mov	r5,r12
80007c82:	58 08       	cp.w	r8,0
80007c84:	c0 60       	breq	80007c90 <_fclose_r+0x70>
80007c86:	6e 8b       	ld.w	r11,r7[0x20]
80007c88:	0c 9c       	mov	r12,r6
80007c8a:	5d 18       	icall	r8
80007c8c:	f9 b5 05 ff 	movlt	r5,-1
80007c90:	8e 68       	ld.sh	r8,r7[0xc]
80007c92:	ed b8 00 07 	bld	r8,0x7
80007c96:	c0 51       	brne	80007ca0 <_fclose_r+0x80>
80007c98:	6e 4b       	ld.w	r11,r7[0x10]
80007c9a:	0c 9c       	mov	r12,r6
80007c9c:	fe b0 f5 3c 	rcall	80006714 <_free_r>
80007ca0:	6e db       	ld.w	r11,r7[0x34]
80007ca2:	58 0b       	cp.w	r11,0
80007ca4:	c0 a0       	breq	80007cb8 <_fclose_r+0x98>
80007ca6:	ee c8 ff bc 	sub	r8,r7,-68
80007caa:	10 3b       	cp.w	r11,r8
80007cac:	c0 40       	breq	80007cb4 <_fclose_r+0x94>
80007cae:	0c 9c       	mov	r12,r6
80007cb0:	fe b0 f5 32 	rcall	80006714 <_free_r>
80007cb4:	30 08       	mov	r8,0
80007cb6:	8f d8       	st.w	r7[0x34],r8
80007cb8:	6f 2b       	ld.w	r11,r7[0x48]
80007cba:	58 0b       	cp.w	r11,0
80007cbc:	c0 70       	breq	80007cca <_fclose_r+0xaa>
80007cbe:	0c 9c       	mov	r12,r6
80007cc0:	fe b0 f5 2a 	rcall	80006714 <_free_r>
80007cc4:	30 08       	mov	r8,0
80007cc6:	ef 48 00 48 	st.w	r7[72],r8
80007cca:	30 08       	mov	r8,0
80007ccc:	ae 68       	st.h	r7[0xc],r8
80007cce:	fe b0 f4 38 	rcall	8000653e <__sfp_lock_release>
80007cd2:	0a 9c       	mov	r12,r5
80007cd4:	d8 22       	popm	r4-r7,pc
80007cd6:	d7 03       	nop

80007cd8 <fclose>:
80007cd8:	d4 01       	pushm	lr
80007cda:	e0 68 01 04 	mov	r8,260
80007cde:	18 9b       	mov	r11,r12
80007ce0:	70 0c       	ld.w	r12,r8[0x0]
80007ce2:	c9 ff       	rcall	80007c20 <_fclose_r>
80007ce4:	d8 02       	popm	pc
80007ce6:	d7 03       	nop

80007ce8 <_fstat_r>:
80007ce8:	d4 21       	pushm	r4-r7,lr
80007cea:	16 98       	mov	r8,r11
80007cec:	18 97       	mov	r7,r12
80007cee:	10 9c       	mov	r12,r8
80007cf0:	30 08       	mov	r8,0
80007cf2:	e0 66 06 64 	mov	r6,1636
80007cf6:	14 9b       	mov	r11,r10
80007cf8:	8d 08       	st.w	r6[0x0],r8
80007cfa:	cf de       	rcall	80007af4 <_fstat>
80007cfc:	5b fc       	cp.w	r12,-1
80007cfe:	c0 51       	brne	80007d08 <_fstat_r+0x20>
80007d00:	6c 08       	ld.w	r8,r6[0x0]
80007d02:	58 08       	cp.w	r8,0
80007d04:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d08:	d8 22       	popm	r4-r7,pc
80007d0a:	d7 03       	nop

80007d0c <_lseek_r>:
80007d0c:	d4 21       	pushm	r4-r7,lr
80007d0e:	16 98       	mov	r8,r11
80007d10:	18 97       	mov	r7,r12
80007d12:	10 9c       	mov	r12,r8
80007d14:	30 08       	mov	r8,0
80007d16:	14 9b       	mov	r11,r10
80007d18:	e0 66 06 64 	mov	r6,1636
80007d1c:	12 9a       	mov	r10,r9
80007d1e:	8d 08       	st.w	r6[0x0],r8
80007d20:	cb 8e       	rcall	80007a90 <_lseek>
80007d22:	5b fc       	cp.w	r12,-1
80007d24:	c0 51       	brne	80007d2e <_lseek_r+0x22>
80007d26:	6c 08       	ld.w	r8,r6[0x0]
80007d28:	58 08       	cp.w	r8,0
80007d2a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d2e:	d8 22       	popm	r4-r7,pc

80007d30 <_read_r>:
80007d30:	d4 21       	pushm	r4-r7,lr
80007d32:	16 98       	mov	r8,r11
80007d34:	18 97       	mov	r7,r12
80007d36:	10 9c       	mov	r12,r8
80007d38:	30 08       	mov	r8,0
80007d3a:	14 9b       	mov	r11,r10
80007d3c:	e0 66 06 64 	mov	r6,1636
80007d40:	12 9a       	mov	r10,r9
80007d42:	8d 08       	st.w	r6[0x0],r8
80007d44:	cb 0e       	rcall	80007aa4 <_read>
80007d46:	5b fc       	cp.w	r12,-1
80007d48:	c0 51       	brne	80007d52 <_read_r+0x22>
80007d4a:	6c 08       	ld.w	r8,r6[0x0]
80007d4c:	58 08       	cp.w	r8,0
80007d4e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d52:	d8 22       	popm	r4-r7,pc

80007d54 <__avr32_f64_mul>:
80007d54:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007d58:	e0 80 00 dc 	breq	80007f10 <__avr32_f64_mul_op1_zero>
80007d5c:	d4 21       	pushm	r4-r7,lr
80007d5e:	f7 e9 20 0e 	eor	lr,r11,r9
80007d62:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007d66:	30 15       	mov	r5,1
80007d68:	c4 30       	breq	80007dee <__avr32_f64_mul_op1_subnormal>
80007d6a:	ab 6b       	lsl	r11,0xa
80007d6c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007d70:	ab 6a       	lsl	r10,0xa
80007d72:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007d76:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007d7a:	c5 c0       	breq	80007e32 <__avr32_f64_mul_op2_subnormal>
80007d7c:	a1 78       	lsl	r8,0x1
80007d7e:	5c f9       	rol	r9
80007d80:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007d84:	e0 47 07 ff 	cp.w	r7,2047
80007d88:	c7 70       	breq	80007e76 <__avr32_f64_mul_op_nan_or_inf>
80007d8a:	e0 46 07 ff 	cp.w	r6,2047
80007d8e:	c7 40       	breq	80007e76 <__avr32_f64_mul_op_nan_or_inf>
80007d90:	ee 06 00 0c 	add	r12,r7,r6
80007d94:	e0 2c 03 fe 	sub	r12,1022
80007d98:	f6 08 06 44 	mulu.d	r4,r11,r8
80007d9c:	f4 09 07 44 	macu.d	r4,r10,r9
80007da0:	f4 08 06 46 	mulu.d	r6,r10,r8
80007da4:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007da8:	08 07       	add	r7,r4
80007daa:	f4 05 00 4a 	adc	r10,r10,r5
80007dae:	5c 0b       	acr	r11
80007db0:	ed bb 00 14 	bld	r11,0x14
80007db4:	c0 50       	breq	80007dbe <__avr32_f64_mul+0x6a>
80007db6:	a1 77       	lsl	r7,0x1
80007db8:	5c fa       	rol	r10
80007dba:	5c fb       	rol	r11
80007dbc:	20 1c       	sub	r12,1
80007dbe:	58 0c       	cp.w	r12,0
80007dc0:	e0 8a 00 6f 	brle	80007e9e <__avr32_f64_mul_res_subnormal>
80007dc4:	e0 4c 07 ff 	cp.w	r12,2047
80007dc8:	e0 84 00 9c 	brge	80007f00 <__avr32_f64_mul_res_inf>
80007dcc:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007dd0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007dd4:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007dd8:	ee 17 80 00 	eorh	r7,0x8000
80007ddc:	f1 b7 04 20 	satu	r7,0x1
80007de0:	0e 0a       	add	r10,r7
80007de2:	5c 0b       	acr	r11
80007de4:	ed be 00 1f 	bld	lr,0x1f
80007de8:	ef bb 00 1f 	bst	r11,0x1f
80007dec:	d8 22       	popm	r4-r7,pc

80007dee <__avr32_f64_mul_op1_subnormal>:
80007dee:	e4 1b 00 0f 	andh	r11,0xf
80007df2:	f4 0c 12 00 	clz	r12,r10
80007df6:	f6 06 12 00 	clz	r6,r11
80007dfa:	f7 bc 03 e1 	sublo	r12,-31
80007dfe:	f8 06 17 30 	movlo	r6,r12
80007e02:	f7 b6 02 01 	subhs	r6,1
80007e06:	e0 46 00 20 	cp.w	r6,32
80007e0a:	c0 d4       	brge	80007e24 <__avr32_f64_mul_op1_subnormal+0x36>
80007e0c:	ec 0c 11 20 	rsub	r12,r6,32
80007e10:	f6 06 09 4b 	lsl	r11,r11,r6
80007e14:	f4 0c 0a 4c 	lsr	r12,r10,r12
80007e18:	18 4b       	or	r11,r12
80007e1a:	f4 06 09 4a 	lsl	r10,r10,r6
80007e1e:	20 b6       	sub	r6,11
80007e20:	0c 17       	sub	r7,r6
80007e22:	ca ab       	rjmp	80007d76 <__avr32_f64_mul+0x22>
80007e24:	f4 06 09 4b 	lsl	r11,r10,r6
80007e28:	c6 40       	breq	80007ef0 <__avr32_f64_mul_res_zero>
80007e2a:	30 0a       	mov	r10,0
80007e2c:	20 b6       	sub	r6,11
80007e2e:	0c 17       	sub	r7,r6
80007e30:	ca 3b       	rjmp	80007d76 <__avr32_f64_mul+0x22>

80007e32 <__avr32_f64_mul_op2_subnormal>:
80007e32:	e4 19 00 0f 	andh	r9,0xf
80007e36:	f0 0c 12 00 	clz	r12,r8
80007e3a:	f2 05 12 00 	clz	r5,r9
80007e3e:	f7 bc 03 ea 	sublo	r12,-22
80007e42:	f8 05 17 30 	movlo	r5,r12
80007e46:	f7 b5 02 0a 	subhs	r5,10
80007e4a:	e0 45 00 20 	cp.w	r5,32
80007e4e:	c0 d4       	brge	80007e68 <__avr32_f64_mul_op2_subnormal+0x36>
80007e50:	ea 0c 11 20 	rsub	r12,r5,32
80007e54:	f2 05 09 49 	lsl	r9,r9,r5
80007e58:	f0 0c 0a 4c 	lsr	r12,r8,r12
80007e5c:	18 49       	or	r9,r12
80007e5e:	f0 05 09 48 	lsl	r8,r8,r5
80007e62:	20 25       	sub	r5,2
80007e64:	0a 16       	sub	r6,r5
80007e66:	c8 fb       	rjmp	80007d84 <__avr32_f64_mul+0x30>
80007e68:	f0 05 09 49 	lsl	r9,r8,r5
80007e6c:	c4 20       	breq	80007ef0 <__avr32_f64_mul_res_zero>
80007e6e:	30 08       	mov	r8,0
80007e70:	20 25       	sub	r5,2
80007e72:	0a 16       	sub	r6,r5
80007e74:	c8 8b       	rjmp	80007d84 <__avr32_f64_mul+0x30>

80007e76 <__avr32_f64_mul_op_nan_or_inf>:
80007e76:	e4 19 00 0f 	andh	r9,0xf
80007e7a:	e4 1b 00 0f 	andh	r11,0xf
80007e7e:	14 4b       	or	r11,r10
80007e80:	10 49       	or	r9,r8
80007e82:	e0 47 07 ff 	cp.w	r7,2047
80007e86:	c0 91       	brne	80007e98 <__avr32_f64_mul_op1_not_naninf>
80007e88:	58 0b       	cp.w	r11,0
80007e8a:	c3 81       	brne	80007efa <__avr32_f64_mul_res_nan>
80007e8c:	e0 46 07 ff 	cp.w	r6,2047
80007e90:	c3 81       	brne	80007f00 <__avr32_f64_mul_res_inf>
80007e92:	58 09       	cp.w	r9,0
80007e94:	c3 60       	breq	80007f00 <__avr32_f64_mul_res_inf>
80007e96:	c3 28       	rjmp	80007efa <__avr32_f64_mul_res_nan>

80007e98 <__avr32_f64_mul_op1_not_naninf>:
80007e98:	58 09       	cp.w	r9,0
80007e9a:	c3 30       	breq	80007f00 <__avr32_f64_mul_res_inf>
80007e9c:	c2 f8       	rjmp	80007efa <__avr32_f64_mul_res_nan>

80007e9e <__avr32_f64_mul_res_subnormal>:
80007e9e:	5c 3c       	neg	r12
80007ea0:	2f fc       	sub	r12,-1
80007ea2:	f1 bc 04 c0 	satu	r12,0x6
80007ea6:	e0 4c 00 20 	cp.w	r12,32
80007eaa:	c1 14       	brge	80007ecc <__avr32_f64_mul_res_subnormal+0x2e>
80007eac:	f8 08 11 20 	rsub	r8,r12,32
80007eb0:	0e 46       	or	r6,r7
80007eb2:	ee 0c 0a 47 	lsr	r7,r7,r12
80007eb6:	f4 08 09 49 	lsl	r9,r10,r8
80007eba:	12 47       	or	r7,r9
80007ebc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007ec0:	f6 08 09 49 	lsl	r9,r11,r8
80007ec4:	12 4a       	or	r10,r9
80007ec6:	f6 0c 0a 4b 	lsr	r11,r11,r12
80007eca:	c8 3b       	rjmp	80007dd0 <__avr32_f64_mul+0x7c>
80007ecc:	f8 08 11 20 	rsub	r8,r12,32
80007ed0:	f9 b9 00 00 	moveq	r9,0
80007ed4:	c0 30       	breq	80007eda <__avr32_f64_mul_res_subnormal+0x3c>
80007ed6:	f6 08 09 49 	lsl	r9,r11,r8
80007eda:	0e 46       	or	r6,r7
80007edc:	ed ea 10 16 	or	r6,r6,r10<<0x1
80007ee0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007ee4:	f3 ea 10 07 	or	r7,r9,r10
80007ee8:	f6 0c 0a 4a 	lsr	r10,r11,r12
80007eec:	30 0b       	mov	r11,0
80007eee:	c7 1b       	rjmp	80007dd0 <__avr32_f64_mul+0x7c>

80007ef0 <__avr32_f64_mul_res_zero>:
80007ef0:	1c 9b       	mov	r11,lr
80007ef2:	e6 1b 80 00 	andh	r11,0x8000,COH
80007ef6:	30 0a       	mov	r10,0
80007ef8:	d8 22       	popm	r4-r7,pc

80007efa <__avr32_f64_mul_res_nan>:
80007efa:	3f fb       	mov	r11,-1
80007efc:	3f fa       	mov	r10,-1
80007efe:	d8 22       	popm	r4-r7,pc

80007f00 <__avr32_f64_mul_res_inf>:
80007f00:	f0 6b 00 00 	mov	r11,-1048576
80007f04:	ed be 00 1f 	bld	lr,0x1f
80007f08:	ef bb 00 1f 	bst	r11,0x1f
80007f0c:	30 0a       	mov	r10,0
80007f0e:	d8 22       	popm	r4-r7,pc

80007f10 <__avr32_f64_mul_op1_zero>:
80007f10:	f7 e9 20 0b 	eor	r11,r11,r9
80007f14:	e6 1b 80 00 	andh	r11,0x8000,COH
80007f18:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80007f1c:	e0 4c 07 ff 	cp.w	r12,2047
80007f20:	5e 1c       	retne	r12
80007f22:	3f fa       	mov	r10,-1
80007f24:	3f fb       	mov	r11,-1
80007f26:	5e fc       	retal	r12

80007f28 <__avr32_f64_sub_from_add>:
80007f28:	ee 19 80 00 	eorh	r9,0x8000

80007f2c <__avr32_f64_sub>:
80007f2c:	f7 e9 20 0c 	eor	r12,r11,r9
80007f30:	e0 86 00 ca 	brmi	800080c4 <__avr32_f64_add_from_sub>
80007f34:	eb cd 40 e0 	pushm	r5-r7,lr
80007f38:	16 9c       	mov	r12,r11
80007f3a:	e6 1c 80 00 	andh	r12,0x8000,COH
80007f3e:	bf db       	cbr	r11,0x1f
80007f40:	bf d9       	cbr	r9,0x1f
80007f42:	10 3a       	cp.w	r10,r8
80007f44:	f2 0b 13 00 	cpc	r11,r9
80007f48:	c0 92       	brcc	80007f5a <__avr32_f64_sub+0x2e>
80007f4a:	16 97       	mov	r7,r11
80007f4c:	12 9b       	mov	r11,r9
80007f4e:	0e 99       	mov	r9,r7
80007f50:	14 97       	mov	r7,r10
80007f52:	10 9a       	mov	r10,r8
80007f54:	0e 98       	mov	r8,r7
80007f56:	ee 1c 80 00 	eorh	r12,0x8000
80007f5a:	f6 07 16 14 	lsr	r7,r11,0x14
80007f5e:	ab 7b       	lsl	r11,0xb
80007f60:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80007f64:	ab 7a       	lsl	r10,0xb
80007f66:	bf bb       	sbr	r11,0x1f
80007f68:	f2 06 16 14 	lsr	r6,r9,0x14
80007f6c:	c4 40       	breq	80007ff4 <__avr32_f64_sub_opL_subnormal>
80007f6e:	ab 79       	lsl	r9,0xb
80007f70:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80007f74:	ab 78       	lsl	r8,0xb
80007f76:	bf b9       	sbr	r9,0x1f

80007f78 <__avr32_f64_sub_opL_subnormal_done>:
80007f78:	e0 47 07 ff 	cp.w	r7,2047
80007f7c:	c4 f0       	breq	8000801a <__avr32_f64_sub_opH_nan_or_inf>
80007f7e:	0e 26       	rsub	r6,r7
80007f80:	c1 20       	breq	80007fa4 <__avr32_f64_sub_shift_done>
80007f82:	ec 05 11 20 	rsub	r5,r6,32
80007f86:	e0 46 00 20 	cp.w	r6,32
80007f8a:	c7 c2       	brcc	80008082 <__avr32_f64_sub_longshift>
80007f8c:	f0 05 09 4e 	lsl	lr,r8,r5
80007f90:	f2 05 09 45 	lsl	r5,r9,r5
80007f94:	f0 06 0a 48 	lsr	r8,r8,r6
80007f98:	f2 06 0a 49 	lsr	r9,r9,r6
80007f9c:	0a 48       	or	r8,r5
80007f9e:	58 0e       	cp.w	lr,0
80007fa0:	5f 1e       	srne	lr
80007fa2:	1c 48       	or	r8,lr

80007fa4 <__avr32_f64_sub_shift_done>:
80007fa4:	10 1a       	sub	r10,r8
80007fa6:	f6 09 01 4b 	sbc	r11,r11,r9
80007faa:	f6 06 12 00 	clz	r6,r11
80007fae:	c0 e0       	breq	80007fca <__avr32_f64_sub_longnormalize_done>
80007fb0:	c7 83       	brcs	800080a0 <__avr32_f64_sub_longnormalize>
80007fb2:	ec 0e 11 20 	rsub	lr,r6,32
80007fb6:	f6 06 09 4b 	lsl	r11,r11,r6
80007fba:	f4 0e 0a 4e 	lsr	lr,r10,lr
80007fbe:	1c 4b       	or	r11,lr
80007fc0:	f4 06 09 4a 	lsl	r10,r10,r6
80007fc4:	0c 17       	sub	r7,r6
80007fc6:	e0 8a 00 39 	brle	80008038 <__avr32_f64_sub_subnormal_result>

80007fca <__avr32_f64_sub_longnormalize_done>:
80007fca:	f4 09 15 15 	lsl	r9,r10,0x15
80007fce:	ab 9a       	lsr	r10,0xb
80007fd0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80007fd4:	ab 9b       	lsr	r11,0xb
80007fd6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80007fda:	18 4b       	or	r11,r12

80007fdc <__avr32_f64_sub_round>:
80007fdc:	fc 17 80 00 	movh	r7,0x8000
80007fe0:	ed ba 00 00 	bld	r10,0x0
80007fe4:	f7 b7 01 ff 	subne	r7,-1
80007fe8:	0e 39       	cp.w	r9,r7
80007fea:	5f 29       	srhs	r9
80007fec:	12 0a       	add	r10,r9
80007fee:	5c 0b       	acr	r11
80007ff0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80007ff4 <__avr32_f64_sub_opL_subnormal>:
80007ff4:	ab 79       	lsl	r9,0xb
80007ff6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80007ffa:	ab 78       	lsl	r8,0xb
80007ffc:	f3 e8 10 0e 	or	lr,r9,r8
80008000:	f9 b6 01 01 	movne	r6,1
80008004:	ee 0e 11 00 	rsub	lr,r7,0
80008008:	f9 b7 00 01 	moveq	r7,1
8000800c:	ef bb 00 1f 	bst	r11,0x1f
80008010:	f7 ea 10 0e 	or	lr,r11,r10
80008014:	f9 b7 00 00 	moveq	r7,0
80008018:	cb 0b       	rjmp	80007f78 <__avr32_f64_sub_opL_subnormal_done>

8000801a <__avr32_f64_sub_opH_nan_or_inf>:
8000801a:	bf db       	cbr	r11,0x1f
8000801c:	f7 ea 10 0e 	or	lr,r11,r10
80008020:	c0 81       	brne	80008030 <__avr32_f64_sub_return_nan>
80008022:	e0 46 07 ff 	cp.w	r6,2047
80008026:	c0 50       	breq	80008030 <__avr32_f64_sub_return_nan>
80008028:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000802c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008030 <__avr32_f64_sub_return_nan>:
80008030:	3f fa       	mov	r10,-1
80008032:	3f fb       	mov	r11,-1
80008034:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008038 <__avr32_f64_sub_subnormal_result>:
80008038:	5c 37       	neg	r7
8000803a:	2f f7       	sub	r7,-1
8000803c:	f1 b7 04 c0 	satu	r7,0x6
80008040:	e0 47 00 20 	cp.w	r7,32
80008044:	c1 14       	brge	80008066 <__avr32_f64_sub_subnormal_result+0x2e>
80008046:	ee 08 11 20 	rsub	r8,r7,32
8000804a:	f4 08 09 49 	lsl	r9,r10,r8
8000804e:	5f 16       	srne	r6
80008050:	f4 07 0a 4a 	lsr	r10,r10,r7
80008054:	0c 4a       	or	r10,r6
80008056:	f6 08 09 49 	lsl	r9,r11,r8
8000805a:	f5 e9 10 0a 	or	r10,r10,r9
8000805e:	f4 07 0a 4b 	lsr	r11,r10,r7
80008062:	30 07       	mov	r7,0
80008064:	cb 3b       	rjmp	80007fca <__avr32_f64_sub_longnormalize_done>
80008066:	ee 08 11 40 	rsub	r8,r7,64
8000806a:	f6 08 09 49 	lsl	r9,r11,r8
8000806e:	14 49       	or	r9,r10
80008070:	5f 16       	srne	r6
80008072:	f6 07 0a 4a 	lsr	r10,r11,r7
80008076:	0c 4a       	or	r10,r6
80008078:	30 0b       	mov	r11,0
8000807a:	30 07       	mov	r7,0
8000807c:	ca 7b       	rjmp	80007fca <__avr32_f64_sub_longnormalize_done>
8000807e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008082 <__avr32_f64_sub_longshift>:
80008082:	f1 b6 04 c0 	satu	r6,0x6
80008086:	f0 0e 17 00 	moveq	lr,r8
8000808a:	c0 40       	breq	80008092 <__avr32_f64_sub_longshift+0x10>
8000808c:	f2 05 09 4e 	lsl	lr,r9,r5
80008090:	10 4e       	or	lr,r8
80008092:	f2 06 0a 48 	lsr	r8,r9,r6
80008096:	30 09       	mov	r9,0
80008098:	58 0e       	cp.w	lr,0
8000809a:	5f 1e       	srne	lr
8000809c:	1c 48       	or	r8,lr
8000809e:	c8 3b       	rjmp	80007fa4 <__avr32_f64_sub_shift_done>

800080a0 <__avr32_f64_sub_longnormalize>:
800080a0:	f4 06 12 00 	clz	r6,r10
800080a4:	f9 b7 03 00 	movlo	r7,0
800080a8:	f9 b6 03 00 	movlo	r6,0
800080ac:	f9 bc 03 00 	movlo	r12,0
800080b0:	f7 b6 02 e0 	subhs	r6,-32
800080b4:	f4 06 09 4b 	lsl	r11,r10,r6
800080b8:	30 0a       	mov	r10,0
800080ba:	0c 17       	sub	r7,r6
800080bc:	fe 9a ff be 	brle	80008038 <__avr32_f64_sub_subnormal_result>
800080c0:	c8 5b       	rjmp	80007fca <__avr32_f64_sub_longnormalize_done>
800080c2:	d7 03       	nop

800080c4 <__avr32_f64_add_from_sub>:
800080c4:	ee 19 80 00 	eorh	r9,0x8000

800080c8 <__avr32_f64_add>:
800080c8:	f7 e9 20 0c 	eor	r12,r11,r9
800080cc:	fe 96 ff 2e 	brmi	80007f28 <__avr32_f64_sub_from_add>
800080d0:	eb cd 40 e0 	pushm	r5-r7,lr
800080d4:	16 9c       	mov	r12,r11
800080d6:	e6 1c 80 00 	andh	r12,0x8000,COH
800080da:	bf db       	cbr	r11,0x1f
800080dc:	bf d9       	cbr	r9,0x1f
800080de:	12 3b       	cp.w	r11,r9
800080e0:	c0 72       	brcc	800080ee <__avr32_f64_add+0x26>
800080e2:	16 97       	mov	r7,r11
800080e4:	12 9b       	mov	r11,r9
800080e6:	0e 99       	mov	r9,r7
800080e8:	14 97       	mov	r7,r10
800080ea:	10 9a       	mov	r10,r8
800080ec:	0e 98       	mov	r8,r7
800080ee:	30 0e       	mov	lr,0
800080f0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800080f4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800080f8:	b5 ab       	sbr	r11,0x14
800080fa:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800080fe:	c6 20       	breq	800081c2 <__avr32_f64_add_op2_subnormal>
80008100:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008104:	b5 a9       	sbr	r9,0x14
80008106:	e0 47 07 ff 	cp.w	r7,2047
8000810a:	c2 80       	breq	8000815a <__avr32_f64_add_opH_nan_or_inf>
8000810c:	0e 26       	rsub	r6,r7
8000810e:	c1 20       	breq	80008132 <__avr32_f64_add_shift_done>
80008110:	e0 46 00 36 	cp.w	r6,54
80008114:	c1 52       	brcc	8000813e <__avr32_f64_add_res_of_done>
80008116:	ec 05 11 20 	rsub	r5,r6,32
8000811a:	e0 46 00 20 	cp.w	r6,32
8000811e:	c3 52       	brcc	80008188 <__avr32_f64_add_longshift>
80008120:	f0 05 09 4e 	lsl	lr,r8,r5
80008124:	f2 05 09 45 	lsl	r5,r9,r5
80008128:	f0 06 0a 48 	lsr	r8,r8,r6
8000812c:	f2 06 0a 49 	lsr	r9,r9,r6
80008130:	0a 48       	or	r8,r5

80008132 <__avr32_f64_add_shift_done>:
80008132:	10 0a       	add	r10,r8
80008134:	f6 09 00 4b 	adc	r11,r11,r9
80008138:	ed bb 00 15 	bld	r11,0x15
8000813c:	c3 40       	breq	800081a4 <__avr32_f64_add_res_of>

8000813e <__avr32_f64_add_res_of_done>:
8000813e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008142:	18 4b       	or	r11,r12

80008144 <__avr32_f64_add_round>:
80008144:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008148:	18 4e       	or	lr,r12
8000814a:	ee 1e 80 00 	eorh	lr,0x8000
8000814e:	f1 be 04 20 	satu	lr,0x1
80008152:	1c 0a       	add	r10,lr
80008154:	5c 0b       	acr	r11
80008156:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000815a <__avr32_f64_add_opH_nan_or_inf>:
8000815a:	b5 cb       	cbr	r11,0x14
8000815c:	f7 ea 10 0e 	or	lr,r11,r10
80008160:	c1 01       	brne	80008180 <__avr32_f64_add_return_nan>
80008162:	e0 46 07 ff 	cp.w	r6,2047
80008166:	c0 30       	breq	8000816c <__avr32_f64_add_opL_nan_or_inf>
80008168:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000816c <__avr32_f64_add_opL_nan_or_inf>:
8000816c:	b5 c9       	cbr	r9,0x14
8000816e:	f3 e8 10 0e 	or	lr,r9,r8
80008172:	c0 71       	brne	80008180 <__avr32_f64_add_return_nan>
80008174:	30 0a       	mov	r10,0
80008176:	fc 1b 7f f0 	movh	r11,0x7ff0
8000817a:	18 4b       	or	r11,r12
8000817c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008180 <__avr32_f64_add_return_nan>:
80008180:	3f fa       	mov	r10,-1
80008182:	3f fb       	mov	r11,-1
80008184:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008188 <__avr32_f64_add_longshift>:
80008188:	f1 b6 04 c0 	satu	r6,0x6
8000818c:	f0 0e 17 00 	moveq	lr,r8
80008190:	c0 60       	breq	8000819c <__avr32_f64_add_longshift+0x14>
80008192:	f2 05 09 4e 	lsl	lr,r9,r5
80008196:	58 08       	cp.w	r8,0
80008198:	5f 18       	srne	r8
8000819a:	10 4e       	or	lr,r8
8000819c:	f2 06 0a 48 	lsr	r8,r9,r6
800081a0:	30 09       	mov	r9,0
800081a2:	cc 8b       	rjmp	80008132 <__avr32_f64_add_shift_done>

800081a4 <__avr32_f64_add_res_of>:
800081a4:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800081a8:	a1 9b       	lsr	r11,0x1
800081aa:	5d 0a       	ror	r10
800081ac:	5d 0e       	ror	lr
800081ae:	2f f7       	sub	r7,-1
800081b0:	e0 47 07 ff 	cp.w	r7,2047
800081b4:	f9 ba 00 00 	moveq	r10,0
800081b8:	f9 bb 00 00 	moveq	r11,0
800081bc:	f9 be 00 00 	moveq	lr,0
800081c0:	cb fb       	rjmp	8000813e <__avr32_f64_add_res_of_done>

800081c2 <__avr32_f64_add_op2_subnormal>:
800081c2:	30 16       	mov	r6,1
800081c4:	58 07       	cp.w	r7,0
800081c6:	ca 01       	brne	80008106 <__avr32_f64_add+0x3e>
800081c8:	b5 cb       	cbr	r11,0x14
800081ca:	10 0a       	add	r10,r8
800081cc:	f6 09 00 4b 	adc	r11,r11,r9
800081d0:	18 4b       	or	r11,r12
800081d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800081d6:	d7 03       	nop

800081d8 <__avr32_f64_to_u32>:
800081d8:	58 0b       	cp.w	r11,0
800081da:	5e 6d       	retmi	0

800081dc <__avr32_f64_to_s32>:
800081dc:	f6 0c 15 01 	lsl	r12,r11,0x1
800081e0:	b5 9c       	lsr	r12,0x15
800081e2:	e0 2c 03 ff 	sub	r12,1023
800081e6:	5e 3d       	retlo	0
800081e8:	f8 0c 11 1f 	rsub	r12,r12,31
800081ec:	16 99       	mov	r9,r11
800081ee:	ab 7b       	lsl	r11,0xb
800081f0:	bf bb       	sbr	r11,0x1f
800081f2:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800081f6:	f6 0c 0a 4b 	lsr	r11,r11,r12
800081fa:	a1 79       	lsl	r9,0x1
800081fc:	5e 2b       	reths	r11
800081fe:	5c 3b       	neg	r11
80008200:	5e fb       	retal	r11

80008202 <__avr32_u32_to_f64>:
80008202:	f8 cb 00 00 	sub	r11,r12,0
80008206:	30 0c       	mov	r12,0
80008208:	c0 38       	rjmp	8000820e <__avr32_s32_to_f64+0x4>

8000820a <__avr32_s32_to_f64>:
8000820a:	18 9b       	mov	r11,r12
8000820c:	5c 4b       	abs	r11
8000820e:	30 0a       	mov	r10,0
80008210:	5e 0b       	reteq	r11
80008212:	d4 01       	pushm	lr
80008214:	e0 69 04 1e 	mov	r9,1054
80008218:	f6 08 12 00 	clz	r8,r11
8000821c:	c1 70       	breq	8000824a <__avr32_s32_to_f64+0x40>
8000821e:	c0 c3       	brcs	80008236 <__avr32_s32_to_f64+0x2c>
80008220:	f0 0e 11 20 	rsub	lr,r8,32
80008224:	f6 08 09 4b 	lsl	r11,r11,r8
80008228:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000822c:	1c 4b       	or	r11,lr
8000822e:	f4 08 09 4a 	lsl	r10,r10,r8
80008232:	10 19       	sub	r9,r8
80008234:	c0 b8       	rjmp	8000824a <__avr32_s32_to_f64+0x40>
80008236:	f4 08 12 00 	clz	r8,r10
8000823a:	f9 b8 03 00 	movlo	r8,0
8000823e:	f7 b8 02 e0 	subhs	r8,-32
80008242:	f4 08 09 4b 	lsl	r11,r10,r8
80008246:	30 0a       	mov	r10,0
80008248:	10 19       	sub	r9,r8
8000824a:	58 09       	cp.w	r9,0
8000824c:	e0 89 00 30 	brgt	800082ac <__avr32_s32_to_f64+0xa2>
80008250:	5c 39       	neg	r9
80008252:	2f f9       	sub	r9,-1
80008254:	e0 49 00 36 	cp.w	r9,54
80008258:	c0 43       	brcs	80008260 <__avr32_s32_to_f64+0x56>
8000825a:	30 0b       	mov	r11,0
8000825c:	30 0a       	mov	r10,0
8000825e:	c2 68       	rjmp	800082aa <__avr32_s32_to_f64+0xa0>
80008260:	2f 69       	sub	r9,-10
80008262:	f2 08 11 20 	rsub	r8,r9,32
80008266:	e0 49 00 20 	cp.w	r9,32
8000826a:	c0 b2       	brcc	80008280 <__avr32_s32_to_f64+0x76>
8000826c:	f4 08 09 4e 	lsl	lr,r10,r8
80008270:	f6 08 09 48 	lsl	r8,r11,r8
80008274:	f4 09 0a 4a 	lsr	r10,r10,r9
80008278:	f6 09 0a 4b 	lsr	r11,r11,r9
8000827c:	10 4b       	or	r11,r8
8000827e:	c0 88       	rjmp	8000828e <__avr32_s32_to_f64+0x84>
80008280:	f6 08 09 4e 	lsl	lr,r11,r8
80008284:	14 4e       	or	lr,r10
80008286:	16 9a       	mov	r10,r11
80008288:	30 0b       	mov	r11,0
8000828a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000828e:	ed ba 00 00 	bld	r10,0x0
80008292:	c0 92       	brcc	800082a4 <__avr32_s32_to_f64+0x9a>
80008294:	1c 7e       	tst	lr,lr
80008296:	c0 41       	brne	8000829e <__avr32_s32_to_f64+0x94>
80008298:	ed ba 00 01 	bld	r10,0x1
8000829c:	c0 42       	brcc	800082a4 <__avr32_s32_to_f64+0x9a>
8000829e:	2f fa       	sub	r10,-1
800082a0:	f7 bb 02 ff 	subhs	r11,-1
800082a4:	5c fc       	rol	r12
800082a6:	5d 0b       	ror	r11
800082a8:	5d 0a       	ror	r10
800082aa:	d8 02       	popm	pc
800082ac:	e0 68 03 ff 	mov	r8,1023
800082b0:	ed ba 00 0b 	bld	r10,0xb
800082b4:	f7 b8 00 ff 	subeq	r8,-1
800082b8:	10 0a       	add	r10,r8
800082ba:	5c 0b       	acr	r11
800082bc:	f7 b9 03 fe 	sublo	r9,-2
800082c0:	e0 49 07 ff 	cp.w	r9,2047
800082c4:	c0 55       	brlt	800082ce <__avr32_s32_to_f64+0xc4>
800082c6:	30 0a       	mov	r10,0
800082c8:	fc 1b ff e0 	movh	r11,0xffe0
800082cc:	c0 c8       	rjmp	800082e4 <__floatsidf_return_op1>
800082ce:	ed bb 00 1f 	bld	r11,0x1f
800082d2:	f7 b9 01 01 	subne	r9,1
800082d6:	ab 9a       	lsr	r10,0xb
800082d8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800082dc:	a1 7b       	lsl	r11,0x1
800082de:	ab 9b       	lsr	r11,0xb
800082e0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800082e4 <__floatsidf_return_op1>:
800082e4:	a1 7c       	lsl	r12,0x1
800082e6:	5d 0b       	ror	r11
800082e8:	d8 02       	popm	pc

800082ea <__avr32_f64_cmp_eq>:
800082ea:	10 3a       	cp.w	r10,r8
800082ec:	f2 0b 13 00 	cpc	r11,r9
800082f0:	c0 80       	breq	80008300 <__avr32_f64_cmp_eq+0x16>
800082f2:	a1 7b       	lsl	r11,0x1
800082f4:	a1 79       	lsl	r9,0x1
800082f6:	14 4b       	or	r11,r10
800082f8:	12 4b       	or	r11,r9
800082fa:	10 4b       	or	r11,r8
800082fc:	5e 0f       	reteq	1
800082fe:	5e fd       	retal	0
80008300:	a1 7b       	lsl	r11,0x1
80008302:	fc 1c ff e0 	movh	r12,0xffe0
80008306:	58 0a       	cp.w	r10,0
80008308:	f8 0b 13 00 	cpc	r11,r12
8000830c:	5e 8f       	retls	1
8000830e:	5e fd       	retal	0

80008310 <__avr32_f64_cmp_ge>:
80008310:	1a de       	st.w	--sp,lr
80008312:	1a d7       	st.w	--sp,r7
80008314:	a1 7b       	lsl	r11,0x1
80008316:	5f 3c       	srlo	r12
80008318:	a1 79       	lsl	r9,0x1
8000831a:	5f 37       	srlo	r7
8000831c:	5c fc       	rol	r12
8000831e:	fc 1e ff e0 	movh	lr,0xffe0
80008322:	58 0a       	cp.w	r10,0
80008324:	fc 0b 13 00 	cpc	r11,lr
80008328:	e0 8b 00 1d 	brhi	80008362 <__avr32_f64_cmp_ge+0x52>
8000832c:	58 08       	cp.w	r8,0
8000832e:	fc 09 13 00 	cpc	r9,lr
80008332:	e0 8b 00 18 	brhi	80008362 <__avr32_f64_cmp_ge+0x52>
80008336:	58 0b       	cp.w	r11,0
80008338:	f5 ba 00 00 	subfeq	r10,0
8000833c:	c1 50       	breq	80008366 <__avr32_f64_cmp_ge+0x56>
8000833e:	1b 07       	ld.w	r7,sp++
80008340:	1b 0e       	ld.w	lr,sp++
80008342:	58 3c       	cp.w	r12,3
80008344:	c0 a0       	breq	80008358 <__avr32_f64_cmp_ge+0x48>
80008346:	58 1c       	cp.w	r12,1
80008348:	c0 33       	brcs	8000834e <__avr32_f64_cmp_ge+0x3e>
8000834a:	5e 0f       	reteq	1
8000834c:	5e 1d       	retne	0
8000834e:	10 3a       	cp.w	r10,r8
80008350:	f2 0b 13 00 	cpc	r11,r9
80008354:	5e 2f       	reths	1
80008356:	5e 3d       	retlo	0
80008358:	14 38       	cp.w	r8,r10
8000835a:	f6 09 13 00 	cpc	r9,r11
8000835e:	5e 2f       	reths	1
80008360:	5e 3d       	retlo	0
80008362:	1b 07       	ld.w	r7,sp++
80008364:	d8 0a       	popm	pc,r12=0
80008366:	58 17       	cp.w	r7,1
80008368:	5f 0c       	sreq	r12
8000836a:	58 09       	cp.w	r9,0
8000836c:	f5 b8 00 00 	subfeq	r8,0
80008370:	1b 07       	ld.w	r7,sp++
80008372:	1b 0e       	ld.w	lr,sp++
80008374:	5e 0f       	reteq	1
80008376:	5e fc       	retal	r12

80008378 <__avr32_f64_cmp_lt>:
80008378:	1a de       	st.w	--sp,lr
8000837a:	1a d7       	st.w	--sp,r7
8000837c:	a1 7b       	lsl	r11,0x1
8000837e:	5f 3c       	srlo	r12
80008380:	a1 79       	lsl	r9,0x1
80008382:	5f 37       	srlo	r7
80008384:	5c fc       	rol	r12
80008386:	fc 1e ff e0 	movh	lr,0xffe0
8000838a:	58 0a       	cp.w	r10,0
8000838c:	fc 0b 13 00 	cpc	r11,lr
80008390:	e0 8b 00 1d 	brhi	800083ca <__avr32_f64_cmp_lt+0x52>
80008394:	58 08       	cp.w	r8,0
80008396:	fc 09 13 00 	cpc	r9,lr
8000839a:	e0 8b 00 18 	brhi	800083ca <__avr32_f64_cmp_lt+0x52>
8000839e:	58 0b       	cp.w	r11,0
800083a0:	f5 ba 00 00 	subfeq	r10,0
800083a4:	c1 50       	breq	800083ce <__avr32_f64_cmp_lt+0x56>
800083a6:	1b 07       	ld.w	r7,sp++
800083a8:	1b 0e       	ld.w	lr,sp++
800083aa:	58 3c       	cp.w	r12,3
800083ac:	c0 a0       	breq	800083c0 <__avr32_f64_cmp_lt+0x48>
800083ae:	58 1c       	cp.w	r12,1
800083b0:	c0 33       	brcs	800083b6 <__avr32_f64_cmp_lt+0x3e>
800083b2:	5e 0d       	reteq	0
800083b4:	5e 1f       	retne	1
800083b6:	10 3a       	cp.w	r10,r8
800083b8:	f2 0b 13 00 	cpc	r11,r9
800083bc:	5e 2d       	reths	0
800083be:	5e 3f       	retlo	1
800083c0:	14 38       	cp.w	r8,r10
800083c2:	f6 09 13 00 	cpc	r9,r11
800083c6:	5e 2d       	reths	0
800083c8:	5e 3f       	retlo	1
800083ca:	1b 07       	ld.w	r7,sp++
800083cc:	d8 0a       	popm	pc,r12=0
800083ce:	58 17       	cp.w	r7,1
800083d0:	5f 1c       	srne	r12
800083d2:	58 09       	cp.w	r9,0
800083d4:	f5 b8 00 00 	subfeq	r8,0
800083d8:	1b 07       	ld.w	r7,sp++
800083da:	1b 0e       	ld.w	lr,sp++
800083dc:	5e 0d       	reteq	0
800083de:	5e fc       	retal	r12

800083e0 <__avr32_f64_div>:
800083e0:	eb cd 40 ff 	pushm	r0-r7,lr
800083e4:	f7 e9 20 0e 	eor	lr,r11,r9
800083e8:	f6 07 16 14 	lsr	r7,r11,0x14
800083ec:	a9 7b       	lsl	r11,0x9
800083ee:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800083f2:	a9 7a       	lsl	r10,0x9
800083f4:	bd bb       	sbr	r11,0x1d
800083f6:	e4 1b 3f ff 	andh	r11,0x3fff
800083fa:	ab d7       	cbr	r7,0xb
800083fc:	e0 80 00 cc 	breq	80008594 <__avr32_f64_div_round_subnormal+0x54>
80008400:	e0 47 07 ff 	cp.w	r7,2047
80008404:	e0 84 00 b5 	brge	8000856e <__avr32_f64_div_round_subnormal+0x2e>
80008408:	f2 06 16 14 	lsr	r6,r9,0x14
8000840c:	a9 79       	lsl	r9,0x9
8000840e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008412:	a9 78       	lsl	r8,0x9
80008414:	bd b9       	sbr	r9,0x1d
80008416:	e4 19 3f ff 	andh	r9,0x3fff
8000841a:	ab d6       	cbr	r6,0xb
8000841c:	e0 80 00 e2 	breq	800085e0 <__avr32_f64_div_round_subnormal+0xa0>
80008420:	e0 46 07 ff 	cp.w	r6,2047
80008424:	e0 84 00 b2 	brge	80008588 <__avr32_f64_div_round_subnormal+0x48>
80008428:	0c 17       	sub	r7,r6
8000842a:	fe 37 fc 01 	sub	r7,-1023
8000842e:	fc 1c 80 00 	movh	r12,0x8000
80008432:	f8 03 16 01 	lsr	r3,r12,0x1
80008436:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000843a:	5c d4       	com	r4
8000843c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008440:	e6 09 06 44 	mulu.d	r4,r3,r9
80008444:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008448:	e6 05 06 44 	mulu.d	r4,r3,r5
8000844c:	ea 03 15 02 	lsl	r3,r5,0x2
80008450:	e6 09 06 44 	mulu.d	r4,r3,r9
80008454:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008458:	e6 05 06 44 	mulu.d	r4,r3,r5
8000845c:	ea 03 15 02 	lsl	r3,r5,0x2
80008460:	e6 09 06 44 	mulu.d	r4,r3,r9
80008464:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008468:	e6 05 06 44 	mulu.d	r4,r3,r5
8000846c:	ea 03 15 02 	lsl	r3,r5,0x2
80008470:	e6 08 06 40 	mulu.d	r0,r3,r8
80008474:	e4 09 07 40 	macu.d	r0,r2,r9
80008478:	e6 09 06 44 	mulu.d	r4,r3,r9
8000847c:	02 04       	add	r4,r1
8000847e:	5c 05       	acr	r5
80008480:	a3 65       	lsl	r5,0x2
80008482:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008486:	a3 64       	lsl	r4,0x2
80008488:	5c 34       	neg	r4
8000848a:	f8 05 01 45 	sbc	r5,r12,r5
8000848e:	e6 04 06 40 	mulu.d	r0,r3,r4
80008492:	e4 05 07 40 	macu.d	r0,r2,r5
80008496:	e6 05 06 44 	mulu.d	r4,r3,r5
8000849a:	02 04       	add	r4,r1
8000849c:	5c 05       	acr	r5
8000849e:	ea 03 15 02 	lsl	r3,r5,0x2
800084a2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800084a6:	e8 02 15 02 	lsl	r2,r4,0x2
800084aa:	e6 08 06 40 	mulu.d	r0,r3,r8
800084ae:	e4 09 07 40 	macu.d	r0,r2,r9
800084b2:	e6 09 06 44 	mulu.d	r4,r3,r9
800084b6:	02 04       	add	r4,r1
800084b8:	5c 05       	acr	r5
800084ba:	a3 65       	lsl	r5,0x2
800084bc:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800084c0:	a3 64       	lsl	r4,0x2
800084c2:	5c 34       	neg	r4
800084c4:	f8 05 01 45 	sbc	r5,r12,r5
800084c8:	e6 04 06 40 	mulu.d	r0,r3,r4
800084cc:	e4 05 07 40 	macu.d	r0,r2,r5
800084d0:	e6 05 06 44 	mulu.d	r4,r3,r5
800084d4:	02 04       	add	r4,r1
800084d6:	5c 05       	acr	r5
800084d8:	ea 03 15 02 	lsl	r3,r5,0x2
800084dc:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800084e0:	e8 02 15 02 	lsl	r2,r4,0x2
800084e4:	e6 0a 06 40 	mulu.d	r0,r3,r10
800084e8:	e4 0b 07 40 	macu.d	r0,r2,r11
800084ec:	e6 0b 06 42 	mulu.d	r2,r3,r11
800084f0:	02 02       	add	r2,r1
800084f2:	5c 03       	acr	r3
800084f4:	ed b3 00 1c 	bld	r3,0x1c
800084f8:	c0 90       	breq	8000850a <__avr32_f64_div+0x12a>
800084fa:	a1 72       	lsl	r2,0x1
800084fc:	5c f3       	rol	r3
800084fe:	20 17       	sub	r7,1
80008500:	a3 9a       	lsr	r10,0x3
80008502:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008506:	a3 9b       	lsr	r11,0x3
80008508:	c0 58       	rjmp	80008512 <__avr32_f64_div+0x132>
8000850a:	a5 8a       	lsr	r10,0x4
8000850c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008510:	a5 8b       	lsr	r11,0x4
80008512:	58 07       	cp.w	r7,0
80008514:	e0 8a 00 8b 	brle	8000862a <__avr32_f64_div_res_subnormal>
80008518:	e0 12 ff 00 	andl	r2,0xff00
8000851c:	e8 12 00 80 	orl	r2,0x80
80008520:	e6 08 06 40 	mulu.d	r0,r3,r8
80008524:	e4 09 07 40 	macu.d	r0,r2,r9
80008528:	e4 08 06 44 	mulu.d	r4,r2,r8
8000852c:	e6 09 06 48 	mulu.d	r8,r3,r9
80008530:	00 05       	add	r5,r0
80008532:	f0 01 00 48 	adc	r8,r8,r1
80008536:	5c 09       	acr	r9
80008538:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000853c:	58 04       	cp.w	r4,0
8000853e:	5c 25       	cpc	r5

80008540 <__avr32_f64_div_round_subnormal>:
80008540:	f4 08 13 00 	cpc	r8,r10
80008544:	f6 09 13 00 	cpc	r9,r11
80008548:	5f 36       	srlo	r6
8000854a:	f8 06 17 00 	moveq	r6,r12
8000854e:	e4 0a 16 08 	lsr	r10,r2,0x8
80008552:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008556:	e6 0b 16 08 	lsr	r11,r3,0x8
8000855a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000855e:	ed be 00 1f 	bld	lr,0x1f
80008562:	ef bb 00 1f 	bst	r11,0x1f
80008566:	0c 0a       	add	r10,r6
80008568:	5c 0b       	acr	r11
8000856a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000856e:	e4 1b 00 0f 	andh	r11,0xf
80008572:	14 4b       	or	r11,r10
80008574:	e0 81 00 a7 	brne	800086c2 <__avr32_f64_div_res_subnormal+0x98>
80008578:	f2 06 16 14 	lsr	r6,r9,0x14
8000857c:	ab d6       	cbr	r6,0xb
8000857e:	e0 46 07 ff 	cp.w	r6,2047
80008582:	e0 81 00 a4 	brne	800086ca <__avr32_f64_div_res_subnormal+0xa0>
80008586:	c9 e8       	rjmp	800086c2 <__avr32_f64_div_res_subnormal+0x98>
80008588:	e4 19 00 0f 	andh	r9,0xf
8000858c:	10 49       	or	r9,r8
8000858e:	e0 81 00 9a 	brne	800086c2 <__avr32_f64_div_res_subnormal+0x98>
80008592:	c9 28       	rjmp	800086b6 <__avr32_f64_div_res_subnormal+0x8c>
80008594:	a3 7b       	lsl	r11,0x3
80008596:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000859a:	a3 7a       	lsl	r10,0x3
8000859c:	f5 eb 10 04 	or	r4,r10,r11
800085a0:	e0 80 00 a0 	breq	800086e0 <__avr32_f64_div_op1_zero>
800085a4:	f6 04 12 00 	clz	r4,r11
800085a8:	c1 70       	breq	800085d6 <__avr32_f64_div_round_subnormal+0x96>
800085aa:	c0 c3       	brcs	800085c2 <__avr32_f64_div_round_subnormal+0x82>
800085ac:	e8 05 11 20 	rsub	r5,r4,32
800085b0:	f6 04 09 4b 	lsl	r11,r11,r4
800085b4:	f4 05 0a 45 	lsr	r5,r10,r5
800085b8:	0a 4b       	or	r11,r5
800085ba:	f4 04 09 4a 	lsl	r10,r10,r4
800085be:	08 17       	sub	r7,r4
800085c0:	c0 b8       	rjmp	800085d6 <__avr32_f64_div_round_subnormal+0x96>
800085c2:	f4 04 12 00 	clz	r4,r10
800085c6:	f9 b4 03 00 	movlo	r4,0
800085ca:	f7 b4 02 e0 	subhs	r4,-32
800085ce:	f4 04 09 4b 	lsl	r11,r10,r4
800085d2:	30 0a       	mov	r10,0
800085d4:	08 17       	sub	r7,r4
800085d6:	a3 8a       	lsr	r10,0x2
800085d8:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800085dc:	a3 8b       	lsr	r11,0x2
800085de:	c1 1b       	rjmp	80008400 <__avr32_f64_div+0x20>
800085e0:	a3 79       	lsl	r9,0x3
800085e2:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800085e6:	a3 78       	lsl	r8,0x3
800085e8:	f3 e8 10 04 	or	r4,r9,r8
800085ec:	c6 f0       	breq	800086ca <__avr32_f64_div_res_subnormal+0xa0>
800085ee:	f2 04 12 00 	clz	r4,r9
800085f2:	c1 70       	breq	80008620 <__avr32_f64_div_round_subnormal+0xe0>
800085f4:	c0 c3       	brcs	8000860c <__avr32_f64_div_round_subnormal+0xcc>
800085f6:	e8 05 11 20 	rsub	r5,r4,32
800085fa:	f2 04 09 49 	lsl	r9,r9,r4
800085fe:	f0 05 0a 45 	lsr	r5,r8,r5
80008602:	0a 49       	or	r9,r5
80008604:	f0 04 09 48 	lsl	r8,r8,r4
80008608:	08 16       	sub	r6,r4
8000860a:	c0 b8       	rjmp	80008620 <__avr32_f64_div_round_subnormal+0xe0>
8000860c:	f0 04 12 00 	clz	r4,r8
80008610:	f9 b4 03 00 	movlo	r4,0
80008614:	f7 b4 02 e0 	subhs	r4,-32
80008618:	f0 04 09 49 	lsl	r9,r8,r4
8000861c:	30 08       	mov	r8,0
8000861e:	08 16       	sub	r6,r4
80008620:	a3 88       	lsr	r8,0x2
80008622:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008626:	a3 89       	lsr	r9,0x2
80008628:	cf ca       	rjmp	80008420 <__avr32_f64_div+0x40>

8000862a <__avr32_f64_div_res_subnormal>:
8000862a:	5c 37       	neg	r7
8000862c:	2f f7       	sub	r7,-1
8000862e:	f1 b7 04 c0 	satu	r7,0x6
80008632:	e0 47 00 20 	cp.w	r7,32
80008636:	c1 54       	brge	80008660 <__avr32_f64_div_res_subnormal+0x36>
80008638:	ee 06 11 20 	rsub	r6,r7,32
8000863c:	e4 07 0a 42 	lsr	r2,r2,r7
80008640:	e6 06 09 4c 	lsl	r12,r3,r6
80008644:	18 42       	or	r2,r12
80008646:	e6 07 0a 43 	lsr	r3,r3,r7
8000864a:	f4 06 09 41 	lsl	r1,r10,r6
8000864e:	f4 07 0a 4a 	lsr	r10,r10,r7
80008652:	f6 06 09 4c 	lsl	r12,r11,r6
80008656:	18 4a       	or	r10,r12
80008658:	f6 07 0a 4b 	lsr	r11,r11,r7
8000865c:	30 00       	mov	r0,0
8000865e:	c1 58       	rjmp	80008688 <__avr32_f64_div_res_subnormal+0x5e>
80008660:	ee 06 11 20 	rsub	r6,r7,32
80008664:	f9 b0 00 00 	moveq	r0,0
80008668:	f9 bc 00 00 	moveq	r12,0
8000866c:	c0 50       	breq	80008676 <__avr32_f64_div_res_subnormal+0x4c>
8000866e:	f4 06 09 40 	lsl	r0,r10,r6
80008672:	f6 06 09 4c 	lsl	r12,r11,r6
80008676:	e6 07 0a 42 	lsr	r2,r3,r7
8000867a:	30 03       	mov	r3,0
8000867c:	f4 07 0a 41 	lsr	r1,r10,r7
80008680:	18 41       	or	r1,r12
80008682:	f6 07 0a 4a 	lsr	r10,r11,r7
80008686:	30 0b       	mov	r11,0
80008688:	e0 12 ff 00 	andl	r2,0xff00
8000868c:	e8 12 00 80 	orl	r2,0x80
80008690:	e6 08 06 46 	mulu.d	r6,r3,r8
80008694:	e4 09 07 46 	macu.d	r6,r2,r9
80008698:	e4 08 06 44 	mulu.d	r4,r2,r8
8000869c:	e6 09 06 48 	mulu.d	r8,r3,r9
800086a0:	0c 05       	add	r5,r6
800086a2:	f0 07 00 48 	adc	r8,r8,r7
800086a6:	5c 09       	acr	r9
800086a8:	30 07       	mov	r7,0
800086aa:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800086ae:	00 34       	cp.w	r4,r0
800086b0:	e2 05 13 00 	cpc	r5,r1
800086b4:	c4 6b       	rjmp	80008540 <__avr32_f64_div_round_subnormal>
800086b6:	1c 9b       	mov	r11,lr
800086b8:	e6 1b 80 00 	andh	r11,0x8000,COH
800086bc:	30 0a       	mov	r10,0
800086be:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800086c2:	3f fb       	mov	r11,-1
800086c4:	30 0a       	mov	r10,0
800086c6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800086ca:	f5 eb 10 04 	or	r4,r10,r11
800086ce:	c0 90       	breq	800086e0 <__avr32_f64_div_op1_zero>
800086d0:	1c 9b       	mov	r11,lr
800086d2:	e6 1b 80 00 	andh	r11,0x8000,COH
800086d6:	ea 1b 7f f0 	orh	r11,0x7ff0
800086da:	30 0a       	mov	r10,0
800086dc:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800086e0 <__avr32_f64_div_op1_zero>:
800086e0:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800086e4:	ce f0       	breq	800086c2 <__avr32_f64_div_res_subnormal+0x98>
800086e6:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800086ea:	e0 44 07 ff 	cp.w	r4,2047
800086ee:	ce 41       	brne	800086b6 <__avr32_f64_div_res_subnormal+0x8c>
800086f0:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800086f4:	ce 10       	breq	800086b6 <__avr32_f64_div_res_subnormal+0x8c>
800086f6:	ce 6b       	rjmp	800086c2 <__avr32_f64_div_res_subnormal+0x98>

800086f8 <__avr32_udiv64>:
800086f8:	d4 31       	pushm	r0-r7,lr
800086fa:	1a 97       	mov	r7,sp
800086fc:	20 3d       	sub	sp,12
800086fe:	10 9c       	mov	r12,r8
80008700:	12 9e       	mov	lr,r9
80008702:	14 93       	mov	r3,r10
80008704:	58 09       	cp.w	r9,0
80008706:	e0 81 00 bd 	brne	80008880 <__avr32_udiv64+0x188>
8000870a:	16 38       	cp.w	r8,r11
8000870c:	e0 88 00 40 	brls	8000878c <__avr32_udiv64+0x94>
80008710:	f0 08 12 00 	clz	r8,r8
80008714:	c0 d0       	breq	8000872e <__avr32_udiv64+0x36>
80008716:	f6 08 09 4b 	lsl	r11,r11,r8
8000871a:	f0 09 11 20 	rsub	r9,r8,32
8000871e:	f8 08 09 4c 	lsl	r12,r12,r8
80008722:	f4 09 0a 49 	lsr	r9,r10,r9
80008726:	f4 08 09 43 	lsl	r3,r10,r8
8000872a:	f3 eb 10 0b 	or	r11,r9,r11
8000872e:	f8 0e 16 10 	lsr	lr,r12,0x10
80008732:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008736:	f6 0e 0d 00 	divu	r0,r11,lr
8000873a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000873e:	00 99       	mov	r9,r0
80008740:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008744:	e0 0a 02 48 	mul	r8,r0,r10
80008748:	10 3b       	cp.w	r11,r8
8000874a:	c0 a2       	brcc	8000875e <__avr32_udiv64+0x66>
8000874c:	20 19       	sub	r9,1
8000874e:	18 0b       	add	r11,r12
80008750:	18 3b       	cp.w	r11,r12
80008752:	c0 63       	brcs	8000875e <__avr32_udiv64+0x66>
80008754:	10 3b       	cp.w	r11,r8
80008756:	f7 b9 03 01 	sublo	r9,1
8000875a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000875e:	f6 08 01 01 	sub	r1,r11,r8
80008762:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008766:	e2 0e 0d 00 	divu	r0,r1,lr
8000876a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000876e:	00 98       	mov	r8,r0
80008770:	e0 0a 02 4a 	mul	r10,r0,r10
80008774:	14 33       	cp.w	r3,r10
80008776:	c0 82       	brcc	80008786 <__avr32_udiv64+0x8e>
80008778:	20 18       	sub	r8,1
8000877a:	18 03       	add	r3,r12
8000877c:	18 33       	cp.w	r3,r12
8000877e:	c0 43       	brcs	80008786 <__avr32_udiv64+0x8e>
80008780:	14 33       	cp.w	r3,r10
80008782:	f7 b8 03 01 	sublo	r8,1
80008786:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000878a:	cd f8       	rjmp	80008948 <__avr32_udiv64+0x250>
8000878c:	58 08       	cp.w	r8,0
8000878e:	c0 51       	brne	80008798 <__avr32_udiv64+0xa0>
80008790:	30 19       	mov	r9,1
80008792:	f2 08 0d 08 	divu	r8,r9,r8
80008796:	10 9c       	mov	r12,r8
80008798:	f8 06 12 00 	clz	r6,r12
8000879c:	c0 41       	brne	800087a4 <__avr32_udiv64+0xac>
8000879e:	18 1b       	sub	r11,r12
800087a0:	30 19       	mov	r9,1
800087a2:	c4 08       	rjmp	80008822 <__avr32_udiv64+0x12a>
800087a4:	ec 01 11 20 	rsub	r1,r6,32
800087a8:	f4 01 0a 49 	lsr	r9,r10,r1
800087ac:	f8 06 09 4c 	lsl	r12,r12,r6
800087b0:	f6 06 09 48 	lsl	r8,r11,r6
800087b4:	f6 01 0a 41 	lsr	r1,r11,r1
800087b8:	f3 e8 10 08 	or	r8,r9,r8
800087bc:	f8 03 16 10 	lsr	r3,r12,0x10
800087c0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800087c4:	e2 03 0d 00 	divu	r0,r1,r3
800087c8:	f0 0b 16 10 	lsr	r11,r8,0x10
800087cc:	00 9e       	mov	lr,r0
800087ce:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800087d2:	e0 05 02 49 	mul	r9,r0,r5
800087d6:	12 3b       	cp.w	r11,r9
800087d8:	c0 a2       	brcc	800087ec <__avr32_udiv64+0xf4>
800087da:	20 1e       	sub	lr,1
800087dc:	18 0b       	add	r11,r12
800087de:	18 3b       	cp.w	r11,r12
800087e0:	c0 63       	brcs	800087ec <__avr32_udiv64+0xf4>
800087e2:	12 3b       	cp.w	r11,r9
800087e4:	f7 be 03 01 	sublo	lr,1
800087e8:	f7 dc e3 0b 	addcs	r11,r11,r12
800087ec:	12 1b       	sub	r11,r9
800087ee:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800087f2:	f6 03 0d 02 	divu	r2,r11,r3
800087f6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800087fa:	04 99       	mov	r9,r2
800087fc:	e4 05 02 4b 	mul	r11,r2,r5
80008800:	16 38       	cp.w	r8,r11
80008802:	c0 a2       	brcc	80008816 <__avr32_udiv64+0x11e>
80008804:	20 19       	sub	r9,1
80008806:	18 08       	add	r8,r12
80008808:	18 38       	cp.w	r8,r12
8000880a:	c0 63       	brcs	80008816 <__avr32_udiv64+0x11e>
8000880c:	16 38       	cp.w	r8,r11
8000880e:	f7 b9 03 01 	sublo	r9,1
80008812:	f1 dc e3 08 	addcs	r8,r8,r12
80008816:	f4 06 09 43 	lsl	r3,r10,r6
8000881a:	f0 0b 01 0b 	sub	r11,r8,r11
8000881e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008822:	f8 06 16 10 	lsr	r6,r12,0x10
80008826:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000882a:	f6 06 0d 00 	divu	r0,r11,r6
8000882e:	e6 0b 16 10 	lsr	r11,r3,0x10
80008832:	00 9a       	mov	r10,r0
80008834:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008838:	e0 0e 02 48 	mul	r8,r0,lr
8000883c:	10 3b       	cp.w	r11,r8
8000883e:	c0 a2       	brcc	80008852 <__avr32_udiv64+0x15a>
80008840:	20 1a       	sub	r10,1
80008842:	18 0b       	add	r11,r12
80008844:	18 3b       	cp.w	r11,r12
80008846:	c0 63       	brcs	80008852 <__avr32_udiv64+0x15a>
80008848:	10 3b       	cp.w	r11,r8
8000884a:	f7 ba 03 01 	sublo	r10,1
8000884e:	f7 dc e3 0b 	addcs	r11,r11,r12
80008852:	f6 08 01 01 	sub	r1,r11,r8
80008856:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000885a:	e2 06 0d 00 	divu	r0,r1,r6
8000885e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008862:	00 98       	mov	r8,r0
80008864:	e0 0e 02 4b 	mul	r11,r0,lr
80008868:	16 33       	cp.w	r3,r11
8000886a:	c0 82       	brcc	8000887a <__avr32_udiv64+0x182>
8000886c:	20 18       	sub	r8,1
8000886e:	18 03       	add	r3,r12
80008870:	18 33       	cp.w	r3,r12
80008872:	c0 43       	brcs	8000887a <__avr32_udiv64+0x182>
80008874:	16 33       	cp.w	r3,r11
80008876:	f7 b8 03 01 	sublo	r8,1
8000887a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000887e:	c6 98       	rjmp	80008950 <__avr32_udiv64+0x258>
80008880:	16 39       	cp.w	r9,r11
80008882:	e0 8b 00 65 	brhi	8000894c <__avr32_udiv64+0x254>
80008886:	f2 09 12 00 	clz	r9,r9
8000888a:	c0 b1       	brne	800088a0 <__avr32_udiv64+0x1a8>
8000888c:	10 3a       	cp.w	r10,r8
8000888e:	5f 2a       	srhs	r10
80008890:	1c 3b       	cp.w	r11,lr
80008892:	5f b8       	srhi	r8
80008894:	10 4a       	or	r10,r8
80008896:	f2 0a 18 00 	cp.b	r10,r9
8000889a:	c5 90       	breq	8000894c <__avr32_udiv64+0x254>
8000889c:	30 18       	mov	r8,1
8000889e:	c5 98       	rjmp	80008950 <__avr32_udiv64+0x258>
800088a0:	f0 09 09 46 	lsl	r6,r8,r9
800088a4:	f2 03 11 20 	rsub	r3,r9,32
800088a8:	fc 09 09 4e 	lsl	lr,lr,r9
800088ac:	f0 03 0a 48 	lsr	r8,r8,r3
800088b0:	f6 09 09 4c 	lsl	r12,r11,r9
800088b4:	f4 03 0a 42 	lsr	r2,r10,r3
800088b8:	ef 46 ff f4 	st.w	r7[-12],r6
800088bc:	f6 03 0a 43 	lsr	r3,r11,r3
800088c0:	18 42       	or	r2,r12
800088c2:	f1 ee 10 0c 	or	r12,r8,lr
800088c6:	f8 01 16 10 	lsr	r1,r12,0x10
800088ca:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800088ce:	e6 01 0d 04 	divu	r4,r3,r1
800088d2:	e4 03 16 10 	lsr	r3,r2,0x10
800088d6:	08 9e       	mov	lr,r4
800088d8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800088dc:	e8 06 02 48 	mul	r8,r4,r6
800088e0:	10 33       	cp.w	r3,r8
800088e2:	c0 a2       	brcc	800088f6 <__avr32_udiv64+0x1fe>
800088e4:	20 1e       	sub	lr,1
800088e6:	18 03       	add	r3,r12
800088e8:	18 33       	cp.w	r3,r12
800088ea:	c0 63       	brcs	800088f6 <__avr32_udiv64+0x1fe>
800088ec:	10 33       	cp.w	r3,r8
800088ee:	f7 be 03 01 	sublo	lr,1
800088f2:	e7 dc e3 03 	addcs	r3,r3,r12
800088f6:	10 13       	sub	r3,r8
800088f8:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800088fc:	e6 01 0d 00 	divu	r0,r3,r1
80008900:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008904:	00 98       	mov	r8,r0
80008906:	e0 06 02 46 	mul	r6,r0,r6
8000890a:	0c 3b       	cp.w	r11,r6
8000890c:	c0 a2       	brcc	80008920 <__avr32_udiv64+0x228>
8000890e:	20 18       	sub	r8,1
80008910:	18 0b       	add	r11,r12
80008912:	18 3b       	cp.w	r11,r12
80008914:	c0 63       	brcs	80008920 <__avr32_udiv64+0x228>
80008916:	0c 3b       	cp.w	r11,r6
80008918:	f7 dc e3 0b 	addcs	r11,r11,r12
8000891c:	f7 b8 03 01 	sublo	r8,1
80008920:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008924:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008928:	0c 1b       	sub	r11,r6
8000892a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000892e:	06 95       	mov	r5,r3
80008930:	16 35       	cp.w	r5,r11
80008932:	e0 8b 00 0a 	brhi	80008946 <__avr32_udiv64+0x24e>
80008936:	5f 0b       	sreq	r11
80008938:	f4 09 09 49 	lsl	r9,r10,r9
8000893c:	12 32       	cp.w	r2,r9
8000893e:	5f b9       	srhi	r9
80008940:	f7 e9 00 09 	and	r9,r11,r9
80008944:	c0 60       	breq	80008950 <__avr32_udiv64+0x258>
80008946:	20 18       	sub	r8,1
80008948:	30 09       	mov	r9,0
8000894a:	c0 38       	rjmp	80008950 <__avr32_udiv64+0x258>
8000894c:	30 09       	mov	r9,0
8000894e:	12 98       	mov	r8,r9
80008950:	10 9a       	mov	r10,r8
80008952:	12 93       	mov	r3,r9
80008954:	10 92       	mov	r2,r8
80008956:	12 9b       	mov	r11,r9
80008958:	2f dd       	sub	sp,-12
8000895a:	d8 32       	popm	r0-r7,pc

8000895c <__avr32_umod64>:
8000895c:	d4 31       	pushm	r0-r7,lr
8000895e:	1a 97       	mov	r7,sp
80008960:	20 3d       	sub	sp,12
80008962:	10 9c       	mov	r12,r8
80008964:	12 95       	mov	r5,r9
80008966:	14 9e       	mov	lr,r10
80008968:	16 91       	mov	r1,r11
8000896a:	16 96       	mov	r6,r11
8000896c:	58 09       	cp.w	r9,0
8000896e:	e0 81 00 81 	brne	80008a70 <__avr32_umod64+0x114>
80008972:	16 38       	cp.w	r8,r11
80008974:	e0 88 00 12 	brls	80008998 <__avr32_umod64+0x3c>
80008978:	f0 08 12 00 	clz	r8,r8
8000897c:	c4 e0       	breq	80008a18 <__avr32_umod64+0xbc>
8000897e:	f6 08 09 46 	lsl	r6,r11,r8
80008982:	f8 08 09 4c 	lsl	r12,r12,r8
80008986:	f0 0b 11 20 	rsub	r11,r8,32
8000898a:	f4 08 09 4e 	lsl	lr,r10,r8
8000898e:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008992:	f7 e6 10 06 	or	r6,r11,r6
80008996:	c4 18       	rjmp	80008a18 <__avr32_umod64+0xbc>
80008998:	58 08       	cp.w	r8,0
8000899a:	c0 51       	brne	800089a4 <__avr32_umod64+0x48>
8000899c:	30 19       	mov	r9,1
8000899e:	f2 08 0d 08 	divu	r8,r9,r8
800089a2:	10 9c       	mov	r12,r8
800089a4:	f8 08 12 00 	clz	r8,r12
800089a8:	c0 31       	brne	800089ae <__avr32_umod64+0x52>
800089aa:	18 16       	sub	r6,r12
800089ac:	c3 68       	rjmp	80008a18 <__avr32_umod64+0xbc>
800089ae:	f0 03 11 20 	rsub	r3,r8,32
800089b2:	f4 03 0a 4b 	lsr	r11,r10,r3
800089b6:	f8 08 09 4c 	lsl	r12,r12,r8
800089ba:	ec 08 09 49 	lsl	r9,r6,r8
800089be:	ec 03 0a 43 	lsr	r3,r6,r3
800089c2:	f7 e9 10 09 	or	r9,r11,r9
800089c6:	f8 05 16 10 	lsr	r5,r12,0x10
800089ca:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800089ce:	e6 05 0d 02 	divu	r2,r3,r5
800089d2:	f2 0e 16 10 	lsr	lr,r9,0x10
800089d6:	ec 02 02 4b 	mul	r11,r6,r2
800089da:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800089de:	16 3e       	cp.w	lr,r11
800089e0:	c0 72       	brcc	800089ee <__avr32_umod64+0x92>
800089e2:	18 0e       	add	lr,r12
800089e4:	18 3e       	cp.w	lr,r12
800089e6:	c0 43       	brcs	800089ee <__avr32_umod64+0x92>
800089e8:	16 3e       	cp.w	lr,r11
800089ea:	fd dc e3 0e 	addcs	lr,lr,r12
800089ee:	fc 0b 01 03 	sub	r3,lr,r11
800089f2:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800089f6:	e6 05 0d 02 	divu	r2,r3,r5
800089fa:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800089fe:	a5 36       	mul	r6,r2
80008a00:	0c 39       	cp.w	r9,r6
80008a02:	c0 72       	brcc	80008a10 <__avr32_umod64+0xb4>
80008a04:	18 09       	add	r9,r12
80008a06:	18 39       	cp.w	r9,r12
80008a08:	c0 43       	brcs	80008a10 <__avr32_umod64+0xb4>
80008a0a:	0c 39       	cp.w	r9,r6
80008a0c:	f3 dc e3 09 	addcs	r9,r9,r12
80008a10:	f2 06 01 06 	sub	r6,r9,r6
80008a14:	f4 08 09 4e 	lsl	lr,r10,r8
80008a18:	f8 0a 16 10 	lsr	r10,r12,0x10
80008a1c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008a20:	ec 0a 0d 02 	divu	r2,r6,r10
80008a24:	fc 09 16 10 	lsr	r9,lr,0x10
80008a28:	ea 02 02 4b 	mul	r11,r5,r2
80008a2c:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008a30:	16 39       	cp.w	r9,r11
80008a32:	c0 72       	brcc	80008a40 <__avr32_umod64+0xe4>
80008a34:	18 09       	add	r9,r12
80008a36:	18 39       	cp.w	r9,r12
80008a38:	c0 43       	brcs	80008a40 <__avr32_umod64+0xe4>
80008a3a:	16 39       	cp.w	r9,r11
80008a3c:	f3 dc e3 09 	addcs	r9,r9,r12
80008a40:	f2 0b 01 0b 	sub	r11,r9,r11
80008a44:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008a48:	f6 0a 0d 0a 	divu	r10,r11,r10
80008a4c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008a50:	ea 0a 02 4a 	mul	r10,r5,r10
80008a54:	14 3e       	cp.w	lr,r10
80008a56:	c0 72       	brcc	80008a64 <__avr32_umod64+0x108>
80008a58:	18 0e       	add	lr,r12
80008a5a:	18 3e       	cp.w	lr,r12
80008a5c:	c0 43       	brcs	80008a64 <__avr32_umod64+0x108>
80008a5e:	14 3e       	cp.w	lr,r10
80008a60:	fd dc e3 0e 	addcs	lr,lr,r12
80008a64:	fc 0a 01 0a 	sub	r10,lr,r10
80008a68:	30 0b       	mov	r11,0
80008a6a:	f4 08 0a 4a 	lsr	r10,r10,r8
80008a6e:	c7 b8       	rjmp	80008b64 <__avr32_umod64+0x208>
80008a70:	16 39       	cp.w	r9,r11
80008a72:	e0 8b 00 79 	brhi	80008b64 <__avr32_umod64+0x208>
80008a76:	f2 09 12 00 	clz	r9,r9
80008a7a:	c1 21       	brne	80008a9e <__avr32_umod64+0x142>
80008a7c:	10 3a       	cp.w	r10,r8
80008a7e:	5f 2b       	srhs	r11
80008a80:	0a 31       	cp.w	r1,r5
80008a82:	5f ba       	srhi	r10
80008a84:	f7 ea 10 0a 	or	r10,r11,r10
80008a88:	f2 0a 18 00 	cp.b	r10,r9
80008a8c:	c0 60       	breq	80008a98 <__avr32_umod64+0x13c>
80008a8e:	fc 08 01 0c 	sub	r12,lr,r8
80008a92:	e2 05 01 46 	sbc	r6,r1,r5
80008a96:	18 9e       	mov	lr,r12
80008a98:	0c 9b       	mov	r11,r6
80008a9a:	1c 9a       	mov	r10,lr
80008a9c:	c6 48       	rjmp	80008b64 <__avr32_umod64+0x208>
80008a9e:	ea 09 09 4c 	lsl	r12,r5,r9
80008aa2:	f2 06 11 20 	rsub	r6,r9,32
80008aa6:	f6 09 09 4b 	lsl	r11,r11,r9
80008aaa:	f0 09 09 42 	lsl	r2,r8,r9
80008aae:	ef 46 ff f4 	st.w	r7[-12],r6
80008ab2:	f0 06 0a 48 	lsr	r8,r8,r6
80008ab6:	18 48       	or	r8,r12
80008ab8:	e2 06 0a 4c 	lsr	r12,r1,r6
80008abc:	f4 09 09 43 	lsl	r3,r10,r9
80008ac0:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008ac4:	f4 06 0a 4a 	lsr	r10,r10,r6
80008ac8:	16 4a       	or	r10,r11
80008aca:	f0 0b 16 10 	lsr	r11,r8,0x10
80008ace:	f8 0b 0d 04 	divu	r4,r12,r11
80008ad2:	f4 0c 16 10 	lsr	r12,r10,0x10
80008ad6:	08 91       	mov	r1,r4
80008ad8:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008adc:	e8 0e 02 46 	mul	r6,r4,lr
80008ae0:	0c 3c       	cp.w	r12,r6
80008ae2:	c0 a2       	brcc	80008af6 <__avr32_umod64+0x19a>
80008ae4:	20 11       	sub	r1,1
80008ae6:	10 0c       	add	r12,r8
80008ae8:	10 3c       	cp.w	r12,r8
80008aea:	c0 63       	brcs	80008af6 <__avr32_umod64+0x19a>
80008aec:	0c 3c       	cp.w	r12,r6
80008aee:	f7 b1 03 01 	sublo	r1,1
80008af2:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008af6:	0c 1c       	sub	r12,r6
80008af8:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008afc:	f8 0b 0d 04 	divu	r4,r12,r11
80008b00:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008b04:	08 96       	mov	r6,r4
80008b06:	e8 0e 02 4e 	mul	lr,r4,lr
80008b0a:	1c 3b       	cp.w	r11,lr
80008b0c:	c0 a2       	brcc	80008b20 <__avr32_umod64+0x1c4>
80008b0e:	20 16       	sub	r6,1
80008b10:	10 0b       	add	r11,r8
80008b12:	10 3b       	cp.w	r11,r8
80008b14:	c0 63       	brcs	80008b20 <__avr32_umod64+0x1c4>
80008b16:	1c 3b       	cp.w	r11,lr
80008b18:	f7 b6 03 01 	sublo	r6,1
80008b1c:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008b20:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008b24:	1c 1b       	sub	r11,lr
80008b26:	e2 02 06 40 	mulu.d	r0,r1,r2
80008b2a:	00 9e       	mov	lr,r0
80008b2c:	02 9c       	mov	r12,r1
80008b2e:	16 3c       	cp.w	r12,r11
80008b30:	e0 8b 00 08 	brhi	80008b40 <__avr32_umod64+0x1e4>
80008b34:	5f 06       	sreq	r6
80008b36:	06 30       	cp.w	r0,r3
80008b38:	5f ba       	srhi	r10
80008b3a:	ed ea 00 0a 	and	r10,r6,r10
80008b3e:	c0 60       	breq	80008b4a <__avr32_umod64+0x1ee>
80008b40:	fc 02 01 04 	sub	r4,lr,r2
80008b44:	f8 08 01 4c 	sbc	r12,r12,r8
80008b48:	08 9e       	mov	lr,r4
80008b4a:	e6 0e 01 0a 	sub	r10,r3,lr
80008b4e:	f6 0c 01 4c 	sbc	r12,r11,r12
80008b52:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008b56:	f8 09 0a 4b 	lsr	r11,r12,r9
80008b5a:	f4 09 0a 4a 	lsr	r10,r10,r9
80008b5e:	f8 01 09 4c 	lsl	r12,r12,r1
80008b62:	18 4a       	or	r10,r12
80008b64:	2f dd       	sub	sp,-12
80008b66:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008c00:	c0 08       	rjmp	80008c00 <_evba>
	...

80008c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008c04:	c0 08       	rjmp	80008c04 <_handle_TLB_Multiple_Hit>
	...

80008c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008c08:	c0 08       	rjmp	80008c08 <_handle_Bus_Error_Data_Fetch>
	...

80008c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008c0c:	c0 08       	rjmp	80008c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008c10:	c0 08       	rjmp	80008c10 <_handle_NMI>
	...

80008c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008c14:	c0 08       	rjmp	80008c14 <_handle_Instruction_Address>
	...

80008c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008c18:	c0 08       	rjmp	80008c18 <_handle_ITLB_Protection>
	...

80008c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008c1c:	c0 08       	rjmp	80008c1c <_handle_Breakpoint>
	...

80008c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008c20:	c0 08       	rjmp	80008c20 <_handle_Illegal_Opcode>
	...

80008c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008c24:	c0 08       	rjmp	80008c24 <_handle_Unimplemented_Instruction>
	...

80008c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008c28:	c0 08       	rjmp	80008c28 <_handle_Privilege_Violation>
	...

80008c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008c2c:	c0 08       	rjmp	80008c2c <_handle_Floating_Point>
	...

80008c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008c30:	c0 08       	rjmp	80008c30 <_handle_Coprocessor_Absent>
	...

80008c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008c34:	c0 08       	rjmp	80008c34 <_handle_Data_Address_Read>
	...

80008c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008c38:	c0 08       	rjmp	80008c38 <_handle_Data_Address_Write>
	...

80008c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008c3c:	c0 08       	rjmp	80008c3c <_handle_DTLB_Protection_Read>
	...

80008c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008c40:	c0 08       	rjmp	80008c40 <_handle_DTLB_Protection_Write>
	...

80008c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008c44:	c0 08       	rjmp	80008c44 <_handle_DTLB_Modified>
	...

80008c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008c50:	c0 08       	rjmp	80008c50 <_handle_ITLB_Miss>
	...

80008c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008c60:	c0 08       	rjmp	80008c60 <_handle_DTLB_Miss_Read>
	...

80008c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008c70:	c0 08       	rjmp	80008c70 <_handle_DTLB_Miss_Write>
	...

80008d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008d00:	c0 08       	rjmp	80008d00 <_handle_Supervisor_Call>
80008d02:	d7 03       	nop

80008d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d04:	30 0c       	mov	r12,0
80008d06:	fe b0 d0 37 	rcall	80002d74 <_get_interrupt_handler>
80008d0a:	58 0c       	cp.w	r12,0
80008d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d10:	d6 03       	rete

80008d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d12:	30 1c       	mov	r12,1
80008d14:	fe b0 d0 30 	rcall	80002d74 <_get_interrupt_handler>
80008d18:	58 0c       	cp.w	r12,0
80008d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d1e:	d6 03       	rete

80008d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d20:	30 2c       	mov	r12,2
80008d22:	fe b0 d0 29 	rcall	80002d74 <_get_interrupt_handler>
80008d26:	58 0c       	cp.w	r12,0
80008d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d2c:	d6 03       	rete

80008d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d2e:	30 3c       	mov	r12,3
80008d30:	fe b0 d0 22 	rcall	80002d74 <_get_interrupt_handler>
80008d34:	58 0c       	cp.w	r12,0
80008d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d3a:	d6 03       	rete
80008d3c:	d7 03       	nop
80008d3e:	d7 03       	nop
80008d40:	d7 03       	nop
80008d42:	d7 03       	nop
80008d44:	d7 03       	nop
80008d46:	d7 03       	nop
80008d48:	d7 03       	nop
80008d4a:	d7 03       	nop
80008d4c:	d7 03       	nop
80008d4e:	d7 03       	nop
80008d50:	d7 03       	nop
80008d52:	d7 03       	nop
80008d54:	d7 03       	nop
80008d56:	d7 03       	nop
80008d58:	d7 03       	nop
80008d5a:	d7 03       	nop
80008d5c:	d7 03       	nop
80008d5e:	d7 03       	nop
80008d60:	d7 03       	nop
80008d62:	d7 03       	nop
80008d64:	d7 03       	nop
80008d66:	d7 03       	nop
80008d68:	d7 03       	nop
80008d6a:	d7 03       	nop
80008d6c:	d7 03       	nop
80008d6e:	d7 03       	nop
80008d70:	d7 03       	nop
80008d72:	d7 03       	nop
80008d74:	d7 03       	nop
80008d76:	d7 03       	nop
80008d78:	d7 03       	nop
80008d7a:	d7 03       	nop
80008d7c:	d7 03       	nop
80008d7e:	d7 03       	nop
80008d80:	d7 03       	nop
80008d82:	d7 03       	nop
80008d84:	d7 03       	nop
80008d86:	d7 03       	nop
80008d88:	d7 03       	nop
80008d8a:	d7 03       	nop
80008d8c:	d7 03       	nop
80008d8e:	d7 03       	nop
80008d90:	d7 03       	nop
80008d92:	d7 03       	nop
80008d94:	d7 03       	nop
80008d96:	d7 03       	nop
80008d98:	d7 03       	nop
80008d9a:	d7 03       	nop
80008d9c:	d7 03       	nop
80008d9e:	d7 03       	nop
80008da0:	d7 03       	nop
80008da2:	d7 03       	nop
80008da4:	d7 03       	nop
80008da6:	d7 03       	nop
80008da8:	d7 03       	nop
80008daa:	d7 03       	nop
80008dac:	d7 03       	nop
80008dae:	d7 03       	nop
80008db0:	d7 03       	nop
80008db2:	d7 03       	nop
80008db4:	d7 03       	nop
80008db6:	d7 03       	nop
80008db8:	d7 03       	nop
80008dba:	d7 03       	nop
80008dbc:	d7 03       	nop
80008dbe:	d7 03       	nop
80008dc0:	d7 03       	nop
80008dc2:	d7 03       	nop
80008dc4:	d7 03       	nop
80008dc6:	d7 03       	nop
80008dc8:	d7 03       	nop
80008dca:	d7 03       	nop
80008dcc:	d7 03       	nop
80008dce:	d7 03       	nop
80008dd0:	d7 03       	nop
80008dd2:	d7 03       	nop
80008dd4:	d7 03       	nop
80008dd6:	d7 03       	nop
80008dd8:	d7 03       	nop
80008dda:	d7 03       	nop
80008ddc:	d7 03       	nop
80008dde:	d7 03       	nop
80008de0:	d7 03       	nop
80008de2:	d7 03       	nop
80008de4:	d7 03       	nop
80008de6:	d7 03       	nop
80008de8:	d7 03       	nop
80008dea:	d7 03       	nop
80008dec:	d7 03       	nop
80008dee:	d7 03       	nop
80008df0:	d7 03       	nop
80008df2:	d7 03       	nop
80008df4:	d7 03       	nop
80008df6:	d7 03       	nop
80008df8:	d7 03       	nop
80008dfa:	d7 03       	nop
80008dfc:	d7 03       	nop
80008dfe:	d7 03       	nop
