
CAN_LAB4.3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007644  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009800  80009800  00009c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000075c  80009a00  80009a00  00009e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000a15c  8000a15c  0000a55c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  8000a160  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000340  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e7a8  00000858  00000858  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000ad18  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000e40  00000000  00000000  0000ad48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001a67  00000000  00000000  0000bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000210aa  00000000  00000000  0000d5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005627  00000000  00000000  0002e699  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e716  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021d0  00000000  00000000  000423d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004319  00000000  00000000  000445a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a27b  00000000  00000000  000488c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00a21516  00000000  00000000  00052b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001068  00000000  00000000  00a74058  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c2 d0 	sub	pc,pc,-15664

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e2 d4 	sub	pc,pc,-7468

Disassembly of section .text:

80002008 <adc_start>:
80002008:	30 28       	mov	r8,2
8000200a:	99 08       	st.w	r12[0x0],r8
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
}
8000200c:	5e fc       	retal	r12

8000200e <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000200e:	30 18       	mov	r8,1
80002010:	f0 0b 09 48 	lsl	r8,r8,r11
80002014:	99 48       	st.w	r12[0x10],r8
}
80002016:	5e fc       	retal	r12

80002018 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002018:	78 78       	ld.w	r8,r12[0x1c]
8000201a:	30 19       	mov	r9,1
8000201c:	f2 0b 09 49 	lsl	r9,r9,r11
80002020:	f3 e8 00 08 	and	r8,r9,r8
}
80002024:	5f 1c       	srne	r12
80002026:	5e fc       	retal	r12

80002028 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002028:	eb cd 40 e0 	pushm	r5-r7,lr
8000202c:	18 97       	mov	r7,r12
8000202e:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002030:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002034:	0c 9b       	mov	r11,r6
80002036:	0e 9c       	mov	r12,r7
80002038:	f0 1f 00 05 	mcall	8000204c <adc_get_value+0x24>
8000203c:	cf c0       	breq	80002034 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000203e:	2d 07       	sub	r7,-48
80002040:	5c 75       	castu.h	r5
}
80002042:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 18       	sub	r8,1

80002050 <rtc_is_busy>:
#include "rtc.h"


int rtc_is_busy(volatile avr32_rtc_t *rtc)
{
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
80002050:	78 0c       	ld.w	r12,r12[0x0]
}
80002052:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002056:	5e fc       	retal	r12

80002058 <rtc_set_value>:
  return 1;
}


void rtc_set_value(volatile avr32_rtc_t *rtc, unsigned long val)
{
80002058:	eb cd 40 c0 	pushm	r6-r7,lr
8000205c:	18 97       	mov	r7,r12
8000205e:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
80002060:	0e 9c       	mov	r12,r7
80002062:	f0 1f 00 06 	mcall	80002078 <rtc_set_value+0x20>
80002066:	cf d1       	brne	80002060 <rtc_set_value+0x8>
  // Set the new val value
  rtc->val = val;
80002068:	8f 16       	st.w	r7[0x4],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
8000206a:	0e 9c       	mov	r12,r7
8000206c:	f0 1f 00 03 	mcall	80002078 <rtc_set_value+0x20>
80002070:	cf d1       	brne	8000206a <rtc_set_value+0x12>
}
80002072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	20 50       	sub	r0,5

8000207c <rtc_enable>:
  while (rtc_is_busy(rtc));
}


void rtc_enable(volatile avr32_rtc_t *rtc)
{
8000207c:	eb cd 40 80 	pushm	r7,lr
80002080:	18 97       	mov	r7,r12
  // Wait until the rtc CTRL register is up-to-date
  while (rtc_is_busy(rtc));
80002082:	0e 9c       	mov	r12,r7
80002084:	f0 1f 00 06 	mcall	8000209c <rtc_enable+0x20>
80002088:	cf d1       	brne	80002082 <rtc_enable+0x6>
  // Enable the RTC
  rtc->ctrl |= AVR32_RTC_CTRL_EN_MASK;
8000208a:	6e 08       	ld.w	r8,r7[0x0]
8000208c:	a1 a8       	sbr	r8,0x0
8000208e:	8f 08       	st.w	r7[0x0],r8
  // Wait until write is done
  while (rtc_is_busy(rtc));
80002090:	0e 9c       	mov	r12,r7
80002092:	f0 1f 00 03 	mcall	8000209c <rtc_enable+0x20>
80002096:	cf d1       	brne	80002090 <rtc_enable+0x14>
}
80002098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	20 50       	sub	r0,5

800020a0 <rtc_enable_interrupt>:
}


void rtc_enable_interrupt(volatile avr32_rtc_t *rtc)
{
  rtc->ier = AVR32_RTC_IER_TOPI_MASK;
800020a0:	30 18       	mov	r8,1
800020a2:	99 48       	st.w	r12[0x10],r8
}
800020a4:	5e fc       	retal	r12
800020a6:	d7 03       	nop

800020a8 <rtc_set_top_value>:
  if (global_interrupt_enabled) cpu_irq_enable();
}


void rtc_set_top_value(volatile avr32_rtc_t *rtc, unsigned long top)
{
800020a8:	eb cd 40 c0 	pushm	r6-r7,lr
800020ac:	18 97       	mov	r7,r12
800020ae:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
800020b0:	0e 9c       	mov	r12,r7
800020b2:	f0 1f 00 06 	mcall	800020c8 <rtc_set_top_value+0x20>
800020b6:	cf d1       	brne	800020b0 <rtc_set_top_value+0x8>
  // Set the new val value
  rtc->top = top;
800020b8:	8f 26       	st.w	r7[0x8],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
800020ba:	0e 9c       	mov	r12,r7
800020bc:	f0 1f 00 03 	mcall	800020c8 <rtc_set_top_value+0x20>
800020c0:	cf d1       	brne	800020ba <rtc_set_top_value+0x12>
}
800020c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 50       	sub	r0,5

800020cc <rtc_clear_interrupt>:
}


void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800020cc:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800020d0:	e6 18 00 01 	andh	r8,0x1,COH
800020d4:	c0 71       	brne	800020e2 <rtc_clear_interrupt+0x16>
800020d6:	d3 03       	ssrf	0x10
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020d8:	30 18       	mov	r8,1
800020da:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020dc:	78 78       	ld.w	r8,r12[0x1c]
  if (global_interrupt_enabled) cpu_irq_enable();
800020de:	d5 03       	csrf	0x10
800020e0:	5e fc       	retal	r12
void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020e2:	30 18       	mov	r8,1
800020e4:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020e6:	78 78       	ld.w	r8,r12[0x1c]
800020e8:	5e fc       	retal	r12
800020ea:	d7 03       	nop

800020ec <rtc_init>:
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
}


int rtc_init(volatile avr32_rtc_t *rtc, unsigned char osc_type, unsigned char psel)
{
800020ec:	eb cd 40 e0 	pushm	r5-r7,lr
800020f0:	18 97       	mov	r7,r12
800020f2:	16 96       	mov	r6,r11
800020f4:	14 95       	mov	r5,r10
  // If exit, it means that the configuration has not been set correctly
  if (osc_type > (1 << AVR32_RTC_CTRL_CLK32_SIZE) - 1 ||
800020f6:	30 18       	mov	r8,1
800020f8:	f0 0b 18 00 	cp.b	r11,r8
800020fc:	5f b9       	srhi	r9
800020fe:	30 f8       	mov	r8,15
80002100:	f0 0a 18 00 	cp.b	r10,r8
80002104:	5f b8       	srhi	r8
80002106:	f3 e8 10 08 	or	r8,r9,r8
8000210a:	c0 30       	breq	80002110 <rtc_init+0x24>
8000210c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
      psel > (1 << AVR32_RTC_CTRL_PSEL_SIZE) - 1)
    return 0;

  // If we use the 32-kHz oscillator, we have to enable it first
  if (osc_type == RTC_OSC_32KHZ)
80002110:	30 18       	mov	r8,1
80002112:	f0 0b 18 00 	cp.b	r11,r8
80002116:	c0 a1       	brne	8000212a <rtc_init+0x3e>
  {
    // Select the 32-kHz oscillator crystal
    pm_enable_osc32_crystal(&AVR32_PM);
80002118:	fe 7c 0c 00 	mov	r12,-62464
8000211c:	f0 1f 00 0f 	mcall	80002158 <rtc_init+0x6c>
    // Enable the 32-kHz clock and wait until the osc32 clock is ready.
    pm_enable_clk32(&AVR32_PM, AVR32_PM_OSCCTRL32_STARTUP_0_RCOSC);
80002120:	30 0b       	mov	r11,0
80002122:	fe 7c 0c 00 	mov	r12,-62464
80002126:	f0 1f 00 0e 	mcall	8000215c <rtc_init+0x70>
  }

  // Wait until the rtc accepts writes to the CTRL register
  while (rtc_is_busy(rtc));
8000212a:	0e 9c       	mov	r12,r7
8000212c:	f0 1f 00 0d 	mcall	80002160 <rtc_init+0x74>
80002130:	cf d1       	brne	8000212a <rtc_init+0x3e>

  // Set the new RTC configuration
  rtc->ctrl = osc_type << AVR32_RTC_CTRL_CLK32_OFFSET |
80002132:	a3 76       	lsl	r6,0x3
80002134:	b1 a6       	sbr	r6,0x10
80002136:	ed e5 10 85 	or	r5,r6,r5<<0x8
8000213a:	8f 05       	st.w	r7[0x0],r5
              psel << AVR32_RTC_CTRL_PSEL_OFFSET |
              AVR32_RTC_CTRL_CLKEN_MASK;

  // Wait until write is done
  while (rtc_is_busy(rtc));
8000213c:	0e 9c       	mov	r12,r7
8000213e:	f0 1f 00 09 	mcall	80002160 <rtc_init+0x74>
80002142:	cf d1       	brne	8000213c <rtc_init+0x50>

  // Set the counter value to 0
  rtc_set_value(rtc, 0x00000000);
80002144:	30 0b       	mov	r11,0
80002146:	0e 9c       	mov	r12,r7
80002148:	f0 1f 00 07 	mcall	80002164 <rtc_init+0x78>
  // Set the top value to 0xFFFFFFFF
  rtc_set_top_value(rtc, 0xFFFFFFFF);
8000214c:	3f fb       	mov	r11,-1
8000214e:	0e 9c       	mov	r12,r7
80002150:	f0 1f 00 06 	mcall	80002168 <rtc_init+0x7c>
80002154:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	3a 28       	mov	r8,-94
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	3a 54       	mov	r4,-91
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	20 50       	sub	r0,5
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	20 58       	sub	r8,5
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	20 a8       	sub	r8,10

8000216c <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
8000216c:	30 08       	mov	r8,0
8000216e:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002170:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002172:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002174:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002176:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002178:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000217a:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
8000217c:	b8 f8       	st.b	r12[0x7],r8
}
8000217e:	5e fc       	retal	r12

80002180 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002180:	eb cd 40 80 	pushm	r7,lr
80002184:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002186:	49 68       	lddpc	r8,800021dc <config_dpi204+0x5c>
80002188:	1a 97       	mov	r7,sp
8000218a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000218e:	fa eb 00 00 	st.d	sp[0],r10
80002192:	f0 e8 00 08 	ld.d	r8,r8[8]
80002196:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000219a:	30 4b       	mov	r11,4
8000219c:	49 1c       	lddpc	r12,800021e0 <config_dpi204+0x60>
8000219e:	f0 1f 00 12 	mcall	800021e4 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
800021a2:	1a 9b       	mov	r11,sp
800021a4:	fe 7c 28 00 	mov	r12,-55296
800021a8:	f0 1f 00 10 	mcall	800021e8 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800021ac:	30 09       	mov	r9,0
800021ae:	12 9a       	mov	r10,r9
800021b0:	12 9b       	mov	r11,r9
800021b2:	fe 7c 28 00 	mov	r12,-55296
800021b6:	f0 1f 00 0e 	mcall	800021ec <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
800021ba:	fe 7c 28 00 	mov	r12,-55296
800021be:	f0 1f 00 0d 	mcall	800021f0 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800021c2:	e0 6a 1b 00 	mov	r10,6912
800021c6:	ea 1a 00 b7 	orh	r10,0xb7
800021ca:	1a 9b       	mov	r11,sp
800021cc:	fe 7c 28 00 	mov	r12,-55296
800021d0:	f0 1f 00 09 	mcall	800021f4 <config_dpi204+0x74>
}
800021d4:	2f cd       	sub	sp,-16
800021d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	9a 30       	ld.sh	r0,sp[0x6]
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	9a 40       	ld.sh	r0,sp[0x8]
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	37 b4       	mov	r4,123
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	3b 56       	mov	r6,-75
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	3b 8e       	mov	lr,-72
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	3c e4       	mov	r4,-50
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	3c 2c       	mov	r12,-62

800021f8 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800021f8:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800021fa:	18 9b       	mov	r11,r12
800021fc:	fe 7c 24 00 	mov	r12,-56320
80002200:	f0 1f 00 02 	mcall	80002208 <mASSERT_CS+0x10>
}
80002204:	d8 02       	popm	pc
80002206:	00 00       	add	r0,r0
80002208:	80 00       	ld.sh	r0,r0[0x0]
8000220a:	3b ba       	mov	r10,-69

8000220c <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
80002212:	49 88       	lddpc	r8,80002270 <config_SPI_SPARE+0x64>
80002214:	1a 97       	mov	r7,sp
80002216:	f0 ea 00 00 	ld.d	r10,r8[0]
8000221a:	fa eb 00 00 	st.d	sp[0],r10
8000221e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002222:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
80002226:	30 4b       	mov	r11,4
80002228:	49 3c       	lddpc	r12,80002274 <config_SPI_SPARE+0x68>
8000222a:	f0 1f 00 14 	mcall	80002278 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
8000222e:	1a 9b       	mov	r11,sp
80002230:	fe 7c 24 00 	mov	r12,-56320
80002234:	f0 1f 00 12 	mcall	8000227c <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
80002238:	30 09       	mov	r9,0
8000223a:	12 9a       	mov	r10,r9
8000223c:	12 9b       	mov	r11,r9
8000223e:	fe 7c 24 00 	mov	r12,-56320
80002242:	f0 1f 00 10 	mcall	80002280 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
80002246:	30 0b       	mov	r11,0
80002248:	fe 7c 24 00 	mov	r12,-56320
8000224c:	f0 1f 00 0e 	mcall	80002284 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002250:	e0 6a 1b 00 	mov	r10,6912
80002254:	ea 1a 00 b7 	orh	r10,0xb7
80002258:	1a 9b       	mov	r11,sp
8000225a:	fe 7c 24 00 	mov	r12,-56320
8000225e:	f0 1f 00 0b 	mcall	80002288 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002262:	fe 7c 24 00 	mov	r12,-56320
80002266:	f0 1f 00 0a 	mcall	8000228c <config_SPI_SPARE+0x80>
}
8000226a:	2f cd       	sub	sp,-16
8000226c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	9a 20       	ld.sh	r0,sp[0x4]
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	9a 00       	ld.sh	r0,sp[0x0]
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	37 b4       	mov	r4,123
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	3b 56       	mov	r6,-75
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	3b 8e       	mov	lr,-72
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	3b ba       	mov	r10,-69
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	3c 2c       	mov	r12,-62
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	3c e4       	mov	r4,-50

80002290 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002290:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002292:	fe 7c 24 00 	mov	r12,-56320
80002296:	f0 1f 00 02 	mcall	8000229c <XferSPI_send+0xc>
	return 0;
}
8000229a:	d8 0a       	popm	pc,r12=0
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	3c ea       	mov	r10,-50

800022a0 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
800022a0:	d4 01       	pushm	lr
800022a2:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
800022a4:	30 0b       	mov	r11,0
800022a6:	fe 7c 24 00 	mov	r12,-56320
800022aa:	f0 1f 00 0e 	mcall	800022e0 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
800022ae:	e0 6b 00 a0 	mov	r11,160
800022b2:	fe 7c 24 00 	mov	r12,-56320
800022b6:	f0 1f 00 0c 	mcall	800022e4 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
800022ba:	30 0b       	mov	r11,0
800022bc:	fe 7c 24 00 	mov	r12,-56320
800022c0:	f0 1f 00 09 	mcall	800022e4 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800022c4:	fa cb ff fe 	sub	r11,sp,-2
800022c8:	fe 7c 24 00 	mov	r12,-56320
800022cc:	f0 1f 00 07 	mcall	800022e8 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800022d0:	30 0b       	mov	r11,0
800022d2:	fe 7c 24 00 	mov	r12,-56320
800022d6:	f0 1f 00 06 	mcall	800022ec <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800022da:	1b bc       	ld.ub	r12,sp[0x3]
800022dc:	2f fd       	sub	sp,-4
800022de:	d8 02       	popm	pc
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	3b ba       	mov	r10,-69
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	3c ea       	mov	r10,-50
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	3d 0e       	mov	lr,-48
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	3c 06       	mov	r6,-64

800022f0 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800022f0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800022f2:	f0 1f 00 04 	mcall	80002300 <CANRxReady+0x10>
800022f6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800022fa:	5f 1c       	srne	r12
800022fc:	d8 02       	popm	pc
800022fe:	00 00       	add	r0,r0
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	22 a0       	sub	r0,42

80002304 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
80002304:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
80002306:	f0 1f 00 04 	mcall	80002314 <CANTxReady+0x10>
8000230a:	ec 1c 00 04 	eorl	r12,0x4
}
8000230e:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
80002312:	d8 02       	popm	pc
80002314:	80 00       	ld.sh	r0,r0[0x0]
80002316:	22 a0       	sub	r0,42

80002318 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
80002318:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
8000231a:	18 9b       	mov	r11,r12
8000231c:	fe 7c 24 00 	mov	r12,-56320
80002320:	f0 1f 00 02 	mcall	80002328 <mDEASSERT_CS+0x10>
}
80002324:	d8 02       	popm	pc
80002326:	00 00       	add	r0,r0
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	3c 06       	mov	r6,-64

8000232c <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
8000232c:	d4 21       	pushm	r4-r7,lr
8000232e:	18 97       	mov	r7,r12
80002330:	16 95       	mov	r5,r11
80002332:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002334:	18 96       	mov	r6,r12
80002336:	5c 56       	castu.b	r6
80002338:	0c 9c       	mov	r12,r6
8000233a:	f0 1f 00 0a 	mcall	80002360 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
8000233e:	30 2b       	mov	r11,2
80002340:	0e 9c       	mov	r12,r7
80002342:	f0 1f 00 09 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
80002346:	0a 9b       	mov	r11,r5
80002348:	0e 9c       	mov	r12,r7
8000234a:	f0 1f 00 07 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
8000234e:	08 9b       	mov	r11,r4
80002350:	0e 9c       	mov	r12,r7
80002352:	f0 1f 00 05 	mcall	80002364 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
80002356:	0c 9c       	mov	r12,r6
80002358:	f0 1f 00 04 	mcall	80002368 <CAN2515ByteWrite+0x3c>
}
8000235c:	d8 22       	popm	r4-r7,pc
8000235e:	00 00       	add	r0,r0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	21 f8       	sub	r8,31
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	22 90       	sub	r0,41
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	23 18       	sub	r8,49

8000236c <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
8000236c:	eb cd 40 e0 	pushm	r5-r7,lr
80002370:	18 97       	mov	r7,r12
80002372:	16 96       	mov	r6,r11
80002374:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
80002376:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000237a:	32 7b       	mov	r11,39
8000237c:	f0 1f 00 50 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
80002380:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002384:	32 6b       	mov	r11,38
80002386:	0e 9c       	mov	r12,r7
80002388:	f0 1f 00 4d 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
8000238c:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002390:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002394:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002398:	10 4a       	or	r10,r8
8000239a:	32 5b       	mov	r11,37
8000239c:	0e 9c       	mov	r12,r7
8000239e:	f0 1f 00 48 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
800023a2:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800023a6:	32 4b       	mov	r11,36
800023a8:	0e 9c       	mov	r12,r7
800023aa:	f0 1f 00 45 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
800023ae:	0b ba       	ld.ub	r10,r5[0x3]
800023b0:	30 bb       	mov	r11,11
800023b2:	0e 9c       	mov	r12,r7
800023b4:	f0 1f 00 42 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
800023b8:	0b aa       	ld.ub	r10,r5[0x2]
800023ba:	30 ab       	mov	r11,10
800023bc:	0e 9c       	mov	r12,r7
800023be:	f0 1f 00 40 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800023c2:	6a 08       	ld.w	r8,r5[0x0]
800023c4:	f0 0a 16 0d 	lsr	r10,r8,0xd
800023c8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800023cc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800023d0:	f1 ea 10 0a 	or	r10,r8,r10
800023d4:	a3 ba       	sbr	r10,0x3
800023d6:	e2 1a 00 eb 	andl	r10,0xeb,COH
800023da:	30 9b       	mov	r11,9
800023dc:	0e 9c       	mov	r12,r7
800023de:	f0 1f 00 38 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
800023e2:	0b 0a       	ld.w	r10,r5++
800023e4:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800023e8:	30 8b       	mov	r11,8
800023ea:	0e 9c       	mov	r12,r7
800023ec:	f0 1f 00 34 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
800023f0:	0b ba       	ld.ub	r10,r5[0x3]
800023f2:	31 3b       	mov	r11,19
800023f4:	0e 9c       	mov	r12,r7
800023f6:	f0 1f 00 32 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
800023fa:	0b aa       	ld.ub	r10,r5[0x2]
800023fc:	31 2b       	mov	r11,18
800023fe:	0e 9c       	mov	r12,r7
80002400:	f0 1f 00 2f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002404:	6a 08       	ld.w	r8,r5[0x0]
80002406:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000240a:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000240e:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002412:	f1 ea 10 0a 	or	r10,r8,r10
80002416:	a3 ba       	sbr	r10,0x3
80002418:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000241c:	31 1b       	mov	r11,17
8000241e:	0e 9c       	mov	r12,r7
80002420:	f0 1f 00 27 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
80002424:	0b 0a       	ld.w	r10,r5++
80002426:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000242a:	31 0b       	mov	r11,16
8000242c:	0e 9c       	mov	r12,r7
8000242e:	f0 1f 00 24 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
80002432:	0b ba       	ld.ub	r10,r5[0x3]
80002434:	31 7b       	mov	r11,23
80002436:	0e 9c       	mov	r12,r7
80002438:	f0 1f 00 21 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
8000243c:	0b aa       	ld.ub	r10,r5[0x2]
8000243e:	31 6b       	mov	r11,22
80002440:	0e 9c       	mov	r12,r7
80002442:	f0 1f 00 1f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002446:	6a 08       	ld.w	r8,r5[0x0]
80002448:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000244c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002450:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002454:	f1 ea 10 0a 	or	r10,r8,r10
80002458:	a3 ba       	sbr	r10,0x3
8000245a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000245e:	31 5b       	mov	r11,21
80002460:	0e 9c       	mov	r12,r7
80002462:	f0 1f 00 17 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
80002466:	0b 0a       	ld.w	r10,r5++
80002468:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000246c:	31 4b       	mov	r11,20
8000246e:	0e 9c       	mov	r12,r7
80002470:	f0 1f 00 13 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002474:	0b ba       	ld.ub	r10,r5[0x3]
80002476:	31 bb       	mov	r11,27
80002478:	0e 9c       	mov	r12,r7
8000247a:	f0 1f 00 11 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
8000247e:	0b aa       	ld.ub	r10,r5[0x2]
80002480:	31 ab       	mov	r11,26
80002482:	0e 9c       	mov	r12,r7
80002484:	f0 1f 00 0e 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000248e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002492:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002496:	f1 ea 10 0a 	or	r10,r8,r10
8000249a:	a3 ba       	sbr	r10,0x3
8000249c:	e2 1a 00 eb 	andl	r10,0xeb,COH
800024a0:	31 9b       	mov	r11,25
800024a2:	0e 9c       	mov	r12,r7
800024a4:	f0 1f 00 06 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
800024a8:	6a 0a       	ld.w	r10,r5[0x0]
800024aa:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800024ae:	31 8b       	mov	r11,24
800024b0:	0e 9c       	mov	r12,r7
800024b2:	f0 1f 00 03 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
}
800024b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024ba:	00 00       	add	r0,r0
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	23 2c       	sub	r12,50

800024c0 <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
800024c0:	eb cd 40 e0 	pushm	r5-r7,lr
800024c4:	18 97       	mov	r7,r12
800024c6:	16 96       	mov	r6,r11
800024c8:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
800024ca:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
800024ce:	32 3b       	mov	r11,35
800024d0:	f0 1f 00 2f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
800024d4:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
800024d8:	32 2b       	mov	r11,34
800024da:	0e 9c       	mov	r12,r7
800024dc:	f0 1f 00 2c 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
800024e0:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
800024e4:	ec 0a 16 0d 	lsr	r10,r6,0xd
800024e8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800024ec:	10 4a       	or	r10,r8
800024ee:	32 1b       	mov	r11,33
800024f0:	0e 9c       	mov	r12,r7
800024f2:	f0 1f 00 27 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
800024f6:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800024fa:	32 0b       	mov	r11,32
800024fc:	0e 9c       	mov	r12,r7
800024fe:	f0 1f 00 24 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
80002502:	0b ba       	ld.ub	r10,r5[0x3]
80002504:	30 3b       	mov	r11,3
80002506:	0e 9c       	mov	r12,r7
80002508:	f0 1f 00 21 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
8000250c:	0b aa       	ld.ub	r10,r5[0x2]
8000250e:	30 2b       	mov	r11,2
80002510:	0e 9c       	mov	r12,r7
80002512:	f0 1f 00 1f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002516:	6a 08       	ld.w	r8,r5[0x0]
80002518:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000251c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002520:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002524:	f1 ea 10 0a 	or	r10,r8,r10
80002528:	a3 ba       	sbr	r10,0x3
8000252a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000252e:	30 1b       	mov	r11,1
80002530:	0e 9c       	mov	r12,r7
80002532:	f0 1f 00 17 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
80002536:	0b 0a       	ld.w	r10,r5++
80002538:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000253c:	30 0b       	mov	r11,0
8000253e:	0e 9c       	mov	r12,r7
80002540:	f0 1f 00 13 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
80002544:	0b ba       	ld.ub	r10,r5[0x3]
80002546:	30 7b       	mov	r11,7
80002548:	0e 9c       	mov	r12,r7
8000254a:	f0 1f 00 11 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
8000254e:	0b aa       	ld.ub	r10,r5[0x2]
80002550:	30 6b       	mov	r11,6
80002552:	0e 9c       	mov	r12,r7
80002554:	f0 1f 00 0e 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002558:	6a 08       	ld.w	r8,r5[0x0]
8000255a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000255e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002562:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002566:	f1 ea 10 0a 	or	r10,r8,r10
8000256a:	a3 ba       	sbr	r10,0x3
8000256c:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002570:	30 5b       	mov	r11,5
80002572:	0e 9c       	mov	r12,r7
80002574:	f0 1f 00 06 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
80002578:	6a 0a       	ld.w	r10,r5[0x0]
8000257a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000257e:	30 4b       	mov	r11,4
80002580:	0e 9c       	mov	r12,r7
80002582:	f0 1f 00 03 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
}
80002586:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	23 2c       	sub	r12,50

80002590 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002590:	eb cd 40 c0 	pushm	r6-r7,lr
80002594:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002596:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000259a:	0e 9c       	mov	r12,r7
8000259c:	f0 1f 00 06 	mcall	800025b4 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
800025a0:	e0 6b 00 c0 	mov	r11,192
800025a4:	0c 9c       	mov	r12,r6
800025a6:	f0 1f 00 05 	mcall	800025b8 <CANReset+0x28>
	mDEASSERT_CS(Channel);
800025aa:	0e 9c       	mov	r12,r7
800025ac:	f0 1f 00 04 	mcall	800025bc <CANReset+0x2c>
}
800025b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	21 f8       	sub	r8,31
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	22 90       	sub	r0,41
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	23 18       	sub	r8,49

800025c0 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
800025c0:	eb cd 40 e0 	pushm	r5-r7,lr
800025c4:	20 1d       	sub	sp,4
800025c6:	18 97       	mov	r7,r12
800025c8:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
800025ca:	18 96       	mov	r6,r12
800025cc:	5c 56       	castu.b	r6
800025ce:	0c 9c       	mov	r12,r6
800025d0:	f0 1f 00 13 	mcall	8000261c <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800025d4:	30 3b       	mov	r11,3
800025d6:	0e 9c       	mov	r12,r7
800025d8:	f0 1f 00 12 	mcall	80002620 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800025dc:	0a 9b       	mov	r11,r5
800025de:	0e 9c       	mov	r12,r7
800025e0:	f0 1f 00 10 	mcall	80002620 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800025e4:	30 0b       	mov	r11,0
800025e6:	fe 7c 24 00 	mov	r12,-56320
800025ea:	f0 1f 00 0f 	mcall	80002624 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025ee:	fe 77 24 00 	mov	r7,-56320
800025f2:	c0 28       	rjmp	800025f6 <CAN2515ByteRead+0x36>
		asm("NOP;");
800025f4:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025f6:	0e 9c       	mov	r12,r7
800025f8:	f0 1f 00 0c 	mcall	80002628 <CAN2515ByteRead+0x68>
800025fc:	cf c0       	breq	800025f4 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800025fe:	fa cb ff fe 	sub	r11,sp,-2
80002602:	fe 7c 24 00 	mov	r12,-56320
80002606:	f0 1f 00 0a 	mcall	8000262c <CAN2515ByteRead+0x6c>
	return spidataread_temp;
8000260a:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
8000260c:	0c 9c       	mov	r12,r6
8000260e:	f0 1f 00 09 	mcall	80002630 <CAN2515ByteRead+0x70>

	return tempdata;
}
80002612:	0e 9c       	mov	r12,r7
80002614:	2f fd       	sub	sp,-4
80002616:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000261a:	00 00       	add	r0,r0
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	21 f8       	sub	r8,31
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	22 90       	sub	r0,41
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	3c ea       	mov	r10,-50
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	3d 06       	mov	r6,-48
8000262c:	80 00       	ld.sh	r0,r0[0x0]
8000262e:	3d 0e       	mov	lr,-48
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	23 18       	sub	r8,49

80002634 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002634:	eb cd 40 80 	pushm	r7,lr
80002638:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
8000263a:	58 ab       	cp.w	r11,10
8000263c:	c1 11       	brne	8000265e <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
8000263e:	30 3a       	mov	r10,3
80002640:	32 ab       	mov	r11,42
80002642:	f0 1f 00 30 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002646:	e0 6a 00 ac 	mov	r10,172
8000264a:	32 9b       	mov	r11,41
8000264c:	0e 9c       	mov	r12,r7
8000264e:	f0 1f 00 2d 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002652:	30 7a       	mov	r10,7
80002654:	32 8b       	mov	r11,40
80002656:	0e 9c       	mov	r12,r7
80002658:	f0 1f 00 2a 	mcall	80002700 <CANEnable+0xcc>
8000265c:	c3 68       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
8000265e:	58 7b       	cp.w	r11,7
80002660:	c1 11       	brne	80002682 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002662:	30 1a       	mov	r10,1
80002664:	32 ab       	mov	r11,42
80002666:	f0 1f 00 27 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000266a:	e0 6a 00 ac 	mov	r10,172
8000266e:	32 9b       	mov	r11,41
80002670:	0e 9c       	mov	r12,r7
80002672:	f0 1f 00 24 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002676:	30 7a       	mov	r10,7
80002678:	32 8b       	mov	r11,40
8000267a:	0e 9c       	mov	r12,r7
8000267c:	f0 1f 00 21 	mcall	80002700 <CANEnable+0xcc>
80002680:	c2 48       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002682:	58 5b       	cp.w	r11,5
80002684:	c1 11       	brne	800026a6 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002686:	30 0a       	mov	r10,0
80002688:	32 ab       	mov	r11,42
8000268a:	f0 1f 00 1e 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000268e:	e0 6a 00 ac 	mov	r10,172
80002692:	32 9b       	mov	r11,41
80002694:	0e 9c       	mov	r12,r7
80002696:	f0 1f 00 1b 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000269a:	30 7a       	mov	r10,7
8000269c:	32 8b       	mov	r11,40
8000269e:	0e 9c       	mov	r12,r7
800026a0:	f0 1f 00 18 	mcall	80002700 <CANEnable+0xcc>
800026a4:	c1 28       	rjmp	800026c8 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
800026a6:	58 1b       	cp.w	r11,1
800026a8:	c1 01       	brne	800026c8 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
800026aa:	30 0a       	mov	r10,0
800026ac:	32 ab       	mov	r11,42
800026ae:	f0 1f 00 15 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
800026b2:	e0 6a 00 91 	mov	r10,145
800026b6:	32 9b       	mov	r11,41
800026b8:	0e 9c       	mov	r12,r7
800026ba:	f0 1f 00 12 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
800026be:	30 3a       	mov	r10,3
800026c0:	32 8b       	mov	r11,40
800026c2:	0e 9c       	mov	r12,r7
800026c4:	f0 1f 00 0f 	mcall	80002700 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
800026c8:	30 3a       	mov	r10,3
800026ca:	32 bb       	mov	r11,43
800026cc:	0e 9c       	mov	r12,r7
800026ce:	f0 1f 00 0d 	mcall	80002700 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800026d2:	30 4a       	mov	r10,4
800026d4:	30 fb       	mov	r11,15
800026d6:	0e 9c       	mov	r12,r7
800026d8:	f0 1f 00 0a 	mcall	80002700 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800026dc:	30 eb       	mov	r11,14
800026de:	0e 9c       	mov	r12,r7
800026e0:	f0 1f 00 09 	mcall	80002704 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800026e4:	30 eb       	mov	r11,14
800026e6:	0e 9c       	mov	r12,r7
800026e8:	f0 1f 00 07 	mcall	80002704 <CANEnable+0xd0>
800026ec:	e2 1c 00 e0 	andl	r12,0xe0,COH
800026f0:	c0 60       	breq	800026fc <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800026f2:	30 4a       	mov	r10,4
800026f4:	30 fb       	mov	r11,15
800026f6:	0e 9c       	mov	r12,r7
800026f8:	f0 1f 00 02 	mcall	80002700 <CANEnable+0xcc>
800026fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	23 2c       	sub	r12,50
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	25 c0       	sub	r0,92

80002708 <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
80002708:	d4 21       	pushm	r4-r7,lr
8000270a:	18 97       	mov	r7,r12
8000270c:	16 94       	mov	r4,r11
8000270e:	14 95       	mov	r5,r10
80002710:	12 96       	mov	r6,r9
	CANReset(Channel);
80002712:	f0 1f 00 0f 	mcall	8000274c <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
80002716:	34 0a       	mov	r10,64
80002718:	36 0b       	mov	r11,96
8000271a:	0e 9c       	mov	r12,r7
8000271c:	f0 1f 00 0d 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
80002720:	34 0a       	mov	r10,64
80002722:	37 0b       	mov	r11,112
80002724:	0e 9c       	mov	r12,r7
80002726:	f0 1f 00 0b 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
8000272a:	0c 9a       	mov	r10,r6
8000272c:	0a 9b       	mov	r11,r5
8000272e:	0e 9c       	mov	r12,r7
80002730:	f0 1f 00 09 	mcall	80002754 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
80002734:	ec ca ff f8 	sub	r10,r6,-8
80002738:	0a 9b       	mov	r11,r5
8000273a:	0e 9c       	mov	r12,r7
8000273c:	f0 1f 00 07 	mcall	80002758 <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
80002740:	08 9b       	mov	r11,r4
80002742:	0e 9c       	mov	r12,r7
80002744:	f0 1f 00 06 	mcall	8000275c <InitializeCANExtended+0x54>
}
80002748:	d8 22       	popm	r4-r7,pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	25 90       	sub	r0,89
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	23 2c       	sub	r12,50
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	24 c0       	sub	r0,76
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	23 6c       	sub	r12,54
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	26 34       	sub	r4,99

80002760 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002760:	eb cd 40 fe 	pushm	r1-r7,lr
80002764:	18 96       	mov	r6,r12
80002766:	16 93       	mov	r3,r11
80002768:	14 94       	mov	r4,r10
8000276a:	12 92       	mov	r2,r9
8000276c:	10 91       	mov	r1,r8
8000276e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002770:	33 05       	mov	r5,48
80002772:	c1 78       	rjmp	800027a0 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002774:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002778:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000277c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002780:	14 38       	cp.w	r8,r10
80002782:	e0 88 00 08 	brls	80002792 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002786:	12 38       	cp.w	r8,r9
80002788:	fe 98 ff fa 	brls	8000277c <CANSendMsg+0x1c>
8000278c:	12 3a       	cp.w	r10,r9
8000278e:	c7 63       	brcs	8000287a <CANSendMsg+0x11a>
80002790:	cf 6b       	rjmp	8000277c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002792:	12 38       	cp.w	r8,r9
80002794:	e0 8b 00 73 	brhi	8000287a <CANSendMsg+0x11a>
80002798:	12 3a       	cp.w	r10,r9
8000279a:	c7 03       	brcs	8000287a <CANSendMsg+0x11a>
8000279c:	cf 0b       	rjmp	8000277c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000279e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
800027a0:	0a 9b       	mov	r11,r5
800027a2:	0c 9c       	mov	r12,r6
800027a4:	f0 1f 00 38 	mcall	80002884 <CANSendMsg+0x124>
800027a8:	e2 1c 00 08 	andl	r12,0x8,COH
800027ac:	ce 41       	brne	80002774 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
800027ae:	e6 08 16 0b 	lsr	r8,r3,0xb
800027b2:	c1 01       	brne	800027d2 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
800027b4:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
800027b8:	33 1b       	mov	r11,49
800027ba:	0c 9c       	mov	r12,r6
800027bc:	f0 1f 00 33 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
800027c0:	e6 0a 15 05 	lsl	r10,r3,0x5
800027c4:	e2 1a 00 e0 	andl	r10,0xe0,COH
800027c8:	33 2b       	mov	r11,50
800027ca:	0c 9c       	mov	r12,r6
800027cc:	f0 1f 00 2f 	mcall	80002888 <CANSendMsg+0x128>
800027d0:	c2 18       	rjmp	80002812 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800027d2:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800027d6:	33 1b       	mov	r11,49
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 2c 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800027de:	e6 08 16 0d 	lsr	r8,r3,0xd
800027e2:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800027e6:	e2 18 00 e0 	andl	r8,0xe0,COH
800027ea:	10 4a       	or	r10,r8
800027ec:	a3 ba       	sbr	r10,0x3
800027ee:	e2 1a 00 eb 	andl	r10,0xeb,COH
800027f2:	33 2b       	mov	r11,50
800027f4:	0c 9c       	mov	r12,r6
800027f6:	f0 1f 00 25 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800027fa:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800027fe:	33 3b       	mov	r11,51
80002800:	0c 9c       	mov	r12,r6
80002802:	f0 1f 00 22 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002806:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
8000280a:	33 4b       	mov	r11,52
8000280c:	0c 9c       	mov	r12,r6
8000280e:	f0 1f 00 1f 	mcall	80002888 <CANSendMsg+0x128>
80002812:	30 85       	mov	r5,8
80002814:	ea 02 18 00 	cp.b	r2,r5
80002818:	e4 05 17 80 	movls	r5,r2
8000281c:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002820:	e0 41 00 52 	cp.w	r1,82
80002824:	c1 01       	brne	80002844 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
80002826:	a7 a5       	sbr	r5,0x6
80002828:	5c 55       	castu.b	r5
8000282a:	0a 9a       	mov	r10,r5
8000282c:	33 5b       	mov	r11,53
8000282e:	0c 9c       	mov	r12,r6
80002830:	f0 1f 00 16 	mcall	80002888 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002834:	30 4b       	mov	r11,4
80002836:	31 1c       	mov	r12,17
80002838:	f0 1f 00 15 	mcall	8000288c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
8000283c:	49 5c       	lddpc	r12,80002890 <CANSendMsg+0x130>
8000283e:	f0 1f 00 16 	mcall	80002894 <CANSendMsg+0x134>
80002842:	c0 68       	rjmp	8000284e <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002844:	0a 9a       	mov	r10,r5
80002846:	33 5b       	mov	r11,53
80002848:	0c 9c       	mov	r12,r6
8000284a:	f0 1f 00 10 	mcall	80002888 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000284e:	58 05       	cp.w	r5,0
80002850:	e0 8a 00 0e 	brle	8000286c <CANSendMsg+0x10c>
80002854:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002856:	0e 9b       	mov	r11,r7
80002858:	2c ab       	sub	r11,-54
8000285a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
8000285e:	5c 5b       	castu.b	r11
80002860:	0c 9c       	mov	r12,r6
80002862:	f0 1f 00 0a 	mcall	80002888 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002866:	2f f7       	sub	r7,-1
80002868:	0a 37       	cp.w	r7,r5
8000286a:	cf 65       	brlt	80002856 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
8000286c:	30 8a       	mov	r10,8
8000286e:	33 0b       	mov	r11,48
80002870:	0c 9c       	mov	r12,r6
80002872:	f0 1f 00 06 	mcall	80002888 <CANSendMsg+0x128>
80002876:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000287a:	e0 47 00 64 	cp.w	r7,100
8000287e:	c9 01       	brne	8000279e <CANSendMsg+0x3e>
80002880:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	25 c0       	sub	r0,92
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	23 2c       	sub	r12,50
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	34 50       	mov	r0,69
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	9a 74       	ld.sh	r4,sp[0xe]
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	33 b8       	mov	r8,59

80002898 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002898:	d4 31       	pushm	r0-r7,lr
8000289a:	18 95       	mov	r5,r12
8000289c:	16 92       	mov	r2,r11
8000289e:	14 93       	mov	r3,r10
800028a0:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
800028a2:	f0 1f 00 4c 	mcall	800029d0 <CANGetMsg+0x138>

        if( (temp & 3) == 0 )
800028a6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800028aa:	e0 80 00 91 	breq	800029cc <CANGetMsg+0x134>
            return FALSE;
        temp&=0x03;
        if(temp==1){
800028ae:	58 1c       	cp.w	r12,1
800028b0:	c0 31       	brne	800028b6 <CANGetMsg+0x1e>
800028b2:	36 16       	mov	r6,97
800028b4:	c0 58       	rjmp	800028be <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
800028b6:	58 2c       	cp.w	r12,2
800028b8:	e0 81 00 8a 	brne	800029cc <CANGetMsg+0x134>
800028bc:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
800028be:	0c 9b       	mov	r11,r6
800028c0:	0a 9c       	mov	r12,r5
800028c2:	f0 1f 00 45 	mcall	800029d4 <CANGetMsg+0x13c>
800028c6:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
800028c8:	ec cb ff ff 	sub	r11,r6,-1
800028cc:	5c 5b       	castu.b	r11
800028ce:	0a 9c       	mov	r12,r5
800028d0:	f0 1f 00 41 	mcall	800029d4 <CANGetMsg+0x13c>
800028d4:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800028d6:	ec cb ff fe 	sub	r11,r6,-2
800028da:	5c 5b       	castu.b	r11
800028dc:	0a 9c       	mov	r12,r5
800028de:	f0 1f 00 3e 	mcall	800029d4 <CANGetMsg+0x13c>
800028e2:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800028e4:	ec cb ff fd 	sub	r11,r6,-3
800028e8:	5c 5b       	castu.b	r11
800028ea:	0a 9c       	mov	r12,r5
800028ec:	f0 1f 00 3a 	mcall	800029d4 <CANGetMsg+0x13c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800028f0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800028f4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800028f8:	c0 71       	brne	80002906 <CANGetMsg+0x6e>
        {
            *pIdentifier = S1<<3 | S2>>5;
800028fa:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800028fe:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002902:	85 01       	st.w	r2[0x0],r1
80002904:	c0 e8       	rjmp	80002920 <CANGetMsg+0x88>

        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002906:	a9 60       	lsl	r0,0x8
80002908:	e1 e1 11 51 	or	r1,r0,r1<<0x15
8000290c:	e3 ec 10 0c 	or	r12,r1,r12
80002910:	e2 18 00 1c 	andl	r8,0x1c,COH
80002914:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002918:	0e 48       	or	r8,r7
8000291a:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000291e:	85 0c       	st.w	r2[0x0],r12
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002920:	ec cb ff fc 	sub	r11,r6,-4
80002924:	5c 5b       	castu.b	r11
80002926:	0a 9c       	mov	r12,r5
80002928:	f0 1f 00 2b 	mcall	800029d4 <CANGetMsg+0x13c>
8000292c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002930:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
80002932:	30 88       	mov	r8,8
80002934:	f0 0c 18 00 	cp.b	r12,r8
80002938:	e0 88 00 07 	brls	80002946 <CANGetMsg+0xae>
            *pMsgSize = 8;
8000293c:	a8 88       	st.b	r4[0x0],r8
8000293e:	2f b6       	sub	r6,-5
80002940:	5c 56       	castu.b	r6
80002942:	30 07       	mov	r7,0
80002944:	c0 58       	rjmp	8000294e <CANGetMsg+0xb6>

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002946:	58 0c       	cp.w	r12,0
80002948:	fe 99 ff fb 	brgt	8000293e <CANGetMsg+0xa6>
8000294c:	c0 e8       	rjmp	80002968 <CANGetMsg+0xd0>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
8000294e:	0c 9b       	mov	r11,r6
80002950:	0a 9c       	mov	r12,r5
80002952:	f0 1f 00 21 	mcall	800029d4 <CANGetMsg+0x13c>
80002956:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000295a:	2f f7       	sub	r7,-1
8000295c:	2f f6       	sub	r6,-1
8000295e:	5c 56       	castu.b	r6
80002960:	09 88       	ld.ub	r8,r4[0x0]
80002962:	0e 38       	cp.w	r8,r7
80002964:	fe 99 ff f5 	brgt	8000294e <CANGetMsg+0xb6>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002968:	36 0b       	mov	r11,96
8000296a:	0a 9c       	mov	r12,r5
8000296c:	f0 1f 00 1a 	mcall	800029d4 <CANGetMsg+0x13c>
80002970:	e2 1c 00 08 	andl	r12,0x8,COH
80002974:	c0 81       	brne	80002984 <CANGetMsg+0xec>
80002976:	37 0b       	mov	r11,112
80002978:	0a 9c       	mov	r12,r5
8000297a:	f0 1f 00 17 	mcall	800029d4 <CANGetMsg+0x13c>
8000297e:	e2 1c 00 08 	andl	r12,0x8,COH
80002982:	c1 a0       	breq	800029b6 <CANGetMsg+0x11e>
80002984:	64 08       	ld.w	r8,r2[0x0]
80002986:	58 18       	cp.w	r8,1
80002988:	c1 71       	brne	800029b6 <CANGetMsg+0x11e>
                    {
                    Msg[0] = 0;
8000298a:	30 08       	mov	r8,0
8000298c:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
8000298e:	30 18       	mov	r8,1
80002990:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002992:	30 28       	mov	r8,2
80002994:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002996:	30 38       	mov	r8,3
80002998:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
8000299a:	30 08       	mov	r8,0
8000299c:	30 49       	mov	r9,4
8000299e:	06 9a       	mov	r10,r3
800029a0:	64 0b       	ld.w	r11,r2[0x0]
800029a2:	0a 9c       	mov	r12,r5
800029a4:	f0 1f 00 0d 	mcall	800029d8 <CANGetMsg+0x140>
                    dip204_set_cursor_position(17,4);
800029a8:	30 4b       	mov	r11,4
800029aa:	31 1c       	mov	r12,17
800029ac:	f0 1f 00 0c 	mcall	800029dc <CANGetMsg+0x144>
                    dip204_printf_string("Re F");
800029b0:	48 cc       	lddpc	r12,800029e0 <CANGetMsg+0x148>
800029b2:	f0 1f 00 0d 	mcall	800029e4 <CANGetMsg+0x14c>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800029b6:	30 0a       	mov	r10,0
800029b8:	32 cb       	mov	r11,44
800029ba:	14 9c       	mov	r12,r10
800029bc:	f0 1f 00 0b 	mcall	800029e8 <CANGetMsg+0x150>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800029c0:	30 0a       	mov	r10,0
800029c2:	32 cb       	mov	r11,44
800029c4:	14 9c       	mov	r12,r10
800029c6:	f0 1f 00 09 	mcall	800029e8 <CANGetMsg+0x150>
800029ca:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800029cc:	d8 3a       	popm	r0-r7,pc,r12=0
800029ce:	00 00       	add	r0,r0
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	22 a0       	sub	r0,42
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	25 c0       	sub	r0,92
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	27 60       	sub	r0,118
800029dc:	80 00       	ld.sh	r0,r0[0x0]
800029de:	34 50       	mov	r0,69
800029e0:	80 00       	ld.sh	r0,r0[0x0]
800029e2:	9a 74       	ld.sh	r4,sp[0xe]
800029e4:	80 00       	ld.sh	r0,r0[0x0]
800029e6:	33 b8       	mov	r8,59
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	23 2c       	sub	r12,50

800029ec <nodeCount>:
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
{
800029ec:	48 78       	lddpc	r8,80002a08 <nodeCount+0x1c>
	dip204_set_cursor_position(6, 3);
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
800029ee:	f0 ca ff 6a 	sub	r10,r8,-150
{
	UINT8 l;

	for(int j = 0; j < 15 ; ++j)
	{
		ids = nFrame[j].ID;
800029f2:	90 09       	ld.sh	r9,r8[0x0]
		
		//If there was a node found at the j'th bit 1 is added to l
		if(ids != 0)
800029f4:	58 09       	cp.w	r9,0
800029f6:	c0 30       	breq	800029fc <nodeCount+0x10>
		{
			++l;
800029f8:	2f fc       	sub	r12,-1
800029fa:	5c 5c       	castu.b	r12
800029fc:	2f 68       	sub	r8,-10

UINT8 nodeCount(void)
{
	UINT8 l;

	for(int j = 0; j < 15 ; ++j)
800029fe:	14 38       	cp.w	r8,r10
80002a00:	cf 91       	brne	800029f2 <nodeCount+0x6>
80002a02:	48 38       	lddpc	r8,80002a0c <nodeCount+0x20>
80002a04:	b0 09       	st.h	r8[0x0],r9
			++l;
		}
	}
	return l;
	
}
80002a06:	5e fc       	retal	r12
80002a08:	00 00       	add	r0,r0
80002a0a:	07 bc       	ld.ub	r12,r3[0x3]
80002a0c:	00 00       	add	r0,r0
80002a0e:	06 80       	andn	r0,r3

80002a10 <blink>:
	dip204_init(100,1);
	dip204_clear_display();
}


void blink(void){
80002a10:	d4 01       	pushm	lr
	if (state == 0){
80002a12:	48 c8       	lddpc	r8,80002a40 <blink+0x30>
80002a14:	70 08       	ld.w	r8,r8[0x0]
80002a16:	58 08       	cp.w	r8,0
80002a18:	c0 81       	brne	80002a28 <blink+0x18>
		LED_On(LED3);
80002a1a:	30 8c       	mov	r12,8
80002a1c:	f0 1f 00 0a 	mcall	80002a44 <blink+0x34>
		state = 1;
80002a20:	30 19       	mov	r9,1
80002a22:	48 88       	lddpc	r8,80002a40 <blink+0x30>
80002a24:	91 09       	st.w	r8[0x0],r9
80002a26:	d8 02       	popm	pc
		}
	else if (state == 1){
80002a28:	48 68       	lddpc	r8,80002a40 <blink+0x30>
80002a2a:	70 08       	ld.w	r8,r8[0x0]
80002a2c:	58 18       	cp.w	r8,1
80002a2e:	c0 71       	brne	80002a3c <blink+0x2c>
		LED_Off(LED3);
80002a30:	30 8c       	mov	r12,8
80002a32:	f0 1f 00 06 	mcall	80002a48 <blink+0x38>
		state = 0;
80002a36:	30 09       	mov	r9,0
80002a38:	48 28       	lddpc	r8,80002a40 <blink+0x30>
80002a3a:	91 09       	st.w	r8[0x0],r9
80002a3c:	d8 02       	popm	pc
80002a3e:	00 00       	add	r0,r0
80002a40:	00 00       	add	r0,r0
80002a42:	05 1c       	ld.sh	r12,r2++
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	32 24       	mov	r4,34
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	32 74       	mov	r4,39

80002a4c <initBoard>:
	dip204_printf_string("A L:");
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
{
80002a4c:	d4 01       	pushm	lr
80002a4e:	4a e8       	lddpc	r8,80002b04 <initBoard+0xb8>
	dip204_set_cursor_position(10, 2);
	dip204_printf_string("A L:");
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
80002a50:	f0 ca ff 6a 	sub	r10,r8,-150
{
	for(int i = 0; i < 15; ++i)
	{
		emptyStruct[i].ID = 0;
80002a54:	30 09       	mov	r9,0
80002a56:	b0 09       	st.h	r8[0x0],r9
80002a58:	2f 68       	sub	r8,-10
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
{
	for(int i = 0; i < 15; ++i)
80002a5a:	14 38       	cp.w	r8,r10
80002a5c:	cf d1       	brne	80002a56 <initBoard+0xa>
	{
		emptyStruct[i].ID = 0;
	}

	//Enable ADC channels
	adc_enable( &AVR32_ADC, ADC_TEMPERATURE_CHANNEL );
80002a5e:	30 0b       	mov	r11,0
80002a60:	fe 7c 3c 00 	mov	r12,-50176
80002a64:	f0 1f 00 29 	mcall	80002b08 <initBoard+0xbc>
	adc_enable( &AVR32_ADC, ADC_LIGHT_CHANNEL );
80002a68:	30 2b       	mov	r11,2
80002a6a:	fe 7c 3c 00 	mov	r12,-50176
80002a6e:	f0 1f 00 27 	mcall	80002b08 <initBoard+0xbc>

	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002a72:	30 3a       	mov	r10,3
80002a74:	e0 6b 1b 00 	mov	r11,6912
80002a78:	ea 1b 00 b7 	orh	r11,0xb7
80002a7c:	fe 7c 0c 00 	mov	r12,-62464
80002a80:	f0 1f 00 23 	mcall	80002b0c <initBoard+0xc0>
	
	// Configures the MCP2515 SPI  communication.
	config_SPI_SPARE();
80002a84:	f0 1f 00 23 	mcall	80002b10 <initBoard+0xc4>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002a88:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002a8a:	f0 1f 00 23 	mcall	80002b14 <initBoard+0xc8>
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&interrupt, AVR32_RTC_IRQ, AVR32_INTC_INT0);
80002a8e:	30 0a       	mov	r10,0
80002a90:	32 8b       	mov	r11,40
80002a92:	4a 2c       	lddpc	r12,80002b18 <initBoard+0xcc>
80002a94:	f0 1f 00 22 	mcall	80002b1c <initBoard+0xd0>
	rtc_init(&AVR32_RTC, RTC_OSC_32KHZ, 14);
80002a98:	30 ea       	mov	r10,14
80002a9a:	30 1b       	mov	r11,1
80002a9c:	fe 7c 0d 00 	mov	r12,-62208
80002aa0:	f0 1f 00 20 	mcall	80002b20 <initBoard+0xd4>
	// Set top value to 0 to generate an interrupt every seconds */
	rtc_set_top_value(&AVR32_RTC, 0);
80002aa4:	30 0b       	mov	r11,0
80002aa6:	fe 7c 0d 00 	mov	r12,-62208
80002aaa:	f0 1f 00 1f 	mcall	80002b24 <initBoard+0xd8>
	// Enable the interrupts
	rtc_enable_interrupt(&AVR32_RTC);
80002aae:	fe 7c 0d 00 	mov	r12,-62208
80002ab2:	f0 1f 00 1e 	mcall	80002b28 <initBoard+0xdc>
	// Enable the RTC
	rtc_enable(&AVR32_RTC);
80002ab6:	fe 7c 0d 00 	mov	r12,-62208
80002aba:	f0 1f 00 1d 	mcall	80002b2c <initBoard+0xe0>
	
	// Button interrupt
	INTC_register_interrupt(&but_interrupt, (AVR32_GPIO_IRQ_0+Switch1/8), AVR32_INTC_INT0);
80002abe:	30 0a       	mov	r10,0
80002ac0:	34 bb       	mov	r11,75
80002ac2:	49 cc       	lddpc	r12,80002b30 <initBoard+0xe4>
80002ac4:	f0 1f 00 16 	mcall	80002b1c <initBoard+0xd0>
	gpio_enable_pin_glitch_filter(Switch1);
80002ac8:	35 8c       	mov	r12,88
80002aca:	f0 1f 00 1b 	mcall	80002b34 <initBoard+0xe8>
	gpio_enable_pin_interrupt(Switch1, GPIO_FALLING_EDGE);
80002ace:	30 2b       	mov	r11,2
80002ad0:	35 8c       	mov	r12,88
80002ad2:	f0 1f 00 1a 	mcall	80002b38 <initBoard+0xec>
	
	// Receive interrupt
	INTC_register_interrupt(&RX_interrupt, (AVR32_GPIO_IRQ_0+RX/8), AVR32_INTC_INT0);
80002ad6:	30 0a       	mov	r10,0
80002ad8:	34 ab       	mov	r11,74
80002ada:	49 9c       	lddpc	r12,80002b3c <initBoard+0xf0>
80002adc:	f0 1f 00 10 	mcall	80002b1c <initBoard+0xd0>
	gpio_enable_pin_glitch_filter(RX);
80002ae0:	35 5c       	mov	r12,85
80002ae2:	f0 1f 00 15 	mcall	80002b34 <initBoard+0xe8>
	gpio_enable_pin_interrupt(RX, GPIO_FALLING_EDGE);
80002ae6:	30 2b       	mov	r11,2
80002ae8:	35 5c       	mov	r12,85
80002aea:	f0 1f 00 14 	mcall	80002b38 <initBoard+0xec>
	
	Enable_global_interrupt();
80002aee:	d5 03       	csrf	0x10
	// Delay to let the Oscillator get started
	delay_init(FOSC0);
	
	// Initializes the display
	config_dpi204();
80002af0:	f0 1f 00 14 	mcall	80002b40 <initBoard+0xf4>
	dip204_init(100,1);
80002af4:	30 1b       	mov	r11,1
80002af6:	36 4c       	mov	r12,100
80002af8:	f0 1f 00 13 	mcall	80002b44 <initBoard+0xf8>
	dip204_clear_display();
80002afc:	f0 1f 00 13 	mcall	80002b48 <initBoard+0xfc>
}
80002b00:	d8 02       	popm	pc
80002b02:	00 00       	add	r0,r0
80002b04:	00 00       	add	r0,r0
80002b06:	07 20       	ld.uh	r0,r3++
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	20 0e       	sub	lr,0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	3a 7c       	mov	r12,-89
80002b10:	80 00       	ld.sh	r0,r0[0x0]
80002b12:	22 0c       	sub	r12,32
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	39 10       	mov	r0,-111
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	2b 4c       	sub	r12,-76
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	38 90       	mov	r0,-119
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	20 ec       	sub	r12,14
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	20 a8       	sub	r8,10
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	20 a0       	sub	r0,10
80002b2c:	80 00       	ld.sh	r0,r0[0x0]
80002b2e:	20 7c       	sub	r12,7
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	2f 68       	sub	r8,-10
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	38 1c       	mov	r12,-127
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	38 32       	mov	r2,-125
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	2f 58       	sub	r8,-11
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	21 80       	sub	r0,24
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	35 38       	mov	r8,83
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	34 dc       	mov	r12,77

80002b4c <interrupt>:
}

void blink(void);

__attribute__((__interrupt__)) static void interrupt(void)
{	
80002b4c:	eb cd 40 f8 	pushm	r3-r7,lr
	blink();
80002b50:	f0 1f 00 3c 	mcall	80002c40 <interrupt+0xf4>
80002b54:	4b c6       	lddpc	r6,80002c44 <interrupt+0xf8>
80002b56:	30 07       	mov	r7,0
	for(int i = 0; i < 15; ++i)
	{
		nFrame[i] = youngFrame[i];
80002b58:	4b c4       	lddpc	r4,80002c48 <interrupt+0xfc>
80002b5a:	30 a5       	mov	r5,10
		youngFrame[i] = emptyStruct[i];
80002b5c:	4b c3       	lddpc	r3,80002c4c <interrupt+0x100>
__attribute__((__interrupt__)) static void interrupt(void)
{	
	blink();
	for(int i = 0; i < 15; ++i)
	{
		nFrame[i] = youngFrame[i];
80002b5e:	0a 9a       	mov	r10,r5
80002b60:	0c 9b       	mov	r11,r6
80002b62:	e8 07 00 0c 	add	r12,r4,r7
80002b66:	f0 1f 00 3b 	mcall	80002c50 <interrupt+0x104>
		youngFrame[i] = emptyStruct[i];
80002b6a:	0a 9a       	mov	r10,r5
80002b6c:	e6 07 00 0b 	add	r11,r3,r7
80002b70:	0c 9c       	mov	r12,r6
80002b72:	f0 1f 00 38 	mcall	80002c50 <interrupt+0x104>
80002b76:	2f 66       	sub	r6,-10
80002b78:	2f 67       	sub	r7,-10
void blink(void);

__attribute__((__interrupt__)) static void interrupt(void)
{	
	blink();
	for(int i = 0; i < 15; ++i)
80002b7a:	e0 47 00 96 	cp.w	r7,150
80002b7e:	cf 01       	brne	80002b5e <interrupt+0x12>
		nFrame[i] = youngFrame[i];
		youngFrame[i] = emptyStruct[i];
	}
	
	//Send message
	if(CANTxReady(0))
80002b80:	30 0c       	mov	r12,0
80002b82:	f0 1f 00 35 	mcall	80002c54 <interrupt+0x108>
80002b86:	c1 00       	breq	80002ba6 <interrupt+0x5a>
	{
		CANSendMsg(0, ownId, nFrame[0x00F & ownId].mssg, 8, 0);
80002b88:	4b 48       	lddpc	r8,80002c58 <interrupt+0x10c>
80002b8a:	90 8b       	ld.uh	r11,r8[0x0]
80002b8c:	f5 db c0 04 	bfextu	r10,r11,0x0,0x4
80002b90:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80002b94:	4a d8       	lddpc	r8,80002c48 <interrupt+0xfc>
80002b96:	f0 0a 00 1a 	add	r10,r8,r10<<0x1
80002b9a:	30 08       	mov	r8,0
80002b9c:	30 89       	mov	r9,8
80002b9e:	2f ea       	sub	r10,-2
80002ba0:	10 9c       	mov	r12,r8
80002ba2:	f0 1f 00 2f 	mcall	80002c5c <interrupt+0x110>
	}
	
	if (warmWarn == 1){
80002ba6:	4a f8       	lddpc	r8,80002c60 <interrupt+0x114>
80002ba8:	70 08       	ld.w	r8,r8[0x0]
80002baa:	58 18       	cp.w	r8,1
80002bac:	c1 21       	brne	80002bd0 <interrupt+0x84>
		static int led_state = 0;
		if (led_state == 0) {
80002bae:	4a e8       	lddpc	r8,80002c64 <interrupt+0x118>
80002bb0:	70 08       	ld.w	r8,r8[0x0]
80002bb2:	58 08       	cp.w	r8,0
80002bb4:	c0 81       	brne	80002bc4 <interrupt+0x78>
			LED_On(16);
80002bb6:	31 0c       	mov	r12,16
80002bb8:	f0 1f 00 2c 	mcall	80002c68 <interrupt+0x11c>
			led_state = 1;
80002bbc:	30 19       	mov	r9,1
80002bbe:	4a a8       	lddpc	r8,80002c64 <interrupt+0x118>
80002bc0:	91 09       	st.w	r8[0x0],r9
80002bc2:	c0 78       	rjmp	80002bd0 <interrupt+0x84>
		}
		else {
			LED_Off(16);
80002bc4:	31 0c       	mov	r12,16
80002bc6:	f0 1f 00 2a 	mcall	80002c6c <interrupt+0x120>
			led_state = 0;
80002bca:	30 09       	mov	r9,0
80002bcc:	4a 68       	lddpc	r8,80002c64 <interrupt+0x118>
80002bce:	91 09       	st.w	r8[0x0],r9
		}
	}
	if (emergency == 1){
80002bd0:	4a 88       	lddpc	r8,80002c70 <interrupt+0x124>
80002bd2:	70 08       	ld.w	r8,r8[0x0]
80002bd4:	58 18       	cp.w	r8,1
80002bd6:	c1 81       	brne	80002c06 <interrupt+0xba>
		static int led_state = 0;
		if (led_state == 0) {
80002bd8:	4a 78       	lddpc	r8,80002c74 <interrupt+0x128>
80002bda:	70 08       	ld.w	r8,r8[0x0]
80002bdc:	58 08       	cp.w	r8,0
80002bde:	c0 b1       	brne	80002bf4 <interrupt+0xa8>
			LED_On(16);
80002be0:	31 0c       	mov	r12,16
80002be2:	f0 1f 00 22 	mcall	80002c68 <interrupt+0x11c>
			LED_On(64);
80002be6:	34 0c       	mov	r12,64
80002be8:	f0 1f 00 20 	mcall	80002c68 <interrupt+0x11c>
			led_state = 1;
80002bec:	30 19       	mov	r9,1
80002bee:	4a 28       	lddpc	r8,80002c74 <interrupt+0x128>
80002bf0:	91 09       	st.w	r8[0x0],r9
80002bf2:	c0 a8       	rjmp	80002c06 <interrupt+0xba>
		}
		else {
			LED_Off(16);
80002bf4:	31 0c       	mov	r12,16
80002bf6:	f0 1f 00 1e 	mcall	80002c6c <interrupt+0x120>
			LED_Off(64);
80002bfa:	34 0c       	mov	r12,64
80002bfc:	f0 1f 00 1c 	mcall	80002c6c <interrupt+0x120>
			led_state = 0;
80002c00:	30 09       	mov	r9,0
80002c02:	49 d8       	lddpc	r8,80002c74 <interrupt+0x128>
80002c04:	91 09       	st.w	r8[0x0],r9
		}
	}
	if (faulty == 1)
80002c06:	49 d8       	lddpc	r8,80002c78 <interrupt+0x12c>
80002c08:	70 08       	ld.w	r8,r8[0x0]
80002c0a:	58 18       	cp.w	r8,1
80002c0c:	c1 21       	brne	80002c30 <interrupt+0xe4>
	{
		static int led_state = 0;
		if (led_state == 0) {
80002c0e:	49 c8       	lddpc	r8,80002c7c <interrupt+0x130>
80002c10:	70 08       	ld.w	r8,r8[0x0]
80002c12:	58 08       	cp.w	r8,0
80002c14:	c0 81       	brne	80002c24 <interrupt+0xd8>
			LED_On(4);
80002c16:	30 4c       	mov	r12,4
80002c18:	f0 1f 00 14 	mcall	80002c68 <interrupt+0x11c>
			led_state = 1;
80002c1c:	30 19       	mov	r9,1
80002c1e:	49 88       	lddpc	r8,80002c7c <interrupt+0x130>
80002c20:	91 09       	st.w	r8[0x0],r9
80002c22:	c0 78       	rjmp	80002c30 <interrupt+0xe4>
		}
		else {
			LED_Off(4);
80002c24:	30 4c       	mov	r12,4
80002c26:	f0 1f 00 12 	mcall	80002c6c <interrupt+0x120>
			led_state = 0;
80002c2a:	30 09       	mov	r9,0
80002c2c:	49 48       	lddpc	r8,80002c7c <interrupt+0x130>
80002c2e:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	rtc_clear_interrupt(&AVR32_RTC);
80002c30:	fe 7c 0d 00 	mov	r12,-62208
80002c34:	f0 1f 00 13 	mcall	80002c80 <interrupt+0x134>
}
80002c38:	e3 cd 40 f8 	ldm	sp++,r3-r7,lr
80002c3c:	d6 03       	rete
80002c3e:	00 00       	add	r0,r0
80002c40:	80 00       	ld.sh	r0,r0[0x0]
80002c42:	2a 10       	sub	r0,-95
80002c44:	00 00       	add	r0,r0
80002c46:	06 82       	andn	r2,r3
80002c48:	00 00       	add	r0,r0
80002c4a:	07 bc       	ld.ub	r12,r3[0x3]
80002c4c:	00 00       	add	r0,r0
80002c4e:	07 20       	ld.uh	r0,r3++
80002c50:	80 00       	ld.sh	r0,r0[0x0]
80002c52:	40 94       	lddsp	r4,sp[0x24]
80002c54:	80 00       	ld.sh	r0,r0[0x0]
80002c56:	23 04       	sub	r4,48
80002c58:	00 00       	add	r0,r0
80002c5a:	00 08       	add	r8,r0
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	27 60       	sub	r0,118
80002c60:	00 00       	add	r0,r0
80002c62:	05 20       	ld.uh	r0,r2++
80002c64:	00 00       	add	r0,r0
80002c66:	05 2c       	ld.uh	r12,r2++
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	32 24       	mov	r4,34
80002c6c:	80 00       	ld.sh	r0,r0[0x0]
80002c6e:	32 74       	mov	r4,39
80002c70:	00 00       	add	r0,r0
80002c72:	05 28       	ld.uh	r8,r2++
80002c74:	00 00       	add	r0,r0
80002c76:	05 30       	ld.ub	r0,r2++
80002c78:	00 00       	add	r0,r0
80002c7a:	05 18       	ld.sh	r8,r2++
80002c7c:	00 00       	add	r0,r0
80002c7e:	05 34       	ld.ub	r4,r2++
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	20 cc       	sub	r12,12

80002c84 <printLCD>:
		}
}


void printLCD(void)
{
80002c84:	d4 01       	pushm	lr
	dip204_set_cursor_position(1, 1);
80002c86:	30 1b       	mov	r11,1
80002c88:	16 9c       	mov	r12,r11
80002c8a:	f0 1f 00 1b 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("Active nodes:");
80002c8e:	49 bc       	lddpc	r12,80002cf8 <printLCD+0x74>
80002c90:	f0 1f 00 1b 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(1, 3);
80002c94:	30 3b       	mov	r11,3
80002c96:	30 1c       	mov	r12,1
80002c98:	f0 1f 00 17 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("O T:");
80002c9c:	49 9c       	lddpc	r12,80002d00 <printLCD+0x7c>
80002c9e:	f0 1f 00 18 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(1, 4);
80002ca2:	30 4b       	mov	r11,4
80002ca4:	30 1c       	mov	r12,1
80002ca6:	f0 1f 00 14 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("N:");
80002caa:	49 7c       	lddpc	r12,80002d04 <printLCD+0x80>
80002cac:	f0 1f 00 14 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(10, 3); 
80002cb0:	30 3b       	mov	r11,3
80002cb2:	30 ac       	mov	r12,10
80002cb4:	f0 1f 00 10 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("A T:");
80002cb8:	49 4c       	lddpc	r12,80002d08 <printLCD+0x84>
80002cba:	f0 1f 00 11 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(1, 2);
80002cbe:	30 2b       	mov	r11,2
80002cc0:	30 1c       	mov	r12,1
80002cc2:	f0 1f 00 0d 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("O L:");
80002cc6:	49 2c       	lddpc	r12,80002d0c <printLCD+0x88>
80002cc8:	f0 1f 00 0d 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(10, 2);
80002ccc:	30 2b       	mov	r11,2
80002cce:	30 ac       	mov	r12,10
80002cd0:	f0 1f 00 09 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("A L:");
80002cd4:	48 fc       	lddpc	r12,80002d10 <printLCD+0x8c>
80002cd6:	f0 1f 00 0a 	mcall	80002cfc <printLCD+0x78>
	dip204_set_cursor_position(15, 1);
80002cda:	30 1b       	mov	r11,1
80002cdc:	30 fc       	mov	r12,15
80002cde:	f0 1f 00 06 	mcall	80002cf4 <printLCD+0x70>
	dip204_printf_string("%d", nodeCount());
80002ce2:	f0 1f 00 0d 	mcall	80002d14 <printLCD+0x90>
80002ce6:	1a dc       	st.w	--sp,r12
80002ce8:	48 cc       	lddpc	r12,80002d18 <printLCD+0x94>
80002cea:	f0 1f 00 05 	mcall	80002cfc <printLCD+0x78>
80002cee:	2f fd       	sub	sp,-4
}
80002cf0:	d8 02       	popm	pc
80002cf2:	00 00       	add	r0,r0
80002cf4:	80 00       	ld.sh	r0,r0[0x0]
80002cf6:	34 50       	mov	r0,69
80002cf8:	80 00       	ld.sh	r0,r0[0x0]
80002cfa:	9a 7c       	ld.sh	r12,sp[0xe]
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	33 b8       	mov	r8,59
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	9a 8c       	ld.uh	r12,sp[0x0]
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	9a 94       	ld.uh	r4,sp[0x2]
80002d08:	80 00       	ld.sh	r0,r0[0x0]
80002d0a:	9a 98       	ld.uh	r8,sp[0x2]
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	9a a0       	ld.uh	r0,sp[0x4]
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	9a a8       	ld.uh	r8,sp[0x4]
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	29 ec       	sub	r12,-98
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	9a b0       	ld.uh	r0,sp[0x6]

80002d1c <average>:

	//AVR32_GPIO.port[2].ovrc = 1 << 29;
}

void average(void)
{
80002d1c:	d4 31       	pushm	r0-r7,lr
80002d1e:	20 9d       	sub	sp,36
	UINT16 night = 0;
	UINT16 warm = 0;	
	UINT16 cold = 0;
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
80002d20:	f0 1f 00 80 	mcall	80002f20 <average+0x204>
80002d24:	fe f5 02 00 	ld.w	r5,pc[512]
80002d28:	ea c7 ff fc 	sub	r7,r5,-4
	gpio_clear_pin_interrupt_flag(RX);

	//AVR32_GPIO.port[2].ovrc = 1 << 29;
}

void average(void)
80002d2c:	ea c0 ff 66 	sub	r0,r5,-154
80002d30:	0e 98       	mov	r8,r7
80002d32:	30 09       	mov	r9,0
80002d34:	12 9a       	mov	r10,r9
	UINT16 warningNode = 0;
	
	//Calculating total light and temp received
	for(int i = 0; i < 15; ++i)
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
80002d36:	11 86       	ld.ub	r6,r8[0x0]
80002d38:	11 9b       	ld.ub	r11,r8[0x1]
80002d3a:	f7 e6 10 8b 	or	r11,r11,r6<<0x8
80002d3e:	16 09       	add	r9,r11
80002d40:	5c 89       	casts.h	r9
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
80002d42:	f1 36 ff fe 	ld.ub	r6,r8[-2]
80002d46:	f1 3b ff ff 	ld.ub	r11,r8[-1]
80002d4a:	f7 e6 10 8b 	or	r11,r11,r6<<0x8
80002d4e:	16 0a       	add	r10,r11
80002d50:	5c 8a       	casts.h	r10
80002d52:	2f 68       	sub	r8,-10
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
	UINT16 warningNode = 0;
	
	//Calculating total light and temp received
	for(int i = 0; i < 15; ++i)
80002d54:	00 38       	cp.w	r8,r0
80002d56:	cf 01       	brne	80002d36 <average+0x1a>
	UINT16 night = 0;
	UINT16 warm = 0;	
	UINT16 cold = 0;
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
80002d58:	18 91       	mov	r1,r12
80002d5a:	4f 33       	lddpc	r3,80002f24 <average+0x208>
80002d5c:	e6 c4 ff fb 	sub	r4,r3,-5
80002d60:	2f d3       	sub	r3,-3
80002d62:	0e 96       	mov	r6,r7
80002d64:	30 08       	mov	r8,0
80002d66:	50 58       	stdsp	sp[0x14],r8
80002d68:	50 78       	stdsp	sp[0x1c],r8
80002d6a:	50 68       	stdsp	sp[0x18],r8
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 15; ++i)
	{
		if(((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) < ((lighttot/actNodes)/2) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002d6c:	5c 79       	castu.h	r9
80002d6e:	50 49       	stdsp	sp[0x10],r9
		{
			++night;
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) < ((tempertot/actNodes)*0.75) && ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) != 0)
80002d70:	e5 da c0 10 	bfextu	r2,r10,0x0,0x10
			nFrame[i].mssg[0] = 0;
			nFrame[i].mssg[1] = 0;
			nFrame[i].mssg[2] = 0;
			nFrame[i].mssg[3] = 0;
			--actNodes;
			faulty = 1;
80002d74:	50 87       	stdsp	sp[0x20],r7
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 15; ++i)
	{
		if(((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) < ((lighttot/actNodes)/2) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002d76:	0d 89       	ld.ub	r9,r6[0x0]
80002d78:	09 88       	ld.ub	r8,r4[0x0]
80002d7a:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002d7e:	f7 d1 c0 10 	bfextu	r11,r1,0x0,0x10
80002d82:	40 49       	lddsp	r9,sp[0x10]
80002d84:	f2 0b 0d 0a 	divu	r10,r9,r11
80002d88:	f3 da c0 2f 	bfextu	r9,r10,0x1,0xf
80002d8c:	12 38       	cp.w	r8,r9
80002d8e:	c0 74       	brge	80002d9c <average+0x80>
80002d90:	58 08       	cp.w	r8,0
80002d92:	c0 50       	breq	80002d9c <average+0x80>
		{
			++night;
80002d94:	40 68       	lddsp	r8,sp[0x18]
80002d96:	2f f8       	sub	r8,-1
80002d98:	5c 88       	casts.h	r8
80002d9a:	50 68       	stdsp	sp[0x18],r8
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) < ((tempertot/actNodes)*0.75) && ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) != 0)
80002d9c:	0b a7       	ld.ub	r7,r5[0x2]
80002d9e:	07 88       	ld.ub	r8,r3[0x0]
80002da0:	f1 e7 10 87 	or	r7,r8,r7<<0x8
80002da4:	0e 9c       	mov	r12,r7
80002da6:	f0 1f 00 61 	mcall	80002f28 <average+0x20c>
80002daa:	fa eb 00 00 	st.d	sp[0],r10
80002dae:	f3 d1 c0 10 	bfextu	r9,r1,0x0,0x10
80002db2:	e4 09 0d 08 	divu	r8,r2,r9
80002db6:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80002dba:	f0 1f 00 5c 	mcall	80002f28 <average+0x20c>
80002dbe:	fa eb 00 08 	st.d	sp[8],r10
80002dc2:	30 08       	mov	r8,0
80002dc4:	fc 19 3f e8 	movh	r9,0x3fe8
80002dc8:	f0 1f 00 59 	mcall	80002f2c <average+0x210>
80002dcc:	14 98       	mov	r8,r10
80002dce:	16 99       	mov	r9,r11
80002dd0:	fa ea 00 00 	ld.d	r10,sp[0]
80002dd4:	f0 1f 00 57 	mcall	80002f30 <average+0x214>
80002dd8:	c0 70       	breq	80002de6 <average+0xca>
80002dda:	58 07       	cp.w	r7,0
80002ddc:	c0 50       	breq	80002de6 <average+0xca>
		{
			++warm;
80002dde:	40 78       	lddsp	r8,sp[0x1c]
80002de0:	2f f8       	sub	r8,-1
80002de2:	5c 88       	casts.h	r8
80002de4:	50 78       	stdsp	sp[0x1c],r8
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) > ((tempertot/actNodes)*1.10) && ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) != 0)
80002de6:	e0 68 99 9a 	mov	r8,39322
80002dea:	ea 18 99 99 	orh	r8,0x9999
80002dee:	e0 69 99 99 	mov	r9,39321
80002df2:	ea 19 3f f1 	orh	r9,0x3ff1
80002df6:	fa ea 00 08 	ld.d	r10,sp[8]
80002dfa:	f0 1f 00 4d 	mcall	80002f2c <average+0x210>
80002dfe:	fa e8 00 00 	ld.d	r8,sp[0]
80002e02:	f0 1f 00 4c 	mcall	80002f30 <average+0x214>
80002e06:	c1 10       	breq	80002e28 <average+0x10c>
80002e08:	58 07       	cp.w	r7,0
80002e0a:	c0 f0       	breq	80002e28 <average+0x10c>
		{
			++cold;
80002e0c:	40 58       	lddsp	r8,sp[0x14]
80002e0e:	2f f8       	sub	r8,-1
80002e10:	5c 88       	casts.h	r8
80002e12:	50 58       	stdsp	sp[0x14],r8
			nFrame[i].mssg[0] = 0;
80002e14:	30 08       	mov	r8,0
80002e16:	aa a8       	st.b	r5[0x2],r8
			nFrame[i].mssg[1] = 0;
80002e18:	a6 88       	st.b	r3[0x0],r8
			nFrame[i].mssg[2] = 0;
80002e1a:	ac 88       	st.b	r6[0x0],r8
			nFrame[i].mssg[3] = 0;
80002e1c:	a8 88       	st.b	r4[0x0],r8
			--actNodes;
80002e1e:	20 11       	sub	r1,1
80002e20:	5c 81       	casts.h	r1
			faulty = 1;
80002e22:	30 18       	mov	r8,1
80002e24:	4c 49       	lddpc	r9,80002f34 <average+0x218>
80002e26:	93 08       	st.w	r9[0x0],r8
80002e28:	2f 66       	sub	r6,-10
80002e2a:	2f 65       	sub	r5,-10
80002e2c:	2f 64       	sub	r4,-10
80002e2e:	2f 63       	sub	r3,-10
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 15; ++i)
80002e30:	0c 30       	cp.w	r0,r6
80002e32:	ca 21       	brne	80002d76 <average+0x5a>
80002e34:	40 87       	lddsp	r7,sp[0x20]
80002e36:	30 06       	mov	r6,0
80002e38:	0c 95       	mov	r5,r6
	lighttot = 0;
	tempertot = 0;
	//Calculating total light and temp received
	for(int i = 0; i < 15; ++i)
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
80002e3a:	0f 89       	ld.ub	r9,r7[0x0]
80002e3c:	0f 98       	ld.ub	r8,r7[0x1]
80002e3e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002e42:	10 06       	add	r6,r8
80002e44:	5c 86       	casts.h	r6
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
80002e46:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80002e4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e4e:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80002e52:	10 05       	add	r5,r8
80002e54:	5c 85       	casts.h	r5
80002e56:	2f 67       	sub	r7,-10
		}
	}
	lighttot = 0;
	tempertot = 0;
	//Calculating total light and temp received
	for(int i = 0; i < 15; ++i)
80002e58:	0e 30       	cp.w	r0,r7
80002e5a:	cf 01       	brne	80002e3a <average+0x11e>
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}

		//Printing values to display
		dip204_set_cursor_position(15, 3);
80002e5c:	30 3b       	mov	r11,3
80002e5e:	30 fc       	mov	r12,15
80002e60:	f0 1f 00 36 	mcall	80002f38 <average+0x21c>
		dip204_printf_string("%d",  (tempertot/actNodes));
80002e64:	4b 67       	lddpc	r7,80002f3c <average+0x220>
80002e66:	5c 75       	castu.h	r5
80002e68:	5c 71       	castu.h	r1
80002e6a:	ea 01 0d 04 	divu	r4,r5,r1
80002e6e:	f1 d4 c0 10 	bfextu	r8,r4,0x0,0x10
80002e72:	1a d8       	st.w	--sp,r8
80002e74:	0e 9c       	mov	r12,r7
80002e76:	f0 1f 00 33 	mcall	80002f40 <average+0x224>
		dip204_set_cursor_position(15, 2);
80002e7a:	30 2b       	mov	r11,2
80002e7c:	30 fc       	mov	r12,15
80002e7e:	f0 1f 00 2f 	mcall	80002f38 <average+0x21c>
		dip204_printf_string("%d",  (lighttot/actNodes));
80002e82:	5c 76       	castu.h	r6
80002e84:	ec 01 0d 00 	divu	r0,r6,r1
80002e88:	f1 d0 c0 10 	bfextu	r8,r0,0x0,0x10
80002e8c:	1a d8       	st.w	--sp,r8
80002e8e:	0e 9c       	mov	r12,r7
80002e90:	f0 1f 00 2c 	mcall	80002f40 <average+0x224>
		dip204_set_cursor_position(4, 4);
80002e94:	30 4b       	mov	r11,4
80002e96:	16 9c       	mov	r12,r11
80002e98:	f0 1f 00 28 	mcall	80002f38 <average+0x21c>
		dip204_printf_string("%d",  night);
80002e9c:	fb 18 00 22 	ld.uh	r8,sp[34]
80002ea0:	1a d8       	st.w	--sp,r8
80002ea2:	0e 9c       	mov	r12,r7
80002ea4:	f0 1f 00 27 	mcall	80002f40 <average+0x224>

		if (night == 0 && cold == 0)
80002ea8:	2f dd       	sub	sp,-12
80002eaa:	40 69       	lddsp	r9,sp[0x18]
80002eac:	40 58       	lddsp	r8,sp[0x14]
80002eae:	10 49       	or	r9,r8
80002eb0:	30 08       	mov	r8,0
80002eb2:	f0 09 19 00 	cp.h	r9,r8
80002eb6:	c0 a1       	brne	80002eca <average+0x1ae>
		{
			LED_Display(1);
80002eb8:	30 1c       	mov	r12,1
80002eba:	f0 1f 00 23 	mcall	80002f44 <average+0x228>
			warmWarn = 0;
80002ebe:	30 08       	mov	r8,0
80002ec0:	4a 29       	lddpc	r9,80002f48 <average+0x22c>
80002ec2:	93 08       	st.w	r9[0x0],r8
			faulty = 0;
80002ec4:	49 c9       	lddpc	r9,80002f34 <average+0x218>
80002ec6:	93 08       	st.w	r9[0x0],r8
80002ec8:	c1 a8       	rjmp	80002efc <average+0x1e0>
		}

		else if(warm == 1)
80002eca:	30 18       	mov	r8,1
80002ecc:	40 79       	lddsp	r9,sp[0x1c]
80002ece:	f0 09 19 00 	cp.h	r9,r8
80002ed2:	c0 71       	brne	80002ee0 <average+0x1c4>
		{
			warmWarn = 1;
80002ed4:	30 1c       	mov	r12,1
80002ed6:	49 d8       	lddpc	r8,80002f48 <average+0x22c>
80002ed8:	91 0c       	st.w	r8[0x0],r12
			LED_Off(1);
80002eda:	f0 1f 00 1d 	mcall	80002f4c <average+0x230>
80002ede:	c0 f8       	rjmp	80002efc <average+0x1e0>
			
		}
		else if(warm == 2 && emergAck == 0)
80002ee0:	30 28       	mov	r8,2
80002ee2:	40 79       	lddsp	r9,sp[0x1c]
80002ee4:	f0 09 19 00 	cp.h	r9,r8
80002ee8:	c0 a1       	brne	80002efc <average+0x1e0>
80002eea:	49 a8       	lddpc	r8,80002f50 <average+0x234>
80002eec:	70 08       	ld.w	r8,r8[0x0]
80002eee:	58 08       	cp.w	r8,0
80002ef0:	c0 61       	brne	80002efc <average+0x1e0>
		{
			emergency = 1;
80002ef2:	30 1c       	mov	r12,1
80002ef4:	49 88       	lddpc	r8,80002f54 <average+0x238>
80002ef6:	91 0c       	st.w	r8[0x0],r12
			LED_Off(1);
80002ef8:	f0 1f 00 15 	mcall	80002f4c <average+0x230>
		}
		
		if (emergency == 1)
80002efc:	49 68       	lddpc	r8,80002f54 <average+0x238>
80002efe:	70 08       	ld.w	r8,r8[0x0]
80002f00:	58 18       	cp.w	r8,1
80002f02:	c0 c1       	brne	80002f1a <average+0x1fe>
		{
		
			if(emergAck == 1)
80002f04:	49 38       	lddpc	r8,80002f50 <average+0x234>
80002f06:	70 08       	ld.w	r8,r8[0x0]
80002f08:	58 18       	cp.w	r8,1
80002f0a:	c0 81       	brne	80002f1a <average+0x1fe>
			{
				if(night < 1)
80002f0c:	40 68       	lddsp	r8,sp[0x18]
80002f0e:	58 08       	cp.w	r8,0
80002f10:	c0 51       	brne	80002f1a <average+0x1fe>
				{
					emergency = 0;
80002f12:	49 19       	lddpc	r9,80002f54 <average+0x238>
80002f14:	93 08       	st.w	r9[0x0],r8
					emergAck = 0;
80002f16:	48 f9       	lddpc	r9,80002f50 <average+0x234>
80002f18:	93 08       	st.w	r9[0x0],r8
				}
			}
			
		}
}
80002f1a:	2f 7d       	sub	sp,-36
80002f1c:	d8 32       	popm	r0-r7,pc
80002f1e:	00 00       	add	r0,r0
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	29 ec       	sub	r12,-98
80002f24:	00 00       	add	r0,r0
80002f26:	07 bc       	ld.ub	r12,r3[0x3]
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	3f 4c       	mov	r12,-12
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	3d 70       	mov	r0,-41
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	40 2c       	lddsp	r12,sp[0x8]
80002f34:	00 00       	add	r0,r0
80002f36:	05 18       	ld.sh	r8,r2++
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	34 50       	mov	r0,69
80002f3c:	80 00       	ld.sh	r0,r0[0x0]
80002f3e:	9a b0       	ld.uh	r0,sp[0x6]
80002f40:	80 00       	ld.sh	r0,r0[0x0]
80002f42:	33 b8       	mov	r8,59
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	31 d0       	mov	r0,29
80002f48:	00 00       	add	r0,r0
80002f4a:	05 20       	ld.uh	r0,r2++
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	32 74       	mov	r4,39
80002f50:	00 00       	add	r0,r0
80002f52:	05 24       	ld.uh	r4,r2++
80002f54:	00 00       	add	r0,r0
80002f56:	05 28       	ld.uh	r8,r2++

80002f58 <RX_interrupt>:
	
}


__attribute__((__interrupt)) void RX_interrupt(void)
{
80002f58:	d4 01       	pushm	lr

	
	gpio_clear_pin_interrupt_flag(RX);
80002f5a:	35 5c       	mov	r12,85
80002f5c:	f0 1f 00 02 	mcall	80002f64 <RX_interrupt+0xc>

	//AVR32_GPIO.port[2].ovrc = 1 << 29;
}
80002f60:	d8 02       	popm	pc
80002f62:	00 00       	add	r0,r0
80002f64:	80 00       	ld.sh	r0,r0[0x0]
80002f66:	38 78       	mov	r8,-121

80002f68 <but_interrupt>:
	
	rtc_clear_interrupt(&AVR32_RTC);
}

__attribute__((__interrupt)) void but_interrupt(void)
{
80002f68:	d4 01       	pushm	lr
	
	
	//LED_Off(2);
	if (emergency == 1)
80002f6a:	48 68       	lddpc	r8,80002f80 <but_interrupt+0x18>
80002f6c:	70 08       	ld.w	r8,r8[0x0]
80002f6e:	58 18       	cp.w	r8,1
80002f70:	c0 41       	brne	80002f78 <but_interrupt+0x10>
	{
		//AVR32_GPIO.port[2].ovrc = 1 << 24;
		emergAck = 1;
80002f72:	30 19       	mov	r9,1
80002f74:	48 48       	lddpc	r8,80002f84 <but_interrupt+0x1c>
80002f76:	91 09       	st.w	r8[0x0],r9
	}
	gpio_clear_pin_interrupt_flag(Switch1);
80002f78:	35 8c       	mov	r12,88
80002f7a:	f0 1f 00 04 	mcall	80002f88 <but_interrupt+0x20>
	
}
80002f7e:	d8 02       	popm	pc
80002f80:	00 00       	add	r0,r0
80002f82:	05 28       	ld.uh	r8,r2++
80002f84:	00 00       	add	r0,r0
80002f86:	05 24       	ld.uh	r4,r2++
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	38 78       	mov	r8,-121

80002f8c <readADC>:
struct frame youngFrame[15];
struct frame emptyStruct[15];


void readADC(void)
{
80002f8c:	eb cd 40 80 	pushm	r7,lr
	UINT32 readPot, readLight, readTemp;
	UINT16 potMSB, potLSB, lightMSB, lightLSB, tempMSB, tempLSB;

		
	//Reading ADC channels
	readLight = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80002f90:	30 2b       	mov	r11,2
80002f92:	fe 7c 3c 00 	mov	r12,-50176
80002f96:	f0 1f 00 15 	mcall	80002fe8 <readADC+0x5c>
80002f9a:	18 97       	mov	r7,r12
	readTemp = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80002f9c:	30 0b       	mov	r11,0
80002f9e:	fe 7c 3c 00 	mov	r12,-50176
80002fa2:	f0 1f 00 12 	mcall	80002fe8 <readADC+0x5c>

	tempMSB = (readTemp >> 8) & 0x00000003;
	tempLSB = readTemp & 0x000000FF;
	
	//Adding measurements to struct
	youngFrame[0x00F & ownId].mssg[0] = tempMSB;
80002fa6:	49 28       	lddpc	r8,80002fec <readADC+0x60>
80002fa8:	90 89       	ld.uh	r9,r8[0x0]
80002faa:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002fae:	49 1a       	lddpc	r10,80002ff0 <readADC+0x64>
80002fb0:	f2 0b 15 02 	lsl	r11,r9,0x2
80002fb4:	f6 09 00 08 	add	r8,r11,r9
80002fb8:	f4 08 00 18 	add	r8,r10,r8<<0x1
80002fbc:	fd dc c1 02 	bfextu	lr,r12,0x8,0x2
80002fc0:	b0 ae       	st.b	r8[0x2],lr
	youngFrame[0x00F & ownId].mssg[1] = tempLSB;
80002fc2:	b0 bc       	st.b	r8[0x3],r12
	youngFrame[0x00F & ownId].mssg[2] = lightMSB;
80002fc4:	f3 d7 c1 02 	bfextu	r9,r7,0x8,0x2
80002fc8:	b0 c9       	st.b	r8[0x4],r9
	youngFrame[0x00F & ownId].mssg[3] = lightLSB;
80002fca:	b0 d7       	st.b	r8[0x5],r7
	youngFrame[0x00F & ownId].mssg[4] = 0;
80002fcc:	f0 ca ff fc 	sub	r10,r8,-4
80002fd0:	30 09       	mov	r9,0
80002fd2:	b4 a9       	st.b	r10[0x2],r9
	youngFrame[0x00F & ownId].mssg[5] = 0;
80002fd4:	f0 ca ff fb 	sub	r10,r8,-5
80002fd8:	b4 a9       	st.b	r10[0x2],r9
	youngFrame[0x00F & ownId].mssg[6] = 0;
80002fda:	f0 ca ff fa 	sub	r10,r8,-6
80002fde:	b4 a9       	st.b	r10[0x2],r9
	youngFrame[0x00F & ownId].mssg[7] = 0;
80002fe0:	2f 98       	sub	r8,-7
80002fe2:	b0 a9       	st.b	r8[0x2],r9
}
80002fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	20 28       	sub	r8,2
80002fec:	00 00       	add	r0,r0
80002fee:	00 08       	add	r8,r0
80002ff0:	00 00       	add	r0,r0
80002ff2:	06 82       	andn	r2,r3

80002ff4 <ownADC>:

void ownADC(void)
{
80002ff4:	eb cd 40 e0 	pushm	r5-r7,lr
	UINT16 light = 0;
	UINT16 temper= 0;

	readADC();
80002ff8:	f0 1f 00 15 	mcall	8000304c <ownADC+0x58>
	
	// Read light, 2 MSB msg[2], 8 LSB msg[3]
	light = (((UINT16)nFrame[0x00F & ownId].mssg[2]) << 8 ) | nFrame[0x00F & ownId].mssg[3];
80002ffc:	49 58       	lddpc	r8,80003050 <ownADC+0x5c>
80002ffe:	90 88       	ld.uh	r8,r8[0x0]
80003000:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003004:	49 49       	lddpc	r9,80003054 <ownADC+0x60>
80003006:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000300a:	f2 08 00 1a 	add	r10,r9,r8<<0x1
8000300e:	15 c6       	ld.ub	r6,r10[0x4]
80003010:	15 d9       	ld.ub	r9,r10[0x5]
80003012:	f3 e6 10 86 	or	r6,r9,r6<<0x8
	
	// Read temp, 2 MSB msg[0], 8 LSB msg[1]
	temper = (((UINT16)nFrame[0x00F & ownId].mssg[0]) << 8 ) | nFrame[0x00F & ownId].mssg[1];
80003016:	15 a5       	ld.ub	r5,r10[0x2]
80003018:	15 b8       	ld.ub	r8,r10[0x3]
8000301a:	f1 e5 10 85 	or	r5,r8,r5<<0x8
	
	dip204_set_cursor_position(6, 2);
8000301e:	30 2b       	mov	r11,2
80003020:	30 6c       	mov	r12,6
80003022:	f0 1f 00 0e 	mcall	80003058 <ownADC+0x64>
	dip204_printf_string("%d", light);
80003026:	48 e7       	lddpc	r7,8000305c <ownADC+0x68>
80003028:	5c 76       	castu.h	r6
8000302a:	1a d6       	st.w	--sp,r6
8000302c:	0e 9c       	mov	r12,r7
8000302e:	f0 1f 00 0d 	mcall	80003060 <ownADC+0x6c>
	dip204_set_cursor_position(6, 3);
80003032:	30 3b       	mov	r11,3
80003034:	30 6c       	mov	r12,6
80003036:	f0 1f 00 09 	mcall	80003058 <ownADC+0x64>
	dip204_printf_string("%d", temper);
8000303a:	5c 75       	castu.h	r5
8000303c:	1a d5       	st.w	--sp,r5
8000303e:	0e 9c       	mov	r12,r7
80003040:	f0 1f 00 08 	mcall	80003060 <ownADC+0x6c>
80003044:	2f ed       	sub	sp,-8

}
80003046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000304a:	00 00       	add	r0,r0
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	2f 8c       	sub	r12,-8
80003050:	00 00       	add	r0,r0
80003052:	00 08       	add	r8,r0
80003054:	00 00       	add	r0,r0
80003056:	07 bc       	ld.ub	r12,r3[0x3]
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	34 50       	mov	r0,69
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	9a b0       	ld.uh	r0,sp[0x6]
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	33 b8       	mov	r8,59

80003064 <main>:
		}	
}


int main(void) 
{
80003064:	d4 31       	pushm	r0-r7,lr
80003066:	20 3d       	sub	sp,12
	initBoard();
80003068:	f0 1f 00 48 	mcall	80003188 <main+0x124>

	//Filtering incoming messages
	UINT16 Mask = 0xFFF0; 
	UINT16 flt = 0x1200;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
8000306c:	e0 68 12 00 	mov	r8,4608
80003070:	ba 08       	st.h	sp[0x0],r8
80003072:	ba 18       	st.h	sp[0x2],r8
80003074:	ba 28       	st.h	sp[0x4],r8
80003076:	ba 38       	st.h	sp[0x6],r8
80003078:	ba 48       	st.h	sp[0x8],r8
8000307a:	ba 58       	st.h	sp[0xa],r8
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);
8000307c:	1a 99       	mov	r9,sp
8000307e:	e0 6a ff f0 	mov	r10,65520
80003082:	30 7b       	mov	r11,7
80003084:	30 0c       	mov	r12,0
80003086:	f0 1f 00 42 	mcall	8000318c <main+0x128>

	while(1)
	{

		adc_start(&AVR32_ADC);
8000308a:	fe 73 3c 00 	mov	r3,-50176

		//Clear memory contents
		ClearMessages(msg);
8000308e:	4c 14       	lddpc	r4,80003190 <main+0x12c>
		
		//If the dongle is connected to a bus
		if(CANRxReady(0) || CANTxReady(0))
80003090:	30 05       	mov	r5,0
		{
			//Write to display and read ADC
			dip204_clear_display();
			printLCD();
			ownADC();
			dip204_hide_cursor();
80003092:	4c 12       	lddpc	r2,80003194 <main+0x130>
		state = 0;
		}	
}


int main(void) 
80003094:	e4 c6 ff 60 	sub	r6,r2,-160
			printLCD();
			ownADC();
			dip204_hide_cursor();
			for(int j = 0; j < 16 ; ++j)
			{
				nFrame[j].ID = 0;
80003098:	30 07       	mov	r7,0
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000309a:	e0 61 1b 00 	mov	r1,6912
8000309e:	ea 11 00 b7 	orh	r1,0xb7
		state = 0;
		}	
}


int main(void) 
800030a2:	e8 c0 ff f8 	sub	r0,r4,-8
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);

	while(1)
	{

		adc_start(&AVR32_ADC);
800030a6:	06 9c       	mov	r12,r3
800030a8:	f0 1f 00 3c 	mcall	80003198 <main+0x134>

		//Clear memory contents
		ClearMessages(msg);
800030ac:	08 9c       	mov	r12,r4
800030ae:	f0 1f 00 3c 	mcall	8000319c <main+0x138>
		
		//If the dongle is connected to a bus
		if(CANRxReady(0) || CANTxReady(0))
800030b2:	0a 9c       	mov	r12,r5
800030b4:	f0 1f 00 3b 	mcall	800031a0 <main+0x13c>
800030b8:	c0 51       	brne	800030c2 <main+0x5e>
800030ba:	0a 9c       	mov	r12,r5
800030bc:	f0 1f 00 3a 	mcall	800031a4 <main+0x140>
800030c0:	c4 20       	breq	80003144 <main+0xe0>
		{
			// Setting own id.
			nFrame[0x00F & ownId].ID = ownId;
800030c2:	4b a8       	lddpc	r8,800031a8 <main+0x144>
800030c4:	90 08       	ld.sh	r8,r8[0x0]
800030c6:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800030ca:	f2 09 00 29 	add	r9,r9,r9<<0x2
800030ce:	e4 09 0a 18 	st.h	r2[r9<<0x1],r8

			//Write to display and read ADC
			dip204_clear_display();
800030d2:	f0 1f 00 37 	mcall	800031ac <main+0x148>
			printLCD();
800030d6:	f0 1f 00 37 	mcall	800031b0 <main+0x14c>
			ownADC();
800030da:	f0 1f 00 37 	mcall	800031b4 <main+0x150>
			average();
800030de:	f0 1f 00 37 	mcall	800031b8 <main+0x154>
			dip204_hide_cursor();
800030e2:	f0 1f 00 37 	mcall	800031bc <main+0x158>

			//Read any message available
			if(CANRxReady(0))
800030e6:	0a 9c       	mov	r12,r5
800030e8:	f0 1f 00 2e 	mcall	800031a0 <main+0x13c>
800030ec:	c1 70       	breq	8000311a <main+0xb6>
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
800030ee:	4b 59       	lddpc	r9,800031c0 <main+0x15c>
800030f0:	08 9a       	mov	r10,r4
800030f2:	4b 5b       	lddpc	r11,800031c4 <main+0x160>
800030f4:	0a 9c       	mov	r12,r5
800030f6:	f0 1f 00 35 	mcall	800031c8 <main+0x164>
800030fa:	c1 00       	breq	8000311a <main+0xb6>
				{					
					//Adding received ID to struct
					youngFrame[0x00F & Ident].ID = Ident;
800030fc:	4b 28       	lddpc	r8,800031c4 <main+0x160>
800030fe:	70 08       	ld.w	r8,r8[0x0]
80003100:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80003104:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003108:	4b 1a       	lddpc	r10,800031cc <main+0x168>
8000310a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000310e:	12 b8       	st.h	r9++,r8
80003110:	08 98       	mov	r8,r4
					
					//Adding frame to the struct
					for(int i = 0; i < 8; ++i)
					{
						//Adding received message to struct
						youngFrame[0x00F & Ident].mssg[i] = msg[i];
80003112:	11 3a       	ld.ub	r10,r8++
80003114:	12 ca       	st.b	r9++,r10
				{					
					//Adding received ID to struct
					youngFrame[0x00F & Ident].ID = Ident;
					
					//Adding frame to the struct
					for(int i = 0; i < 8; ++i)
80003116:	00 38       	cp.w	r8,r0
80003118:	cf d1       	brne	80003112 <main+0xae>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000311a:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000311e:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003122:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003126:	14 38       	cp.w	r8,r10
80003128:	e0 88 00 08 	brls	80003138 <main+0xd4>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000312c:	12 38       	cp.w	r8,r9
8000312e:	fe 98 ff fa 	brls	80003122 <main+0xbe>
80003132:	12 3a       	cp.w	r10,r9
80003134:	cb 93       	brcs	800030a6 <main+0x42>
80003136:	cf 6b       	rjmp	80003122 <main+0xbe>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003138:	12 38       	cp.w	r8,r9
8000313a:	fe 9b ff b6 	brhi	800030a6 <main+0x42>
8000313e:	12 3a       	cp.w	r10,r9
80003140:	cb 33       	brcs	800030a6 <main+0x42>
80003142:	cf 0b       	rjmp	80003122 <main+0xbe>
		}
		// If the dongle isn't connected
		else
		{
			//Write to display and read ADC
			dip204_clear_display();
80003144:	f0 1f 00 1a 	mcall	800031ac <main+0x148>
			printLCD();
80003148:	f0 1f 00 1a 	mcall	800031b0 <main+0x14c>
			ownADC();
8000314c:	f0 1f 00 1a 	mcall	800031b4 <main+0x150>
			dip204_hide_cursor();
80003150:	f0 1f 00 1b 	mcall	800031bc <main+0x158>
80003154:	04 98       	mov	r8,r2
			for(int j = 0; j < 16 ; ++j)
			{
				nFrame[j].ID = 0;
80003156:	b0 07       	st.h	r8[0x0],r7
80003158:	2f 68       	sub	r8,-10
			//Write to display and read ADC
			dip204_clear_display();
			printLCD();
			ownADC();
			dip204_hide_cursor();
			for(int j = 0; j < 16 ; ++j)
8000315a:	0c 38       	cp.w	r8,r6
8000315c:	cf d1       	brne	80003156 <main+0xf2>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000315e:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003162:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003166:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000316a:	14 38       	cp.w	r8,r10
8000316c:	e0 88 00 08 	brls	8000317c <main+0x118>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003170:	12 38       	cp.w	r8,r9
80003172:	fe 98 ff fa 	brls	80003166 <main+0x102>
80003176:	12 3a       	cp.w	r10,r9
80003178:	c9 73       	brcs	800030a6 <main+0x42>
8000317a:	cf 6b       	rjmp	80003166 <main+0x102>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000317c:	12 38       	cp.w	r8,r9
8000317e:	fe 9b ff 94 	brhi	800030a6 <main+0x42>
80003182:	12 3a       	cp.w	r10,r9
80003184:	c9 13       	brcs	800030a6 <main+0x42>
80003186:	cf 0b       	rjmp	80003166 <main+0x102>
80003188:	80 00       	ld.sh	r0,r0[0x0]
8000318a:	2a 4c       	sub	r12,-92
8000318c:	80 00       	ld.sh	r0,r0[0x0]
8000318e:	27 08       	sub	r8,112
80003190:	00 00       	add	r0,r0
80003192:	07 18       	ld.sh	r8,r3++
80003194:	00 00       	add	r0,r0
80003196:	07 bc       	ld.ub	r12,r3[0x3]
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	20 08       	sub	r8,0
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	21 6c       	sub	r12,22
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	22 f0       	sub	r0,47
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	23 04       	sub	r4,48
800031a8:	00 00       	add	r0,r0
800031aa:	00 08       	add	r8,r0
800031ac:	80 00       	ld.sh	r0,r0[0x0]
800031ae:	34 dc       	mov	r12,77
800031b0:	80 00       	ld.sh	r0,r0[0x0]
800031b2:	2c 84       	sub	r4,-56
800031b4:	80 00       	ld.sh	r0,r0[0x0]
800031b6:	2f f4       	sub	r4,-1
800031b8:	80 00       	ld.sh	r0,r0[0x0]
800031ba:	2d 1c       	sub	r12,-47
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	34 ac       	mov	r12,74
800031c0:	00 00       	add	r0,r0
800031c2:	07 b6       	ld.ub	r6,r3[0x3]
800031c4:	00 00       	add	r0,r0
800031c6:	07 b8       	ld.ub	r8,r3[0x3]
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	28 98       	sub	r8,-119
800031cc:	00 00       	add	r0,r0
800031ce:	06 82       	andn	r2,r3

800031d0 <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800031d0:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
800031d4:	49 28       	lddpc	r8,8000321c <LED_Display+0x4c>
800031d6:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
800031d8:	49 28       	lddpc	r8,80003220 <LED_Display+0x50>
800031da:	f0 c9 ff 80 	sub	r9,r8,-128
800031de:	12 38       	cp.w	r8,r9
800031e0:	5e 2c       	reths	r12
800031e2:	10 9b       	mov	r11,r8
800031e4:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
800031e6:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800031ea:	f0 f9 ff fc 	ld.w	r9,r8[-4]
800031ee:	a9 69       	lsl	r9,0x8
800031f0:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
800031f4:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800031f8:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
800031fc:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80003200:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
80003204:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80003208:	70 0a       	ld.w	r10,r8[0x0]
8000320a:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000320e:	70 0a       	ld.w	r10,r8[0x0]
80003210:	93 1a       	st.w	r9[0x4],r10
80003212:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80003214:	16 38       	cp.w	r8,r11
80003216:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
80003218:	a1 9c       	lsr	r12,0x1
8000321a:	ce 8b       	rjmp	800031ea <LED_Display+0x1a>
8000321c:	00 00       	add	r0,r0
8000321e:	00 0c       	add	r12,r0
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	9a b4       	ld.uh	r4,sp[0x6]

80003224 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003224:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80003228:	49 18       	lddpc	r8,8000326c <LED_On+0x48>
8000322a:	70 09       	ld.w	r9,r8[0x0]
8000322c:	f9 e9 10 09 	or	r9,r12,r9
80003230:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80003232:	58 0c       	cp.w	r12,0
80003234:	5e 0c       	reteq	r12
80003236:	48 f8       	lddpc	r8,80003270 <LED_On+0x4c>
80003238:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000323a:	18 9a       	mov	r10,r12
8000323c:	5c 9a       	brev	r10
8000323e:	f4 0a 12 00 	clz	r10,r10
80003242:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80003244:	f4 09 15 04 	lsl	r9,r10,0x4
80003248:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000324a:	70 09       	ld.w	r9,r8[0x0]
8000324c:	a9 69       	lsl	r9,0x8
8000324e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80003252:	70 1b       	ld.w	r11,r8[0x4]
80003254:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80003258:	70 1b       	ld.w	r11,r8[0x4]
8000325a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000325e:	70 1b       	ld.w	r11,r8[0x4]
80003260:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80003262:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80003266:	ce a1       	brne	8000323a <LED_On+0x16>
80003268:	5e fc       	retal	r12
8000326a:	00 00       	add	r0,r0
8000326c:	00 00       	add	r0,r0
8000326e:	00 0c       	add	r12,r0
80003270:	80 00       	ld.sh	r0,r0[0x0]
80003272:	9a b4       	ld.uh	r4,sp[0x6]

80003274 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80003274:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80003278:	49 28       	lddpc	r8,800032c0 <LED_Off+0x4c>
8000327a:	70 09       	ld.w	r9,r8[0x0]
8000327c:	f8 0a 11 ff 	rsub	r10,r12,-1
80003280:	f5 e9 00 09 	and	r9,r10,r9
80003284:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80003286:	58 0c       	cp.w	r12,0
80003288:	5e 0c       	reteq	r12
8000328a:	48 f8       	lddpc	r8,800032c4 <LED_Off+0x50>
8000328c:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000328e:	18 9a       	mov	r10,r12
80003290:	5c 9a       	brev	r10
80003292:	f4 0a 12 00 	clz	r10,r10
80003296:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80003298:	f4 09 15 04 	lsl	r9,r10,0x4
8000329c:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000329e:	70 09       	ld.w	r9,r8[0x0]
800032a0:	a9 69       	lsl	r9,0x8
800032a2:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800032a6:	70 1b       	ld.w	r11,r8[0x4]
800032a8:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800032ac:	70 1b       	ld.w	r11,r8[0x4]
800032ae:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800032b2:	70 1b       	ld.w	r11,r8[0x4]
800032b4:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800032b6:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800032ba:	ce a1       	brne	8000328e <LED_Off+0x1a>
800032bc:	5e fc       	retal	r12
800032be:	00 00       	add	r0,r0
800032c0:	00 00       	add	r0,r0
800032c2:	00 0c       	add	r12,r0
800032c4:	80 00       	ld.sh	r0,r0[0x0]
800032c6:	9a b4       	ld.uh	r4,sp[0x6]

800032c8 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
800032c8:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
800032ca:	30 2b       	mov	r11,2
800032cc:	fe 7c 28 00 	mov	r12,-55296
800032d0:	f0 1f 00 02 	mcall	800032d8 <dip204_select+0x10>
}
800032d4:	d8 02       	popm	pc
800032d6:	00 00       	add	r0,r0
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	3b ba       	mov	r10,-69

800032dc <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
800032dc:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
800032e0:	f8 c8 ff f8 	sub	r8,r12,-8
800032e4:	30 69       	mov	r9,6
800032e6:	f2 08 18 00 	cp.b	r8,r9
800032ea:	e0 8b 00 0f 	brhi	80003308 <dip204_write_byte+0x2c>
800032ee:	30 19       	mov	r9,1
800032f0:	f2 08 09 48 	lsl	r8,r9,r8
800032f4:	e2 18 00 55 	andl	r8,0x55,COH
800032f8:	c0 80       	breq	80003308 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800032fa:	18 9b       	mov	r11,r12
800032fc:	fe 7c 28 00 	mov	r12,-55296
80003300:	f0 1f 00 0c 	mcall	80003330 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80003304:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80003308:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000330a:	f8 07 16 18 	lsr	r7,r12,0x18
8000330e:	0e 9b       	mov	r11,r7
80003310:	e2 1b 00 f0 	andl	r11,0xf0,COH
80003314:	fe 7c 28 00 	mov	r12,-55296
80003318:	f0 1f 00 06 	mcall	80003330 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
8000331c:	ee 0b 15 04 	lsl	r11,r7,0x4
80003320:	e2 1b 00 f0 	andl	r11,0xf0,COH
80003324:	fe 7c 28 00 	mov	r12,-55296
80003328:	f0 1f 00 02 	mcall	80003330 <dip204_write_byte+0x54>
8000332c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	3c ea       	mov	r10,-50

80003334 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80003334:	eb cd 40 c0 	pushm	r6-r7,lr
80003338:	20 1d       	sub	sp,4
8000333a:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
8000333c:	fa c7 ff fc 	sub	r7,sp,-4
80003340:	30 08       	mov	r8,0
80003342:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80003344:	30 0b       	mov	r11,0
80003346:	fe 7c 28 00 	mov	r12,-55296
8000334a:	f0 1f 00 08 	mcall	80003368 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
8000334e:	0e 9b       	mov	r11,r7
80003350:	fe 7c 28 00 	mov	r12,-55296
80003354:	f0 1f 00 06 	mcall	8000336c <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80003358:	1b b8       	ld.ub	r8,sp[0x3]
8000335a:	5c 98       	brev	r8
8000335c:	b9 88       	lsr	r8,0x18
8000335e:	ac 88       	st.b	r6[0x0],r8
}
80003360:	2f fd       	sub	sp,-4
80003362:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003366:	00 00       	add	r0,r0
80003368:	80 00       	ld.sh	r0,r0[0x0]
8000336a:	3c ea       	mov	r10,-50
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	3d 0e       	mov	lr,-48

80003370 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80003370:	eb cd 40 c0 	pushm	r6-r7,lr
80003374:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80003376:	fa c7 ff fc 	sub	r7,sp,-4
8000337a:	30 08       	mov	r8,0
8000337c:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
8000337e:	e0 6c 00 fc 	mov	r12,252
80003382:	f0 1f 00 07 	mcall	8000339c <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80003386:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80003388:	0e 9c       	mov	r12,r7
8000338a:	f0 1f 00 06 	mcall	800033a0 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
8000338e:	1b b8       	ld.ub	r8,sp[0x3]
80003390:	ec 08 18 00 	cp.b	r8,r6
80003394:	cf a5       	brlt	80003388 <dip204_wait_busy+0x18>
}
80003396:	2f fd       	sub	sp,-4
80003398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000339c:	80 00       	ld.sh	r0,r0[0x0]
8000339e:	32 dc       	mov	r12,45
800033a0:	80 00       	ld.sh	r0,r0[0x0]
800033a2:	33 34       	mov	r4,51

800033a4 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800033a4:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800033a6:	30 2b       	mov	r11,2
800033a8:	fe 7c 28 00 	mov	r12,-55296
800033ac:	f0 1f 00 02 	mcall	800033b4 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
800033b0:	d8 02       	popm	pc
800033b2:	00 00       	add	r0,r0
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	3c 06       	mov	r6,-64

800033b8 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
800033b8:	d4 21       	pushm	r4-r7,lr
800033ba:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
800033bc:	fa ca ff d4 	sub	r10,sp,-44
800033c0:	18 9b       	mov	r11,r12
800033c2:	1a 9c       	mov	r12,sp
800033c4:	f0 1f 00 1e 	mcall	8000343c <dip204_printf_string+0x84>
800033c8:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
800033ca:	31 38       	mov	r8,19
800033cc:	f0 0c 18 00 	cp.b	r12,r8
800033d0:	e0 8b 00 0e 	brhi	800033ec <dip204_printf_string+0x34>
800033d4:	30 0a       	mov	r10,0
800033d6:	31 49       	mov	r9,20
800033d8:	fa c8 ff e8 	sub	r8,sp,-24
800033dc:	18 08       	add	r8,r12
800033de:	f1 6a ff e8 	st.b	r8[-24],r10
800033e2:	2f fc       	sub	r12,-1
800033e4:	5c 5c       	castu.b	r12
800033e6:	f2 0c 18 00 	cp.b	r12,r9
800033ea:	cf 71       	brne	800033d8 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
800033ec:	f0 1f 00 15 	mcall	80003440 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
800033f0:	30 08       	mov	r8,0
800033f2:	1b 89       	ld.ub	r9,sp[0x0]
800033f4:	f0 09 18 00 	cp.b	r9,r8
800033f8:	c1 e0       	breq	80003434 <dip204_printf_string+0x7c>
800033fa:	30 06       	mov	r6,0
800033fc:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
800033fe:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003402:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003404:	08 9c       	mov	r12,r4
80003406:	f0 1f 00 10 	mcall	80003444 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000340a:	fa c8 ff e8 	sub	r8,sp,-24
8000340e:	f0 06 00 06 	add	r6,r8,r6
80003412:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80003416:	f0 1f 00 0c 	mcall	80003444 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000341a:	2f f7       	sub	r7,-1
8000341c:	5c 57       	castu.b	r7
    dip204_wait_busy();
8000341e:	f0 1f 00 0b 	mcall	80003448 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003422:	0e 96       	mov	r6,r7
80003424:	fa c8 ff e8 	sub	r8,sp,-24
80003428:	0e 08       	add	r8,r7
8000342a:	f1 38 ff e8 	ld.ub	r8,r8[-24]
8000342e:	ea 08 18 00 	cp.b	r8,r5
80003432:	ce 91       	brne	80003404 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80003434:	f0 1f 00 06 	mcall	8000344c <dip204_printf_string+0x94>
}
80003438:	2f ad       	sub	sp,-24
8000343a:	d8 22       	popm	r4-r7,pc
8000343c:	80 00       	ld.sh	r0,r0[0x0]
8000343e:	42 08       	lddsp	r8,sp[0x80]
80003440:	80 00       	ld.sh	r0,r0[0x0]
80003442:	32 c8       	mov	r8,44
80003444:	80 00       	ld.sh	r0,r0[0x0]
80003446:	32 dc       	mov	r12,45
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	33 70       	mov	r0,55
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	33 a4       	mov	r4,58

80003450 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80003450:	eb cd 40 c0 	pushm	r6-r7,lr
80003454:	18 96       	mov	r6,r12
80003456:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80003458:	f0 1f 00 11 	mcall	8000349c <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
8000345c:	31 48       	mov	r8,20
8000345e:	f0 06 18 00 	cp.b	r6,r8
80003462:	5f 89       	srls	r9
80003464:	30 48       	mov	r8,4
80003466:	f0 07 18 00 	cp.b	r7,r8
8000346a:	5f 88       	srls	r8
8000346c:	f3 e8 00 08 	and	r8,r9,r8
80003470:	c0 31       	brne	80003476 <dip204_set_cursor_position+0x26>
80003472:	30 06       	mov	r6,0
80003474:	c0 68       	rjmp	80003480 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80003476:	28 16       	sub	r6,-127
80003478:	20 17       	sub	r7,1
8000347a:	a5 77       	lsl	r7,0x5
8000347c:	0e 06       	add	r6,r7
8000347e:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003480:	e0 6c 00 f8 	mov	r12,248
80003484:	f0 1f 00 07 	mcall	800034a0 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80003488:	0c 9c       	mov	r12,r6
8000348a:	f0 1f 00 06 	mcall	800034a0 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
8000348e:	f0 1f 00 06 	mcall	800034a4 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80003492:	f0 1f 00 06 	mcall	800034a8 <dip204_set_cursor_position+0x58>
}
80003496:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000349a:	00 00       	add	r0,r0
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	32 c8       	mov	r8,44
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	32 dc       	mov	r12,45
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	33 70       	mov	r0,55
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	33 a4       	mov	r4,58

800034ac <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
800034ac:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
800034ae:	f0 1f 00 08 	mcall	800034cc <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800034b2:	e0 6c 00 f8 	mov	r12,248
800034b6:	f0 1f 00 07 	mcall	800034d0 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
800034ba:	30 cc       	mov	r12,12
800034bc:	f0 1f 00 05 	mcall	800034d0 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
800034c0:	f0 1f 00 05 	mcall	800034d4 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
800034c4:	f0 1f 00 05 	mcall	800034d8 <dip204_hide_cursor+0x2c>
}
800034c8:	d8 02       	popm	pc
800034ca:	00 00       	add	r0,r0
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	32 c8       	mov	r8,44
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	32 dc       	mov	r12,45
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	33 70       	mov	r0,55
800034d8:	80 00       	ld.sh	r0,r0[0x0]
800034da:	33 a4       	mov	r4,58

800034dc <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
800034dc:	d4 01       	pushm	lr
  dip204_select();
800034de:	f0 1f 00 13 	mcall	80003528 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800034e2:	e0 6c 00 f8 	mov	r12,248
800034e6:	f0 1f 00 12 	mcall	8000352c <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
800034ea:	30 1c       	mov	r12,1
800034ec:	f0 1f 00 10 	mcall	8000352c <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800034f0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800034f4:	e0 69 bb 80 	mov	r9,48000
800034f8:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800034fc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003500:	14 38       	cp.w	r8,r10
80003502:	e0 88 00 08 	brls	80003512 <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003506:	12 38       	cp.w	r8,r9
80003508:	fe 98 ff fa 	brls	800034fc <dip204_clear_display+0x20>
8000350c:	12 3a       	cp.w	r10,r9
8000350e:	c0 73       	brcs	8000351c <dip204_clear_display+0x40>
80003510:	cf 6b       	rjmp	800034fc <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003512:	12 38       	cp.w	r8,r9
80003514:	e0 8b 00 04 	brhi	8000351c <dip204_clear_display+0x40>
80003518:	12 3a       	cp.w	r10,r9
8000351a:	cf 12       	brcc	800034fc <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
8000351c:	f0 1f 00 05 	mcall	80003530 <dip204_clear_display+0x54>
  dip204_unselect();
80003520:	f0 1f 00 05 	mcall	80003534 <dip204_clear_display+0x58>
}
80003524:	d8 02       	popm	pc
80003526:	00 00       	add	r0,r0
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	32 c8       	mov	r8,44
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	32 dc       	mov	r12,45
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	33 70       	mov	r0,55
80003534:	80 00       	ld.sh	r0,r0[0x0]
80003536:	33 a4       	mov	r4,58

80003538 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80003538:	eb cd 40 80 	pushm	r7,lr
8000353c:	20 4d       	sub	sp,16
8000353e:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80003540:	58 1c       	cp.w	r12,1
80003542:	c3 01       	brne	800035a2 <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80003544:	30 69       	mov	r9,6
80003546:	4f a8       	lddpc	r8,8000372c <dip204_init+0x1f4>
80003548:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000354a:	30 2b       	mov	r11,2
8000354c:	33 2c       	mov	r12,50
8000354e:	f0 1f 00 79 	mcall	80003730 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80003552:	30 08       	mov	r8,0
80003554:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80003556:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80003558:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
8000355a:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
8000355c:	1a 9c       	mov	r12,sp
8000355e:	f0 1f 00 76 	mcall	80003734 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80003562:	58 07       	cp.w	r7,0
80003564:	f9 b7 01 31 	movne	r7,49
80003568:	f9 b7 00 01 	moveq	r7,1
8000356c:	4f 38       	lddpc	r8,80003738 <dip204_init+0x200>
8000356e:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80003570:	4f 3b       	lddpc	r11,8000373c <dip204_init+0x204>
80003572:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80003574:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80003578:	ab a8       	sbr	r8,0xa
8000357a:	30 89       	mov	r9,8
8000357c:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80003580:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80003582:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80003584:	33 28       	mov	r8,50
80003586:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80003588:	30 08       	mov	r8,0
8000358a:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
8000358c:	4e 87       	lddpc	r7,8000372c <dip204_init+0x1f4>
8000358e:	6e 0c       	ld.w	r12,r7[0x0]
80003590:	f0 1f 00 6c 	mcall	80003740 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80003594:	6e 08       	ld.w	r8,r7[0x0]
80003596:	30 1c       	mov	r12,1
80003598:	f8 08 09 4c 	lsl	r12,r12,r8
8000359c:	f0 1f 00 6a 	mcall	80003744 <dip204_init+0x20c>
800035a0:	c0 a8       	rjmp	800035b4 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
800035a2:	58 0b       	cp.w	r11,0
800035a4:	c0 50       	breq	800035ae <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800035a6:	33 2c       	mov	r12,50
800035a8:	f0 1f 00 68 	mcall	80003748 <dip204_init+0x210>
800035ac:	c0 48       	rjmp	800035b4 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800035ae:	33 2c       	mov	r12,50
800035b0:	f0 1f 00 67 	mcall	8000374c <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800035b4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800035b8:	e2 79 a9 80 	mov	r9,240000
800035bc:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035c0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035c4:	14 38       	cp.w	r8,r10
800035c6:	e0 88 00 08 	brls	800035d6 <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035ca:	12 38       	cp.w	r8,r9
800035cc:	fe 98 ff fa 	brls	800035c0 <dip204_init+0x88>
800035d0:	12 3a       	cp.w	r10,r9
800035d2:	c6 e3       	brcs	800036ae <dip204_init+0x176>
800035d4:	cf 6b       	rjmp	800035c0 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035d6:	12 38       	cp.w	r8,r9
800035d8:	e0 8b 00 6b 	brhi	800036ae <dip204_init+0x176>
800035dc:	12 3a       	cp.w	r10,r9
800035de:	c6 83       	brcs	800036ae <dip204_init+0x176>
800035e0:	cf 0b       	rjmp	800035c0 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800035e2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800035e6:	14 38       	cp.w	r8,r10
800035e8:	e0 88 00 08 	brls	800035f8 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800035ec:	12 38       	cp.w	r8,r9
800035ee:	fe 98 ff fa 	brls	800035e2 <dip204_init+0xaa>
800035f2:	12 3a       	cp.w	r10,r9
800035f4:	c6 b3       	brcs	800036ca <dip204_init+0x192>
800035f6:	cf 6b       	rjmp	800035e2 <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800035f8:	12 38       	cp.w	r8,r9
800035fa:	e0 8b 00 68 	brhi	800036ca <dip204_init+0x192>
800035fe:	12 3a       	cp.w	r10,r9
80003600:	c6 53       	brcs	800036ca <dip204_init+0x192>
80003602:	cf 0b       	rjmp	800035e2 <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003604:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003608:	14 38       	cp.w	r8,r10
8000360a:	e0 88 00 08 	brls	8000361a <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000360e:	12 38       	cp.w	r8,r9
80003610:	fe 98 ff fa 	brls	80003604 <dip204_init+0xcc>
80003614:	12 3a       	cp.w	r10,r9
80003616:	c6 23       	brcs	800036da <dip204_init+0x1a2>
80003618:	cf 6b       	rjmp	80003604 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000361a:	12 38       	cp.w	r8,r9
8000361c:	e0 8b 00 5f 	brhi	800036da <dip204_init+0x1a2>
80003620:	12 3a       	cp.w	r10,r9
80003622:	c5 c3       	brcs	800036da <dip204_init+0x1a2>
80003624:	cf 0b       	rjmp	80003604 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003626:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000362a:	14 38       	cp.w	r8,r10
8000362c:	e0 88 00 08 	brls	8000363c <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003630:	12 38       	cp.w	r8,r9
80003632:	fe 98 ff fa 	brls	80003626 <dip204_init+0xee>
80003636:	12 3a       	cp.w	r10,r9
80003638:	c5 93       	brcs	800036ea <dip204_init+0x1b2>
8000363a:	cf 6b       	rjmp	80003626 <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000363c:	12 38       	cp.w	r8,r9
8000363e:	e0 8b 00 56 	brhi	800036ea <dip204_init+0x1b2>
80003642:	12 3a       	cp.w	r10,r9
80003644:	c5 33       	brcs	800036ea <dip204_init+0x1b2>
80003646:	cf 0b       	rjmp	80003626 <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003648:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000364c:	14 38       	cp.w	r8,r10
8000364e:	e0 88 00 08 	brls	8000365e <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003652:	12 38       	cp.w	r8,r9
80003654:	fe 98 ff fa 	brls	80003648 <dip204_init+0x110>
80003658:	12 3a       	cp.w	r10,r9
8000365a:	c5 03       	brcs	800036fa <dip204_init+0x1c2>
8000365c:	cf 6b       	rjmp	80003648 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000365e:	12 38       	cp.w	r8,r9
80003660:	e0 8b 00 4d 	brhi	800036fa <dip204_init+0x1c2>
80003664:	12 3a       	cp.w	r10,r9
80003666:	c4 a3       	brcs	800036fa <dip204_init+0x1c2>
80003668:	cf 0b       	rjmp	80003648 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000366a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000366e:	14 38       	cp.w	r8,r10
80003670:	e0 88 00 08 	brls	80003680 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003674:	12 38       	cp.w	r8,r9
80003676:	fe 98 ff fa 	brls	8000366a <dip204_init+0x132>
8000367a:	12 3a       	cp.w	r10,r9
8000367c:	c4 93       	brcs	8000370e <dip204_init+0x1d6>
8000367e:	cf 6b       	rjmp	8000366a <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003680:	12 38       	cp.w	r8,r9
80003682:	e0 8b 00 46 	brhi	8000370e <dip204_init+0x1d6>
80003686:	12 3a       	cp.w	r10,r9
80003688:	c4 33       	brcs	8000370e <dip204_init+0x1d6>
8000368a:	cf 0b       	rjmp	8000366a <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000368c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003690:	14 38       	cp.w	r8,r10
80003692:	e0 88 00 08 	brls	800036a2 <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003696:	12 38       	cp.w	r8,r9
80003698:	fe 98 ff fa 	brls	8000368c <dip204_init+0x154>
8000369c:	12 3a       	cp.w	r10,r9
8000369e:	c4 03       	brcs	8000371e <dip204_init+0x1e6>
800036a0:	cf 6b       	rjmp	8000368c <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800036a2:	12 38       	cp.w	r8,r9
800036a4:	e0 8b 00 3d 	brhi	8000371e <dip204_init+0x1e6>
800036a8:	12 3a       	cp.w	r10,r9
800036aa:	c3 a3       	brcs	8000371e <dip204_init+0x1e6>
800036ac:	cf 0b       	rjmp	8000368c <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
800036ae:	f0 1f 00 29 	mcall	80003750 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
800036b2:	e0 6c 00 f8 	mov	r12,248
800036b6:	f0 1f 00 28 	mcall	80003754 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
800036ba:	33 4c       	mov	r12,52
800036bc:	f0 1f 00 26 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036c0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036c4:	f0 ca d1 20 	sub	r10,r8,-12000
800036c8:	c8 db       	rjmp	800035e2 <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800036ca:	30 9c       	mov	r12,9
800036cc:	f0 1f 00 22 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036d0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036d4:	f0 ca d1 20 	sub	r10,r8,-12000
800036d8:	c9 6b       	rjmp	80003604 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
800036da:	33 0c       	mov	r12,48
800036dc:	f0 1f 00 1e 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036e0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036e4:	f0 ca d1 20 	sub	r10,r8,-12000
800036e8:	c9 fb       	rjmp	80003626 <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800036ea:	30 fc       	mov	r12,15
800036ec:	f0 1f 00 1a 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800036f0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800036f4:	f0 ca d1 20 	sub	r10,r8,-12000
800036f8:	ca 8b       	rjmp	80003648 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800036fa:	30 1c       	mov	r12,1
800036fc:	f0 1f 00 16 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003700:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003704:	e0 69 ea 60 	mov	r9,60000
80003708:	f0 09 00 0a 	add	r10,r8,r9
8000370c:	ca fb       	rjmp	8000366a <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
8000370e:	30 6c       	mov	r12,6
80003710:	f0 1f 00 11 	mcall	80003754 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003714:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003718:	f0 ca d1 20 	sub	r10,r8,-12000
8000371c:	cb 8b       	rjmp	8000368c <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
8000371e:	f0 1f 00 0f 	mcall	80003758 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80003722:	f0 1f 00 0f 	mcall	8000375c <dip204_init+0x224>
}
80003726:	2f cd       	sub	sp,-16
80003728:	e3 cd 80 80 	ldm	sp++,r7,pc
8000372c:	00 00       	add	r0,r0
8000372e:	00 10       	sub	r0,r0
80003730:	80 00       	ld.sh	r0,r0[0x0]
80003732:	37 60       	mov	r0,118
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	3a f0       	mov	r0,-81
80003738:	00 00       	add	r0,r0
8000373a:	05 58       	ld.sh	r8,--r2
8000373c:	00 00       	add	r0,r0
8000373e:	05 38       	ld.ub	r8,r2++
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	3a a8       	mov	r8,-86
80003744:	80 00       	ld.sh	r0,r0[0x0]
80003746:	3a de       	mov	lr,-83
80003748:	80 00       	ld.sh	r0,r0[0x0]
8000374a:	38 00       	mov	r0,-128
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	37 e4       	mov	r4,126
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	32 c8       	mov	r8,44
80003754:	80 00       	ld.sh	r0,r0[0x0]
80003756:	32 dc       	mov	r12,45
80003758:	80 00       	ld.sh	r0,r0[0x0]
8000375a:	33 70       	mov	r0,55
8000375c:	80 00       	ld.sh	r0,r0[0x0]
8000375e:	33 a4       	mov	r4,58

80003760 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003760:	f8 08 16 05 	lsr	r8,r12,0x5
80003764:	a9 68       	lsl	r8,0x8
80003766:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000376a:	58 1b       	cp.w	r11,1
8000376c:	c0 d0       	breq	80003786 <gpio_enable_module_pin+0x26>
8000376e:	c0 63       	brcs	8000377a <gpio_enable_module_pin+0x1a>
80003770:	58 2b       	cp.w	r11,2
80003772:	c1 00       	breq	80003792 <gpio_enable_module_pin+0x32>
80003774:	58 3b       	cp.w	r11,3
80003776:	c1 40       	breq	8000379e <gpio_enable_module_pin+0x3e>
80003778:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000377a:	30 19       	mov	r9,1
8000377c:	f2 0c 09 49 	lsl	r9,r9,r12
80003780:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003782:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003784:	c1 28       	rjmp	800037a8 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003786:	30 19       	mov	r9,1
80003788:	f2 0c 09 49 	lsl	r9,r9,r12
8000378c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000378e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003790:	c0 c8       	rjmp	800037a8 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003792:	30 19       	mov	r9,1
80003794:	f2 0c 09 49 	lsl	r9,r9,r12
80003798:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000379a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000379c:	c0 68       	rjmp	800037a8 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000379e:	30 19       	mov	r9,1
800037a0:	f2 0c 09 49 	lsl	r9,r9,r12
800037a4:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800037a6:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800037a8:	30 19       	mov	r9,1
800037aa:	f2 0c 09 4c 	lsl	r12,r9,r12
800037ae:	91 2c       	st.w	r8[0x8],r12
800037b0:	5e fd       	retal	0
800037b2:	d7 03       	nop

800037b4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800037b4:	d4 21       	pushm	r4-r7,lr
800037b6:	18 97       	mov	r7,r12
800037b8:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800037ba:	58 0b       	cp.w	r11,0
800037bc:	c0 31       	brne	800037c2 <gpio_enable_module+0xe>
800037be:	30 05       	mov	r5,0
800037c0:	c0 d8       	rjmp	800037da <gpio_enable_module+0x26>
800037c2:	30 06       	mov	r6,0
800037c4:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800037c6:	6e 1b       	ld.w	r11,r7[0x4]
800037c8:	6e 0c       	ld.w	r12,r7[0x0]
800037ca:	f0 1f 00 06 	mcall	800037e0 <gpio_enable_module+0x2c>
800037ce:	18 45       	or	r5,r12
		gpiomap++;
800037d0:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800037d2:	2f f6       	sub	r6,-1
800037d4:	0c 34       	cp.w	r4,r6
800037d6:	fe 9b ff f8 	brhi	800037c6 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800037da:	0a 9c       	mov	r12,r5
800037dc:	d8 22       	popm	r4-r7,pc
800037de:	00 00       	add	r0,r0
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	37 60       	mov	r0,118

800037e4 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800037e4:	f8 08 16 05 	lsr	r8,r12,0x5
800037e8:	a9 68       	lsl	r8,0x8
800037ea:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800037ee:	30 19       	mov	r9,1
800037f0:	f2 0c 09 4c 	lsl	r12,r9,r12
800037f4:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800037f8:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800037fc:	91 1c       	st.w	r8[0x4],r12
}
800037fe:	5e fc       	retal	r12

80003800 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003800:	f8 08 16 05 	lsr	r8,r12,0x5
80003804:	a9 68       	lsl	r8,0x8
80003806:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000380a:	30 19       	mov	r9,1
8000380c:	f2 0c 09 4c 	lsl	r12,r9,r12
80003810:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003814:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003818:	91 1c       	st.w	r8[0x4],r12
}
8000381a:	5e fc       	retal	r12

8000381c <gpio_enable_pin_glitch_filter>:
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000381c:	f8 08 16 05 	lsr	r8,r12,0x5
80003820:	a9 68       	lsl	r8,0x8
80003822:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80003826:	30 19       	mov	r9,1
80003828:	f2 0c 09 4c 	lsl	r12,r9,r12
8000382c:	f1 4c 00 c4 	st.w	r8[196],r12
}
80003830:	5e fc       	retal	r12

80003832 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003832:	f8 08 16 05 	lsr	r8,r12,0x5
80003836:	a9 68       	lsl	r8,0x8
80003838:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000383c:	30 19       	mov	r9,1
8000383e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003842:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
80003846:	12 3b       	cp.w	r11,r9
80003848:	c0 a0       	breq	8000385c <gpio_enable_pin_interrupt+0x2a>
8000384a:	c0 43       	brcs	80003852 <gpio_enable_pin_interrupt+0x20>
8000384c:	58 2b       	cp.w	r11,2
8000384e:	c1 11       	brne	80003870 <gpio_enable_pin_interrupt+0x3e>
80003850:	c0 b8       	rjmp	80003866 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80003852:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80003856:	f1 4c 00 b8 	st.w	r8[184],r12
8000385a:	c0 c8       	rjmp	80003872 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000385c:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
80003860:	f1 4c 00 b8 	st.w	r8[184],r12
80003864:	c0 78       	rjmp	80003872 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80003866:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000386a:	f1 4c 00 b4 	st.w	r8[180],r12
8000386e:	c0 28       	rjmp	80003872 <gpio_enable_pin_interrupt+0x40>
80003870:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80003872:	f1 4c 00 94 	st.w	r8[148],r12
80003876:	5e fd       	retal	0

80003878 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003878:	f8 08 16 05 	lsr	r8,r12,0x5
8000387c:	a9 68       	lsl	r8,0x8
8000387e:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80003882:	30 19       	mov	r9,1
80003884:	f2 0c 09 4c 	lsl	r12,r9,r12
80003888:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
8000388c:	5e fc       	retal	r12

8000388e <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000388e:	c0 08       	rjmp	8000388e <_unhandled_interrupt>

80003890 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003890:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003894:	49 99       	lddpc	r9,800038f8 <INTC_register_interrupt+0x68>
80003896:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000389a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000389e:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800038a0:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800038a4:	58 0a       	cp.w	r10,0
800038a6:	c0 91       	brne	800038b8 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800038a8:	49 59       	lddpc	r9,800038fc <INTC_register_interrupt+0x6c>
800038aa:	49 6a       	lddpc	r10,80003900 <INTC_register_interrupt+0x70>
800038ac:	12 1a       	sub	r10,r9
800038ae:	fe 79 08 00 	mov	r9,-63488
800038b2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800038b6:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800038b8:	58 1a       	cp.w	r10,1
800038ba:	c0 a1       	brne	800038ce <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800038bc:	49 09       	lddpc	r9,800038fc <INTC_register_interrupt+0x6c>
800038be:	49 2a       	lddpc	r10,80003904 <INTC_register_interrupt+0x74>
800038c0:	12 1a       	sub	r10,r9
800038c2:	bf aa       	sbr	r10,0x1e
800038c4:	fe 79 08 00 	mov	r9,-63488
800038c8:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800038cc:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800038ce:	58 2a       	cp.w	r10,2
800038d0:	c0 a1       	brne	800038e4 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800038d2:	48 b9       	lddpc	r9,800038fc <INTC_register_interrupt+0x6c>
800038d4:	48 da       	lddpc	r10,80003908 <INTC_register_interrupt+0x78>
800038d6:	12 1a       	sub	r10,r9
800038d8:	bf ba       	sbr	r10,0x1f
800038da:	fe 79 08 00 	mov	r9,-63488
800038de:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800038e2:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800038e4:	48 69       	lddpc	r9,800038fc <INTC_register_interrupt+0x6c>
800038e6:	48 aa       	lddpc	r10,8000390c <INTC_register_interrupt+0x7c>
800038e8:	12 1a       	sub	r10,r9
800038ea:	ea 1a c0 00 	orh	r10,0xc000
800038ee:	fe 79 08 00 	mov	r9,-63488
800038f2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800038f6:	5e fc       	retal	r12
800038f8:	80 00       	ld.sh	r0,r0[0x0]
800038fa:	9b 34       	st.w	sp[0xc],r4
800038fc:	80 00       	ld.sh	r0,r0[0x0]
800038fe:	98 00       	ld.sh	r0,r12[0x0]
80003900:	80 00       	ld.sh	r0,r0[0x0]
80003902:	99 04       	st.w	r12[0x0],r4
80003904:	80 00       	ld.sh	r0,r0[0x0]
80003906:	99 12       	st.w	r12[0x4],r2
80003908:	80 00       	ld.sh	r0,r0[0x0]
8000390a:	99 20       	st.w	r12[0x8],r0
8000390c:	80 00       	ld.sh	r0,r0[0x0]
8000390e:	99 2e       	st.w	r12[0x8],lr

80003910 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003910:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003912:	49 18       	lddpc	r8,80003954 <INTC_init_interrupts+0x44>
80003914:	e3 b8 00 01 	mtsr	0x4,r8
80003918:	49 0e       	lddpc	lr,80003958 <INTC_init_interrupts+0x48>
8000391a:	30 07       	mov	r7,0
8000391c:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000391e:	49 0c       	lddpc	r12,8000395c <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003920:	49 05       	lddpc	r5,80003960 <INTC_init_interrupts+0x50>
80003922:	10 15       	sub	r5,r8
80003924:	fe 76 08 00 	mov	r6,-63488
80003928:	c1 08       	rjmp	80003948 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000392a:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000392c:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000392e:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003930:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003934:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003936:	10 3a       	cp.w	r10,r8
80003938:	fe 9b ff fc 	brhi	80003930 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000393c:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003940:	2f f7       	sub	r7,-1
80003942:	2f 8e       	sub	lr,-8
80003944:	59 47       	cp.w	r7,20
80003946:	c0 50       	breq	80003950 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003948:	7c 08       	ld.w	r8,lr[0x0]
8000394a:	58 08       	cp.w	r8,0
8000394c:	ce f1       	brne	8000392a <INTC_init_interrupts+0x1a>
8000394e:	cf 7b       	rjmp	8000393c <INTC_init_interrupts+0x2c>
80003950:	d8 22       	popm	r4-r7,pc
80003952:	00 00       	add	r0,r0
80003954:	80 00       	ld.sh	r0,r0[0x0]
80003956:	98 00       	ld.sh	r0,r12[0x0]
80003958:	80 00       	ld.sh	r0,r0[0x0]
8000395a:	9b 34       	st.w	sp[0xc],r4
8000395c:	80 00       	ld.sh	r0,r0[0x0]
8000395e:	38 8e       	mov	lr,-120
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	99 04       	st.w	r12[0x0],r4

80003964 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003964:	fe 78 08 00 	mov	r8,-63488
80003968:	e0 69 00 83 	mov	r9,131
8000396c:	f2 0c 01 0c 	sub	r12,r9,r12
80003970:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003974:	f2 ca ff c0 	sub	r10,r9,-64
80003978:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000397c:	58 08       	cp.w	r8,0
8000397e:	c0 21       	brne	80003982 <_get_interrupt_handler+0x1e>
80003980:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003982:	f0 08 12 00 	clz	r8,r8
80003986:	48 5a       	lddpc	r10,80003998 <_get_interrupt_handler+0x34>
80003988:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000398c:	f0 08 11 1f 	rsub	r8,r8,31
80003990:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003992:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003996:	5e fc       	retal	r12
80003998:	80 00       	ld.sh	r0,r0[0x0]
8000399a:	9b 34       	st.w	sp[0xc],r4

8000399c <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000399c:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000399e:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800039a2:	99 a8       	st.w	r12[0x28],r8
}
800039a4:	5e fc       	retal	r12
800039a6:	d7 03       	nop

800039a8 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800039a8:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800039aa:	ec 5b bb 9f 	cp.w	r11,899999
800039ae:	e0 8b 00 04 	brhi	800039b6 <pm_enable_osc0_crystal+0xe>
800039b2:	30 4b       	mov	r11,4
800039b4:	c1 38       	rjmp	800039da <pm_enable_osc0_crystal+0x32>
800039b6:	e0 68 c6 bf 	mov	r8,50879
800039ba:	ea 18 00 2d 	orh	r8,0x2d
800039be:	10 3b       	cp.w	r11,r8
800039c0:	e0 8b 00 04 	brhi	800039c8 <pm_enable_osc0_crystal+0x20>
800039c4:	30 5b       	mov	r11,5
800039c6:	c0 a8       	rjmp	800039da <pm_enable_osc0_crystal+0x32>
800039c8:	e0 68 12 00 	mov	r8,4608
800039cc:	ea 18 00 7a 	orh	r8,0x7a
800039d0:	10 3b       	cp.w	r11,r8
800039d2:	f9 bb 03 06 	movlo	r11,6
800039d6:	f9 bb 02 07 	movhs	r11,7
800039da:	f0 1f 00 02 	mcall	800039e0 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800039de:	d8 02       	popm	pc
800039e0:	80 00       	ld.sh	r0,r0[0x0]
800039e2:	39 9c       	mov	r12,-103

800039e4 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800039e4:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800039e6:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800039ea:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800039ec:	78 08       	ld.w	r8,r12[0x0]
800039ee:	a3 a8       	sbr	r8,0x2
800039f0:	99 08       	st.w	r12[0x0],r8
}
800039f2:	5e fc       	retal	r12

800039f4 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800039f4:	79 58       	ld.w	r8,r12[0x54]
800039f6:	e2 18 00 80 	andl	r8,0x80,COH
800039fa:	cf d0       	breq	800039f4 <pm_wait_for_clk0_ready>
}
800039fc:	5e fc       	retal	r12
800039fe:	d7 03       	nop

80003a00 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80003a00:	eb cd 40 80 	pushm	r7,lr
80003a04:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80003a06:	f0 1f 00 04 	mcall	80003a14 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80003a0a:	0e 9c       	mov	r12,r7
80003a0c:	f0 1f 00 03 	mcall	80003a18 <pm_enable_clk0+0x18>
}
80003a10:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a14:	80 00       	ld.sh	r0,r0[0x0]
80003a16:	39 e4       	mov	r4,-98
80003a18:	80 00       	ld.sh	r0,r0[0x0]
80003a1a:	39 f4       	mov	r4,-97

80003a1c <pm_set_osc32_mode>:
 * \param mode 32-kHz oscillator mode (i.e. AVR32_PM_OSCCTRL32_MODE_x).
 */
static void pm_set_osc32_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
80003a1c:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.mode = mode;
80003a1e:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
80003a22:	99 c8       	st.w	r12[0x30],r8
}
80003a24:	5e fc       	retal	r12
80003a26:	d7 03       	nop

80003a28 <pm_enable_osc32_crystal>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_EXT_CLOCK);
}


void pm_enable_osc32_crystal(volatile avr32_pm_t *pm)
{
80003a28:	d4 01       	pushm	lr
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
80003a2a:	30 1b       	mov	r11,1
80003a2c:	f0 1f 00 02 	mcall	80003a34 <pm_enable_osc32_crystal+0xc>
}
80003a30:	d8 02       	popm	pc
80003a32:	00 00       	add	r0,r0
80003a34:	80 00       	ld.sh	r0,r0[0x0]
80003a36:	3a 1c       	mov	r12,-95

80003a38 <pm_enable_clk32_no_wait>:


void pm_enable_clk32_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
80003a38:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.osc32en = 1;
80003a3a:	30 19       	mov	r9,1
80003a3c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_pm_oscctrl32.OSCCTRL32.startup = startup;
80003a40:	f1 db d2 03 	bfins	r8,r11,0x10,0x3
  // Write back
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
80003a44:	99 c8       	st.w	r12[0x30],r8
}
80003a46:	5e fc       	retal	r12

80003a48 <pm_wait_for_clk32_ready>:


void pm_wait_for_clk32_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC32RDY_MASK));
80003a48:	79 58       	ld.w	r8,r12[0x54]
80003a4a:	e2 18 02 00 	andl	r8,0x200,COH
80003a4e:	cf d0       	breq	80003a48 <pm_wait_for_clk32_ready>
}
80003a50:	5e fc       	retal	r12
80003a52:	d7 03       	nop

80003a54 <pm_enable_clk32>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
}


void pm_enable_clk32(volatile avr32_pm_t *pm, unsigned int startup)
{
80003a54:	eb cd 40 80 	pushm	r7,lr
80003a58:	18 97       	mov	r7,r12
  pm_enable_clk32_no_wait(pm, startup);
80003a5a:	f0 1f 00 04 	mcall	80003a68 <pm_enable_clk32+0x14>
  pm_wait_for_clk32_ready(pm);
80003a5e:	0e 9c       	mov	r12,r7
80003a60:	f0 1f 00 03 	mcall	80003a6c <pm_enable_clk32+0x18>
}
80003a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	3a 38       	mov	r8,-93
80003a6c:	80 00       	ld.sh	r0,r0[0x0]
80003a6e:	3a 48       	mov	r8,-92

80003a70 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003a70:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003a72:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80003a76:	99 08       	st.w	r12[0x0],r8
}
80003a78:	5e fc       	retal	r12
80003a7a:	d7 03       	nop

80003a7c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80003a80:	18 97       	mov	r7,r12
80003a82:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003a84:	f0 1f 00 06 	mcall	80003a9c <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003a88:	0c 9b       	mov	r11,r6
80003a8a:	0e 9c       	mov	r12,r7
80003a8c:	f0 1f 00 05 	mcall	80003aa0 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003a90:	30 1b       	mov	r11,1
80003a92:	0e 9c       	mov	r12,r7
80003a94:	f0 1f 00 04 	mcall	80003aa4 <pm_switch_to_osc0+0x28>
}
80003a98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a9c:	80 00       	ld.sh	r0,r0[0x0]
80003a9e:	39 a8       	mov	r8,-102
80003aa0:	80 00       	ld.sh	r0,r0[0x0]
80003aa2:	3a 00       	mov	r0,-96
80003aa4:	80 00       	ld.sh	r0,r0[0x0]
80003aa6:	3a 70       	mov	r0,-89

80003aa8 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003aa8:	58 0b       	cp.w	r11,0
80003aaa:	c1 90       	breq	80003adc <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003aac:	58 6c       	cp.w	r12,6
80003aae:	e0 8b 00 17 	brhi	80003adc <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003ab2:	76 0a       	ld.w	r10,r11[0x0]
80003ab4:	fe 78 30 00 	mov	r8,-53248
80003ab8:	f8 c9 ff f0 	sub	r9,r12,-16
80003abc:	a5 79       	lsl	r9,0x5
80003abe:	f0 09 00 09 	add	r9,r8,r9
80003ac2:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003ac4:	76 19       	ld.w	r9,r11[0x4]
80003ac6:	a5 7c       	lsl	r12,0x5
80003ac8:	f0 0c 00 0c 	add	r12,r8,r12
80003acc:	f8 c8 fd fc 	sub	r8,r12,-516
80003ad0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003ad2:	76 28       	ld.w	r8,r11[0x8]
80003ad4:	f8 cc fd f8 	sub	r12,r12,-520
80003ad8:	99 08       	st.w	r12[0x0],r8
80003ada:	5e fd       	retal	0

  return PWM_SUCCESS;
80003adc:	5e ff       	retal	1

80003ade <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003ade:	18 98       	mov	r8,r12
80003ae0:	e0 18 ff 80 	andl	r8,0xff80
80003ae4:	c0 20       	breq	80003ae8 <pwm_start_channels+0xa>
80003ae6:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003ae8:	fe 78 30 00 	mov	r8,-53248
80003aec:	91 1c       	st.w	r8[0x4],r12
80003aee:	5e fd       	retal	0

80003af0 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003af0:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80003af4:	58 0c       	cp.w	r12,0
80003af6:	c0 21       	brne	80003afa <pwm_init+0xa>
80003af8:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003afa:	e6 18 00 01 	andh	r8,0x1,COH
80003afe:	c0 91       	brne	80003b10 <pwm_init+0x20>
80003b00:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003b02:	fe 78 30 00 	mov	r8,-53248
80003b06:	37 f9       	mov	r9,127
80003b08:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003b0a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003b0c:	d5 03       	csrf	0x10
80003b0e:	c0 68       	rjmp	80003b1a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003b10:	fe 78 30 00 	mov	r8,-53248
80003b14:	37 f9       	mov	r9,127
80003b16:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003b18:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003b1a:	78 08       	ld.w	r8,r12[0x0]
80003b1c:	78 39       	ld.w	r9,r12[0xc]
80003b1e:	a9 69       	lsl	r9,0x8
80003b20:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003b24:	78 18       	ld.w	r8,r12[0x4]
80003b26:	10 49       	or	r9,r8
80003b28:	78 28       	ld.w	r8,r12[0x8]
80003b2a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80003b2e:	fe 78 30 00 	mov	r8,-53248
80003b32:	91 09       	st.w	r8[0x0],r9
80003b34:	5e fd       	retal	0

80003b36 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003b36:	f8 c8 00 01 	sub	r8,r12,1
80003b3a:	f0 0b 00 0b 	add	r11,r8,r11
80003b3e:	f6 0c 0d 0a 	divu	r10,r11,r12
80003b42:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003b44:	f4 c8 00 01 	sub	r8,r10,1
80003b48:	e0 48 00 fe 	cp.w	r8,254
80003b4c:	e0 88 00 03 	brls	80003b52 <getBaudDiv+0x1c>
80003b50:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003b52:	5c 8c       	casts.h	r12
}
80003b54:	5e fc       	retal	r12

80003b56 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003b56:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003b5a:	30 18       	mov	r8,1
80003b5c:	f0 09 18 00 	cp.b	r9,r8
80003b60:	e0 88 00 04 	brls	80003b68 <spi_initMaster+0x12>
80003b64:	30 2c       	mov	r12,2
80003b66:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003b68:	e0 68 00 80 	mov	r8,128
80003b6c:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003b6e:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003b70:	30 19       	mov	r9,1
80003b72:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003b76:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003b7a:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003b7e:	30 09       	mov	r9,0
80003b80:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003b84:	30 fa       	mov	r10,15
80003b86:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003b8a:	99 18       	st.w	r12[0x4],r8
80003b8c:	5e f9       	retal	r9

80003b8e <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003b8e:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003b90:	30 18       	mov	r8,1
80003b92:	f0 0b 18 00 	cp.b	r11,r8
80003b96:	5f be       	srhi	lr
80003b98:	f0 0a 18 00 	cp.b	r10,r8
80003b9c:	5f b8       	srhi	r8
80003b9e:	fd e8 10 08 	or	r8,lr,r8
80003ba2:	c0 30       	breq	80003ba8 <spi_selectionMode+0x1a>
80003ba4:	30 2c       	mov	r12,2
80003ba6:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003ba8:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003baa:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003bae:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003bb2:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003bb6:	99 18       	st.w	r12[0x4],r8
80003bb8:	d8 0a       	popm	pc,r12=0

80003bba <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003bba:	78 18       	ld.w	r8,r12[0x4]
80003bbc:	ea 18 00 0f 	orh	r8,0xf
80003bc0:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003bc2:	78 18       	ld.w	r8,r12[0x4]
80003bc4:	e2 18 00 04 	andl	r8,0x4,COH
80003bc8:	c0 f0       	breq	80003be6 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003bca:	30 e8       	mov	r8,14
80003bcc:	f0 0b 18 00 	cp.b	r11,r8
80003bd0:	e0 8b 00 19 	brhi	80003c02 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003bd4:	78 18       	ld.w	r8,r12[0x4]
80003bd6:	b1 6b       	lsl	r11,0x10
80003bd8:	ea 1b ff f0 	orh	r11,0xfff0
80003bdc:	e8 1b ff ff 	orl	r11,0xffff
80003be0:	10 6b       	and	r11,r8
80003be2:	99 1b       	st.w	r12[0x4],r11
80003be4:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003be6:	30 38       	mov	r8,3
80003be8:	f0 0b 18 00 	cp.b	r11,r8
80003bec:	e0 8b 00 0b 	brhi	80003c02 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003bf0:	78 18       	ld.w	r8,r12[0x4]
80003bf2:	2f 0b       	sub	r11,-16
80003bf4:	30 19       	mov	r9,1
80003bf6:	f2 0b 09 4b 	lsl	r11,r9,r11
80003bfa:	5c db       	com	r11
80003bfc:	10 6b       	and	r11,r8
80003bfe:	99 1b       	st.w	r12[0x4],r11
80003c00:	5e fd       	retal	0
80003c02:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003c04:	5e fc       	retal	r12

80003c06 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003c06:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003c0a:	c0 58       	rjmp	80003c14 <spi_unselectChip+0xe>
		if (!timeout--) {
80003c0c:	58 08       	cp.w	r8,0
80003c0e:	c0 21       	brne	80003c12 <spi_unselectChip+0xc>
80003c10:	5e ff       	retal	1
80003c12:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003c14:	78 49       	ld.w	r9,r12[0x10]
80003c16:	e2 19 02 00 	andl	r9,0x200,COH
80003c1a:	cf 90       	breq	80003c0c <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003c1c:	78 18       	ld.w	r8,r12[0x4]
80003c1e:	ea 18 00 0f 	orh	r8,0xf
80003c22:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003c24:	fc 18 01 00 	movh	r8,0x100
80003c28:	99 08       	st.w	r12[0x0],r8
80003c2a:	5e fd       	retal	0

80003c2c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003c2c:	eb cd 40 f8 	pushm	r3-r7,lr
80003c30:	18 95       	mov	r5,r12
80003c32:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003c34:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003c38:	30 38       	mov	r8,3
80003c3a:	f0 06 18 00 	cp.b	r6,r8
80003c3e:	e0 8b 00 4d 	brhi	80003cd8 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003c42:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003c46:	30 18       	mov	r8,1
80003c48:	f0 04 18 00 	cp.b	r4,r8
80003c4c:	e0 8b 00 46 	brhi	80003cd8 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003c50:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003c54:	30 78       	mov	r8,7
80003c56:	f0 03 18 00 	cp.b	r3,r8
80003c5a:	e0 88 00 3f 	brls	80003cd8 <spi_setupChipReg+0xac>
80003c5e:	31 08       	mov	r8,16
80003c60:	f0 03 18 00 	cp.b	r3,r8
80003c64:	e0 8b 00 3a 	brhi	80003cd8 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003c68:	14 9b       	mov	r11,r10
80003c6a:	6e 1c       	ld.w	r12,r7[0x4]
80003c6c:	f0 1f 00 1d 	mcall	80003ce0 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003c70:	c3 45       	brlt	80003cd8 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003c72:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003c74:	ec 09 16 01 	lsr	r9,r6,0x1
80003c78:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003c7c:	ec 16 00 01 	eorl	r6,0x1
80003c80:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003c84:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003c88:	20 83       	sub	r3,8
80003c8a:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003c8e:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003c92:	ef 39 00 09 	ld.ub	r9,r7[9]
80003c96:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003c9a:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003c9e:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003ca2:	0f 89       	ld.ub	r9,r7[0x0]
80003ca4:	30 1a       	mov	r10,1
80003ca6:	f4 09 18 00 	cp.b	r9,r10
80003caa:	c0 e0       	breq	80003cc6 <spi_setupChipReg+0x9a>
80003cac:	c0 a3       	brcs	80003cc0 <spi_setupChipReg+0x94>
80003cae:	30 2a       	mov	r10,2
80003cb0:	f4 09 18 00 	cp.b	r9,r10
80003cb4:	c0 c0       	breq	80003ccc <spi_setupChipReg+0xa0>
80003cb6:	30 3a       	mov	r10,3
80003cb8:	f4 09 18 00 	cp.b	r9,r10
80003cbc:	c0 e1       	brne	80003cd8 <spi_setupChipReg+0xac>
80003cbe:	c0 a8       	rjmp	80003cd2 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003cc0:	8b c8       	st.w	r5[0x30],r8
80003cc2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003cc6:	8b d8       	st.w	r5[0x34],r8
80003cc8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003ccc:	8b e8       	st.w	r5[0x38],r8
80003cce:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003cd2:	8b f8       	st.w	r5[0x3c],r8
80003cd4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003cd8:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003cda:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003cde:	00 00       	add	r0,r0
80003ce0:	80 00       	ld.sh	r0,r0[0x0]
80003ce2:	3b 36       	mov	r6,-77

80003ce4 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003ce4:	30 18       	mov	r8,1
80003ce6:	99 08       	st.w	r12[0x0],r8
}
80003ce8:	5e fc       	retal	r12

80003cea <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003cea:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003cee:	c0 58       	rjmp	80003cf8 <spi_write+0xe>
		if (!timeout--) {
80003cf0:	58 08       	cp.w	r8,0
80003cf2:	c0 21       	brne	80003cf6 <spi_write+0xc>
80003cf4:	5e ff       	retal	1
80003cf6:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003cf8:	78 49       	ld.w	r9,r12[0x10]
80003cfa:	e2 19 00 02 	andl	r9,0x2,COH
80003cfe:	cf 90       	breq	80003cf0 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003d00:	5c 7b       	castu.h	r11
80003d02:	99 3b       	st.w	r12[0xc],r11
80003d04:	5e fd       	retal	0

80003d06 <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80003d06:	78 4c       	ld.w	r12,r12[0x10]
}
80003d08:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003d0c:	5e fc       	retal	r12

80003d0e <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003d0e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003d12:	c0 58       	rjmp	80003d1c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003d14:	58 08       	cp.w	r8,0
80003d16:	c0 21       	brne	80003d1a <spi_read+0xc>
80003d18:	5e ff       	retal	1
80003d1a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003d1c:	78 49       	ld.w	r9,r12[0x10]
80003d1e:	e2 19 02 01 	andl	r9,0x201,COH
80003d22:	e0 49 02 01 	cp.w	r9,513
80003d26:	cf 71       	brne	80003d14 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003d28:	78 28       	ld.w	r8,r12[0x8]
80003d2a:	b6 08       	st.h	r11[0x0],r8
80003d2c:	5e fd       	retal	0
80003d2e:	d7 03       	nop

80003d30 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003d30:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003d34:	fe c0 a5 34 	sub	r0,pc,-23244

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003d38:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003d3c:	d5 53       	csrf	0x15
  cp      r0, r1
80003d3e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003d40:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003d44:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003d46:	c0 72       	brcc	80003d54 <idata_load_loop_end>
  cp      r0, r1
80003d48:	fe c2 9b e8 	sub	r2,pc,-25624

80003d4c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003d4c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003d4e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003d50:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003d52:	cf d3       	brcs	80003d4c <idata_load_loop>

80003d54 <idata_load_loop_end>:
  mov     r2, 0
80003d54:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003d58:	e0 61 08 58 	mov	r1,2136
  cp      r0, r1
  brlo    udata_clear_loop
80003d5c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003d5e:	c0 62       	brcc	80003d6a <udata_clear_loop_end>
80003d60:	30 02       	mov	r2,0
80003d62:	30 03       	mov	r3,0

80003d64 <udata_clear_loop>:
80003d64:	a1 22       	st.d	r0++,r2
80003d66:	02 30       	cp.w	r0,r1
80003d68:	cf e3       	brcs	80003d64 <udata_clear_loop>

80003d6a <udata_clear_loop_end>:
80003d6a:	fe cf 0d 06 	sub	pc,pc,3334
80003d6e:	d7 03       	nop

80003d70 <__avr32_f64_mul>:
80003d70:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003d74:	e0 80 00 dc 	breq	80003f2c <__avr32_f64_mul_op1_zero>
80003d78:	d4 21       	pushm	r4-r7,lr
80003d7a:	f7 e9 20 0e 	eor	lr,r11,r9
80003d7e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003d82:	30 15       	mov	r5,1
80003d84:	c4 30       	breq	80003e0a <__avr32_f64_mul_op1_subnormal>
80003d86:	ab 6b       	lsl	r11,0xa
80003d88:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003d8c:	ab 6a       	lsl	r10,0xa
80003d8e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003d92:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003d96:	c5 c0       	breq	80003e4e <__avr32_f64_mul_op2_subnormal>
80003d98:	a1 78       	lsl	r8,0x1
80003d9a:	5c f9       	rol	r9
80003d9c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003da0:	e0 47 07 ff 	cp.w	r7,2047
80003da4:	c7 70       	breq	80003e92 <__avr32_f64_mul_op_nan_or_inf>
80003da6:	e0 46 07 ff 	cp.w	r6,2047
80003daa:	c7 40       	breq	80003e92 <__avr32_f64_mul_op_nan_or_inf>
80003dac:	ee 06 00 0c 	add	r12,r7,r6
80003db0:	e0 2c 03 fe 	sub	r12,1022
80003db4:	f6 08 06 44 	mulu.d	r4,r11,r8
80003db8:	f4 09 07 44 	macu.d	r4,r10,r9
80003dbc:	f4 08 06 46 	mulu.d	r6,r10,r8
80003dc0:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003dc4:	08 07       	add	r7,r4
80003dc6:	f4 05 00 4a 	adc	r10,r10,r5
80003dca:	5c 0b       	acr	r11
80003dcc:	ed bb 00 14 	bld	r11,0x14
80003dd0:	c0 50       	breq	80003dda <__avr32_f64_mul+0x6a>
80003dd2:	a1 77       	lsl	r7,0x1
80003dd4:	5c fa       	rol	r10
80003dd6:	5c fb       	rol	r11
80003dd8:	20 1c       	sub	r12,1
80003dda:	58 0c       	cp.w	r12,0
80003ddc:	e0 8a 00 6f 	brle	80003eba <__avr32_f64_mul_res_subnormal>
80003de0:	e0 4c 07 ff 	cp.w	r12,2047
80003de4:	e0 84 00 9c 	brge	80003f1c <__avr32_f64_mul_res_inf>
80003de8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003dec:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003df0:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003df4:	ee 17 80 00 	eorh	r7,0x8000
80003df8:	f1 b7 04 20 	satu	r7,0x1
80003dfc:	0e 0a       	add	r10,r7
80003dfe:	5c 0b       	acr	r11
80003e00:	ed be 00 1f 	bld	lr,0x1f
80003e04:	ef bb 00 1f 	bst	r11,0x1f
80003e08:	d8 22       	popm	r4-r7,pc

80003e0a <__avr32_f64_mul_op1_subnormal>:
80003e0a:	e4 1b 00 0f 	andh	r11,0xf
80003e0e:	f4 0c 12 00 	clz	r12,r10
80003e12:	f6 06 12 00 	clz	r6,r11
80003e16:	f7 bc 03 e1 	sublo	r12,-31
80003e1a:	f8 06 17 30 	movlo	r6,r12
80003e1e:	f7 b6 02 01 	subhs	r6,1
80003e22:	e0 46 00 20 	cp.w	r6,32
80003e26:	c0 d4       	brge	80003e40 <__avr32_f64_mul_op1_subnormal+0x36>
80003e28:	ec 0c 11 20 	rsub	r12,r6,32
80003e2c:	f6 06 09 4b 	lsl	r11,r11,r6
80003e30:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003e34:	18 4b       	or	r11,r12
80003e36:	f4 06 09 4a 	lsl	r10,r10,r6
80003e3a:	20 b6       	sub	r6,11
80003e3c:	0c 17       	sub	r7,r6
80003e3e:	ca ab       	rjmp	80003d92 <__avr32_f64_mul+0x22>
80003e40:	f4 06 09 4b 	lsl	r11,r10,r6
80003e44:	c6 40       	breq	80003f0c <__avr32_f64_mul_res_zero>
80003e46:	30 0a       	mov	r10,0
80003e48:	20 b6       	sub	r6,11
80003e4a:	0c 17       	sub	r7,r6
80003e4c:	ca 3b       	rjmp	80003d92 <__avr32_f64_mul+0x22>

80003e4e <__avr32_f64_mul_op2_subnormal>:
80003e4e:	e4 19 00 0f 	andh	r9,0xf
80003e52:	f0 0c 12 00 	clz	r12,r8
80003e56:	f2 05 12 00 	clz	r5,r9
80003e5a:	f7 bc 03 ea 	sublo	r12,-22
80003e5e:	f8 05 17 30 	movlo	r5,r12
80003e62:	f7 b5 02 0a 	subhs	r5,10
80003e66:	e0 45 00 20 	cp.w	r5,32
80003e6a:	c0 d4       	brge	80003e84 <__avr32_f64_mul_op2_subnormal+0x36>
80003e6c:	ea 0c 11 20 	rsub	r12,r5,32
80003e70:	f2 05 09 49 	lsl	r9,r9,r5
80003e74:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003e78:	18 49       	or	r9,r12
80003e7a:	f0 05 09 48 	lsl	r8,r8,r5
80003e7e:	20 25       	sub	r5,2
80003e80:	0a 16       	sub	r6,r5
80003e82:	c8 fb       	rjmp	80003da0 <__avr32_f64_mul+0x30>
80003e84:	f0 05 09 49 	lsl	r9,r8,r5
80003e88:	c4 20       	breq	80003f0c <__avr32_f64_mul_res_zero>
80003e8a:	30 08       	mov	r8,0
80003e8c:	20 25       	sub	r5,2
80003e8e:	0a 16       	sub	r6,r5
80003e90:	c8 8b       	rjmp	80003da0 <__avr32_f64_mul+0x30>

80003e92 <__avr32_f64_mul_op_nan_or_inf>:
80003e92:	e4 19 00 0f 	andh	r9,0xf
80003e96:	e4 1b 00 0f 	andh	r11,0xf
80003e9a:	14 4b       	or	r11,r10
80003e9c:	10 49       	or	r9,r8
80003e9e:	e0 47 07 ff 	cp.w	r7,2047
80003ea2:	c0 91       	brne	80003eb4 <__avr32_f64_mul_op1_not_naninf>
80003ea4:	58 0b       	cp.w	r11,0
80003ea6:	c3 81       	brne	80003f16 <__avr32_f64_mul_res_nan>
80003ea8:	e0 46 07 ff 	cp.w	r6,2047
80003eac:	c3 81       	brne	80003f1c <__avr32_f64_mul_res_inf>
80003eae:	58 09       	cp.w	r9,0
80003eb0:	c3 60       	breq	80003f1c <__avr32_f64_mul_res_inf>
80003eb2:	c3 28       	rjmp	80003f16 <__avr32_f64_mul_res_nan>

80003eb4 <__avr32_f64_mul_op1_not_naninf>:
80003eb4:	58 09       	cp.w	r9,0
80003eb6:	c3 30       	breq	80003f1c <__avr32_f64_mul_res_inf>
80003eb8:	c2 f8       	rjmp	80003f16 <__avr32_f64_mul_res_nan>

80003eba <__avr32_f64_mul_res_subnormal>:
80003eba:	5c 3c       	neg	r12
80003ebc:	2f fc       	sub	r12,-1
80003ebe:	f1 bc 04 c0 	satu	r12,0x6
80003ec2:	e0 4c 00 20 	cp.w	r12,32
80003ec6:	c1 14       	brge	80003ee8 <__avr32_f64_mul_res_subnormal+0x2e>
80003ec8:	f8 08 11 20 	rsub	r8,r12,32
80003ecc:	0e 46       	or	r6,r7
80003ece:	ee 0c 0a 47 	lsr	r7,r7,r12
80003ed2:	f4 08 09 49 	lsl	r9,r10,r8
80003ed6:	12 47       	or	r7,r9
80003ed8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003edc:	f6 08 09 49 	lsl	r9,r11,r8
80003ee0:	12 4a       	or	r10,r9
80003ee2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003ee6:	c8 3b       	rjmp	80003dec <__avr32_f64_mul+0x7c>
80003ee8:	f8 08 11 20 	rsub	r8,r12,32
80003eec:	f9 b9 00 00 	moveq	r9,0
80003ef0:	c0 30       	breq	80003ef6 <__avr32_f64_mul_res_subnormal+0x3c>
80003ef2:	f6 08 09 49 	lsl	r9,r11,r8
80003ef6:	0e 46       	or	r6,r7
80003ef8:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003efc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003f00:	f3 ea 10 07 	or	r7,r9,r10
80003f04:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003f08:	30 0b       	mov	r11,0
80003f0a:	c7 1b       	rjmp	80003dec <__avr32_f64_mul+0x7c>

80003f0c <__avr32_f64_mul_res_zero>:
80003f0c:	1c 9b       	mov	r11,lr
80003f0e:	e6 1b 80 00 	andh	r11,0x8000,COH
80003f12:	30 0a       	mov	r10,0
80003f14:	d8 22       	popm	r4-r7,pc

80003f16 <__avr32_f64_mul_res_nan>:
80003f16:	3f fb       	mov	r11,-1
80003f18:	3f fa       	mov	r10,-1
80003f1a:	d8 22       	popm	r4-r7,pc

80003f1c <__avr32_f64_mul_res_inf>:
80003f1c:	f0 6b 00 00 	mov	r11,-1048576
80003f20:	ed be 00 1f 	bld	lr,0x1f
80003f24:	ef bb 00 1f 	bst	r11,0x1f
80003f28:	30 0a       	mov	r10,0
80003f2a:	d8 22       	popm	r4-r7,pc

80003f2c <__avr32_f64_mul_op1_zero>:
80003f2c:	f7 e9 20 0b 	eor	r11,r11,r9
80003f30:	e6 1b 80 00 	andh	r11,0x8000,COH
80003f34:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003f38:	e0 4c 07 ff 	cp.w	r12,2047
80003f3c:	5e 1c       	retne	r12
80003f3e:	3f fa       	mov	r10,-1
80003f40:	3f fb       	mov	r11,-1
80003f42:	5e fc       	retal	r12

80003f44 <__avr32_u32_to_f64>:
80003f44:	f8 cb 00 00 	sub	r11,r12,0
80003f48:	30 0c       	mov	r12,0
80003f4a:	c0 38       	rjmp	80003f50 <__avr32_s32_to_f64+0x4>

80003f4c <__avr32_s32_to_f64>:
80003f4c:	18 9b       	mov	r11,r12
80003f4e:	5c 4b       	abs	r11
80003f50:	30 0a       	mov	r10,0
80003f52:	5e 0b       	reteq	r11
80003f54:	d4 01       	pushm	lr
80003f56:	e0 69 04 1e 	mov	r9,1054
80003f5a:	f6 08 12 00 	clz	r8,r11
80003f5e:	c1 70       	breq	80003f8c <__avr32_s32_to_f64+0x40>
80003f60:	c0 c3       	brcs	80003f78 <__avr32_s32_to_f64+0x2c>
80003f62:	f0 0e 11 20 	rsub	lr,r8,32
80003f66:	f6 08 09 4b 	lsl	r11,r11,r8
80003f6a:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003f6e:	1c 4b       	or	r11,lr
80003f70:	f4 08 09 4a 	lsl	r10,r10,r8
80003f74:	10 19       	sub	r9,r8
80003f76:	c0 b8       	rjmp	80003f8c <__avr32_s32_to_f64+0x40>
80003f78:	f4 08 12 00 	clz	r8,r10
80003f7c:	f9 b8 03 00 	movlo	r8,0
80003f80:	f7 b8 02 e0 	subhs	r8,-32
80003f84:	f4 08 09 4b 	lsl	r11,r10,r8
80003f88:	30 0a       	mov	r10,0
80003f8a:	10 19       	sub	r9,r8
80003f8c:	58 09       	cp.w	r9,0
80003f8e:	e0 89 00 30 	brgt	80003fee <__avr32_s32_to_f64+0xa2>
80003f92:	5c 39       	neg	r9
80003f94:	2f f9       	sub	r9,-1
80003f96:	e0 49 00 36 	cp.w	r9,54
80003f9a:	c0 43       	brcs	80003fa2 <__avr32_s32_to_f64+0x56>
80003f9c:	30 0b       	mov	r11,0
80003f9e:	30 0a       	mov	r10,0
80003fa0:	c2 68       	rjmp	80003fec <__avr32_s32_to_f64+0xa0>
80003fa2:	2f 69       	sub	r9,-10
80003fa4:	f2 08 11 20 	rsub	r8,r9,32
80003fa8:	e0 49 00 20 	cp.w	r9,32
80003fac:	c0 b2       	brcc	80003fc2 <__avr32_s32_to_f64+0x76>
80003fae:	f4 08 09 4e 	lsl	lr,r10,r8
80003fb2:	f6 08 09 48 	lsl	r8,r11,r8
80003fb6:	f4 09 0a 4a 	lsr	r10,r10,r9
80003fba:	f6 09 0a 4b 	lsr	r11,r11,r9
80003fbe:	10 4b       	or	r11,r8
80003fc0:	c0 88       	rjmp	80003fd0 <__avr32_s32_to_f64+0x84>
80003fc2:	f6 08 09 4e 	lsl	lr,r11,r8
80003fc6:	14 4e       	or	lr,r10
80003fc8:	16 9a       	mov	r10,r11
80003fca:	30 0b       	mov	r11,0
80003fcc:	f4 09 0a 4a 	lsr	r10,r10,r9
80003fd0:	ed ba 00 00 	bld	r10,0x0
80003fd4:	c0 92       	brcc	80003fe6 <__avr32_s32_to_f64+0x9a>
80003fd6:	1c 7e       	tst	lr,lr
80003fd8:	c0 41       	brne	80003fe0 <__avr32_s32_to_f64+0x94>
80003fda:	ed ba 00 01 	bld	r10,0x1
80003fde:	c0 42       	brcc	80003fe6 <__avr32_s32_to_f64+0x9a>
80003fe0:	2f fa       	sub	r10,-1
80003fe2:	f7 bb 02 ff 	subhs	r11,-1
80003fe6:	5c fc       	rol	r12
80003fe8:	5d 0b       	ror	r11
80003fea:	5d 0a       	ror	r10
80003fec:	d8 02       	popm	pc
80003fee:	e0 68 03 ff 	mov	r8,1023
80003ff2:	ed ba 00 0b 	bld	r10,0xb
80003ff6:	f7 b8 00 ff 	subeq	r8,-1
80003ffa:	10 0a       	add	r10,r8
80003ffc:	5c 0b       	acr	r11
80003ffe:	f7 b9 03 fe 	sublo	r9,-2
80004002:	e0 49 07 ff 	cp.w	r9,2047
80004006:	c0 55       	brlt	80004010 <__avr32_s32_to_f64+0xc4>
80004008:	30 0a       	mov	r10,0
8000400a:	fc 1b ff e0 	movh	r11,0xffe0
8000400e:	c0 c8       	rjmp	80004026 <__floatsidf_return_op1>
80004010:	ed bb 00 1f 	bld	r11,0x1f
80004014:	f7 b9 01 01 	subne	r9,1
80004018:	ab 9a       	lsr	r10,0xb
8000401a:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000401e:	a1 7b       	lsl	r11,0x1
80004020:	ab 9b       	lsr	r11,0xb
80004022:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80004026 <__floatsidf_return_op1>:
80004026:	a1 7c       	lsl	r12,0x1
80004028:	5d 0b       	ror	r11
8000402a:	d8 02       	popm	pc

8000402c <__avr32_f64_cmp_lt>:
8000402c:	1a de       	st.w	--sp,lr
8000402e:	1a d7       	st.w	--sp,r7
80004030:	a1 7b       	lsl	r11,0x1
80004032:	5f 3c       	srlo	r12
80004034:	a1 79       	lsl	r9,0x1
80004036:	5f 37       	srlo	r7
80004038:	5c fc       	rol	r12
8000403a:	fc 1e ff e0 	movh	lr,0xffe0
8000403e:	58 0a       	cp.w	r10,0
80004040:	fc 0b 13 00 	cpc	r11,lr
80004044:	e0 8b 00 1d 	brhi	8000407e <__avr32_f64_cmp_lt+0x52>
80004048:	58 08       	cp.w	r8,0
8000404a:	fc 09 13 00 	cpc	r9,lr
8000404e:	e0 8b 00 18 	brhi	8000407e <__avr32_f64_cmp_lt+0x52>
80004052:	58 0b       	cp.w	r11,0
80004054:	f5 ba 00 00 	subfeq	r10,0
80004058:	c1 50       	breq	80004082 <__avr32_f64_cmp_lt+0x56>
8000405a:	1b 07       	ld.w	r7,sp++
8000405c:	1b 0e       	ld.w	lr,sp++
8000405e:	58 3c       	cp.w	r12,3
80004060:	c0 a0       	breq	80004074 <__avr32_f64_cmp_lt+0x48>
80004062:	58 1c       	cp.w	r12,1
80004064:	c0 33       	brcs	8000406a <__avr32_f64_cmp_lt+0x3e>
80004066:	5e 0d       	reteq	0
80004068:	5e 1f       	retne	1
8000406a:	10 3a       	cp.w	r10,r8
8000406c:	f2 0b 13 00 	cpc	r11,r9
80004070:	5e 2d       	reths	0
80004072:	5e 3f       	retlo	1
80004074:	14 38       	cp.w	r8,r10
80004076:	f6 09 13 00 	cpc	r9,r11
8000407a:	5e 2d       	reths	0
8000407c:	5e 3f       	retlo	1
8000407e:	1b 07       	ld.w	r7,sp++
80004080:	d8 0a       	popm	pc,r12=0
80004082:	58 17       	cp.w	r7,1
80004084:	5f 1c       	srne	r12
80004086:	58 09       	cp.w	r9,0
80004088:	f5 b8 00 00 	subfeq	r8,0
8000408c:	1b 07       	ld.w	r7,sp++
8000408e:	1b 0e       	ld.w	lr,sp++
80004090:	5e 0d       	reteq	0
80004092:	5e fc       	retal	r12

80004094 <memcpy>:
80004094:	58 8a       	cp.w	r10,8
80004096:	c2 f5       	brlt	800040f4 <memcpy+0x60>
80004098:	f9 eb 10 09 	or	r9,r12,r11
8000409c:	e2 19 00 03 	andl	r9,0x3,COH
800040a0:	e0 81 00 97 	brne	800041ce <memcpy+0x13a>
800040a4:	e0 4a 00 20 	cp.w	r10,32
800040a8:	c3 b4       	brge	8000411e <memcpy+0x8a>
800040aa:	f4 08 14 02 	asr	r8,r10,0x2
800040ae:	f0 09 11 08 	rsub	r9,r8,8
800040b2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800040b6:	76 69       	ld.w	r9,r11[0x18]
800040b8:	99 69       	st.w	r12[0x18],r9
800040ba:	76 59       	ld.w	r9,r11[0x14]
800040bc:	99 59       	st.w	r12[0x14],r9
800040be:	76 49       	ld.w	r9,r11[0x10]
800040c0:	99 49       	st.w	r12[0x10],r9
800040c2:	76 39       	ld.w	r9,r11[0xc]
800040c4:	99 39       	st.w	r12[0xc],r9
800040c6:	76 29       	ld.w	r9,r11[0x8]
800040c8:	99 29       	st.w	r12[0x8],r9
800040ca:	76 19       	ld.w	r9,r11[0x4]
800040cc:	99 19       	st.w	r12[0x4],r9
800040ce:	76 09       	ld.w	r9,r11[0x0]
800040d0:	99 09       	st.w	r12[0x0],r9
800040d2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800040d6:	f8 08 00 28 	add	r8,r12,r8<<0x2
800040da:	e0 1a 00 03 	andl	r10,0x3
800040de:	f4 0a 11 04 	rsub	r10,r10,4
800040e2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800040e6:	17 a9       	ld.ub	r9,r11[0x2]
800040e8:	b0 a9       	st.b	r8[0x2],r9
800040ea:	17 99       	ld.ub	r9,r11[0x1]
800040ec:	b0 99       	st.b	r8[0x1],r9
800040ee:	17 89       	ld.ub	r9,r11[0x0]
800040f0:	b0 89       	st.b	r8[0x0],r9
800040f2:	5e fc       	retal	r12
800040f4:	f4 0a 11 09 	rsub	r10,r10,9
800040f8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800040fc:	17 f9       	ld.ub	r9,r11[0x7]
800040fe:	b8 f9       	st.b	r12[0x7],r9
80004100:	17 e9       	ld.ub	r9,r11[0x6]
80004102:	b8 e9       	st.b	r12[0x6],r9
80004104:	17 d9       	ld.ub	r9,r11[0x5]
80004106:	b8 d9       	st.b	r12[0x5],r9
80004108:	17 c9       	ld.ub	r9,r11[0x4]
8000410a:	b8 c9       	st.b	r12[0x4],r9
8000410c:	17 b9       	ld.ub	r9,r11[0x3]
8000410e:	b8 b9       	st.b	r12[0x3],r9
80004110:	17 a9       	ld.ub	r9,r11[0x2]
80004112:	b8 a9       	st.b	r12[0x2],r9
80004114:	17 99       	ld.ub	r9,r11[0x1]
80004116:	b8 99       	st.b	r12[0x1],r9
80004118:	17 89       	ld.ub	r9,r11[0x0]
8000411a:	b8 89       	st.b	r12[0x0],r9
8000411c:	5e fc       	retal	r12
8000411e:	eb cd 40 c0 	pushm	r6-r7,lr
80004122:	18 99       	mov	r9,r12
80004124:	22 0a       	sub	r10,32
80004126:	b7 07       	ld.d	r6,r11++
80004128:	b3 26       	st.d	r9++,r6
8000412a:	b7 07       	ld.d	r6,r11++
8000412c:	b3 26       	st.d	r9++,r6
8000412e:	b7 07       	ld.d	r6,r11++
80004130:	b3 26       	st.d	r9++,r6
80004132:	b7 07       	ld.d	r6,r11++
80004134:	b3 26       	st.d	r9++,r6
80004136:	22 0a       	sub	r10,32
80004138:	cf 74       	brge	80004126 <memcpy+0x92>
8000413a:	2f 0a       	sub	r10,-16
8000413c:	c0 65       	brlt	80004148 <memcpy+0xb4>
8000413e:	b7 07       	ld.d	r6,r11++
80004140:	b3 26       	st.d	r9++,r6
80004142:	b7 07       	ld.d	r6,r11++
80004144:	b3 26       	st.d	r9++,r6
80004146:	21 0a       	sub	r10,16
80004148:	5c 3a       	neg	r10
8000414a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000414e:	d7 03       	nop
80004150:	d7 03       	nop
80004152:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004156:	f3 66 00 0e 	st.b	r9[14],r6
8000415a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000415e:	f3 66 00 0d 	st.b	r9[13],r6
80004162:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004166:	f3 66 00 0c 	st.b	r9[12],r6
8000416a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000416e:	f3 66 00 0b 	st.b	r9[11],r6
80004172:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004176:	f3 66 00 0a 	st.b	r9[10],r6
8000417a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000417e:	f3 66 00 09 	st.b	r9[9],r6
80004182:	f7 36 00 08 	ld.ub	r6,r11[8]
80004186:	f3 66 00 08 	st.b	r9[8],r6
8000418a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000418e:	f3 66 00 07 	st.b	r9[7],r6
80004192:	f7 36 00 06 	ld.ub	r6,r11[6]
80004196:	f3 66 00 06 	st.b	r9[6],r6
8000419a:	f7 36 00 05 	ld.ub	r6,r11[5]
8000419e:	f3 66 00 05 	st.b	r9[5],r6
800041a2:	f7 36 00 04 	ld.ub	r6,r11[4]
800041a6:	f3 66 00 04 	st.b	r9[4],r6
800041aa:	f7 36 00 03 	ld.ub	r6,r11[3]
800041ae:	f3 66 00 03 	st.b	r9[3],r6
800041b2:	f7 36 00 02 	ld.ub	r6,r11[2]
800041b6:	f3 66 00 02 	st.b	r9[2],r6
800041ba:	f7 36 00 01 	ld.ub	r6,r11[1]
800041be:	f3 66 00 01 	st.b	r9[1],r6
800041c2:	f7 36 00 00 	ld.ub	r6,r11[0]
800041c6:	f3 66 00 00 	st.b	r9[0],r6
800041ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800041ce:	20 1a       	sub	r10,1
800041d0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800041d4:	f8 0a 0b 09 	st.b	r12[r10],r9
800041d8:	cf b1       	brne	800041ce <memcpy+0x13a>
800041da:	5e fc       	retal	r12

800041dc <_vsprintf_r>:
800041dc:	d4 01       	pushm	lr
800041de:	21 7d       	sub	sp,92
800041e0:	e0 68 ff ff 	mov	r8,65535
800041e4:	ea 18 7f ff 	orh	r8,0x7fff
800041e8:	50 58       	stdsp	sp[0x14],r8
800041ea:	50 28       	stdsp	sp[0x8],r8
800041ec:	e0 68 02 08 	mov	r8,520
800041f0:	ba 68       	st.h	sp[0xc],r8
800041f2:	3f f8       	mov	r8,-1
800041f4:	50 4b       	stdsp	sp[0x10],r11
800041f6:	50 0b       	stdsp	sp[0x0],r11
800041f8:	ba 78       	st.h	sp[0xe],r8
800041fa:	1a 9b       	mov	r11,sp
800041fc:	ca 8d       	rcall	8000454c <_vfprintf_r>
800041fe:	30 09       	mov	r9,0
80004200:	40 08       	lddsp	r8,sp[0x0]
80004202:	b0 89       	st.b	r8[0x0],r9
80004204:	2e 9d       	sub	sp,-92
80004206:	d8 02       	popm	pc

80004208 <vsprintf>:
80004208:	d4 01       	pushm	lr
8000420a:	e0 68 01 04 	mov	r8,260
8000420e:	14 99       	mov	r9,r10
80004210:	16 9a       	mov	r10,r11
80004212:	18 9b       	mov	r11,r12
80004214:	70 0c       	ld.w	r12,r8[0x0]
80004216:	ce 3f       	rcall	800041dc <_vsprintf_r>
80004218:	d8 02       	popm	pc
8000421a:	d7 03       	nop

8000421c <get_arg>:
8000421c:	d4 31       	pushm	r0-r7,lr
8000421e:	20 8d       	sub	sp,32
80004220:	fa c4 ff bc 	sub	r4,sp,-68
80004224:	50 4b       	stdsp	sp[0x10],r11
80004226:	68 2e       	ld.w	lr,r4[0x8]
80004228:	50 58       	stdsp	sp[0x14],r8
8000422a:	12 96       	mov	r6,r9
8000422c:	7c 0b       	ld.w	r11,lr[0x0]
8000422e:	70 05       	ld.w	r5,r8[0x0]
80004230:	50 6e       	stdsp	sp[0x18],lr
80004232:	58 0b       	cp.w	r11,0
80004234:	f4 0b 17 00 	moveq	r11,r10
80004238:	68 03       	ld.w	r3,r4[0x0]
8000423a:	68 11       	ld.w	r1,r4[0x4]
8000423c:	40 49       	lddsp	r9,sp[0x10]
8000423e:	30 08       	mov	r8,0
80004240:	c2 89       	rjmp	80004490 <get_arg+0x274>
80004242:	2f fb       	sub	r11,-1
80004244:	32 5c       	mov	r12,37
80004246:	17 8a       	ld.ub	r10,r11[0x0]
80004248:	f8 0a 18 00 	cp.b	r10,r12
8000424c:	5f 1e       	srne	lr
8000424e:	f0 0a 18 00 	cp.b	r10,r8
80004252:	5f 1c       	srne	r12
80004254:	fd ec 00 0c 	and	r12,lr,r12
80004258:	f0 0c 18 00 	cp.b	r12,r8
8000425c:	cf 31       	brne	80004242 <get_arg+0x26>
8000425e:	58 0a       	cp.w	r10,0
80004260:	e0 80 01 25 	breq	800044aa <get_arg+0x28e>
80004264:	30 0c       	mov	r12,0
80004266:	3f fa       	mov	r10,-1
80004268:	18 90       	mov	r0,r12
8000426a:	50 3a       	stdsp	sp[0xc],r10
8000426c:	18 94       	mov	r4,r12
8000426e:	18 92       	mov	r2,r12
80004270:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004274:	16 97       	mov	r7,r11
80004276:	50 7c       	stdsp	sp[0x1c],r12
80004278:	fe cc a3 c8 	sub	r12,pc,-23608
8000427c:	0f 3a       	ld.ub	r10,r7++
8000427e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004282:	40 7c       	lddsp	r12,sp[0x1c]
80004284:	1c 0c       	add	r12,lr
80004286:	fe ce a4 9e 	sub	lr,pc,-23394
8000428a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000428e:	20 1e       	sub	lr,1
80004290:	50 0e       	stdsp	sp[0x0],lr
80004292:	fe ce a5 16 	sub	lr,pc,-23274
80004296:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000429a:	50 7c       	stdsp	sp[0x1c],r12
8000429c:	40 0c       	lddsp	r12,sp[0x0]
8000429e:	58 7c       	cp.w	r12,7
800042a0:	e0 8b 00 f1 	brhi	80004482 <get_arg+0x266>
800042a4:	fe ce a6 c8 	sub	lr,pc,-22840
800042a8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800042ac:	36 8b       	mov	r11,104
800042ae:	f6 0a 18 00 	cp.b	r10,r11
800042b2:	e0 80 00 e8 	breq	80004482 <get_arg+0x266>
800042b6:	37 1b       	mov	r11,113
800042b8:	f6 0a 18 00 	cp.b	r10,r11
800042bc:	c0 70       	breq	800042ca <get_arg+0xae>
800042be:	34 cb       	mov	r11,76
800042c0:	f6 0a 18 00 	cp.b	r10,r11
800042c4:	c0 51       	brne	800042ce <get_arg+0xb2>
800042c6:	a3 b4       	sbr	r4,0x3
800042c8:	cd d8       	rjmp	80004482 <get_arg+0x266>
800042ca:	a5 b4       	sbr	r4,0x5
800042cc:	cd b8       	rjmp	80004482 <get_arg+0x266>
800042ce:	08 9a       	mov	r10,r4
800042d0:	0e 9b       	mov	r11,r7
800042d2:	a5 aa       	sbr	r10,0x4
800042d4:	17 3c       	ld.ub	r12,r11++
800042d6:	a5 b4       	sbr	r4,0x5
800042d8:	36 ce       	mov	lr,108
800042da:	fc 0c 18 00 	cp.b	r12,lr
800042de:	e0 80 00 d3 	breq	80004484 <get_arg+0x268>
800042e2:	14 94       	mov	r4,r10
800042e4:	cc f8       	rjmp	80004482 <get_arg+0x266>
800042e6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800042ea:	36 7c       	mov	r12,103
800042ec:	f8 0a 18 00 	cp.b	r10,r12
800042f0:	e0 8b 00 27 	brhi	8000433e <get_arg+0x122>
800042f4:	36 5b       	mov	r11,101
800042f6:	f6 0a 18 00 	cp.b	r10,r11
800042fa:	c4 82       	brcc	8000438a <get_arg+0x16e>
800042fc:	34 fb       	mov	r11,79
800042fe:	f6 0a 18 00 	cp.b	r10,r11
80004302:	c4 80       	breq	80004392 <get_arg+0x176>
80004304:	e0 8b 00 0c 	brhi	8000431c <get_arg+0x100>
80004308:	34 5b       	mov	r11,69
8000430a:	f6 0a 18 00 	cp.b	r10,r11
8000430e:	c3 e0       	breq	8000438a <get_arg+0x16e>
80004310:	34 7b       	mov	r11,71
80004312:	f6 0a 18 00 	cp.b	r10,r11
80004316:	c3 a0       	breq	8000438a <get_arg+0x16e>
80004318:	34 4b       	mov	r11,68
8000431a:	c0 88       	rjmp	8000432a <get_arg+0x10e>
8000431c:	35 8b       	mov	r11,88
8000431e:	f6 0a 18 00 	cp.b	r10,r11
80004322:	c2 c0       	breq	8000437a <get_arg+0x15e>
80004324:	e0 8b 00 07 	brhi	80004332 <get_arg+0x116>
80004328:	35 5b       	mov	r11,85
8000432a:	f6 0a 18 00 	cp.b	r10,r11
8000432e:	c3 51       	brne	80004398 <get_arg+0x17c>
80004330:	c3 18       	rjmp	80004392 <get_arg+0x176>
80004332:	36 3b       	mov	r11,99
80004334:	f6 0a 18 00 	cp.b	r10,r11
80004338:	c2 f0       	breq	80004396 <get_arg+0x17a>
8000433a:	36 4b       	mov	r11,100
8000433c:	c0 e8       	rjmp	80004358 <get_arg+0x13c>
8000433e:	37 0b       	mov	r11,112
80004340:	f6 0a 18 00 	cp.b	r10,r11
80004344:	c2 50       	breq	8000438e <get_arg+0x172>
80004346:	e0 8b 00 0d 	brhi	80004360 <get_arg+0x144>
8000434a:	36 eb       	mov	r11,110
8000434c:	f6 0a 18 00 	cp.b	r10,r11
80004350:	c1 f0       	breq	8000438e <get_arg+0x172>
80004352:	e0 8b 00 14 	brhi	8000437a <get_arg+0x15e>
80004356:	36 9b       	mov	r11,105
80004358:	f6 0a 18 00 	cp.b	r10,r11
8000435c:	c1 e1       	brne	80004398 <get_arg+0x17c>
8000435e:	c0 e8       	rjmp	8000437a <get_arg+0x15e>
80004360:	37 5b       	mov	r11,117
80004362:	f6 0a 18 00 	cp.b	r10,r11
80004366:	c0 a0       	breq	8000437a <get_arg+0x15e>
80004368:	37 8b       	mov	r11,120
8000436a:	f6 0a 18 00 	cp.b	r10,r11
8000436e:	c0 60       	breq	8000437a <get_arg+0x15e>
80004370:	37 3b       	mov	r11,115
80004372:	f6 0a 18 00 	cp.b	r10,r11
80004376:	c1 11       	brne	80004398 <get_arg+0x17c>
80004378:	c0 b8       	rjmp	8000438e <get_arg+0x172>
8000437a:	ed b4 00 04 	bld	r4,0x4
8000437e:	c0 a0       	breq	80004392 <get_arg+0x176>
80004380:	ed b4 00 05 	bld	r4,0x5
80004384:	c0 91       	brne	80004396 <get_arg+0x17a>
80004386:	30 20       	mov	r0,2
80004388:	c0 88       	rjmp	80004398 <get_arg+0x17c>
8000438a:	30 40       	mov	r0,4
8000438c:	c0 68       	rjmp	80004398 <get_arg+0x17c>
8000438e:	30 30       	mov	r0,3
80004390:	c0 48       	rjmp	80004398 <get_arg+0x17c>
80004392:	30 10       	mov	r0,1
80004394:	c0 28       	rjmp	80004398 <get_arg+0x17c>
80004396:	30 00       	mov	r0,0
80004398:	40 3b       	lddsp	r11,sp[0xc]
8000439a:	5b fb       	cp.w	r11,-1
8000439c:	c0 40       	breq	800043a4 <get_arg+0x188>
8000439e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800043a2:	c7 08       	rjmp	80004482 <get_arg+0x266>
800043a4:	58 60       	cp.w	r0,6
800043a6:	e0 8b 00 6e 	brhi	80004482 <get_arg+0x266>
800043aa:	6c 0a       	ld.w	r10,r6[0x0]
800043ac:	ea cc ff ff 	sub	r12,r5,-1
800043b0:	fe ce a7 b4 	sub	lr,pc,-22604
800043b4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800043b8:	f4 cb ff f8 	sub	r11,r10,-8
800043bc:	8d 0b       	st.w	r6[0x0],r11
800043be:	f4 ea 00 00 	ld.d	r10,r10[0]
800043c2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800043c6:	c0 f8       	rjmp	800043e4 <get_arg+0x1c8>
800043c8:	f4 cb ff fc 	sub	r11,r10,-4
800043cc:	8d 0b       	st.w	r6[0x0],r11
800043ce:	74 0a       	ld.w	r10,r10[0x0]
800043d0:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800043d4:	c0 88       	rjmp	800043e4 <get_arg+0x1c8>
800043d6:	f4 cb ff f8 	sub	r11,r10,-8
800043da:	8d 0b       	st.w	r6[0x0],r11
800043dc:	f4 ea 00 00 	ld.d	r10,r10[0]
800043e0:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800043e4:	0e 9b       	mov	r11,r7
800043e6:	18 95       	mov	r5,r12
800043e8:	c4 e8       	rjmp	80004484 <get_arg+0x268>
800043ea:	62 0a       	ld.w	r10,r1[0x0]
800043ec:	5b fa       	cp.w	r10,-1
800043ee:	c0 b1       	brne	80004404 <get_arg+0x1e8>
800043f0:	50 19       	stdsp	sp[0x4],r9
800043f2:	50 28       	stdsp	sp[0x8],r8
800043f4:	e0 6a 00 80 	mov	r10,128
800043f8:	30 0b       	mov	r11,0
800043fa:	02 9c       	mov	r12,r1
800043fc:	e0 a0 1d 78 	rcall	80007eec <memset>
80004400:	40 28       	lddsp	r8,sp[0x8]
80004402:	40 19       	lddsp	r9,sp[0x4]
80004404:	e4 cc 00 01 	sub	r12,r2,1
80004408:	0e 9b       	mov	r11,r7
8000440a:	50 3c       	stdsp	sp[0xc],r12
8000440c:	f2 0c 0c 49 	max	r9,r9,r12
80004410:	c3 a8       	rjmp	80004484 <get_arg+0x268>
80004412:	62 0a       	ld.w	r10,r1[0x0]
80004414:	5b fa       	cp.w	r10,-1
80004416:	c0 b1       	brne	8000442c <get_arg+0x210>
80004418:	50 19       	stdsp	sp[0x4],r9
8000441a:	50 28       	stdsp	sp[0x8],r8
8000441c:	e0 6a 00 80 	mov	r10,128
80004420:	30 0b       	mov	r11,0
80004422:	02 9c       	mov	r12,r1
80004424:	e0 a0 1d 64 	rcall	80007eec <memset>
80004428:	40 28       	lddsp	r8,sp[0x8]
8000442a:	40 19       	lddsp	r9,sp[0x4]
8000442c:	20 12       	sub	r2,1
8000442e:	30 0a       	mov	r10,0
80004430:	0e 9b       	mov	r11,r7
80004432:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004436:	f2 02 0c 49 	max	r9,r9,r2
8000443a:	c2 58       	rjmp	80004484 <get_arg+0x268>
8000443c:	16 97       	mov	r7,r11
8000443e:	6c 0a       	ld.w	r10,r6[0x0]
80004440:	f4 cb ff fc 	sub	r11,r10,-4
80004444:	8d 0b       	st.w	r6[0x0],r11
80004446:	74 0a       	ld.w	r10,r10[0x0]
80004448:	0e 9b       	mov	r11,r7
8000444a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000444e:	2f f5       	sub	r5,-1
80004450:	c1 a8       	rjmp	80004484 <get_arg+0x268>
80004452:	f4 c2 00 30 	sub	r2,r10,48
80004456:	c0 68       	rjmp	80004462 <get_arg+0x246>
80004458:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000445c:	2f f7       	sub	r7,-1
8000445e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004462:	0f 8a       	ld.ub	r10,r7[0x0]
80004464:	58 0a       	cp.w	r10,0
80004466:	c0 e0       	breq	80004482 <get_arg+0x266>
80004468:	23 0a       	sub	r10,48
8000446a:	58 9a       	cp.w	r10,9
8000446c:	fe 98 ff f6 	brls	80004458 <get_arg+0x23c>
80004470:	c0 98       	rjmp	80004482 <get_arg+0x266>
80004472:	2f f7       	sub	r7,-1
80004474:	0f 8a       	ld.ub	r10,r7[0x0]
80004476:	58 0a       	cp.w	r10,0
80004478:	c0 50       	breq	80004482 <get_arg+0x266>
8000447a:	23 0a       	sub	r10,48
8000447c:	58 9a       	cp.w	r10,9
8000447e:	fe 98 ff fa 	brls	80004472 <get_arg+0x256>
80004482:	0e 9b       	mov	r11,r7
80004484:	40 7c       	lddsp	r12,sp[0x1c]
80004486:	30 ba       	mov	r10,11
80004488:	f4 0c 18 00 	cp.b	r12,r10
8000448c:	fe 91 fe f2 	brne	80004270 <get_arg+0x54>
80004490:	40 42       	lddsp	r2,sp[0x10]
80004492:	17 8c       	ld.ub	r12,r11[0x0]
80004494:	0a 32       	cp.w	r2,r5
80004496:	5f 4a       	srge	r10
80004498:	f0 0c 18 00 	cp.b	r12,r8
8000449c:	5f 1c       	srne	r12
8000449e:	f9 ea 00 0a 	and	r10,r12,r10
800044a2:	f0 0a 18 00 	cp.b	r10,r8
800044a6:	fe 91 fe cf 	brne	80004244 <get_arg+0x28>
800044aa:	30 08       	mov	r8,0
800044ac:	40 4e       	lddsp	lr,sp[0x10]
800044ae:	17 8a       	ld.ub	r10,r11[0x0]
800044b0:	e2 05 00 21 	add	r1,r1,r5<<0x2
800044b4:	f0 0a 18 00 	cp.b	r10,r8
800044b8:	fc 09 17 10 	movne	r9,lr
800044bc:	e6 05 00 38 	add	r8,r3,r5<<0x3
800044c0:	06 9e       	mov	lr,r3
800044c2:	c2 a8       	rjmp	80004516 <get_arg+0x2fa>
800044c4:	62 0a       	ld.w	r10,r1[0x0]
800044c6:	58 3a       	cp.w	r10,3
800044c8:	c1 e0       	breq	80004504 <get_arg+0x2e8>
800044ca:	e0 89 00 07 	brgt	800044d8 <get_arg+0x2bc>
800044ce:	58 1a       	cp.w	r10,1
800044d0:	c1 a0       	breq	80004504 <get_arg+0x2e8>
800044d2:	58 2a       	cp.w	r10,2
800044d4:	c1 81       	brne	80004504 <get_arg+0x2e8>
800044d6:	c0 58       	rjmp	800044e0 <get_arg+0x2c4>
800044d8:	58 5a       	cp.w	r10,5
800044da:	c0 c0       	breq	800044f2 <get_arg+0x2d6>
800044dc:	c0 b5       	brlt	800044f2 <get_arg+0x2d6>
800044de:	c1 38       	rjmp	80004504 <get_arg+0x2e8>
800044e0:	6c 0a       	ld.w	r10,r6[0x0]
800044e2:	f4 cc ff f8 	sub	r12,r10,-8
800044e6:	8d 0c       	st.w	r6[0x0],r12
800044e8:	f4 e2 00 00 	ld.d	r2,r10[0]
800044ec:	f0 e3 00 00 	st.d	r8[0],r2
800044f0:	c1 08       	rjmp	80004510 <get_arg+0x2f4>
800044f2:	6c 0a       	ld.w	r10,r6[0x0]
800044f4:	f4 cc ff f8 	sub	r12,r10,-8
800044f8:	8d 0c       	st.w	r6[0x0],r12
800044fa:	f4 e2 00 00 	ld.d	r2,r10[0]
800044fe:	f0 e3 00 00 	st.d	r8[0],r2
80004502:	c0 78       	rjmp	80004510 <get_arg+0x2f4>
80004504:	6c 0a       	ld.w	r10,r6[0x0]
80004506:	f4 cc ff fc 	sub	r12,r10,-4
8000450a:	8d 0c       	st.w	r6[0x0],r12
8000450c:	74 0a       	ld.w	r10,r10[0x0]
8000450e:	91 0a       	st.w	r8[0x0],r10
80004510:	2f f5       	sub	r5,-1
80004512:	2f 88       	sub	r8,-8
80004514:	2f c1       	sub	r1,-4
80004516:	12 35       	cp.w	r5,r9
80004518:	fe 9a ff d6 	brle	800044c4 <get_arg+0x2a8>
8000451c:	1c 93       	mov	r3,lr
8000451e:	40 52       	lddsp	r2,sp[0x14]
80004520:	40 6e       	lddsp	lr,sp[0x18]
80004522:	85 05       	st.w	r2[0x0],r5
80004524:	9d 0b       	st.w	lr[0x0],r11
80004526:	40 4b       	lddsp	r11,sp[0x10]
80004528:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000452c:	2f 8d       	sub	sp,-32
8000452e:	d8 32       	popm	r0-r7,pc

80004530 <__sprint_r>:
80004530:	d4 21       	pushm	r4-r7,lr
80004532:	14 97       	mov	r7,r10
80004534:	74 28       	ld.w	r8,r10[0x8]
80004536:	58 08       	cp.w	r8,0
80004538:	c0 41       	brne	80004540 <__sprint_r+0x10>
8000453a:	95 18       	st.w	r10[0x4],r8
8000453c:	10 9c       	mov	r12,r8
8000453e:	d8 22       	popm	r4-r7,pc
80004540:	e0 a0 18 b4 	rcall	800076a8 <__sfvwrite_r>
80004544:	30 08       	mov	r8,0
80004546:	8f 18       	st.w	r7[0x4],r8
80004548:	8f 28       	st.w	r7[0x8],r8
8000454a:	d8 22       	popm	r4-r7,pc

8000454c <_vfprintf_r>:
8000454c:	d4 31       	pushm	r0-r7,lr
8000454e:	fa cd 06 bc 	sub	sp,sp,1724
80004552:	51 09       	stdsp	sp[0x40],r9
80004554:	16 91       	mov	r1,r11
80004556:	14 97       	mov	r7,r10
80004558:	18 95       	mov	r5,r12
8000455a:	e0 a0 1a 1d 	rcall	80007994 <_localeconv_r>
8000455e:	78 0c       	ld.w	r12,r12[0x0]
80004560:	50 cc       	stdsp	sp[0x30],r12
80004562:	58 05       	cp.w	r5,0
80004564:	c0 70       	breq	80004572 <_vfprintf_r+0x26>
80004566:	6a 68       	ld.w	r8,r5[0x18]
80004568:	58 08       	cp.w	r8,0
8000456a:	c0 41       	brne	80004572 <_vfprintf_r+0x26>
8000456c:	0a 9c       	mov	r12,r5
8000456e:	e0 a0 17 3d 	rcall	800073e8 <__sinit>
80004572:	fe c8 a5 b2 	sub	r8,pc,-23118
80004576:	10 31       	cp.w	r1,r8
80004578:	c0 31       	brne	8000457e <_vfprintf_r+0x32>
8000457a:	6a 01       	ld.w	r1,r5[0x0]
8000457c:	c0 c8       	rjmp	80004594 <_vfprintf_r+0x48>
8000457e:	fe c8 a5 9e 	sub	r8,pc,-23138
80004582:	10 31       	cp.w	r1,r8
80004584:	c0 31       	brne	8000458a <_vfprintf_r+0x3e>
80004586:	6a 11       	ld.w	r1,r5[0x4]
80004588:	c0 68       	rjmp	80004594 <_vfprintf_r+0x48>
8000458a:	fe c8 a5 8a 	sub	r8,pc,-23158
8000458e:	10 31       	cp.w	r1,r8
80004590:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004594:	82 68       	ld.sh	r8,r1[0xc]
80004596:	ed b8 00 03 	bld	r8,0x3
8000459a:	c0 41       	brne	800045a2 <_vfprintf_r+0x56>
8000459c:	62 48       	ld.w	r8,r1[0x10]
8000459e:	58 08       	cp.w	r8,0
800045a0:	c0 71       	brne	800045ae <_vfprintf_r+0x62>
800045a2:	02 9b       	mov	r11,r1
800045a4:	0a 9c       	mov	r12,r5
800045a6:	e0 a0 0f 5d 	rcall	80006460 <__swsetup_r>
800045aa:	e0 81 0f 54 	brne	80006452 <_vfprintf_r+0x1f06>
800045ae:	82 68       	ld.sh	r8,r1[0xc]
800045b0:	10 99       	mov	r9,r8
800045b2:	e2 19 00 1a 	andl	r9,0x1a,COH
800045b6:	58 a9       	cp.w	r9,10
800045b8:	c3 c1       	brne	80004630 <_vfprintf_r+0xe4>
800045ba:	82 79       	ld.sh	r9,r1[0xe]
800045bc:	30 0a       	mov	r10,0
800045be:	f4 09 19 00 	cp.h	r9,r10
800045c2:	c3 75       	brlt	80004630 <_vfprintf_r+0xe4>
800045c4:	a1 d8       	cbr	r8,0x1
800045c6:	fb 58 05 d0 	st.h	sp[1488],r8
800045ca:	62 88       	ld.w	r8,r1[0x20]
800045cc:	fb 48 05 e4 	st.w	sp[1508],r8
800045d0:	62 a8       	ld.w	r8,r1[0x28]
800045d2:	fb 48 05 ec 	st.w	sp[1516],r8
800045d6:	fa c8 ff bc 	sub	r8,sp,-68
800045da:	fb 48 05 d4 	st.w	sp[1492],r8
800045de:	fb 48 05 c4 	st.w	sp[1476],r8
800045e2:	e0 68 04 00 	mov	r8,1024
800045e6:	fb 48 05 d8 	st.w	sp[1496],r8
800045ea:	fb 48 05 cc 	st.w	sp[1484],r8
800045ee:	30 08       	mov	r8,0
800045f0:	fb 59 05 d2 	st.h	sp[1490],r9
800045f4:	0e 9a       	mov	r10,r7
800045f6:	41 09       	lddsp	r9,sp[0x40]
800045f8:	fa c7 fa 3c 	sub	r7,sp,-1476
800045fc:	fb 48 05 dc 	st.w	sp[1500],r8
80004600:	0a 9c       	mov	r12,r5
80004602:	0e 9b       	mov	r11,r7
80004604:	ca 4f       	rcall	8000454c <_vfprintf_r>
80004606:	50 bc       	stdsp	sp[0x2c],r12
80004608:	c0 95       	brlt	8000461a <_vfprintf_r+0xce>
8000460a:	0e 9b       	mov	r11,r7
8000460c:	0a 9c       	mov	r12,r5
8000460e:	e0 a0 16 15 	rcall	80007238 <_fflush_r>
80004612:	40 be       	lddsp	lr,sp[0x2c]
80004614:	f9 be 01 ff 	movne	lr,-1
80004618:	50 be       	stdsp	sp[0x2c],lr
8000461a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000461e:	ed b8 00 06 	bld	r8,0x6
80004622:	e0 81 0f 1a 	brne	80006456 <_vfprintf_r+0x1f0a>
80004626:	82 68       	ld.sh	r8,r1[0xc]
80004628:	a7 a8       	sbr	r8,0x6
8000462a:	a2 68       	st.h	r1[0xc],r8
8000462c:	e0 8f 0f 15 	bral	80006456 <_vfprintf_r+0x1f0a>
80004630:	30 08       	mov	r8,0
80004632:	fb 48 06 b4 	st.w	sp[1716],r8
80004636:	fb 48 06 90 	st.w	sp[1680],r8
8000463a:	fb 48 06 8c 	st.w	sp[1676],r8
8000463e:	fb 48 06 b0 	st.w	sp[1712],r8
80004642:	30 08       	mov	r8,0
80004644:	30 09       	mov	r9,0
80004646:	50 a7       	stdsp	sp[0x28],r7
80004648:	50 78       	stdsp	sp[0x1c],r8
8000464a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000464e:	3f f8       	mov	r8,-1
80004650:	50 59       	stdsp	sp[0x14],r9
80004652:	fb 43 06 88 	st.w	sp[1672],r3
80004656:	fb 48 05 44 	st.w	sp[1348],r8
8000465a:	12 9c       	mov	r12,r9
8000465c:	50 69       	stdsp	sp[0x18],r9
8000465e:	50 d9       	stdsp	sp[0x34],r9
80004660:	50 e9       	stdsp	sp[0x38],r9
80004662:	50 b9       	stdsp	sp[0x2c],r9
80004664:	12 97       	mov	r7,r9
80004666:	0a 94       	mov	r4,r5
80004668:	40 a2       	lddsp	r2,sp[0x28]
8000466a:	32 5a       	mov	r10,37
8000466c:	30 08       	mov	r8,0
8000466e:	c0 28       	rjmp	80004672 <_vfprintf_r+0x126>
80004670:	2f f2       	sub	r2,-1
80004672:	05 89       	ld.ub	r9,r2[0x0]
80004674:	f0 09 18 00 	cp.b	r9,r8
80004678:	5f 1b       	srne	r11
8000467a:	f4 09 18 00 	cp.b	r9,r10
8000467e:	5f 19       	srne	r9
80004680:	f3 eb 00 0b 	and	r11,r9,r11
80004684:	f0 0b 18 00 	cp.b	r11,r8
80004688:	cf 41       	brne	80004670 <_vfprintf_r+0x124>
8000468a:	40 ab       	lddsp	r11,sp[0x28]
8000468c:	e4 0b 01 06 	sub	r6,r2,r11
80004690:	c1 e0       	breq	800046cc <_vfprintf_r+0x180>
80004692:	fa f8 06 90 	ld.w	r8,sp[1680]
80004696:	0c 08       	add	r8,r6
80004698:	87 0b       	st.w	r3[0x0],r11
8000469a:	fb 48 06 90 	st.w	sp[1680],r8
8000469e:	87 16       	st.w	r3[0x4],r6
800046a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800046a4:	2f f8       	sub	r8,-1
800046a6:	fb 48 06 8c 	st.w	sp[1676],r8
800046aa:	58 78       	cp.w	r8,7
800046ac:	e0 89 00 04 	brgt	800046b4 <_vfprintf_r+0x168>
800046b0:	2f 83       	sub	r3,-8
800046b2:	c0 a8       	rjmp	800046c6 <_vfprintf_r+0x17a>
800046b4:	fa ca f9 78 	sub	r10,sp,-1672
800046b8:	02 9b       	mov	r11,r1
800046ba:	08 9c       	mov	r12,r4
800046bc:	c3 af       	rcall	80004530 <__sprint_r>
800046be:	e0 81 0e c6 	brne	8000644a <_vfprintf_r+0x1efe>
800046c2:	fa c3 f9 e0 	sub	r3,sp,-1568
800046c6:	40 ba       	lddsp	r10,sp[0x2c]
800046c8:	0c 0a       	add	r10,r6
800046ca:	50 ba       	stdsp	sp[0x2c],r10
800046cc:	05 89       	ld.ub	r9,r2[0x0]
800046ce:	30 08       	mov	r8,0
800046d0:	f0 09 18 00 	cp.b	r9,r8
800046d4:	e0 80 0e aa 	breq	80006428 <_vfprintf_r+0x1edc>
800046d8:	30 09       	mov	r9,0
800046da:	fb 68 06 bb 	st.b	sp[1723],r8
800046de:	0e 96       	mov	r6,r7
800046e0:	e4 c8 ff ff 	sub	r8,r2,-1
800046e4:	3f fe       	mov	lr,-1
800046e6:	50 93       	stdsp	sp[0x24],r3
800046e8:	50 41       	stdsp	sp[0x10],r1
800046ea:	0e 93       	mov	r3,r7
800046ec:	04 91       	mov	r1,r2
800046ee:	50 89       	stdsp	sp[0x20],r9
800046f0:	50 a8       	stdsp	sp[0x28],r8
800046f2:	50 2e       	stdsp	sp[0x8],lr
800046f4:	50 39       	stdsp	sp[0xc],r9
800046f6:	12 95       	mov	r5,r9
800046f8:	12 90       	mov	r0,r9
800046fa:	10 97       	mov	r7,r8
800046fc:	08 92       	mov	r2,r4
800046fe:	c0 78       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004700:	3f fc       	mov	r12,-1
80004702:	08 97       	mov	r7,r4
80004704:	50 2c       	stdsp	sp[0x8],r12
80004706:	c0 38       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004708:	30 0b       	mov	r11,0
8000470a:	50 3b       	stdsp	sp[0xc],r11
8000470c:	0f 38       	ld.ub	r8,r7++
8000470e:	c0 28       	rjmp	80004712 <_vfprintf_r+0x1c6>
80004710:	12 90       	mov	r0,r9
80004712:	f0 c9 00 20 	sub	r9,r8,32
80004716:	e0 49 00 58 	cp.w	r9,88
8000471a:	e0 8b 0a 30 	brhi	80005b7a <_vfprintf_r+0x162e>
8000471e:	fe ca ab 06 	sub	r10,pc,-21754
80004722:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004726:	50 a7       	stdsp	sp[0x28],r7
80004728:	50 80       	stdsp	sp[0x20],r0
8000472a:	0c 97       	mov	r7,r6
8000472c:	04 94       	mov	r4,r2
8000472e:	06 96       	mov	r6,r3
80004730:	02 92       	mov	r2,r1
80004732:	fe c9 a8 de 	sub	r9,pc,-22306
80004736:	40 93       	lddsp	r3,sp[0x24]
80004738:	10 90       	mov	r0,r8
8000473a:	40 41       	lddsp	r1,sp[0x10]
8000473c:	50 d9       	stdsp	sp[0x34],r9
8000473e:	e0 8f 08 8e 	bral	8000585a <_vfprintf_r+0x130e>
80004742:	30 08       	mov	r8,0
80004744:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004748:	f0 09 18 00 	cp.b	r9,r8
8000474c:	ce 01       	brne	8000470c <_vfprintf_r+0x1c0>
8000474e:	32 08       	mov	r8,32
80004750:	c6 e8       	rjmp	8000482c <_vfprintf_r+0x2e0>
80004752:	a1 a5       	sbr	r5,0x0
80004754:	cd cb       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004756:	0f 89       	ld.ub	r9,r7[0x0]
80004758:	f2 c8 00 30 	sub	r8,r9,48
8000475c:	58 98       	cp.w	r8,9
8000475e:	e0 8b 00 1d 	brhi	80004798 <_vfprintf_r+0x24c>
80004762:	ee c8 ff ff 	sub	r8,r7,-1
80004766:	30 0b       	mov	r11,0
80004768:	23 09       	sub	r9,48
8000476a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000476e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004772:	11 39       	ld.ub	r9,r8++
80004774:	f2 ca 00 30 	sub	r10,r9,48
80004778:	58 9a       	cp.w	r10,9
8000477a:	fe 98 ff f7 	brls	80004768 <_vfprintf_r+0x21c>
8000477e:	e0 49 00 24 	cp.w	r9,36
80004782:	cc 31       	brne	80004708 <_vfprintf_r+0x1bc>
80004784:	e0 4b 00 20 	cp.w	r11,32
80004788:	e0 89 0e 60 	brgt	80006448 <_vfprintf_r+0x1efc>
8000478c:	20 1b       	sub	r11,1
8000478e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004792:	12 3b       	cp.w	r11,r9
80004794:	c0 95       	brlt	800047a6 <_vfprintf_r+0x25a>
80004796:	c1 08       	rjmp	800047b6 <_vfprintf_r+0x26a>
80004798:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000479c:	ec ca ff ff 	sub	r10,r6,-1
800047a0:	12 36       	cp.w	r6,r9
800047a2:	c1 f5       	brlt	800047e0 <_vfprintf_r+0x294>
800047a4:	c2 68       	rjmp	800047f0 <_vfprintf_r+0x2a4>
800047a6:	fa ce f9 44 	sub	lr,sp,-1724
800047aa:	10 97       	mov	r7,r8
800047ac:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800047b0:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800047b4:	c3 58       	rjmp	8000481e <_vfprintf_r+0x2d2>
800047b6:	10 97       	mov	r7,r8
800047b8:	fa c8 f9 50 	sub	r8,sp,-1712
800047bc:	1a d8       	st.w	--sp,r8
800047be:	fa c8 fa b8 	sub	r8,sp,-1352
800047c2:	1a d8       	st.w	--sp,r8
800047c4:	fa c8 fb b4 	sub	r8,sp,-1100
800047c8:	02 9a       	mov	r10,r1
800047ca:	1a d8       	st.w	--sp,r8
800047cc:	04 9c       	mov	r12,r2
800047ce:	fa c8 f9 40 	sub	r8,sp,-1728
800047d2:	fa c9 ff b4 	sub	r9,sp,-76
800047d6:	fe b0 fd 23 	rcall	8000421c <get_arg>
800047da:	2f dd       	sub	sp,-12
800047dc:	78 00       	ld.w	r0,r12[0x0]
800047de:	c2 08       	rjmp	8000481e <_vfprintf_r+0x2d2>
800047e0:	fa cc f9 44 	sub	r12,sp,-1724
800047e4:	14 96       	mov	r6,r10
800047e6:	f8 03 00 38 	add	r8,r12,r3<<0x3
800047ea:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800047ee:	c1 88       	rjmp	8000481e <_vfprintf_r+0x2d2>
800047f0:	41 08       	lddsp	r8,sp[0x40]
800047f2:	59 f9       	cp.w	r9,31
800047f4:	e0 89 00 11 	brgt	80004816 <_vfprintf_r+0x2ca>
800047f8:	f0 cb ff fc 	sub	r11,r8,-4
800047fc:	51 0b       	stdsp	sp[0x40],r11
800047fe:	70 00       	ld.w	r0,r8[0x0]
80004800:	fa cb f9 44 	sub	r11,sp,-1724
80004804:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004808:	f1 40 fd 88 	st.w	r8[-632],r0
8000480c:	2f f9       	sub	r9,-1
8000480e:	14 96       	mov	r6,r10
80004810:	fb 49 06 b4 	st.w	sp[1716],r9
80004814:	c0 58       	rjmp	8000481e <_vfprintf_r+0x2d2>
80004816:	70 00       	ld.w	r0,r8[0x0]
80004818:	14 96       	mov	r6,r10
8000481a:	2f c8       	sub	r8,-4
8000481c:	51 08       	stdsp	sp[0x40],r8
8000481e:	58 00       	cp.w	r0,0
80004820:	fe 94 ff 76 	brge	8000470c <_vfprintf_r+0x1c0>
80004824:	5c 30       	neg	r0
80004826:	a3 a5       	sbr	r5,0x2
80004828:	c7 2b       	rjmp	8000470c <_vfprintf_r+0x1c0>
8000482a:	32 b8       	mov	r8,43
8000482c:	fb 68 06 bb 	st.b	sp[1723],r8
80004830:	c6 eb       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004832:	0f 38       	ld.ub	r8,r7++
80004834:	e0 48 00 2a 	cp.w	r8,42
80004838:	c0 30       	breq	8000483e <_vfprintf_r+0x2f2>
8000483a:	30 09       	mov	r9,0
8000483c:	c7 98       	rjmp	8000492e <_vfprintf_r+0x3e2>
8000483e:	0f 88       	ld.ub	r8,r7[0x0]
80004840:	f0 c9 00 30 	sub	r9,r8,48
80004844:	58 99       	cp.w	r9,9
80004846:	e0 8b 00 1f 	brhi	80004884 <_vfprintf_r+0x338>
8000484a:	ee c4 ff ff 	sub	r4,r7,-1
8000484e:	30 0b       	mov	r11,0
80004850:	23 08       	sub	r8,48
80004852:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004856:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000485a:	09 38       	ld.ub	r8,r4++
8000485c:	f0 c9 00 30 	sub	r9,r8,48
80004860:	58 99       	cp.w	r9,9
80004862:	fe 98 ff f7 	brls	80004850 <_vfprintf_r+0x304>
80004866:	e0 48 00 24 	cp.w	r8,36
8000486a:	fe 91 ff 4f 	brne	80004708 <_vfprintf_r+0x1bc>
8000486e:	e0 4b 00 20 	cp.w	r11,32
80004872:	e0 89 0d eb 	brgt	80006448 <_vfprintf_r+0x1efc>
80004876:	20 1b       	sub	r11,1
80004878:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000487c:	10 3b       	cp.w	r11,r8
8000487e:	c0 a5       	brlt	80004892 <_vfprintf_r+0x346>
80004880:	c1 18       	rjmp	800048a2 <_vfprintf_r+0x356>
80004882:	d7 03       	nop
80004884:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004888:	ec c9 ff ff 	sub	r9,r6,-1
8000488c:	14 36       	cp.w	r6,r10
8000488e:	c1 f5       	brlt	800048cc <_vfprintf_r+0x380>
80004890:	c2 88       	rjmp	800048e0 <_vfprintf_r+0x394>
80004892:	fa ca f9 44 	sub	r10,sp,-1724
80004896:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000489a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000489e:	50 2b       	stdsp	sp[0x8],r11
800048a0:	c3 c8       	rjmp	80004918 <_vfprintf_r+0x3cc>
800048a2:	fa c8 f9 50 	sub	r8,sp,-1712
800048a6:	1a d8       	st.w	--sp,r8
800048a8:	fa c8 fa b8 	sub	r8,sp,-1352
800048ac:	1a d8       	st.w	--sp,r8
800048ae:	fa c8 fb b4 	sub	r8,sp,-1100
800048b2:	02 9a       	mov	r10,r1
800048b4:	1a d8       	st.w	--sp,r8
800048b6:	04 9c       	mov	r12,r2
800048b8:	fa c8 f9 40 	sub	r8,sp,-1728
800048bc:	fa c9 ff b4 	sub	r9,sp,-76
800048c0:	fe b0 fc ae 	rcall	8000421c <get_arg>
800048c4:	2f dd       	sub	sp,-12
800048c6:	78 0c       	ld.w	r12,r12[0x0]
800048c8:	50 2c       	stdsp	sp[0x8],r12
800048ca:	c2 78       	rjmp	80004918 <_vfprintf_r+0x3cc>
800048cc:	12 96       	mov	r6,r9
800048ce:	0e 94       	mov	r4,r7
800048d0:	fa c9 f9 44 	sub	r9,sp,-1724
800048d4:	f2 03 00 38 	add	r8,r9,r3<<0x3
800048d8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800048dc:	50 28       	stdsp	sp[0x8],r8
800048de:	c1 d8       	rjmp	80004918 <_vfprintf_r+0x3cc>
800048e0:	41 08       	lddsp	r8,sp[0x40]
800048e2:	59 fa       	cp.w	r10,31
800048e4:	e0 89 00 14 	brgt	8000490c <_vfprintf_r+0x3c0>
800048e8:	f0 cb ff fc 	sub	r11,r8,-4
800048ec:	70 08       	ld.w	r8,r8[0x0]
800048ee:	51 0b       	stdsp	sp[0x40],r11
800048f0:	50 28       	stdsp	sp[0x8],r8
800048f2:	fa c6 f9 44 	sub	r6,sp,-1724
800048f6:	40 2e       	lddsp	lr,sp[0x8]
800048f8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800048fc:	f1 4e fd 88 	st.w	r8[-632],lr
80004900:	2f fa       	sub	r10,-1
80004902:	0e 94       	mov	r4,r7
80004904:	fb 4a 06 b4 	st.w	sp[1716],r10
80004908:	12 96       	mov	r6,r9
8000490a:	c0 78       	rjmp	80004918 <_vfprintf_r+0x3cc>
8000490c:	70 0c       	ld.w	r12,r8[0x0]
8000490e:	0e 94       	mov	r4,r7
80004910:	2f c8       	sub	r8,-4
80004912:	50 2c       	stdsp	sp[0x8],r12
80004914:	12 96       	mov	r6,r9
80004916:	51 08       	stdsp	sp[0x40],r8
80004918:	40 2b       	lddsp	r11,sp[0x8]
8000491a:	58 0b       	cp.w	r11,0
8000491c:	fe 95 fe f2 	brlt	80004700 <_vfprintf_r+0x1b4>
80004920:	08 97       	mov	r7,r4
80004922:	cf 5a       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004924:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004928:	0f 38       	ld.ub	r8,r7++
8000492a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000492e:	f0 ca 00 30 	sub	r10,r8,48
80004932:	58 9a       	cp.w	r10,9
80004934:	fe 98 ff f8 	brls	80004924 <_vfprintf_r+0x3d8>
80004938:	3f fa       	mov	r10,-1
8000493a:	f2 0a 0c 49 	max	r9,r9,r10
8000493e:	50 29       	stdsp	sp[0x8],r9
80004940:	ce 9a       	rjmp	80004712 <_vfprintf_r+0x1c6>
80004942:	a7 b5       	sbr	r5,0x7
80004944:	ce 4a       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004946:	30 09       	mov	r9,0
80004948:	23 08       	sub	r8,48
8000494a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000494e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004952:	0f 38       	ld.ub	r8,r7++
80004954:	f0 ca 00 30 	sub	r10,r8,48
80004958:	58 9a       	cp.w	r10,9
8000495a:	fe 98 ff f7 	brls	80004948 <_vfprintf_r+0x3fc>
8000495e:	e0 48 00 24 	cp.w	r8,36
80004962:	fe 91 fe d7 	brne	80004710 <_vfprintf_r+0x1c4>
80004966:	e0 49 00 20 	cp.w	r9,32
8000496a:	e0 89 0d 6f 	brgt	80006448 <_vfprintf_r+0x1efc>
8000496e:	f2 c3 00 01 	sub	r3,r9,1
80004972:	30 19       	mov	r9,1
80004974:	50 39       	stdsp	sp[0xc],r9
80004976:	cc ba       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004978:	a3 b5       	sbr	r5,0x3
8000497a:	cc 9a       	rjmp	8000470c <_vfprintf_r+0x1c0>
8000497c:	a7 a5       	sbr	r5,0x6
8000497e:	cc 7a       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004980:	0a 98       	mov	r8,r5
80004982:	a5 b5       	sbr	r5,0x5
80004984:	a5 a8       	sbr	r8,0x4
80004986:	0f 89       	ld.ub	r9,r7[0x0]
80004988:	36 ce       	mov	lr,108
8000498a:	fc 09 18 00 	cp.b	r9,lr
8000498e:	f7 b7 00 ff 	subeq	r7,-1
80004992:	f0 05 17 10 	movne	r5,r8
80004996:	cb ba       	rjmp	8000470c <_vfprintf_r+0x1c0>
80004998:	a5 b5       	sbr	r5,0x5
8000499a:	cb 9a       	rjmp	8000470c <_vfprintf_r+0x1c0>
8000499c:	50 a7       	stdsp	sp[0x28],r7
8000499e:	50 80       	stdsp	sp[0x20],r0
800049a0:	0c 97       	mov	r7,r6
800049a2:	10 90       	mov	r0,r8
800049a4:	06 96       	mov	r6,r3
800049a6:	04 94       	mov	r4,r2
800049a8:	40 93       	lddsp	r3,sp[0x24]
800049aa:	02 92       	mov	r2,r1
800049ac:	0e 99       	mov	r9,r7
800049ae:	40 41       	lddsp	r1,sp[0x10]
800049b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049b4:	40 3c       	lddsp	r12,sp[0xc]
800049b6:	58 0c       	cp.w	r12,0
800049b8:	c1 d0       	breq	800049f2 <_vfprintf_r+0x4a6>
800049ba:	10 36       	cp.w	r6,r8
800049bc:	c0 64       	brge	800049c8 <_vfprintf_r+0x47c>
800049be:	fa cb f9 44 	sub	r11,sp,-1724
800049c2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049c6:	c1 d8       	rjmp	80004a00 <_vfprintf_r+0x4b4>
800049c8:	fa c8 f9 50 	sub	r8,sp,-1712
800049cc:	1a d8       	st.w	--sp,r8
800049ce:	fa c8 fa b8 	sub	r8,sp,-1352
800049d2:	1a d8       	st.w	--sp,r8
800049d4:	fa c8 fb b4 	sub	r8,sp,-1100
800049d8:	1a d8       	st.w	--sp,r8
800049da:	fa c8 f9 40 	sub	r8,sp,-1728
800049de:	fa c9 ff b4 	sub	r9,sp,-76
800049e2:	04 9a       	mov	r10,r2
800049e4:	0c 9b       	mov	r11,r6
800049e6:	08 9c       	mov	r12,r4
800049e8:	fe b0 fc 1a 	rcall	8000421c <get_arg>
800049ec:	2f dd       	sub	sp,-12
800049ee:	19 b8       	ld.ub	r8,r12[0x3]
800049f0:	c2 28       	rjmp	80004a34 <_vfprintf_r+0x4e8>
800049f2:	2f f7       	sub	r7,-1
800049f4:	10 39       	cp.w	r9,r8
800049f6:	c0 84       	brge	80004a06 <_vfprintf_r+0x4ba>
800049f8:	fa ca f9 44 	sub	r10,sp,-1724
800049fc:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a00:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004a04:	c1 88       	rjmp	80004a34 <_vfprintf_r+0x4e8>
80004a06:	41 09       	lddsp	r9,sp[0x40]
80004a08:	59 f8       	cp.w	r8,31
80004a0a:	e0 89 00 12 	brgt	80004a2e <_vfprintf_r+0x4e2>
80004a0e:	f2 ca ff fc 	sub	r10,r9,-4
80004a12:	51 0a       	stdsp	sp[0x40],r10
80004a14:	72 09       	ld.w	r9,r9[0x0]
80004a16:	fa c6 f9 44 	sub	r6,sp,-1724
80004a1a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004a1e:	2f f8       	sub	r8,-1
80004a20:	f5 49 fd 88 	st.w	r10[-632],r9
80004a24:	fb 48 06 b4 	st.w	sp[1716],r8
80004a28:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004a2c:	c0 48       	rjmp	80004a34 <_vfprintf_r+0x4e8>
80004a2e:	13 b8       	ld.ub	r8,r9[0x3]
80004a30:	2f c9       	sub	r9,-4
80004a32:	51 09       	stdsp	sp[0x40],r9
80004a34:	fb 68 06 60 	st.b	sp[1632],r8
80004a38:	30 0e       	mov	lr,0
80004a3a:	30 08       	mov	r8,0
80004a3c:	30 12       	mov	r2,1
80004a3e:	fb 68 06 bb 	st.b	sp[1723],r8
80004a42:	50 2e       	stdsp	sp[0x8],lr
80004a44:	e0 8f 08 ad 	bral	80005b9e <_vfprintf_r+0x1652>
80004a48:	50 a7       	stdsp	sp[0x28],r7
80004a4a:	50 80       	stdsp	sp[0x20],r0
80004a4c:	0c 97       	mov	r7,r6
80004a4e:	04 94       	mov	r4,r2
80004a50:	06 96       	mov	r6,r3
80004a52:	02 92       	mov	r2,r1
80004a54:	40 93       	lddsp	r3,sp[0x24]
80004a56:	10 90       	mov	r0,r8
80004a58:	40 41       	lddsp	r1,sp[0x10]
80004a5a:	a5 a5       	sbr	r5,0x4
80004a5c:	c0 a8       	rjmp	80004a70 <_vfprintf_r+0x524>
80004a5e:	50 a7       	stdsp	sp[0x28],r7
80004a60:	50 80       	stdsp	sp[0x20],r0
80004a62:	0c 97       	mov	r7,r6
80004a64:	04 94       	mov	r4,r2
80004a66:	06 96       	mov	r6,r3
80004a68:	02 92       	mov	r2,r1
80004a6a:	40 93       	lddsp	r3,sp[0x24]
80004a6c:	10 90       	mov	r0,r8
80004a6e:	40 41       	lddsp	r1,sp[0x10]
80004a70:	ed b5 00 05 	bld	r5,0x5
80004a74:	c5 11       	brne	80004b16 <_vfprintf_r+0x5ca>
80004a76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a7a:	40 3c       	lddsp	r12,sp[0xc]
80004a7c:	58 0c       	cp.w	r12,0
80004a7e:	c1 e0       	breq	80004aba <_vfprintf_r+0x56e>
80004a80:	10 36       	cp.w	r6,r8
80004a82:	c0 64       	brge	80004a8e <_vfprintf_r+0x542>
80004a84:	fa cb f9 44 	sub	r11,sp,-1724
80004a88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a8c:	c2 08       	rjmp	80004acc <_vfprintf_r+0x580>
80004a8e:	fa c8 f9 50 	sub	r8,sp,-1712
80004a92:	1a d8       	st.w	--sp,r8
80004a94:	fa c8 fa b8 	sub	r8,sp,-1352
80004a98:	0c 9b       	mov	r11,r6
80004a9a:	1a d8       	st.w	--sp,r8
80004a9c:	fa c8 fb b4 	sub	r8,sp,-1100
80004aa0:	1a d8       	st.w	--sp,r8
80004aa2:	fa c9 ff b4 	sub	r9,sp,-76
80004aa6:	fa c8 f9 40 	sub	r8,sp,-1728
80004aaa:	04 9a       	mov	r10,r2
80004aac:	08 9c       	mov	r12,r4
80004aae:	fe b0 fb b7 	rcall	8000421c <get_arg>
80004ab2:	2f dd       	sub	sp,-12
80004ab4:	78 1b       	ld.w	r11,r12[0x4]
80004ab6:	78 09       	ld.w	r9,r12[0x0]
80004ab8:	c2 b8       	rjmp	80004b0e <_vfprintf_r+0x5c2>
80004aba:	ee ca ff ff 	sub	r10,r7,-1
80004abe:	10 37       	cp.w	r7,r8
80004ac0:	c0 b4       	brge	80004ad6 <_vfprintf_r+0x58a>
80004ac2:	fa c9 f9 44 	sub	r9,sp,-1724
80004ac6:	14 97       	mov	r7,r10
80004ac8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004acc:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004ad0:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004ad4:	c1 d8       	rjmp	80004b0e <_vfprintf_r+0x5c2>
80004ad6:	41 09       	lddsp	r9,sp[0x40]
80004ad8:	59 f8       	cp.w	r8,31
80004ada:	e0 89 00 14 	brgt	80004b02 <_vfprintf_r+0x5b6>
80004ade:	f2 cb ff f8 	sub	r11,r9,-8
80004ae2:	51 0b       	stdsp	sp[0x40],r11
80004ae4:	fa c6 f9 44 	sub	r6,sp,-1724
80004ae8:	72 1b       	ld.w	r11,r9[0x4]
80004aea:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004aee:	72 09       	ld.w	r9,r9[0x0]
80004af0:	f9 4b fd 8c 	st.w	r12[-628],r11
80004af4:	f9 49 fd 88 	st.w	r12[-632],r9
80004af8:	2f f8       	sub	r8,-1
80004afa:	14 97       	mov	r7,r10
80004afc:	fb 48 06 b4 	st.w	sp[1716],r8
80004b00:	c0 78       	rjmp	80004b0e <_vfprintf_r+0x5c2>
80004b02:	f2 c8 ff f8 	sub	r8,r9,-8
80004b06:	72 1b       	ld.w	r11,r9[0x4]
80004b08:	14 97       	mov	r7,r10
80004b0a:	51 08       	stdsp	sp[0x40],r8
80004b0c:	72 09       	ld.w	r9,r9[0x0]
80004b0e:	16 98       	mov	r8,r11
80004b10:	fa e9 00 00 	st.d	sp[0],r8
80004b14:	ca e8       	rjmp	80004c70 <_vfprintf_r+0x724>
80004b16:	ed b5 00 04 	bld	r5,0x4
80004b1a:	c1 71       	brne	80004b48 <_vfprintf_r+0x5fc>
80004b1c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b20:	40 3e       	lddsp	lr,sp[0xc]
80004b22:	58 0e       	cp.w	lr,0
80004b24:	c0 80       	breq	80004b34 <_vfprintf_r+0x5e8>
80004b26:	10 36       	cp.w	r6,r8
80004b28:	c6 94       	brge	80004bfa <_vfprintf_r+0x6ae>
80004b2a:	fa cc f9 44 	sub	r12,sp,-1724
80004b2e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b32:	c8 28       	rjmp	80004c36 <_vfprintf_r+0x6ea>
80004b34:	ee ca ff ff 	sub	r10,r7,-1
80004b38:	10 37       	cp.w	r7,r8
80004b3a:	e0 84 00 81 	brge	80004c3c <_vfprintf_r+0x6f0>
80004b3e:	fa cb f9 44 	sub	r11,sp,-1724
80004b42:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b46:	c7 78       	rjmp	80004c34 <_vfprintf_r+0x6e8>
80004b48:	ed b5 00 06 	bld	r5,0x6
80004b4c:	c4 b1       	brne	80004be2 <_vfprintf_r+0x696>
80004b4e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b52:	40 3c       	lddsp	r12,sp[0xc]
80004b54:	58 0c       	cp.w	r12,0
80004b56:	c1 d0       	breq	80004b90 <_vfprintf_r+0x644>
80004b58:	10 36       	cp.w	r6,r8
80004b5a:	c0 64       	brge	80004b66 <_vfprintf_r+0x61a>
80004b5c:	fa cb f9 44 	sub	r11,sp,-1724
80004b60:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b64:	c1 f8       	rjmp	80004ba2 <_vfprintf_r+0x656>
80004b66:	fa c8 f9 50 	sub	r8,sp,-1712
80004b6a:	1a d8       	st.w	--sp,r8
80004b6c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b70:	1a d8       	st.w	--sp,r8
80004b72:	fa c8 fb b4 	sub	r8,sp,-1100
80004b76:	1a d8       	st.w	--sp,r8
80004b78:	fa c8 f9 40 	sub	r8,sp,-1728
80004b7c:	fa c9 ff b4 	sub	r9,sp,-76
80004b80:	04 9a       	mov	r10,r2
80004b82:	0c 9b       	mov	r11,r6
80004b84:	08 9c       	mov	r12,r4
80004b86:	fe b0 fb 4b 	rcall	8000421c <get_arg>
80004b8a:	2f dd       	sub	sp,-12
80004b8c:	98 18       	ld.sh	r8,r12[0x2]
80004b8e:	c2 68       	rjmp	80004bda <_vfprintf_r+0x68e>
80004b90:	ee ca ff ff 	sub	r10,r7,-1
80004b94:	10 37       	cp.w	r7,r8
80004b96:	c0 94       	brge	80004ba8 <_vfprintf_r+0x65c>
80004b98:	fa c9 f9 44 	sub	r9,sp,-1724
80004b9c:	14 97       	mov	r7,r10
80004b9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ba2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004ba6:	c1 a8       	rjmp	80004bda <_vfprintf_r+0x68e>
80004ba8:	41 09       	lddsp	r9,sp[0x40]
80004baa:	59 f8       	cp.w	r8,31
80004bac:	e0 89 00 13 	brgt	80004bd2 <_vfprintf_r+0x686>
80004bb0:	f2 cb ff fc 	sub	r11,r9,-4
80004bb4:	51 0b       	stdsp	sp[0x40],r11
80004bb6:	72 09       	ld.w	r9,r9[0x0]
80004bb8:	fa c6 f9 44 	sub	r6,sp,-1724
80004bbc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004bc0:	2f f8       	sub	r8,-1
80004bc2:	f7 49 fd 88 	st.w	r11[-632],r9
80004bc6:	fb 48 06 b4 	st.w	sp[1716],r8
80004bca:	14 97       	mov	r7,r10
80004bcc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004bd0:	c0 58       	rjmp	80004bda <_vfprintf_r+0x68e>
80004bd2:	92 18       	ld.sh	r8,r9[0x2]
80004bd4:	14 97       	mov	r7,r10
80004bd6:	2f c9       	sub	r9,-4
80004bd8:	51 09       	stdsp	sp[0x40],r9
80004bda:	50 18       	stdsp	sp[0x4],r8
80004bdc:	bf 58       	asr	r8,0x1f
80004bde:	50 08       	stdsp	sp[0x0],r8
80004be0:	c4 88       	rjmp	80004c70 <_vfprintf_r+0x724>
80004be2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004be6:	40 3c       	lddsp	r12,sp[0xc]
80004be8:	58 0c       	cp.w	r12,0
80004bea:	c1 d0       	breq	80004c24 <_vfprintf_r+0x6d8>
80004bec:	10 36       	cp.w	r6,r8
80004bee:	c0 64       	brge	80004bfa <_vfprintf_r+0x6ae>
80004bf0:	fa cb f9 44 	sub	r11,sp,-1724
80004bf4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bf8:	c1 f8       	rjmp	80004c36 <_vfprintf_r+0x6ea>
80004bfa:	fa c8 f9 50 	sub	r8,sp,-1712
80004bfe:	1a d8       	st.w	--sp,r8
80004c00:	fa c8 fa b8 	sub	r8,sp,-1352
80004c04:	0c 9b       	mov	r11,r6
80004c06:	1a d8       	st.w	--sp,r8
80004c08:	fa c8 fb b4 	sub	r8,sp,-1100
80004c0c:	04 9a       	mov	r10,r2
80004c0e:	1a d8       	st.w	--sp,r8
80004c10:	08 9c       	mov	r12,r4
80004c12:	fa c8 f9 40 	sub	r8,sp,-1728
80004c16:	fa c9 ff b4 	sub	r9,sp,-76
80004c1a:	fe b0 fb 01 	rcall	8000421c <get_arg>
80004c1e:	2f dd       	sub	sp,-12
80004c20:	78 0b       	ld.w	r11,r12[0x0]
80004c22:	c2 48       	rjmp	80004c6a <_vfprintf_r+0x71e>
80004c24:	ee ca ff ff 	sub	r10,r7,-1
80004c28:	10 37       	cp.w	r7,r8
80004c2a:	c0 94       	brge	80004c3c <_vfprintf_r+0x6f0>
80004c2c:	fa c9 f9 44 	sub	r9,sp,-1724
80004c30:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c34:	14 97       	mov	r7,r10
80004c36:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c3a:	c1 88       	rjmp	80004c6a <_vfprintf_r+0x71e>
80004c3c:	41 09       	lddsp	r9,sp[0x40]
80004c3e:	59 f8       	cp.w	r8,31
80004c40:	e0 89 00 11 	brgt	80004c62 <_vfprintf_r+0x716>
80004c44:	f2 cb ff fc 	sub	r11,r9,-4
80004c48:	51 0b       	stdsp	sp[0x40],r11
80004c4a:	fa c6 f9 44 	sub	r6,sp,-1724
80004c4e:	72 0b       	ld.w	r11,r9[0x0]
80004c50:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c54:	f3 4b fd 88 	st.w	r9[-632],r11
80004c58:	2f f8       	sub	r8,-1
80004c5a:	14 97       	mov	r7,r10
80004c5c:	fb 48 06 b4 	st.w	sp[1716],r8
80004c60:	c0 58       	rjmp	80004c6a <_vfprintf_r+0x71e>
80004c62:	72 0b       	ld.w	r11,r9[0x0]
80004c64:	14 97       	mov	r7,r10
80004c66:	2f c9       	sub	r9,-4
80004c68:	51 09       	stdsp	sp[0x40],r9
80004c6a:	50 1b       	stdsp	sp[0x4],r11
80004c6c:	bf 5b       	asr	r11,0x1f
80004c6e:	50 0b       	stdsp	sp[0x0],r11
80004c70:	fa ea 00 00 	ld.d	r10,sp[0]
80004c74:	58 0a       	cp.w	r10,0
80004c76:	5c 2b       	cpc	r11
80004c78:	c0 e4       	brge	80004c94 <_vfprintf_r+0x748>
80004c7a:	30 08       	mov	r8,0
80004c7c:	fa ea 00 00 	ld.d	r10,sp[0]
80004c80:	30 09       	mov	r9,0
80004c82:	f0 0a 01 0a 	sub	r10,r8,r10
80004c86:	f2 0b 01 4b 	sbc	r11,r9,r11
80004c8a:	32 d8       	mov	r8,45
80004c8c:	fa eb 00 00 	st.d	sp[0],r10
80004c90:	fb 68 06 bb 	st.b	sp[1723],r8
80004c94:	30 18       	mov	r8,1
80004c96:	e0 8f 06 fa 	bral	80005a8a <_vfprintf_r+0x153e>
80004c9a:	50 a7       	stdsp	sp[0x28],r7
80004c9c:	50 80       	stdsp	sp[0x20],r0
80004c9e:	0c 97       	mov	r7,r6
80004ca0:	04 94       	mov	r4,r2
80004ca2:	06 96       	mov	r6,r3
80004ca4:	02 92       	mov	r2,r1
80004ca6:	40 93       	lddsp	r3,sp[0x24]
80004ca8:	10 90       	mov	r0,r8
80004caa:	40 41       	lddsp	r1,sp[0x10]
80004cac:	0e 99       	mov	r9,r7
80004cae:	ed b5 00 03 	bld	r5,0x3
80004cb2:	c4 11       	brne	80004d34 <_vfprintf_r+0x7e8>
80004cb4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004cb8:	40 3a       	lddsp	r10,sp[0xc]
80004cba:	58 0a       	cp.w	r10,0
80004cbc:	c1 90       	breq	80004cee <_vfprintf_r+0x7a2>
80004cbe:	10 36       	cp.w	r6,r8
80004cc0:	c6 45       	brlt	80004d88 <_vfprintf_r+0x83c>
80004cc2:	fa c8 f9 50 	sub	r8,sp,-1712
80004cc6:	1a d8       	st.w	--sp,r8
80004cc8:	fa c8 fa b8 	sub	r8,sp,-1352
80004ccc:	1a d8       	st.w	--sp,r8
80004cce:	fa c8 fb b4 	sub	r8,sp,-1100
80004cd2:	0c 9b       	mov	r11,r6
80004cd4:	1a d8       	st.w	--sp,r8
80004cd6:	04 9a       	mov	r10,r2
80004cd8:	fa c8 f9 40 	sub	r8,sp,-1728
80004cdc:	fa c9 ff b4 	sub	r9,sp,-76
80004ce0:	08 9c       	mov	r12,r4
80004ce2:	fe b0 fa 9d 	rcall	8000421c <get_arg>
80004ce6:	2f dd       	sub	sp,-12
80004ce8:	78 16       	ld.w	r6,r12[0x4]
80004cea:	50 76       	stdsp	sp[0x1c],r6
80004cec:	c4 88       	rjmp	80004d7c <_vfprintf_r+0x830>
80004cee:	2f f7       	sub	r7,-1
80004cf0:	10 39       	cp.w	r9,r8
80004cf2:	c0 c4       	brge	80004d0a <_vfprintf_r+0x7be>
80004cf4:	fa ce f9 44 	sub	lr,sp,-1724
80004cf8:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004cfc:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004d00:	50 7c       	stdsp	sp[0x1c],r12
80004d02:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004d06:	50 56       	stdsp	sp[0x14],r6
80004d08:	c6 68       	rjmp	80004dd4 <_vfprintf_r+0x888>
80004d0a:	41 09       	lddsp	r9,sp[0x40]
80004d0c:	59 f8       	cp.w	r8,31
80004d0e:	e0 89 00 10 	brgt	80004d2e <_vfprintf_r+0x7e2>
80004d12:	f2 ca ff f8 	sub	r10,r9,-8
80004d16:	72 1b       	ld.w	r11,r9[0x4]
80004d18:	51 0a       	stdsp	sp[0x40],r10
80004d1a:	72 09       	ld.w	r9,r9[0x0]
80004d1c:	fa ca f9 44 	sub	r10,sp,-1724
80004d20:	50 7b       	stdsp	sp[0x1c],r11
80004d22:	50 59       	stdsp	sp[0x14],r9
80004d24:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004d28:	40 5b       	lddsp	r11,sp[0x14]
80004d2a:	40 7a       	lddsp	r10,sp[0x1c]
80004d2c:	c4 78       	rjmp	80004dba <_vfprintf_r+0x86e>
80004d2e:	72 18       	ld.w	r8,r9[0x4]
80004d30:	50 78       	stdsp	sp[0x1c],r8
80004d32:	c4 c8       	rjmp	80004dca <_vfprintf_r+0x87e>
80004d34:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d38:	40 3e       	lddsp	lr,sp[0xc]
80004d3a:	58 0e       	cp.w	lr,0
80004d3c:	c2 30       	breq	80004d82 <_vfprintf_r+0x836>
80004d3e:	10 36       	cp.w	r6,r8
80004d40:	c0 94       	brge	80004d52 <_vfprintf_r+0x806>
80004d42:	fa cc f9 44 	sub	r12,sp,-1724
80004d46:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d4a:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004d4e:	50 7b       	stdsp	sp[0x1c],r11
80004d50:	cd 9b       	rjmp	80004d02 <_vfprintf_r+0x7b6>
80004d52:	fa c8 f9 50 	sub	r8,sp,-1712
80004d56:	1a d8       	st.w	--sp,r8
80004d58:	fa c8 fa b8 	sub	r8,sp,-1352
80004d5c:	04 9a       	mov	r10,r2
80004d5e:	1a d8       	st.w	--sp,r8
80004d60:	fa c8 fb b4 	sub	r8,sp,-1100
80004d64:	0c 9b       	mov	r11,r6
80004d66:	1a d8       	st.w	--sp,r8
80004d68:	08 9c       	mov	r12,r4
80004d6a:	fa c8 f9 40 	sub	r8,sp,-1728
80004d6e:	fa c9 ff b4 	sub	r9,sp,-76
80004d72:	fe b0 fa 55 	rcall	8000421c <get_arg>
80004d76:	2f dd       	sub	sp,-12
80004d78:	78 1a       	ld.w	r10,r12[0x4]
80004d7a:	50 7a       	stdsp	sp[0x1c],r10
80004d7c:	78 0c       	ld.w	r12,r12[0x0]
80004d7e:	50 5c       	stdsp	sp[0x14],r12
80004d80:	c2 a8       	rjmp	80004dd4 <_vfprintf_r+0x888>
80004d82:	2f f7       	sub	r7,-1
80004d84:	10 39       	cp.w	r9,r8
80004d86:	c0 94       	brge	80004d98 <_vfprintf_r+0x84c>
80004d88:	fa c9 f9 44 	sub	r9,sp,-1724
80004d8c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d90:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004d94:	50 78       	stdsp	sp[0x1c],r8
80004d96:	cb 6b       	rjmp	80004d02 <_vfprintf_r+0x7b6>
80004d98:	41 09       	lddsp	r9,sp[0x40]
80004d9a:	59 f8       	cp.w	r8,31
80004d9c:	e0 89 00 15 	brgt	80004dc6 <_vfprintf_r+0x87a>
80004da0:	f2 ca ff f8 	sub	r10,r9,-8
80004da4:	72 16       	ld.w	r6,r9[0x4]
80004da6:	72 09       	ld.w	r9,r9[0x0]
80004da8:	51 0a       	stdsp	sp[0x40],r10
80004daa:	50 59       	stdsp	sp[0x14],r9
80004dac:	fa ce f9 44 	sub	lr,sp,-1724
80004db0:	50 76       	stdsp	sp[0x1c],r6
80004db2:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004db6:	40 5b       	lddsp	r11,sp[0x14]
80004db8:	0c 9a       	mov	r10,r6
80004dba:	f2 eb fd 88 	st.d	r9[-632],r10
80004dbe:	2f f8       	sub	r8,-1
80004dc0:	fb 48 06 b4 	st.w	sp[1716],r8
80004dc4:	c0 88       	rjmp	80004dd4 <_vfprintf_r+0x888>
80004dc6:	72 1c       	ld.w	r12,r9[0x4]
80004dc8:	50 7c       	stdsp	sp[0x1c],r12
80004dca:	f2 c8 ff f8 	sub	r8,r9,-8
80004dce:	51 08       	stdsp	sp[0x40],r8
80004dd0:	72 09       	ld.w	r9,r9[0x0]
80004dd2:	50 59       	stdsp	sp[0x14],r9
80004dd4:	40 5b       	lddsp	r11,sp[0x14]
80004dd6:	40 7a       	lddsp	r10,sp[0x1c]
80004dd8:	e0 a0 1c de 	rcall	80008794 <__isinfd>
80004ddc:	18 96       	mov	r6,r12
80004dde:	c1 70       	breq	80004e0c <_vfprintf_r+0x8c0>
80004de0:	30 08       	mov	r8,0
80004de2:	30 09       	mov	r9,0
80004de4:	40 5b       	lddsp	r11,sp[0x14]
80004de6:	40 7a       	lddsp	r10,sp[0x1c]
80004de8:	fe b0 f9 22 	rcall	8000402c <__avr32_f64_cmp_lt>
80004dec:	c0 40       	breq	80004df4 <_vfprintf_r+0x8a8>
80004dee:	32 d8       	mov	r8,45
80004df0:	fb 68 06 bb 	st.b	sp[1723],r8
80004df4:	fe c8 af 8c 	sub	r8,pc,-20596
80004df8:	fe c6 af 8c 	sub	r6,pc,-20596
80004dfc:	a7 d5       	cbr	r5,0x7
80004dfe:	e0 40 00 47 	cp.w	r0,71
80004e02:	f0 06 17 a0 	movle	r6,r8
80004e06:	30 32       	mov	r2,3
80004e08:	e0 8f 06 ce 	bral	80005ba4 <_vfprintf_r+0x1658>
80004e0c:	40 5b       	lddsp	r11,sp[0x14]
80004e0e:	40 7a       	lddsp	r10,sp[0x1c]
80004e10:	e0 a0 1c d7 	rcall	800087be <__isnand>
80004e14:	c0 e0       	breq	80004e30 <_vfprintf_r+0x8e4>
80004e16:	50 26       	stdsp	sp[0x8],r6
80004e18:	fe c8 af a8 	sub	r8,pc,-20568
80004e1c:	fe c6 af a8 	sub	r6,pc,-20568
80004e20:	a7 d5       	cbr	r5,0x7
80004e22:	e0 40 00 47 	cp.w	r0,71
80004e26:	f0 06 17 a0 	movle	r6,r8
80004e2a:	30 32       	mov	r2,3
80004e2c:	e0 8f 06 c2 	bral	80005bb0 <_vfprintf_r+0x1664>
80004e30:	40 2a       	lddsp	r10,sp[0x8]
80004e32:	5b fa       	cp.w	r10,-1
80004e34:	c0 41       	brne	80004e3c <_vfprintf_r+0x8f0>
80004e36:	30 69       	mov	r9,6
80004e38:	50 29       	stdsp	sp[0x8],r9
80004e3a:	c1 18       	rjmp	80004e5c <_vfprintf_r+0x910>
80004e3c:	e0 40 00 47 	cp.w	r0,71
80004e40:	5f 09       	sreq	r9
80004e42:	e0 40 00 67 	cp.w	r0,103
80004e46:	5f 08       	sreq	r8
80004e48:	f3 e8 10 08 	or	r8,r9,r8
80004e4c:	f8 08 18 00 	cp.b	r8,r12
80004e50:	c0 60       	breq	80004e5c <_vfprintf_r+0x910>
80004e52:	40 28       	lddsp	r8,sp[0x8]
80004e54:	58 08       	cp.w	r8,0
80004e56:	f9 b8 00 01 	moveq	r8,1
80004e5a:	50 28       	stdsp	sp[0x8],r8
80004e5c:	40 78       	lddsp	r8,sp[0x1c]
80004e5e:	40 59       	lddsp	r9,sp[0x14]
80004e60:	fa e9 06 94 	st.d	sp[1684],r8
80004e64:	a9 a5       	sbr	r5,0x8
80004e66:	fa f8 06 94 	ld.w	r8,sp[1684]
80004e6a:	58 08       	cp.w	r8,0
80004e6c:	c0 65       	brlt	80004e78 <_vfprintf_r+0x92c>
80004e6e:	40 5e       	lddsp	lr,sp[0x14]
80004e70:	30 0c       	mov	r12,0
80004e72:	50 6e       	stdsp	sp[0x18],lr
80004e74:	50 9c       	stdsp	sp[0x24],r12
80004e76:	c0 78       	rjmp	80004e84 <_vfprintf_r+0x938>
80004e78:	40 5b       	lddsp	r11,sp[0x14]
80004e7a:	32 da       	mov	r10,45
80004e7c:	ee 1b 80 00 	eorh	r11,0x8000
80004e80:	50 9a       	stdsp	sp[0x24],r10
80004e82:	50 6b       	stdsp	sp[0x18],r11
80004e84:	e0 40 00 46 	cp.w	r0,70
80004e88:	5f 09       	sreq	r9
80004e8a:	e0 40 00 66 	cp.w	r0,102
80004e8e:	5f 08       	sreq	r8
80004e90:	f3 e8 10 08 	or	r8,r9,r8
80004e94:	50 48       	stdsp	sp[0x10],r8
80004e96:	c0 40       	breq	80004e9e <_vfprintf_r+0x952>
80004e98:	40 22       	lddsp	r2,sp[0x8]
80004e9a:	30 39       	mov	r9,3
80004e9c:	c1 08       	rjmp	80004ebc <_vfprintf_r+0x970>
80004e9e:	e0 40 00 45 	cp.w	r0,69
80004ea2:	5f 09       	sreq	r9
80004ea4:	e0 40 00 65 	cp.w	r0,101
80004ea8:	5f 08       	sreq	r8
80004eaa:	40 22       	lddsp	r2,sp[0x8]
80004eac:	10 49       	or	r9,r8
80004eae:	2f f2       	sub	r2,-1
80004eb0:	40 46       	lddsp	r6,sp[0x10]
80004eb2:	ec 09 18 00 	cp.b	r9,r6
80004eb6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004eba:	30 29       	mov	r9,2
80004ebc:	fa c8 f9 5c 	sub	r8,sp,-1700
80004ec0:	1a d8       	st.w	--sp,r8
80004ec2:	fa c8 f9 54 	sub	r8,sp,-1708
80004ec6:	1a d8       	st.w	--sp,r8
80004ec8:	fa c8 f9 4c 	sub	r8,sp,-1716
80004ecc:	08 9c       	mov	r12,r4
80004ece:	1a d8       	st.w	--sp,r8
80004ed0:	04 98       	mov	r8,r2
80004ed2:	40 9b       	lddsp	r11,sp[0x24]
80004ed4:	40 aa       	lddsp	r10,sp[0x28]
80004ed6:	e0 a0 0b c3 	rcall	8000665c <_dtoa_r>
80004eda:	e0 40 00 47 	cp.w	r0,71
80004ede:	5f 19       	srne	r9
80004ee0:	e0 40 00 67 	cp.w	r0,103
80004ee4:	5f 18       	srne	r8
80004ee6:	18 96       	mov	r6,r12
80004ee8:	2f dd       	sub	sp,-12
80004eea:	f3 e8 00 08 	and	r8,r9,r8
80004eee:	c0 41       	brne	80004ef6 <_vfprintf_r+0x9aa>
80004ef0:	ed b5 00 00 	bld	r5,0x0
80004ef4:	c3 01       	brne	80004f54 <_vfprintf_r+0xa08>
80004ef6:	ec 02 00 0e 	add	lr,r6,r2
80004efa:	50 3e       	stdsp	sp[0xc],lr
80004efc:	40 4c       	lddsp	r12,sp[0x10]
80004efe:	58 0c       	cp.w	r12,0
80004f00:	c1 50       	breq	80004f2a <_vfprintf_r+0x9de>
80004f02:	0d 89       	ld.ub	r9,r6[0x0]
80004f04:	33 08       	mov	r8,48
80004f06:	f0 09 18 00 	cp.b	r9,r8
80004f0a:	c0 b1       	brne	80004f20 <_vfprintf_r+0x9d4>
80004f0c:	30 08       	mov	r8,0
80004f0e:	30 09       	mov	r9,0
80004f10:	40 6b       	lddsp	r11,sp[0x18]
80004f12:	40 7a       	lddsp	r10,sp[0x1c]
80004f14:	e0 a0 1f 91 	rcall	80008e36 <__avr32_f64_cmp_eq>
80004f18:	fb b2 00 01 	rsubeq	r2,1
80004f1c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004f20:	40 3b       	lddsp	r11,sp[0xc]
80004f22:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004f26:	10 0b       	add	r11,r8
80004f28:	50 3b       	stdsp	sp[0xc],r11
80004f2a:	40 6b       	lddsp	r11,sp[0x18]
80004f2c:	30 08       	mov	r8,0
80004f2e:	30 09       	mov	r9,0
80004f30:	40 7a       	lddsp	r10,sp[0x1c]
80004f32:	e0 a0 1f 82 	rcall	80008e36 <__avr32_f64_cmp_eq>
80004f36:	c0 90       	breq	80004f48 <_vfprintf_r+0x9fc>
80004f38:	40 3a       	lddsp	r10,sp[0xc]
80004f3a:	fb 4a 06 a4 	st.w	sp[1700],r10
80004f3e:	c0 58       	rjmp	80004f48 <_vfprintf_r+0x9fc>
80004f40:	10 c9       	st.b	r8++,r9
80004f42:	fb 48 06 a4 	st.w	sp[1700],r8
80004f46:	c0 28       	rjmp	80004f4a <_vfprintf_r+0x9fe>
80004f48:	33 09       	mov	r9,48
80004f4a:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004f4e:	40 3e       	lddsp	lr,sp[0xc]
80004f50:	1c 38       	cp.w	r8,lr
80004f52:	cf 73       	brcs	80004f40 <_vfprintf_r+0x9f4>
80004f54:	e0 40 00 47 	cp.w	r0,71
80004f58:	5f 09       	sreq	r9
80004f5a:	e0 40 00 67 	cp.w	r0,103
80004f5e:	5f 08       	sreq	r8
80004f60:	f3 e8 10 08 	or	r8,r9,r8
80004f64:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004f68:	0c 19       	sub	r9,r6
80004f6a:	50 69       	stdsp	sp[0x18],r9
80004f6c:	58 08       	cp.w	r8,0
80004f6e:	c0 b0       	breq	80004f84 <_vfprintf_r+0xa38>
80004f70:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004f74:	5b d8       	cp.w	r8,-3
80004f76:	c0 55       	brlt	80004f80 <_vfprintf_r+0xa34>
80004f78:	40 2c       	lddsp	r12,sp[0x8]
80004f7a:	18 38       	cp.w	r8,r12
80004f7c:	e0 8a 00 6a 	brle	80005050 <_vfprintf_r+0xb04>
80004f80:	20 20       	sub	r0,2
80004f82:	c0 58       	rjmp	80004f8c <_vfprintf_r+0xa40>
80004f84:	e0 40 00 65 	cp.w	r0,101
80004f88:	e0 89 00 46 	brgt	80005014 <_vfprintf_r+0xac8>
80004f8c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004f90:	fb 60 06 9c 	st.b	sp[1692],r0
80004f94:	20 1b       	sub	r11,1
80004f96:	fb 4b 06 ac 	st.w	sp[1708],r11
80004f9a:	c0 47       	brpl	80004fa2 <_vfprintf_r+0xa56>
80004f9c:	5c 3b       	neg	r11
80004f9e:	32 d8       	mov	r8,45
80004fa0:	c0 28       	rjmp	80004fa4 <_vfprintf_r+0xa58>
80004fa2:	32 b8       	mov	r8,43
80004fa4:	fb 68 06 9d 	st.b	sp[1693],r8
80004fa8:	58 9b       	cp.w	r11,9
80004faa:	e0 8a 00 1d 	brle	80004fe4 <_vfprintf_r+0xa98>
80004fae:	fa c9 fa 35 	sub	r9,sp,-1483
80004fb2:	30 aa       	mov	r10,10
80004fb4:	12 98       	mov	r8,r9
80004fb6:	0e 9c       	mov	r12,r7
80004fb8:	0c 92       	mov	r2,r6
80004fba:	f6 0a 0c 06 	divs	r6,r11,r10
80004fbe:	0e 9b       	mov	r11,r7
80004fc0:	2d 0b       	sub	r11,-48
80004fc2:	10 fb       	st.b	--r8,r11
80004fc4:	0c 9b       	mov	r11,r6
80004fc6:	58 96       	cp.w	r6,9
80004fc8:	fe 99 ff f9 	brgt	80004fba <_vfprintf_r+0xa6e>
80004fcc:	2d 0b       	sub	r11,-48
80004fce:	18 97       	mov	r7,r12
80004fd0:	04 96       	mov	r6,r2
80004fd2:	10 fb       	st.b	--r8,r11
80004fd4:	fa ca f9 62 	sub	r10,sp,-1694
80004fd8:	c0 38       	rjmp	80004fde <_vfprintf_r+0xa92>
80004fda:	11 3b       	ld.ub	r11,r8++
80004fdc:	14 cb       	st.b	r10++,r11
80004fde:	12 38       	cp.w	r8,r9
80004fe0:	cf d3       	brcs	80004fda <_vfprintf_r+0xa8e>
80004fe2:	c0 98       	rjmp	80004ff4 <_vfprintf_r+0xaa8>
80004fe4:	2d 0b       	sub	r11,-48
80004fe6:	33 08       	mov	r8,48
80004fe8:	fb 6b 06 9f 	st.b	sp[1695],r11
80004fec:	fb 68 06 9e 	st.b	sp[1694],r8
80004ff0:	fa ca f9 60 	sub	r10,sp,-1696
80004ff4:	fa c8 f9 64 	sub	r8,sp,-1692
80004ff8:	f4 08 01 08 	sub	r8,r10,r8
80004ffc:	50 e8       	stdsp	sp[0x38],r8
80004ffe:	10 92       	mov	r2,r8
80005000:	40 6b       	lddsp	r11,sp[0x18]
80005002:	16 02       	add	r2,r11
80005004:	58 1b       	cp.w	r11,1
80005006:	e0 89 00 05 	brgt	80005010 <_vfprintf_r+0xac4>
8000500a:	ed b5 00 00 	bld	r5,0x0
8000500e:	c3 51       	brne	80005078 <_vfprintf_r+0xb2c>
80005010:	2f f2       	sub	r2,-1
80005012:	c3 38       	rjmp	80005078 <_vfprintf_r+0xb2c>
80005014:	e0 40 00 66 	cp.w	r0,102
80005018:	c1 c1       	brne	80005050 <_vfprintf_r+0xb04>
8000501a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000501e:	58 02       	cp.w	r2,0
80005020:	e0 8a 00 0c 	brle	80005038 <_vfprintf_r+0xaec>
80005024:	40 2a       	lddsp	r10,sp[0x8]
80005026:	58 0a       	cp.w	r10,0
80005028:	c0 41       	brne	80005030 <_vfprintf_r+0xae4>
8000502a:	ed b5 00 00 	bld	r5,0x0
8000502e:	c2 51       	brne	80005078 <_vfprintf_r+0xb2c>
80005030:	2f f2       	sub	r2,-1
80005032:	40 29       	lddsp	r9,sp[0x8]
80005034:	12 02       	add	r2,r9
80005036:	c0 b8       	rjmp	8000504c <_vfprintf_r+0xb00>
80005038:	40 28       	lddsp	r8,sp[0x8]
8000503a:	58 08       	cp.w	r8,0
8000503c:	c0 61       	brne	80005048 <_vfprintf_r+0xafc>
8000503e:	ed b5 00 00 	bld	r5,0x0
80005042:	c0 30       	breq	80005048 <_vfprintf_r+0xafc>
80005044:	30 12       	mov	r2,1
80005046:	c1 98       	rjmp	80005078 <_vfprintf_r+0xb2c>
80005048:	40 22       	lddsp	r2,sp[0x8]
8000504a:	2f e2       	sub	r2,-2
8000504c:	36 60       	mov	r0,102
8000504e:	c1 58       	rjmp	80005078 <_vfprintf_r+0xb2c>
80005050:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005054:	40 6e       	lddsp	lr,sp[0x18]
80005056:	1c 32       	cp.w	r2,lr
80005058:	c0 65       	brlt	80005064 <_vfprintf_r+0xb18>
8000505a:	ed b5 00 00 	bld	r5,0x0
8000505e:	f7 b2 00 ff 	subeq	r2,-1
80005062:	c0 a8       	rjmp	80005076 <_vfprintf_r+0xb2a>
80005064:	e4 08 11 02 	rsub	r8,r2,2
80005068:	40 6c       	lddsp	r12,sp[0x18]
8000506a:	58 02       	cp.w	r2,0
8000506c:	f0 02 17 a0 	movle	r2,r8
80005070:	f9 b2 09 01 	movgt	r2,1
80005074:	18 02       	add	r2,r12
80005076:	36 70       	mov	r0,103
80005078:	40 9b       	lddsp	r11,sp[0x24]
8000507a:	58 0b       	cp.w	r11,0
8000507c:	e0 80 05 94 	breq	80005ba4 <_vfprintf_r+0x1658>
80005080:	32 d8       	mov	r8,45
80005082:	fb 68 06 bb 	st.b	sp[1723],r8
80005086:	e0 8f 05 93 	bral	80005bac <_vfprintf_r+0x1660>
8000508a:	50 a7       	stdsp	sp[0x28],r7
8000508c:	04 94       	mov	r4,r2
8000508e:	0c 97       	mov	r7,r6
80005090:	02 92       	mov	r2,r1
80005092:	06 96       	mov	r6,r3
80005094:	40 41       	lddsp	r1,sp[0x10]
80005096:	40 93       	lddsp	r3,sp[0x24]
80005098:	0e 99       	mov	r9,r7
8000509a:	ed b5 00 05 	bld	r5,0x5
8000509e:	c4 81       	brne	8000512e <_vfprintf_r+0xbe2>
800050a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050a4:	40 3e       	lddsp	lr,sp[0xc]
800050a6:	58 0e       	cp.w	lr,0
800050a8:	c1 d0       	breq	800050e2 <_vfprintf_r+0xb96>
800050aa:	10 36       	cp.w	r6,r8
800050ac:	c0 64       	brge	800050b8 <_vfprintf_r+0xb6c>
800050ae:	fa cc f9 44 	sub	r12,sp,-1724
800050b2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800050b6:	c1 d8       	rjmp	800050f0 <_vfprintf_r+0xba4>
800050b8:	fa c8 f9 50 	sub	r8,sp,-1712
800050bc:	1a d8       	st.w	--sp,r8
800050be:	fa c8 fa b8 	sub	r8,sp,-1352
800050c2:	04 9a       	mov	r10,r2
800050c4:	1a d8       	st.w	--sp,r8
800050c6:	fa c8 fb b4 	sub	r8,sp,-1100
800050ca:	0c 9b       	mov	r11,r6
800050cc:	1a d8       	st.w	--sp,r8
800050ce:	08 9c       	mov	r12,r4
800050d0:	fa c8 f9 40 	sub	r8,sp,-1728
800050d4:	fa c9 ff b4 	sub	r9,sp,-76
800050d8:	fe b0 f8 a2 	rcall	8000421c <get_arg>
800050dc:	2f dd       	sub	sp,-12
800050de:	78 0a       	ld.w	r10,r12[0x0]
800050e0:	c2 08       	rjmp	80005120 <_vfprintf_r+0xbd4>
800050e2:	2f f7       	sub	r7,-1
800050e4:	10 39       	cp.w	r9,r8
800050e6:	c0 84       	brge	800050f6 <_vfprintf_r+0xbaa>
800050e8:	fa cb f9 44 	sub	r11,sp,-1724
800050ec:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050f0:	ec fa fd 88 	ld.w	r10,r6[-632]
800050f4:	c1 68       	rjmp	80005120 <_vfprintf_r+0xbd4>
800050f6:	41 09       	lddsp	r9,sp[0x40]
800050f8:	59 f8       	cp.w	r8,31
800050fa:	e0 89 00 10 	brgt	8000511a <_vfprintf_r+0xbce>
800050fe:	f2 ca ff fc 	sub	r10,r9,-4
80005102:	51 0a       	stdsp	sp[0x40],r10
80005104:	fa c6 f9 44 	sub	r6,sp,-1724
80005108:	72 0a       	ld.w	r10,r9[0x0]
8000510a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000510e:	f3 4a fd 88 	st.w	r9[-632],r10
80005112:	2f f8       	sub	r8,-1
80005114:	fb 48 06 b4 	st.w	sp[1716],r8
80005118:	c0 48       	rjmp	80005120 <_vfprintf_r+0xbd4>
8000511a:	72 0a       	ld.w	r10,r9[0x0]
8000511c:	2f c9       	sub	r9,-4
8000511e:	51 09       	stdsp	sp[0x40],r9
80005120:	40 be       	lddsp	lr,sp[0x2c]
80005122:	1c 98       	mov	r8,lr
80005124:	95 1e       	st.w	r10[0x4],lr
80005126:	bf 58       	asr	r8,0x1f
80005128:	95 08       	st.w	r10[0x0],r8
8000512a:	fe 9f fa 9f 	bral	80004668 <_vfprintf_r+0x11c>
8000512e:	ed b5 00 04 	bld	r5,0x4
80005132:	c4 80       	breq	800051c2 <_vfprintf_r+0xc76>
80005134:	e2 15 00 40 	andl	r5,0x40,COH
80005138:	c4 50       	breq	800051c2 <_vfprintf_r+0xc76>
8000513a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000513e:	40 3c       	lddsp	r12,sp[0xc]
80005140:	58 0c       	cp.w	r12,0
80005142:	c1 d0       	breq	8000517c <_vfprintf_r+0xc30>
80005144:	10 36       	cp.w	r6,r8
80005146:	c0 64       	brge	80005152 <_vfprintf_r+0xc06>
80005148:	fa cb f9 44 	sub	r11,sp,-1724
8000514c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005150:	c1 d8       	rjmp	8000518a <_vfprintf_r+0xc3e>
80005152:	fa c8 f9 50 	sub	r8,sp,-1712
80005156:	1a d8       	st.w	--sp,r8
80005158:	fa c8 fa b8 	sub	r8,sp,-1352
8000515c:	04 9a       	mov	r10,r2
8000515e:	1a d8       	st.w	--sp,r8
80005160:	fa c8 fb b4 	sub	r8,sp,-1100
80005164:	0c 9b       	mov	r11,r6
80005166:	1a d8       	st.w	--sp,r8
80005168:	08 9c       	mov	r12,r4
8000516a:	fa c8 f9 40 	sub	r8,sp,-1728
8000516e:	fa c9 ff b4 	sub	r9,sp,-76
80005172:	fe b0 f8 55 	rcall	8000421c <get_arg>
80005176:	2f dd       	sub	sp,-12
80005178:	78 0a       	ld.w	r10,r12[0x0]
8000517a:	c2 08       	rjmp	800051ba <_vfprintf_r+0xc6e>
8000517c:	2f f7       	sub	r7,-1
8000517e:	10 39       	cp.w	r9,r8
80005180:	c0 84       	brge	80005190 <_vfprintf_r+0xc44>
80005182:	fa ca f9 44 	sub	r10,sp,-1724
80005186:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000518a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000518e:	c1 68       	rjmp	800051ba <_vfprintf_r+0xc6e>
80005190:	41 09       	lddsp	r9,sp[0x40]
80005192:	59 f8       	cp.w	r8,31
80005194:	e0 89 00 10 	brgt	800051b4 <_vfprintf_r+0xc68>
80005198:	f2 ca ff fc 	sub	r10,r9,-4
8000519c:	51 0a       	stdsp	sp[0x40],r10
8000519e:	fa c6 f9 44 	sub	r6,sp,-1724
800051a2:	72 0a       	ld.w	r10,r9[0x0]
800051a4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800051a8:	f3 4a fd 88 	st.w	r9[-632],r10
800051ac:	2f f8       	sub	r8,-1
800051ae:	fb 48 06 b4 	st.w	sp[1716],r8
800051b2:	c0 48       	rjmp	800051ba <_vfprintf_r+0xc6e>
800051b4:	72 0a       	ld.w	r10,r9[0x0]
800051b6:	2f c9       	sub	r9,-4
800051b8:	51 09       	stdsp	sp[0x40],r9
800051ba:	40 be       	lddsp	lr,sp[0x2c]
800051bc:	b4 0e       	st.h	r10[0x0],lr
800051be:	fe 9f fa 55 	bral	80004668 <_vfprintf_r+0x11c>
800051c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051c6:	40 3c       	lddsp	r12,sp[0xc]
800051c8:	58 0c       	cp.w	r12,0
800051ca:	c1 d0       	breq	80005204 <_vfprintf_r+0xcb8>
800051cc:	10 36       	cp.w	r6,r8
800051ce:	c0 64       	brge	800051da <_vfprintf_r+0xc8e>
800051d0:	fa cb f9 44 	sub	r11,sp,-1724
800051d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051d8:	c1 d8       	rjmp	80005212 <_vfprintf_r+0xcc6>
800051da:	fa c8 f9 50 	sub	r8,sp,-1712
800051de:	1a d8       	st.w	--sp,r8
800051e0:	fa c8 fa b8 	sub	r8,sp,-1352
800051e4:	04 9a       	mov	r10,r2
800051e6:	1a d8       	st.w	--sp,r8
800051e8:	fa c8 fb b4 	sub	r8,sp,-1100
800051ec:	0c 9b       	mov	r11,r6
800051ee:	1a d8       	st.w	--sp,r8
800051f0:	08 9c       	mov	r12,r4
800051f2:	fa c8 f9 40 	sub	r8,sp,-1728
800051f6:	fa c9 ff b4 	sub	r9,sp,-76
800051fa:	fe b0 f8 11 	rcall	8000421c <get_arg>
800051fe:	2f dd       	sub	sp,-12
80005200:	78 0a       	ld.w	r10,r12[0x0]
80005202:	c2 08       	rjmp	80005242 <_vfprintf_r+0xcf6>
80005204:	2f f7       	sub	r7,-1
80005206:	10 39       	cp.w	r9,r8
80005208:	c0 84       	brge	80005218 <_vfprintf_r+0xccc>
8000520a:	fa ca f9 44 	sub	r10,sp,-1724
8000520e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005212:	ec fa fd 88 	ld.w	r10,r6[-632]
80005216:	c1 68       	rjmp	80005242 <_vfprintf_r+0xcf6>
80005218:	41 09       	lddsp	r9,sp[0x40]
8000521a:	59 f8       	cp.w	r8,31
8000521c:	e0 89 00 10 	brgt	8000523c <_vfprintf_r+0xcf0>
80005220:	f2 ca ff fc 	sub	r10,r9,-4
80005224:	51 0a       	stdsp	sp[0x40],r10
80005226:	fa c6 f9 44 	sub	r6,sp,-1724
8000522a:	72 0a       	ld.w	r10,r9[0x0]
8000522c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005230:	f3 4a fd 88 	st.w	r9[-632],r10
80005234:	2f f8       	sub	r8,-1
80005236:	fb 48 06 b4 	st.w	sp[1716],r8
8000523a:	c0 48       	rjmp	80005242 <_vfprintf_r+0xcf6>
8000523c:	72 0a       	ld.w	r10,r9[0x0]
8000523e:	2f c9       	sub	r9,-4
80005240:	51 09       	stdsp	sp[0x40],r9
80005242:	40 be       	lddsp	lr,sp[0x2c]
80005244:	95 0e       	st.w	r10[0x0],lr
80005246:	fe 9f fa 11 	bral	80004668 <_vfprintf_r+0x11c>
8000524a:	50 a7       	stdsp	sp[0x28],r7
8000524c:	50 80       	stdsp	sp[0x20],r0
8000524e:	0c 97       	mov	r7,r6
80005250:	04 94       	mov	r4,r2
80005252:	06 96       	mov	r6,r3
80005254:	02 92       	mov	r2,r1
80005256:	40 93       	lddsp	r3,sp[0x24]
80005258:	10 90       	mov	r0,r8
8000525a:	40 41       	lddsp	r1,sp[0x10]
8000525c:	a5 a5       	sbr	r5,0x4
8000525e:	c0 a8       	rjmp	80005272 <_vfprintf_r+0xd26>
80005260:	50 a7       	stdsp	sp[0x28],r7
80005262:	50 80       	stdsp	sp[0x20],r0
80005264:	0c 97       	mov	r7,r6
80005266:	04 94       	mov	r4,r2
80005268:	06 96       	mov	r6,r3
8000526a:	02 92       	mov	r2,r1
8000526c:	40 93       	lddsp	r3,sp[0x24]
8000526e:	10 90       	mov	r0,r8
80005270:	40 41       	lddsp	r1,sp[0x10]
80005272:	ed b5 00 05 	bld	r5,0x5
80005276:	c5 d1       	brne	80005330 <_vfprintf_r+0xde4>
80005278:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000527c:	40 3c       	lddsp	r12,sp[0xc]
8000527e:	58 0c       	cp.w	r12,0
80005280:	c2 60       	breq	800052cc <_vfprintf_r+0xd80>
80005282:	10 36       	cp.w	r6,r8
80005284:	c0 a4       	brge	80005298 <_vfprintf_r+0xd4c>
80005286:	fa cb f9 44 	sub	r11,sp,-1724
8000528a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000528e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005292:	fa e9 00 00 	st.d	sp[0],r8
80005296:	c1 88       	rjmp	800052c6 <_vfprintf_r+0xd7a>
80005298:	fa c8 f9 50 	sub	r8,sp,-1712
8000529c:	1a d8       	st.w	--sp,r8
8000529e:	fa c8 fa b8 	sub	r8,sp,-1352
800052a2:	04 9a       	mov	r10,r2
800052a4:	1a d8       	st.w	--sp,r8
800052a6:	0c 9b       	mov	r11,r6
800052a8:	fa c8 fb b4 	sub	r8,sp,-1100
800052ac:	08 9c       	mov	r12,r4
800052ae:	1a d8       	st.w	--sp,r8
800052b0:	fa c8 f9 40 	sub	r8,sp,-1728
800052b4:	fa c9 ff b4 	sub	r9,sp,-76
800052b8:	fe b0 f7 b2 	rcall	8000421c <get_arg>
800052bc:	2f dd       	sub	sp,-12
800052be:	f8 ea 00 00 	ld.d	r10,r12[0]
800052c2:	fa eb 00 00 	st.d	sp[0],r10
800052c6:	30 08       	mov	r8,0
800052c8:	e0 8f 03 de 	bral	80005a84 <_vfprintf_r+0x1538>
800052cc:	ee ca ff ff 	sub	r10,r7,-1
800052d0:	10 37       	cp.w	r7,r8
800052d2:	c0 b4       	brge	800052e8 <_vfprintf_r+0xd9c>
800052d4:	fa c9 f9 44 	sub	r9,sp,-1724
800052d8:	14 97       	mov	r7,r10
800052da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052de:	ec ea fd 88 	ld.d	r10,r6[-632]
800052e2:	fa eb 00 00 	st.d	sp[0],r10
800052e6:	c1 88       	rjmp	80005316 <_vfprintf_r+0xdca>
800052e8:	41 09       	lddsp	r9,sp[0x40]
800052ea:	59 f8       	cp.w	r8,31
800052ec:	e0 89 00 18 	brgt	8000531c <_vfprintf_r+0xdd0>
800052f0:	f2 e6 00 00 	ld.d	r6,r9[0]
800052f4:	f2 cb ff f8 	sub	r11,r9,-8
800052f8:	fa e7 00 00 	st.d	sp[0],r6
800052fc:	51 0b       	stdsp	sp[0x40],r11
800052fe:	fa c6 f9 44 	sub	r6,sp,-1724
80005302:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005306:	fa e6 00 00 	ld.d	r6,sp[0]
8000530a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000530e:	2f f8       	sub	r8,-1
80005310:	14 97       	mov	r7,r10
80005312:	fb 48 06 b4 	st.w	sp[1716],r8
80005316:	40 38       	lddsp	r8,sp[0xc]
80005318:	e0 8f 03 b6 	bral	80005a84 <_vfprintf_r+0x1538>
8000531c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005320:	40 38       	lddsp	r8,sp[0xc]
80005322:	fa e7 00 00 	st.d	sp[0],r6
80005326:	2f 89       	sub	r9,-8
80005328:	14 97       	mov	r7,r10
8000532a:	51 09       	stdsp	sp[0x40],r9
8000532c:	e0 8f 03 ac 	bral	80005a84 <_vfprintf_r+0x1538>
80005330:	ed b5 00 04 	bld	r5,0x4
80005334:	c1 61       	brne	80005360 <_vfprintf_r+0xe14>
80005336:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000533a:	40 3e       	lddsp	lr,sp[0xc]
8000533c:	58 0e       	cp.w	lr,0
8000533e:	c0 80       	breq	8000534e <_vfprintf_r+0xe02>
80005340:	10 36       	cp.w	r6,r8
80005342:	c6 74       	brge	80005410 <_vfprintf_r+0xec4>
80005344:	fa cc f9 44 	sub	r12,sp,-1724
80005348:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000534c:	c8 08       	rjmp	8000544c <_vfprintf_r+0xf00>
8000534e:	ee ca ff ff 	sub	r10,r7,-1
80005352:	10 37       	cp.w	r7,r8
80005354:	c7 f4       	brge	80005452 <_vfprintf_r+0xf06>
80005356:	fa cb f9 44 	sub	r11,sp,-1724
8000535a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000535e:	c7 68       	rjmp	8000544a <_vfprintf_r+0xefe>
80005360:	ed b5 00 06 	bld	r5,0x6
80005364:	c4 a1       	brne	800053f8 <_vfprintf_r+0xeac>
80005366:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000536a:	40 3c       	lddsp	r12,sp[0xc]
8000536c:	58 0c       	cp.w	r12,0
8000536e:	c1 d0       	breq	800053a8 <_vfprintf_r+0xe5c>
80005370:	10 36       	cp.w	r6,r8
80005372:	c0 64       	brge	8000537e <_vfprintf_r+0xe32>
80005374:	fa cb f9 44 	sub	r11,sp,-1724
80005378:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000537c:	c1 f8       	rjmp	800053ba <_vfprintf_r+0xe6e>
8000537e:	fa c8 f9 50 	sub	r8,sp,-1712
80005382:	1a d8       	st.w	--sp,r8
80005384:	fa c8 fa b8 	sub	r8,sp,-1352
80005388:	1a d8       	st.w	--sp,r8
8000538a:	fa c8 fb b4 	sub	r8,sp,-1100
8000538e:	1a d8       	st.w	--sp,r8
80005390:	fa c8 f9 40 	sub	r8,sp,-1728
80005394:	fa c9 ff b4 	sub	r9,sp,-76
80005398:	04 9a       	mov	r10,r2
8000539a:	0c 9b       	mov	r11,r6
8000539c:	08 9c       	mov	r12,r4
8000539e:	fe b0 f7 3f 	rcall	8000421c <get_arg>
800053a2:	2f dd       	sub	sp,-12
800053a4:	98 18       	ld.sh	r8,r12[0x2]
800053a6:	c2 68       	rjmp	800053f2 <_vfprintf_r+0xea6>
800053a8:	ee ca ff ff 	sub	r10,r7,-1
800053ac:	10 37       	cp.w	r7,r8
800053ae:	c0 94       	brge	800053c0 <_vfprintf_r+0xe74>
800053b0:	fa c9 f9 44 	sub	r9,sp,-1724
800053b4:	14 97       	mov	r7,r10
800053b6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053ba:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800053be:	c1 a8       	rjmp	800053f2 <_vfprintf_r+0xea6>
800053c0:	41 09       	lddsp	r9,sp[0x40]
800053c2:	59 f8       	cp.w	r8,31
800053c4:	e0 89 00 13 	brgt	800053ea <_vfprintf_r+0xe9e>
800053c8:	f2 cb ff fc 	sub	r11,r9,-4
800053cc:	51 0b       	stdsp	sp[0x40],r11
800053ce:	72 09       	ld.w	r9,r9[0x0]
800053d0:	fa c6 f9 44 	sub	r6,sp,-1724
800053d4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800053d8:	2f f8       	sub	r8,-1
800053da:	f7 49 fd 88 	st.w	r11[-632],r9
800053de:	fb 48 06 b4 	st.w	sp[1716],r8
800053e2:	14 97       	mov	r7,r10
800053e4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800053e8:	c0 58       	rjmp	800053f2 <_vfprintf_r+0xea6>
800053ea:	92 18       	ld.sh	r8,r9[0x2]
800053ec:	14 97       	mov	r7,r10
800053ee:	2f c9       	sub	r9,-4
800053f0:	51 09       	stdsp	sp[0x40],r9
800053f2:	5c 78       	castu.h	r8
800053f4:	50 18       	stdsp	sp[0x4],r8
800053f6:	c4 68       	rjmp	80005482 <_vfprintf_r+0xf36>
800053f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053fc:	40 3c       	lddsp	r12,sp[0xc]
800053fe:	58 0c       	cp.w	r12,0
80005400:	c1 d0       	breq	8000543a <_vfprintf_r+0xeee>
80005402:	10 36       	cp.w	r6,r8
80005404:	c0 64       	brge	80005410 <_vfprintf_r+0xec4>
80005406:	fa cb f9 44 	sub	r11,sp,-1724
8000540a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000540e:	c1 f8       	rjmp	8000544c <_vfprintf_r+0xf00>
80005410:	fa c8 f9 50 	sub	r8,sp,-1712
80005414:	1a d8       	st.w	--sp,r8
80005416:	fa c8 fa b8 	sub	r8,sp,-1352
8000541a:	0c 9b       	mov	r11,r6
8000541c:	1a d8       	st.w	--sp,r8
8000541e:	fa c8 fb b4 	sub	r8,sp,-1100
80005422:	04 9a       	mov	r10,r2
80005424:	1a d8       	st.w	--sp,r8
80005426:	08 9c       	mov	r12,r4
80005428:	fa c8 f9 40 	sub	r8,sp,-1728
8000542c:	fa c9 ff b4 	sub	r9,sp,-76
80005430:	fe b0 f6 f6 	rcall	8000421c <get_arg>
80005434:	2f dd       	sub	sp,-12
80005436:	78 0b       	ld.w	r11,r12[0x0]
80005438:	c2 48       	rjmp	80005480 <_vfprintf_r+0xf34>
8000543a:	ee ca ff ff 	sub	r10,r7,-1
8000543e:	10 37       	cp.w	r7,r8
80005440:	c0 94       	brge	80005452 <_vfprintf_r+0xf06>
80005442:	fa c9 f9 44 	sub	r9,sp,-1724
80005446:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000544a:	14 97       	mov	r7,r10
8000544c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005450:	c1 88       	rjmp	80005480 <_vfprintf_r+0xf34>
80005452:	41 09       	lddsp	r9,sp[0x40]
80005454:	59 f8       	cp.w	r8,31
80005456:	e0 89 00 11 	brgt	80005478 <_vfprintf_r+0xf2c>
8000545a:	f2 cb ff fc 	sub	r11,r9,-4
8000545e:	51 0b       	stdsp	sp[0x40],r11
80005460:	fa c6 f9 44 	sub	r6,sp,-1724
80005464:	72 0b       	ld.w	r11,r9[0x0]
80005466:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000546a:	f3 4b fd 88 	st.w	r9[-632],r11
8000546e:	2f f8       	sub	r8,-1
80005470:	14 97       	mov	r7,r10
80005472:	fb 48 06 b4 	st.w	sp[1716],r8
80005476:	c0 58       	rjmp	80005480 <_vfprintf_r+0xf34>
80005478:	72 0b       	ld.w	r11,r9[0x0]
8000547a:	14 97       	mov	r7,r10
8000547c:	2f c9       	sub	r9,-4
8000547e:	51 09       	stdsp	sp[0x40],r9
80005480:	50 1b       	stdsp	sp[0x4],r11
80005482:	30 0e       	mov	lr,0
80005484:	50 0e       	stdsp	sp[0x0],lr
80005486:	1c 98       	mov	r8,lr
80005488:	e0 8f 02 fe 	bral	80005a84 <_vfprintf_r+0x1538>
8000548c:	50 a7       	stdsp	sp[0x28],r7
8000548e:	50 80       	stdsp	sp[0x20],r0
80005490:	0c 97       	mov	r7,r6
80005492:	04 94       	mov	r4,r2
80005494:	06 96       	mov	r6,r3
80005496:	02 92       	mov	r2,r1
80005498:	40 93       	lddsp	r3,sp[0x24]
8000549a:	40 41       	lddsp	r1,sp[0x10]
8000549c:	0e 99       	mov	r9,r7
8000549e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054a2:	40 3c       	lddsp	r12,sp[0xc]
800054a4:	58 0c       	cp.w	r12,0
800054a6:	c1 d0       	breq	800054e0 <_vfprintf_r+0xf94>
800054a8:	10 36       	cp.w	r6,r8
800054aa:	c0 64       	brge	800054b6 <_vfprintf_r+0xf6a>
800054ac:	fa cb f9 44 	sub	r11,sp,-1724
800054b0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054b4:	c1 d8       	rjmp	800054ee <_vfprintf_r+0xfa2>
800054b6:	fa c8 f9 50 	sub	r8,sp,-1712
800054ba:	1a d8       	st.w	--sp,r8
800054bc:	fa c8 fa b8 	sub	r8,sp,-1352
800054c0:	1a d8       	st.w	--sp,r8
800054c2:	fa c8 fb b4 	sub	r8,sp,-1100
800054c6:	1a d8       	st.w	--sp,r8
800054c8:	fa c9 ff b4 	sub	r9,sp,-76
800054cc:	fa c8 f9 40 	sub	r8,sp,-1728
800054d0:	04 9a       	mov	r10,r2
800054d2:	0c 9b       	mov	r11,r6
800054d4:	08 9c       	mov	r12,r4
800054d6:	fe b0 f6 a3 	rcall	8000421c <get_arg>
800054da:	2f dd       	sub	sp,-12
800054dc:	78 09       	ld.w	r9,r12[0x0]
800054de:	c2 18       	rjmp	80005520 <_vfprintf_r+0xfd4>
800054e0:	2f f7       	sub	r7,-1
800054e2:	10 39       	cp.w	r9,r8
800054e4:	c0 84       	brge	800054f4 <_vfprintf_r+0xfa8>
800054e6:	fa ca f9 44 	sub	r10,sp,-1724
800054ea:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054ee:	ec f9 fd 88 	ld.w	r9,r6[-632]
800054f2:	c1 78       	rjmp	80005520 <_vfprintf_r+0xfd4>
800054f4:	41 09       	lddsp	r9,sp[0x40]
800054f6:	59 f8       	cp.w	r8,31
800054f8:	e0 89 00 10 	brgt	80005518 <_vfprintf_r+0xfcc>
800054fc:	f2 ca ff fc 	sub	r10,r9,-4
80005500:	51 0a       	stdsp	sp[0x40],r10
80005502:	fa c6 f9 44 	sub	r6,sp,-1724
80005506:	72 09       	ld.w	r9,r9[0x0]
80005508:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000550c:	f5 49 fd 88 	st.w	r10[-632],r9
80005510:	2f f8       	sub	r8,-1
80005512:	fb 48 06 b4 	st.w	sp[1716],r8
80005516:	c0 58       	rjmp	80005520 <_vfprintf_r+0xfd4>
80005518:	f2 c8 ff fc 	sub	r8,r9,-4
8000551c:	51 08       	stdsp	sp[0x40],r8
8000551e:	72 09       	ld.w	r9,r9[0x0]
80005520:	33 08       	mov	r8,48
80005522:	fb 68 06 b8 	st.b	sp[1720],r8
80005526:	37 88       	mov	r8,120
80005528:	30 0e       	mov	lr,0
8000552a:	fb 68 06 b9 	st.b	sp[1721],r8
8000552e:	fe cc b6 b6 	sub	r12,pc,-18762
80005532:	50 19       	stdsp	sp[0x4],r9
80005534:	a1 b5       	sbr	r5,0x1
80005536:	50 0e       	stdsp	sp[0x0],lr
80005538:	50 dc       	stdsp	sp[0x34],r12
8000553a:	30 28       	mov	r8,2
8000553c:	37 80       	mov	r0,120
8000553e:	e0 8f 02 a3 	bral	80005a84 <_vfprintf_r+0x1538>
80005542:	50 a7       	stdsp	sp[0x28],r7
80005544:	50 80       	stdsp	sp[0x20],r0
80005546:	10 90       	mov	r0,r8
80005548:	30 08       	mov	r8,0
8000554a:	fb 68 06 bb 	st.b	sp[1723],r8
8000554e:	0c 97       	mov	r7,r6
80005550:	04 94       	mov	r4,r2
80005552:	06 96       	mov	r6,r3
80005554:	02 92       	mov	r2,r1
80005556:	40 93       	lddsp	r3,sp[0x24]
80005558:	40 41       	lddsp	r1,sp[0x10]
8000555a:	0e 99       	mov	r9,r7
8000555c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005560:	40 3b       	lddsp	r11,sp[0xc]
80005562:	58 0b       	cp.w	r11,0
80005564:	c1 d0       	breq	8000559e <_vfprintf_r+0x1052>
80005566:	10 36       	cp.w	r6,r8
80005568:	c0 64       	brge	80005574 <_vfprintf_r+0x1028>
8000556a:	fa ca f9 44 	sub	r10,sp,-1724
8000556e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005572:	c1 d8       	rjmp	800055ac <_vfprintf_r+0x1060>
80005574:	fa c8 f9 50 	sub	r8,sp,-1712
80005578:	1a d8       	st.w	--sp,r8
8000557a:	fa c8 fa b8 	sub	r8,sp,-1352
8000557e:	1a d8       	st.w	--sp,r8
80005580:	fa c8 fb b4 	sub	r8,sp,-1100
80005584:	0c 9b       	mov	r11,r6
80005586:	1a d8       	st.w	--sp,r8
80005588:	04 9a       	mov	r10,r2
8000558a:	fa c8 f9 40 	sub	r8,sp,-1728
8000558e:	fa c9 ff b4 	sub	r9,sp,-76
80005592:	08 9c       	mov	r12,r4
80005594:	fe b0 f6 44 	rcall	8000421c <get_arg>
80005598:	2f dd       	sub	sp,-12
8000559a:	78 06       	ld.w	r6,r12[0x0]
8000559c:	c2 08       	rjmp	800055dc <_vfprintf_r+0x1090>
8000559e:	2f f7       	sub	r7,-1
800055a0:	10 39       	cp.w	r9,r8
800055a2:	c0 84       	brge	800055b2 <_vfprintf_r+0x1066>
800055a4:	fa c9 f9 44 	sub	r9,sp,-1724
800055a8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055ac:	ec f6 fd 88 	ld.w	r6,r6[-632]
800055b0:	c1 68       	rjmp	800055dc <_vfprintf_r+0x1090>
800055b2:	41 09       	lddsp	r9,sp[0x40]
800055b4:	59 f8       	cp.w	r8,31
800055b6:	e0 89 00 10 	brgt	800055d6 <_vfprintf_r+0x108a>
800055ba:	f2 ca ff fc 	sub	r10,r9,-4
800055be:	51 0a       	stdsp	sp[0x40],r10
800055c0:	72 06       	ld.w	r6,r9[0x0]
800055c2:	fa ce f9 44 	sub	lr,sp,-1724
800055c6:	fc 08 00 39 	add	r9,lr,r8<<0x3
800055ca:	f3 46 fd 88 	st.w	r9[-632],r6
800055ce:	2f f8       	sub	r8,-1
800055d0:	fb 48 06 b4 	st.w	sp[1716],r8
800055d4:	c0 48       	rjmp	800055dc <_vfprintf_r+0x1090>
800055d6:	72 06       	ld.w	r6,r9[0x0]
800055d8:	2f c9       	sub	r9,-4
800055da:	51 09       	stdsp	sp[0x40],r9
800055dc:	40 2c       	lddsp	r12,sp[0x8]
800055de:	58 0c       	cp.w	r12,0
800055e0:	c1 05       	brlt	80005600 <_vfprintf_r+0x10b4>
800055e2:	18 9a       	mov	r10,r12
800055e4:	30 0b       	mov	r11,0
800055e6:	0c 9c       	mov	r12,r6
800055e8:	e0 a0 14 58 	rcall	80007e98 <memchr>
800055ec:	e0 80 02 df 	breq	80005baa <_vfprintf_r+0x165e>
800055f0:	f8 06 01 02 	sub	r2,r12,r6
800055f4:	40 2b       	lddsp	r11,sp[0x8]
800055f6:	16 32       	cp.w	r2,r11
800055f8:	e0 89 02 d9 	brgt	80005baa <_vfprintf_r+0x165e>
800055fc:	e0 8f 02 d4 	bral	80005ba4 <_vfprintf_r+0x1658>
80005600:	30 0a       	mov	r10,0
80005602:	0c 9c       	mov	r12,r6
80005604:	50 2a       	stdsp	sp[0x8],r10
80005606:	e0 a0 19 33 	rcall	8000886c <strlen>
8000560a:	18 92       	mov	r2,r12
8000560c:	e0 8f 02 d2 	bral	80005bb0 <_vfprintf_r+0x1664>
80005610:	50 a7       	stdsp	sp[0x28],r7
80005612:	50 80       	stdsp	sp[0x20],r0
80005614:	0c 97       	mov	r7,r6
80005616:	04 94       	mov	r4,r2
80005618:	06 96       	mov	r6,r3
8000561a:	02 92       	mov	r2,r1
8000561c:	40 93       	lddsp	r3,sp[0x24]
8000561e:	10 90       	mov	r0,r8
80005620:	40 41       	lddsp	r1,sp[0x10]
80005622:	a5 a5       	sbr	r5,0x4
80005624:	c0 a8       	rjmp	80005638 <_vfprintf_r+0x10ec>
80005626:	50 a7       	stdsp	sp[0x28],r7
80005628:	50 80       	stdsp	sp[0x20],r0
8000562a:	0c 97       	mov	r7,r6
8000562c:	04 94       	mov	r4,r2
8000562e:	06 96       	mov	r6,r3
80005630:	02 92       	mov	r2,r1
80005632:	40 93       	lddsp	r3,sp[0x24]
80005634:	10 90       	mov	r0,r8
80005636:	40 41       	lddsp	r1,sp[0x10]
80005638:	ed b5 00 05 	bld	r5,0x5
8000563c:	c5 61       	brne	800056e8 <_vfprintf_r+0x119c>
8000563e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005642:	40 39       	lddsp	r9,sp[0xc]
80005644:	58 09       	cp.w	r9,0
80005646:	c2 10       	breq	80005688 <_vfprintf_r+0x113c>
80005648:	10 36       	cp.w	r6,r8
8000564a:	c0 74       	brge	80005658 <_vfprintf_r+0x110c>
8000564c:	fa c8 f9 44 	sub	r8,sp,-1724
80005650:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005654:	c2 38       	rjmp	8000569a <_vfprintf_r+0x114e>
80005656:	d7 03       	nop
80005658:	fa c8 f9 50 	sub	r8,sp,-1712
8000565c:	1a d8       	st.w	--sp,r8
8000565e:	fa c8 fa b8 	sub	r8,sp,-1352
80005662:	1a d8       	st.w	--sp,r8
80005664:	fa c8 fb b4 	sub	r8,sp,-1100
80005668:	1a d8       	st.w	--sp,r8
8000566a:	fa c8 f9 40 	sub	r8,sp,-1728
8000566e:	fa c9 ff b4 	sub	r9,sp,-76
80005672:	04 9a       	mov	r10,r2
80005674:	0c 9b       	mov	r11,r6
80005676:	08 9c       	mov	r12,r4
80005678:	fe b0 f5 d2 	rcall	8000421c <get_arg>
8000567c:	2f dd       	sub	sp,-12
8000567e:	f8 e8 00 00 	ld.d	r8,r12[0]
80005682:	fa e9 00 00 	st.d	sp[0],r8
80005686:	c2 e8       	rjmp	800056e2 <_vfprintf_r+0x1196>
80005688:	ee ca ff ff 	sub	r10,r7,-1
8000568c:	10 37       	cp.w	r7,r8
8000568e:	c0 b4       	brge	800056a4 <_vfprintf_r+0x1158>
80005690:	fa c8 f9 44 	sub	r8,sp,-1724
80005694:	14 97       	mov	r7,r10
80005696:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000569a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000569e:	fa eb 00 00 	st.d	sp[0],r10
800056a2:	c2 08       	rjmp	800056e2 <_vfprintf_r+0x1196>
800056a4:	41 09       	lddsp	r9,sp[0x40]
800056a6:	59 f8       	cp.w	r8,31
800056a8:	e0 89 00 16 	brgt	800056d4 <_vfprintf_r+0x1188>
800056ac:	f2 e6 00 00 	ld.d	r6,r9[0]
800056b0:	f2 cb ff f8 	sub	r11,r9,-8
800056b4:	fa e7 00 00 	st.d	sp[0],r6
800056b8:	51 0b       	stdsp	sp[0x40],r11
800056ba:	fa c6 f9 44 	sub	r6,sp,-1724
800056be:	ec 08 00 39 	add	r9,r6,r8<<0x3
800056c2:	fa e6 00 00 	ld.d	r6,sp[0]
800056c6:	f2 e7 fd 88 	st.d	r9[-632],r6
800056ca:	2f f8       	sub	r8,-1
800056cc:	14 97       	mov	r7,r10
800056ce:	fb 48 06 b4 	st.w	sp[1716],r8
800056d2:	c0 88       	rjmp	800056e2 <_vfprintf_r+0x1196>
800056d4:	f2 e6 00 00 	ld.d	r6,r9[0]
800056d8:	2f 89       	sub	r9,-8
800056da:	fa e7 00 00 	st.d	sp[0],r6
800056de:	51 09       	stdsp	sp[0x40],r9
800056e0:	14 97       	mov	r7,r10
800056e2:	30 18       	mov	r8,1
800056e4:	e0 8f 01 d0 	bral	80005a84 <_vfprintf_r+0x1538>
800056e8:	ed b5 00 04 	bld	r5,0x4
800056ec:	c1 61       	brne	80005718 <_vfprintf_r+0x11cc>
800056ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056f2:	40 3e       	lddsp	lr,sp[0xc]
800056f4:	58 0e       	cp.w	lr,0
800056f6:	c0 80       	breq	80005706 <_vfprintf_r+0x11ba>
800056f8:	10 36       	cp.w	r6,r8
800056fa:	c6 74       	brge	800057c8 <_vfprintf_r+0x127c>
800056fc:	fa cc f9 44 	sub	r12,sp,-1724
80005700:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005704:	c8 08       	rjmp	80005804 <_vfprintf_r+0x12b8>
80005706:	ee ca ff ff 	sub	r10,r7,-1
8000570a:	10 37       	cp.w	r7,r8
8000570c:	c7 f4       	brge	8000580a <_vfprintf_r+0x12be>
8000570e:	fa cb f9 44 	sub	r11,sp,-1724
80005712:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005716:	c7 68       	rjmp	80005802 <_vfprintf_r+0x12b6>
80005718:	ed b5 00 06 	bld	r5,0x6
8000571c:	c4 a1       	brne	800057b0 <_vfprintf_r+0x1264>
8000571e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005722:	40 3c       	lddsp	r12,sp[0xc]
80005724:	58 0c       	cp.w	r12,0
80005726:	c1 d0       	breq	80005760 <_vfprintf_r+0x1214>
80005728:	10 36       	cp.w	r6,r8
8000572a:	c0 64       	brge	80005736 <_vfprintf_r+0x11ea>
8000572c:	fa cb f9 44 	sub	r11,sp,-1724
80005730:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005734:	c1 f8       	rjmp	80005772 <_vfprintf_r+0x1226>
80005736:	fa c8 f9 50 	sub	r8,sp,-1712
8000573a:	1a d8       	st.w	--sp,r8
8000573c:	fa c8 fa b8 	sub	r8,sp,-1352
80005740:	1a d8       	st.w	--sp,r8
80005742:	fa c8 fb b4 	sub	r8,sp,-1100
80005746:	1a d8       	st.w	--sp,r8
80005748:	fa c8 f9 40 	sub	r8,sp,-1728
8000574c:	fa c9 ff b4 	sub	r9,sp,-76
80005750:	04 9a       	mov	r10,r2
80005752:	0c 9b       	mov	r11,r6
80005754:	08 9c       	mov	r12,r4
80005756:	fe b0 f5 63 	rcall	8000421c <get_arg>
8000575a:	2f dd       	sub	sp,-12
8000575c:	98 18       	ld.sh	r8,r12[0x2]
8000575e:	c2 68       	rjmp	800057aa <_vfprintf_r+0x125e>
80005760:	ee ca ff ff 	sub	r10,r7,-1
80005764:	10 37       	cp.w	r7,r8
80005766:	c0 94       	brge	80005778 <_vfprintf_r+0x122c>
80005768:	fa c9 f9 44 	sub	r9,sp,-1724
8000576c:	14 97       	mov	r7,r10
8000576e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005772:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005776:	c1 a8       	rjmp	800057aa <_vfprintf_r+0x125e>
80005778:	41 09       	lddsp	r9,sp[0x40]
8000577a:	59 f8       	cp.w	r8,31
8000577c:	e0 89 00 13 	brgt	800057a2 <_vfprintf_r+0x1256>
80005780:	f2 cb ff fc 	sub	r11,r9,-4
80005784:	51 0b       	stdsp	sp[0x40],r11
80005786:	72 09       	ld.w	r9,r9[0x0]
80005788:	fa c6 f9 44 	sub	r6,sp,-1724
8000578c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005790:	2f f8       	sub	r8,-1
80005792:	f7 49 fd 88 	st.w	r11[-632],r9
80005796:	fb 48 06 b4 	st.w	sp[1716],r8
8000579a:	14 97       	mov	r7,r10
8000579c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800057a0:	c0 58       	rjmp	800057aa <_vfprintf_r+0x125e>
800057a2:	92 18       	ld.sh	r8,r9[0x2]
800057a4:	14 97       	mov	r7,r10
800057a6:	2f c9       	sub	r9,-4
800057a8:	51 09       	stdsp	sp[0x40],r9
800057aa:	5c 78       	castu.h	r8
800057ac:	50 18       	stdsp	sp[0x4],r8
800057ae:	c4 68       	rjmp	8000583a <_vfprintf_r+0x12ee>
800057b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057b4:	40 3c       	lddsp	r12,sp[0xc]
800057b6:	58 0c       	cp.w	r12,0
800057b8:	c1 d0       	breq	800057f2 <_vfprintf_r+0x12a6>
800057ba:	10 36       	cp.w	r6,r8
800057bc:	c0 64       	brge	800057c8 <_vfprintf_r+0x127c>
800057be:	fa cb f9 44 	sub	r11,sp,-1724
800057c2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800057c6:	c1 f8       	rjmp	80005804 <_vfprintf_r+0x12b8>
800057c8:	fa c8 f9 50 	sub	r8,sp,-1712
800057cc:	1a d8       	st.w	--sp,r8
800057ce:	fa c8 fa b8 	sub	r8,sp,-1352
800057d2:	0c 9b       	mov	r11,r6
800057d4:	1a d8       	st.w	--sp,r8
800057d6:	fa c8 fb b4 	sub	r8,sp,-1100
800057da:	04 9a       	mov	r10,r2
800057dc:	1a d8       	st.w	--sp,r8
800057de:	08 9c       	mov	r12,r4
800057e0:	fa c8 f9 40 	sub	r8,sp,-1728
800057e4:	fa c9 ff b4 	sub	r9,sp,-76
800057e8:	fe b0 f5 1a 	rcall	8000421c <get_arg>
800057ec:	2f dd       	sub	sp,-12
800057ee:	78 0b       	ld.w	r11,r12[0x0]
800057f0:	c2 48       	rjmp	80005838 <_vfprintf_r+0x12ec>
800057f2:	ee ca ff ff 	sub	r10,r7,-1
800057f6:	10 37       	cp.w	r7,r8
800057f8:	c0 94       	brge	8000580a <_vfprintf_r+0x12be>
800057fa:	fa c9 f9 44 	sub	r9,sp,-1724
800057fe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005802:	14 97       	mov	r7,r10
80005804:	ec fb fd 88 	ld.w	r11,r6[-632]
80005808:	c1 88       	rjmp	80005838 <_vfprintf_r+0x12ec>
8000580a:	41 09       	lddsp	r9,sp[0x40]
8000580c:	59 f8       	cp.w	r8,31
8000580e:	e0 89 00 11 	brgt	80005830 <_vfprintf_r+0x12e4>
80005812:	f2 cb ff fc 	sub	r11,r9,-4
80005816:	51 0b       	stdsp	sp[0x40],r11
80005818:	fa c6 f9 44 	sub	r6,sp,-1724
8000581c:	72 0b       	ld.w	r11,r9[0x0]
8000581e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005822:	f3 4b fd 88 	st.w	r9[-632],r11
80005826:	2f f8       	sub	r8,-1
80005828:	14 97       	mov	r7,r10
8000582a:	fb 48 06 b4 	st.w	sp[1716],r8
8000582e:	c0 58       	rjmp	80005838 <_vfprintf_r+0x12ec>
80005830:	72 0b       	ld.w	r11,r9[0x0]
80005832:	14 97       	mov	r7,r10
80005834:	2f c9       	sub	r9,-4
80005836:	51 09       	stdsp	sp[0x40],r9
80005838:	50 1b       	stdsp	sp[0x4],r11
8000583a:	30 0e       	mov	lr,0
8000583c:	30 18       	mov	r8,1
8000583e:	50 0e       	stdsp	sp[0x0],lr
80005840:	c2 29       	rjmp	80005a84 <_vfprintf_r+0x1538>
80005842:	50 a7       	stdsp	sp[0x28],r7
80005844:	50 80       	stdsp	sp[0x20],r0
80005846:	0c 97       	mov	r7,r6
80005848:	04 94       	mov	r4,r2
8000584a:	06 96       	mov	r6,r3
8000584c:	02 92       	mov	r2,r1
8000584e:	fe cc b9 d6 	sub	r12,pc,-17962
80005852:	40 93       	lddsp	r3,sp[0x24]
80005854:	10 90       	mov	r0,r8
80005856:	40 41       	lddsp	r1,sp[0x10]
80005858:	50 dc       	stdsp	sp[0x34],r12
8000585a:	ed b5 00 05 	bld	r5,0x5
8000585e:	c5 51       	brne	80005908 <_vfprintf_r+0x13bc>
80005860:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005864:	40 3b       	lddsp	r11,sp[0xc]
80005866:	58 0b       	cp.w	r11,0
80005868:	c2 20       	breq	800058ac <_vfprintf_r+0x1360>
8000586a:	10 36       	cp.w	r6,r8
8000586c:	c0 a4       	brge	80005880 <_vfprintf_r+0x1334>
8000586e:	fa ca f9 44 	sub	r10,sp,-1724
80005872:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005876:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000587a:	fa e9 00 00 	st.d	sp[0],r8
8000587e:	cf 28       	rjmp	80005a62 <_vfprintf_r+0x1516>
80005880:	fa c8 f9 50 	sub	r8,sp,-1712
80005884:	1a d8       	st.w	--sp,r8
80005886:	fa c8 fa b8 	sub	r8,sp,-1352
8000588a:	04 9a       	mov	r10,r2
8000588c:	1a d8       	st.w	--sp,r8
8000588e:	0c 9b       	mov	r11,r6
80005890:	fa c8 fb b4 	sub	r8,sp,-1100
80005894:	08 9c       	mov	r12,r4
80005896:	1a d8       	st.w	--sp,r8
80005898:	fa c8 f9 40 	sub	r8,sp,-1728
8000589c:	fa c9 ff b4 	sub	r9,sp,-76
800058a0:	fe b0 f4 be 	rcall	8000421c <get_arg>
800058a4:	2f dd       	sub	sp,-12
800058a6:	f8 ea 00 00 	ld.d	r10,r12[0]
800058aa:	c0 c8       	rjmp	800058c2 <_vfprintf_r+0x1376>
800058ac:	ee ca ff ff 	sub	r10,r7,-1
800058b0:	10 37       	cp.w	r7,r8
800058b2:	c0 b4       	brge	800058c8 <_vfprintf_r+0x137c>
800058b4:	fa c9 f9 44 	sub	r9,sp,-1724
800058b8:	14 97       	mov	r7,r10
800058ba:	f2 06 00 36 	add	r6,r9,r6<<0x3
800058be:	ec ea fd 88 	ld.d	r10,r6[-632]
800058c2:	fa eb 00 00 	st.d	sp[0],r10
800058c6:	cc e8       	rjmp	80005a62 <_vfprintf_r+0x1516>
800058c8:	41 09       	lddsp	r9,sp[0x40]
800058ca:	59 f8       	cp.w	r8,31
800058cc:	e0 89 00 16 	brgt	800058f8 <_vfprintf_r+0x13ac>
800058d0:	f2 e6 00 00 	ld.d	r6,r9[0]
800058d4:	f2 cb ff f8 	sub	r11,r9,-8
800058d8:	fa e7 00 00 	st.d	sp[0],r6
800058dc:	51 0b       	stdsp	sp[0x40],r11
800058de:	fa c6 f9 44 	sub	r6,sp,-1724
800058e2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800058e6:	fa e6 00 00 	ld.d	r6,sp[0]
800058ea:	f2 e7 fd 88 	st.d	r9[-632],r6
800058ee:	2f f8       	sub	r8,-1
800058f0:	14 97       	mov	r7,r10
800058f2:	fb 48 06 b4 	st.w	sp[1716],r8
800058f6:	cb 68       	rjmp	80005a62 <_vfprintf_r+0x1516>
800058f8:	f2 e6 00 00 	ld.d	r6,r9[0]
800058fc:	2f 89       	sub	r9,-8
800058fe:	fa e7 00 00 	st.d	sp[0],r6
80005902:	51 09       	stdsp	sp[0x40],r9
80005904:	14 97       	mov	r7,r10
80005906:	ca e8       	rjmp	80005a62 <_vfprintf_r+0x1516>
80005908:	ed b5 00 04 	bld	r5,0x4
8000590c:	c1 71       	brne	8000593a <_vfprintf_r+0x13ee>
8000590e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005912:	40 3e       	lddsp	lr,sp[0xc]
80005914:	58 0e       	cp.w	lr,0
80005916:	c0 80       	breq	80005926 <_vfprintf_r+0x13da>
80005918:	10 36       	cp.w	r6,r8
8000591a:	c6 94       	brge	800059ec <_vfprintf_r+0x14a0>
8000591c:	fa cc f9 44 	sub	r12,sp,-1724
80005920:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005924:	c8 28       	rjmp	80005a28 <_vfprintf_r+0x14dc>
80005926:	ee ca ff ff 	sub	r10,r7,-1
8000592a:	10 37       	cp.w	r7,r8
8000592c:	e0 84 00 81 	brge	80005a2e <_vfprintf_r+0x14e2>
80005930:	fa cb f9 44 	sub	r11,sp,-1724
80005934:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005938:	c7 78       	rjmp	80005a26 <_vfprintf_r+0x14da>
8000593a:	ed b5 00 06 	bld	r5,0x6
8000593e:	c4 b1       	brne	800059d4 <_vfprintf_r+0x1488>
80005940:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005944:	40 3c       	lddsp	r12,sp[0xc]
80005946:	58 0c       	cp.w	r12,0
80005948:	c1 d0       	breq	80005982 <_vfprintf_r+0x1436>
8000594a:	10 36       	cp.w	r6,r8
8000594c:	c0 64       	brge	80005958 <_vfprintf_r+0x140c>
8000594e:	fa cb f9 44 	sub	r11,sp,-1724
80005952:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005956:	c1 f8       	rjmp	80005994 <_vfprintf_r+0x1448>
80005958:	fa c8 f9 50 	sub	r8,sp,-1712
8000595c:	1a d8       	st.w	--sp,r8
8000595e:	fa c8 fa b8 	sub	r8,sp,-1352
80005962:	1a d8       	st.w	--sp,r8
80005964:	fa c8 fb b4 	sub	r8,sp,-1100
80005968:	1a d8       	st.w	--sp,r8
8000596a:	fa c8 f9 40 	sub	r8,sp,-1728
8000596e:	fa c9 ff b4 	sub	r9,sp,-76
80005972:	04 9a       	mov	r10,r2
80005974:	0c 9b       	mov	r11,r6
80005976:	08 9c       	mov	r12,r4
80005978:	fe b0 f4 52 	rcall	8000421c <get_arg>
8000597c:	2f dd       	sub	sp,-12
8000597e:	98 18       	ld.sh	r8,r12[0x2]
80005980:	c2 78       	rjmp	800059ce <_vfprintf_r+0x1482>
80005982:	ee ca ff ff 	sub	r10,r7,-1
80005986:	10 37       	cp.w	r7,r8
80005988:	c0 a4       	brge	8000599c <_vfprintf_r+0x1450>
8000598a:	fa c9 f9 44 	sub	r9,sp,-1724
8000598e:	14 97       	mov	r7,r10
80005990:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005994:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005998:	c1 b8       	rjmp	800059ce <_vfprintf_r+0x1482>
8000599a:	d7 03       	nop
8000599c:	41 09       	lddsp	r9,sp[0x40]
8000599e:	59 f8       	cp.w	r8,31
800059a0:	e0 89 00 13 	brgt	800059c6 <_vfprintf_r+0x147a>
800059a4:	f2 cb ff fc 	sub	r11,r9,-4
800059a8:	51 0b       	stdsp	sp[0x40],r11
800059aa:	72 09       	ld.w	r9,r9[0x0]
800059ac:	fa c6 f9 44 	sub	r6,sp,-1724
800059b0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800059b4:	2f f8       	sub	r8,-1
800059b6:	f7 49 fd 88 	st.w	r11[-632],r9
800059ba:	fb 48 06 b4 	st.w	sp[1716],r8
800059be:	14 97       	mov	r7,r10
800059c0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800059c4:	c0 58       	rjmp	800059ce <_vfprintf_r+0x1482>
800059c6:	92 18       	ld.sh	r8,r9[0x2]
800059c8:	14 97       	mov	r7,r10
800059ca:	2f c9       	sub	r9,-4
800059cc:	51 09       	stdsp	sp[0x40],r9
800059ce:	5c 78       	castu.h	r8
800059d0:	50 18       	stdsp	sp[0x4],r8
800059d2:	c4 68       	rjmp	80005a5e <_vfprintf_r+0x1512>
800059d4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059d8:	40 3c       	lddsp	r12,sp[0xc]
800059da:	58 0c       	cp.w	r12,0
800059dc:	c1 d0       	breq	80005a16 <_vfprintf_r+0x14ca>
800059de:	10 36       	cp.w	r6,r8
800059e0:	c0 64       	brge	800059ec <_vfprintf_r+0x14a0>
800059e2:	fa cb f9 44 	sub	r11,sp,-1724
800059e6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059ea:	c1 f8       	rjmp	80005a28 <_vfprintf_r+0x14dc>
800059ec:	fa c8 f9 50 	sub	r8,sp,-1712
800059f0:	1a d8       	st.w	--sp,r8
800059f2:	fa c8 fa b8 	sub	r8,sp,-1352
800059f6:	0c 9b       	mov	r11,r6
800059f8:	1a d8       	st.w	--sp,r8
800059fa:	fa c8 fb b4 	sub	r8,sp,-1100
800059fe:	04 9a       	mov	r10,r2
80005a00:	1a d8       	st.w	--sp,r8
80005a02:	08 9c       	mov	r12,r4
80005a04:	fa c8 f9 40 	sub	r8,sp,-1728
80005a08:	fa c9 ff b4 	sub	r9,sp,-76
80005a0c:	fe b0 f4 08 	rcall	8000421c <get_arg>
80005a10:	2f dd       	sub	sp,-12
80005a12:	78 0b       	ld.w	r11,r12[0x0]
80005a14:	c2 48       	rjmp	80005a5c <_vfprintf_r+0x1510>
80005a16:	ee ca ff ff 	sub	r10,r7,-1
80005a1a:	10 37       	cp.w	r7,r8
80005a1c:	c0 94       	brge	80005a2e <_vfprintf_r+0x14e2>
80005a1e:	fa c9 f9 44 	sub	r9,sp,-1724
80005a22:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a26:	14 97       	mov	r7,r10
80005a28:	ec fb fd 88 	ld.w	r11,r6[-632]
80005a2c:	c1 88       	rjmp	80005a5c <_vfprintf_r+0x1510>
80005a2e:	41 09       	lddsp	r9,sp[0x40]
80005a30:	59 f8       	cp.w	r8,31
80005a32:	e0 89 00 11 	brgt	80005a54 <_vfprintf_r+0x1508>
80005a36:	f2 cb ff fc 	sub	r11,r9,-4
80005a3a:	51 0b       	stdsp	sp[0x40],r11
80005a3c:	fa c6 f9 44 	sub	r6,sp,-1724
80005a40:	72 0b       	ld.w	r11,r9[0x0]
80005a42:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a46:	f3 4b fd 88 	st.w	r9[-632],r11
80005a4a:	2f f8       	sub	r8,-1
80005a4c:	14 97       	mov	r7,r10
80005a4e:	fb 48 06 b4 	st.w	sp[1716],r8
80005a52:	c0 58       	rjmp	80005a5c <_vfprintf_r+0x1510>
80005a54:	72 0b       	ld.w	r11,r9[0x0]
80005a56:	14 97       	mov	r7,r10
80005a58:	2f c9       	sub	r9,-4
80005a5a:	51 09       	stdsp	sp[0x40],r9
80005a5c:	50 1b       	stdsp	sp[0x4],r11
80005a5e:	30 0e       	mov	lr,0
80005a60:	50 0e       	stdsp	sp[0x0],lr
80005a62:	40 08       	lddsp	r8,sp[0x0]
80005a64:	40 1c       	lddsp	r12,sp[0x4]
80005a66:	18 48       	or	r8,r12
80005a68:	5f 19       	srne	r9
80005a6a:	0a 98       	mov	r8,r5
80005a6c:	eb e9 00 09 	and	r9,r5,r9
80005a70:	a1 b8       	sbr	r8,0x1
80005a72:	58 09       	cp.w	r9,0
80005a74:	c0 70       	breq	80005a82 <_vfprintf_r+0x1536>
80005a76:	10 95       	mov	r5,r8
80005a78:	fb 60 06 b9 	st.b	sp[1721],r0
80005a7c:	33 08       	mov	r8,48
80005a7e:	fb 68 06 b8 	st.b	sp[1720],r8
80005a82:	30 28       	mov	r8,2
80005a84:	30 09       	mov	r9,0
80005a86:	fb 69 06 bb 	st.b	sp[1723],r9
80005a8a:	0a 99       	mov	r9,r5
80005a8c:	a7 d9       	cbr	r9,0x7
80005a8e:	40 2b       	lddsp	r11,sp[0x8]
80005a90:	40 16       	lddsp	r6,sp[0x4]
80005a92:	58 0b       	cp.w	r11,0
80005a94:	5f 1a       	srne	r10
80005a96:	f2 05 17 40 	movge	r5,r9
80005a9a:	fa c2 f9 78 	sub	r2,sp,-1672
80005a9e:	40 09       	lddsp	r9,sp[0x0]
80005aa0:	0c 49       	or	r9,r6
80005aa2:	5f 19       	srne	r9
80005aa4:	f5 e9 10 09 	or	r9,r10,r9
80005aa8:	c5 c0       	breq	80005b60 <_vfprintf_r+0x1614>
80005aaa:	30 19       	mov	r9,1
80005aac:	f2 08 18 00 	cp.b	r8,r9
80005ab0:	c0 60       	breq	80005abc <_vfprintf_r+0x1570>
80005ab2:	30 29       	mov	r9,2
80005ab4:	f2 08 18 00 	cp.b	r8,r9
80005ab8:	c0 41       	brne	80005ac0 <_vfprintf_r+0x1574>
80005aba:	c3 c8       	rjmp	80005b32 <_vfprintf_r+0x15e6>
80005abc:	04 96       	mov	r6,r2
80005abe:	c3 08       	rjmp	80005b1e <_vfprintf_r+0x15d2>
80005ac0:	04 96       	mov	r6,r2
80005ac2:	fa e8 00 00 	ld.d	r8,sp[0]
80005ac6:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005aca:	2d 0a       	sub	r10,-48
80005acc:	0c fa       	st.b	--r6,r10
80005ace:	f0 0b 16 03 	lsr	r11,r8,0x3
80005ad2:	f2 0c 16 03 	lsr	r12,r9,0x3
80005ad6:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005ada:	18 99       	mov	r9,r12
80005adc:	16 98       	mov	r8,r11
80005ade:	58 08       	cp.w	r8,0
80005ae0:	5c 29       	cpc	r9
80005ae2:	cf 21       	brne	80005ac6 <_vfprintf_r+0x157a>
80005ae4:	fa e9 00 00 	st.d	sp[0],r8
80005ae8:	ed b5 00 00 	bld	r5,0x0
80005aec:	c4 51       	brne	80005b76 <_vfprintf_r+0x162a>
80005aee:	33 09       	mov	r9,48
80005af0:	f2 0a 18 00 	cp.b	r10,r9
80005af4:	c4 10       	breq	80005b76 <_vfprintf_r+0x162a>
80005af6:	0c f9       	st.b	--r6,r9
80005af8:	c3 f8       	rjmp	80005b76 <_vfprintf_r+0x162a>
80005afa:	fa ea 00 00 	ld.d	r10,sp[0]
80005afe:	30 a8       	mov	r8,10
80005b00:	30 09       	mov	r9,0
80005b02:	e0 a0 1c 9f 	rcall	80009440 <__avr32_umod64>
80005b06:	30 a8       	mov	r8,10
80005b08:	2d 0a       	sub	r10,-48
80005b0a:	30 09       	mov	r9,0
80005b0c:	ac 8a       	st.b	r6[0x0],r10
80005b0e:	fa ea 00 00 	ld.d	r10,sp[0]
80005b12:	e0 a0 1b 65 	rcall	800091dc <__avr32_udiv64>
80005b16:	16 99       	mov	r9,r11
80005b18:	14 98       	mov	r8,r10
80005b1a:	fa e9 00 00 	st.d	sp[0],r8
80005b1e:	20 16       	sub	r6,1
80005b20:	fa ea 00 00 	ld.d	r10,sp[0]
80005b24:	58 9a       	cp.w	r10,9
80005b26:	5c 2b       	cpc	r11
80005b28:	fe 9b ff e9 	brhi	80005afa <_vfprintf_r+0x15ae>
80005b2c:	1b f8       	ld.ub	r8,sp[0x7]
80005b2e:	2d 08       	sub	r8,-48
80005b30:	c2 08       	rjmp	80005b70 <_vfprintf_r+0x1624>
80005b32:	04 96       	mov	r6,r2
80005b34:	fa e8 00 00 	ld.d	r8,sp[0]
80005b38:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005b3c:	40 de       	lddsp	lr,sp[0x34]
80005b3e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005b42:	0c fa       	st.b	--r6,r10
80005b44:	f2 0b 16 04 	lsr	r11,r9,0x4
80005b48:	f0 0a 16 04 	lsr	r10,r8,0x4
80005b4c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005b50:	16 99       	mov	r9,r11
80005b52:	14 98       	mov	r8,r10
80005b54:	58 08       	cp.w	r8,0
80005b56:	5c 29       	cpc	r9
80005b58:	cf 01       	brne	80005b38 <_vfprintf_r+0x15ec>
80005b5a:	fa e9 00 00 	st.d	sp[0],r8
80005b5e:	c0 c8       	rjmp	80005b76 <_vfprintf_r+0x162a>
80005b60:	58 08       	cp.w	r8,0
80005b62:	c0 91       	brne	80005b74 <_vfprintf_r+0x1628>
80005b64:	ed b5 00 00 	bld	r5,0x0
80005b68:	c0 61       	brne	80005b74 <_vfprintf_r+0x1628>
80005b6a:	fa c6 f9 79 	sub	r6,sp,-1671
80005b6e:	33 08       	mov	r8,48
80005b70:	ac 88       	st.b	r6[0x0],r8
80005b72:	c0 28       	rjmp	80005b76 <_vfprintf_r+0x162a>
80005b74:	04 96       	mov	r6,r2
80005b76:	0c 12       	sub	r2,r6
80005b78:	c1 c8       	rjmp	80005bb0 <_vfprintf_r+0x1664>
80005b7a:	50 a7       	stdsp	sp[0x28],r7
80005b7c:	50 80       	stdsp	sp[0x20],r0
80005b7e:	40 93       	lddsp	r3,sp[0x24]
80005b80:	0c 97       	mov	r7,r6
80005b82:	10 90       	mov	r0,r8
80005b84:	04 94       	mov	r4,r2
80005b86:	40 41       	lddsp	r1,sp[0x10]
80005b88:	58 08       	cp.w	r8,0
80005b8a:	e0 80 04 4f 	breq	80006428 <_vfprintf_r+0x1edc>
80005b8e:	fb 68 06 60 	st.b	sp[1632],r8
80005b92:	30 0c       	mov	r12,0
80005b94:	30 08       	mov	r8,0
80005b96:	30 12       	mov	r2,1
80005b98:	fb 68 06 bb 	st.b	sp[1723],r8
80005b9c:	50 2c       	stdsp	sp[0x8],r12
80005b9e:	fa c6 f9 a0 	sub	r6,sp,-1632
80005ba2:	c0 78       	rjmp	80005bb0 <_vfprintf_r+0x1664>
80005ba4:	30 0b       	mov	r11,0
80005ba6:	50 2b       	stdsp	sp[0x8],r11
80005ba8:	c0 48       	rjmp	80005bb0 <_vfprintf_r+0x1664>
80005baa:	40 22       	lddsp	r2,sp[0x8]
80005bac:	30 0a       	mov	r10,0
80005bae:	50 2a       	stdsp	sp[0x8],r10
80005bb0:	40 29       	lddsp	r9,sp[0x8]
80005bb2:	e4 09 0c 49 	max	r9,r2,r9
80005bb6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005bba:	50 39       	stdsp	sp[0xc],r9
80005bbc:	0a 9e       	mov	lr,r5
80005bbe:	30 09       	mov	r9,0
80005bc0:	e2 1e 00 02 	andl	lr,0x2,COH
80005bc4:	f2 08 18 00 	cp.b	r8,r9
80005bc8:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005bcc:	f7 b8 01 ff 	subne	r8,-1
80005bd0:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005bd4:	0a 9b       	mov	r11,r5
80005bd6:	58 0e       	cp.w	lr,0
80005bd8:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005bdc:	f7 bc 01 fe 	subne	r12,-2
80005be0:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005be4:	e2 1b 00 84 	andl	r11,0x84,COH
80005be8:	50 fe       	stdsp	sp[0x3c],lr
80005bea:	50 9b       	stdsp	sp[0x24],r11
80005bec:	c4 71       	brne	80005c7a <_vfprintf_r+0x172e>
80005bee:	40 8a       	lddsp	r10,sp[0x20]
80005bf0:	40 39       	lddsp	r9,sp[0xc]
80005bf2:	12 1a       	sub	r10,r9
80005bf4:	50 4a       	stdsp	sp[0x10],r10
80005bf6:	58 0a       	cp.w	r10,0
80005bf8:	e0 89 00 20 	brgt	80005c38 <_vfprintf_r+0x16ec>
80005bfc:	c3 f8       	rjmp	80005c7a <_vfprintf_r+0x172e>
80005bfe:	2f 09       	sub	r9,-16
80005c00:	2f f8       	sub	r8,-1
80005c02:	fe ce bd 72 	sub	lr,pc,-17038
80005c06:	31 0c       	mov	r12,16
80005c08:	fb 49 06 90 	st.w	sp[1680],r9
80005c0c:	87 0e       	st.w	r3[0x0],lr
80005c0e:	87 1c       	st.w	r3[0x4],r12
80005c10:	fb 48 06 8c 	st.w	sp[1676],r8
80005c14:	58 78       	cp.w	r8,7
80005c16:	e0 89 00 04 	brgt	80005c1e <_vfprintf_r+0x16d2>
80005c1a:	2f 83       	sub	r3,-8
80005c1c:	c0 b8       	rjmp	80005c32 <_vfprintf_r+0x16e6>
80005c1e:	fa ca f9 78 	sub	r10,sp,-1672
80005c22:	02 9b       	mov	r11,r1
80005c24:	08 9c       	mov	r12,r4
80005c26:	fe b0 f4 85 	rcall	80004530 <__sprint_r>
80005c2a:	e0 81 04 10 	brne	8000644a <_vfprintf_r+0x1efe>
80005c2e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c32:	40 4b       	lddsp	r11,sp[0x10]
80005c34:	21 0b       	sub	r11,16
80005c36:	50 4b       	stdsp	sp[0x10],r11
80005c38:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c3c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c40:	fe ca bd b0 	sub	r10,pc,-16976
80005c44:	40 4e       	lddsp	lr,sp[0x10]
80005c46:	59 0e       	cp.w	lr,16
80005c48:	fe 99 ff db 	brgt	80005bfe <_vfprintf_r+0x16b2>
80005c4c:	1c 09       	add	r9,lr
80005c4e:	2f f8       	sub	r8,-1
80005c50:	87 0a       	st.w	r3[0x0],r10
80005c52:	fb 49 06 90 	st.w	sp[1680],r9
80005c56:	87 1e       	st.w	r3[0x4],lr
80005c58:	fb 48 06 8c 	st.w	sp[1676],r8
80005c5c:	58 78       	cp.w	r8,7
80005c5e:	e0 89 00 04 	brgt	80005c66 <_vfprintf_r+0x171a>
80005c62:	2f 83       	sub	r3,-8
80005c64:	c0 b8       	rjmp	80005c7a <_vfprintf_r+0x172e>
80005c66:	fa ca f9 78 	sub	r10,sp,-1672
80005c6a:	02 9b       	mov	r11,r1
80005c6c:	08 9c       	mov	r12,r4
80005c6e:	fe b0 f4 61 	rcall	80004530 <__sprint_r>
80005c72:	e0 81 03 ec 	brne	8000644a <_vfprintf_r+0x1efe>
80005c76:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c7a:	30 09       	mov	r9,0
80005c7c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005c80:	f2 08 18 00 	cp.b	r8,r9
80005c84:	c1 f0       	breq	80005cc2 <_vfprintf_r+0x1776>
80005c86:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c8a:	fa c9 f9 45 	sub	r9,sp,-1723
80005c8e:	2f f8       	sub	r8,-1
80005c90:	87 09       	st.w	r3[0x0],r9
80005c92:	fb 48 06 90 	st.w	sp[1680],r8
80005c96:	30 19       	mov	r9,1
80005c98:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c9c:	87 19       	st.w	r3[0x4],r9
80005c9e:	2f f8       	sub	r8,-1
80005ca0:	fb 48 06 8c 	st.w	sp[1676],r8
80005ca4:	58 78       	cp.w	r8,7
80005ca6:	e0 89 00 04 	brgt	80005cae <_vfprintf_r+0x1762>
80005caa:	2f 83       	sub	r3,-8
80005cac:	c0 b8       	rjmp	80005cc2 <_vfprintf_r+0x1776>
80005cae:	fa ca f9 78 	sub	r10,sp,-1672
80005cb2:	02 9b       	mov	r11,r1
80005cb4:	08 9c       	mov	r12,r4
80005cb6:	fe b0 f4 3d 	rcall	80004530 <__sprint_r>
80005cba:	e0 81 03 c8 	brne	8000644a <_vfprintf_r+0x1efe>
80005cbe:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cc2:	40 fc       	lddsp	r12,sp[0x3c]
80005cc4:	58 0c       	cp.w	r12,0
80005cc6:	c1 f0       	breq	80005d04 <_vfprintf_r+0x17b8>
80005cc8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ccc:	fa c9 f9 48 	sub	r9,sp,-1720
80005cd0:	2f e8       	sub	r8,-2
80005cd2:	87 09       	st.w	r3[0x0],r9
80005cd4:	fb 48 06 90 	st.w	sp[1680],r8
80005cd8:	30 29       	mov	r9,2
80005cda:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005cde:	87 19       	st.w	r3[0x4],r9
80005ce0:	2f f8       	sub	r8,-1
80005ce2:	fb 48 06 8c 	st.w	sp[1676],r8
80005ce6:	58 78       	cp.w	r8,7
80005ce8:	e0 89 00 04 	brgt	80005cf0 <_vfprintf_r+0x17a4>
80005cec:	2f 83       	sub	r3,-8
80005cee:	c0 b8       	rjmp	80005d04 <_vfprintf_r+0x17b8>
80005cf0:	fa ca f9 78 	sub	r10,sp,-1672
80005cf4:	02 9b       	mov	r11,r1
80005cf6:	08 9c       	mov	r12,r4
80005cf8:	fe b0 f4 1c 	rcall	80004530 <__sprint_r>
80005cfc:	e0 81 03 a7 	brne	8000644a <_vfprintf_r+0x1efe>
80005d00:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d04:	40 9b       	lddsp	r11,sp[0x24]
80005d06:	e0 4b 00 80 	cp.w	r11,128
80005d0a:	c4 71       	brne	80005d98 <_vfprintf_r+0x184c>
80005d0c:	40 8a       	lddsp	r10,sp[0x20]
80005d0e:	40 39       	lddsp	r9,sp[0xc]
80005d10:	12 1a       	sub	r10,r9
80005d12:	50 4a       	stdsp	sp[0x10],r10
80005d14:	58 0a       	cp.w	r10,0
80005d16:	e0 89 00 20 	brgt	80005d56 <_vfprintf_r+0x180a>
80005d1a:	c3 f8       	rjmp	80005d98 <_vfprintf_r+0x184c>
80005d1c:	2f 09       	sub	r9,-16
80005d1e:	2f f8       	sub	r8,-1
80005d20:	fe ce be 80 	sub	lr,pc,-16768
80005d24:	31 0c       	mov	r12,16
80005d26:	fb 49 06 90 	st.w	sp[1680],r9
80005d2a:	87 0e       	st.w	r3[0x0],lr
80005d2c:	87 1c       	st.w	r3[0x4],r12
80005d2e:	fb 48 06 8c 	st.w	sp[1676],r8
80005d32:	58 78       	cp.w	r8,7
80005d34:	e0 89 00 04 	brgt	80005d3c <_vfprintf_r+0x17f0>
80005d38:	2f 83       	sub	r3,-8
80005d3a:	c0 b8       	rjmp	80005d50 <_vfprintf_r+0x1804>
80005d3c:	fa ca f9 78 	sub	r10,sp,-1672
80005d40:	02 9b       	mov	r11,r1
80005d42:	08 9c       	mov	r12,r4
80005d44:	fe b0 f3 f6 	rcall	80004530 <__sprint_r>
80005d48:	e0 81 03 81 	brne	8000644a <_vfprintf_r+0x1efe>
80005d4c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d50:	40 4b       	lddsp	r11,sp[0x10]
80005d52:	21 0b       	sub	r11,16
80005d54:	50 4b       	stdsp	sp[0x10],r11
80005d56:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d5a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d5e:	fe ca be be 	sub	r10,pc,-16706
80005d62:	40 4e       	lddsp	lr,sp[0x10]
80005d64:	59 0e       	cp.w	lr,16
80005d66:	fe 99 ff db 	brgt	80005d1c <_vfprintf_r+0x17d0>
80005d6a:	1c 09       	add	r9,lr
80005d6c:	2f f8       	sub	r8,-1
80005d6e:	87 0a       	st.w	r3[0x0],r10
80005d70:	fb 49 06 90 	st.w	sp[1680],r9
80005d74:	87 1e       	st.w	r3[0x4],lr
80005d76:	fb 48 06 8c 	st.w	sp[1676],r8
80005d7a:	58 78       	cp.w	r8,7
80005d7c:	e0 89 00 04 	brgt	80005d84 <_vfprintf_r+0x1838>
80005d80:	2f 83       	sub	r3,-8
80005d82:	c0 b8       	rjmp	80005d98 <_vfprintf_r+0x184c>
80005d84:	fa ca f9 78 	sub	r10,sp,-1672
80005d88:	02 9b       	mov	r11,r1
80005d8a:	08 9c       	mov	r12,r4
80005d8c:	fe b0 f3 d2 	rcall	80004530 <__sprint_r>
80005d90:	e0 81 03 5d 	brne	8000644a <_vfprintf_r+0x1efe>
80005d94:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d98:	40 2c       	lddsp	r12,sp[0x8]
80005d9a:	04 1c       	sub	r12,r2
80005d9c:	50 2c       	stdsp	sp[0x8],r12
80005d9e:	58 0c       	cp.w	r12,0
80005da0:	e0 89 00 20 	brgt	80005de0 <_vfprintf_r+0x1894>
80005da4:	c3 f8       	rjmp	80005e22 <_vfprintf_r+0x18d6>
80005da6:	2f 09       	sub	r9,-16
80005da8:	2f f8       	sub	r8,-1
80005daa:	fe cb bf 0a 	sub	r11,pc,-16630
80005dae:	31 0a       	mov	r10,16
80005db0:	fb 49 06 90 	st.w	sp[1680],r9
80005db4:	87 0b       	st.w	r3[0x0],r11
80005db6:	87 1a       	st.w	r3[0x4],r10
80005db8:	fb 48 06 8c 	st.w	sp[1676],r8
80005dbc:	58 78       	cp.w	r8,7
80005dbe:	e0 89 00 04 	brgt	80005dc6 <_vfprintf_r+0x187a>
80005dc2:	2f 83       	sub	r3,-8
80005dc4:	c0 b8       	rjmp	80005dda <_vfprintf_r+0x188e>
80005dc6:	fa ca f9 78 	sub	r10,sp,-1672
80005dca:	02 9b       	mov	r11,r1
80005dcc:	08 9c       	mov	r12,r4
80005dce:	fe b0 f3 b1 	rcall	80004530 <__sprint_r>
80005dd2:	e0 81 03 3c 	brne	8000644a <_vfprintf_r+0x1efe>
80005dd6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dda:	40 29       	lddsp	r9,sp[0x8]
80005ddc:	21 09       	sub	r9,16
80005dde:	50 29       	stdsp	sp[0x8],r9
80005de0:	fa f9 06 90 	ld.w	r9,sp[1680]
80005de4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005de8:	fe ca bf 48 	sub	r10,pc,-16568
80005dec:	40 2e       	lddsp	lr,sp[0x8]
80005dee:	59 0e       	cp.w	lr,16
80005df0:	fe 99 ff db 	brgt	80005da6 <_vfprintf_r+0x185a>
80005df4:	1c 09       	add	r9,lr
80005df6:	2f f8       	sub	r8,-1
80005df8:	87 0a       	st.w	r3[0x0],r10
80005dfa:	fb 49 06 90 	st.w	sp[1680],r9
80005dfe:	87 1e       	st.w	r3[0x4],lr
80005e00:	fb 48 06 8c 	st.w	sp[1676],r8
80005e04:	58 78       	cp.w	r8,7
80005e06:	e0 89 00 04 	brgt	80005e0e <_vfprintf_r+0x18c2>
80005e0a:	2f 83       	sub	r3,-8
80005e0c:	c0 b8       	rjmp	80005e22 <_vfprintf_r+0x18d6>
80005e0e:	fa ca f9 78 	sub	r10,sp,-1672
80005e12:	02 9b       	mov	r11,r1
80005e14:	08 9c       	mov	r12,r4
80005e16:	fe b0 f3 8d 	rcall	80004530 <__sprint_r>
80005e1a:	e0 81 03 18 	brne	8000644a <_vfprintf_r+0x1efe>
80005e1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e22:	ed b5 00 08 	bld	r5,0x8
80005e26:	c0 b0       	breq	80005e3c <_vfprintf_r+0x18f0>
80005e28:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e2c:	87 12       	st.w	r3[0x4],r2
80005e2e:	87 06       	st.w	r3[0x0],r6
80005e30:	f0 02 00 02 	add	r2,r8,r2
80005e34:	fb 42 06 90 	st.w	sp[1680],r2
80005e38:	e0 8f 01 d4 	bral	800061e0 <_vfprintf_r+0x1c94>
80005e3c:	e0 40 00 65 	cp.w	r0,101
80005e40:	e0 8a 01 d6 	brle	800061ec <_vfprintf_r+0x1ca0>
80005e44:	30 08       	mov	r8,0
80005e46:	30 09       	mov	r9,0
80005e48:	40 5b       	lddsp	r11,sp[0x14]
80005e4a:	40 7a       	lddsp	r10,sp[0x1c]
80005e4c:	e0 a0 17 f5 	rcall	80008e36 <__avr32_f64_cmp_eq>
80005e50:	c7 90       	breq	80005f42 <_vfprintf_r+0x19f6>
80005e52:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e56:	fe c9 bf ca 	sub	r9,pc,-16438
80005e5a:	2f f8       	sub	r8,-1
80005e5c:	87 09       	st.w	r3[0x0],r9
80005e5e:	fb 48 06 90 	st.w	sp[1680],r8
80005e62:	30 19       	mov	r9,1
80005e64:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e68:	87 19       	st.w	r3[0x4],r9
80005e6a:	2f f8       	sub	r8,-1
80005e6c:	fb 48 06 8c 	st.w	sp[1676],r8
80005e70:	58 78       	cp.w	r8,7
80005e72:	e0 89 00 05 	brgt	80005e7c <_vfprintf_r+0x1930>
80005e76:	2f 83       	sub	r3,-8
80005e78:	c0 c8       	rjmp	80005e90 <_vfprintf_r+0x1944>
80005e7a:	d7 03       	nop
80005e7c:	fa ca f9 78 	sub	r10,sp,-1672
80005e80:	02 9b       	mov	r11,r1
80005e82:	08 9c       	mov	r12,r4
80005e84:	fe b0 f3 56 	rcall	80004530 <__sprint_r>
80005e88:	e0 81 02 e1 	brne	8000644a <_vfprintf_r+0x1efe>
80005e8c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e90:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005e94:	40 6c       	lddsp	r12,sp[0x18]
80005e96:	18 38       	cp.w	r8,r12
80005e98:	c0 55       	brlt	80005ea2 <_vfprintf_r+0x1956>
80005e9a:	ed b5 00 00 	bld	r5,0x0
80005e9e:	e0 81 02 6b 	brne	80006374 <_vfprintf_r+0x1e28>
80005ea2:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ea6:	2f f8       	sub	r8,-1
80005ea8:	40 cb       	lddsp	r11,sp[0x30]
80005eaa:	fb 48 06 90 	st.w	sp[1680],r8
80005eae:	30 19       	mov	r9,1
80005eb0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005eb4:	87 0b       	st.w	r3[0x0],r11
80005eb6:	2f f8       	sub	r8,-1
80005eb8:	87 19       	st.w	r3[0x4],r9
80005eba:	fb 48 06 8c 	st.w	sp[1676],r8
80005ebe:	58 78       	cp.w	r8,7
80005ec0:	e0 89 00 04 	brgt	80005ec8 <_vfprintf_r+0x197c>
80005ec4:	2f 83       	sub	r3,-8
80005ec6:	c0 b8       	rjmp	80005edc <_vfprintf_r+0x1990>
80005ec8:	fa ca f9 78 	sub	r10,sp,-1672
80005ecc:	02 9b       	mov	r11,r1
80005ece:	08 9c       	mov	r12,r4
80005ed0:	fe b0 f3 30 	rcall	80004530 <__sprint_r>
80005ed4:	e0 81 02 bb 	brne	8000644a <_vfprintf_r+0x1efe>
80005ed8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005edc:	40 66       	lddsp	r6,sp[0x18]
80005ede:	20 16       	sub	r6,1
80005ee0:	58 06       	cp.w	r6,0
80005ee2:	e0 89 00 1d 	brgt	80005f1c <_vfprintf_r+0x19d0>
80005ee6:	e0 8f 02 47 	bral	80006374 <_vfprintf_r+0x1e28>
80005eea:	2f 09       	sub	r9,-16
80005eec:	2f f8       	sub	r8,-1
80005eee:	fb 49 06 90 	st.w	sp[1680],r9
80005ef2:	87 02       	st.w	r3[0x0],r2
80005ef4:	87 10       	st.w	r3[0x4],r0
80005ef6:	fb 48 06 8c 	st.w	sp[1676],r8
80005efa:	58 78       	cp.w	r8,7
80005efc:	e0 89 00 04 	brgt	80005f04 <_vfprintf_r+0x19b8>
80005f00:	2f 83       	sub	r3,-8
80005f02:	c0 b8       	rjmp	80005f18 <_vfprintf_r+0x19cc>
80005f04:	fa ca f9 78 	sub	r10,sp,-1672
80005f08:	02 9b       	mov	r11,r1
80005f0a:	08 9c       	mov	r12,r4
80005f0c:	fe b0 f3 12 	rcall	80004530 <__sprint_r>
80005f10:	e0 81 02 9d 	brne	8000644a <_vfprintf_r+0x1efe>
80005f14:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f18:	21 06       	sub	r6,16
80005f1a:	c0 48       	rjmp	80005f22 <_vfprintf_r+0x19d6>
80005f1c:	fe c2 c0 7c 	sub	r2,pc,-16260
80005f20:	31 00       	mov	r0,16
80005f22:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f26:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f2a:	fe ca c0 8a 	sub	r10,pc,-16246
80005f2e:	59 06       	cp.w	r6,16
80005f30:	fe 99 ff dd 	brgt	80005eea <_vfprintf_r+0x199e>
80005f34:	0c 09       	add	r9,r6
80005f36:	87 0a       	st.w	r3[0x0],r10
80005f38:	fb 49 06 90 	st.w	sp[1680],r9
80005f3c:	2f f8       	sub	r8,-1
80005f3e:	87 16       	st.w	r3[0x4],r6
80005f40:	c5 39       	rjmp	800061e6 <_vfprintf_r+0x1c9a>
80005f42:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005f46:	58 0a       	cp.w	r10,0
80005f48:	e0 89 00 92 	brgt	8000606c <_vfprintf_r+0x1b20>
80005f4c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f50:	fe c9 c0 c4 	sub	r9,pc,-16188
80005f54:	2f f8       	sub	r8,-1
80005f56:	87 09       	st.w	r3[0x0],r9
80005f58:	fb 48 06 90 	st.w	sp[1680],r8
80005f5c:	30 19       	mov	r9,1
80005f5e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f62:	87 19       	st.w	r3[0x4],r9
80005f64:	2f f8       	sub	r8,-1
80005f66:	fb 48 06 8c 	st.w	sp[1676],r8
80005f6a:	58 78       	cp.w	r8,7
80005f6c:	e0 89 00 04 	brgt	80005f74 <_vfprintf_r+0x1a28>
80005f70:	2f 83       	sub	r3,-8
80005f72:	c0 b8       	rjmp	80005f88 <_vfprintf_r+0x1a3c>
80005f74:	fa ca f9 78 	sub	r10,sp,-1672
80005f78:	02 9b       	mov	r11,r1
80005f7a:	08 9c       	mov	r12,r4
80005f7c:	fe b0 f2 da 	rcall	80004530 <__sprint_r>
80005f80:	e0 81 02 65 	brne	8000644a <_vfprintf_r+0x1efe>
80005f84:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f88:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005f8c:	58 08       	cp.w	r8,0
80005f8e:	c0 81       	brne	80005f9e <_vfprintf_r+0x1a52>
80005f90:	40 6a       	lddsp	r10,sp[0x18]
80005f92:	58 0a       	cp.w	r10,0
80005f94:	c0 51       	brne	80005f9e <_vfprintf_r+0x1a52>
80005f96:	ed b5 00 00 	bld	r5,0x0
80005f9a:	e0 81 01 ed 	brne	80006374 <_vfprintf_r+0x1e28>
80005f9e:	40 c9       	lddsp	r9,sp[0x30]
80005fa0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fa4:	2f f8       	sub	r8,-1
80005fa6:	87 09       	st.w	r3[0x0],r9
80005fa8:	fb 48 06 90 	st.w	sp[1680],r8
80005fac:	30 19       	mov	r9,1
80005fae:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fb2:	87 19       	st.w	r3[0x4],r9
80005fb4:	2f f8       	sub	r8,-1
80005fb6:	fb 48 06 8c 	st.w	sp[1676],r8
80005fba:	58 78       	cp.w	r8,7
80005fbc:	e0 89 00 04 	brgt	80005fc4 <_vfprintf_r+0x1a78>
80005fc0:	2f 83       	sub	r3,-8
80005fc2:	c0 b8       	rjmp	80005fd8 <_vfprintf_r+0x1a8c>
80005fc4:	fa ca f9 78 	sub	r10,sp,-1672
80005fc8:	02 9b       	mov	r11,r1
80005fca:	08 9c       	mov	r12,r4
80005fcc:	fe b0 f2 b2 	rcall	80004530 <__sprint_r>
80005fd0:	e0 81 02 3d 	brne	8000644a <_vfprintf_r+0x1efe>
80005fd4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fd8:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005fdc:	5c 32       	neg	r2
80005fde:	58 02       	cp.w	r2,0
80005fe0:	e0 89 00 1d 	brgt	8000601a <_vfprintf_r+0x1ace>
80005fe4:	c3 d8       	rjmp	8000605e <_vfprintf_r+0x1b12>
80005fe6:	2f 09       	sub	r9,-16
80005fe8:	2f f8       	sub	r8,-1
80005fea:	31 0e       	mov	lr,16
80005fec:	fb 49 06 90 	st.w	sp[1680],r9
80005ff0:	87 00       	st.w	r3[0x0],r0
80005ff2:	87 1e       	st.w	r3[0x4],lr
80005ff4:	fb 48 06 8c 	st.w	sp[1676],r8
80005ff8:	58 78       	cp.w	r8,7
80005ffa:	e0 89 00 04 	brgt	80006002 <_vfprintf_r+0x1ab6>
80005ffe:	2f 83       	sub	r3,-8
80006000:	c0 b8       	rjmp	80006016 <_vfprintf_r+0x1aca>
80006002:	fa ca f9 78 	sub	r10,sp,-1672
80006006:	02 9b       	mov	r11,r1
80006008:	08 9c       	mov	r12,r4
8000600a:	fe b0 f2 93 	rcall	80004530 <__sprint_r>
8000600e:	e0 81 02 1e 	brne	8000644a <_vfprintf_r+0x1efe>
80006012:	fa c3 f9 e0 	sub	r3,sp,-1568
80006016:	21 02       	sub	r2,16
80006018:	c0 38       	rjmp	8000601e <_vfprintf_r+0x1ad2>
8000601a:	fe c0 c1 7a 	sub	r0,pc,-16006
8000601e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006022:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006026:	fe ca c1 86 	sub	r10,pc,-15994
8000602a:	59 02       	cp.w	r2,16
8000602c:	fe 99 ff dd 	brgt	80005fe6 <_vfprintf_r+0x1a9a>
80006030:	04 09       	add	r9,r2
80006032:	2f f8       	sub	r8,-1
80006034:	87 0a       	st.w	r3[0x0],r10
80006036:	fb 49 06 90 	st.w	sp[1680],r9
8000603a:	87 12       	st.w	r3[0x4],r2
8000603c:	fb 48 06 8c 	st.w	sp[1676],r8
80006040:	58 78       	cp.w	r8,7
80006042:	e0 89 00 04 	brgt	8000604a <_vfprintf_r+0x1afe>
80006046:	2f 83       	sub	r3,-8
80006048:	c0 b8       	rjmp	8000605e <_vfprintf_r+0x1b12>
8000604a:	fa ca f9 78 	sub	r10,sp,-1672
8000604e:	02 9b       	mov	r11,r1
80006050:	08 9c       	mov	r12,r4
80006052:	fe b0 f2 6f 	rcall	80004530 <__sprint_r>
80006056:	e0 81 01 fa 	brne	8000644a <_vfprintf_r+0x1efe>
8000605a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000605e:	40 6c       	lddsp	r12,sp[0x18]
80006060:	fa f8 06 90 	ld.w	r8,sp[1680]
80006064:	87 06       	st.w	r3[0x0],r6
80006066:	87 1c       	st.w	r3[0x4],r12
80006068:	18 08       	add	r8,r12
8000606a:	cb 98       	rjmp	800061dc <_vfprintf_r+0x1c90>
8000606c:	fa f9 06 90 	ld.w	r9,sp[1680]
80006070:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006074:	40 6b       	lddsp	r11,sp[0x18]
80006076:	16 3a       	cp.w	r10,r11
80006078:	c6 f5       	brlt	80006156 <_vfprintf_r+0x1c0a>
8000607a:	16 09       	add	r9,r11
8000607c:	2f f8       	sub	r8,-1
8000607e:	87 06       	st.w	r3[0x0],r6
80006080:	fb 49 06 90 	st.w	sp[1680],r9
80006084:	87 1b       	st.w	r3[0x4],r11
80006086:	fb 48 06 8c 	st.w	sp[1676],r8
8000608a:	58 78       	cp.w	r8,7
8000608c:	e0 89 00 04 	brgt	80006094 <_vfprintf_r+0x1b48>
80006090:	2f 83       	sub	r3,-8
80006092:	c0 b8       	rjmp	800060a8 <_vfprintf_r+0x1b5c>
80006094:	fa ca f9 78 	sub	r10,sp,-1672
80006098:	02 9b       	mov	r11,r1
8000609a:	08 9c       	mov	r12,r4
8000609c:	fe b0 f2 4a 	rcall	80004530 <__sprint_r>
800060a0:	e0 81 01 d5 	brne	8000644a <_vfprintf_r+0x1efe>
800060a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800060a8:	fa f6 06 ac 	ld.w	r6,sp[1708]
800060ac:	40 6a       	lddsp	r10,sp[0x18]
800060ae:	14 16       	sub	r6,r10
800060b0:	58 06       	cp.w	r6,0
800060b2:	e0 89 00 1c 	brgt	800060ea <_vfprintf_r+0x1b9e>
800060b6:	c3 d8       	rjmp	80006130 <_vfprintf_r+0x1be4>
800060b8:	2f 09       	sub	r9,-16
800060ba:	2f f8       	sub	r8,-1
800060bc:	fb 49 06 90 	st.w	sp[1680],r9
800060c0:	87 02       	st.w	r3[0x0],r2
800060c2:	87 10       	st.w	r3[0x4],r0
800060c4:	fb 48 06 8c 	st.w	sp[1676],r8
800060c8:	58 78       	cp.w	r8,7
800060ca:	e0 89 00 04 	brgt	800060d2 <_vfprintf_r+0x1b86>
800060ce:	2f 83       	sub	r3,-8
800060d0:	c0 b8       	rjmp	800060e6 <_vfprintf_r+0x1b9a>
800060d2:	fa ca f9 78 	sub	r10,sp,-1672
800060d6:	02 9b       	mov	r11,r1
800060d8:	08 9c       	mov	r12,r4
800060da:	fe b0 f2 2b 	rcall	80004530 <__sprint_r>
800060de:	e0 81 01 b6 	brne	8000644a <_vfprintf_r+0x1efe>
800060e2:	fa c3 f9 e0 	sub	r3,sp,-1568
800060e6:	21 06       	sub	r6,16
800060e8:	c0 48       	rjmp	800060f0 <_vfprintf_r+0x1ba4>
800060ea:	fe c2 c2 4a 	sub	r2,pc,-15798
800060ee:	31 00       	mov	r0,16
800060f0:	fa f9 06 90 	ld.w	r9,sp[1680]
800060f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060f8:	fe ca c2 58 	sub	r10,pc,-15784
800060fc:	59 06       	cp.w	r6,16
800060fe:	fe 99 ff dd 	brgt	800060b8 <_vfprintf_r+0x1b6c>
80006102:	0c 09       	add	r9,r6
80006104:	2f f8       	sub	r8,-1
80006106:	87 0a       	st.w	r3[0x0],r10
80006108:	fb 49 06 90 	st.w	sp[1680],r9
8000610c:	87 16       	st.w	r3[0x4],r6
8000610e:	fb 48 06 8c 	st.w	sp[1676],r8
80006112:	58 78       	cp.w	r8,7
80006114:	e0 89 00 04 	brgt	8000611c <_vfprintf_r+0x1bd0>
80006118:	2f 83       	sub	r3,-8
8000611a:	c0 b8       	rjmp	80006130 <_vfprintf_r+0x1be4>
8000611c:	fa ca f9 78 	sub	r10,sp,-1672
80006120:	02 9b       	mov	r11,r1
80006122:	08 9c       	mov	r12,r4
80006124:	fe b0 f2 06 	rcall	80004530 <__sprint_r>
80006128:	e0 81 01 91 	brne	8000644a <_vfprintf_r+0x1efe>
8000612c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006130:	ed b5 00 00 	bld	r5,0x0
80006134:	e0 81 01 20 	brne	80006374 <_vfprintf_r+0x1e28>
80006138:	40 c9       	lddsp	r9,sp[0x30]
8000613a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000613e:	2f f8       	sub	r8,-1
80006140:	87 09       	st.w	r3[0x0],r9
80006142:	fb 48 06 90 	st.w	sp[1680],r8
80006146:	30 19       	mov	r9,1
80006148:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000614c:	87 19       	st.w	r3[0x4],r9
8000614e:	2f f8       	sub	r8,-1
80006150:	fb 48 06 8c 	st.w	sp[1676],r8
80006154:	c0 29       	rjmp	80006358 <_vfprintf_r+0x1e0c>
80006156:	14 09       	add	r9,r10
80006158:	2f f8       	sub	r8,-1
8000615a:	fb 49 06 90 	st.w	sp[1680],r9
8000615e:	87 06       	st.w	r3[0x0],r6
80006160:	87 1a       	st.w	r3[0x4],r10
80006162:	fb 48 06 8c 	st.w	sp[1676],r8
80006166:	58 78       	cp.w	r8,7
80006168:	e0 89 00 04 	brgt	80006170 <_vfprintf_r+0x1c24>
8000616c:	2f 83       	sub	r3,-8
8000616e:	c0 b8       	rjmp	80006184 <_vfprintf_r+0x1c38>
80006170:	fa ca f9 78 	sub	r10,sp,-1672
80006174:	02 9b       	mov	r11,r1
80006176:	08 9c       	mov	r12,r4
80006178:	fe b0 f1 dc 	rcall	80004530 <__sprint_r>
8000617c:	e0 81 01 67 	brne	8000644a <_vfprintf_r+0x1efe>
80006180:	fa c3 f9 e0 	sub	r3,sp,-1568
80006184:	40 c8       	lddsp	r8,sp[0x30]
80006186:	87 08       	st.w	r3[0x0],r8
80006188:	fa f8 06 90 	ld.w	r8,sp[1680]
8000618c:	2f f8       	sub	r8,-1
8000618e:	30 19       	mov	r9,1
80006190:	fb 48 06 90 	st.w	sp[1680],r8
80006194:	87 19       	st.w	r3[0x4],r9
80006196:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000619a:	2f f8       	sub	r8,-1
8000619c:	fb 48 06 8c 	st.w	sp[1676],r8
800061a0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800061a4:	58 78       	cp.w	r8,7
800061a6:	e0 89 00 04 	brgt	800061ae <_vfprintf_r+0x1c62>
800061aa:	2f 83       	sub	r3,-8
800061ac:	c0 b8       	rjmp	800061c2 <_vfprintf_r+0x1c76>
800061ae:	fa ca f9 78 	sub	r10,sp,-1672
800061b2:	02 9b       	mov	r11,r1
800061b4:	08 9c       	mov	r12,r4
800061b6:	fe b0 f1 bd 	rcall	80004530 <__sprint_r>
800061ba:	e0 81 01 48 	brne	8000644a <_vfprintf_r+0x1efe>
800061be:	fa c3 f9 e0 	sub	r3,sp,-1568
800061c2:	04 06       	add	r6,r2
800061c4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800061c8:	87 06       	st.w	r3[0x0],r6
800061ca:	fa f9 06 90 	ld.w	r9,sp[1680]
800061ce:	40 66       	lddsp	r6,sp[0x18]
800061d0:	40 6e       	lddsp	lr,sp[0x18]
800061d2:	10 16       	sub	r6,r8
800061d4:	f2 08 01 08 	sub	r8,r9,r8
800061d8:	87 16       	st.w	r3[0x4],r6
800061da:	1c 08       	add	r8,lr
800061dc:	fb 48 06 90 	st.w	sp[1680],r8
800061e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061e4:	2f f8       	sub	r8,-1
800061e6:	fb 48 06 8c 	st.w	sp[1676],r8
800061ea:	cb 78       	rjmp	80006358 <_vfprintf_r+0x1e0c>
800061ec:	40 6c       	lddsp	r12,sp[0x18]
800061ee:	58 1c       	cp.w	r12,1
800061f0:	e0 89 00 06 	brgt	800061fc <_vfprintf_r+0x1cb0>
800061f4:	ed b5 00 00 	bld	r5,0x0
800061f8:	e0 81 00 85 	brne	80006302 <_vfprintf_r+0x1db6>
800061fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80006200:	2f f8       	sub	r8,-1
80006202:	30 19       	mov	r9,1
80006204:	fb 48 06 90 	st.w	sp[1680],r8
80006208:	87 06       	st.w	r3[0x0],r6
8000620a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000620e:	87 19       	st.w	r3[0x4],r9
80006210:	2f f8       	sub	r8,-1
80006212:	fb 48 06 8c 	st.w	sp[1676],r8
80006216:	58 78       	cp.w	r8,7
80006218:	e0 89 00 04 	brgt	80006220 <_vfprintf_r+0x1cd4>
8000621c:	2f 83       	sub	r3,-8
8000621e:	c0 b8       	rjmp	80006234 <_vfprintf_r+0x1ce8>
80006220:	fa ca f9 78 	sub	r10,sp,-1672
80006224:	02 9b       	mov	r11,r1
80006226:	08 9c       	mov	r12,r4
80006228:	fe b0 f1 84 	rcall	80004530 <__sprint_r>
8000622c:	e0 81 01 0f 	brne	8000644a <_vfprintf_r+0x1efe>
80006230:	fa c3 f9 e0 	sub	r3,sp,-1568
80006234:	fa f8 06 90 	ld.w	r8,sp[1680]
80006238:	2f f8       	sub	r8,-1
8000623a:	40 cb       	lddsp	r11,sp[0x30]
8000623c:	fb 48 06 90 	st.w	sp[1680],r8
80006240:	30 19       	mov	r9,1
80006242:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006246:	87 0b       	st.w	r3[0x0],r11
80006248:	2f f8       	sub	r8,-1
8000624a:	87 19       	st.w	r3[0x4],r9
8000624c:	fb 48 06 8c 	st.w	sp[1676],r8
80006250:	58 78       	cp.w	r8,7
80006252:	e0 89 00 05 	brgt	8000625c <_vfprintf_r+0x1d10>
80006256:	2f 83       	sub	r3,-8
80006258:	c0 c8       	rjmp	80006270 <_vfprintf_r+0x1d24>
8000625a:	d7 03       	nop
8000625c:	fa ca f9 78 	sub	r10,sp,-1672
80006260:	02 9b       	mov	r11,r1
80006262:	08 9c       	mov	r12,r4
80006264:	fe b0 f1 66 	rcall	80004530 <__sprint_r>
80006268:	e0 81 00 f1 	brne	8000644a <_vfprintf_r+0x1efe>
8000626c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006270:	30 08       	mov	r8,0
80006272:	30 09       	mov	r9,0
80006274:	40 5b       	lddsp	r11,sp[0x14]
80006276:	40 7a       	lddsp	r10,sp[0x1c]
80006278:	e0 a0 15 df 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000627c:	40 68       	lddsp	r8,sp[0x18]
8000627e:	20 18       	sub	r8,1
80006280:	58 0c       	cp.w	r12,0
80006282:	c0 d1       	brne	8000629c <_vfprintf_r+0x1d50>
80006284:	2f f6       	sub	r6,-1
80006286:	87 18       	st.w	r3[0x4],r8
80006288:	87 06       	st.w	r3[0x0],r6
8000628a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000628e:	10 06       	add	r6,r8
80006290:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006294:	fb 46 06 90 	st.w	sp[1680],r6
80006298:	2f f8       	sub	r8,-1
8000629a:	c3 18       	rjmp	800062fc <_vfprintf_r+0x1db0>
8000629c:	10 96       	mov	r6,r8
8000629e:	58 08       	cp.w	r8,0
800062a0:	e0 89 00 1c 	brgt	800062d8 <_vfprintf_r+0x1d8c>
800062a4:	c4 b8       	rjmp	8000633a <_vfprintf_r+0x1dee>
800062a6:	2f 09       	sub	r9,-16
800062a8:	2f f8       	sub	r8,-1
800062aa:	fb 49 06 90 	st.w	sp[1680],r9
800062ae:	87 02       	st.w	r3[0x0],r2
800062b0:	87 10       	st.w	r3[0x4],r0
800062b2:	fb 48 06 8c 	st.w	sp[1676],r8
800062b6:	58 78       	cp.w	r8,7
800062b8:	e0 89 00 04 	brgt	800062c0 <_vfprintf_r+0x1d74>
800062bc:	2f 83       	sub	r3,-8
800062be:	c0 b8       	rjmp	800062d4 <_vfprintf_r+0x1d88>
800062c0:	fa ca f9 78 	sub	r10,sp,-1672
800062c4:	02 9b       	mov	r11,r1
800062c6:	08 9c       	mov	r12,r4
800062c8:	fe b0 f1 34 	rcall	80004530 <__sprint_r>
800062cc:	e0 81 00 bf 	brne	8000644a <_vfprintf_r+0x1efe>
800062d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800062d4:	21 06       	sub	r6,16
800062d6:	c0 48       	rjmp	800062de <_vfprintf_r+0x1d92>
800062d8:	fe c2 c4 38 	sub	r2,pc,-15304
800062dc:	31 00       	mov	r0,16
800062de:	fa f9 06 90 	ld.w	r9,sp[1680]
800062e2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062e6:	fe ca c4 46 	sub	r10,pc,-15290
800062ea:	59 06       	cp.w	r6,16
800062ec:	fe 99 ff dd 	brgt	800062a6 <_vfprintf_r+0x1d5a>
800062f0:	0c 09       	add	r9,r6
800062f2:	87 0a       	st.w	r3[0x0],r10
800062f4:	fb 49 06 90 	st.w	sp[1680],r9
800062f8:	2f f8       	sub	r8,-1
800062fa:	87 16       	st.w	r3[0x4],r6
800062fc:	fb 48 06 8c 	st.w	sp[1676],r8
80006300:	c0 e8       	rjmp	8000631c <_vfprintf_r+0x1dd0>
80006302:	fa f8 06 90 	ld.w	r8,sp[1680]
80006306:	2f f8       	sub	r8,-1
80006308:	30 19       	mov	r9,1
8000630a:	fb 48 06 90 	st.w	sp[1680],r8
8000630e:	87 06       	st.w	r3[0x0],r6
80006310:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006314:	87 19       	st.w	r3[0x4],r9
80006316:	2f f8       	sub	r8,-1
80006318:	fb 48 06 8c 	st.w	sp[1676],r8
8000631c:	58 78       	cp.w	r8,7
8000631e:	e0 89 00 04 	brgt	80006326 <_vfprintf_r+0x1dda>
80006322:	2f 83       	sub	r3,-8
80006324:	c0 b8       	rjmp	8000633a <_vfprintf_r+0x1dee>
80006326:	fa ca f9 78 	sub	r10,sp,-1672
8000632a:	02 9b       	mov	r11,r1
8000632c:	08 9c       	mov	r12,r4
8000632e:	fe b0 f1 01 	rcall	80004530 <__sprint_r>
80006332:	e0 81 00 8c 	brne	8000644a <_vfprintf_r+0x1efe>
80006336:	fa c3 f9 e0 	sub	r3,sp,-1568
8000633a:	40 ea       	lddsp	r10,sp[0x38]
8000633c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006340:	14 08       	add	r8,r10
80006342:	fa c9 f9 64 	sub	r9,sp,-1692
80006346:	fb 48 06 90 	st.w	sp[1680],r8
8000634a:	87 1a       	st.w	r3[0x4],r10
8000634c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006350:	87 09       	st.w	r3[0x0],r9
80006352:	2f f8       	sub	r8,-1
80006354:	fb 48 06 8c 	st.w	sp[1676],r8
80006358:	58 78       	cp.w	r8,7
8000635a:	e0 89 00 04 	brgt	80006362 <_vfprintf_r+0x1e16>
8000635e:	2f 83       	sub	r3,-8
80006360:	c0 a8       	rjmp	80006374 <_vfprintf_r+0x1e28>
80006362:	fa ca f9 78 	sub	r10,sp,-1672
80006366:	02 9b       	mov	r11,r1
80006368:	08 9c       	mov	r12,r4
8000636a:	fe b0 f0 e3 	rcall	80004530 <__sprint_r>
8000636e:	c6 e1       	brne	8000644a <_vfprintf_r+0x1efe>
80006370:	fa c3 f9 e0 	sub	r3,sp,-1568
80006374:	e2 15 00 04 	andl	r5,0x4,COH
80006378:	c3 f0       	breq	800063f6 <_vfprintf_r+0x1eaa>
8000637a:	40 86       	lddsp	r6,sp[0x20]
8000637c:	40 39       	lddsp	r9,sp[0xc]
8000637e:	12 16       	sub	r6,r9
80006380:	58 06       	cp.w	r6,0
80006382:	e0 89 00 1a 	brgt	800063b6 <_vfprintf_r+0x1e6a>
80006386:	c3 88       	rjmp	800063f6 <_vfprintf_r+0x1eaa>
80006388:	2f 09       	sub	r9,-16
8000638a:	2f f8       	sub	r8,-1
8000638c:	fb 49 06 90 	st.w	sp[1680],r9
80006390:	87 05       	st.w	r3[0x0],r5
80006392:	87 12       	st.w	r3[0x4],r2
80006394:	fb 48 06 8c 	st.w	sp[1676],r8
80006398:	58 78       	cp.w	r8,7
8000639a:	e0 89 00 04 	brgt	800063a2 <_vfprintf_r+0x1e56>
8000639e:	2f 83       	sub	r3,-8
800063a0:	c0 98       	rjmp	800063b2 <_vfprintf_r+0x1e66>
800063a2:	00 9a       	mov	r10,r0
800063a4:	02 9b       	mov	r11,r1
800063a6:	08 9c       	mov	r12,r4
800063a8:	fe b0 f0 c4 	rcall	80004530 <__sprint_r>
800063ac:	c4 f1       	brne	8000644a <_vfprintf_r+0x1efe>
800063ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800063b2:	21 06       	sub	r6,16
800063b4:	c0 68       	rjmp	800063c0 <_vfprintf_r+0x1e74>
800063b6:	fe c5 c5 26 	sub	r5,pc,-15066
800063ba:	31 02       	mov	r2,16
800063bc:	fa c0 f9 78 	sub	r0,sp,-1672
800063c0:	fa f9 06 90 	ld.w	r9,sp[1680]
800063c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063c8:	fe ca c5 38 	sub	r10,pc,-15048
800063cc:	59 06       	cp.w	r6,16
800063ce:	fe 99 ff dd 	brgt	80006388 <_vfprintf_r+0x1e3c>
800063d2:	0c 09       	add	r9,r6
800063d4:	2f f8       	sub	r8,-1
800063d6:	87 0a       	st.w	r3[0x0],r10
800063d8:	87 16       	st.w	r3[0x4],r6
800063da:	fb 49 06 90 	st.w	sp[1680],r9
800063de:	fb 48 06 8c 	st.w	sp[1676],r8
800063e2:	58 78       	cp.w	r8,7
800063e4:	e0 8a 00 09 	brle	800063f6 <_vfprintf_r+0x1eaa>
800063e8:	fa ca f9 78 	sub	r10,sp,-1672
800063ec:	02 9b       	mov	r11,r1
800063ee:	08 9c       	mov	r12,r4
800063f0:	fe b0 f0 a0 	rcall	80004530 <__sprint_r>
800063f4:	c2 b1       	brne	8000644a <_vfprintf_r+0x1efe>
800063f6:	40 bc       	lddsp	r12,sp[0x2c]
800063f8:	40 36       	lddsp	r6,sp[0xc]
800063fa:	40 8e       	lddsp	lr,sp[0x20]
800063fc:	ec 0e 0c 48 	max	r8,r6,lr
80006400:	10 0c       	add	r12,r8
80006402:	50 bc       	stdsp	sp[0x2c],r12
80006404:	fa f8 06 90 	ld.w	r8,sp[1680]
80006408:	58 08       	cp.w	r8,0
8000640a:	c0 80       	breq	8000641a <_vfprintf_r+0x1ece>
8000640c:	fa ca f9 78 	sub	r10,sp,-1672
80006410:	02 9b       	mov	r11,r1
80006412:	08 9c       	mov	r12,r4
80006414:	fe b0 f0 8e 	rcall	80004530 <__sprint_r>
80006418:	c1 91       	brne	8000644a <_vfprintf_r+0x1efe>
8000641a:	30 0b       	mov	r11,0
8000641c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006420:	fb 4b 06 8c 	st.w	sp[1676],r11
80006424:	fe 9f f1 22 	bral	80004668 <_vfprintf_r+0x11c>
80006428:	08 95       	mov	r5,r4
8000642a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000642e:	58 08       	cp.w	r8,0
80006430:	c0 80       	breq	80006440 <_vfprintf_r+0x1ef4>
80006432:	08 9c       	mov	r12,r4
80006434:	fa ca f9 78 	sub	r10,sp,-1672
80006438:	02 9b       	mov	r11,r1
8000643a:	fe b0 f0 7b 	rcall	80004530 <__sprint_r>
8000643e:	c0 61       	brne	8000644a <_vfprintf_r+0x1efe>
80006440:	30 08       	mov	r8,0
80006442:	fb 48 06 8c 	st.w	sp[1676],r8
80006446:	c0 28       	rjmp	8000644a <_vfprintf_r+0x1efe>
80006448:	40 41       	lddsp	r1,sp[0x10]
8000644a:	82 68       	ld.sh	r8,r1[0xc]
8000644c:	ed b8 00 06 	bld	r8,0x6
80006450:	c0 31       	brne	80006456 <_vfprintf_r+0x1f0a>
80006452:	3f fa       	mov	r10,-1
80006454:	50 ba       	stdsp	sp[0x2c],r10
80006456:	40 bc       	lddsp	r12,sp[0x2c]
80006458:	fe 3d f9 44 	sub	sp,-1724
8000645c:	d8 32       	popm	r0-r7,pc
8000645e:	d7 03       	nop

80006460 <__swsetup_r>:
80006460:	d4 21       	pushm	r4-r7,lr
80006462:	e0 68 01 04 	mov	r8,260
80006466:	18 96       	mov	r6,r12
80006468:	16 97       	mov	r7,r11
8000646a:	70 0c       	ld.w	r12,r8[0x0]
8000646c:	58 0c       	cp.w	r12,0
8000646e:	c0 60       	breq	8000647a <__swsetup_r+0x1a>
80006470:	78 68       	ld.w	r8,r12[0x18]
80006472:	58 08       	cp.w	r8,0
80006474:	c0 31       	brne	8000647a <__swsetup_r+0x1a>
80006476:	e0 a0 07 b9 	rcall	800073e8 <__sinit>
8000647a:	fe c8 c4 ba 	sub	r8,pc,-15174
8000647e:	10 37       	cp.w	r7,r8
80006480:	c0 61       	brne	8000648c <__swsetup_r+0x2c>
80006482:	e0 68 01 04 	mov	r8,260
80006486:	70 08       	ld.w	r8,r8[0x0]
80006488:	70 07       	ld.w	r7,r8[0x0]
8000648a:	c1 28       	rjmp	800064ae <__swsetup_r+0x4e>
8000648c:	fe c8 c4 ac 	sub	r8,pc,-15188
80006490:	10 37       	cp.w	r7,r8
80006492:	c0 61       	brne	8000649e <__swsetup_r+0x3e>
80006494:	e0 68 01 04 	mov	r8,260
80006498:	70 08       	ld.w	r8,r8[0x0]
8000649a:	70 17       	ld.w	r7,r8[0x4]
8000649c:	c0 98       	rjmp	800064ae <__swsetup_r+0x4e>
8000649e:	fe c8 c4 9e 	sub	r8,pc,-15202
800064a2:	10 37       	cp.w	r7,r8
800064a4:	c0 51       	brne	800064ae <__swsetup_r+0x4e>
800064a6:	e0 68 01 04 	mov	r8,260
800064aa:	70 08       	ld.w	r8,r8[0x0]
800064ac:	70 27       	ld.w	r7,r8[0x8]
800064ae:	8e 68       	ld.sh	r8,r7[0xc]
800064b0:	ed b8 00 03 	bld	r8,0x3
800064b4:	c1 e0       	breq	800064f0 <__swsetup_r+0x90>
800064b6:	ed b8 00 04 	bld	r8,0x4
800064ba:	c3 e1       	brne	80006536 <__swsetup_r+0xd6>
800064bc:	ed b8 00 02 	bld	r8,0x2
800064c0:	c1 51       	brne	800064ea <__swsetup_r+0x8a>
800064c2:	6e db       	ld.w	r11,r7[0x34]
800064c4:	58 0b       	cp.w	r11,0
800064c6:	c0 a0       	breq	800064da <__swsetup_r+0x7a>
800064c8:	ee c8 ff bc 	sub	r8,r7,-68
800064cc:	10 3b       	cp.w	r11,r8
800064ce:	c0 40       	breq	800064d6 <__swsetup_r+0x76>
800064d0:	0c 9c       	mov	r12,r6
800064d2:	e0 a0 08 25 	rcall	8000751c <_free_r>
800064d6:	30 08       	mov	r8,0
800064d8:	8f d8       	st.w	r7[0x34],r8
800064da:	8e 68       	ld.sh	r8,r7[0xc]
800064dc:	e0 18 ff db 	andl	r8,0xffdb
800064e0:	ae 68       	st.h	r7[0xc],r8
800064e2:	30 08       	mov	r8,0
800064e4:	8f 18       	st.w	r7[0x4],r8
800064e6:	6e 48       	ld.w	r8,r7[0x10]
800064e8:	8f 08       	st.w	r7[0x0],r8
800064ea:	8e 68       	ld.sh	r8,r7[0xc]
800064ec:	a3 b8       	sbr	r8,0x3
800064ee:	ae 68       	st.h	r7[0xc],r8
800064f0:	6e 48       	ld.w	r8,r7[0x10]
800064f2:	58 08       	cp.w	r8,0
800064f4:	c0 b1       	brne	8000650a <__swsetup_r+0xaa>
800064f6:	8e 68       	ld.sh	r8,r7[0xc]
800064f8:	e2 18 02 80 	andl	r8,0x280,COH
800064fc:	e0 48 02 00 	cp.w	r8,512
80006500:	c0 50       	breq	8000650a <__swsetup_r+0xaa>
80006502:	0c 9c       	mov	r12,r6
80006504:	0e 9b       	mov	r11,r7
80006506:	e0 a0 0a 4b 	rcall	8000799c <__smakebuf_r>
8000650a:	8e 69       	ld.sh	r9,r7[0xc]
8000650c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006510:	c0 70       	breq	8000651e <__swsetup_r+0xbe>
80006512:	30 08       	mov	r8,0
80006514:	8f 28       	st.w	r7[0x8],r8
80006516:	6e 58       	ld.w	r8,r7[0x14]
80006518:	5c 38       	neg	r8
8000651a:	8f 68       	st.w	r7[0x18],r8
8000651c:	c0 68       	rjmp	80006528 <__swsetup_r+0xc8>
8000651e:	ed b9 00 01 	bld	r9,0x1
80006522:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80006526:	8f 28       	st.w	r7[0x8],r8
80006528:	6e 48       	ld.w	r8,r7[0x10]
8000652a:	58 08       	cp.w	r8,0
8000652c:	c0 61       	brne	80006538 <__swsetup_r+0xd8>
8000652e:	8e 68       	ld.sh	r8,r7[0xc]
80006530:	ed b8 00 07 	bld	r8,0x7
80006534:	c0 21       	brne	80006538 <__swsetup_r+0xd8>
80006536:	dc 2a       	popm	r4-r7,pc,r12=-1
80006538:	d8 2a       	popm	r4-r7,pc,r12=0
8000653a:	d7 03       	nop

8000653c <quorem>:
8000653c:	d4 31       	pushm	r0-r7,lr
8000653e:	20 2d       	sub	sp,8
80006540:	18 97       	mov	r7,r12
80006542:	78 48       	ld.w	r8,r12[0x10]
80006544:	76 46       	ld.w	r6,r11[0x10]
80006546:	0c 38       	cp.w	r8,r6
80006548:	c0 34       	brge	8000654e <quorem+0x12>
8000654a:	30 0c       	mov	r12,0
8000654c:	c8 58       	rjmp	80006656 <quorem+0x11a>
8000654e:	ec c2 ff fc 	sub	r2,r6,-4
80006552:	f6 c3 ff ec 	sub	r3,r11,-20
80006556:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000655a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000655e:	2f f9       	sub	r9,-1
80006560:	20 16       	sub	r6,1
80006562:	f8 09 0d 08 	divu	r8,r12,r9
80006566:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000656a:	ee c4 ff ec 	sub	r4,r7,-20
8000656e:	10 95       	mov	r5,r8
80006570:	58 08       	cp.w	r8,0
80006572:	c4 10       	breq	800065f4 <quorem+0xb8>
80006574:	30 09       	mov	r9,0
80006576:	06 9a       	mov	r10,r3
80006578:	08 98       	mov	r8,r4
8000657a:	12 91       	mov	r1,r9
8000657c:	50 0b       	stdsp	sp[0x0],r11
8000657e:	70 0e       	ld.w	lr,r8[0x0]
80006580:	b1 8e       	lsr	lr,0x10
80006582:	50 1e       	stdsp	sp[0x4],lr
80006584:	15 0e       	ld.w	lr,r10++
80006586:	fc 00 16 10 	lsr	r0,lr,0x10
8000658a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000658e:	ea 0e 03 41 	mac	r1,r5,lr
80006592:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80006596:	b1 81       	lsr	r1,0x10
80006598:	40 1b       	lddsp	r11,sp[0x4]
8000659a:	ea 00 02 40 	mul	r0,r5,r0
8000659e:	e2 00 00 00 	add	r0,r1,r0
800065a2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800065a6:	02 1b       	sub	r11,r1
800065a8:	50 1b       	stdsp	sp[0x4],r11
800065aa:	70 0b       	ld.w	r11,r8[0x0]
800065ac:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800065b0:	02 09       	add	r9,r1
800065b2:	f2 0e 01 0e 	sub	lr,r9,lr
800065b6:	b0 1e       	st.h	r8[0x2],lr
800065b8:	fc 09 14 10 	asr	r9,lr,0x10
800065bc:	40 1e       	lddsp	lr,sp[0x4]
800065be:	fc 09 00 09 	add	r9,lr,r9
800065c2:	b0 09       	st.h	r8[0x0],r9
800065c4:	e0 01 16 10 	lsr	r1,r0,0x10
800065c8:	2f c8       	sub	r8,-4
800065ca:	b1 49       	asr	r9,0x10
800065cc:	04 3a       	cp.w	r10,r2
800065ce:	fe 98 ff d8 	brls	8000657e <quorem+0x42>
800065d2:	40 0b       	lddsp	r11,sp[0x0]
800065d4:	58 0c       	cp.w	r12,0
800065d6:	c0 f1       	brne	800065f4 <quorem+0xb8>
800065d8:	ec c8 ff fb 	sub	r8,r6,-5
800065dc:	ee 08 00 28 	add	r8,r7,r8<<0x2
800065e0:	c0 28       	rjmp	800065e4 <quorem+0xa8>
800065e2:	20 16       	sub	r6,1
800065e4:	20 48       	sub	r8,4
800065e6:	08 38       	cp.w	r8,r4
800065e8:	e0 88 00 05 	brls	800065f2 <quorem+0xb6>
800065ec:	70 09       	ld.w	r9,r8[0x0]
800065ee:	58 09       	cp.w	r9,0
800065f0:	cf 90       	breq	800065e2 <quorem+0xa6>
800065f2:	8f 46       	st.w	r7[0x10],r6
800065f4:	0e 9c       	mov	r12,r7
800065f6:	e0 a0 0c fb 	rcall	80007fec <__mcmp>
800065fa:	c2 d5       	brlt	80006654 <quorem+0x118>
800065fc:	2f f5       	sub	r5,-1
800065fe:	08 98       	mov	r8,r4
80006600:	30 09       	mov	r9,0
80006602:	07 0b       	ld.w	r11,r3++
80006604:	f6 0a 16 10 	lsr	r10,r11,0x10
80006608:	70 0c       	ld.w	r12,r8[0x0]
8000660a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000660e:	f8 0e 16 10 	lsr	lr,r12,0x10
80006612:	14 1e       	sub	lr,r10
80006614:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006618:	16 1a       	sub	r10,r11
8000661a:	12 0a       	add	r10,r9
8000661c:	b0 1a       	st.h	r8[0x2],r10
8000661e:	b1 4a       	asr	r10,0x10
80006620:	fc 0a 00 09 	add	r9,lr,r10
80006624:	b0 09       	st.h	r8[0x0],r9
80006626:	2f c8       	sub	r8,-4
80006628:	b1 49       	asr	r9,0x10
8000662a:	04 33       	cp.w	r3,r2
8000662c:	fe 98 ff eb 	brls	80006602 <quorem+0xc6>
80006630:	ec c8 ff fb 	sub	r8,r6,-5
80006634:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006638:	58 09       	cp.w	r9,0
8000663a:	c0 d1       	brne	80006654 <quorem+0x118>
8000663c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006640:	c0 28       	rjmp	80006644 <quorem+0x108>
80006642:	20 16       	sub	r6,1
80006644:	20 48       	sub	r8,4
80006646:	08 38       	cp.w	r8,r4
80006648:	e0 88 00 05 	brls	80006652 <quorem+0x116>
8000664c:	70 09       	ld.w	r9,r8[0x0]
8000664e:	58 09       	cp.w	r9,0
80006650:	cf 90       	breq	80006642 <quorem+0x106>
80006652:	8f 46       	st.w	r7[0x10],r6
80006654:	0a 9c       	mov	r12,r5
80006656:	2f ed       	sub	sp,-8
80006658:	d8 32       	popm	r0-r7,pc
8000665a:	d7 03       	nop

8000665c <_dtoa_r>:
8000665c:	d4 31       	pushm	r0-r7,lr
8000665e:	21 ad       	sub	sp,104
80006660:	fa c4 ff 74 	sub	r4,sp,-140
80006664:	18 97       	mov	r7,r12
80006666:	16 95       	mov	r5,r11
80006668:	68 2c       	ld.w	r12,r4[0x8]
8000666a:	50 c9       	stdsp	sp[0x30],r9
8000666c:	68 16       	ld.w	r6,r4[0x4]
8000666e:	68 09       	ld.w	r9,r4[0x0]
80006670:	50 e8       	stdsp	sp[0x38],r8
80006672:	14 94       	mov	r4,r10
80006674:	51 2c       	stdsp	sp[0x48],r12
80006676:	fa e5 00 08 	st.d	sp[8],r4
8000667a:	51 59       	stdsp	sp[0x54],r9
8000667c:	6e 95       	ld.w	r5,r7[0x24]
8000667e:	58 05       	cp.w	r5,0
80006680:	c0 91       	brne	80006692 <_dtoa_r+0x36>
80006682:	31 0c       	mov	r12,16
80006684:	e0 a0 09 ea 	rcall	80007a58 <malloc>
80006688:	99 35       	st.w	r12[0xc],r5
8000668a:	8f 9c       	st.w	r7[0x24],r12
8000668c:	99 15       	st.w	r12[0x4],r5
8000668e:	99 25       	st.w	r12[0x8],r5
80006690:	99 05       	st.w	r12[0x0],r5
80006692:	6e 99       	ld.w	r9,r7[0x24]
80006694:	72 08       	ld.w	r8,r9[0x0]
80006696:	58 08       	cp.w	r8,0
80006698:	c0 f0       	breq	800066b6 <_dtoa_r+0x5a>
8000669a:	72 1a       	ld.w	r10,r9[0x4]
8000669c:	91 1a       	st.w	r8[0x4],r10
8000669e:	30 1a       	mov	r10,1
800066a0:	72 19       	ld.w	r9,r9[0x4]
800066a2:	f4 09 09 49 	lsl	r9,r10,r9
800066a6:	10 9b       	mov	r11,r8
800066a8:	91 29       	st.w	r8[0x8],r9
800066aa:	0e 9c       	mov	r12,r7
800066ac:	e0 a0 0c ba 	rcall	80008020 <_Bfree>
800066b0:	6e 98       	ld.w	r8,r7[0x24]
800066b2:	30 09       	mov	r9,0
800066b4:	91 09       	st.w	r8[0x0],r9
800066b6:	40 28       	lddsp	r8,sp[0x8]
800066b8:	10 94       	mov	r4,r8
800066ba:	58 08       	cp.w	r8,0
800066bc:	c0 64       	brge	800066c8 <_dtoa_r+0x6c>
800066be:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800066c2:	50 28       	stdsp	sp[0x8],r8
800066c4:	30 18       	mov	r8,1
800066c6:	c0 28       	rjmp	800066ca <_dtoa_r+0x6e>
800066c8:	30 08       	mov	r8,0
800066ca:	8d 08       	st.w	r6[0x0],r8
800066cc:	fc 1c 7f f0 	movh	r12,0x7ff0
800066d0:	40 26       	lddsp	r6,sp[0x8]
800066d2:	0c 98       	mov	r8,r6
800066d4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800066d8:	18 38       	cp.w	r8,r12
800066da:	c2 01       	brne	8000671a <_dtoa_r+0xbe>
800066dc:	e0 68 27 0f 	mov	r8,9999
800066e0:	41 5b       	lddsp	r11,sp[0x54]
800066e2:	97 08       	st.w	r11[0x0],r8
800066e4:	40 3a       	lddsp	r10,sp[0xc]
800066e6:	58 0a       	cp.w	r10,0
800066e8:	c0 71       	brne	800066f6 <_dtoa_r+0x9a>
800066ea:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800066ee:	c0 41       	brne	800066f6 <_dtoa_r+0x9a>
800066f0:	fe cc c7 40 	sub	r12,pc,-14528
800066f4:	c0 38       	rjmp	800066fa <_dtoa_r+0x9e>
800066f6:	fe cc c7 3a 	sub	r12,pc,-14534
800066fa:	41 29       	lddsp	r9,sp[0x48]
800066fc:	58 09       	cp.w	r9,0
800066fe:	e0 80 05 9a 	breq	80007232 <_dtoa_r+0xbd6>
80006702:	f8 c8 ff fd 	sub	r8,r12,-3
80006706:	f8 c9 ff f8 	sub	r9,r12,-8
8000670a:	11 8b       	ld.ub	r11,r8[0x0]
8000670c:	30 0a       	mov	r10,0
8000670e:	41 25       	lddsp	r5,sp[0x48]
80006710:	f4 0b 18 00 	cp.b	r11,r10
80006714:	f2 08 17 10 	movne	r8,r9
80006718:	c1 68       	rjmp	80006744 <_dtoa_r+0xe8>
8000671a:	fa ea 00 08 	ld.d	r10,sp[8]
8000671e:	30 08       	mov	r8,0
80006720:	fa eb 00 3c 	st.d	sp[60],r10
80006724:	30 09       	mov	r9,0
80006726:	e0 a0 13 88 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000672a:	c1 00       	breq	8000674a <_dtoa_r+0xee>
8000672c:	30 18       	mov	r8,1
8000672e:	41 5a       	lddsp	r10,sp[0x54]
80006730:	95 08       	st.w	r10[0x0],r8
80006732:	fe cc c8 a6 	sub	r12,pc,-14170
80006736:	41 29       	lddsp	r9,sp[0x48]
80006738:	f8 08 00 08 	add	r8,r12,r8
8000673c:	58 09       	cp.w	r9,0
8000673e:	e0 80 05 7a 	breq	80007232 <_dtoa_r+0xbd6>
80006742:	12 95       	mov	r5,r9
80006744:	8b 08       	st.w	r5[0x0],r8
80006746:	e0 8f 05 76 	bral	80007232 <_dtoa_r+0xbd6>
8000674a:	fa c8 ff 9c 	sub	r8,sp,-100
8000674e:	fa c9 ff a0 	sub	r9,sp,-96
80006752:	fa ea 00 3c 	ld.d	r10,sp[60]
80006756:	0e 9c       	mov	r12,r7
80006758:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000675c:	e0 a0 0c b4 	rcall	800080c4 <__d2b>
80006760:	18 93       	mov	r3,r12
80006762:	58 05       	cp.w	r5,0
80006764:	c0 d0       	breq	8000677e <_dtoa_r+0x122>
80006766:	fa ea 00 3c 	ld.d	r10,sp[60]
8000676a:	30 04       	mov	r4,0
8000676c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006770:	ea c5 03 ff 	sub	r5,r5,1023
80006774:	10 9b       	mov	r11,r8
80006776:	51 74       	stdsp	sp[0x5c],r4
80006778:	ea 1b 3f f0 	orh	r11,0x3ff0
8000677c:	c2 58       	rjmp	800067c6 <_dtoa_r+0x16a>
8000677e:	41 88       	lddsp	r8,sp[0x60]
80006780:	41 9c       	lddsp	r12,sp[0x64]
80006782:	10 0c       	add	r12,r8
80006784:	f8 c5 fb ce 	sub	r5,r12,-1074
80006788:	e0 45 00 20 	cp.w	r5,32
8000678c:	e0 8a 00 0e 	brle	800067a8 <_dtoa_r+0x14c>
80006790:	f8 cc fb ee 	sub	r12,r12,-1042
80006794:	40 3b       	lddsp	r11,sp[0xc]
80006796:	ea 08 11 40 	rsub	r8,r5,64
8000679a:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000679e:	ec 08 09 46 	lsl	r6,r6,r8
800067a2:	0c 4c       	or	r12,r6
800067a4:	c0 78       	rjmp	800067b2 <_dtoa_r+0x156>
800067a6:	d7 03       	nop
800067a8:	ea 0c 11 20 	rsub	r12,r5,32
800067ac:	40 3a       	lddsp	r10,sp[0xc]
800067ae:	f4 0c 09 4c 	lsl	r12,r10,r12
800067b2:	fe b0 eb c9 	rcall	80003f44 <__avr32_u32_to_f64>
800067b6:	fc 18 fe 10 	movh	r8,0xfe10
800067ba:	30 19       	mov	r9,1
800067bc:	ea c5 04 33 	sub	r5,r5,1075
800067c0:	f0 0b 00 0b 	add	r11,r8,r11
800067c4:	51 79       	stdsp	sp[0x5c],r9
800067c6:	30 08       	mov	r8,0
800067c8:	fc 19 3f f8 	movh	r9,0x3ff8
800067cc:	e0 a0 11 ca 	rcall	80008b60 <__avr32_f64_sub>
800067d0:	e0 68 43 61 	mov	r8,17249
800067d4:	ea 18 63 6f 	orh	r8,0x636f
800067d8:	e0 69 87 a7 	mov	r9,34727
800067dc:	ea 19 3f d2 	orh	r9,0x3fd2
800067e0:	fe b0 ea c8 	rcall	80003d70 <__avr32_f64_mul>
800067e4:	e0 68 c8 b3 	mov	r8,51379
800067e8:	ea 18 8b 60 	orh	r8,0x8b60
800067ec:	e0 69 8a 28 	mov	r9,35368
800067f0:	ea 19 3f c6 	orh	r9,0x3fc6
800067f4:	e0 a0 12 84 	rcall	80008cfc <__avr32_f64_add>
800067f8:	0a 9c       	mov	r12,r5
800067fa:	14 90       	mov	r0,r10
800067fc:	16 91       	mov	r1,r11
800067fe:	fe b0 eb a7 	rcall	80003f4c <__avr32_s32_to_f64>
80006802:	e0 68 79 fb 	mov	r8,31227
80006806:	ea 18 50 9f 	orh	r8,0x509f
8000680a:	e0 69 44 13 	mov	r9,17427
8000680e:	ea 19 3f d3 	orh	r9,0x3fd3
80006812:	fe b0 ea af 	rcall	80003d70 <__avr32_f64_mul>
80006816:	14 98       	mov	r8,r10
80006818:	16 99       	mov	r9,r11
8000681a:	00 9a       	mov	r10,r0
8000681c:	02 9b       	mov	r11,r1
8000681e:	e0 a0 12 6f 	rcall	80008cfc <__avr32_f64_add>
80006822:	14 90       	mov	r0,r10
80006824:	16 91       	mov	r1,r11
80006826:	e0 a0 12 f5 	rcall	80008e10 <__avr32_f64_to_s32>
8000682a:	30 08       	mov	r8,0
8000682c:	18 96       	mov	r6,r12
8000682e:	30 09       	mov	r9,0
80006830:	00 9a       	mov	r10,r0
80006832:	02 9b       	mov	r11,r1
80006834:	fe b0 eb fc 	rcall	8000402c <__avr32_f64_cmp_lt>
80006838:	c0 c0       	breq	80006850 <_dtoa_r+0x1f4>
8000683a:	0c 9c       	mov	r12,r6
8000683c:	fe b0 eb 88 	rcall	80003f4c <__avr32_s32_to_f64>
80006840:	14 98       	mov	r8,r10
80006842:	16 99       	mov	r9,r11
80006844:	00 9a       	mov	r10,r0
80006846:	02 9b       	mov	r11,r1
80006848:	e0 a0 12 f7 	rcall	80008e36 <__avr32_f64_cmp_eq>
8000684c:	f7 b6 00 01 	subeq	r6,1
80006850:	59 66       	cp.w	r6,22
80006852:	e0 88 00 05 	brls	8000685c <_dtoa_r+0x200>
80006856:	30 18       	mov	r8,1
80006858:	51 48       	stdsp	sp[0x50],r8
8000685a:	c1 38       	rjmp	80006880 <_dtoa_r+0x224>
8000685c:	fe c8 c7 f0 	sub	r8,pc,-14352
80006860:	fa ea 00 3c 	ld.d	r10,sp[60]
80006864:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006868:	fe b0 eb e2 	rcall	8000402c <__avr32_f64_cmp_lt>
8000686c:	f9 b4 00 00 	moveq	r4,0
80006870:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006874:	f7 b6 01 01 	subne	r6,1
80006878:	f9 bc 01 00 	movne	r12,0
8000687c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006880:	41 90       	lddsp	r0,sp[0x64]
80006882:	20 10       	sub	r0,1
80006884:	0a 10       	sub	r0,r5
80006886:	c0 46       	brmi	8000688e <_dtoa_r+0x232>
80006888:	50 40       	stdsp	sp[0x10],r0
8000688a:	30 00       	mov	r0,0
8000688c:	c0 48       	rjmp	80006894 <_dtoa_r+0x238>
8000688e:	30 0b       	mov	r11,0
80006890:	5c 30       	neg	r0
80006892:	50 4b       	stdsp	sp[0x10],r11
80006894:	ec 02 11 00 	rsub	r2,r6,0
80006898:	58 06       	cp.w	r6,0
8000689a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000689e:	f5 d6 e4 0a 	addge	r10,r10,r6
800068a2:	fb fa 4a 04 	st.wge	sp[0x10],r10
800068a6:	fb f6 4a 11 	st.wge	sp[0x44],r6
800068aa:	f9 b2 04 00 	movge	r2,0
800068ae:	e1 d6 e5 10 	sublt	r0,r0,r6
800068b2:	f9 b9 05 00 	movlt	r9,0
800068b6:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800068ba:	40 c8       	lddsp	r8,sp[0x30]
800068bc:	58 98       	cp.w	r8,9
800068be:	e0 8b 00 20 	brhi	800068fe <_dtoa_r+0x2a2>
800068c2:	58 58       	cp.w	r8,5
800068c4:	f9 b4 0a 01 	movle	r4,1
800068c8:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800068cc:	f7 b5 09 04 	subgt	r5,4
800068d0:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800068d4:	f9 b4 09 00 	movgt	r4,0
800068d8:	40 cc       	lddsp	r12,sp[0x30]
800068da:	58 3c       	cp.w	r12,3
800068dc:	c2 d0       	breq	80006936 <_dtoa_r+0x2da>
800068de:	e0 89 00 05 	brgt	800068e8 <_dtoa_r+0x28c>
800068e2:	58 2c       	cp.w	r12,2
800068e4:	c1 01       	brne	80006904 <_dtoa_r+0x2a8>
800068e6:	c1 88       	rjmp	80006916 <_dtoa_r+0x2ba>
800068e8:	40 cb       	lddsp	r11,sp[0x30]
800068ea:	58 4b       	cp.w	r11,4
800068ec:	c0 60       	breq	800068f8 <_dtoa_r+0x29c>
800068ee:	58 5b       	cp.w	r11,5
800068f0:	c0 a1       	brne	80006904 <_dtoa_r+0x2a8>
800068f2:	30 1a       	mov	r10,1
800068f4:	50 da       	stdsp	sp[0x34],r10
800068f6:	c2 28       	rjmp	8000693a <_dtoa_r+0x2de>
800068f8:	30 19       	mov	r9,1
800068fa:	50 d9       	stdsp	sp[0x34],r9
800068fc:	c0 f8       	rjmp	8000691a <_dtoa_r+0x2be>
800068fe:	30 08       	mov	r8,0
80006900:	30 14       	mov	r4,1
80006902:	50 c8       	stdsp	sp[0x30],r8
80006904:	3f f5       	mov	r5,-1
80006906:	30 1c       	mov	r12,1
80006908:	30 0b       	mov	r11,0
8000690a:	50 95       	stdsp	sp[0x24],r5
8000690c:	50 dc       	stdsp	sp[0x34],r12
8000690e:	0a 91       	mov	r1,r5
80006910:	31 28       	mov	r8,18
80006912:	50 eb       	stdsp	sp[0x38],r11
80006914:	c2 08       	rjmp	80006954 <_dtoa_r+0x2f8>
80006916:	30 0a       	mov	r10,0
80006918:	50 da       	stdsp	sp[0x34],r10
8000691a:	40 e9       	lddsp	r9,sp[0x38]
8000691c:	58 09       	cp.w	r9,0
8000691e:	e0 89 00 07 	brgt	8000692c <_dtoa_r+0x2d0>
80006922:	30 18       	mov	r8,1
80006924:	50 98       	stdsp	sp[0x24],r8
80006926:	10 91       	mov	r1,r8
80006928:	50 e8       	stdsp	sp[0x38],r8
8000692a:	c1 58       	rjmp	80006954 <_dtoa_r+0x2f8>
8000692c:	40 e5       	lddsp	r5,sp[0x38]
8000692e:	50 95       	stdsp	sp[0x24],r5
80006930:	0a 91       	mov	r1,r5
80006932:	0a 98       	mov	r8,r5
80006934:	c1 08       	rjmp	80006954 <_dtoa_r+0x2f8>
80006936:	30 0c       	mov	r12,0
80006938:	50 dc       	stdsp	sp[0x34],r12
8000693a:	40 eb       	lddsp	r11,sp[0x38]
8000693c:	ec 0b 00 0b 	add	r11,r6,r11
80006940:	50 9b       	stdsp	sp[0x24],r11
80006942:	16 98       	mov	r8,r11
80006944:	2f f8       	sub	r8,-1
80006946:	58 08       	cp.w	r8,0
80006948:	e0 89 00 05 	brgt	80006952 <_dtoa_r+0x2f6>
8000694c:	10 91       	mov	r1,r8
8000694e:	30 18       	mov	r8,1
80006950:	c0 28       	rjmp	80006954 <_dtoa_r+0x2f8>
80006952:	10 91       	mov	r1,r8
80006954:	30 09       	mov	r9,0
80006956:	6e 9a       	ld.w	r10,r7[0x24]
80006958:	95 19       	st.w	r10[0x4],r9
8000695a:	30 49       	mov	r9,4
8000695c:	c0 68       	rjmp	80006968 <_dtoa_r+0x30c>
8000695e:	d7 03       	nop
80006960:	6a 1a       	ld.w	r10,r5[0x4]
80006962:	a1 79       	lsl	r9,0x1
80006964:	2f fa       	sub	r10,-1
80006966:	8b 1a       	st.w	r5[0x4],r10
80006968:	6e 95       	ld.w	r5,r7[0x24]
8000696a:	f2 ca ff ec 	sub	r10,r9,-20
8000696e:	10 3a       	cp.w	r10,r8
80006970:	fe 98 ff f8 	brls	80006960 <_dtoa_r+0x304>
80006974:	6a 1b       	ld.w	r11,r5[0x4]
80006976:	0e 9c       	mov	r12,r7
80006978:	e0 a0 0b 6e 	rcall	80008054 <_Balloc>
8000697c:	58 e1       	cp.w	r1,14
8000697e:	5f 88       	srls	r8
80006980:	8b 0c       	st.w	r5[0x0],r12
80006982:	f1 e4 00 04 	and	r4,r8,r4
80006986:	6e 98       	ld.w	r8,r7[0x24]
80006988:	70 08       	ld.w	r8,r8[0x0]
8000698a:	50 88       	stdsp	sp[0x20],r8
8000698c:	e0 80 01 82 	breq	80006c90 <_dtoa_r+0x634>
80006990:	58 06       	cp.w	r6,0
80006992:	e0 8a 00 43 	brle	80006a18 <_dtoa_r+0x3bc>
80006996:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000699a:	fe c8 c9 2e 	sub	r8,pc,-14034
8000699e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800069a2:	fa e5 00 18 	st.d	sp[24],r4
800069a6:	ec 04 14 04 	asr	r4,r6,0x4
800069aa:	ed b4 00 04 	bld	r4,0x4
800069ae:	c0 30       	breq	800069b4 <_dtoa_r+0x358>
800069b0:	30 25       	mov	r5,2
800069b2:	c1 08       	rjmp	800069d2 <_dtoa_r+0x376>
800069b4:	fe c8 c8 80 	sub	r8,pc,-14208
800069b8:	f0 e8 00 20 	ld.d	r8,r8[32]
800069bc:	fa ea 00 3c 	ld.d	r10,sp[60]
800069c0:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800069c4:	e0 a0 12 80 	rcall	80008ec4 <__avr32_f64_div>
800069c8:	30 35       	mov	r5,3
800069ca:	14 98       	mov	r8,r10
800069cc:	16 99       	mov	r9,r11
800069ce:	fa e9 00 08 	st.d	sp[8],r8
800069d2:	fe cc c8 9e 	sub	r12,pc,-14178
800069d6:	50 a3       	stdsp	sp[0x28],r3
800069d8:	0c 93       	mov	r3,r6
800069da:	18 96       	mov	r6,r12
800069dc:	c0 f8       	rjmp	800069fa <_dtoa_r+0x39e>
800069de:	fa ea 00 18 	ld.d	r10,sp[24]
800069e2:	ed b4 00 00 	bld	r4,0x0
800069e6:	c0 81       	brne	800069f6 <_dtoa_r+0x39a>
800069e8:	ec e8 00 00 	ld.d	r8,r6[0]
800069ec:	2f f5       	sub	r5,-1
800069ee:	fe b0 e9 c1 	rcall	80003d70 <__avr32_f64_mul>
800069f2:	fa eb 00 18 	st.d	sp[24],r10
800069f6:	a1 54       	asr	r4,0x1
800069f8:	2f 86       	sub	r6,-8
800069fa:	58 04       	cp.w	r4,0
800069fc:	cf 11       	brne	800069de <_dtoa_r+0x382>
800069fe:	fa e8 00 18 	ld.d	r8,sp[24]
80006a02:	fa ea 00 08 	ld.d	r10,sp[8]
80006a06:	06 96       	mov	r6,r3
80006a08:	e0 a0 12 5e 	rcall	80008ec4 <__avr32_f64_div>
80006a0c:	40 a3       	lddsp	r3,sp[0x28]
80006a0e:	14 98       	mov	r8,r10
80006a10:	16 99       	mov	r9,r11
80006a12:	fa e9 00 08 	st.d	sp[8],r8
80006a16:	c2 f8       	rjmp	80006a74 <_dtoa_r+0x418>
80006a18:	ec 08 11 00 	rsub	r8,r6,0
80006a1c:	c0 31       	brne	80006a22 <_dtoa_r+0x3c6>
80006a1e:	30 25       	mov	r5,2
80006a20:	c2 a8       	rjmp	80006a74 <_dtoa_r+0x418>
80006a22:	fe cc c8 ee 	sub	r12,pc,-14098
80006a26:	f0 04 14 04 	asr	r4,r8,0x4
80006a2a:	50 1c       	stdsp	sp[0x4],r12
80006a2c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006a30:	fe c9 c9 c4 	sub	r9,pc,-13884
80006a34:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a38:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006a3c:	fe b0 e9 9a 	rcall	80003d70 <__avr32_f64_mul>
80006a40:	40 1c       	lddsp	r12,sp[0x4]
80006a42:	50 63       	stdsp	sp[0x18],r3
80006a44:	30 25       	mov	r5,2
80006a46:	0c 93       	mov	r3,r6
80006a48:	fa eb 00 08 	st.d	sp[8],r10
80006a4c:	18 96       	mov	r6,r12
80006a4e:	c0 f8       	rjmp	80006a6c <_dtoa_r+0x410>
80006a50:	fa ea 00 08 	ld.d	r10,sp[8]
80006a54:	ed b4 00 00 	bld	r4,0x0
80006a58:	c0 81       	brne	80006a68 <_dtoa_r+0x40c>
80006a5a:	ec e8 00 00 	ld.d	r8,r6[0]
80006a5e:	2f f5       	sub	r5,-1
80006a60:	fe b0 e9 88 	rcall	80003d70 <__avr32_f64_mul>
80006a64:	fa eb 00 08 	st.d	sp[8],r10
80006a68:	a1 54       	asr	r4,0x1
80006a6a:	2f 86       	sub	r6,-8
80006a6c:	58 04       	cp.w	r4,0
80006a6e:	cf 11       	brne	80006a50 <_dtoa_r+0x3f4>
80006a70:	06 96       	mov	r6,r3
80006a72:	40 63       	lddsp	r3,sp[0x18]
80006a74:	41 4a       	lddsp	r10,sp[0x50]
80006a76:	58 0a       	cp.w	r10,0
80006a78:	c2 a0       	breq	80006acc <_dtoa_r+0x470>
80006a7a:	fa e8 00 08 	ld.d	r8,sp[8]
80006a7e:	58 01       	cp.w	r1,0
80006a80:	5f 94       	srgt	r4
80006a82:	fa e9 00 18 	st.d	sp[24],r8
80006a86:	30 08       	mov	r8,0
80006a88:	fc 19 3f f0 	movh	r9,0x3ff0
80006a8c:	fa ea 00 18 	ld.d	r10,sp[24]
80006a90:	fe b0 ea ce 	rcall	8000402c <__avr32_f64_cmp_lt>
80006a94:	f9 bc 00 00 	moveq	r12,0
80006a98:	f9 bc 01 01 	movne	r12,1
80006a9c:	e9 ec 00 0c 	and	r12,r4,r12
80006aa0:	c1 60       	breq	80006acc <_dtoa_r+0x470>
80006aa2:	40 98       	lddsp	r8,sp[0x24]
80006aa4:	58 08       	cp.w	r8,0
80006aa6:	e0 8a 00 f1 	brle	80006c88 <_dtoa_r+0x62c>
80006aaa:	30 08       	mov	r8,0
80006aac:	fc 19 40 24 	movh	r9,0x4024
80006ab0:	ec c4 00 01 	sub	r4,r6,1
80006ab4:	fa ea 00 18 	ld.d	r10,sp[24]
80006ab8:	2f f5       	sub	r5,-1
80006aba:	50 64       	stdsp	sp[0x18],r4
80006abc:	fe b0 e9 5a 	rcall	80003d70 <__avr32_f64_mul>
80006ac0:	40 94       	lddsp	r4,sp[0x24]
80006ac2:	14 98       	mov	r8,r10
80006ac4:	16 99       	mov	r9,r11
80006ac6:	fa e9 00 08 	st.d	sp[8],r8
80006aca:	c0 38       	rjmp	80006ad0 <_dtoa_r+0x474>
80006acc:	50 66       	stdsp	sp[0x18],r6
80006ace:	02 94       	mov	r4,r1
80006ad0:	0a 9c       	mov	r12,r5
80006ad2:	fe b0 ea 3d 	rcall	80003f4c <__avr32_s32_to_f64>
80006ad6:	fa e8 00 08 	ld.d	r8,sp[8]
80006ada:	fe b0 e9 4b 	rcall	80003d70 <__avr32_f64_mul>
80006ade:	30 08       	mov	r8,0
80006ae0:	fc 19 40 1c 	movh	r9,0x401c
80006ae4:	e0 a0 11 0c 	rcall	80008cfc <__avr32_f64_add>
80006ae8:	14 98       	mov	r8,r10
80006aea:	16 99       	mov	r9,r11
80006aec:	fa e9 00 28 	st.d	sp[40],r8
80006af0:	fc 18 fc c0 	movh	r8,0xfcc0
80006af4:	40 a5       	lddsp	r5,sp[0x28]
80006af6:	10 05       	add	r5,r8
80006af8:	50 a5       	stdsp	sp[0x28],r5
80006afa:	58 04       	cp.w	r4,0
80006afc:	c2 11       	brne	80006b3e <_dtoa_r+0x4e2>
80006afe:	fa ea 00 08 	ld.d	r10,sp[8]
80006b02:	30 08       	mov	r8,0
80006b04:	fc 19 40 14 	movh	r9,0x4014
80006b08:	e0 a0 10 2c 	rcall	80008b60 <__avr32_f64_sub>
80006b0c:	40 bc       	lddsp	r12,sp[0x2c]
80006b0e:	fa eb 00 08 	st.d	sp[8],r10
80006b12:	14 98       	mov	r8,r10
80006b14:	16 99       	mov	r9,r11
80006b16:	18 9a       	mov	r10,r12
80006b18:	0a 9b       	mov	r11,r5
80006b1a:	fe b0 ea 89 	rcall	8000402c <__avr32_f64_cmp_lt>
80006b1e:	e0 81 02 54 	brne	80006fc6 <_dtoa_r+0x96a>
80006b22:	0a 98       	mov	r8,r5
80006b24:	40 b9       	lddsp	r9,sp[0x2c]
80006b26:	ee 18 80 00 	eorh	r8,0x8000
80006b2a:	fa ea 00 08 	ld.d	r10,sp[8]
80006b2e:	10 95       	mov	r5,r8
80006b30:	12 98       	mov	r8,r9
80006b32:	0a 99       	mov	r9,r5
80006b34:	fe b0 ea 7c 	rcall	8000402c <__avr32_f64_cmp_lt>
80006b38:	e0 81 02 3e 	brne	80006fb4 <_dtoa_r+0x958>
80006b3c:	ca 68       	rjmp	80006c88 <_dtoa_r+0x62c>
80006b3e:	fe c9 ca d2 	sub	r9,pc,-13614
80006b42:	e8 c8 00 01 	sub	r8,r4,1
80006b46:	40 d5       	lddsp	r5,sp[0x34]
80006b48:	58 05       	cp.w	r5,0
80006b4a:	c4 f0       	breq	80006be8 <_dtoa_r+0x58c>
80006b4c:	30 0c       	mov	r12,0
80006b4e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006b52:	51 3c       	stdsp	sp[0x4c],r12
80006b54:	30 0a       	mov	r10,0
80006b56:	fc 1b 3f e0 	movh	r11,0x3fe0
80006b5a:	e0 a0 11 b5 	rcall	80008ec4 <__avr32_f64_div>
80006b5e:	fa e8 00 28 	ld.d	r8,sp[40]
80006b62:	40 85       	lddsp	r5,sp[0x20]
80006b64:	e0 a0 0f fe 	rcall	80008b60 <__avr32_f64_sub>
80006b68:	fa eb 00 28 	st.d	sp[40],r10
80006b6c:	fa ea 00 08 	ld.d	r10,sp[8]
80006b70:	e0 a0 11 50 	rcall	80008e10 <__avr32_f64_to_s32>
80006b74:	51 6c       	stdsp	sp[0x58],r12
80006b76:	fe b0 e9 eb 	rcall	80003f4c <__avr32_s32_to_f64>
80006b7a:	14 98       	mov	r8,r10
80006b7c:	16 99       	mov	r9,r11
80006b7e:	fa ea 00 08 	ld.d	r10,sp[8]
80006b82:	e0 a0 0f ef 	rcall	80008b60 <__avr32_f64_sub>
80006b86:	fa eb 00 08 	st.d	sp[8],r10
80006b8a:	41 68       	lddsp	r8,sp[0x58]
80006b8c:	2d 08       	sub	r8,-48
80006b8e:	0a c8       	st.b	r5++,r8
80006b90:	41 39       	lddsp	r9,sp[0x4c]
80006b92:	2f f9       	sub	r9,-1
80006b94:	51 39       	stdsp	sp[0x4c],r9
80006b96:	fa e8 00 28 	ld.d	r8,sp[40]
80006b9a:	fe b0 ea 49 	rcall	8000402c <__avr32_f64_cmp_lt>
80006b9e:	e0 81 03 39 	brne	80007210 <_dtoa_r+0xbb4>
80006ba2:	fa e8 00 08 	ld.d	r8,sp[8]
80006ba6:	30 0a       	mov	r10,0
80006ba8:	fc 1b 3f f0 	movh	r11,0x3ff0
80006bac:	e0 a0 0f da 	rcall	80008b60 <__avr32_f64_sub>
80006bb0:	fa e8 00 28 	ld.d	r8,sp[40]
80006bb4:	fe b0 ea 3c 	rcall	8000402c <__avr32_f64_cmp_lt>
80006bb8:	fa ea 00 28 	ld.d	r10,sp[40]
80006bbc:	30 08       	mov	r8,0
80006bbe:	fc 19 40 24 	movh	r9,0x4024
80006bc2:	e0 81 00 da 	brne	80006d76 <_dtoa_r+0x71a>
80006bc6:	41 3c       	lddsp	r12,sp[0x4c]
80006bc8:	08 3c       	cp.w	r12,r4
80006bca:	c5 f4       	brge	80006c88 <_dtoa_r+0x62c>
80006bcc:	fe b0 e8 d2 	rcall	80003d70 <__avr32_f64_mul>
80006bd0:	30 08       	mov	r8,0
80006bd2:	fa eb 00 28 	st.d	sp[40],r10
80006bd6:	fc 19 40 24 	movh	r9,0x4024
80006bda:	fa ea 00 08 	ld.d	r10,sp[8]
80006bde:	fe b0 e8 c9 	rcall	80003d70 <__avr32_f64_mul>
80006be2:	fa eb 00 08 	st.d	sp[8],r10
80006be6:	cc 3b       	rjmp	80006b6c <_dtoa_r+0x510>
80006be8:	40 85       	lddsp	r5,sp[0x20]
80006bea:	08 05       	add	r5,r4
80006bec:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006bf0:	51 35       	stdsp	sp[0x4c],r5
80006bf2:	fa e8 00 28 	ld.d	r8,sp[40]
80006bf6:	40 85       	lddsp	r5,sp[0x20]
80006bf8:	fe b0 e8 bc 	rcall	80003d70 <__avr32_f64_mul>
80006bfc:	fa eb 00 28 	st.d	sp[40],r10
80006c00:	fa ea 00 08 	ld.d	r10,sp[8]
80006c04:	e0 a0 11 06 	rcall	80008e10 <__avr32_f64_to_s32>
80006c08:	51 6c       	stdsp	sp[0x58],r12
80006c0a:	fe b0 e9 a1 	rcall	80003f4c <__avr32_s32_to_f64>
80006c0e:	14 98       	mov	r8,r10
80006c10:	16 99       	mov	r9,r11
80006c12:	fa ea 00 08 	ld.d	r10,sp[8]
80006c16:	e0 a0 0f a5 	rcall	80008b60 <__avr32_f64_sub>
80006c1a:	fa eb 00 08 	st.d	sp[8],r10
80006c1e:	41 68       	lddsp	r8,sp[0x58]
80006c20:	2d 08       	sub	r8,-48
80006c22:	0a c8       	st.b	r5++,r8
80006c24:	41 3c       	lddsp	r12,sp[0x4c]
80006c26:	18 35       	cp.w	r5,r12
80006c28:	c2 81       	brne	80006c78 <_dtoa_r+0x61c>
80006c2a:	30 08       	mov	r8,0
80006c2c:	fc 19 3f e0 	movh	r9,0x3fe0
80006c30:	fa ea 00 28 	ld.d	r10,sp[40]
80006c34:	e0 a0 10 64 	rcall	80008cfc <__avr32_f64_add>
80006c38:	40 85       	lddsp	r5,sp[0x20]
80006c3a:	fa e8 00 08 	ld.d	r8,sp[8]
80006c3e:	08 05       	add	r5,r4
80006c40:	fe b0 e9 f6 	rcall	8000402c <__avr32_f64_cmp_lt>
80006c44:	e0 81 00 99 	brne	80006d76 <_dtoa_r+0x71a>
80006c48:	fa e8 00 28 	ld.d	r8,sp[40]
80006c4c:	30 0a       	mov	r10,0
80006c4e:	fc 1b 3f e0 	movh	r11,0x3fe0
80006c52:	e0 a0 0f 87 	rcall	80008b60 <__avr32_f64_sub>
80006c56:	14 98       	mov	r8,r10
80006c58:	16 99       	mov	r9,r11
80006c5a:	fa ea 00 08 	ld.d	r10,sp[8]
80006c5e:	fe b0 e9 e7 	rcall	8000402c <__avr32_f64_cmp_lt>
80006c62:	c1 30       	breq	80006c88 <_dtoa_r+0x62c>
80006c64:	33 09       	mov	r9,48
80006c66:	0a 98       	mov	r8,r5
80006c68:	11 7a       	ld.ub	r10,--r8
80006c6a:	f2 0a 18 00 	cp.b	r10,r9
80006c6e:	e0 81 02 d1 	brne	80007210 <_dtoa_r+0xbb4>
80006c72:	10 95       	mov	r5,r8
80006c74:	cf 9b       	rjmp	80006c66 <_dtoa_r+0x60a>
80006c76:	d7 03       	nop
80006c78:	30 08       	mov	r8,0
80006c7a:	fc 19 40 24 	movh	r9,0x4024
80006c7e:	fe b0 e8 79 	rcall	80003d70 <__avr32_f64_mul>
80006c82:	fa eb 00 08 	st.d	sp[8],r10
80006c86:	cb db       	rjmp	80006c00 <_dtoa_r+0x5a4>
80006c88:	fa ea 00 3c 	ld.d	r10,sp[60]
80006c8c:	fa eb 00 08 	st.d	sp[8],r10
80006c90:	58 e6       	cp.w	r6,14
80006c92:	5f ab       	srle	r11
80006c94:	41 8a       	lddsp	r10,sp[0x60]
80006c96:	30 08       	mov	r8,0
80006c98:	f4 09 11 ff 	rsub	r9,r10,-1
80006c9c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006ca0:	f0 09 18 00 	cp.b	r9,r8
80006ca4:	e0 80 00 82 	breq	80006da8 <_dtoa_r+0x74c>
80006ca8:	40 ea       	lddsp	r10,sp[0x38]
80006caa:	58 01       	cp.w	r1,0
80006cac:	5f a9       	srle	r9
80006cae:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006cb2:	fe ca cc 46 	sub	r10,pc,-13242
80006cb6:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006cba:	fa e5 00 10 	st.d	sp[16],r4
80006cbe:	f0 09 18 00 	cp.b	r9,r8
80006cc2:	c1 40       	breq	80006cea <_dtoa_r+0x68e>
80006cc4:	58 01       	cp.w	r1,0
80006cc6:	e0 81 01 77 	brne	80006fb4 <_dtoa_r+0x958>
80006cca:	30 08       	mov	r8,0
80006ccc:	fc 19 40 14 	movh	r9,0x4014
80006cd0:	08 9a       	mov	r10,r4
80006cd2:	0a 9b       	mov	r11,r5
80006cd4:	fe b0 e8 4e 	rcall	80003d70 <__avr32_f64_mul>
80006cd8:	fa e8 00 08 	ld.d	r8,sp[8]
80006cdc:	e0 a0 10 c0 	rcall	80008e5c <__avr32_f64_cmp_ge>
80006ce0:	e0 81 01 6a 	brne	80006fb4 <_dtoa_r+0x958>
80006ce4:	02 92       	mov	r2,r1
80006ce6:	e0 8f 01 72 	bral	80006fca <_dtoa_r+0x96e>
80006cea:	40 85       	lddsp	r5,sp[0x20]
80006cec:	30 14       	mov	r4,1
80006cee:	fa e8 00 10 	ld.d	r8,sp[16]
80006cf2:	fa ea 00 08 	ld.d	r10,sp[8]
80006cf6:	e0 a0 10 e7 	rcall	80008ec4 <__avr32_f64_div>
80006cfa:	e0 a0 10 8b 	rcall	80008e10 <__avr32_f64_to_s32>
80006cfe:	18 92       	mov	r2,r12
80006d00:	fe b0 e9 26 	rcall	80003f4c <__avr32_s32_to_f64>
80006d04:	fa e8 00 10 	ld.d	r8,sp[16]
80006d08:	fe b0 e8 34 	rcall	80003d70 <__avr32_f64_mul>
80006d0c:	14 98       	mov	r8,r10
80006d0e:	16 99       	mov	r9,r11
80006d10:	fa ea 00 08 	ld.d	r10,sp[8]
80006d14:	e0 a0 0f 26 	rcall	80008b60 <__avr32_f64_sub>
80006d18:	fa eb 00 08 	st.d	sp[8],r10
80006d1c:	e4 c8 ff d0 	sub	r8,r2,-48
80006d20:	0a c8       	st.b	r5++,r8
80006d22:	fc 19 40 24 	movh	r9,0x4024
80006d26:	30 08       	mov	r8,0
80006d28:	02 34       	cp.w	r4,r1
80006d2a:	c3 31       	brne	80006d90 <_dtoa_r+0x734>
80006d2c:	fa e8 00 08 	ld.d	r8,sp[8]
80006d30:	e0 a0 0f e6 	rcall	80008cfc <__avr32_f64_add>
80006d34:	16 91       	mov	r1,r11
80006d36:	14 90       	mov	r0,r10
80006d38:	14 98       	mov	r8,r10
80006d3a:	02 99       	mov	r9,r1
80006d3c:	fa ea 00 10 	ld.d	r10,sp[16]
80006d40:	fe b0 e9 76 	rcall	8000402c <__avr32_f64_cmp_lt>
80006d44:	c1 a1       	brne	80006d78 <_dtoa_r+0x71c>
80006d46:	fa e8 00 10 	ld.d	r8,sp[16]
80006d4a:	00 9a       	mov	r10,r0
80006d4c:	02 9b       	mov	r11,r1
80006d4e:	e0 a0 10 74 	rcall	80008e36 <__avr32_f64_cmp_eq>
80006d52:	e0 80 02 5e 	breq	8000720e <_dtoa_r+0xbb2>
80006d56:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006d5a:	c0 f1       	brne	80006d78 <_dtoa_r+0x71c>
80006d5c:	e0 8f 02 59 	bral	8000720e <_dtoa_r+0xbb2>
80006d60:	40 8a       	lddsp	r10,sp[0x20]
80006d62:	14 38       	cp.w	r8,r10
80006d64:	c0 30       	breq	80006d6a <_dtoa_r+0x70e>
80006d66:	10 95       	mov	r5,r8
80006d68:	c0 98       	rjmp	80006d7a <_dtoa_r+0x71e>
80006d6a:	33 08       	mov	r8,48
80006d6c:	40 89       	lddsp	r9,sp[0x20]
80006d6e:	2f f6       	sub	r6,-1
80006d70:	b2 88       	st.b	r9[0x0],r8
80006d72:	40 88       	lddsp	r8,sp[0x20]
80006d74:	c0 88       	rjmp	80006d84 <_dtoa_r+0x728>
80006d76:	40 66       	lddsp	r6,sp[0x18]
80006d78:	33 99       	mov	r9,57
80006d7a:	0a 98       	mov	r8,r5
80006d7c:	11 7a       	ld.ub	r10,--r8
80006d7e:	f2 0a 18 00 	cp.b	r10,r9
80006d82:	ce f0       	breq	80006d60 <_dtoa_r+0x704>
80006d84:	50 66       	stdsp	sp[0x18],r6
80006d86:	11 89       	ld.ub	r9,r8[0x0]
80006d88:	2f f9       	sub	r9,-1
80006d8a:	b0 89       	st.b	r8[0x0],r9
80006d8c:	e0 8f 02 42 	bral	80007210 <_dtoa_r+0xbb4>
80006d90:	fe b0 e7 f0 	rcall	80003d70 <__avr32_f64_mul>
80006d94:	2f f4       	sub	r4,-1
80006d96:	fa eb 00 08 	st.d	sp[8],r10
80006d9a:	30 08       	mov	r8,0
80006d9c:	30 09       	mov	r9,0
80006d9e:	e0 a0 10 4c 	rcall	80008e36 <__avr32_f64_cmp_eq>
80006da2:	ca 60       	breq	80006cee <_dtoa_r+0x692>
80006da4:	e0 8f 02 35 	bral	8000720e <_dtoa_r+0xbb2>
80006da8:	40 d8       	lddsp	r8,sp[0x34]
80006daa:	58 08       	cp.w	r8,0
80006dac:	c0 51       	brne	80006db6 <_dtoa_r+0x75a>
80006dae:	04 98       	mov	r8,r2
80006db0:	00 95       	mov	r5,r0
80006db2:	40 d4       	lddsp	r4,sp[0x34]
80006db4:	c3 78       	rjmp	80006e22 <_dtoa_r+0x7c6>
80006db6:	40 c5       	lddsp	r5,sp[0x30]
80006db8:	58 15       	cp.w	r5,1
80006dba:	e0 89 00 0f 	brgt	80006dd8 <_dtoa_r+0x77c>
80006dbe:	41 74       	lddsp	r4,sp[0x5c]
80006dc0:	58 04       	cp.w	r4,0
80006dc2:	c0 40       	breq	80006dca <_dtoa_r+0x76e>
80006dc4:	f4 c9 fb cd 	sub	r9,r10,-1075
80006dc8:	c0 48       	rjmp	80006dd0 <_dtoa_r+0x774>
80006dca:	41 99       	lddsp	r9,sp[0x64]
80006dcc:	f2 09 11 36 	rsub	r9,r9,54
80006dd0:	04 98       	mov	r8,r2
80006dd2:	00 95       	mov	r5,r0
80006dd4:	c1 c8       	rjmp	80006e0c <_dtoa_r+0x7b0>
80006dd6:	d7 03       	nop
80006dd8:	e2 c8 00 01 	sub	r8,r1,1
80006ddc:	58 01       	cp.w	r1,0
80006dde:	e0 05 17 40 	movge	r5,r0
80006de2:	e2 09 17 40 	movge	r9,r1
80006de6:	e1 d1 e5 15 	sublt	r5,r0,r1
80006dea:	f9 b9 05 00 	movlt	r9,0
80006dee:	10 32       	cp.w	r2,r8
80006df0:	e5 d8 e4 18 	subge	r8,r2,r8
80006df4:	f1 d2 e5 18 	sublt	r8,r8,r2
80006df8:	e5 d8 e5 02 	addlt	r2,r2,r8
80006dfc:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006e00:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006e04:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006e08:	f9 b8 05 00 	movlt	r8,0
80006e0c:	40 4b       	lddsp	r11,sp[0x10]
80006e0e:	12 0b       	add	r11,r9
80006e10:	50 08       	stdsp	sp[0x0],r8
80006e12:	50 4b       	stdsp	sp[0x10],r11
80006e14:	12 00       	add	r0,r9
80006e16:	30 1b       	mov	r11,1
80006e18:	0e 9c       	mov	r12,r7
80006e1a:	e0 a0 0a d1 	rcall	800083bc <__i2b>
80006e1e:	40 08       	lddsp	r8,sp[0x0]
80006e20:	18 94       	mov	r4,r12
80006e22:	40 4a       	lddsp	r10,sp[0x10]
80006e24:	58 05       	cp.w	r5,0
80006e26:	5f 99       	srgt	r9
80006e28:	58 0a       	cp.w	r10,0
80006e2a:	5f 9a       	srgt	r10
80006e2c:	f5 e9 00 09 	and	r9,r10,r9
80006e30:	c0 80       	breq	80006e40 <_dtoa_r+0x7e4>
80006e32:	40 4c       	lddsp	r12,sp[0x10]
80006e34:	f8 05 0d 49 	min	r9,r12,r5
80006e38:	12 1c       	sub	r12,r9
80006e3a:	12 10       	sub	r0,r9
80006e3c:	50 4c       	stdsp	sp[0x10],r12
80006e3e:	12 15       	sub	r5,r9
80006e40:	58 02       	cp.w	r2,0
80006e42:	e0 8a 00 27 	brle	80006e90 <_dtoa_r+0x834>
80006e46:	40 db       	lddsp	r11,sp[0x34]
80006e48:	58 0b       	cp.w	r11,0
80006e4a:	c1 d0       	breq	80006e84 <_dtoa_r+0x828>
80006e4c:	58 08       	cp.w	r8,0
80006e4e:	e0 8a 00 17 	brle	80006e7c <_dtoa_r+0x820>
80006e52:	10 9a       	mov	r10,r8
80006e54:	50 08       	stdsp	sp[0x0],r8
80006e56:	08 9b       	mov	r11,r4
80006e58:	0e 9c       	mov	r12,r7
80006e5a:	e0 a0 0a f7 	rcall	80008448 <__pow5mult>
80006e5e:	06 9a       	mov	r10,r3
80006e60:	18 9b       	mov	r11,r12
80006e62:	18 94       	mov	r4,r12
80006e64:	0e 9c       	mov	r12,r7
80006e66:	e0 a0 0a 2b 	rcall	800082bc <__multiply>
80006e6a:	18 99       	mov	r9,r12
80006e6c:	06 9b       	mov	r11,r3
80006e6e:	50 19       	stdsp	sp[0x4],r9
80006e70:	0e 9c       	mov	r12,r7
80006e72:	e0 a0 08 d7 	rcall	80008020 <_Bfree>
80006e76:	40 19       	lddsp	r9,sp[0x4]
80006e78:	40 08       	lddsp	r8,sp[0x0]
80006e7a:	12 93       	mov	r3,r9
80006e7c:	e4 08 01 0a 	sub	r10,r2,r8
80006e80:	c0 80       	breq	80006e90 <_dtoa_r+0x834>
80006e82:	c0 28       	rjmp	80006e86 <_dtoa_r+0x82a>
80006e84:	04 9a       	mov	r10,r2
80006e86:	06 9b       	mov	r11,r3
80006e88:	0e 9c       	mov	r12,r7
80006e8a:	e0 a0 0a df 	rcall	80008448 <__pow5mult>
80006e8e:	18 93       	mov	r3,r12
80006e90:	30 1b       	mov	r11,1
80006e92:	0e 9c       	mov	r12,r7
80006e94:	e0 a0 0a 94 	rcall	800083bc <__i2b>
80006e98:	41 1a       	lddsp	r10,sp[0x44]
80006e9a:	18 92       	mov	r2,r12
80006e9c:	58 0a       	cp.w	r10,0
80006e9e:	e0 8a 00 07 	brle	80006eac <_dtoa_r+0x850>
80006ea2:	18 9b       	mov	r11,r12
80006ea4:	0e 9c       	mov	r12,r7
80006ea6:	e0 a0 0a d1 	rcall	80008448 <__pow5mult>
80006eaa:	18 92       	mov	r2,r12
80006eac:	40 c9       	lddsp	r9,sp[0x30]
80006eae:	58 19       	cp.w	r9,1
80006eb0:	e0 89 00 14 	brgt	80006ed8 <_dtoa_r+0x87c>
80006eb4:	40 38       	lddsp	r8,sp[0xc]
80006eb6:	58 08       	cp.w	r8,0
80006eb8:	c1 01       	brne	80006ed8 <_dtoa_r+0x87c>
80006eba:	40 29       	lddsp	r9,sp[0x8]
80006ebc:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006ec0:	c0 c1       	brne	80006ed8 <_dtoa_r+0x87c>
80006ec2:	12 98       	mov	r8,r9
80006ec4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006ec8:	c0 80       	breq	80006ed8 <_dtoa_r+0x87c>
80006eca:	40 4c       	lddsp	r12,sp[0x10]
80006ecc:	30 1b       	mov	r11,1
80006ece:	2f fc       	sub	r12,-1
80006ed0:	2f f0       	sub	r0,-1
80006ed2:	50 4c       	stdsp	sp[0x10],r12
80006ed4:	50 6b       	stdsp	sp[0x18],r11
80006ed6:	c0 38       	rjmp	80006edc <_dtoa_r+0x880>
80006ed8:	30 0a       	mov	r10,0
80006eda:	50 6a       	stdsp	sp[0x18],r10
80006edc:	41 19       	lddsp	r9,sp[0x44]
80006ede:	58 09       	cp.w	r9,0
80006ee0:	c0 31       	brne	80006ee6 <_dtoa_r+0x88a>
80006ee2:	30 1c       	mov	r12,1
80006ee4:	c0 98       	rjmp	80006ef6 <_dtoa_r+0x89a>
80006ee6:	64 48       	ld.w	r8,r2[0x10]
80006ee8:	2f c8       	sub	r8,-4
80006eea:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006eee:	e0 a0 08 08 	rcall	80007efe <__hi0bits>
80006ef2:	f8 0c 11 20 	rsub	r12,r12,32
80006ef6:	40 4b       	lddsp	r11,sp[0x10]
80006ef8:	f8 0b 00 08 	add	r8,r12,r11
80006efc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006f00:	c0 c0       	breq	80006f18 <_dtoa_r+0x8bc>
80006f02:	f0 08 11 20 	rsub	r8,r8,32
80006f06:	58 48       	cp.w	r8,4
80006f08:	e0 8a 00 06 	brle	80006f14 <_dtoa_r+0x8b8>
80006f0c:	20 48       	sub	r8,4
80006f0e:	10 0b       	add	r11,r8
80006f10:	50 4b       	stdsp	sp[0x10],r11
80006f12:	c0 78       	rjmp	80006f20 <_dtoa_r+0x8c4>
80006f14:	58 48       	cp.w	r8,4
80006f16:	c0 70       	breq	80006f24 <_dtoa_r+0x8c8>
80006f18:	40 4a       	lddsp	r10,sp[0x10]
80006f1a:	2e 48       	sub	r8,-28
80006f1c:	10 0a       	add	r10,r8
80006f1e:	50 4a       	stdsp	sp[0x10],r10
80006f20:	10 00       	add	r0,r8
80006f22:	10 05       	add	r5,r8
80006f24:	58 00       	cp.w	r0,0
80006f26:	e0 8a 00 08 	brle	80006f36 <_dtoa_r+0x8da>
80006f2a:	06 9b       	mov	r11,r3
80006f2c:	00 9a       	mov	r10,r0
80006f2e:	0e 9c       	mov	r12,r7
80006f30:	e0 a0 09 82 	rcall	80008234 <__lshift>
80006f34:	18 93       	mov	r3,r12
80006f36:	40 49       	lddsp	r9,sp[0x10]
80006f38:	58 09       	cp.w	r9,0
80006f3a:	e0 8a 00 08 	brle	80006f4a <_dtoa_r+0x8ee>
80006f3e:	04 9b       	mov	r11,r2
80006f40:	12 9a       	mov	r10,r9
80006f42:	0e 9c       	mov	r12,r7
80006f44:	e0 a0 09 78 	rcall	80008234 <__lshift>
80006f48:	18 92       	mov	r2,r12
80006f4a:	41 48       	lddsp	r8,sp[0x50]
80006f4c:	58 08       	cp.w	r8,0
80006f4e:	c1 b0       	breq	80006f84 <_dtoa_r+0x928>
80006f50:	04 9b       	mov	r11,r2
80006f52:	06 9c       	mov	r12,r3
80006f54:	e0 a0 08 4c 	rcall	80007fec <__mcmp>
80006f58:	c1 64       	brge	80006f84 <_dtoa_r+0x928>
80006f5a:	06 9b       	mov	r11,r3
80006f5c:	30 09       	mov	r9,0
80006f5e:	30 aa       	mov	r10,10
80006f60:	0e 9c       	mov	r12,r7
80006f62:	e0 a0 0a 35 	rcall	800083cc <__multadd>
80006f66:	20 16       	sub	r6,1
80006f68:	18 93       	mov	r3,r12
80006f6a:	40 dc       	lddsp	r12,sp[0x34]
80006f6c:	58 0c       	cp.w	r12,0
80006f6e:	c0 31       	brne	80006f74 <_dtoa_r+0x918>
80006f70:	40 91       	lddsp	r1,sp[0x24]
80006f72:	c0 98       	rjmp	80006f84 <_dtoa_r+0x928>
80006f74:	08 9b       	mov	r11,r4
80006f76:	40 91       	lddsp	r1,sp[0x24]
80006f78:	30 09       	mov	r9,0
80006f7a:	30 aa       	mov	r10,10
80006f7c:	0e 9c       	mov	r12,r7
80006f7e:	e0 a0 0a 27 	rcall	800083cc <__multadd>
80006f82:	18 94       	mov	r4,r12
80006f84:	58 01       	cp.w	r1,0
80006f86:	5f a9       	srle	r9
80006f88:	40 cb       	lddsp	r11,sp[0x30]
80006f8a:	58 2b       	cp.w	r11,2
80006f8c:	5f 98       	srgt	r8
80006f8e:	f3 e8 00 08 	and	r8,r9,r8
80006f92:	c2 50       	breq	80006fdc <_dtoa_r+0x980>
80006f94:	58 01       	cp.w	r1,0
80006f96:	c1 11       	brne	80006fb8 <_dtoa_r+0x95c>
80006f98:	04 9b       	mov	r11,r2
80006f9a:	02 99       	mov	r9,r1
80006f9c:	30 5a       	mov	r10,5
80006f9e:	0e 9c       	mov	r12,r7
80006fa0:	e0 a0 0a 16 	rcall	800083cc <__multadd>
80006fa4:	18 92       	mov	r2,r12
80006fa6:	18 9b       	mov	r11,r12
80006fa8:	06 9c       	mov	r12,r3
80006faa:	e0 a0 08 21 	rcall	80007fec <__mcmp>
80006fae:	e0 89 00 0f 	brgt	80006fcc <_dtoa_r+0x970>
80006fb2:	c0 38       	rjmp	80006fb8 <_dtoa_r+0x95c>
80006fb4:	30 02       	mov	r2,0
80006fb6:	04 94       	mov	r4,r2
80006fb8:	40 ea       	lddsp	r10,sp[0x38]
80006fba:	30 09       	mov	r9,0
80006fbc:	5c da       	com	r10
80006fbe:	40 85       	lddsp	r5,sp[0x20]
80006fc0:	50 6a       	stdsp	sp[0x18],r10
80006fc2:	50 49       	stdsp	sp[0x10],r9
80006fc4:	c0 f9       	rjmp	800071e2 <_dtoa_r+0xb86>
80006fc6:	08 92       	mov	r2,r4
80006fc8:	40 66       	lddsp	r6,sp[0x18]
80006fca:	04 94       	mov	r4,r2
80006fcc:	2f f6       	sub	r6,-1
80006fce:	50 66       	stdsp	sp[0x18],r6
80006fd0:	33 18       	mov	r8,49
80006fd2:	40 85       	lddsp	r5,sp[0x20]
80006fd4:	0a c8       	st.b	r5++,r8
80006fd6:	30 08       	mov	r8,0
80006fd8:	50 48       	stdsp	sp[0x10],r8
80006fda:	c0 49       	rjmp	800071e2 <_dtoa_r+0xb86>
80006fdc:	40 dc       	lddsp	r12,sp[0x34]
80006fde:	58 0c       	cp.w	r12,0
80006fe0:	e0 80 00 b5 	breq	8000714a <_dtoa_r+0xaee>
80006fe4:	58 05       	cp.w	r5,0
80006fe6:	e0 8a 00 08 	brle	80006ff6 <_dtoa_r+0x99a>
80006fea:	08 9b       	mov	r11,r4
80006fec:	0a 9a       	mov	r10,r5
80006fee:	0e 9c       	mov	r12,r7
80006ff0:	e0 a0 09 22 	rcall	80008234 <__lshift>
80006ff4:	18 94       	mov	r4,r12
80006ff6:	40 6b       	lddsp	r11,sp[0x18]
80006ff8:	58 0b       	cp.w	r11,0
80006ffa:	c0 31       	brne	80007000 <_dtoa_r+0x9a4>
80006ffc:	08 9c       	mov	r12,r4
80006ffe:	c1 38       	rjmp	80007024 <_dtoa_r+0x9c8>
80007000:	68 1b       	ld.w	r11,r4[0x4]
80007002:	0e 9c       	mov	r12,r7
80007004:	e0 a0 08 28 	rcall	80008054 <_Balloc>
80007008:	68 4a       	ld.w	r10,r4[0x10]
8000700a:	18 95       	mov	r5,r12
8000700c:	e8 cb ff f4 	sub	r11,r4,-12
80007010:	2f ea       	sub	r10,-2
80007012:	2f 4c       	sub	r12,-12
80007014:	a3 6a       	lsl	r10,0x2
80007016:	fe b0 e8 3f 	rcall	80004094 <memcpy>
8000701a:	0a 9b       	mov	r11,r5
8000701c:	30 1a       	mov	r10,1
8000701e:	0e 9c       	mov	r12,r7
80007020:	e0 a0 09 0a 	rcall	80008234 <__lshift>
80007024:	50 44       	stdsp	sp[0x10],r4
80007026:	40 3a       	lddsp	r10,sp[0xc]
80007028:	30 19       	mov	r9,1
8000702a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000702e:	18 94       	mov	r4,r12
80007030:	50 da       	stdsp	sp[0x34],r10
80007032:	40 85       	lddsp	r5,sp[0x20]
80007034:	50 99       	stdsp	sp[0x24],r9
80007036:	50 26       	stdsp	sp[0x8],r6
80007038:	50 e1       	stdsp	sp[0x38],r1
8000703a:	04 9b       	mov	r11,r2
8000703c:	06 9c       	mov	r12,r3
8000703e:	fe b0 fa 7f 	rcall	8000653c <quorem>
80007042:	40 4b       	lddsp	r11,sp[0x10]
80007044:	f8 c0 ff d0 	sub	r0,r12,-48
80007048:	06 9c       	mov	r12,r3
8000704a:	e0 a0 07 d1 	rcall	80007fec <__mcmp>
8000704e:	08 9a       	mov	r10,r4
80007050:	50 6c       	stdsp	sp[0x18],r12
80007052:	04 9b       	mov	r11,r2
80007054:	0e 9c       	mov	r12,r7
80007056:	e0 a0 08 87 	rcall	80008164 <__mdiff>
8000705a:	18 91       	mov	r1,r12
8000705c:	78 38       	ld.w	r8,r12[0xc]
8000705e:	58 08       	cp.w	r8,0
80007060:	c0 30       	breq	80007066 <_dtoa_r+0xa0a>
80007062:	30 16       	mov	r6,1
80007064:	c0 68       	rjmp	80007070 <_dtoa_r+0xa14>
80007066:	18 9b       	mov	r11,r12
80007068:	06 9c       	mov	r12,r3
8000706a:	e0 a0 07 c1 	rcall	80007fec <__mcmp>
8000706e:	18 96       	mov	r6,r12
80007070:	0e 9c       	mov	r12,r7
80007072:	02 9b       	mov	r11,r1
80007074:	e0 a0 07 d6 	rcall	80008020 <_Bfree>
80007078:	40 cc       	lddsp	r12,sp[0x30]
8000707a:	ed ec 10 08 	or	r8,r6,r12
8000707e:	c0 d1       	brne	80007098 <_dtoa_r+0xa3c>
80007080:	40 db       	lddsp	r11,sp[0x34]
80007082:	58 0b       	cp.w	r11,0
80007084:	c0 a1       	brne	80007098 <_dtoa_r+0xa3c>
80007086:	40 26       	lddsp	r6,sp[0x8]
80007088:	e0 40 00 39 	cp.w	r0,57
8000708c:	c3 00       	breq	800070ec <_dtoa_r+0xa90>
8000708e:	40 6a       	lddsp	r10,sp[0x18]
80007090:	58 0a       	cp.w	r10,0
80007092:	e0 89 00 24 	brgt	800070da <_dtoa_r+0xa7e>
80007096:	c2 f8       	rjmp	800070f4 <_dtoa_r+0xa98>
80007098:	40 69       	lddsp	r9,sp[0x18]
8000709a:	58 09       	cp.w	r9,0
8000709c:	c0 85       	brlt	800070ac <_dtoa_r+0xa50>
8000709e:	12 98       	mov	r8,r9
800070a0:	40 cc       	lddsp	r12,sp[0x30]
800070a2:	18 48       	or	r8,r12
800070a4:	c1 d1       	brne	800070de <_dtoa_r+0xa82>
800070a6:	40 db       	lddsp	r11,sp[0x34]
800070a8:	58 0b       	cp.w	r11,0
800070aa:	c1 a1       	brne	800070de <_dtoa_r+0xa82>
800070ac:	0c 99       	mov	r9,r6
800070ae:	40 26       	lddsp	r6,sp[0x8]
800070b0:	58 09       	cp.w	r9,0
800070b2:	e0 8a 00 21 	brle	800070f4 <_dtoa_r+0xa98>
800070b6:	06 9b       	mov	r11,r3
800070b8:	30 1a       	mov	r10,1
800070ba:	0e 9c       	mov	r12,r7
800070bc:	e0 a0 08 bc 	rcall	80008234 <__lshift>
800070c0:	04 9b       	mov	r11,r2
800070c2:	18 93       	mov	r3,r12
800070c4:	e0 a0 07 94 	rcall	80007fec <__mcmp>
800070c8:	e0 89 00 06 	brgt	800070d4 <_dtoa_r+0xa78>
800070cc:	c1 41       	brne	800070f4 <_dtoa_r+0xa98>
800070ce:	ed b0 00 00 	bld	r0,0x0
800070d2:	c1 11       	brne	800070f4 <_dtoa_r+0xa98>
800070d4:	e0 40 00 39 	cp.w	r0,57
800070d8:	c0 a0       	breq	800070ec <_dtoa_r+0xa90>
800070da:	2f f0       	sub	r0,-1
800070dc:	c0 c8       	rjmp	800070f4 <_dtoa_r+0xa98>
800070de:	58 06       	cp.w	r6,0
800070e0:	e0 8a 00 0c 	brle	800070f8 <_dtoa_r+0xa9c>
800070e4:	40 26       	lddsp	r6,sp[0x8]
800070e6:	e0 40 00 39 	cp.w	r0,57
800070ea:	c0 41       	brne	800070f2 <_dtoa_r+0xa96>
800070ec:	33 98       	mov	r8,57
800070ee:	0a c8       	st.b	r5++,r8
800070f0:	c6 78       	rjmp	800071be <_dtoa_r+0xb62>
800070f2:	2f f0       	sub	r0,-1
800070f4:	0a c0       	st.b	r5++,r0
800070f6:	c7 58       	rjmp	800071e0 <_dtoa_r+0xb84>
800070f8:	0a c0       	st.b	r5++,r0
800070fa:	40 9a       	lddsp	r10,sp[0x24]
800070fc:	40 e9       	lddsp	r9,sp[0x38]
800070fe:	12 3a       	cp.w	r10,r9
80007100:	c4 30       	breq	80007186 <_dtoa_r+0xb2a>
80007102:	06 9b       	mov	r11,r3
80007104:	30 09       	mov	r9,0
80007106:	30 aa       	mov	r10,10
80007108:	0e 9c       	mov	r12,r7
8000710a:	e0 a0 09 61 	rcall	800083cc <__multadd>
8000710e:	40 48       	lddsp	r8,sp[0x10]
80007110:	18 93       	mov	r3,r12
80007112:	08 38       	cp.w	r8,r4
80007114:	c0 91       	brne	80007126 <_dtoa_r+0xaca>
80007116:	10 9b       	mov	r11,r8
80007118:	30 09       	mov	r9,0
8000711a:	30 aa       	mov	r10,10
8000711c:	0e 9c       	mov	r12,r7
8000711e:	e0 a0 09 57 	rcall	800083cc <__multadd>
80007122:	50 4c       	stdsp	sp[0x10],r12
80007124:	c0 e8       	rjmp	80007140 <_dtoa_r+0xae4>
80007126:	40 4b       	lddsp	r11,sp[0x10]
80007128:	30 09       	mov	r9,0
8000712a:	30 aa       	mov	r10,10
8000712c:	0e 9c       	mov	r12,r7
8000712e:	e0 a0 09 4f 	rcall	800083cc <__multadd>
80007132:	08 9b       	mov	r11,r4
80007134:	50 4c       	stdsp	sp[0x10],r12
80007136:	30 09       	mov	r9,0
80007138:	30 aa       	mov	r10,10
8000713a:	0e 9c       	mov	r12,r7
8000713c:	e0 a0 09 48 	rcall	800083cc <__multadd>
80007140:	18 94       	mov	r4,r12
80007142:	40 9c       	lddsp	r12,sp[0x24]
80007144:	2f fc       	sub	r12,-1
80007146:	50 9c       	stdsp	sp[0x24],r12
80007148:	c7 9b       	rjmp	8000703a <_dtoa_r+0x9de>
8000714a:	30 18       	mov	r8,1
8000714c:	06 90       	mov	r0,r3
8000714e:	40 85       	lddsp	r5,sp[0x20]
80007150:	08 93       	mov	r3,r4
80007152:	0c 94       	mov	r4,r6
80007154:	10 96       	mov	r6,r8
80007156:	04 9b       	mov	r11,r2
80007158:	00 9c       	mov	r12,r0
8000715a:	fe b0 f9 f1 	rcall	8000653c <quorem>
8000715e:	2d 0c       	sub	r12,-48
80007160:	0a cc       	st.b	r5++,r12
80007162:	02 36       	cp.w	r6,r1
80007164:	c0 a4       	brge	80007178 <_dtoa_r+0xb1c>
80007166:	00 9b       	mov	r11,r0
80007168:	30 09       	mov	r9,0
8000716a:	30 aa       	mov	r10,10
8000716c:	0e 9c       	mov	r12,r7
8000716e:	2f f6       	sub	r6,-1
80007170:	e0 a0 09 2e 	rcall	800083cc <__multadd>
80007174:	18 90       	mov	r0,r12
80007176:	cf 0b       	rjmp	80007156 <_dtoa_r+0xafa>
80007178:	08 96       	mov	r6,r4
8000717a:	30 0b       	mov	r11,0
8000717c:	06 94       	mov	r4,r3
8000717e:	50 4b       	stdsp	sp[0x10],r11
80007180:	00 93       	mov	r3,r0
80007182:	18 90       	mov	r0,r12
80007184:	c0 28       	rjmp	80007188 <_dtoa_r+0xb2c>
80007186:	40 26       	lddsp	r6,sp[0x8]
80007188:	06 9b       	mov	r11,r3
8000718a:	30 1a       	mov	r10,1
8000718c:	0e 9c       	mov	r12,r7
8000718e:	e0 a0 08 53 	rcall	80008234 <__lshift>
80007192:	04 9b       	mov	r11,r2
80007194:	18 93       	mov	r3,r12
80007196:	e0 a0 07 2b 	rcall	80007fec <__mcmp>
8000719a:	e0 89 00 12 	brgt	800071be <_dtoa_r+0xb62>
8000719e:	c1 b1       	brne	800071d4 <_dtoa_r+0xb78>
800071a0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800071a4:	c0 d1       	brne	800071be <_dtoa_r+0xb62>
800071a6:	c1 78       	rjmp	800071d4 <_dtoa_r+0xb78>
800071a8:	40 89       	lddsp	r9,sp[0x20]
800071aa:	12 38       	cp.w	r8,r9
800071ac:	c0 30       	breq	800071b2 <_dtoa_r+0xb56>
800071ae:	10 95       	mov	r5,r8
800071b0:	c0 88       	rjmp	800071c0 <_dtoa_r+0xb64>
800071b2:	2f f6       	sub	r6,-1
800071b4:	50 66       	stdsp	sp[0x18],r6
800071b6:	33 18       	mov	r8,49
800071b8:	40 8c       	lddsp	r12,sp[0x20]
800071ba:	b8 88       	st.b	r12[0x0],r8
800071bc:	c1 38       	rjmp	800071e2 <_dtoa_r+0xb86>
800071be:	33 9a       	mov	r10,57
800071c0:	0a 98       	mov	r8,r5
800071c2:	11 79       	ld.ub	r9,--r8
800071c4:	f4 09 18 00 	cp.b	r9,r10
800071c8:	cf 00       	breq	800071a8 <_dtoa_r+0xb4c>
800071ca:	2f f9       	sub	r9,-1
800071cc:	b0 89       	st.b	r8[0x0],r9
800071ce:	c0 98       	rjmp	800071e0 <_dtoa_r+0xb84>
800071d0:	10 95       	mov	r5,r8
800071d2:	c0 28       	rjmp	800071d6 <_dtoa_r+0xb7a>
800071d4:	33 09       	mov	r9,48
800071d6:	0a 98       	mov	r8,r5
800071d8:	11 7a       	ld.ub	r10,--r8
800071da:	f2 0a 18 00 	cp.b	r10,r9
800071de:	cf 90       	breq	800071d0 <_dtoa_r+0xb74>
800071e0:	50 66       	stdsp	sp[0x18],r6
800071e2:	04 9b       	mov	r11,r2
800071e4:	0e 9c       	mov	r12,r7
800071e6:	e0 a0 07 1d 	rcall	80008020 <_Bfree>
800071ea:	58 04       	cp.w	r4,0
800071ec:	c1 20       	breq	80007210 <_dtoa_r+0xbb4>
800071ee:	40 4b       	lddsp	r11,sp[0x10]
800071f0:	08 3b       	cp.w	r11,r4
800071f2:	5f 19       	srne	r9
800071f4:	58 0b       	cp.w	r11,0
800071f6:	5f 18       	srne	r8
800071f8:	f3 e8 00 08 	and	r8,r9,r8
800071fc:	c0 40       	breq	80007204 <_dtoa_r+0xba8>
800071fe:	0e 9c       	mov	r12,r7
80007200:	e0 a0 07 10 	rcall	80008020 <_Bfree>
80007204:	08 9b       	mov	r11,r4
80007206:	0e 9c       	mov	r12,r7
80007208:	e0 a0 07 0c 	rcall	80008020 <_Bfree>
8000720c:	c0 28       	rjmp	80007210 <_dtoa_r+0xbb4>
8000720e:	50 66       	stdsp	sp[0x18],r6
80007210:	0e 9c       	mov	r12,r7
80007212:	06 9b       	mov	r11,r3
80007214:	e0 a0 07 06 	rcall	80008020 <_Bfree>
80007218:	30 08       	mov	r8,0
8000721a:	aa 88       	st.b	r5[0x0],r8
8000721c:	40 68       	lddsp	r8,sp[0x18]
8000721e:	41 5a       	lddsp	r10,sp[0x54]
80007220:	2f f8       	sub	r8,-1
80007222:	41 29       	lddsp	r9,sp[0x48]
80007224:	95 08       	st.w	r10[0x0],r8
80007226:	40 8c       	lddsp	r12,sp[0x20]
80007228:	58 09       	cp.w	r9,0
8000722a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000722e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007232:	2e 6d       	sub	sp,-104
80007234:	d8 32       	popm	r0-r7,pc
80007236:	d7 03       	nop

80007238 <_fflush_r>:
80007238:	d4 21       	pushm	r4-r7,lr
8000723a:	16 97       	mov	r7,r11
8000723c:	18 96       	mov	r6,r12
8000723e:	76 48       	ld.w	r8,r11[0x10]
80007240:	58 08       	cp.w	r8,0
80007242:	c7 f0       	breq	80007340 <_fflush_r+0x108>
80007244:	58 0c       	cp.w	r12,0
80007246:	c0 50       	breq	80007250 <_fflush_r+0x18>
80007248:	78 68       	ld.w	r8,r12[0x18]
8000724a:	58 08       	cp.w	r8,0
8000724c:	c0 21       	brne	80007250 <_fflush_r+0x18>
8000724e:	cc dc       	rcall	800073e8 <__sinit>
80007250:	fe c8 d2 90 	sub	r8,pc,-11632
80007254:	10 37       	cp.w	r7,r8
80007256:	c0 31       	brne	8000725c <_fflush_r+0x24>
80007258:	6c 07       	ld.w	r7,r6[0x0]
8000725a:	c0 c8       	rjmp	80007272 <_fflush_r+0x3a>
8000725c:	fe c8 d2 7c 	sub	r8,pc,-11652
80007260:	10 37       	cp.w	r7,r8
80007262:	c0 31       	brne	80007268 <_fflush_r+0x30>
80007264:	6c 17       	ld.w	r7,r6[0x4]
80007266:	c0 68       	rjmp	80007272 <_fflush_r+0x3a>
80007268:	fe c8 d2 68 	sub	r8,pc,-11672
8000726c:	10 37       	cp.w	r7,r8
8000726e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007272:	8e 6a       	ld.sh	r10,r7[0xc]
80007274:	14 98       	mov	r8,r10
80007276:	ed ba 00 03 	bld	r10,0x3
8000727a:	c4 20       	breq	800072fe <_fflush_r+0xc6>
8000727c:	ab ba       	sbr	r10,0xb
8000727e:	ae 6a       	st.h	r7[0xc],r10
80007280:	6e 18       	ld.w	r8,r7[0x4]
80007282:	58 08       	cp.w	r8,0
80007284:	e0 89 00 06 	brgt	80007290 <_fflush_r+0x58>
80007288:	6f 08       	ld.w	r8,r7[0x40]
8000728a:	58 08       	cp.w	r8,0
8000728c:	e0 8a 00 5a 	brle	80007340 <_fflush_r+0x108>
80007290:	6e b8       	ld.w	r8,r7[0x2c]
80007292:	58 08       	cp.w	r8,0
80007294:	c5 60       	breq	80007340 <_fflush_r+0x108>
80007296:	e2 1a 10 00 	andl	r10,0x1000,COH
8000729a:	c0 30       	breq	800072a0 <_fflush_r+0x68>
8000729c:	6f 55       	ld.w	r5,r7[0x54]
8000729e:	c0 f8       	rjmp	800072bc <_fflush_r+0x84>
800072a0:	30 19       	mov	r9,1
800072a2:	6e 8b       	ld.w	r11,r7[0x20]
800072a4:	0c 9c       	mov	r12,r6
800072a6:	5d 18       	icall	r8
800072a8:	18 95       	mov	r5,r12
800072aa:	5b fc       	cp.w	r12,-1
800072ac:	c0 81       	brne	800072bc <_fflush_r+0x84>
800072ae:	6c 38       	ld.w	r8,r6[0xc]
800072b0:	59 d8       	cp.w	r8,29
800072b2:	c4 70       	breq	80007340 <_fflush_r+0x108>
800072b4:	8e 68       	ld.sh	r8,r7[0xc]
800072b6:	a7 a8       	sbr	r8,0x6
800072b8:	ae 68       	st.h	r7[0xc],r8
800072ba:	d8 22       	popm	r4-r7,pc
800072bc:	8e 68       	ld.sh	r8,r7[0xc]
800072be:	ed b8 00 02 	bld	r8,0x2
800072c2:	c0 91       	brne	800072d4 <_fflush_r+0x9c>
800072c4:	6e 18       	ld.w	r8,r7[0x4]
800072c6:	10 15       	sub	r5,r8
800072c8:	6e d8       	ld.w	r8,r7[0x34]
800072ca:	58 08       	cp.w	r8,0
800072cc:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800072d0:	eb d8 e1 15 	subne	r5,r5,r8
800072d4:	6e b8       	ld.w	r8,r7[0x2c]
800072d6:	0c 9c       	mov	r12,r6
800072d8:	30 09       	mov	r9,0
800072da:	0a 9a       	mov	r10,r5
800072dc:	6e 8b       	ld.w	r11,r7[0x20]
800072de:	5d 18       	icall	r8
800072e0:	8e 68       	ld.sh	r8,r7[0xc]
800072e2:	0a 3c       	cp.w	r12,r5
800072e4:	c2 61       	brne	80007330 <_fflush_r+0xf8>
800072e6:	ab d8       	cbr	r8,0xb
800072e8:	30 0c       	mov	r12,0
800072ea:	6e 49       	ld.w	r9,r7[0x10]
800072ec:	ae 68       	st.h	r7[0xc],r8
800072ee:	8f 1c       	st.w	r7[0x4],r12
800072f0:	8f 09       	st.w	r7[0x0],r9
800072f2:	ed b8 00 0c 	bld	r8,0xc
800072f6:	c2 51       	brne	80007340 <_fflush_r+0x108>
800072f8:	ef 45 00 54 	st.w	r7[84],r5
800072fc:	d8 22       	popm	r4-r7,pc
800072fe:	6e 45       	ld.w	r5,r7[0x10]
80007300:	58 05       	cp.w	r5,0
80007302:	c1 f0       	breq	80007340 <_fflush_r+0x108>
80007304:	6e 04       	ld.w	r4,r7[0x0]
80007306:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000730a:	8f 05       	st.w	r7[0x0],r5
8000730c:	f9 b8 01 00 	movne	r8,0
80007310:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007314:	0a 14       	sub	r4,r5
80007316:	8f 28       	st.w	r7[0x8],r8
80007318:	c1 18       	rjmp	8000733a <_fflush_r+0x102>
8000731a:	08 99       	mov	r9,r4
8000731c:	0a 9a       	mov	r10,r5
8000731e:	6e a8       	ld.w	r8,r7[0x28]
80007320:	6e 8b       	ld.w	r11,r7[0x20]
80007322:	0c 9c       	mov	r12,r6
80007324:	5d 18       	icall	r8
80007326:	18 14       	sub	r4,r12
80007328:	58 0c       	cp.w	r12,0
8000732a:	e0 89 00 07 	brgt	80007338 <_fflush_r+0x100>
8000732e:	8e 68       	ld.sh	r8,r7[0xc]
80007330:	a7 a8       	sbr	r8,0x6
80007332:	3f fc       	mov	r12,-1
80007334:	ae 68       	st.h	r7[0xc],r8
80007336:	d8 22       	popm	r4-r7,pc
80007338:	18 05       	add	r5,r12
8000733a:	58 04       	cp.w	r4,0
8000733c:	fe 99 ff ef 	brgt	8000731a <_fflush_r+0xe2>
80007340:	d8 2a       	popm	r4-r7,pc,r12=0
80007342:	d7 03       	nop

80007344 <__sfp_lock_acquire>:
80007344:	5e fc       	retal	r12

80007346 <__sfp_lock_release>:
80007346:	5e fc       	retal	r12

80007348 <_cleanup_r>:
80007348:	d4 01       	pushm	lr
8000734a:	fe cb e8 6a 	sub	r11,pc,-6038
8000734e:	e0 a0 02 fd 	rcall	80007948 <_fwalk>
80007352:	d8 02       	popm	pc

80007354 <__sfmoreglue>:
80007354:	d4 21       	pushm	r4-r7,lr
80007356:	16 95       	mov	r5,r11
80007358:	f6 06 10 5c 	mul	r6,r11,92
8000735c:	ec cb ff f4 	sub	r11,r6,-12
80007360:	e0 a0 03 84 	rcall	80007a68 <_malloc_r>
80007364:	18 97       	mov	r7,r12
80007366:	c0 90       	breq	80007378 <__sfmoreglue+0x24>
80007368:	99 15       	st.w	r12[0x4],r5
8000736a:	30 0b       	mov	r11,0
8000736c:	2f 4c       	sub	r12,-12
8000736e:	0c 9a       	mov	r10,r6
80007370:	8f 2c       	st.w	r7[0x8],r12
80007372:	8f 0b       	st.w	r7[0x0],r11
80007374:	e0 a0 05 bc 	rcall	80007eec <memset>
80007378:	0e 9c       	mov	r12,r7
8000737a:	d8 22       	popm	r4-r7,pc

8000737c <__sfp>:
8000737c:	d4 21       	pushm	r4-r7,lr
8000737e:	fe c8 d7 a6 	sub	r8,pc,-10330
80007382:	18 96       	mov	r6,r12
80007384:	70 07       	ld.w	r7,r8[0x0]
80007386:	6e 68       	ld.w	r8,r7[0x18]
80007388:	58 08       	cp.w	r8,0
8000738a:	c0 31       	brne	80007390 <__sfp+0x14>
8000738c:	0e 9c       	mov	r12,r7
8000738e:	c2 dc       	rcall	800073e8 <__sinit>
80007390:	ee c7 ff 28 	sub	r7,r7,-216
80007394:	30 05       	mov	r5,0
80007396:	6e 2c       	ld.w	r12,r7[0x8]
80007398:	6e 18       	ld.w	r8,r7[0x4]
8000739a:	c0 68       	rjmp	800073a6 <__sfp+0x2a>
8000739c:	98 69       	ld.sh	r9,r12[0xc]
8000739e:	ea 09 19 00 	cp.h	r9,r5
800073a2:	c1 10       	breq	800073c4 <__sfp+0x48>
800073a4:	2a 4c       	sub	r12,-92
800073a6:	20 18       	sub	r8,1
800073a8:	cf a7       	brpl	8000739c <__sfp+0x20>
800073aa:	6e 08       	ld.w	r8,r7[0x0]
800073ac:	58 08       	cp.w	r8,0
800073ae:	c0 61       	brne	800073ba <__sfp+0x3e>
800073b0:	30 4b       	mov	r11,4
800073b2:	0c 9c       	mov	r12,r6
800073b4:	cd 0f       	rcall	80007354 <__sfmoreglue>
800073b6:	8f 0c       	st.w	r7[0x0],r12
800073b8:	c0 30       	breq	800073be <__sfp+0x42>
800073ba:	6e 07       	ld.w	r7,r7[0x0]
800073bc:	ce db       	rjmp	80007396 <__sfp+0x1a>
800073be:	30 c8       	mov	r8,12
800073c0:	8d 38       	st.w	r6[0xc],r8
800073c2:	d8 22       	popm	r4-r7,pc
800073c4:	30 08       	mov	r8,0
800073c6:	f9 48 00 4c 	st.w	r12[76],r8
800073ca:	99 08       	st.w	r12[0x0],r8
800073cc:	99 28       	st.w	r12[0x8],r8
800073ce:	99 18       	st.w	r12[0x4],r8
800073d0:	99 48       	st.w	r12[0x10],r8
800073d2:	99 58       	st.w	r12[0x14],r8
800073d4:	99 68       	st.w	r12[0x18],r8
800073d6:	99 d8       	st.w	r12[0x34],r8
800073d8:	99 e8       	st.w	r12[0x38],r8
800073da:	f9 48 00 48 	st.w	r12[72],r8
800073de:	3f f8       	mov	r8,-1
800073e0:	b8 78       	st.h	r12[0xe],r8
800073e2:	30 18       	mov	r8,1
800073e4:	b8 68       	st.h	r12[0xc],r8
800073e6:	d8 22       	popm	r4-r7,pc

800073e8 <__sinit>:
800073e8:	d4 21       	pushm	r4-r7,lr
800073ea:	18 96       	mov	r6,r12
800073ec:	78 67       	ld.w	r7,r12[0x18]
800073ee:	58 07       	cp.w	r7,0
800073f0:	c4 91       	brne	80007482 <__sinit+0x9a>
800073f2:	fe c8 00 aa 	sub	r8,pc,170
800073f6:	30 15       	mov	r5,1
800073f8:	99 a8       	st.w	r12[0x28],r8
800073fa:	f9 47 00 d8 	st.w	r12[216],r7
800073fe:	f9 47 00 dc 	st.w	r12[220],r7
80007402:	f9 47 00 e0 	st.w	r12[224],r7
80007406:	99 65       	st.w	r12[0x18],r5
80007408:	cb af       	rcall	8000737c <__sfp>
8000740a:	8d 0c       	st.w	r6[0x0],r12
8000740c:	0c 9c       	mov	r12,r6
8000740e:	cb 7f       	rcall	8000737c <__sfp>
80007410:	8d 1c       	st.w	r6[0x4],r12
80007412:	0c 9c       	mov	r12,r6
80007414:	cb 4f       	rcall	8000737c <__sfp>
80007416:	6c 09       	ld.w	r9,r6[0x0]
80007418:	30 48       	mov	r8,4
8000741a:	93 07       	st.w	r9[0x0],r7
8000741c:	b2 68       	st.h	r9[0xc],r8
8000741e:	93 17       	st.w	r9[0x4],r7
80007420:	93 27       	st.w	r9[0x8],r7
80007422:	6c 18       	ld.w	r8,r6[0x4]
80007424:	b2 77       	st.h	r9[0xe],r7
80007426:	93 47       	st.w	r9[0x10],r7
80007428:	93 57       	st.w	r9[0x14],r7
8000742a:	93 67       	st.w	r9[0x18],r7
8000742c:	93 89       	st.w	r9[0x20],r9
8000742e:	91 07       	st.w	r8[0x0],r7
80007430:	91 17       	st.w	r8[0x4],r7
80007432:	91 27       	st.w	r8[0x8],r7
80007434:	fe ce eb e4 	sub	lr,pc,-5148
80007438:	fe cb ec 14 	sub	r11,pc,-5100
8000743c:	93 9e       	st.w	r9[0x24],lr
8000743e:	93 ab       	st.w	r9[0x28],r11
80007440:	fe ca ec 3c 	sub	r10,pc,-5060
80007444:	fe c4 ec 48 	sub	r4,pc,-5048
80007448:	93 ba       	st.w	r9[0x2c],r10
8000744a:	93 c4       	st.w	r9[0x30],r4
8000744c:	30 99       	mov	r9,9
8000744e:	b0 69       	st.h	r8[0xc],r9
80007450:	b0 75       	st.h	r8[0xe],r5
80007452:	91 c4       	st.w	r8[0x30],r4
80007454:	91 47       	st.w	r8[0x10],r7
80007456:	91 57       	st.w	r8[0x14],r7
80007458:	91 67       	st.w	r8[0x18],r7
8000745a:	91 88       	st.w	r8[0x20],r8
8000745c:	91 9e       	st.w	r8[0x24],lr
8000745e:	91 ab       	st.w	r8[0x28],r11
80007460:	91 ba       	st.w	r8[0x2c],r10
80007462:	8d 2c       	st.w	r6[0x8],r12
80007464:	31 28       	mov	r8,18
80007466:	99 07       	st.w	r12[0x0],r7
80007468:	b8 68       	st.h	r12[0xc],r8
8000746a:	99 17       	st.w	r12[0x4],r7
8000746c:	99 27       	st.w	r12[0x8],r7
8000746e:	30 28       	mov	r8,2
80007470:	b8 78       	st.h	r12[0xe],r8
80007472:	99 c4       	st.w	r12[0x30],r4
80007474:	99 67       	st.w	r12[0x18],r7
80007476:	99 9e       	st.w	r12[0x24],lr
80007478:	99 ab       	st.w	r12[0x28],r11
8000747a:	99 ba       	st.w	r12[0x2c],r10
8000747c:	99 47       	st.w	r12[0x10],r7
8000747e:	99 57       	st.w	r12[0x14],r7
80007480:	99 8c       	st.w	r12[0x20],r12
80007482:	d8 22       	popm	r4-r7,pc

80007484 <_malloc_trim_r>:
80007484:	d4 21       	pushm	r4-r7,lr
80007486:	16 95       	mov	r5,r11
80007488:	18 97       	mov	r7,r12
8000748a:	e0 a0 05 38 	rcall	80007efa <__malloc_lock>
8000748e:	e0 64 01 08 	mov	r4,264
80007492:	68 28       	ld.w	r8,r4[0x8]
80007494:	70 16       	ld.w	r6,r8[0x4]
80007496:	e0 16 ff fc 	andl	r6,0xfffc
8000749a:	ec c8 ff 91 	sub	r8,r6,-111
8000749e:	f0 05 01 05 	sub	r5,r8,r5
800074a2:	e0 15 ff 80 	andl	r5,0xff80
800074a6:	ea c5 00 80 	sub	r5,r5,128
800074aa:	e0 45 00 7f 	cp.w	r5,127
800074ae:	e0 8a 00 25 	brle	800074f8 <_malloc_trim_r+0x74>
800074b2:	30 0b       	mov	r11,0
800074b4:	0e 9c       	mov	r12,r7
800074b6:	e0 a0 09 93 	rcall	800087dc <_sbrk_r>
800074ba:	68 28       	ld.w	r8,r4[0x8]
800074bc:	0c 08       	add	r8,r6
800074be:	10 3c       	cp.w	r12,r8
800074c0:	c1 c1       	brne	800074f8 <_malloc_trim_r+0x74>
800074c2:	ea 0b 11 00 	rsub	r11,r5,0
800074c6:	0e 9c       	mov	r12,r7
800074c8:	e0 a0 09 8a 	rcall	800087dc <_sbrk_r>
800074cc:	5b fc       	cp.w	r12,-1
800074ce:	c1 91       	brne	80007500 <_malloc_trim_r+0x7c>
800074d0:	30 0b       	mov	r11,0
800074d2:	0e 9c       	mov	r12,r7
800074d4:	e0 a0 09 84 	rcall	800087dc <_sbrk_r>
800074d8:	68 28       	ld.w	r8,r4[0x8]
800074da:	f8 08 01 09 	sub	r9,r12,r8
800074de:	58 f9       	cp.w	r9,15
800074e0:	e0 8a 00 0c 	brle	800074f8 <_malloc_trim_r+0x74>
800074e4:	a1 a9       	sbr	r9,0x0
800074e6:	91 19       	st.w	r8[0x4],r9
800074e8:	e0 68 05 14 	mov	r8,1300
800074ec:	70 09       	ld.w	r9,r8[0x0]
800074ee:	e0 68 06 54 	mov	r8,1620
800074f2:	f8 09 01 09 	sub	r9,r12,r9
800074f6:	91 09       	st.w	r8[0x0],r9
800074f8:	0e 9c       	mov	r12,r7
800074fa:	e0 a0 05 01 	rcall	80007efc <__malloc_unlock>
800074fe:	d8 2a       	popm	r4-r7,pc,r12=0
80007500:	68 28       	ld.w	r8,r4[0x8]
80007502:	0a 16       	sub	r6,r5
80007504:	a1 a6       	sbr	r6,0x0
80007506:	91 16       	st.w	r8[0x4],r6
80007508:	e0 68 06 54 	mov	r8,1620
8000750c:	70 09       	ld.w	r9,r8[0x0]
8000750e:	0a 19       	sub	r9,r5
80007510:	0e 9c       	mov	r12,r7
80007512:	91 09       	st.w	r8[0x0],r9
80007514:	e0 a0 04 f4 	rcall	80007efc <__malloc_unlock>
80007518:	da 2a       	popm	r4-r7,pc,r12=1
8000751a:	d7 03       	nop

8000751c <_free_r>:
8000751c:	d4 21       	pushm	r4-r7,lr
8000751e:	16 96       	mov	r6,r11
80007520:	18 97       	mov	r7,r12
80007522:	58 0b       	cp.w	r11,0
80007524:	e0 80 00 c0 	breq	800076a4 <_free_r+0x188>
80007528:	e0 a0 04 e9 	rcall	80007efa <__malloc_lock>
8000752c:	20 86       	sub	r6,8
8000752e:	e0 6a 01 08 	mov	r10,264
80007532:	6c 18       	ld.w	r8,r6[0x4]
80007534:	74 2e       	ld.w	lr,r10[0x8]
80007536:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000753a:	a1 c8       	cbr	r8,0x0
8000753c:	ec 08 00 09 	add	r9,r6,r8
80007540:	72 1b       	ld.w	r11,r9[0x4]
80007542:	e0 1b ff fc 	andl	r11,0xfffc
80007546:	1c 39       	cp.w	r9,lr
80007548:	c1 e1       	brne	80007584 <_free_r+0x68>
8000754a:	f6 08 00 08 	add	r8,r11,r8
8000754e:	58 0c       	cp.w	r12,0
80007550:	c0 81       	brne	80007560 <_free_r+0x44>
80007552:	6c 09       	ld.w	r9,r6[0x0]
80007554:	12 16       	sub	r6,r9
80007556:	12 08       	add	r8,r9
80007558:	6c 3b       	ld.w	r11,r6[0xc]
8000755a:	6c 29       	ld.w	r9,r6[0x8]
8000755c:	97 29       	st.w	r11[0x8],r9
8000755e:	93 3b       	st.w	r9[0xc],r11
80007560:	10 99       	mov	r9,r8
80007562:	95 26       	st.w	r10[0x8],r6
80007564:	a1 a9       	sbr	r9,0x0
80007566:	8d 19       	st.w	r6[0x4],r9
80007568:	e0 69 05 10 	mov	r9,1296
8000756c:	72 09       	ld.w	r9,r9[0x0]
8000756e:	12 38       	cp.w	r8,r9
80007570:	c0 63       	brcs	8000757c <_free_r+0x60>
80007572:	e0 68 06 50 	mov	r8,1616
80007576:	0e 9c       	mov	r12,r7
80007578:	70 0b       	ld.w	r11,r8[0x0]
8000757a:	c8 5f       	rcall	80007484 <_malloc_trim_r>
8000757c:	0e 9c       	mov	r12,r7
8000757e:	e0 a0 04 bf 	rcall	80007efc <__malloc_unlock>
80007582:	d8 22       	popm	r4-r7,pc
80007584:	93 1b       	st.w	r9[0x4],r11
80007586:	58 0c       	cp.w	r12,0
80007588:	c0 30       	breq	8000758e <_free_r+0x72>
8000758a:	30 0c       	mov	r12,0
8000758c:	c1 08       	rjmp	800075ac <_free_r+0x90>
8000758e:	6c 0e       	ld.w	lr,r6[0x0]
80007590:	f4 c5 ff f8 	sub	r5,r10,-8
80007594:	1c 16       	sub	r6,lr
80007596:	1c 08       	add	r8,lr
80007598:	6c 2e       	ld.w	lr,r6[0x8]
8000759a:	0a 3e       	cp.w	lr,r5
8000759c:	f9 bc 00 01 	moveq	r12,1
800075a0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800075a4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800075a8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800075ac:	f2 0b 00 0e 	add	lr,r9,r11
800075b0:	7c 1e       	ld.w	lr,lr[0x4]
800075b2:	ed be 00 00 	bld	lr,0x0
800075b6:	c1 40       	breq	800075de <_free_r+0xc2>
800075b8:	16 08       	add	r8,r11
800075ba:	58 0c       	cp.w	r12,0
800075bc:	c0 d1       	brne	800075d6 <_free_r+0xba>
800075be:	e0 6e 01 08 	mov	lr,264
800075c2:	72 2b       	ld.w	r11,r9[0x8]
800075c4:	2f 8e       	sub	lr,-8
800075c6:	1c 3b       	cp.w	r11,lr
800075c8:	c0 71       	brne	800075d6 <_free_r+0xba>
800075ca:	97 36       	st.w	r11[0xc],r6
800075cc:	97 26       	st.w	r11[0x8],r6
800075ce:	8d 2b       	st.w	r6[0x8],r11
800075d0:	8d 3b       	st.w	r6[0xc],r11
800075d2:	30 1c       	mov	r12,1
800075d4:	c0 58       	rjmp	800075de <_free_r+0xc2>
800075d6:	72 2b       	ld.w	r11,r9[0x8]
800075d8:	72 39       	ld.w	r9,r9[0xc]
800075da:	93 2b       	st.w	r9[0x8],r11
800075dc:	97 39       	st.w	r11[0xc],r9
800075de:	10 99       	mov	r9,r8
800075e0:	ec 08 09 08 	st.w	r6[r8],r8
800075e4:	a1 a9       	sbr	r9,0x0
800075e6:	8d 19       	st.w	r6[0x4],r9
800075e8:	58 0c       	cp.w	r12,0
800075ea:	c5 a1       	brne	8000769e <_free_r+0x182>
800075ec:	e0 48 01 ff 	cp.w	r8,511
800075f0:	e0 8b 00 13 	brhi	80007616 <_free_r+0xfa>
800075f4:	a3 98       	lsr	r8,0x3
800075f6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800075fa:	72 2b       	ld.w	r11,r9[0x8]
800075fc:	8d 39       	st.w	r6[0xc],r9
800075fe:	8d 2b       	st.w	r6[0x8],r11
80007600:	97 36       	st.w	r11[0xc],r6
80007602:	93 26       	st.w	r9[0x8],r6
80007604:	a3 48       	asr	r8,0x2
80007606:	74 19       	ld.w	r9,r10[0x4]
80007608:	30 1b       	mov	r11,1
8000760a:	f6 08 09 48 	lsl	r8,r11,r8
8000760e:	f3 e8 10 08 	or	r8,r9,r8
80007612:	95 18       	st.w	r10[0x4],r8
80007614:	c4 58       	rjmp	8000769e <_free_r+0x182>
80007616:	f0 0b 16 09 	lsr	r11,r8,0x9
8000761a:	58 4b       	cp.w	r11,4
8000761c:	e0 8b 00 06 	brhi	80007628 <_free_r+0x10c>
80007620:	f0 0b 16 06 	lsr	r11,r8,0x6
80007624:	2c 8b       	sub	r11,-56
80007626:	c2 08       	rjmp	80007666 <_free_r+0x14a>
80007628:	59 4b       	cp.w	r11,20
8000762a:	e0 8b 00 04 	brhi	80007632 <_free_r+0x116>
8000762e:	2a 5b       	sub	r11,-91
80007630:	c1 b8       	rjmp	80007666 <_free_r+0x14a>
80007632:	e0 4b 00 54 	cp.w	r11,84
80007636:	e0 8b 00 06 	brhi	80007642 <_free_r+0x126>
8000763a:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000763e:	29 2b       	sub	r11,-110
80007640:	c1 38       	rjmp	80007666 <_free_r+0x14a>
80007642:	e0 4b 01 54 	cp.w	r11,340
80007646:	e0 8b 00 06 	brhi	80007652 <_free_r+0x136>
8000764a:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000764e:	28 9b       	sub	r11,-119
80007650:	c0 b8       	rjmp	80007666 <_free_r+0x14a>
80007652:	e0 4b 05 54 	cp.w	r11,1364
80007656:	e0 88 00 05 	brls	80007660 <_free_r+0x144>
8000765a:	37 eb       	mov	r11,126
8000765c:	c0 58       	rjmp	80007666 <_free_r+0x14a>
8000765e:	d7 03       	nop
80007660:	f0 0b 16 12 	lsr	r11,r8,0x12
80007664:	28 4b       	sub	r11,-124
80007666:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000766a:	78 29       	ld.w	r9,r12[0x8]
8000766c:	18 39       	cp.w	r9,r12
8000766e:	c0 e1       	brne	8000768a <_free_r+0x16e>
80007670:	74 18       	ld.w	r8,r10[0x4]
80007672:	a3 4b       	asr	r11,0x2
80007674:	30 1c       	mov	r12,1
80007676:	f8 0b 09 4b 	lsl	r11,r12,r11
8000767a:	f1 eb 10 0b 	or	r11,r8,r11
8000767e:	12 98       	mov	r8,r9
80007680:	95 1b       	st.w	r10[0x4],r11
80007682:	c0 a8       	rjmp	80007696 <_free_r+0x17a>
80007684:	72 29       	ld.w	r9,r9[0x8]
80007686:	18 39       	cp.w	r9,r12
80007688:	c0 60       	breq	80007694 <_free_r+0x178>
8000768a:	72 1a       	ld.w	r10,r9[0x4]
8000768c:	e0 1a ff fc 	andl	r10,0xfffc
80007690:	14 38       	cp.w	r8,r10
80007692:	cf 93       	brcs	80007684 <_free_r+0x168>
80007694:	72 38       	ld.w	r8,r9[0xc]
80007696:	8d 38       	st.w	r6[0xc],r8
80007698:	8d 29       	st.w	r6[0x8],r9
8000769a:	93 36       	st.w	r9[0xc],r6
8000769c:	91 26       	st.w	r8[0x8],r6
8000769e:	0e 9c       	mov	r12,r7
800076a0:	e0 a0 04 2e 	rcall	80007efc <__malloc_unlock>
800076a4:	d8 22       	popm	r4-r7,pc
800076a6:	d7 03       	nop

800076a8 <__sfvwrite_r>:
800076a8:	d4 31       	pushm	r0-r7,lr
800076aa:	20 3d       	sub	sp,12
800076ac:	14 94       	mov	r4,r10
800076ae:	18 95       	mov	r5,r12
800076b0:	16 97       	mov	r7,r11
800076b2:	74 28       	ld.w	r8,r10[0x8]
800076b4:	58 08       	cp.w	r8,0
800076b6:	e0 80 01 45 	breq	80007940 <__sfvwrite_r+0x298>
800076ba:	96 68       	ld.sh	r8,r11[0xc]
800076bc:	ed b8 00 03 	bld	r8,0x3
800076c0:	c0 41       	brne	800076c8 <__sfvwrite_r+0x20>
800076c2:	76 48       	ld.w	r8,r11[0x10]
800076c4:	58 08       	cp.w	r8,0
800076c6:	c0 c1       	brne	800076de <__sfvwrite_r+0x36>
800076c8:	0e 9b       	mov	r11,r7
800076ca:	0a 9c       	mov	r12,r5
800076cc:	fe b0 f6 ca 	rcall	80006460 <__swsetup_r>
800076d0:	c0 70       	breq	800076de <__sfvwrite_r+0x36>
800076d2:	8e 68       	ld.sh	r8,r7[0xc]
800076d4:	a7 a8       	sbr	r8,0x6
800076d6:	ae 68       	st.h	r7[0xc],r8
800076d8:	30 98       	mov	r8,9
800076da:	8b 38       	st.w	r5[0xc],r8
800076dc:	c3 09       	rjmp	8000793c <__sfvwrite_r+0x294>
800076de:	8e 63       	ld.sh	r3,r7[0xc]
800076e0:	68 00       	ld.w	r0,r4[0x0]
800076e2:	06 96       	mov	r6,r3
800076e4:	e2 16 00 02 	andl	r6,0x2,COH
800076e8:	c2 10       	breq	8000772a <__sfvwrite_r+0x82>
800076ea:	30 03       	mov	r3,0
800076ec:	e0 62 04 00 	mov	r2,1024
800076f0:	06 96       	mov	r6,r3
800076f2:	c0 48       	rjmp	800076fa <__sfvwrite_r+0x52>
800076f4:	60 03       	ld.w	r3,r0[0x0]
800076f6:	60 16       	ld.w	r6,r0[0x4]
800076f8:	2f 80       	sub	r0,-8
800076fa:	58 06       	cp.w	r6,0
800076fc:	cf c0       	breq	800076f4 <__sfvwrite_r+0x4c>
800076fe:	e0 46 04 00 	cp.w	r6,1024
80007702:	ec 09 17 80 	movls	r9,r6
80007706:	e4 09 17 b0 	movhi	r9,r2
8000770a:	06 9a       	mov	r10,r3
8000770c:	6e a8       	ld.w	r8,r7[0x28]
8000770e:	6e 8b       	ld.w	r11,r7[0x20]
80007710:	0a 9c       	mov	r12,r5
80007712:	5d 18       	icall	r8
80007714:	18 16       	sub	r6,r12
80007716:	58 0c       	cp.w	r12,0
80007718:	e0 8a 01 0f 	brle	80007936 <__sfvwrite_r+0x28e>
8000771c:	68 28       	ld.w	r8,r4[0x8]
8000771e:	18 18       	sub	r8,r12
80007720:	89 28       	st.w	r4[0x8],r8
80007722:	e0 80 01 0f 	breq	80007940 <__sfvwrite_r+0x298>
80007726:	18 03       	add	r3,r12
80007728:	ce 9b       	rjmp	800076fa <__sfvwrite_r+0x52>
8000772a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000772e:	c0 70       	breq	8000773c <__sfvwrite_r+0x94>
80007730:	50 06       	stdsp	sp[0x0],r6
80007732:	0c 93       	mov	r3,r6
80007734:	0c 91       	mov	r1,r6
80007736:	50 15       	stdsp	sp[0x4],r5
80007738:	08 92       	mov	r2,r4
8000773a:	c9 e8       	rjmp	80007876 <__sfvwrite_r+0x1ce>
8000773c:	06 96       	mov	r6,r3
8000773e:	08 91       	mov	r1,r4
80007740:	c0 48       	rjmp	80007748 <__sfvwrite_r+0xa0>
80007742:	60 03       	ld.w	r3,r0[0x0]
80007744:	60 16       	ld.w	r6,r0[0x4]
80007746:	2f 80       	sub	r0,-8
80007748:	58 06       	cp.w	r6,0
8000774a:	cf c0       	breq	80007742 <__sfvwrite_r+0x9a>
8000774c:	8e 68       	ld.sh	r8,r7[0xc]
8000774e:	6e 24       	ld.w	r4,r7[0x8]
80007750:	10 99       	mov	r9,r8
80007752:	e2 19 02 00 	andl	r9,0x200,COH
80007756:	c5 50       	breq	80007800 <__sfvwrite_r+0x158>
80007758:	08 36       	cp.w	r6,r4
8000775a:	c4 33       	brcs	800077e0 <__sfvwrite_r+0x138>
8000775c:	10 99       	mov	r9,r8
8000775e:	e2 19 04 80 	andl	r9,0x480,COH
80007762:	c3 f0       	breq	800077e0 <__sfvwrite_r+0x138>
80007764:	6e 4b       	ld.w	r11,r7[0x10]
80007766:	6e 09       	ld.w	r9,r7[0x0]
80007768:	16 19       	sub	r9,r11
8000776a:	50 09       	stdsp	sp[0x0],r9
8000776c:	6e 59       	ld.w	r9,r7[0x14]
8000776e:	10 9c       	mov	r12,r8
80007770:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007774:	30 28       	mov	r8,2
80007776:	f4 08 0c 08 	divs	r8,r10,r8
8000777a:	fa e9 00 04 	st.d	sp[4],r8
8000777e:	10 94       	mov	r4,r8
80007780:	40 09       	lddsp	r9,sp[0x0]
80007782:	e2 1c 04 00 	andl	r12,0x400,COH
80007786:	2f f9       	sub	r9,-1
80007788:	0c 09       	add	r9,r6
8000778a:	12 38       	cp.w	r8,r9
8000778c:	f2 04 17 30 	movlo	r4,r9
80007790:	58 0c       	cp.w	r12,0
80007792:	c1 00       	breq	800077b2 <__sfvwrite_r+0x10a>
80007794:	08 9b       	mov	r11,r4
80007796:	0a 9c       	mov	r12,r5
80007798:	c6 8d       	rcall	80007a68 <_malloc_r>
8000779a:	18 92       	mov	r2,r12
8000779c:	c1 40       	breq	800077c4 <__sfvwrite_r+0x11c>
8000779e:	40 0a       	lddsp	r10,sp[0x0]
800077a0:	6e 4b       	ld.w	r11,r7[0x10]
800077a2:	fe b0 e4 79 	rcall	80004094 <memcpy>
800077a6:	8e 68       	ld.sh	r8,r7[0xc]
800077a8:	e0 18 fb 7f 	andl	r8,0xfb7f
800077ac:	a7 b8       	sbr	r8,0x7
800077ae:	ae 68       	st.h	r7[0xc],r8
800077b0:	c0 d8       	rjmp	800077ca <__sfvwrite_r+0x122>
800077b2:	08 9a       	mov	r10,r4
800077b4:	0a 9c       	mov	r12,r5
800077b6:	e0 a0 06 8f 	rcall	800084d4 <_realloc_r>
800077ba:	18 92       	mov	r2,r12
800077bc:	c0 71       	brne	800077ca <__sfvwrite_r+0x122>
800077be:	6e 4b       	ld.w	r11,r7[0x10]
800077c0:	0a 9c       	mov	r12,r5
800077c2:	ca de       	rcall	8000751c <_free_r>
800077c4:	30 c8       	mov	r8,12
800077c6:	8b 38       	st.w	r5[0xc],r8
800077c8:	cb 78       	rjmp	80007936 <__sfvwrite_r+0x28e>
800077ca:	40 0a       	lddsp	r10,sp[0x0]
800077cc:	40 09       	lddsp	r9,sp[0x0]
800077ce:	e8 0a 01 0a 	sub	r10,r4,r10
800077d2:	e4 09 00 08 	add	r8,r2,r9
800077d6:	8f 54       	st.w	r7[0x14],r4
800077d8:	8f 2a       	st.w	r7[0x8],r10
800077da:	8f 08       	st.w	r7[0x0],r8
800077dc:	8f 42       	st.w	r7[0x10],r2
800077de:	0c 94       	mov	r4,r6
800077e0:	08 36       	cp.w	r6,r4
800077e2:	ec 04 17 30 	movlo	r4,r6
800077e6:	06 9b       	mov	r11,r3
800077e8:	08 9a       	mov	r10,r4
800077ea:	6e 0c       	ld.w	r12,r7[0x0]
800077ec:	e0 a0 03 61 	rcall	80007eae <memmove>
800077f0:	6e 08       	ld.w	r8,r7[0x0]
800077f2:	08 08       	add	r8,r4
800077f4:	8f 08       	st.w	r7[0x0],r8
800077f6:	6e 28       	ld.w	r8,r7[0x8]
800077f8:	08 18       	sub	r8,r4
800077fa:	0c 94       	mov	r4,r6
800077fc:	8f 28       	st.w	r7[0x8],r8
800077fe:	c3 08       	rjmp	8000785e <__sfvwrite_r+0x1b6>
80007800:	08 36       	cp.w	r6,r4
80007802:	5f ba       	srhi	r10
80007804:	6e 0c       	ld.w	r12,r7[0x0]
80007806:	6e 48       	ld.w	r8,r7[0x10]
80007808:	10 3c       	cp.w	r12,r8
8000780a:	5f b8       	srhi	r8
8000780c:	f5 e8 00 08 	and	r8,r10,r8
80007810:	f2 08 18 00 	cp.b	r8,r9
80007814:	c0 e0       	breq	80007830 <__sfvwrite_r+0x188>
80007816:	06 9b       	mov	r11,r3
80007818:	08 9a       	mov	r10,r4
8000781a:	e0 a0 03 4a 	rcall	80007eae <memmove>
8000781e:	6e 08       	ld.w	r8,r7[0x0]
80007820:	08 08       	add	r8,r4
80007822:	0e 9b       	mov	r11,r7
80007824:	8f 08       	st.w	r7[0x0],r8
80007826:	0a 9c       	mov	r12,r5
80007828:	fe b0 fd 08 	rcall	80007238 <_fflush_r>
8000782c:	c1 90       	breq	8000785e <__sfvwrite_r+0x1b6>
8000782e:	c8 48       	rjmp	80007936 <__sfvwrite_r+0x28e>
80007830:	6e 59       	ld.w	r9,r7[0x14]
80007832:	12 36       	cp.w	r6,r9
80007834:	c0 a3       	brcs	80007848 <__sfvwrite_r+0x1a0>
80007836:	6e a8       	ld.w	r8,r7[0x28]
80007838:	06 9a       	mov	r10,r3
8000783a:	6e 8b       	ld.w	r11,r7[0x20]
8000783c:	0a 9c       	mov	r12,r5
8000783e:	5d 18       	icall	r8
80007840:	18 94       	mov	r4,r12
80007842:	e0 89 00 0e 	brgt	8000785e <__sfvwrite_r+0x1b6>
80007846:	c7 88       	rjmp	80007936 <__sfvwrite_r+0x28e>
80007848:	0c 9a       	mov	r10,r6
8000784a:	06 9b       	mov	r11,r3
8000784c:	e0 a0 03 31 	rcall	80007eae <memmove>
80007850:	6e 08       	ld.w	r8,r7[0x0]
80007852:	0c 08       	add	r8,r6
80007854:	0c 94       	mov	r4,r6
80007856:	8f 08       	st.w	r7[0x0],r8
80007858:	6e 28       	ld.w	r8,r7[0x8]
8000785a:	0c 18       	sub	r8,r6
8000785c:	8f 28       	st.w	r7[0x8],r8
8000785e:	62 28       	ld.w	r8,r1[0x8]
80007860:	08 18       	sub	r8,r4
80007862:	83 28       	st.w	r1[0x8],r8
80007864:	c6 e0       	breq	80007940 <__sfvwrite_r+0x298>
80007866:	08 16       	sub	r6,r4
80007868:	08 03       	add	r3,r4
8000786a:	c6 fb       	rjmp	80007748 <__sfvwrite_r+0xa0>
8000786c:	60 03       	ld.w	r3,r0[0x0]
8000786e:	60 11       	ld.w	r1,r0[0x4]
80007870:	30 08       	mov	r8,0
80007872:	2f 80       	sub	r0,-8
80007874:	50 08       	stdsp	sp[0x0],r8
80007876:	58 01       	cp.w	r1,0
80007878:	cf a0       	breq	8000786c <__sfvwrite_r+0x1c4>
8000787a:	40 0a       	lddsp	r10,sp[0x0]
8000787c:	58 0a       	cp.w	r10,0
8000787e:	c1 51       	brne	800078a8 <__sfvwrite_r+0x200>
80007880:	e2 c6 ff ff 	sub	r6,r1,-1
80007884:	02 9a       	mov	r10,r1
80007886:	30 ab       	mov	r11,10
80007888:	06 9c       	mov	r12,r3
8000788a:	e0 a0 03 07 	rcall	80007e98 <memchr>
8000788e:	f8 c8 ff ff 	sub	r8,r12,-1
80007892:	58 0c       	cp.w	r12,0
80007894:	f1 d3 e1 16 	subne	r6,r8,r3
80007898:	f9 b9 01 01 	movne	r9,1
8000789c:	fb f9 1a 00 	st.wne	sp[0x0],r9
800078a0:	f9 b8 00 01 	moveq	r8,1
800078a4:	fb f8 0a 00 	st.weq	sp[0x0],r8
800078a8:	02 36       	cp.w	r6,r1
800078aa:	ec 04 17 80 	movls	r4,r6
800078ae:	e2 04 17 b0 	movhi	r4,r1
800078b2:	6e 59       	ld.w	r9,r7[0x14]
800078b4:	6e 25       	ld.w	r5,r7[0x8]
800078b6:	f2 05 00 05 	add	r5,r9,r5
800078ba:	0a 34       	cp.w	r4,r5
800078bc:	5f 9a       	srgt	r10
800078be:	6e 0c       	ld.w	r12,r7[0x0]
800078c0:	6e 48       	ld.w	r8,r7[0x10]
800078c2:	10 3c       	cp.w	r12,r8
800078c4:	5f b8       	srhi	r8
800078c6:	f5 e8 00 08 	and	r8,r10,r8
800078ca:	30 0a       	mov	r10,0
800078cc:	f4 08 18 00 	cp.b	r8,r10
800078d0:	c0 e0       	breq	800078ec <__sfvwrite_r+0x244>
800078d2:	06 9b       	mov	r11,r3
800078d4:	0a 9a       	mov	r10,r5
800078d6:	e0 a0 02 ec 	rcall	80007eae <memmove>
800078da:	6e 08       	ld.w	r8,r7[0x0]
800078dc:	0a 08       	add	r8,r5
800078de:	0e 9b       	mov	r11,r7
800078e0:	8f 08       	st.w	r7[0x0],r8
800078e2:	40 1c       	lddsp	r12,sp[0x4]
800078e4:	fe b0 fc aa 	rcall	80007238 <_fflush_r>
800078e8:	c1 80       	breq	80007918 <__sfvwrite_r+0x270>
800078ea:	c2 68       	rjmp	80007936 <__sfvwrite_r+0x28e>
800078ec:	12 34       	cp.w	r4,r9
800078ee:	c0 a5       	brlt	80007902 <__sfvwrite_r+0x25a>
800078f0:	6e a8       	ld.w	r8,r7[0x28]
800078f2:	06 9a       	mov	r10,r3
800078f4:	6e 8b       	ld.w	r11,r7[0x20]
800078f6:	40 1c       	lddsp	r12,sp[0x4]
800078f8:	5d 18       	icall	r8
800078fa:	18 95       	mov	r5,r12
800078fc:	e0 89 00 0e 	brgt	80007918 <__sfvwrite_r+0x270>
80007900:	c1 b8       	rjmp	80007936 <__sfvwrite_r+0x28e>
80007902:	08 9a       	mov	r10,r4
80007904:	06 9b       	mov	r11,r3
80007906:	e0 a0 02 d4 	rcall	80007eae <memmove>
8000790a:	6e 08       	ld.w	r8,r7[0x0]
8000790c:	08 08       	add	r8,r4
8000790e:	08 95       	mov	r5,r4
80007910:	8f 08       	st.w	r7[0x0],r8
80007912:	6e 28       	ld.w	r8,r7[0x8]
80007914:	08 18       	sub	r8,r4
80007916:	8f 28       	st.w	r7[0x8],r8
80007918:	0a 16       	sub	r6,r5
8000791a:	c0 71       	brne	80007928 <__sfvwrite_r+0x280>
8000791c:	0e 9b       	mov	r11,r7
8000791e:	40 1c       	lddsp	r12,sp[0x4]
80007920:	fe b0 fc 8c 	rcall	80007238 <_fflush_r>
80007924:	c0 91       	brne	80007936 <__sfvwrite_r+0x28e>
80007926:	50 06       	stdsp	sp[0x0],r6
80007928:	64 28       	ld.w	r8,r2[0x8]
8000792a:	0a 18       	sub	r8,r5
8000792c:	85 28       	st.w	r2[0x8],r8
8000792e:	c0 90       	breq	80007940 <__sfvwrite_r+0x298>
80007930:	0a 11       	sub	r1,r5
80007932:	0a 03       	add	r3,r5
80007934:	ca 1b       	rjmp	80007876 <__sfvwrite_r+0x1ce>
80007936:	8e 68       	ld.sh	r8,r7[0xc]
80007938:	a7 a8       	sbr	r8,0x6
8000793a:	ae 68       	st.h	r7[0xc],r8
8000793c:	3f fc       	mov	r12,-1
8000793e:	c0 28       	rjmp	80007942 <__sfvwrite_r+0x29a>
80007940:	30 0c       	mov	r12,0
80007942:	2f dd       	sub	sp,-12
80007944:	d8 32       	popm	r0-r7,pc
80007946:	d7 03       	nop

80007948 <_fwalk>:
80007948:	d4 31       	pushm	r0-r7,lr
8000794a:	30 05       	mov	r5,0
8000794c:	16 91       	mov	r1,r11
8000794e:	f8 c7 ff 28 	sub	r7,r12,-216
80007952:	0a 92       	mov	r2,r5
80007954:	fe b0 fc f8 	rcall	80007344 <__sfp_lock_acquire>
80007958:	3f f3       	mov	r3,-1
8000795a:	c1 68       	rjmp	80007986 <_fwalk+0x3e>
8000795c:	6e 26       	ld.w	r6,r7[0x8]
8000795e:	6e 14       	ld.w	r4,r7[0x4]
80007960:	2f 46       	sub	r6,-12
80007962:	c0 c8       	rjmp	8000797a <_fwalk+0x32>
80007964:	8c 08       	ld.sh	r8,r6[0x0]
80007966:	e4 08 19 00 	cp.h	r8,r2
8000796a:	c0 70       	breq	80007978 <_fwalk+0x30>
8000796c:	8c 18       	ld.sh	r8,r6[0x2]
8000796e:	e6 08 19 00 	cp.h	r8,r3
80007972:	c0 30       	breq	80007978 <_fwalk+0x30>
80007974:	5d 11       	icall	r1
80007976:	18 45       	or	r5,r12
80007978:	2a 46       	sub	r6,-92
8000797a:	20 14       	sub	r4,1
8000797c:	ec cc 00 0c 	sub	r12,r6,12
80007980:	58 04       	cp.w	r4,0
80007982:	cf 14       	brge	80007964 <_fwalk+0x1c>
80007984:	6e 07       	ld.w	r7,r7[0x0]
80007986:	58 07       	cp.w	r7,0
80007988:	ce a1       	brne	8000795c <_fwalk+0x14>
8000798a:	fe b0 fc de 	rcall	80007346 <__sfp_lock_release>
8000798e:	0a 9c       	mov	r12,r5
80007990:	d8 32       	popm	r0-r7,pc
80007992:	d7 03       	nop

80007994 <_localeconv_r>:
80007994:	fe cc d9 74 	sub	r12,pc,-9868
80007998:	5e fc       	retal	r12
8000799a:	d7 03       	nop

8000799c <__smakebuf_r>:
8000799c:	d4 21       	pushm	r4-r7,lr
8000799e:	20 fd       	sub	sp,60
800079a0:	96 68       	ld.sh	r8,r11[0xc]
800079a2:	16 97       	mov	r7,r11
800079a4:	18 96       	mov	r6,r12
800079a6:	e2 18 00 02 	andl	r8,0x2,COH
800079aa:	c3 c1       	brne	80007a22 <__smakebuf_r+0x86>
800079ac:	96 7b       	ld.sh	r11,r11[0xe]
800079ae:	f0 0b 19 00 	cp.h	r11,r8
800079b2:	c0 55       	brlt	800079bc <__smakebuf_r+0x20>
800079b4:	1a 9a       	mov	r10,sp
800079b6:	e0 a0 08 9d 	rcall	80008af0 <_fstat_r>
800079ba:	c0 f4       	brge	800079d8 <__smakebuf_r+0x3c>
800079bc:	8e 65       	ld.sh	r5,r7[0xc]
800079be:	0a 98       	mov	r8,r5
800079c0:	ab b8       	sbr	r8,0xb
800079c2:	e2 15 00 80 	andl	r5,0x80,COH
800079c6:	ae 68       	st.h	r7[0xc],r8
800079c8:	30 04       	mov	r4,0
800079ca:	e0 68 04 00 	mov	r8,1024
800079ce:	f9 b5 01 40 	movne	r5,64
800079d2:	f0 05 17 00 	moveq	r5,r8
800079d6:	c1 c8       	rjmp	80007a0e <__smakebuf_r+0x72>
800079d8:	40 18       	lddsp	r8,sp[0x4]
800079da:	e2 18 f0 00 	andl	r8,0xf000,COH
800079de:	e0 48 20 00 	cp.w	r8,8192
800079e2:	5f 04       	sreq	r4
800079e4:	e0 48 80 00 	cp.w	r8,32768
800079e8:	c0 e1       	brne	80007a04 <__smakebuf_r+0x68>
800079ea:	6e b9       	ld.w	r9,r7[0x2c]
800079ec:	fe c8 f1 e8 	sub	r8,pc,-3608
800079f0:	10 39       	cp.w	r9,r8
800079f2:	c0 91       	brne	80007a04 <__smakebuf_r+0x68>
800079f4:	8e 68       	ld.sh	r8,r7[0xc]
800079f6:	e0 65 04 00 	mov	r5,1024
800079fa:	ab a8       	sbr	r8,0xa
800079fc:	ef 45 00 50 	st.w	r7[80],r5
80007a00:	ae 68       	st.h	r7[0xc],r8
80007a02:	c0 68       	rjmp	80007a0e <__smakebuf_r+0x72>
80007a04:	8e 68       	ld.sh	r8,r7[0xc]
80007a06:	e0 65 04 00 	mov	r5,1024
80007a0a:	ab b8       	sbr	r8,0xb
80007a0c:	ae 68       	st.h	r7[0xc],r8
80007a0e:	0a 9b       	mov	r11,r5
80007a10:	0c 9c       	mov	r12,r6
80007a12:	c2 bc       	rcall	80007a68 <_malloc_r>
80007a14:	8e 68       	ld.sh	r8,r7[0xc]
80007a16:	c0 d1       	brne	80007a30 <__smakebuf_r+0x94>
80007a18:	ed b8 00 09 	bld	r8,0x9
80007a1c:	c1 b0       	breq	80007a52 <__smakebuf_r+0xb6>
80007a1e:	a1 b8       	sbr	r8,0x1
80007a20:	ae 68       	st.h	r7[0xc],r8
80007a22:	ee c8 ff b9 	sub	r8,r7,-71
80007a26:	8f 48       	st.w	r7[0x10],r8
80007a28:	8f 08       	st.w	r7[0x0],r8
80007a2a:	30 18       	mov	r8,1
80007a2c:	8f 58       	st.w	r7[0x14],r8
80007a2e:	c1 28       	rjmp	80007a52 <__smakebuf_r+0xb6>
80007a30:	a7 b8       	sbr	r8,0x7
80007a32:	8f 4c       	st.w	r7[0x10],r12
80007a34:	ae 68       	st.h	r7[0xc],r8
80007a36:	8f 55       	st.w	r7[0x14],r5
80007a38:	fe c8 06 f0 	sub	r8,pc,1776
80007a3c:	8f 0c       	st.w	r7[0x0],r12
80007a3e:	8d a8       	st.w	r6[0x28],r8
80007a40:	58 04       	cp.w	r4,0
80007a42:	c0 80       	breq	80007a52 <__smakebuf_r+0xb6>
80007a44:	8e 7c       	ld.sh	r12,r7[0xe]
80007a46:	e0 a0 07 47 	rcall	800088d4 <isatty>
80007a4a:	c0 40       	breq	80007a52 <__smakebuf_r+0xb6>
80007a4c:	8e 68       	ld.sh	r8,r7[0xc]
80007a4e:	a1 a8       	sbr	r8,0x0
80007a50:	ae 68       	st.h	r7[0xc],r8
80007a52:	2f 1d       	sub	sp,-60
80007a54:	d8 22       	popm	r4-r7,pc
80007a56:	d7 03       	nop

80007a58 <malloc>:
80007a58:	d4 01       	pushm	lr
80007a5a:	e0 68 01 04 	mov	r8,260
80007a5e:	18 9b       	mov	r11,r12
80007a60:	70 0c       	ld.w	r12,r8[0x0]
80007a62:	c0 3c       	rcall	80007a68 <_malloc_r>
80007a64:	d8 02       	popm	pc
80007a66:	d7 03       	nop

80007a68 <_malloc_r>:
80007a68:	d4 31       	pushm	r0-r7,lr
80007a6a:	f6 c8 ff f5 	sub	r8,r11,-11
80007a6e:	18 95       	mov	r5,r12
80007a70:	10 97       	mov	r7,r8
80007a72:	e0 17 ff f8 	andl	r7,0xfff8
80007a76:	59 68       	cp.w	r8,22
80007a78:	f9 b7 08 10 	movls	r7,16
80007a7c:	16 37       	cp.w	r7,r11
80007a7e:	5f 38       	srlo	r8
80007a80:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007a84:	c0 50       	breq	80007a8e <_malloc_r+0x26>
80007a86:	30 c8       	mov	r8,12
80007a88:	99 38       	st.w	r12[0xc],r8
80007a8a:	e0 8f 01 f7 	bral	80007e78 <_malloc_r+0x410>
80007a8e:	e0 a0 02 36 	rcall	80007efa <__malloc_lock>
80007a92:	e0 47 01 f7 	cp.w	r7,503
80007a96:	e0 8b 00 1d 	brhi	80007ad0 <_malloc_r+0x68>
80007a9a:	ee 03 16 03 	lsr	r3,r7,0x3
80007a9e:	e0 68 01 08 	mov	r8,264
80007aa2:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007aa6:	70 36       	ld.w	r6,r8[0xc]
80007aa8:	10 36       	cp.w	r6,r8
80007aaa:	c0 61       	brne	80007ab6 <_malloc_r+0x4e>
80007aac:	ec c8 ff f8 	sub	r8,r6,-8
80007ab0:	70 36       	ld.w	r6,r8[0xc]
80007ab2:	10 36       	cp.w	r6,r8
80007ab4:	c0 c0       	breq	80007acc <_malloc_r+0x64>
80007ab6:	6c 18       	ld.w	r8,r6[0x4]
80007ab8:	e0 18 ff fc 	andl	r8,0xfffc
80007abc:	6c 3a       	ld.w	r10,r6[0xc]
80007abe:	ec 08 00 09 	add	r9,r6,r8
80007ac2:	0a 9c       	mov	r12,r5
80007ac4:	6c 28       	ld.w	r8,r6[0x8]
80007ac6:	95 28       	st.w	r10[0x8],r8
80007ac8:	91 3a       	st.w	r8[0xc],r10
80007aca:	c4 78       	rjmp	80007b58 <_malloc_r+0xf0>
80007acc:	2f e3       	sub	r3,-2
80007ace:	c4 d8       	rjmp	80007b68 <_malloc_r+0x100>
80007ad0:	ee 03 16 09 	lsr	r3,r7,0x9
80007ad4:	c0 41       	brne	80007adc <_malloc_r+0x74>
80007ad6:	ee 03 16 03 	lsr	r3,r7,0x3
80007ada:	c2 68       	rjmp	80007b26 <_malloc_r+0xbe>
80007adc:	58 43       	cp.w	r3,4
80007ade:	e0 8b 00 06 	brhi	80007aea <_malloc_r+0x82>
80007ae2:	ee 03 16 06 	lsr	r3,r7,0x6
80007ae6:	2c 83       	sub	r3,-56
80007ae8:	c1 f8       	rjmp	80007b26 <_malloc_r+0xbe>
80007aea:	59 43       	cp.w	r3,20
80007aec:	e0 8b 00 04 	brhi	80007af4 <_malloc_r+0x8c>
80007af0:	2a 53       	sub	r3,-91
80007af2:	c1 a8       	rjmp	80007b26 <_malloc_r+0xbe>
80007af4:	e0 43 00 54 	cp.w	r3,84
80007af8:	e0 8b 00 06 	brhi	80007b04 <_malloc_r+0x9c>
80007afc:	ee 03 16 0c 	lsr	r3,r7,0xc
80007b00:	29 23       	sub	r3,-110
80007b02:	c1 28       	rjmp	80007b26 <_malloc_r+0xbe>
80007b04:	e0 43 01 54 	cp.w	r3,340
80007b08:	e0 8b 00 06 	brhi	80007b14 <_malloc_r+0xac>
80007b0c:	ee 03 16 0f 	lsr	r3,r7,0xf
80007b10:	28 93       	sub	r3,-119
80007b12:	c0 a8       	rjmp	80007b26 <_malloc_r+0xbe>
80007b14:	e0 43 05 54 	cp.w	r3,1364
80007b18:	e0 88 00 04 	brls	80007b20 <_malloc_r+0xb8>
80007b1c:	37 e3       	mov	r3,126
80007b1e:	c0 48       	rjmp	80007b26 <_malloc_r+0xbe>
80007b20:	ee 03 16 12 	lsr	r3,r7,0x12
80007b24:	28 43       	sub	r3,-124
80007b26:	e0 6a 01 08 	mov	r10,264
80007b2a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007b2e:	74 36       	ld.w	r6,r10[0xc]
80007b30:	c1 98       	rjmp	80007b62 <_malloc_r+0xfa>
80007b32:	6c 19       	ld.w	r9,r6[0x4]
80007b34:	e0 19 ff fc 	andl	r9,0xfffc
80007b38:	f2 07 01 0b 	sub	r11,r9,r7
80007b3c:	58 fb       	cp.w	r11,15
80007b3e:	e0 8a 00 04 	brle	80007b46 <_malloc_r+0xde>
80007b42:	20 13       	sub	r3,1
80007b44:	c1 18       	rjmp	80007b66 <_malloc_r+0xfe>
80007b46:	6c 38       	ld.w	r8,r6[0xc]
80007b48:	58 0b       	cp.w	r11,0
80007b4a:	c0 b5       	brlt	80007b60 <_malloc_r+0xf8>
80007b4c:	6c 2a       	ld.w	r10,r6[0x8]
80007b4e:	ec 09 00 09 	add	r9,r6,r9
80007b52:	0a 9c       	mov	r12,r5
80007b54:	91 2a       	st.w	r8[0x8],r10
80007b56:	95 38       	st.w	r10[0xc],r8
80007b58:	72 18       	ld.w	r8,r9[0x4]
80007b5a:	a1 a8       	sbr	r8,0x0
80007b5c:	93 18       	st.w	r9[0x4],r8
80007b5e:	cb c8       	rjmp	80007cd6 <_malloc_r+0x26e>
80007b60:	10 96       	mov	r6,r8
80007b62:	14 36       	cp.w	r6,r10
80007b64:	ce 71       	brne	80007b32 <_malloc_r+0xca>
80007b66:	2f f3       	sub	r3,-1
80007b68:	e0 6a 01 08 	mov	r10,264
80007b6c:	f4 cc ff f8 	sub	r12,r10,-8
80007b70:	78 26       	ld.w	r6,r12[0x8]
80007b72:	18 36       	cp.w	r6,r12
80007b74:	c6 c0       	breq	80007c4c <_malloc_r+0x1e4>
80007b76:	6c 19       	ld.w	r9,r6[0x4]
80007b78:	e0 19 ff fc 	andl	r9,0xfffc
80007b7c:	f2 07 01 08 	sub	r8,r9,r7
80007b80:	58 f8       	cp.w	r8,15
80007b82:	e0 89 00 8f 	brgt	80007ca0 <_malloc_r+0x238>
80007b86:	99 3c       	st.w	r12[0xc],r12
80007b88:	99 2c       	st.w	r12[0x8],r12
80007b8a:	58 08       	cp.w	r8,0
80007b8c:	c0 55       	brlt	80007b96 <_malloc_r+0x12e>
80007b8e:	ec 09 00 09 	add	r9,r6,r9
80007b92:	0a 9c       	mov	r12,r5
80007b94:	ce 2b       	rjmp	80007b58 <_malloc_r+0xf0>
80007b96:	e0 49 01 ff 	cp.w	r9,511
80007b9a:	e0 8b 00 13 	brhi	80007bc0 <_malloc_r+0x158>
80007b9e:	a3 99       	lsr	r9,0x3
80007ba0:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007ba4:	70 2b       	ld.w	r11,r8[0x8]
80007ba6:	8d 38       	st.w	r6[0xc],r8
80007ba8:	8d 2b       	st.w	r6[0x8],r11
80007baa:	97 36       	st.w	r11[0xc],r6
80007bac:	91 26       	st.w	r8[0x8],r6
80007bae:	a3 49       	asr	r9,0x2
80007bb0:	74 18       	ld.w	r8,r10[0x4]
80007bb2:	30 1b       	mov	r11,1
80007bb4:	f6 09 09 49 	lsl	r9,r11,r9
80007bb8:	f1 e9 10 09 	or	r9,r8,r9
80007bbc:	95 19       	st.w	r10[0x4],r9
80007bbe:	c4 78       	rjmp	80007c4c <_malloc_r+0x1e4>
80007bc0:	f2 0a 16 09 	lsr	r10,r9,0x9
80007bc4:	58 4a       	cp.w	r10,4
80007bc6:	e0 8b 00 07 	brhi	80007bd4 <_malloc_r+0x16c>
80007bca:	f2 0a 16 06 	lsr	r10,r9,0x6
80007bce:	2c 8a       	sub	r10,-56
80007bd0:	c2 08       	rjmp	80007c10 <_malloc_r+0x1a8>
80007bd2:	d7 03       	nop
80007bd4:	59 4a       	cp.w	r10,20
80007bd6:	e0 8b 00 04 	brhi	80007bde <_malloc_r+0x176>
80007bda:	2a 5a       	sub	r10,-91
80007bdc:	c1 a8       	rjmp	80007c10 <_malloc_r+0x1a8>
80007bde:	e0 4a 00 54 	cp.w	r10,84
80007be2:	e0 8b 00 06 	brhi	80007bee <_malloc_r+0x186>
80007be6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007bea:	29 2a       	sub	r10,-110
80007bec:	c1 28       	rjmp	80007c10 <_malloc_r+0x1a8>
80007bee:	e0 4a 01 54 	cp.w	r10,340
80007bf2:	e0 8b 00 06 	brhi	80007bfe <_malloc_r+0x196>
80007bf6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007bfa:	28 9a       	sub	r10,-119
80007bfc:	c0 a8       	rjmp	80007c10 <_malloc_r+0x1a8>
80007bfe:	e0 4a 05 54 	cp.w	r10,1364
80007c02:	e0 88 00 04 	brls	80007c0a <_malloc_r+0x1a2>
80007c06:	37 ea       	mov	r10,126
80007c08:	c0 48       	rjmp	80007c10 <_malloc_r+0x1a8>
80007c0a:	f2 0a 16 12 	lsr	r10,r9,0x12
80007c0e:	28 4a       	sub	r10,-124
80007c10:	e0 6b 01 08 	mov	r11,264
80007c14:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007c18:	68 28       	ld.w	r8,r4[0x8]
80007c1a:	08 38       	cp.w	r8,r4
80007c1c:	c0 e1       	brne	80007c38 <_malloc_r+0x1d0>
80007c1e:	76 19       	ld.w	r9,r11[0x4]
80007c20:	a3 4a       	asr	r10,0x2
80007c22:	30 1e       	mov	lr,1
80007c24:	fc 0a 09 4a 	lsl	r10,lr,r10
80007c28:	f3 ea 10 0a 	or	r10,r9,r10
80007c2c:	10 99       	mov	r9,r8
80007c2e:	97 1a       	st.w	r11[0x4],r10
80007c30:	c0 a8       	rjmp	80007c44 <_malloc_r+0x1dc>
80007c32:	70 28       	ld.w	r8,r8[0x8]
80007c34:	08 38       	cp.w	r8,r4
80007c36:	c0 60       	breq	80007c42 <_malloc_r+0x1da>
80007c38:	70 1a       	ld.w	r10,r8[0x4]
80007c3a:	e0 1a ff fc 	andl	r10,0xfffc
80007c3e:	14 39       	cp.w	r9,r10
80007c40:	cf 93       	brcs	80007c32 <_malloc_r+0x1ca>
80007c42:	70 39       	ld.w	r9,r8[0xc]
80007c44:	8d 39       	st.w	r6[0xc],r9
80007c46:	8d 28       	st.w	r6[0x8],r8
80007c48:	91 36       	st.w	r8[0xc],r6
80007c4a:	93 26       	st.w	r9[0x8],r6
80007c4c:	e6 08 14 02 	asr	r8,r3,0x2
80007c50:	30 1b       	mov	r11,1
80007c52:	e0 64 01 08 	mov	r4,264
80007c56:	f6 08 09 4b 	lsl	r11,r11,r8
80007c5a:	68 18       	ld.w	r8,r4[0x4]
80007c5c:	10 3b       	cp.w	r11,r8
80007c5e:	e0 8b 00 69 	brhi	80007d30 <_malloc_r+0x2c8>
80007c62:	f7 e8 00 09 	and	r9,r11,r8
80007c66:	c0 b1       	brne	80007c7c <_malloc_r+0x214>
80007c68:	e0 13 ff fc 	andl	r3,0xfffc
80007c6c:	a1 7b       	lsl	r11,0x1
80007c6e:	2f c3       	sub	r3,-4
80007c70:	c0 38       	rjmp	80007c76 <_malloc_r+0x20e>
80007c72:	2f c3       	sub	r3,-4
80007c74:	a1 7b       	lsl	r11,0x1
80007c76:	f7 e8 00 09 	and	r9,r11,r8
80007c7a:	cf c0       	breq	80007c72 <_malloc_r+0x20a>
80007c7c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007c80:	06 92       	mov	r2,r3
80007c82:	1c 91       	mov	r1,lr
80007c84:	62 36       	ld.w	r6,r1[0xc]
80007c86:	c2 d8       	rjmp	80007ce0 <_malloc_r+0x278>
80007c88:	6c 1a       	ld.w	r10,r6[0x4]
80007c8a:	e0 1a ff fc 	andl	r10,0xfffc
80007c8e:	f4 07 01 08 	sub	r8,r10,r7
80007c92:	58 f8       	cp.w	r8,15
80007c94:	e0 8a 00 15 	brle	80007cbe <_malloc_r+0x256>
80007c98:	6c 3a       	ld.w	r10,r6[0xc]
80007c9a:	6c 29       	ld.w	r9,r6[0x8]
80007c9c:	95 29       	st.w	r10[0x8],r9
80007c9e:	93 3a       	st.w	r9[0xc],r10
80007ca0:	0e 99       	mov	r9,r7
80007ca2:	ec 07 00 07 	add	r7,r6,r7
80007ca6:	a1 a9       	sbr	r9,0x0
80007ca8:	99 37       	st.w	r12[0xc],r7
80007caa:	99 27       	st.w	r12[0x8],r7
80007cac:	8d 19       	st.w	r6[0x4],r9
80007cae:	ee 08 09 08 	st.w	r7[r8],r8
80007cb2:	8f 2c       	st.w	r7[0x8],r12
80007cb4:	8f 3c       	st.w	r7[0xc],r12
80007cb6:	a1 a8       	sbr	r8,0x0
80007cb8:	0a 9c       	mov	r12,r5
80007cba:	8f 18       	st.w	r7[0x4],r8
80007cbc:	c0 d8       	rjmp	80007cd6 <_malloc_r+0x26e>
80007cbe:	6c 39       	ld.w	r9,r6[0xc]
80007cc0:	58 08       	cp.w	r8,0
80007cc2:	c0 e5       	brlt	80007cde <_malloc_r+0x276>
80007cc4:	ec 0a 00 0a 	add	r10,r6,r10
80007cc8:	74 18       	ld.w	r8,r10[0x4]
80007cca:	a1 a8       	sbr	r8,0x0
80007ccc:	0a 9c       	mov	r12,r5
80007cce:	95 18       	st.w	r10[0x4],r8
80007cd0:	6c 28       	ld.w	r8,r6[0x8]
80007cd2:	93 28       	st.w	r9[0x8],r8
80007cd4:	91 39       	st.w	r8[0xc],r9
80007cd6:	c1 3d       	rcall	80007efc <__malloc_unlock>
80007cd8:	ec cc ff f8 	sub	r12,r6,-8
80007cdc:	d8 32       	popm	r0-r7,pc
80007cde:	12 96       	mov	r6,r9
80007ce0:	02 36       	cp.w	r6,r1
80007ce2:	cd 31       	brne	80007c88 <_malloc_r+0x220>
80007ce4:	2f f2       	sub	r2,-1
80007ce6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007cea:	c0 30       	breq	80007cf0 <_malloc_r+0x288>
80007cec:	2f 81       	sub	r1,-8
80007cee:	cc bb       	rjmp	80007c84 <_malloc_r+0x21c>
80007cf0:	1c 98       	mov	r8,lr
80007cf2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007cf6:	c0 81       	brne	80007d06 <_malloc_r+0x29e>
80007cf8:	68 19       	ld.w	r9,r4[0x4]
80007cfa:	f6 08 11 ff 	rsub	r8,r11,-1
80007cfe:	f3 e8 00 08 	and	r8,r9,r8
80007d02:	89 18       	st.w	r4[0x4],r8
80007d04:	c0 78       	rjmp	80007d12 <_malloc_r+0x2aa>
80007d06:	f0 c9 00 08 	sub	r9,r8,8
80007d0a:	20 13       	sub	r3,1
80007d0c:	70 08       	ld.w	r8,r8[0x0]
80007d0e:	12 38       	cp.w	r8,r9
80007d10:	cf 10       	breq	80007cf2 <_malloc_r+0x28a>
80007d12:	a1 7b       	lsl	r11,0x1
80007d14:	68 18       	ld.w	r8,r4[0x4]
80007d16:	10 3b       	cp.w	r11,r8
80007d18:	e0 8b 00 0c 	brhi	80007d30 <_malloc_r+0x2c8>
80007d1c:	58 0b       	cp.w	r11,0
80007d1e:	c0 90       	breq	80007d30 <_malloc_r+0x2c8>
80007d20:	04 93       	mov	r3,r2
80007d22:	c0 38       	rjmp	80007d28 <_malloc_r+0x2c0>
80007d24:	2f c3       	sub	r3,-4
80007d26:	a1 7b       	lsl	r11,0x1
80007d28:	f7 e8 00 09 	and	r9,r11,r8
80007d2c:	ca 81       	brne	80007c7c <_malloc_r+0x214>
80007d2e:	cf bb       	rjmp	80007d24 <_malloc_r+0x2bc>
80007d30:	68 23       	ld.w	r3,r4[0x8]
80007d32:	66 12       	ld.w	r2,r3[0x4]
80007d34:	e0 12 ff fc 	andl	r2,0xfffc
80007d38:	0e 32       	cp.w	r2,r7
80007d3a:	5f 39       	srlo	r9
80007d3c:	e4 07 01 08 	sub	r8,r2,r7
80007d40:	58 f8       	cp.w	r8,15
80007d42:	5f aa       	srle	r10
80007d44:	f5 e9 10 09 	or	r9,r10,r9
80007d48:	e0 80 00 9a 	breq	80007e7c <_malloc_r+0x414>
80007d4c:	e0 68 06 50 	mov	r8,1616
80007d50:	70 01       	ld.w	r1,r8[0x0]
80007d52:	e0 68 05 14 	mov	r8,1300
80007d56:	2f 01       	sub	r1,-16
80007d58:	70 08       	ld.w	r8,r8[0x0]
80007d5a:	0e 01       	add	r1,r7
80007d5c:	5b f8       	cp.w	r8,-1
80007d5e:	c0 40       	breq	80007d66 <_malloc_r+0x2fe>
80007d60:	28 11       	sub	r1,-127
80007d62:	e0 11 ff 80 	andl	r1,0xff80
80007d66:	02 9b       	mov	r11,r1
80007d68:	0a 9c       	mov	r12,r5
80007d6a:	e0 a0 05 39 	rcall	800087dc <_sbrk_r>
80007d6e:	18 96       	mov	r6,r12
80007d70:	5b fc       	cp.w	r12,-1
80007d72:	c7 50       	breq	80007e5c <_malloc_r+0x3f4>
80007d74:	e6 02 00 08 	add	r8,r3,r2
80007d78:	10 3c       	cp.w	r12,r8
80007d7a:	c0 32       	brcc	80007d80 <_malloc_r+0x318>
80007d7c:	08 33       	cp.w	r3,r4
80007d7e:	c6 f1       	brne	80007e5c <_malloc_r+0x3f4>
80007d80:	e0 6a 06 54 	mov	r10,1620
80007d84:	74 09       	ld.w	r9,r10[0x0]
80007d86:	e2 09 00 09 	add	r9,r1,r9
80007d8a:	95 09       	st.w	r10[0x0],r9
80007d8c:	10 36       	cp.w	r6,r8
80007d8e:	c0 a1       	brne	80007da2 <_malloc_r+0x33a>
80007d90:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007d94:	c0 71       	brne	80007da2 <_malloc_r+0x33a>
80007d96:	e2 02 00 02 	add	r2,r1,r2
80007d9a:	68 28       	ld.w	r8,r4[0x8]
80007d9c:	a1 a2       	sbr	r2,0x0
80007d9e:	91 12       	st.w	r8[0x4],r2
80007da0:	c4 f8       	rjmp	80007e3e <_malloc_r+0x3d6>
80007da2:	e0 6a 05 14 	mov	r10,1300
80007da6:	74 0b       	ld.w	r11,r10[0x0]
80007da8:	5b fb       	cp.w	r11,-1
80007daa:	c0 31       	brne	80007db0 <_malloc_r+0x348>
80007dac:	95 06       	st.w	r10[0x0],r6
80007dae:	c0 78       	rjmp	80007dbc <_malloc_r+0x354>
80007db0:	ec 09 00 09 	add	r9,r6,r9
80007db4:	e0 6a 06 54 	mov	r10,1620
80007db8:	10 19       	sub	r9,r8
80007dba:	95 09       	st.w	r10[0x0],r9
80007dbc:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007dc0:	f0 09 11 08 	rsub	r9,r8,8
80007dc4:	58 08       	cp.w	r8,0
80007dc6:	f2 08 17 10 	movne	r8,r9
80007dca:	ed d8 e1 06 	addne	r6,r6,r8
80007dce:	28 08       	sub	r8,-128
80007dd0:	ec 01 00 01 	add	r1,r6,r1
80007dd4:	0a 9c       	mov	r12,r5
80007dd6:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007dda:	f0 01 01 01 	sub	r1,r8,r1
80007dde:	02 9b       	mov	r11,r1
80007de0:	e0 a0 04 fe 	rcall	800087dc <_sbrk_r>
80007de4:	e0 68 06 54 	mov	r8,1620
80007de8:	5b fc       	cp.w	r12,-1
80007dea:	ec 0c 17 00 	moveq	r12,r6
80007dee:	f9 b1 00 00 	moveq	r1,0
80007df2:	70 09       	ld.w	r9,r8[0x0]
80007df4:	0c 1c       	sub	r12,r6
80007df6:	89 26       	st.w	r4[0x8],r6
80007df8:	02 0c       	add	r12,r1
80007dfa:	12 01       	add	r1,r9
80007dfc:	a1 ac       	sbr	r12,0x0
80007dfe:	91 01       	st.w	r8[0x0],r1
80007e00:	8d 1c       	st.w	r6[0x4],r12
80007e02:	08 33       	cp.w	r3,r4
80007e04:	c1 d0       	breq	80007e3e <_malloc_r+0x3d6>
80007e06:	58 f2       	cp.w	r2,15
80007e08:	e0 8b 00 05 	brhi	80007e12 <_malloc_r+0x3aa>
80007e0c:	30 18       	mov	r8,1
80007e0e:	8d 18       	st.w	r6[0x4],r8
80007e10:	c2 68       	rjmp	80007e5c <_malloc_r+0x3f4>
80007e12:	30 59       	mov	r9,5
80007e14:	20 c2       	sub	r2,12
80007e16:	e0 12 ff f8 	andl	r2,0xfff8
80007e1a:	e6 02 00 08 	add	r8,r3,r2
80007e1e:	91 29       	st.w	r8[0x8],r9
80007e20:	91 19       	st.w	r8[0x4],r9
80007e22:	66 18       	ld.w	r8,r3[0x4]
80007e24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007e28:	e5 e8 10 08 	or	r8,r2,r8
80007e2c:	87 18       	st.w	r3[0x4],r8
80007e2e:	58 f2       	cp.w	r2,15
80007e30:	e0 88 00 07 	brls	80007e3e <_malloc_r+0x3d6>
80007e34:	e6 cb ff f8 	sub	r11,r3,-8
80007e38:	0a 9c       	mov	r12,r5
80007e3a:	fe b0 fb 71 	rcall	8000751c <_free_r>
80007e3e:	e0 69 06 4c 	mov	r9,1612
80007e42:	72 0a       	ld.w	r10,r9[0x0]
80007e44:	e0 68 06 54 	mov	r8,1620
80007e48:	70 08       	ld.w	r8,r8[0x0]
80007e4a:	14 38       	cp.w	r8,r10
80007e4c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007e50:	e0 69 06 48 	mov	r9,1608
80007e54:	72 0a       	ld.w	r10,r9[0x0]
80007e56:	14 38       	cp.w	r8,r10
80007e58:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007e5c:	68 28       	ld.w	r8,r4[0x8]
80007e5e:	70 18       	ld.w	r8,r8[0x4]
80007e60:	e0 18 ff fc 	andl	r8,0xfffc
80007e64:	0e 38       	cp.w	r8,r7
80007e66:	5f 39       	srlo	r9
80007e68:	0e 18       	sub	r8,r7
80007e6a:	58 f8       	cp.w	r8,15
80007e6c:	5f aa       	srle	r10
80007e6e:	f5 e9 10 09 	or	r9,r10,r9
80007e72:	c0 50       	breq	80007e7c <_malloc_r+0x414>
80007e74:	0a 9c       	mov	r12,r5
80007e76:	c4 3c       	rcall	80007efc <__malloc_unlock>
80007e78:	d8 3a       	popm	r0-r7,pc,r12=0
80007e7a:	d7 03       	nop
80007e7c:	68 26       	ld.w	r6,r4[0x8]
80007e7e:	a1 a8       	sbr	r8,0x0
80007e80:	0e 99       	mov	r9,r7
80007e82:	a1 a9       	sbr	r9,0x0
80007e84:	8d 19       	st.w	r6[0x4],r9
80007e86:	ec 07 00 07 	add	r7,r6,r7
80007e8a:	0a 9c       	mov	r12,r5
80007e8c:	89 27       	st.w	r4[0x8],r7
80007e8e:	8f 18       	st.w	r7[0x4],r8
80007e90:	c3 6c       	rcall	80007efc <__malloc_unlock>
80007e92:	ec cc ff f8 	sub	r12,r6,-8
80007e96:	d8 32       	popm	r0-r7,pc

80007e98 <memchr>:
80007e98:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007e9c:	c0 68       	rjmp	80007ea8 <memchr+0x10>
80007e9e:	20 1a       	sub	r10,1
80007ea0:	19 88       	ld.ub	r8,r12[0x0]
80007ea2:	16 38       	cp.w	r8,r11
80007ea4:	5e 0c       	reteq	r12
80007ea6:	2f fc       	sub	r12,-1
80007ea8:	58 0a       	cp.w	r10,0
80007eaa:	cf a1       	brne	80007e9e <memchr+0x6>
80007eac:	5e fa       	retal	r10

80007eae <memmove>:
80007eae:	d4 01       	pushm	lr
80007eb0:	18 3b       	cp.w	r11,r12
80007eb2:	c1 92       	brcc	80007ee4 <memmove+0x36>
80007eb4:	f6 0a 00 09 	add	r9,r11,r10
80007eb8:	12 3c       	cp.w	r12,r9
80007eba:	c1 52       	brcc	80007ee4 <memmove+0x36>
80007ebc:	f8 0a 00 0b 	add	r11,r12,r10
80007ec0:	30 08       	mov	r8,0
80007ec2:	c0 68       	rjmp	80007ece <memmove+0x20>
80007ec4:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007ec8:	20 1a       	sub	r10,1
80007eca:	f6 08 0b 0e 	st.b	r11[r8],lr
80007ece:	20 18       	sub	r8,1
80007ed0:	58 0a       	cp.w	r10,0
80007ed2:	cf 91       	brne	80007ec4 <memmove+0x16>
80007ed4:	d8 02       	popm	pc
80007ed6:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007eda:	20 1a       	sub	r10,1
80007edc:	f8 08 0b 09 	st.b	r12[r8],r9
80007ee0:	2f f8       	sub	r8,-1
80007ee2:	c0 28       	rjmp	80007ee6 <memmove+0x38>
80007ee4:	30 08       	mov	r8,0
80007ee6:	58 0a       	cp.w	r10,0
80007ee8:	cf 71       	brne	80007ed6 <memmove+0x28>
80007eea:	d8 02       	popm	pc

80007eec <memset>:
80007eec:	18 98       	mov	r8,r12
80007eee:	c0 38       	rjmp	80007ef4 <memset+0x8>
80007ef0:	10 cb       	st.b	r8++,r11
80007ef2:	20 1a       	sub	r10,1
80007ef4:	58 0a       	cp.w	r10,0
80007ef6:	cf d1       	brne	80007ef0 <memset+0x4>
80007ef8:	5e fc       	retal	r12

80007efa <__malloc_lock>:
80007efa:	5e fc       	retal	r12

80007efc <__malloc_unlock>:
80007efc:	5e fc       	retal	r12

80007efe <__hi0bits>:
80007efe:	18 98       	mov	r8,r12
80007f00:	e0 1c 00 00 	andl	r12,0x0
80007f04:	f0 09 15 10 	lsl	r9,r8,0x10
80007f08:	58 0c       	cp.w	r12,0
80007f0a:	f2 08 17 00 	moveq	r8,r9
80007f0e:	f9 bc 00 10 	moveq	r12,16
80007f12:	f9 bc 01 00 	movne	r12,0
80007f16:	10 9a       	mov	r10,r8
80007f18:	f0 09 15 08 	lsl	r9,r8,0x8
80007f1c:	e6 1a ff 00 	andh	r10,0xff00,COH
80007f20:	f7 bc 00 f8 	subeq	r12,-8
80007f24:	f2 08 17 00 	moveq	r8,r9
80007f28:	10 9a       	mov	r10,r8
80007f2a:	f0 09 15 04 	lsl	r9,r8,0x4
80007f2e:	e6 1a f0 00 	andh	r10,0xf000,COH
80007f32:	f7 bc 00 fc 	subeq	r12,-4
80007f36:	f2 08 17 00 	moveq	r8,r9
80007f3a:	10 9a       	mov	r10,r8
80007f3c:	f0 09 15 02 	lsl	r9,r8,0x2
80007f40:	e6 1a c0 00 	andh	r10,0xc000,COH
80007f44:	f7 bc 00 fe 	subeq	r12,-2
80007f48:	f2 08 17 00 	moveq	r8,r9
80007f4c:	58 08       	cp.w	r8,0
80007f4e:	5e 5c       	retlt	r12
80007f50:	ed b8 00 1e 	bld	r8,0x1e
80007f54:	f9 bc 01 20 	movne	r12,32
80007f58:	f7 bc 00 ff 	subeq	r12,-1
80007f5c:	5e fc       	retal	r12

80007f5e <__lo0bits>:
80007f5e:	18 99       	mov	r9,r12
80007f60:	78 08       	ld.w	r8,r12[0x0]
80007f62:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007f66:	c1 50       	breq	80007f90 <__lo0bits+0x32>
80007f68:	ed b8 00 00 	bld	r8,0x0
80007f6c:	c0 21       	brne	80007f70 <__lo0bits+0x12>
80007f6e:	5e fd       	retal	0
80007f70:	10 9b       	mov	r11,r8
80007f72:	f0 0a 16 01 	lsr	r10,r8,0x1
80007f76:	e2 1b 00 02 	andl	r11,0x2,COH
80007f7a:	a3 88       	lsr	r8,0x2
80007f7c:	58 0b       	cp.w	r11,0
80007f7e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007f82:	f9 bc 01 01 	movne	r12,1
80007f86:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007f8a:	f9 bc 00 02 	moveq	r12,2
80007f8e:	5e fc       	retal	r12
80007f90:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007f94:	f0 0b 16 10 	lsr	r11,r8,0x10
80007f98:	58 0a       	cp.w	r10,0
80007f9a:	f6 08 17 00 	moveq	r8,r11
80007f9e:	f9 bc 00 10 	moveq	r12,16
80007fa2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007fa6:	f0 0a 16 08 	lsr	r10,r8,0x8
80007faa:	58 0b       	cp.w	r11,0
80007fac:	f7 bc 00 f8 	subeq	r12,-8
80007fb0:	f4 08 17 00 	moveq	r8,r10
80007fb4:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007fb8:	f0 0a 16 04 	lsr	r10,r8,0x4
80007fbc:	58 0b       	cp.w	r11,0
80007fbe:	f7 bc 00 fc 	subeq	r12,-4
80007fc2:	f4 08 17 00 	moveq	r8,r10
80007fc6:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007fca:	f0 0a 16 02 	lsr	r10,r8,0x2
80007fce:	58 0b       	cp.w	r11,0
80007fd0:	f7 bc 00 fe 	subeq	r12,-2
80007fd4:	f4 08 17 00 	moveq	r8,r10
80007fd8:	ed b8 00 00 	bld	r8,0x0
80007fdc:	c0 60       	breq	80007fe8 <__lo0bits+0x8a>
80007fde:	a1 98       	lsr	r8,0x1
80007fe0:	c0 31       	brne	80007fe6 <__lo0bits+0x88>
80007fe2:	32 0c       	mov	r12,32
80007fe4:	5e fc       	retal	r12
80007fe6:	2f fc       	sub	r12,-1
80007fe8:	93 08       	st.w	r9[0x0],r8
80007fea:	5e fc       	retal	r12

80007fec <__mcmp>:
80007fec:	d4 01       	pushm	lr
80007fee:	18 98       	mov	r8,r12
80007ff0:	76 49       	ld.w	r9,r11[0x10]
80007ff2:	78 4c       	ld.w	r12,r12[0x10]
80007ff4:	12 1c       	sub	r12,r9
80007ff6:	c1 31       	brne	8000801c <__mcmp+0x30>
80007ff8:	2f b9       	sub	r9,-5
80007ffa:	a3 69       	lsl	r9,0x2
80007ffc:	12 0b       	add	r11,r9
80007ffe:	f0 09 00 09 	add	r9,r8,r9
80008002:	2e c8       	sub	r8,-20
80008004:	13 4e       	ld.w	lr,--r9
80008006:	17 4a       	ld.w	r10,--r11
80008008:	14 3e       	cp.w	lr,r10
8000800a:	c0 60       	breq	80008016 <__mcmp+0x2a>
8000800c:	f9 bc 03 ff 	movlo	r12,-1
80008010:	f9 bc 02 01 	movhs	r12,1
80008014:	d8 02       	popm	pc
80008016:	10 39       	cp.w	r9,r8
80008018:	fe 9b ff f6 	brhi	80008004 <__mcmp+0x18>
8000801c:	d8 02       	popm	pc
8000801e:	d7 03       	nop

80008020 <_Bfree>:
80008020:	d4 21       	pushm	r4-r7,lr
80008022:	18 97       	mov	r7,r12
80008024:	16 95       	mov	r5,r11
80008026:	78 96       	ld.w	r6,r12[0x24]
80008028:	58 06       	cp.w	r6,0
8000802a:	c0 91       	brne	8000803c <_Bfree+0x1c>
8000802c:	31 0c       	mov	r12,16
8000802e:	fe b0 fd 15 	rcall	80007a58 <malloc>
80008032:	99 36       	st.w	r12[0xc],r6
80008034:	8f 9c       	st.w	r7[0x24],r12
80008036:	99 16       	st.w	r12[0x4],r6
80008038:	99 26       	st.w	r12[0x8],r6
8000803a:	99 06       	st.w	r12[0x0],r6
8000803c:	58 05       	cp.w	r5,0
8000803e:	c0 90       	breq	80008050 <_Bfree+0x30>
80008040:	6a 19       	ld.w	r9,r5[0x4]
80008042:	6e 98       	ld.w	r8,r7[0x24]
80008044:	70 38       	ld.w	r8,r8[0xc]
80008046:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000804a:	8b 0a       	st.w	r5[0x0],r10
8000804c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008050:	d8 22       	popm	r4-r7,pc
80008052:	d7 03       	nop

80008054 <_Balloc>:
80008054:	d4 21       	pushm	r4-r7,lr
80008056:	18 97       	mov	r7,r12
80008058:	16 96       	mov	r6,r11
8000805a:	78 95       	ld.w	r5,r12[0x24]
8000805c:	58 05       	cp.w	r5,0
8000805e:	c0 91       	brne	80008070 <_Balloc+0x1c>
80008060:	31 0c       	mov	r12,16
80008062:	fe b0 fc fb 	rcall	80007a58 <malloc>
80008066:	99 35       	st.w	r12[0xc],r5
80008068:	8f 9c       	st.w	r7[0x24],r12
8000806a:	99 15       	st.w	r12[0x4],r5
8000806c:	99 25       	st.w	r12[0x8],r5
8000806e:	99 05       	st.w	r12[0x0],r5
80008070:	6e 95       	ld.w	r5,r7[0x24]
80008072:	6a 38       	ld.w	r8,r5[0xc]
80008074:	58 08       	cp.w	r8,0
80008076:	c0 b1       	brne	8000808c <_Balloc+0x38>
80008078:	31 0a       	mov	r10,16
8000807a:	30 4b       	mov	r11,4
8000807c:	0e 9c       	mov	r12,r7
8000807e:	e0 a0 04 93 	rcall	800089a4 <_calloc_r>
80008082:	8b 3c       	st.w	r5[0xc],r12
80008084:	6e 98       	ld.w	r8,r7[0x24]
80008086:	70 3c       	ld.w	r12,r8[0xc]
80008088:	58 0c       	cp.w	r12,0
8000808a:	c1 b0       	breq	800080c0 <_Balloc+0x6c>
8000808c:	6e 98       	ld.w	r8,r7[0x24]
8000808e:	70 38       	ld.w	r8,r8[0xc]
80008090:	f0 06 00 28 	add	r8,r8,r6<<0x2
80008094:	70 0c       	ld.w	r12,r8[0x0]
80008096:	58 0c       	cp.w	r12,0
80008098:	c0 40       	breq	800080a0 <_Balloc+0x4c>
8000809a:	78 09       	ld.w	r9,r12[0x0]
8000809c:	91 09       	st.w	r8[0x0],r9
8000809e:	c0 e8       	rjmp	800080ba <_Balloc+0x66>
800080a0:	0e 9c       	mov	r12,r7
800080a2:	30 17       	mov	r7,1
800080a4:	0e 9b       	mov	r11,r7
800080a6:	ee 06 09 47 	lsl	r7,r7,r6
800080aa:	ee ca ff fb 	sub	r10,r7,-5
800080ae:	a3 6a       	lsl	r10,0x2
800080b0:	e0 a0 04 7a 	rcall	800089a4 <_calloc_r>
800080b4:	c0 60       	breq	800080c0 <_Balloc+0x6c>
800080b6:	99 16       	st.w	r12[0x4],r6
800080b8:	99 27       	st.w	r12[0x8],r7
800080ba:	30 08       	mov	r8,0
800080bc:	99 38       	st.w	r12[0xc],r8
800080be:	99 48       	st.w	r12[0x10],r8
800080c0:	d8 22       	popm	r4-r7,pc
800080c2:	d7 03       	nop

800080c4 <__d2b>:
800080c4:	d4 31       	pushm	r0-r7,lr
800080c6:	20 2d       	sub	sp,8
800080c8:	16 93       	mov	r3,r11
800080ca:	12 96       	mov	r6,r9
800080cc:	10 95       	mov	r5,r8
800080ce:	14 92       	mov	r2,r10
800080d0:	30 1b       	mov	r11,1
800080d2:	cc 1f       	rcall	80008054 <_Balloc>
800080d4:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800080d8:	50 09       	stdsp	sp[0x0],r9
800080da:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800080de:	b5 a9       	sbr	r9,0x14
800080e0:	f0 01 16 14 	lsr	r1,r8,0x14
800080e4:	fb f9 1a 00 	st.wne	sp[0x0],r9
800080e8:	18 94       	mov	r4,r12
800080ea:	58 02       	cp.w	r2,0
800080ec:	c1 d0       	breq	80008126 <__d2b+0x62>
800080ee:	fa cc ff f8 	sub	r12,sp,-8
800080f2:	18 d2       	st.w	--r12,r2
800080f4:	c3 5f       	rcall	80007f5e <__lo0bits>
800080f6:	40 18       	lddsp	r8,sp[0x4]
800080f8:	c0 d0       	breq	80008112 <__d2b+0x4e>
800080fa:	40 09       	lddsp	r9,sp[0x0]
800080fc:	f8 0a 11 20 	rsub	r10,r12,32
80008100:	f2 0a 09 4a 	lsl	r10,r9,r10
80008104:	f5 e8 10 08 	or	r8,r10,r8
80008108:	89 58       	st.w	r4[0x14],r8
8000810a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000810e:	50 09       	stdsp	sp[0x0],r9
80008110:	c0 28       	rjmp	80008114 <__d2b+0x50>
80008112:	89 58       	st.w	r4[0x14],r8
80008114:	40 08       	lddsp	r8,sp[0x0]
80008116:	58 08       	cp.w	r8,0
80008118:	f9 b3 01 02 	movne	r3,2
8000811c:	f9 b3 00 01 	moveq	r3,1
80008120:	89 68       	st.w	r4[0x18],r8
80008122:	89 43       	st.w	r4[0x10],r3
80008124:	c0 88       	rjmp	80008134 <__d2b+0x70>
80008126:	1a 9c       	mov	r12,sp
80008128:	c1 bf       	rcall	80007f5e <__lo0bits>
8000812a:	30 13       	mov	r3,1
8000812c:	40 08       	lddsp	r8,sp[0x0]
8000812e:	2e 0c       	sub	r12,-32
80008130:	89 43       	st.w	r4[0x10],r3
80008132:	89 58       	st.w	r4[0x14],r8
80008134:	58 01       	cp.w	r1,0
80008136:	c0 90       	breq	80008148 <__d2b+0x84>
80008138:	e2 c1 04 33 	sub	r1,r1,1075
8000813c:	18 01       	add	r1,r12
8000813e:	8d 01       	st.w	r6[0x0],r1
80008140:	f8 0c 11 35 	rsub	r12,r12,53
80008144:	8b 0c       	st.w	r5[0x0],r12
80008146:	c0 c8       	rjmp	8000815e <__d2b+0x9a>
80008148:	e6 c8 ff fc 	sub	r8,r3,-4
8000814c:	f8 cc 04 32 	sub	r12,r12,1074
80008150:	a5 73       	lsl	r3,0x5
80008152:	8d 0c       	st.w	r6[0x0],r12
80008154:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008158:	cd 3e       	rcall	80007efe <__hi0bits>
8000815a:	18 13       	sub	r3,r12
8000815c:	8b 03       	st.w	r5[0x0],r3
8000815e:	08 9c       	mov	r12,r4
80008160:	2f ed       	sub	sp,-8
80008162:	d8 32       	popm	r0-r7,pc

80008164 <__mdiff>:
80008164:	d4 31       	pushm	r0-r7,lr
80008166:	74 48       	ld.w	r8,r10[0x10]
80008168:	76 45       	ld.w	r5,r11[0x10]
8000816a:	16 97       	mov	r7,r11
8000816c:	14 96       	mov	r6,r10
8000816e:	10 15       	sub	r5,r8
80008170:	c1 31       	brne	80008196 <__mdiff+0x32>
80008172:	2f b8       	sub	r8,-5
80008174:	ee ce ff ec 	sub	lr,r7,-20
80008178:	a3 68       	lsl	r8,0x2
8000817a:	f4 08 00 0b 	add	r11,r10,r8
8000817e:	ee 08 00 08 	add	r8,r7,r8
80008182:	11 4a       	ld.w	r10,--r8
80008184:	17 49       	ld.w	r9,--r11
80008186:	12 3a       	cp.w	r10,r9
80008188:	c0 30       	breq	8000818e <__mdiff+0x2a>
8000818a:	c0 e2       	brcc	800081a6 <__mdiff+0x42>
8000818c:	c0 78       	rjmp	8000819a <__mdiff+0x36>
8000818e:	1c 38       	cp.w	r8,lr
80008190:	fe 9b ff f9 	brhi	80008182 <__mdiff+0x1e>
80008194:	c4 98       	rjmp	80008226 <__mdiff+0xc2>
80008196:	58 05       	cp.w	r5,0
80008198:	c0 64       	brge	800081a4 <__mdiff+0x40>
8000819a:	0e 98       	mov	r8,r7
8000819c:	30 15       	mov	r5,1
8000819e:	0c 97       	mov	r7,r6
800081a0:	10 96       	mov	r6,r8
800081a2:	c0 28       	rjmp	800081a6 <__mdiff+0x42>
800081a4:	30 05       	mov	r5,0
800081a6:	6e 1b       	ld.w	r11,r7[0x4]
800081a8:	c5 6f       	rcall	80008054 <_Balloc>
800081aa:	6e 49       	ld.w	r9,r7[0x10]
800081ac:	6c 44       	ld.w	r4,r6[0x10]
800081ae:	99 35       	st.w	r12[0xc],r5
800081b0:	2f b4       	sub	r4,-5
800081b2:	f2 c5 ff fb 	sub	r5,r9,-5
800081b6:	ec 04 00 24 	add	r4,r6,r4<<0x2
800081ba:	ee 05 00 25 	add	r5,r7,r5<<0x2
800081be:	2e c6       	sub	r6,-20
800081c0:	2e c7       	sub	r7,-20
800081c2:	f8 c8 ff ec 	sub	r8,r12,-20
800081c6:	30 0a       	mov	r10,0
800081c8:	0f 0e       	ld.w	lr,r7++
800081ca:	0d 0b       	ld.w	r11,r6++
800081cc:	fc 02 16 10 	lsr	r2,lr,0x10
800081d0:	f6 03 16 10 	lsr	r3,r11,0x10
800081d4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800081d8:	e4 03 01 03 	sub	r3,r2,r3
800081dc:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800081e0:	fc 0b 01 0b 	sub	r11,lr,r11
800081e4:	f6 0a 00 0a 	add	r10,r11,r10
800081e8:	b0 1a       	st.h	r8[0x2],r10
800081ea:	b1 4a       	asr	r10,0x10
800081ec:	e6 0a 00 0a 	add	r10,r3,r10
800081f0:	b0 0a       	st.h	r8[0x0],r10
800081f2:	2f c8       	sub	r8,-4
800081f4:	b1 4a       	asr	r10,0x10
800081f6:	08 36       	cp.w	r6,r4
800081f8:	ce 83       	brcs	800081c8 <__mdiff+0x64>
800081fa:	c0 d8       	rjmp	80008214 <__mdiff+0xb0>
800081fc:	0f 0b       	ld.w	r11,r7++
800081fe:	f6 0e 16 10 	lsr	lr,r11,0x10
80008202:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008206:	16 0a       	add	r10,r11
80008208:	b0 1a       	st.h	r8[0x2],r10
8000820a:	b1 4a       	asr	r10,0x10
8000820c:	1c 0a       	add	r10,lr
8000820e:	b0 0a       	st.h	r8[0x0],r10
80008210:	2f c8       	sub	r8,-4
80008212:	b1 4a       	asr	r10,0x10
80008214:	0a 37       	cp.w	r7,r5
80008216:	cf 33       	brcs	800081fc <__mdiff+0x98>
80008218:	c0 28       	rjmp	8000821c <__mdiff+0xb8>
8000821a:	20 19       	sub	r9,1
8000821c:	11 4a       	ld.w	r10,--r8
8000821e:	58 0a       	cp.w	r10,0
80008220:	cf d0       	breq	8000821a <__mdiff+0xb6>
80008222:	99 49       	st.w	r12[0x10],r9
80008224:	d8 32       	popm	r0-r7,pc
80008226:	30 0b       	mov	r11,0
80008228:	c1 6f       	rcall	80008054 <_Balloc>
8000822a:	30 18       	mov	r8,1
8000822c:	99 48       	st.w	r12[0x10],r8
8000822e:	30 08       	mov	r8,0
80008230:	99 58       	st.w	r12[0x14],r8
80008232:	d8 32       	popm	r0-r7,pc

80008234 <__lshift>:
80008234:	d4 31       	pushm	r0-r7,lr
80008236:	16 97       	mov	r7,r11
80008238:	76 46       	ld.w	r6,r11[0x10]
8000823a:	f4 02 14 05 	asr	r2,r10,0x5
8000823e:	2f f6       	sub	r6,-1
80008240:	14 93       	mov	r3,r10
80008242:	18 94       	mov	r4,r12
80008244:	04 06       	add	r6,r2
80008246:	76 1b       	ld.w	r11,r11[0x4]
80008248:	6e 28       	ld.w	r8,r7[0x8]
8000824a:	c0 38       	rjmp	80008250 <__lshift+0x1c>
8000824c:	2f fb       	sub	r11,-1
8000824e:	a1 78       	lsl	r8,0x1
80008250:	10 36       	cp.w	r6,r8
80008252:	fe 99 ff fd 	brgt	8000824c <__lshift+0x18>
80008256:	08 9c       	mov	r12,r4
80008258:	cf ee       	rcall	80008054 <_Balloc>
8000825a:	30 09       	mov	r9,0
8000825c:	18 95       	mov	r5,r12
8000825e:	f8 c8 ff ec 	sub	r8,r12,-20
80008262:	12 9a       	mov	r10,r9
80008264:	c0 38       	rjmp	8000826a <__lshift+0x36>
80008266:	10 aa       	st.w	r8++,r10
80008268:	2f f9       	sub	r9,-1
8000826a:	04 39       	cp.w	r9,r2
8000826c:	cf d5       	brlt	80008266 <__lshift+0x32>
8000826e:	6e 4b       	ld.w	r11,r7[0x10]
80008270:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008274:	2f bb       	sub	r11,-5
80008276:	ee c9 ff ec 	sub	r9,r7,-20
8000827a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000827e:	58 03       	cp.w	r3,0
80008280:	c1 30       	breq	800082a6 <__lshift+0x72>
80008282:	e6 0c 11 20 	rsub	r12,r3,32
80008286:	30 0a       	mov	r10,0
80008288:	72 02       	ld.w	r2,r9[0x0]
8000828a:	e4 03 09 42 	lsl	r2,r2,r3
8000828e:	04 4a       	or	r10,r2
80008290:	10 aa       	st.w	r8++,r10
80008292:	13 0a       	ld.w	r10,r9++
80008294:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008298:	16 39       	cp.w	r9,r11
8000829a:	cf 73       	brcs	80008288 <__lshift+0x54>
8000829c:	91 0a       	st.w	r8[0x0],r10
8000829e:	58 0a       	cp.w	r10,0
800082a0:	c0 70       	breq	800082ae <__lshift+0x7a>
800082a2:	2f f6       	sub	r6,-1
800082a4:	c0 58       	rjmp	800082ae <__lshift+0x7a>
800082a6:	13 0a       	ld.w	r10,r9++
800082a8:	10 aa       	st.w	r8++,r10
800082aa:	16 39       	cp.w	r9,r11
800082ac:	cf d3       	brcs	800082a6 <__lshift+0x72>
800082ae:	08 9c       	mov	r12,r4
800082b0:	20 16       	sub	r6,1
800082b2:	0e 9b       	mov	r11,r7
800082b4:	8b 46       	st.w	r5[0x10],r6
800082b6:	cb 5e       	rcall	80008020 <_Bfree>
800082b8:	0a 9c       	mov	r12,r5
800082ba:	d8 32       	popm	r0-r7,pc

800082bc <__multiply>:
800082bc:	d4 31       	pushm	r0-r7,lr
800082be:	20 2d       	sub	sp,8
800082c0:	76 49       	ld.w	r9,r11[0x10]
800082c2:	74 48       	ld.w	r8,r10[0x10]
800082c4:	16 96       	mov	r6,r11
800082c6:	14 95       	mov	r5,r10
800082c8:	10 39       	cp.w	r9,r8
800082ca:	ec 08 17 50 	movlt	r8,r6
800082ce:	ea 06 17 50 	movlt	r6,r5
800082d2:	f0 05 17 50 	movlt	r5,r8
800082d6:	6c 28       	ld.w	r8,r6[0x8]
800082d8:	76 43       	ld.w	r3,r11[0x10]
800082da:	74 42       	ld.w	r2,r10[0x10]
800082dc:	76 1b       	ld.w	r11,r11[0x4]
800082de:	e4 03 00 07 	add	r7,r2,r3
800082e2:	10 37       	cp.w	r7,r8
800082e4:	f7 bb 09 ff 	subgt	r11,-1
800082e8:	cb 6e       	rcall	80008054 <_Balloc>
800082ea:	ee c4 ff fb 	sub	r4,r7,-5
800082ee:	f8 c9 ff ec 	sub	r9,r12,-20
800082f2:	f8 04 00 24 	add	r4,r12,r4<<0x2
800082f6:	30 0a       	mov	r10,0
800082f8:	12 98       	mov	r8,r9
800082fa:	c0 28       	rjmp	800082fe <__multiply+0x42>
800082fc:	10 aa       	st.w	r8++,r10
800082fe:	08 38       	cp.w	r8,r4
80008300:	cf e3       	brcs	800082fc <__multiply+0x40>
80008302:	2f b3       	sub	r3,-5
80008304:	2f b2       	sub	r2,-5
80008306:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000830a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000830e:	ec cb ff ec 	sub	r11,r6,-20
80008312:	50 12       	stdsp	sp[0x4],r2
80008314:	ea ca ff ec 	sub	r10,r5,-20
80008318:	c4 48       	rjmp	800083a0 <__multiply+0xe4>
8000831a:	94 95       	ld.uh	r5,r10[0x2]
8000831c:	58 05       	cp.w	r5,0
8000831e:	c2 00       	breq	8000835e <__multiply+0xa2>
80008320:	12 98       	mov	r8,r9
80008322:	16 96       	mov	r6,r11
80008324:	30 0e       	mov	lr,0
80008326:	50 09       	stdsp	sp[0x0],r9
80008328:	0d 02       	ld.w	r2,r6++
8000832a:	e4 00 16 10 	lsr	r0,r2,0x10
8000832e:	70 01       	ld.w	r1,r8[0x0]
80008330:	70 09       	ld.w	r9,r8[0x0]
80008332:	b1 81       	lsr	r1,0x10
80008334:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008338:	e0 05 03 41 	mac	r1,r0,r5
8000833c:	ab 32       	mul	r2,r5
8000833e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008342:	00 02       	add	r2,r0
80008344:	e4 0e 00 0e 	add	lr,r2,lr
80008348:	b0 1e       	st.h	r8[0x2],lr
8000834a:	b1 8e       	lsr	lr,0x10
8000834c:	1c 01       	add	r1,lr
8000834e:	b0 01       	st.h	r8[0x0],r1
80008350:	e2 0e 16 10 	lsr	lr,r1,0x10
80008354:	2f c8       	sub	r8,-4
80008356:	06 36       	cp.w	r6,r3
80008358:	ce 83       	brcs	80008328 <__multiply+0x6c>
8000835a:	40 09       	lddsp	r9,sp[0x0]
8000835c:	91 0e       	st.w	r8[0x0],lr
8000835e:	94 86       	ld.uh	r6,r10[0x0]
80008360:	58 06       	cp.w	r6,0
80008362:	c1 d0       	breq	8000839c <__multiply+0xe0>
80008364:	72 02       	ld.w	r2,r9[0x0]
80008366:	12 98       	mov	r8,r9
80008368:	16 9e       	mov	lr,r11
8000836a:	30 05       	mov	r5,0
8000836c:	b0 12       	st.h	r8[0x2],r2
8000836e:	1d 01       	ld.w	r1,lr++
80008370:	90 82       	ld.uh	r2,r8[0x0]
80008372:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80008376:	ad 30       	mul	r0,r6
80008378:	e0 02 00 02 	add	r2,r0,r2
8000837c:	e4 05 00 05 	add	r5,r2,r5
80008380:	b0 05       	st.h	r8[0x0],r5
80008382:	b1 85       	lsr	r5,0x10
80008384:	b1 81       	lsr	r1,0x10
80008386:	2f c8       	sub	r8,-4
80008388:	ad 31       	mul	r1,r6
8000838a:	90 92       	ld.uh	r2,r8[0x2]
8000838c:	e2 02 00 02 	add	r2,r1,r2
80008390:	0a 02       	add	r2,r5
80008392:	e4 05 16 10 	lsr	r5,r2,0x10
80008396:	06 3e       	cp.w	lr,r3
80008398:	ce a3       	brcs	8000836c <__multiply+0xb0>
8000839a:	91 02       	st.w	r8[0x0],r2
8000839c:	2f ca       	sub	r10,-4
8000839e:	2f c9       	sub	r9,-4
800083a0:	40 18       	lddsp	r8,sp[0x4]
800083a2:	10 3a       	cp.w	r10,r8
800083a4:	cb b3       	brcs	8000831a <__multiply+0x5e>
800083a6:	c0 28       	rjmp	800083aa <__multiply+0xee>
800083a8:	20 17       	sub	r7,1
800083aa:	58 07       	cp.w	r7,0
800083ac:	e0 8a 00 05 	brle	800083b6 <__multiply+0xfa>
800083b0:	09 48       	ld.w	r8,--r4
800083b2:	58 08       	cp.w	r8,0
800083b4:	cf a0       	breq	800083a8 <__multiply+0xec>
800083b6:	99 47       	st.w	r12[0x10],r7
800083b8:	2f ed       	sub	sp,-8
800083ba:	d8 32       	popm	r0-r7,pc

800083bc <__i2b>:
800083bc:	d4 21       	pushm	r4-r7,lr
800083be:	16 97       	mov	r7,r11
800083c0:	30 1b       	mov	r11,1
800083c2:	c4 9e       	rcall	80008054 <_Balloc>
800083c4:	30 19       	mov	r9,1
800083c6:	99 57       	st.w	r12[0x14],r7
800083c8:	99 49       	st.w	r12[0x10],r9
800083ca:	d8 22       	popm	r4-r7,pc

800083cc <__multadd>:
800083cc:	d4 31       	pushm	r0-r7,lr
800083ce:	30 08       	mov	r8,0
800083d0:	12 95       	mov	r5,r9
800083d2:	16 97       	mov	r7,r11
800083d4:	18 96       	mov	r6,r12
800083d6:	76 44       	ld.w	r4,r11[0x10]
800083d8:	f6 c9 ff ec 	sub	r9,r11,-20
800083dc:	72 0b       	ld.w	r11,r9[0x0]
800083de:	f6 0c 16 10 	lsr	r12,r11,0x10
800083e2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800083e6:	f4 0c 02 4c 	mul	r12,r10,r12
800083ea:	f4 0b 03 45 	mac	r5,r10,r11
800083ee:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800083f2:	b1 85       	lsr	r5,0x10
800083f4:	18 05       	add	r5,r12
800083f6:	ea 0c 15 10 	lsl	r12,r5,0x10
800083fa:	f8 0b 00 0b 	add	r11,r12,r11
800083fe:	12 ab       	st.w	r9++,r11
80008400:	2f f8       	sub	r8,-1
80008402:	b1 85       	lsr	r5,0x10
80008404:	08 38       	cp.w	r8,r4
80008406:	ce b5       	brlt	800083dc <__multadd+0x10>
80008408:	58 05       	cp.w	r5,0
8000840a:	c1 c0       	breq	80008442 <__multadd+0x76>
8000840c:	6e 28       	ld.w	r8,r7[0x8]
8000840e:	10 34       	cp.w	r4,r8
80008410:	c1 35       	brlt	80008436 <__multadd+0x6a>
80008412:	6e 1b       	ld.w	r11,r7[0x4]
80008414:	0c 9c       	mov	r12,r6
80008416:	2f fb       	sub	r11,-1
80008418:	c1 ee       	rcall	80008054 <_Balloc>
8000841a:	6e 4a       	ld.w	r10,r7[0x10]
8000841c:	ee cb ff f4 	sub	r11,r7,-12
80008420:	18 93       	mov	r3,r12
80008422:	2f ea       	sub	r10,-2
80008424:	2f 4c       	sub	r12,-12
80008426:	a3 6a       	lsl	r10,0x2
80008428:	fe b0 de 36 	rcall	80004094 <memcpy>
8000842c:	0e 9b       	mov	r11,r7
8000842e:	0c 9c       	mov	r12,r6
80008430:	fe b0 fd f8 	rcall	80008020 <_Bfree>
80008434:	06 97       	mov	r7,r3
80008436:	e8 c8 ff ff 	sub	r8,r4,-1
8000843a:	2f b4       	sub	r4,-5
8000843c:	8f 48       	st.w	r7[0x10],r8
8000843e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008442:	0e 9c       	mov	r12,r7
80008444:	d8 32       	popm	r0-r7,pc
80008446:	d7 03       	nop

80008448 <__pow5mult>:
80008448:	d4 31       	pushm	r0-r7,lr
8000844a:	14 96       	mov	r6,r10
8000844c:	18 97       	mov	r7,r12
8000844e:	16 94       	mov	r4,r11
80008450:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008454:	c0 90       	breq	80008466 <__pow5mult+0x1e>
80008456:	20 18       	sub	r8,1
80008458:	fe c9 e3 f8 	sub	r9,pc,-7176
8000845c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008460:	30 09       	mov	r9,0
80008462:	cb 5f       	rcall	800083cc <__multadd>
80008464:	18 94       	mov	r4,r12
80008466:	a3 46       	asr	r6,0x2
80008468:	c3 40       	breq	800084d0 <__pow5mult+0x88>
8000846a:	6e 95       	ld.w	r5,r7[0x24]
8000846c:	58 05       	cp.w	r5,0
8000846e:	c0 91       	brne	80008480 <__pow5mult+0x38>
80008470:	31 0c       	mov	r12,16
80008472:	fe b0 fa f3 	rcall	80007a58 <malloc>
80008476:	99 35       	st.w	r12[0xc],r5
80008478:	8f 9c       	st.w	r7[0x24],r12
8000847a:	99 15       	st.w	r12[0x4],r5
8000847c:	99 25       	st.w	r12[0x8],r5
8000847e:	99 05       	st.w	r12[0x0],r5
80008480:	6e 93       	ld.w	r3,r7[0x24]
80008482:	66 25       	ld.w	r5,r3[0x8]
80008484:	58 05       	cp.w	r5,0
80008486:	c0 c1       	brne	8000849e <__pow5mult+0x56>
80008488:	e0 6b 02 71 	mov	r11,625
8000848c:	0e 9c       	mov	r12,r7
8000848e:	c9 7f       	rcall	800083bc <__i2b>
80008490:	87 2c       	st.w	r3[0x8],r12
80008492:	30 08       	mov	r8,0
80008494:	18 95       	mov	r5,r12
80008496:	99 08       	st.w	r12[0x0],r8
80008498:	c0 38       	rjmp	8000849e <__pow5mult+0x56>
8000849a:	06 9c       	mov	r12,r3
8000849c:	18 95       	mov	r5,r12
8000849e:	ed b6 00 00 	bld	r6,0x0
800084a2:	c0 b1       	brne	800084b8 <__pow5mult+0x70>
800084a4:	08 9b       	mov	r11,r4
800084a6:	0a 9a       	mov	r10,r5
800084a8:	0e 9c       	mov	r12,r7
800084aa:	c0 9f       	rcall	800082bc <__multiply>
800084ac:	08 9b       	mov	r11,r4
800084ae:	18 93       	mov	r3,r12
800084b0:	0e 9c       	mov	r12,r7
800084b2:	06 94       	mov	r4,r3
800084b4:	fe b0 fd b6 	rcall	80008020 <_Bfree>
800084b8:	a1 56       	asr	r6,0x1
800084ba:	c0 b0       	breq	800084d0 <__pow5mult+0x88>
800084bc:	6a 03       	ld.w	r3,r5[0x0]
800084be:	58 03       	cp.w	r3,0
800084c0:	ce d1       	brne	8000849a <__pow5mult+0x52>
800084c2:	0a 9a       	mov	r10,r5
800084c4:	0a 9b       	mov	r11,r5
800084c6:	0e 9c       	mov	r12,r7
800084c8:	cf ae       	rcall	800082bc <__multiply>
800084ca:	8b 0c       	st.w	r5[0x0],r12
800084cc:	99 03       	st.w	r12[0x0],r3
800084ce:	ce 7b       	rjmp	8000849c <__pow5mult+0x54>
800084d0:	08 9c       	mov	r12,r4
800084d2:	d8 32       	popm	r0-r7,pc

800084d4 <_realloc_r>:
800084d4:	d4 31       	pushm	r0-r7,lr
800084d6:	20 1d       	sub	sp,4
800084d8:	16 94       	mov	r4,r11
800084da:	18 92       	mov	r2,r12
800084dc:	14 9b       	mov	r11,r10
800084de:	58 04       	cp.w	r4,0
800084e0:	c0 51       	brne	800084ea <_realloc_r+0x16>
800084e2:	fe b0 fa c3 	rcall	80007a68 <_malloc_r>
800084e6:	18 95       	mov	r5,r12
800084e8:	c5 39       	rjmp	8000878e <_realloc_r+0x2ba>
800084ea:	50 0a       	stdsp	sp[0x0],r10
800084ec:	fe b0 fd 07 	rcall	80007efa <__malloc_lock>
800084f0:	40 0b       	lddsp	r11,sp[0x0]
800084f2:	f6 c8 ff f5 	sub	r8,r11,-11
800084f6:	e8 c1 00 08 	sub	r1,r4,8
800084fa:	10 96       	mov	r6,r8
800084fc:	62 1c       	ld.w	r12,r1[0x4]
800084fe:	e0 16 ff f8 	andl	r6,0xfff8
80008502:	59 68       	cp.w	r8,22
80008504:	f9 b6 08 10 	movls	r6,16
80008508:	16 36       	cp.w	r6,r11
8000850a:	5f 38       	srlo	r8
8000850c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008510:	c0 50       	breq	8000851a <_realloc_r+0x46>
80008512:	30 c8       	mov	r8,12
80008514:	30 05       	mov	r5,0
80008516:	85 38       	st.w	r2[0xc],r8
80008518:	c3 b9       	rjmp	8000878e <_realloc_r+0x2ba>
8000851a:	18 90       	mov	r0,r12
8000851c:	e0 10 ff fc 	andl	r0,0xfffc
80008520:	0c 30       	cp.w	r0,r6
80008522:	e0 84 01 0b 	brge	80008738 <_realloc_r+0x264>
80008526:	e0 68 01 08 	mov	r8,264
8000852a:	e2 00 00 09 	add	r9,r1,r0
8000852e:	70 25       	ld.w	r5,r8[0x8]
80008530:	0a 39       	cp.w	r9,r5
80008532:	c0 90       	breq	80008544 <_realloc_r+0x70>
80008534:	72 1a       	ld.w	r10,r9[0x4]
80008536:	a1 ca       	cbr	r10,0x0
80008538:	f2 0a 00 0a 	add	r10,r9,r10
8000853c:	74 1a       	ld.w	r10,r10[0x4]
8000853e:	ed ba 00 00 	bld	r10,0x0
80008542:	c2 20       	breq	80008586 <_realloc_r+0xb2>
80008544:	72 1a       	ld.w	r10,r9[0x4]
80008546:	e0 1a ff fc 	andl	r10,0xfffc
8000854a:	f4 00 00 03 	add	r3,r10,r0
8000854e:	0a 39       	cp.w	r9,r5
80008550:	c1 31       	brne	80008576 <_realloc_r+0xa2>
80008552:	ec c7 ff f0 	sub	r7,r6,-16
80008556:	0e 33       	cp.w	r3,r7
80008558:	c1 95       	brlt	8000858a <_realloc_r+0xb6>
8000855a:	e2 06 00 09 	add	r9,r1,r6
8000855e:	0c 13       	sub	r3,r6
80008560:	a1 a3       	sbr	r3,0x0
80008562:	93 13       	st.w	r9[0x4],r3
80008564:	91 29       	st.w	r8[0x8],r9
80008566:	04 9c       	mov	r12,r2
80008568:	62 18       	ld.w	r8,r1[0x4]
8000856a:	08 95       	mov	r5,r4
8000856c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008570:	10 46       	or	r6,r8
80008572:	83 16       	st.w	r1[0x4],r6
80008574:	c0 b9       	rjmp	8000878a <_realloc_r+0x2b6>
80008576:	0c 33       	cp.w	r3,r6
80008578:	c0 95       	brlt	8000858a <_realloc_r+0xb6>
8000857a:	72 28       	ld.w	r8,r9[0x8]
8000857c:	02 97       	mov	r7,r1
8000857e:	72 39       	ld.w	r9,r9[0xc]
80008580:	93 28       	st.w	r9[0x8],r8
80008582:	91 39       	st.w	r8[0xc],r9
80008584:	cd c8       	rjmp	8000873c <_realloc_r+0x268>
80008586:	30 0a       	mov	r10,0
80008588:	14 99       	mov	r9,r10
8000858a:	ed bc 00 00 	bld	r12,0x0
8000858e:	e0 80 00 95 	breq	800086b8 <_realloc_r+0x1e4>
80008592:	62 07       	ld.w	r7,r1[0x0]
80008594:	e2 07 01 07 	sub	r7,r1,r7
80008598:	6e 1c       	ld.w	r12,r7[0x4]
8000859a:	e0 1c ff fc 	andl	r12,0xfffc
8000859e:	58 09       	cp.w	r9,0
800085a0:	c5 60       	breq	8000864c <_realloc_r+0x178>
800085a2:	f8 00 00 03 	add	r3,r12,r0
800085a6:	0a 39       	cp.w	r9,r5
800085a8:	c4 81       	brne	80008638 <_realloc_r+0x164>
800085aa:	14 03       	add	r3,r10
800085ac:	ec c9 ff f0 	sub	r9,r6,-16
800085b0:	12 33       	cp.w	r3,r9
800085b2:	c4 d5       	brlt	8000864c <_realloc_r+0x178>
800085b4:	6e 3a       	ld.w	r10,r7[0xc]
800085b6:	6e 29       	ld.w	r9,r7[0x8]
800085b8:	95 29       	st.w	r10[0x8],r9
800085ba:	93 3a       	st.w	r9[0xc],r10
800085bc:	ee c5 ff f8 	sub	r5,r7,-8
800085c0:	e0 ca 00 04 	sub	r10,r0,4
800085c4:	e0 4a 00 24 	cp.w	r10,36
800085c8:	e0 8b 00 25 	brhi	80008612 <_realloc_r+0x13e>
800085cc:	0a 99       	mov	r9,r5
800085ce:	59 3a       	cp.w	r10,19
800085d0:	e0 88 00 1a 	brls	80008604 <_realloc_r+0x130>
800085d4:	09 09       	ld.w	r9,r4++
800085d6:	8b 09       	st.w	r5[0x0],r9
800085d8:	09 09       	ld.w	r9,r4++
800085da:	8f 39       	st.w	r7[0xc],r9
800085dc:	ee c9 ff f0 	sub	r9,r7,-16
800085e0:	59 ba       	cp.w	r10,27
800085e2:	e0 88 00 11 	brls	80008604 <_realloc_r+0x130>
800085e6:	09 0b       	ld.w	r11,r4++
800085e8:	93 0b       	st.w	r9[0x0],r11
800085ea:	09 09       	ld.w	r9,r4++
800085ec:	8f 59       	st.w	r7[0x14],r9
800085ee:	ee c9 ff e8 	sub	r9,r7,-24
800085f2:	e0 4a 00 24 	cp.w	r10,36
800085f6:	c0 71       	brne	80008604 <_realloc_r+0x130>
800085f8:	09 0a       	ld.w	r10,r4++
800085fa:	93 0a       	st.w	r9[0x0],r10
800085fc:	ee c9 ff e0 	sub	r9,r7,-32
80008600:	09 0a       	ld.w	r10,r4++
80008602:	8f 7a       	st.w	r7[0x1c],r10
80008604:	09 0a       	ld.w	r10,r4++
80008606:	12 aa       	st.w	r9++,r10
80008608:	68 0a       	ld.w	r10,r4[0x0]
8000860a:	93 0a       	st.w	r9[0x0],r10
8000860c:	68 1a       	ld.w	r10,r4[0x4]
8000860e:	93 1a       	st.w	r9[0x4],r10
80008610:	c0 78       	rjmp	8000861e <_realloc_r+0x14a>
80008612:	50 08       	stdsp	sp[0x0],r8
80008614:	08 9b       	mov	r11,r4
80008616:	0a 9c       	mov	r12,r5
80008618:	fe b0 fc 4b 	rcall	80007eae <memmove>
8000861c:	40 08       	lddsp	r8,sp[0x0]
8000861e:	ee 06 00 09 	add	r9,r7,r6
80008622:	0c 13       	sub	r3,r6
80008624:	a1 a3       	sbr	r3,0x0
80008626:	93 13       	st.w	r9[0x4],r3
80008628:	91 29       	st.w	r8[0x8],r9
8000862a:	04 9c       	mov	r12,r2
8000862c:	6e 18       	ld.w	r8,r7[0x4]
8000862e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008632:	10 46       	or	r6,r8
80008634:	8f 16       	st.w	r7[0x4],r6
80008636:	ca a8       	rjmp	8000878a <_realloc_r+0x2b6>
80008638:	14 03       	add	r3,r10
8000863a:	0c 33       	cp.w	r3,r6
8000863c:	c0 85       	brlt	8000864c <_realloc_r+0x178>
8000863e:	72 28       	ld.w	r8,r9[0x8]
80008640:	72 39       	ld.w	r9,r9[0xc]
80008642:	93 28       	st.w	r9[0x8],r8
80008644:	91 39       	st.w	r8[0xc],r9
80008646:	6e 28       	ld.w	r8,r7[0x8]
80008648:	6e 39       	ld.w	r9,r7[0xc]
8000864a:	c0 78       	rjmp	80008658 <_realloc_r+0x184>
8000864c:	f8 00 00 03 	add	r3,r12,r0
80008650:	0c 33       	cp.w	r3,r6
80008652:	c3 35       	brlt	800086b8 <_realloc_r+0x1e4>
80008654:	6e 39       	ld.w	r9,r7[0xc]
80008656:	6e 28       	ld.w	r8,r7[0x8]
80008658:	93 28       	st.w	r9[0x8],r8
8000865a:	91 39       	st.w	r8[0xc],r9
8000865c:	e0 ca 00 04 	sub	r10,r0,4
80008660:	ee cc ff f8 	sub	r12,r7,-8
80008664:	e0 4a 00 24 	cp.w	r10,36
80008668:	e0 8b 00 24 	brhi	800086b0 <_realloc_r+0x1dc>
8000866c:	59 3a       	cp.w	r10,19
8000866e:	e0 88 00 1a 	brls	800086a2 <_realloc_r+0x1ce>
80008672:	09 08       	ld.w	r8,r4++
80008674:	99 08       	st.w	r12[0x0],r8
80008676:	09 08       	ld.w	r8,r4++
80008678:	8f 38       	st.w	r7[0xc],r8
8000867a:	ee cc ff f0 	sub	r12,r7,-16
8000867e:	59 ba       	cp.w	r10,27
80008680:	e0 88 00 11 	brls	800086a2 <_realloc_r+0x1ce>
80008684:	09 08       	ld.w	r8,r4++
80008686:	99 08       	st.w	r12[0x0],r8
80008688:	09 08       	ld.w	r8,r4++
8000868a:	8f 58       	st.w	r7[0x14],r8
8000868c:	ee cc ff e8 	sub	r12,r7,-24
80008690:	e0 4a 00 24 	cp.w	r10,36
80008694:	c0 71       	brne	800086a2 <_realloc_r+0x1ce>
80008696:	09 08       	ld.w	r8,r4++
80008698:	99 08       	st.w	r12[0x0],r8
8000869a:	ee cc ff e0 	sub	r12,r7,-32
8000869e:	09 08       	ld.w	r8,r4++
800086a0:	8f 78       	st.w	r7[0x1c],r8
800086a2:	09 08       	ld.w	r8,r4++
800086a4:	18 a8       	st.w	r12++,r8
800086a6:	68 08       	ld.w	r8,r4[0x0]
800086a8:	99 08       	st.w	r12[0x0],r8
800086aa:	68 18       	ld.w	r8,r4[0x4]
800086ac:	99 18       	st.w	r12[0x4],r8
800086ae:	c4 78       	rjmp	8000873c <_realloc_r+0x268>
800086b0:	08 9b       	mov	r11,r4
800086b2:	fe b0 fb fe 	rcall	80007eae <memmove>
800086b6:	c4 38       	rjmp	8000873c <_realloc_r+0x268>
800086b8:	04 9c       	mov	r12,r2
800086ba:	fe b0 f9 d7 	rcall	80007a68 <_malloc_r>
800086be:	18 95       	mov	r5,r12
800086c0:	c3 a0       	breq	80008734 <_realloc_r+0x260>
800086c2:	62 18       	ld.w	r8,r1[0x4]
800086c4:	f8 c9 00 08 	sub	r9,r12,8
800086c8:	a1 c8       	cbr	r8,0x0
800086ca:	e2 08 00 08 	add	r8,r1,r8
800086ce:	10 39       	cp.w	r9,r8
800086d0:	c0 71       	brne	800086de <_realloc_r+0x20a>
800086d2:	72 13       	ld.w	r3,r9[0x4]
800086d4:	02 97       	mov	r7,r1
800086d6:	e0 13 ff fc 	andl	r3,0xfffc
800086da:	00 03       	add	r3,r0
800086dc:	c3 08       	rjmp	8000873c <_realloc_r+0x268>
800086de:	e0 ca 00 04 	sub	r10,r0,4
800086e2:	e0 4a 00 24 	cp.w	r10,36
800086e6:	e0 8b 00 20 	brhi	80008726 <_realloc_r+0x252>
800086ea:	08 99       	mov	r9,r4
800086ec:	18 98       	mov	r8,r12
800086ee:	59 3a       	cp.w	r10,19
800086f0:	e0 88 00 14 	brls	80008718 <_realloc_r+0x244>
800086f4:	13 0b       	ld.w	r11,r9++
800086f6:	10 ab       	st.w	r8++,r11
800086f8:	13 0b       	ld.w	r11,r9++
800086fa:	10 ab       	st.w	r8++,r11
800086fc:	59 ba       	cp.w	r10,27
800086fe:	e0 88 00 0d 	brls	80008718 <_realloc_r+0x244>
80008702:	13 0b       	ld.w	r11,r9++
80008704:	10 ab       	st.w	r8++,r11
80008706:	13 0b       	ld.w	r11,r9++
80008708:	10 ab       	st.w	r8++,r11
8000870a:	e0 4a 00 24 	cp.w	r10,36
8000870e:	c0 51       	brne	80008718 <_realloc_r+0x244>
80008710:	13 0a       	ld.w	r10,r9++
80008712:	10 aa       	st.w	r8++,r10
80008714:	13 0a       	ld.w	r10,r9++
80008716:	10 aa       	st.w	r8++,r10
80008718:	13 0a       	ld.w	r10,r9++
8000871a:	10 aa       	st.w	r8++,r10
8000871c:	72 0a       	ld.w	r10,r9[0x0]
8000871e:	91 0a       	st.w	r8[0x0],r10
80008720:	72 19       	ld.w	r9,r9[0x4]
80008722:	91 19       	st.w	r8[0x4],r9
80008724:	c0 48       	rjmp	8000872c <_realloc_r+0x258>
80008726:	08 9b       	mov	r11,r4
80008728:	fe b0 fb c3 	rcall	80007eae <memmove>
8000872c:	08 9b       	mov	r11,r4
8000872e:	04 9c       	mov	r12,r2
80008730:	fe b0 f6 f6 	rcall	8000751c <_free_r>
80008734:	04 9c       	mov	r12,r2
80008736:	c2 a8       	rjmp	8000878a <_realloc_r+0x2b6>
80008738:	00 93       	mov	r3,r0
8000873a:	02 97       	mov	r7,r1
8000873c:	e6 06 01 09 	sub	r9,r3,r6
80008740:	6e 18       	ld.w	r8,r7[0x4]
80008742:	58 f9       	cp.w	r9,15
80008744:	e0 88 00 16 	brls	80008770 <_realloc_r+0x29c>
80008748:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000874c:	ed e8 10 08 	or	r8,r6,r8
80008750:	8f 18       	st.w	r7[0x4],r8
80008752:	12 98       	mov	r8,r9
80008754:	a1 a8       	sbr	r8,0x0
80008756:	ee 06 00 0b 	add	r11,r7,r6
8000875a:	f6 09 00 09 	add	r9,r11,r9
8000875e:	97 18       	st.w	r11[0x4],r8
80008760:	72 18       	ld.w	r8,r9[0x4]
80008762:	a1 a8       	sbr	r8,0x0
80008764:	2f 8b       	sub	r11,-8
80008766:	93 18       	st.w	r9[0x4],r8
80008768:	04 9c       	mov	r12,r2
8000876a:	fe b0 f6 d9 	rcall	8000751c <_free_r>
8000876e:	c0 b8       	rjmp	80008784 <_realloc_r+0x2b0>
80008770:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008774:	e7 e8 10 08 	or	r8,r3,r8
80008778:	8f 18       	st.w	r7[0x4],r8
8000877a:	ee 03 00 03 	add	r3,r7,r3
8000877e:	66 18       	ld.w	r8,r3[0x4]
80008780:	a1 a8       	sbr	r8,0x0
80008782:	87 18       	st.w	r3[0x4],r8
80008784:	04 9c       	mov	r12,r2
80008786:	ee c5 ff f8 	sub	r5,r7,-8
8000878a:	fe b0 fb b9 	rcall	80007efc <__malloc_unlock>
8000878e:	0a 9c       	mov	r12,r5
80008790:	2f fd       	sub	sp,-4
80008792:	d8 32       	popm	r0-r7,pc

80008794 <__isinfd>:
80008794:	14 98       	mov	r8,r10
80008796:	fc 19 7f f0 	movh	r9,0x7ff0
8000879a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000879e:	f0 0b 11 00 	rsub	r11,r8,0
800087a2:	f7 e8 10 08 	or	r8,r11,r8
800087a6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800087aa:	f2 08 01 08 	sub	r8,r9,r8
800087ae:	f0 0c 11 00 	rsub	r12,r8,0
800087b2:	f9 e8 10 08 	or	r8,r12,r8
800087b6:	f0 0c 14 1f 	asr	r12,r8,0x1f
800087ba:	2f fc       	sub	r12,-1
800087bc:	5e fc       	retal	r12

800087be <__isnand>:
800087be:	14 98       	mov	r8,r10
800087c0:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800087c4:	f0 0c 11 00 	rsub	r12,r8,0
800087c8:	10 4c       	or	r12,r8
800087ca:	fc 18 7f f0 	movh	r8,0x7ff0
800087ce:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800087d2:	f0 0c 01 0c 	sub	r12,r8,r12
800087d6:	bf 9c       	lsr	r12,0x1f
800087d8:	5e fc       	retal	r12
800087da:	d7 03       	nop

800087dc <_sbrk_r>:
800087dc:	d4 21       	pushm	r4-r7,lr
800087de:	30 08       	mov	r8,0
800087e0:	18 97       	mov	r7,r12
800087e2:	e0 66 08 54 	mov	r6,2132
800087e6:	16 9c       	mov	r12,r11
800087e8:	8d 08       	st.w	r6[0x0],r8
800087ea:	ca fc       	rcall	80008948 <_sbrk>
800087ec:	5b fc       	cp.w	r12,-1
800087ee:	c0 51       	brne	800087f8 <_sbrk_r+0x1c>
800087f0:	6c 08       	ld.w	r8,r6[0x0]
800087f2:	58 08       	cp.w	r8,0
800087f4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800087f8:	d8 22       	popm	r4-r7,pc
800087fa:	d7 03       	nop

800087fc <__sclose>:
800087fc:	d4 01       	pushm	lr
800087fe:	96 7b       	ld.sh	r11,r11[0xe]
80008800:	cf ec       	rcall	800089fc <_close_r>
80008802:	d8 02       	popm	pc

80008804 <__sseek>:
80008804:	d4 21       	pushm	r4-r7,lr
80008806:	16 97       	mov	r7,r11
80008808:	96 7b       	ld.sh	r11,r11[0xe]
8000880a:	c8 5d       	rcall	80008b14 <_lseek_r>
8000880c:	8e 68       	ld.sh	r8,r7[0xc]
8000880e:	10 99       	mov	r9,r8
80008810:	ad c8       	cbr	r8,0xc
80008812:	ad a9       	sbr	r9,0xc
80008814:	5b fc       	cp.w	r12,-1
80008816:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000881a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000881e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008822:	d8 22       	popm	r4-r7,pc

80008824 <__swrite>:
80008824:	d4 21       	pushm	r4-r7,lr
80008826:	96 68       	ld.sh	r8,r11[0xc]
80008828:	16 97       	mov	r7,r11
8000882a:	14 95       	mov	r5,r10
8000882c:	12 94       	mov	r4,r9
8000882e:	e2 18 01 00 	andl	r8,0x100,COH
80008832:	18 96       	mov	r6,r12
80008834:	c0 50       	breq	8000883e <__swrite+0x1a>
80008836:	30 29       	mov	r9,2
80008838:	30 0a       	mov	r10,0
8000883a:	96 7b       	ld.sh	r11,r11[0xe]
8000883c:	c6 cd       	rcall	80008b14 <_lseek_r>
8000883e:	8e 68       	ld.sh	r8,r7[0xc]
80008840:	ad c8       	cbr	r8,0xc
80008842:	08 99       	mov	r9,r4
80008844:	0a 9a       	mov	r10,r5
80008846:	8e 7b       	ld.sh	r11,r7[0xe]
80008848:	0c 9c       	mov	r12,r6
8000884a:	ae 68       	st.h	r7[0xc],r8
8000884c:	c9 ac       	rcall	80008980 <_write_r>
8000884e:	d8 22       	popm	r4-r7,pc

80008850 <__sread>:
80008850:	d4 21       	pushm	r4-r7,lr
80008852:	16 97       	mov	r7,r11
80008854:	96 7b       	ld.sh	r11,r11[0xe]
80008856:	c7 1d       	rcall	80008b38 <_read_r>
80008858:	c0 65       	brlt	80008864 <__sread+0x14>
8000885a:	6f 58       	ld.w	r8,r7[0x54]
8000885c:	18 08       	add	r8,r12
8000885e:	ef 48 00 54 	st.w	r7[84],r8
80008862:	d8 22       	popm	r4-r7,pc
80008864:	8e 68       	ld.sh	r8,r7[0xc]
80008866:	ad c8       	cbr	r8,0xc
80008868:	ae 68       	st.h	r7[0xc],r8
8000886a:	d8 22       	popm	r4-r7,pc

8000886c <strlen>:
8000886c:	30 09       	mov	r9,0
8000886e:	18 98       	mov	r8,r12
80008870:	c0 28       	rjmp	80008874 <strlen+0x8>
80008872:	2f f8       	sub	r8,-1
80008874:	11 8a       	ld.ub	r10,r8[0x0]
80008876:	f2 0a 18 00 	cp.b	r10,r9
8000887a:	cf c1       	brne	80008872 <strlen+0x6>
8000887c:	f0 0c 01 0c 	sub	r12,r8,r12
80008880:	5e fc       	retal	r12
80008882:	d7 03       	nop

80008884 <_close>:
80008884:	30 28       	mov	r8,2
80008886:	d6 73       	breakpoint
80008888:	3f fc       	mov	r12,-1
8000888a:	35 8b       	mov	r11,88
8000888c:	58 0c       	cp.w	r12,0
8000888e:	5e 4c       	retge	r12
80008890:	e0 6a 08 54 	mov	r10,2132
80008894:	95 0b       	st.w	r10[0x0],r11
80008896:	5e fc       	retal	r12

80008898 <_lseek>:
80008898:	30 58       	mov	r8,5
8000889a:	d6 73       	breakpoint
8000889c:	3f fc       	mov	r12,-1
8000889e:	35 8b       	mov	r11,88
800088a0:	58 0c       	cp.w	r12,0
800088a2:	5e 4c       	retge	r12
800088a4:	e0 6a 08 54 	mov	r10,2132
800088a8:	95 0b       	st.w	r10[0x0],r11
800088aa:	5e fc       	retal	r12

800088ac <_read>:
800088ac:	30 38       	mov	r8,3
800088ae:	d6 73       	breakpoint
800088b0:	3f fc       	mov	r12,-1
800088b2:	35 8b       	mov	r11,88
800088b4:	58 0c       	cp.w	r12,0
800088b6:	5e 4c       	retge	r12
800088b8:	e0 6a 08 54 	mov	r10,2132
800088bc:	95 0b       	st.w	r10[0x0],r11
800088be:	5e fc       	retal	r12

800088c0 <_write>:
800088c0:	30 48       	mov	r8,4
800088c2:	d6 73       	breakpoint
800088c4:	3f fc       	mov	r12,-1
800088c6:	35 8b       	mov	r11,88
800088c8:	58 0c       	cp.w	r12,0
800088ca:	5e 4c       	retge	r12
800088cc:	e0 6a 08 54 	mov	r10,2132
800088d0:	95 0b       	st.w	r10[0x0],r11
800088d2:	5e fc       	retal	r12

800088d4 <isatty>:
800088d4:	30 b8       	mov	r8,11
800088d6:	d6 73       	breakpoint
800088d8:	3f fc       	mov	r12,-1
800088da:	35 8b       	mov	r11,88
800088dc:	58 0c       	cp.w	r12,0
800088de:	5e 4c       	retge	r12
800088e0:	e0 6a 08 54 	mov	r10,2132
800088e4:	95 0b       	st.w	r10[0x0],r11
800088e6:	5e fc       	retal	r12

800088e8 <_fstat_host>:
800088e8:	30 98       	mov	r8,9
800088ea:	d6 73       	breakpoint
800088ec:	3f fc       	mov	r12,-1
800088ee:	35 8b       	mov	r11,88
800088f0:	58 0c       	cp.w	r12,0
800088f2:	5e 4c       	retge	r12
800088f4:	e0 6a 08 54 	mov	r10,2132
800088f8:	95 0b       	st.w	r10[0x0],r11
800088fa:	5e fc       	retal	r12

800088fc <_fstat>:
800088fc:	d4 21       	pushm	r4-r7,lr
800088fe:	21 0d       	sub	sp,64
80008900:	16 97       	mov	r7,r11
80008902:	1a 9b       	mov	r11,sp
80008904:	cf 2f       	rcall	800088e8 <_fstat_host>
80008906:	c0 34       	brge	8000890c <_fstat+0x10>
80008908:	3f fc       	mov	r12,-1
8000890a:	c1 c8       	rjmp	80008942 <_fstat+0x46>
8000890c:	40 08       	lddsp	r8,sp[0x0]
8000890e:	ae 08       	st.h	r7[0x0],r8
80008910:	40 18       	lddsp	r8,sp[0x4]
80008912:	ae 18       	st.h	r7[0x2],r8
80008914:	40 28       	lddsp	r8,sp[0x8]
80008916:	8f 18       	st.w	r7[0x4],r8
80008918:	40 38       	lddsp	r8,sp[0xc]
8000891a:	ae 48       	st.h	r7[0x8],r8
8000891c:	40 48       	lddsp	r8,sp[0x10]
8000891e:	ae 58       	st.h	r7[0xa],r8
80008920:	40 58       	lddsp	r8,sp[0x14]
80008922:	ae 68       	st.h	r7[0xc],r8
80008924:	40 68       	lddsp	r8,sp[0x18]
80008926:	ae 78       	st.h	r7[0xe],r8
80008928:	40 88       	lddsp	r8,sp[0x20]
8000892a:	8f 48       	st.w	r7[0x10],r8
8000892c:	40 a8       	lddsp	r8,sp[0x28]
8000892e:	8f b8       	st.w	r7[0x2c],r8
80008930:	40 c8       	lddsp	r8,sp[0x30]
80008932:	8f c8       	st.w	r7[0x30],r8
80008934:	40 d8       	lddsp	r8,sp[0x34]
80008936:	8f 58       	st.w	r7[0x14],r8
80008938:	40 e8       	lddsp	r8,sp[0x38]
8000893a:	30 0c       	mov	r12,0
8000893c:	8f 78       	st.w	r7[0x1c],r8
8000893e:	40 f8       	lddsp	r8,sp[0x3c]
80008940:	8f 98       	st.w	r7[0x24],r8
80008942:	2f 0d       	sub	sp,-64
80008944:	d8 22       	popm	r4-r7,pc
80008946:	d7 03       	nop

80008948 <_sbrk>:
80008948:	d4 01       	pushm	lr
8000894a:	e0 68 06 7c 	mov	r8,1660
8000894e:	70 09       	ld.w	r9,r8[0x0]
80008950:	58 09       	cp.w	r9,0
80008952:	c0 41       	brne	8000895a <_sbrk+0x12>
80008954:	e0 69 08 58 	mov	r9,2136
80008958:	91 09       	st.w	r8[0x0],r9
8000895a:	e0 69 06 7c 	mov	r9,1660
8000895e:	e0 6a f0 00 	mov	r10,61440
80008962:	72 08       	ld.w	r8,r9[0x0]
80008964:	f0 0c 00 0c 	add	r12,r8,r12
80008968:	14 3c       	cp.w	r12,r10
8000896a:	e0 8b 00 04 	brhi	80008972 <_sbrk+0x2a>
8000896e:	93 0c       	st.w	r9[0x0],r12
80008970:	c0 58       	rjmp	8000897a <_sbrk+0x32>
80008972:	c5 5c       	rcall	80008a1c <__errno>
80008974:	30 c8       	mov	r8,12
80008976:	99 08       	st.w	r12[0x0],r8
80008978:	3f f8       	mov	r8,-1
8000897a:	10 9c       	mov	r12,r8
8000897c:	d8 02       	popm	pc
8000897e:	d7 03       	nop

80008980 <_write_r>:
80008980:	d4 21       	pushm	r4-r7,lr
80008982:	16 98       	mov	r8,r11
80008984:	18 97       	mov	r7,r12
80008986:	10 9c       	mov	r12,r8
80008988:	30 08       	mov	r8,0
8000898a:	14 9b       	mov	r11,r10
8000898c:	e0 66 08 54 	mov	r6,2132
80008990:	12 9a       	mov	r10,r9
80008992:	8d 08       	st.w	r6[0x0],r8
80008994:	c9 6f       	rcall	800088c0 <_write>
80008996:	5b fc       	cp.w	r12,-1
80008998:	c0 51       	brne	800089a2 <_write_r+0x22>
8000899a:	6c 08       	ld.w	r8,r6[0x0]
8000899c:	58 08       	cp.w	r8,0
8000899e:	ef f8 1a 03 	st.wne	r7[0xc],r8
800089a2:	d8 22       	popm	r4-r7,pc

800089a4 <_calloc_r>:
800089a4:	d4 21       	pushm	r4-r7,lr
800089a6:	f4 0b 02 4b 	mul	r11,r10,r11
800089aa:	fe b0 f8 5f 	rcall	80007a68 <_malloc_r>
800089ae:	18 97       	mov	r7,r12
800089b0:	c2 30       	breq	800089f6 <_calloc_r+0x52>
800089b2:	f8 fa ff fc 	ld.w	r10,r12[-4]
800089b6:	e0 1a ff fc 	andl	r10,0xfffc
800089ba:	20 4a       	sub	r10,4
800089bc:	e0 4a 00 24 	cp.w	r10,36
800089c0:	e0 8b 00 18 	brhi	800089f0 <_calloc_r+0x4c>
800089c4:	18 98       	mov	r8,r12
800089c6:	59 3a       	cp.w	r10,19
800089c8:	e0 88 00 0f 	brls	800089e6 <_calloc_r+0x42>
800089cc:	30 09       	mov	r9,0
800089ce:	10 a9       	st.w	r8++,r9
800089d0:	10 a9       	st.w	r8++,r9
800089d2:	59 ba       	cp.w	r10,27
800089d4:	e0 88 00 09 	brls	800089e6 <_calloc_r+0x42>
800089d8:	10 a9       	st.w	r8++,r9
800089da:	10 a9       	st.w	r8++,r9
800089dc:	e0 4a 00 24 	cp.w	r10,36
800089e0:	c0 31       	brne	800089e6 <_calloc_r+0x42>
800089e2:	10 a9       	st.w	r8++,r9
800089e4:	10 a9       	st.w	r8++,r9
800089e6:	30 09       	mov	r9,0
800089e8:	10 a9       	st.w	r8++,r9
800089ea:	91 19       	st.w	r8[0x4],r9
800089ec:	91 09       	st.w	r8[0x0],r9
800089ee:	c0 48       	rjmp	800089f6 <_calloc_r+0x52>
800089f0:	30 0b       	mov	r11,0
800089f2:	fe b0 fa 7d 	rcall	80007eec <memset>
800089f6:	0e 9c       	mov	r12,r7
800089f8:	d8 22       	popm	r4-r7,pc
800089fa:	d7 03       	nop

800089fc <_close_r>:
800089fc:	d4 21       	pushm	r4-r7,lr
800089fe:	30 08       	mov	r8,0
80008a00:	18 97       	mov	r7,r12
80008a02:	e0 66 08 54 	mov	r6,2132
80008a06:	16 9c       	mov	r12,r11
80008a08:	8d 08       	st.w	r6[0x0],r8
80008a0a:	c3 df       	rcall	80008884 <_close>
80008a0c:	5b fc       	cp.w	r12,-1
80008a0e:	c0 51       	brne	80008a18 <_close_r+0x1c>
80008a10:	6c 08       	ld.w	r8,r6[0x0]
80008a12:	58 08       	cp.w	r8,0
80008a14:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008a18:	d8 22       	popm	r4-r7,pc
80008a1a:	d7 03       	nop

80008a1c <__errno>:
80008a1c:	e0 68 01 04 	mov	r8,260
80008a20:	70 0c       	ld.w	r12,r8[0x0]
80008a22:	2f 4c       	sub	r12,-12
80008a24:	5e fc       	retal	r12
80008a26:	d7 03       	nop

80008a28 <_fclose_r>:
80008a28:	d4 21       	pushm	r4-r7,lr
80008a2a:	18 96       	mov	r6,r12
80008a2c:	16 97       	mov	r7,r11
80008a2e:	58 0b       	cp.w	r11,0
80008a30:	c0 31       	brne	80008a36 <_fclose_r+0xe>
80008a32:	16 95       	mov	r5,r11
80008a34:	c5 38       	rjmp	80008ada <_fclose_r+0xb2>
80008a36:	fe b0 f4 87 	rcall	80007344 <__sfp_lock_acquire>
80008a3a:	58 06       	cp.w	r6,0
80008a3c:	c0 70       	breq	80008a4a <_fclose_r+0x22>
80008a3e:	6c 68       	ld.w	r8,r6[0x18]
80008a40:	58 08       	cp.w	r8,0
80008a42:	c0 41       	brne	80008a4a <_fclose_r+0x22>
80008a44:	0c 9c       	mov	r12,r6
80008a46:	fe b0 f4 d1 	rcall	800073e8 <__sinit>
80008a4a:	fe c8 ea 8a 	sub	r8,pc,-5494
80008a4e:	10 37       	cp.w	r7,r8
80008a50:	c0 31       	brne	80008a56 <_fclose_r+0x2e>
80008a52:	6c 07       	ld.w	r7,r6[0x0]
80008a54:	c0 c8       	rjmp	80008a6c <_fclose_r+0x44>
80008a56:	fe c8 ea 76 	sub	r8,pc,-5514
80008a5a:	10 37       	cp.w	r7,r8
80008a5c:	c0 31       	brne	80008a62 <_fclose_r+0x3a>
80008a5e:	6c 17       	ld.w	r7,r6[0x4]
80008a60:	c0 68       	rjmp	80008a6c <_fclose_r+0x44>
80008a62:	fe c8 ea 62 	sub	r8,pc,-5534
80008a66:	10 37       	cp.w	r7,r8
80008a68:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008a6c:	8e 69       	ld.sh	r9,r7[0xc]
80008a6e:	30 08       	mov	r8,0
80008a70:	f0 09 19 00 	cp.h	r9,r8
80008a74:	c0 51       	brne	80008a7e <_fclose_r+0x56>
80008a76:	fe b0 f4 68 	rcall	80007346 <__sfp_lock_release>
80008a7a:	30 05       	mov	r5,0
80008a7c:	c2 f8       	rjmp	80008ada <_fclose_r+0xb2>
80008a7e:	0e 9b       	mov	r11,r7
80008a80:	0c 9c       	mov	r12,r6
80008a82:	fe b0 f3 db 	rcall	80007238 <_fflush_r>
80008a86:	6e c8       	ld.w	r8,r7[0x30]
80008a88:	18 95       	mov	r5,r12
80008a8a:	58 08       	cp.w	r8,0
80008a8c:	c0 60       	breq	80008a98 <_fclose_r+0x70>
80008a8e:	6e 8b       	ld.w	r11,r7[0x20]
80008a90:	0c 9c       	mov	r12,r6
80008a92:	5d 18       	icall	r8
80008a94:	f9 b5 05 ff 	movlt	r5,-1
80008a98:	8e 68       	ld.sh	r8,r7[0xc]
80008a9a:	ed b8 00 07 	bld	r8,0x7
80008a9e:	c0 51       	brne	80008aa8 <_fclose_r+0x80>
80008aa0:	6e 4b       	ld.w	r11,r7[0x10]
80008aa2:	0c 9c       	mov	r12,r6
80008aa4:	fe b0 f5 3c 	rcall	8000751c <_free_r>
80008aa8:	6e db       	ld.w	r11,r7[0x34]
80008aaa:	58 0b       	cp.w	r11,0
80008aac:	c0 a0       	breq	80008ac0 <_fclose_r+0x98>
80008aae:	ee c8 ff bc 	sub	r8,r7,-68
80008ab2:	10 3b       	cp.w	r11,r8
80008ab4:	c0 40       	breq	80008abc <_fclose_r+0x94>
80008ab6:	0c 9c       	mov	r12,r6
80008ab8:	fe b0 f5 32 	rcall	8000751c <_free_r>
80008abc:	30 08       	mov	r8,0
80008abe:	8f d8       	st.w	r7[0x34],r8
80008ac0:	6f 2b       	ld.w	r11,r7[0x48]
80008ac2:	58 0b       	cp.w	r11,0
80008ac4:	c0 70       	breq	80008ad2 <_fclose_r+0xaa>
80008ac6:	0c 9c       	mov	r12,r6
80008ac8:	fe b0 f5 2a 	rcall	8000751c <_free_r>
80008acc:	30 08       	mov	r8,0
80008ace:	ef 48 00 48 	st.w	r7[72],r8
80008ad2:	30 08       	mov	r8,0
80008ad4:	ae 68       	st.h	r7[0xc],r8
80008ad6:	fe b0 f4 38 	rcall	80007346 <__sfp_lock_release>
80008ada:	0a 9c       	mov	r12,r5
80008adc:	d8 22       	popm	r4-r7,pc
80008ade:	d7 03       	nop

80008ae0 <fclose>:
80008ae0:	d4 01       	pushm	lr
80008ae2:	e0 68 01 04 	mov	r8,260
80008ae6:	18 9b       	mov	r11,r12
80008ae8:	70 0c       	ld.w	r12,r8[0x0]
80008aea:	c9 ff       	rcall	80008a28 <_fclose_r>
80008aec:	d8 02       	popm	pc
80008aee:	d7 03       	nop

80008af0 <_fstat_r>:
80008af0:	d4 21       	pushm	r4-r7,lr
80008af2:	16 98       	mov	r8,r11
80008af4:	18 97       	mov	r7,r12
80008af6:	10 9c       	mov	r12,r8
80008af8:	30 08       	mov	r8,0
80008afa:	e0 66 08 54 	mov	r6,2132
80008afe:	14 9b       	mov	r11,r10
80008b00:	8d 08       	st.w	r6[0x0],r8
80008b02:	cf de       	rcall	800088fc <_fstat>
80008b04:	5b fc       	cp.w	r12,-1
80008b06:	c0 51       	brne	80008b10 <_fstat_r+0x20>
80008b08:	6c 08       	ld.w	r8,r6[0x0]
80008b0a:	58 08       	cp.w	r8,0
80008b0c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b10:	d8 22       	popm	r4-r7,pc
80008b12:	d7 03       	nop

80008b14 <_lseek_r>:
80008b14:	d4 21       	pushm	r4-r7,lr
80008b16:	16 98       	mov	r8,r11
80008b18:	18 97       	mov	r7,r12
80008b1a:	10 9c       	mov	r12,r8
80008b1c:	30 08       	mov	r8,0
80008b1e:	14 9b       	mov	r11,r10
80008b20:	e0 66 08 54 	mov	r6,2132
80008b24:	12 9a       	mov	r10,r9
80008b26:	8d 08       	st.w	r6[0x0],r8
80008b28:	cb 8e       	rcall	80008898 <_lseek>
80008b2a:	5b fc       	cp.w	r12,-1
80008b2c:	c0 51       	brne	80008b36 <_lseek_r+0x22>
80008b2e:	6c 08       	ld.w	r8,r6[0x0]
80008b30:	58 08       	cp.w	r8,0
80008b32:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b36:	d8 22       	popm	r4-r7,pc

80008b38 <_read_r>:
80008b38:	d4 21       	pushm	r4-r7,lr
80008b3a:	16 98       	mov	r8,r11
80008b3c:	18 97       	mov	r7,r12
80008b3e:	10 9c       	mov	r12,r8
80008b40:	30 08       	mov	r8,0
80008b42:	14 9b       	mov	r11,r10
80008b44:	e0 66 08 54 	mov	r6,2132
80008b48:	12 9a       	mov	r10,r9
80008b4a:	8d 08       	st.w	r6[0x0],r8
80008b4c:	cb 0e       	rcall	800088ac <_read>
80008b4e:	5b fc       	cp.w	r12,-1
80008b50:	c0 51       	brne	80008b5a <_read_r+0x22>
80008b52:	6c 08       	ld.w	r8,r6[0x0]
80008b54:	58 08       	cp.w	r8,0
80008b56:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008b5a:	d8 22       	popm	r4-r7,pc

80008b5c <__avr32_f64_sub_from_add>:
80008b5c:	ee 19 80 00 	eorh	r9,0x8000

80008b60 <__avr32_f64_sub>:
80008b60:	f7 e9 20 0c 	eor	r12,r11,r9
80008b64:	e0 86 00 ca 	brmi	80008cf8 <__avr32_f64_add_from_sub>
80008b68:	eb cd 40 e0 	pushm	r5-r7,lr
80008b6c:	16 9c       	mov	r12,r11
80008b6e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008b72:	bf db       	cbr	r11,0x1f
80008b74:	bf d9       	cbr	r9,0x1f
80008b76:	10 3a       	cp.w	r10,r8
80008b78:	f2 0b 13 00 	cpc	r11,r9
80008b7c:	c0 92       	brcc	80008b8e <__avr32_f64_sub+0x2e>
80008b7e:	16 97       	mov	r7,r11
80008b80:	12 9b       	mov	r11,r9
80008b82:	0e 99       	mov	r9,r7
80008b84:	14 97       	mov	r7,r10
80008b86:	10 9a       	mov	r10,r8
80008b88:	0e 98       	mov	r8,r7
80008b8a:	ee 1c 80 00 	eorh	r12,0x8000
80008b8e:	f6 07 16 14 	lsr	r7,r11,0x14
80008b92:	ab 7b       	lsl	r11,0xb
80008b94:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008b98:	ab 7a       	lsl	r10,0xb
80008b9a:	bf bb       	sbr	r11,0x1f
80008b9c:	f2 06 16 14 	lsr	r6,r9,0x14
80008ba0:	c4 40       	breq	80008c28 <__avr32_f64_sub_opL_subnormal>
80008ba2:	ab 79       	lsl	r9,0xb
80008ba4:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008ba8:	ab 78       	lsl	r8,0xb
80008baa:	bf b9       	sbr	r9,0x1f

80008bac <__avr32_f64_sub_opL_subnormal_done>:
80008bac:	e0 47 07 ff 	cp.w	r7,2047
80008bb0:	c4 f0       	breq	80008c4e <__avr32_f64_sub_opH_nan_or_inf>
80008bb2:	0e 26       	rsub	r6,r7
80008bb4:	c1 20       	breq	80008bd8 <__avr32_f64_sub_shift_done>
80008bb6:	ec 05 11 20 	rsub	r5,r6,32
80008bba:	e0 46 00 20 	cp.w	r6,32
80008bbe:	c7 c2       	brcc	80008cb6 <__avr32_f64_sub_longshift>
80008bc0:	f0 05 09 4e 	lsl	lr,r8,r5
80008bc4:	f2 05 09 45 	lsl	r5,r9,r5
80008bc8:	f0 06 0a 48 	lsr	r8,r8,r6
80008bcc:	f2 06 0a 49 	lsr	r9,r9,r6
80008bd0:	0a 48       	or	r8,r5
80008bd2:	58 0e       	cp.w	lr,0
80008bd4:	5f 1e       	srne	lr
80008bd6:	1c 48       	or	r8,lr

80008bd8 <__avr32_f64_sub_shift_done>:
80008bd8:	10 1a       	sub	r10,r8
80008bda:	f6 09 01 4b 	sbc	r11,r11,r9
80008bde:	f6 06 12 00 	clz	r6,r11
80008be2:	c0 e0       	breq	80008bfe <__avr32_f64_sub_longnormalize_done>
80008be4:	c7 83       	brcs	80008cd4 <__avr32_f64_sub_longnormalize>
80008be6:	ec 0e 11 20 	rsub	lr,r6,32
80008bea:	f6 06 09 4b 	lsl	r11,r11,r6
80008bee:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008bf2:	1c 4b       	or	r11,lr
80008bf4:	f4 06 09 4a 	lsl	r10,r10,r6
80008bf8:	0c 17       	sub	r7,r6
80008bfa:	e0 8a 00 39 	brle	80008c6c <__avr32_f64_sub_subnormal_result>

80008bfe <__avr32_f64_sub_longnormalize_done>:
80008bfe:	f4 09 15 15 	lsl	r9,r10,0x15
80008c02:	ab 9a       	lsr	r10,0xb
80008c04:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008c08:	ab 9b       	lsr	r11,0xb
80008c0a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008c0e:	18 4b       	or	r11,r12

80008c10 <__avr32_f64_sub_round>:
80008c10:	fc 17 80 00 	movh	r7,0x8000
80008c14:	ed ba 00 00 	bld	r10,0x0
80008c18:	f7 b7 01 ff 	subne	r7,-1
80008c1c:	0e 39       	cp.w	r9,r7
80008c1e:	5f 29       	srhs	r9
80008c20:	12 0a       	add	r10,r9
80008c22:	5c 0b       	acr	r11
80008c24:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c28 <__avr32_f64_sub_opL_subnormal>:
80008c28:	ab 79       	lsl	r9,0xb
80008c2a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008c2e:	ab 78       	lsl	r8,0xb
80008c30:	f3 e8 10 0e 	or	lr,r9,r8
80008c34:	f9 b6 01 01 	movne	r6,1
80008c38:	ee 0e 11 00 	rsub	lr,r7,0
80008c3c:	f9 b7 00 01 	moveq	r7,1
80008c40:	ef bb 00 1f 	bst	r11,0x1f
80008c44:	f7 ea 10 0e 	or	lr,r11,r10
80008c48:	f9 b7 00 00 	moveq	r7,0
80008c4c:	cb 0b       	rjmp	80008bac <__avr32_f64_sub_opL_subnormal_done>

80008c4e <__avr32_f64_sub_opH_nan_or_inf>:
80008c4e:	bf db       	cbr	r11,0x1f
80008c50:	f7 ea 10 0e 	or	lr,r11,r10
80008c54:	c0 81       	brne	80008c64 <__avr32_f64_sub_return_nan>
80008c56:	e0 46 07 ff 	cp.w	r6,2047
80008c5a:	c0 50       	breq	80008c64 <__avr32_f64_sub_return_nan>
80008c5c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008c60:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c64 <__avr32_f64_sub_return_nan>:
80008c64:	3f fa       	mov	r10,-1
80008c66:	3f fb       	mov	r11,-1
80008c68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008c6c <__avr32_f64_sub_subnormal_result>:
80008c6c:	5c 37       	neg	r7
80008c6e:	2f f7       	sub	r7,-1
80008c70:	f1 b7 04 c0 	satu	r7,0x6
80008c74:	e0 47 00 20 	cp.w	r7,32
80008c78:	c1 14       	brge	80008c9a <__avr32_f64_sub_subnormal_result+0x2e>
80008c7a:	ee 08 11 20 	rsub	r8,r7,32
80008c7e:	f4 08 09 49 	lsl	r9,r10,r8
80008c82:	5f 16       	srne	r6
80008c84:	f4 07 0a 4a 	lsr	r10,r10,r7
80008c88:	0c 4a       	or	r10,r6
80008c8a:	f6 08 09 49 	lsl	r9,r11,r8
80008c8e:	f5 e9 10 0a 	or	r10,r10,r9
80008c92:	f4 07 0a 4b 	lsr	r11,r10,r7
80008c96:	30 07       	mov	r7,0
80008c98:	cb 3b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008c9a:	ee 08 11 40 	rsub	r8,r7,64
80008c9e:	f6 08 09 49 	lsl	r9,r11,r8
80008ca2:	14 49       	or	r9,r10
80008ca4:	5f 16       	srne	r6
80008ca6:	f6 07 0a 4a 	lsr	r10,r11,r7
80008caa:	0c 4a       	or	r10,r6
80008cac:	30 0b       	mov	r11,0
80008cae:	30 07       	mov	r7,0
80008cb0:	ca 7b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008cb2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008cb6 <__avr32_f64_sub_longshift>:
80008cb6:	f1 b6 04 c0 	satu	r6,0x6
80008cba:	f0 0e 17 00 	moveq	lr,r8
80008cbe:	c0 40       	breq	80008cc6 <__avr32_f64_sub_longshift+0x10>
80008cc0:	f2 05 09 4e 	lsl	lr,r9,r5
80008cc4:	10 4e       	or	lr,r8
80008cc6:	f2 06 0a 48 	lsr	r8,r9,r6
80008cca:	30 09       	mov	r9,0
80008ccc:	58 0e       	cp.w	lr,0
80008cce:	5f 1e       	srne	lr
80008cd0:	1c 48       	or	r8,lr
80008cd2:	c8 3b       	rjmp	80008bd8 <__avr32_f64_sub_shift_done>

80008cd4 <__avr32_f64_sub_longnormalize>:
80008cd4:	f4 06 12 00 	clz	r6,r10
80008cd8:	f9 b7 03 00 	movlo	r7,0
80008cdc:	f9 b6 03 00 	movlo	r6,0
80008ce0:	f9 bc 03 00 	movlo	r12,0
80008ce4:	f7 b6 02 e0 	subhs	r6,-32
80008ce8:	f4 06 09 4b 	lsl	r11,r10,r6
80008cec:	30 0a       	mov	r10,0
80008cee:	0c 17       	sub	r7,r6
80008cf0:	fe 9a ff be 	brle	80008c6c <__avr32_f64_sub_subnormal_result>
80008cf4:	c8 5b       	rjmp	80008bfe <__avr32_f64_sub_longnormalize_done>
80008cf6:	d7 03       	nop

80008cf8 <__avr32_f64_add_from_sub>:
80008cf8:	ee 19 80 00 	eorh	r9,0x8000

80008cfc <__avr32_f64_add>:
80008cfc:	f7 e9 20 0c 	eor	r12,r11,r9
80008d00:	fe 96 ff 2e 	brmi	80008b5c <__avr32_f64_sub_from_add>
80008d04:	eb cd 40 e0 	pushm	r5-r7,lr
80008d08:	16 9c       	mov	r12,r11
80008d0a:	e6 1c 80 00 	andh	r12,0x8000,COH
80008d0e:	bf db       	cbr	r11,0x1f
80008d10:	bf d9       	cbr	r9,0x1f
80008d12:	12 3b       	cp.w	r11,r9
80008d14:	c0 72       	brcc	80008d22 <__avr32_f64_add+0x26>
80008d16:	16 97       	mov	r7,r11
80008d18:	12 9b       	mov	r11,r9
80008d1a:	0e 99       	mov	r9,r7
80008d1c:	14 97       	mov	r7,r10
80008d1e:	10 9a       	mov	r10,r8
80008d20:	0e 98       	mov	r8,r7
80008d22:	30 0e       	mov	lr,0
80008d24:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008d28:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008d2c:	b5 ab       	sbr	r11,0x14
80008d2e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008d32:	c6 20       	breq	80008df6 <__avr32_f64_add_op2_subnormal>
80008d34:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008d38:	b5 a9       	sbr	r9,0x14
80008d3a:	e0 47 07 ff 	cp.w	r7,2047
80008d3e:	c2 80       	breq	80008d8e <__avr32_f64_add_opH_nan_or_inf>
80008d40:	0e 26       	rsub	r6,r7
80008d42:	c1 20       	breq	80008d66 <__avr32_f64_add_shift_done>
80008d44:	e0 46 00 36 	cp.w	r6,54
80008d48:	c1 52       	brcc	80008d72 <__avr32_f64_add_res_of_done>
80008d4a:	ec 05 11 20 	rsub	r5,r6,32
80008d4e:	e0 46 00 20 	cp.w	r6,32
80008d52:	c3 52       	brcc	80008dbc <__avr32_f64_add_longshift>
80008d54:	f0 05 09 4e 	lsl	lr,r8,r5
80008d58:	f2 05 09 45 	lsl	r5,r9,r5
80008d5c:	f0 06 0a 48 	lsr	r8,r8,r6
80008d60:	f2 06 0a 49 	lsr	r9,r9,r6
80008d64:	0a 48       	or	r8,r5

80008d66 <__avr32_f64_add_shift_done>:
80008d66:	10 0a       	add	r10,r8
80008d68:	f6 09 00 4b 	adc	r11,r11,r9
80008d6c:	ed bb 00 15 	bld	r11,0x15
80008d70:	c3 40       	breq	80008dd8 <__avr32_f64_add_res_of>

80008d72 <__avr32_f64_add_res_of_done>:
80008d72:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008d76:	18 4b       	or	r11,r12

80008d78 <__avr32_f64_add_round>:
80008d78:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008d7c:	18 4e       	or	lr,r12
80008d7e:	ee 1e 80 00 	eorh	lr,0x8000
80008d82:	f1 be 04 20 	satu	lr,0x1
80008d86:	1c 0a       	add	r10,lr
80008d88:	5c 0b       	acr	r11
80008d8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008d8e <__avr32_f64_add_opH_nan_or_inf>:
80008d8e:	b5 cb       	cbr	r11,0x14
80008d90:	f7 ea 10 0e 	or	lr,r11,r10
80008d94:	c1 01       	brne	80008db4 <__avr32_f64_add_return_nan>
80008d96:	e0 46 07 ff 	cp.w	r6,2047
80008d9a:	c0 30       	breq	80008da0 <__avr32_f64_add_opL_nan_or_inf>
80008d9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008da0 <__avr32_f64_add_opL_nan_or_inf>:
80008da0:	b5 c9       	cbr	r9,0x14
80008da2:	f3 e8 10 0e 	or	lr,r9,r8
80008da6:	c0 71       	brne	80008db4 <__avr32_f64_add_return_nan>
80008da8:	30 0a       	mov	r10,0
80008daa:	fc 1b 7f f0 	movh	r11,0x7ff0
80008dae:	18 4b       	or	r11,r12
80008db0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008db4 <__avr32_f64_add_return_nan>:
80008db4:	3f fa       	mov	r10,-1
80008db6:	3f fb       	mov	r11,-1
80008db8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008dbc <__avr32_f64_add_longshift>:
80008dbc:	f1 b6 04 c0 	satu	r6,0x6
80008dc0:	f0 0e 17 00 	moveq	lr,r8
80008dc4:	c0 60       	breq	80008dd0 <__avr32_f64_add_longshift+0x14>
80008dc6:	f2 05 09 4e 	lsl	lr,r9,r5
80008dca:	58 08       	cp.w	r8,0
80008dcc:	5f 18       	srne	r8
80008dce:	10 4e       	or	lr,r8
80008dd0:	f2 06 0a 48 	lsr	r8,r9,r6
80008dd4:	30 09       	mov	r9,0
80008dd6:	cc 8b       	rjmp	80008d66 <__avr32_f64_add_shift_done>

80008dd8 <__avr32_f64_add_res_of>:
80008dd8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008ddc:	a1 9b       	lsr	r11,0x1
80008dde:	5d 0a       	ror	r10
80008de0:	5d 0e       	ror	lr
80008de2:	2f f7       	sub	r7,-1
80008de4:	e0 47 07 ff 	cp.w	r7,2047
80008de8:	f9 ba 00 00 	moveq	r10,0
80008dec:	f9 bb 00 00 	moveq	r11,0
80008df0:	f9 be 00 00 	moveq	lr,0
80008df4:	cb fb       	rjmp	80008d72 <__avr32_f64_add_res_of_done>

80008df6 <__avr32_f64_add_op2_subnormal>:
80008df6:	30 16       	mov	r6,1
80008df8:	58 07       	cp.w	r7,0
80008dfa:	ca 01       	brne	80008d3a <__avr32_f64_add+0x3e>
80008dfc:	b5 cb       	cbr	r11,0x14
80008dfe:	10 0a       	add	r10,r8
80008e00:	f6 09 00 4b 	adc	r11,r11,r9
80008e04:	18 4b       	or	r11,r12
80008e06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008e0a:	d7 03       	nop

80008e0c <__avr32_f64_to_u32>:
80008e0c:	58 0b       	cp.w	r11,0
80008e0e:	5e 6d       	retmi	0

80008e10 <__avr32_f64_to_s32>:
80008e10:	f6 0c 15 01 	lsl	r12,r11,0x1
80008e14:	b5 9c       	lsr	r12,0x15
80008e16:	e0 2c 03 ff 	sub	r12,1023
80008e1a:	5e 3d       	retlo	0
80008e1c:	f8 0c 11 1f 	rsub	r12,r12,31
80008e20:	16 99       	mov	r9,r11
80008e22:	ab 7b       	lsl	r11,0xb
80008e24:	bf bb       	sbr	r11,0x1f
80008e26:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008e2a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008e2e:	a1 79       	lsl	r9,0x1
80008e30:	5e 2b       	reths	r11
80008e32:	5c 3b       	neg	r11
80008e34:	5e fb       	retal	r11

80008e36 <__avr32_f64_cmp_eq>:
80008e36:	10 3a       	cp.w	r10,r8
80008e38:	f2 0b 13 00 	cpc	r11,r9
80008e3c:	c0 80       	breq	80008e4c <__avr32_f64_cmp_eq+0x16>
80008e3e:	a1 7b       	lsl	r11,0x1
80008e40:	a1 79       	lsl	r9,0x1
80008e42:	14 4b       	or	r11,r10
80008e44:	12 4b       	or	r11,r9
80008e46:	10 4b       	or	r11,r8
80008e48:	5e 0f       	reteq	1
80008e4a:	5e fd       	retal	0
80008e4c:	a1 7b       	lsl	r11,0x1
80008e4e:	fc 1c ff e0 	movh	r12,0xffe0
80008e52:	58 0a       	cp.w	r10,0
80008e54:	f8 0b 13 00 	cpc	r11,r12
80008e58:	5e 8f       	retls	1
80008e5a:	5e fd       	retal	0

80008e5c <__avr32_f64_cmp_ge>:
80008e5c:	1a de       	st.w	--sp,lr
80008e5e:	1a d7       	st.w	--sp,r7
80008e60:	a1 7b       	lsl	r11,0x1
80008e62:	5f 3c       	srlo	r12
80008e64:	a1 79       	lsl	r9,0x1
80008e66:	5f 37       	srlo	r7
80008e68:	5c fc       	rol	r12
80008e6a:	fc 1e ff e0 	movh	lr,0xffe0
80008e6e:	58 0a       	cp.w	r10,0
80008e70:	fc 0b 13 00 	cpc	r11,lr
80008e74:	e0 8b 00 1d 	brhi	80008eae <__avr32_f64_cmp_ge+0x52>
80008e78:	58 08       	cp.w	r8,0
80008e7a:	fc 09 13 00 	cpc	r9,lr
80008e7e:	e0 8b 00 18 	brhi	80008eae <__avr32_f64_cmp_ge+0x52>
80008e82:	58 0b       	cp.w	r11,0
80008e84:	f5 ba 00 00 	subfeq	r10,0
80008e88:	c1 50       	breq	80008eb2 <__avr32_f64_cmp_ge+0x56>
80008e8a:	1b 07       	ld.w	r7,sp++
80008e8c:	1b 0e       	ld.w	lr,sp++
80008e8e:	58 3c       	cp.w	r12,3
80008e90:	c0 a0       	breq	80008ea4 <__avr32_f64_cmp_ge+0x48>
80008e92:	58 1c       	cp.w	r12,1
80008e94:	c0 33       	brcs	80008e9a <__avr32_f64_cmp_ge+0x3e>
80008e96:	5e 0f       	reteq	1
80008e98:	5e 1d       	retne	0
80008e9a:	10 3a       	cp.w	r10,r8
80008e9c:	f2 0b 13 00 	cpc	r11,r9
80008ea0:	5e 2f       	reths	1
80008ea2:	5e 3d       	retlo	0
80008ea4:	14 38       	cp.w	r8,r10
80008ea6:	f6 09 13 00 	cpc	r9,r11
80008eaa:	5e 2f       	reths	1
80008eac:	5e 3d       	retlo	0
80008eae:	1b 07       	ld.w	r7,sp++
80008eb0:	d8 0a       	popm	pc,r12=0
80008eb2:	58 17       	cp.w	r7,1
80008eb4:	5f 0c       	sreq	r12
80008eb6:	58 09       	cp.w	r9,0
80008eb8:	f5 b8 00 00 	subfeq	r8,0
80008ebc:	1b 07       	ld.w	r7,sp++
80008ebe:	1b 0e       	ld.w	lr,sp++
80008ec0:	5e 0f       	reteq	1
80008ec2:	5e fc       	retal	r12

80008ec4 <__avr32_f64_div>:
80008ec4:	eb cd 40 ff 	pushm	r0-r7,lr
80008ec8:	f7 e9 20 0e 	eor	lr,r11,r9
80008ecc:	f6 07 16 14 	lsr	r7,r11,0x14
80008ed0:	a9 7b       	lsl	r11,0x9
80008ed2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008ed6:	a9 7a       	lsl	r10,0x9
80008ed8:	bd bb       	sbr	r11,0x1d
80008eda:	e4 1b 3f ff 	andh	r11,0x3fff
80008ede:	ab d7       	cbr	r7,0xb
80008ee0:	e0 80 00 cc 	breq	80009078 <__avr32_f64_div_round_subnormal+0x54>
80008ee4:	e0 47 07 ff 	cp.w	r7,2047
80008ee8:	e0 84 00 b5 	brge	80009052 <__avr32_f64_div_round_subnormal+0x2e>
80008eec:	f2 06 16 14 	lsr	r6,r9,0x14
80008ef0:	a9 79       	lsl	r9,0x9
80008ef2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008ef6:	a9 78       	lsl	r8,0x9
80008ef8:	bd b9       	sbr	r9,0x1d
80008efa:	e4 19 3f ff 	andh	r9,0x3fff
80008efe:	ab d6       	cbr	r6,0xb
80008f00:	e0 80 00 e2 	breq	800090c4 <__avr32_f64_div_round_subnormal+0xa0>
80008f04:	e0 46 07 ff 	cp.w	r6,2047
80008f08:	e0 84 00 b2 	brge	8000906c <__avr32_f64_div_round_subnormal+0x48>
80008f0c:	0c 17       	sub	r7,r6
80008f0e:	fe 37 fc 01 	sub	r7,-1023
80008f12:	fc 1c 80 00 	movh	r12,0x8000
80008f16:	f8 03 16 01 	lsr	r3,r12,0x1
80008f1a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008f1e:	5c d4       	com	r4
80008f20:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008f24:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f28:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008f2c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008f30:	ea 03 15 02 	lsl	r3,r5,0x2
80008f34:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f38:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008f3c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008f40:	ea 03 15 02 	lsl	r3,r5,0x2
80008f44:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f48:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008f4c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008f50:	ea 03 15 02 	lsl	r3,r5,0x2
80008f54:	e6 08 06 40 	mulu.d	r0,r3,r8
80008f58:	e4 09 07 40 	macu.d	r0,r2,r9
80008f5c:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f60:	02 04       	add	r4,r1
80008f62:	5c 05       	acr	r5
80008f64:	a3 65       	lsl	r5,0x2
80008f66:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008f6a:	a3 64       	lsl	r4,0x2
80008f6c:	5c 34       	neg	r4
80008f6e:	f8 05 01 45 	sbc	r5,r12,r5
80008f72:	e6 04 06 40 	mulu.d	r0,r3,r4
80008f76:	e4 05 07 40 	macu.d	r0,r2,r5
80008f7a:	e6 05 06 44 	mulu.d	r4,r3,r5
80008f7e:	02 04       	add	r4,r1
80008f80:	5c 05       	acr	r5
80008f82:	ea 03 15 02 	lsl	r3,r5,0x2
80008f86:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008f8a:	e8 02 15 02 	lsl	r2,r4,0x2
80008f8e:	e6 08 06 40 	mulu.d	r0,r3,r8
80008f92:	e4 09 07 40 	macu.d	r0,r2,r9
80008f96:	e6 09 06 44 	mulu.d	r4,r3,r9
80008f9a:	02 04       	add	r4,r1
80008f9c:	5c 05       	acr	r5
80008f9e:	a3 65       	lsl	r5,0x2
80008fa0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008fa4:	a3 64       	lsl	r4,0x2
80008fa6:	5c 34       	neg	r4
80008fa8:	f8 05 01 45 	sbc	r5,r12,r5
80008fac:	e6 04 06 40 	mulu.d	r0,r3,r4
80008fb0:	e4 05 07 40 	macu.d	r0,r2,r5
80008fb4:	e6 05 06 44 	mulu.d	r4,r3,r5
80008fb8:	02 04       	add	r4,r1
80008fba:	5c 05       	acr	r5
80008fbc:	ea 03 15 02 	lsl	r3,r5,0x2
80008fc0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008fc4:	e8 02 15 02 	lsl	r2,r4,0x2
80008fc8:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008fcc:	e4 0b 07 40 	macu.d	r0,r2,r11
80008fd0:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008fd4:	02 02       	add	r2,r1
80008fd6:	5c 03       	acr	r3
80008fd8:	ed b3 00 1c 	bld	r3,0x1c
80008fdc:	c0 90       	breq	80008fee <__avr32_f64_div+0x12a>
80008fde:	a1 72       	lsl	r2,0x1
80008fe0:	5c f3       	rol	r3
80008fe2:	20 17       	sub	r7,1
80008fe4:	a3 9a       	lsr	r10,0x3
80008fe6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008fea:	a3 9b       	lsr	r11,0x3
80008fec:	c0 58       	rjmp	80008ff6 <__avr32_f64_div+0x132>
80008fee:	a5 8a       	lsr	r10,0x4
80008ff0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008ff4:	a5 8b       	lsr	r11,0x4
80008ff6:	58 07       	cp.w	r7,0
80008ff8:	e0 8a 00 8b 	brle	8000910e <__avr32_f64_div_res_subnormal>
80008ffc:	e0 12 ff 00 	andl	r2,0xff00
80009000:	e8 12 00 80 	orl	r2,0x80
80009004:	e6 08 06 40 	mulu.d	r0,r3,r8
80009008:	e4 09 07 40 	macu.d	r0,r2,r9
8000900c:	e4 08 06 44 	mulu.d	r4,r2,r8
80009010:	e6 09 06 48 	mulu.d	r8,r3,r9
80009014:	00 05       	add	r5,r0
80009016:	f0 01 00 48 	adc	r8,r8,r1
8000901a:	5c 09       	acr	r9
8000901c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009020:	58 04       	cp.w	r4,0
80009022:	5c 25       	cpc	r5

80009024 <__avr32_f64_div_round_subnormal>:
80009024:	f4 08 13 00 	cpc	r8,r10
80009028:	f6 09 13 00 	cpc	r9,r11
8000902c:	5f 36       	srlo	r6
8000902e:	f8 06 17 00 	moveq	r6,r12
80009032:	e4 0a 16 08 	lsr	r10,r2,0x8
80009036:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000903a:	e6 0b 16 08 	lsr	r11,r3,0x8
8000903e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009042:	ed be 00 1f 	bld	lr,0x1f
80009046:	ef bb 00 1f 	bst	r11,0x1f
8000904a:	0c 0a       	add	r10,r6
8000904c:	5c 0b       	acr	r11
8000904e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009052:	e4 1b 00 0f 	andh	r11,0xf
80009056:	14 4b       	or	r11,r10
80009058:	e0 81 00 a7 	brne	800091a6 <__avr32_f64_div_res_subnormal+0x98>
8000905c:	f2 06 16 14 	lsr	r6,r9,0x14
80009060:	ab d6       	cbr	r6,0xb
80009062:	e0 46 07 ff 	cp.w	r6,2047
80009066:	e0 81 00 a4 	brne	800091ae <__avr32_f64_div_res_subnormal+0xa0>
8000906a:	c9 e8       	rjmp	800091a6 <__avr32_f64_div_res_subnormal+0x98>
8000906c:	e4 19 00 0f 	andh	r9,0xf
80009070:	10 49       	or	r9,r8
80009072:	e0 81 00 9a 	brne	800091a6 <__avr32_f64_div_res_subnormal+0x98>
80009076:	c9 28       	rjmp	8000919a <__avr32_f64_div_res_subnormal+0x8c>
80009078:	a3 7b       	lsl	r11,0x3
8000907a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000907e:	a3 7a       	lsl	r10,0x3
80009080:	f5 eb 10 04 	or	r4,r10,r11
80009084:	e0 80 00 a0 	breq	800091c4 <__avr32_f64_div_op1_zero>
80009088:	f6 04 12 00 	clz	r4,r11
8000908c:	c1 70       	breq	800090ba <__avr32_f64_div_round_subnormal+0x96>
8000908e:	c0 c3       	brcs	800090a6 <__avr32_f64_div_round_subnormal+0x82>
80009090:	e8 05 11 20 	rsub	r5,r4,32
80009094:	f6 04 09 4b 	lsl	r11,r11,r4
80009098:	f4 05 0a 45 	lsr	r5,r10,r5
8000909c:	0a 4b       	or	r11,r5
8000909e:	f4 04 09 4a 	lsl	r10,r10,r4
800090a2:	08 17       	sub	r7,r4
800090a4:	c0 b8       	rjmp	800090ba <__avr32_f64_div_round_subnormal+0x96>
800090a6:	f4 04 12 00 	clz	r4,r10
800090aa:	f9 b4 03 00 	movlo	r4,0
800090ae:	f7 b4 02 e0 	subhs	r4,-32
800090b2:	f4 04 09 4b 	lsl	r11,r10,r4
800090b6:	30 0a       	mov	r10,0
800090b8:	08 17       	sub	r7,r4
800090ba:	a3 8a       	lsr	r10,0x2
800090bc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800090c0:	a3 8b       	lsr	r11,0x2
800090c2:	c1 1b       	rjmp	80008ee4 <__avr32_f64_div+0x20>
800090c4:	a3 79       	lsl	r9,0x3
800090c6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800090ca:	a3 78       	lsl	r8,0x3
800090cc:	f3 e8 10 04 	or	r4,r9,r8
800090d0:	c6 f0       	breq	800091ae <__avr32_f64_div_res_subnormal+0xa0>
800090d2:	f2 04 12 00 	clz	r4,r9
800090d6:	c1 70       	breq	80009104 <__avr32_f64_div_round_subnormal+0xe0>
800090d8:	c0 c3       	brcs	800090f0 <__avr32_f64_div_round_subnormal+0xcc>
800090da:	e8 05 11 20 	rsub	r5,r4,32
800090de:	f2 04 09 49 	lsl	r9,r9,r4
800090e2:	f0 05 0a 45 	lsr	r5,r8,r5
800090e6:	0a 49       	or	r9,r5
800090e8:	f0 04 09 48 	lsl	r8,r8,r4
800090ec:	08 16       	sub	r6,r4
800090ee:	c0 b8       	rjmp	80009104 <__avr32_f64_div_round_subnormal+0xe0>
800090f0:	f0 04 12 00 	clz	r4,r8
800090f4:	f9 b4 03 00 	movlo	r4,0
800090f8:	f7 b4 02 e0 	subhs	r4,-32
800090fc:	f0 04 09 49 	lsl	r9,r8,r4
80009100:	30 08       	mov	r8,0
80009102:	08 16       	sub	r6,r4
80009104:	a3 88       	lsr	r8,0x2
80009106:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000910a:	a3 89       	lsr	r9,0x2
8000910c:	cf ca       	rjmp	80008f04 <__avr32_f64_div+0x40>

8000910e <__avr32_f64_div_res_subnormal>:
8000910e:	5c 37       	neg	r7
80009110:	2f f7       	sub	r7,-1
80009112:	f1 b7 04 c0 	satu	r7,0x6
80009116:	e0 47 00 20 	cp.w	r7,32
8000911a:	c1 54       	brge	80009144 <__avr32_f64_div_res_subnormal+0x36>
8000911c:	ee 06 11 20 	rsub	r6,r7,32
80009120:	e4 07 0a 42 	lsr	r2,r2,r7
80009124:	e6 06 09 4c 	lsl	r12,r3,r6
80009128:	18 42       	or	r2,r12
8000912a:	e6 07 0a 43 	lsr	r3,r3,r7
8000912e:	f4 06 09 41 	lsl	r1,r10,r6
80009132:	f4 07 0a 4a 	lsr	r10,r10,r7
80009136:	f6 06 09 4c 	lsl	r12,r11,r6
8000913a:	18 4a       	or	r10,r12
8000913c:	f6 07 0a 4b 	lsr	r11,r11,r7
80009140:	30 00       	mov	r0,0
80009142:	c1 58       	rjmp	8000916c <__avr32_f64_div_res_subnormal+0x5e>
80009144:	ee 06 11 20 	rsub	r6,r7,32
80009148:	f9 b0 00 00 	moveq	r0,0
8000914c:	f9 bc 00 00 	moveq	r12,0
80009150:	c0 50       	breq	8000915a <__avr32_f64_div_res_subnormal+0x4c>
80009152:	f4 06 09 40 	lsl	r0,r10,r6
80009156:	f6 06 09 4c 	lsl	r12,r11,r6
8000915a:	e6 07 0a 42 	lsr	r2,r3,r7
8000915e:	30 03       	mov	r3,0
80009160:	f4 07 0a 41 	lsr	r1,r10,r7
80009164:	18 41       	or	r1,r12
80009166:	f6 07 0a 4a 	lsr	r10,r11,r7
8000916a:	30 0b       	mov	r11,0
8000916c:	e0 12 ff 00 	andl	r2,0xff00
80009170:	e8 12 00 80 	orl	r2,0x80
80009174:	e6 08 06 46 	mulu.d	r6,r3,r8
80009178:	e4 09 07 46 	macu.d	r6,r2,r9
8000917c:	e4 08 06 44 	mulu.d	r4,r2,r8
80009180:	e6 09 06 48 	mulu.d	r8,r3,r9
80009184:	0c 05       	add	r5,r6
80009186:	f0 07 00 48 	adc	r8,r8,r7
8000918a:	5c 09       	acr	r9
8000918c:	30 07       	mov	r7,0
8000918e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009192:	00 34       	cp.w	r4,r0
80009194:	e2 05 13 00 	cpc	r5,r1
80009198:	c4 6b       	rjmp	80009024 <__avr32_f64_div_round_subnormal>
8000919a:	1c 9b       	mov	r11,lr
8000919c:	e6 1b 80 00 	andh	r11,0x8000,COH
800091a0:	30 0a       	mov	r10,0
800091a2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800091a6:	3f fb       	mov	r11,-1
800091a8:	30 0a       	mov	r10,0
800091aa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800091ae:	f5 eb 10 04 	or	r4,r10,r11
800091b2:	c0 90       	breq	800091c4 <__avr32_f64_div_op1_zero>
800091b4:	1c 9b       	mov	r11,lr
800091b6:	e6 1b 80 00 	andh	r11,0x8000,COH
800091ba:	ea 1b 7f f0 	orh	r11,0x7ff0
800091be:	30 0a       	mov	r10,0
800091c0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800091c4 <__avr32_f64_div_op1_zero>:
800091c4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800091c8:	ce f0       	breq	800091a6 <__avr32_f64_div_res_subnormal+0x98>
800091ca:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800091ce:	e0 44 07 ff 	cp.w	r4,2047
800091d2:	ce 41       	brne	8000919a <__avr32_f64_div_res_subnormal+0x8c>
800091d4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800091d8:	ce 10       	breq	8000919a <__avr32_f64_div_res_subnormal+0x8c>
800091da:	ce 6b       	rjmp	800091a6 <__avr32_f64_div_res_subnormal+0x98>

800091dc <__avr32_udiv64>:
800091dc:	d4 31       	pushm	r0-r7,lr
800091de:	1a 97       	mov	r7,sp
800091e0:	20 3d       	sub	sp,12
800091e2:	10 9c       	mov	r12,r8
800091e4:	12 9e       	mov	lr,r9
800091e6:	14 93       	mov	r3,r10
800091e8:	58 09       	cp.w	r9,0
800091ea:	e0 81 00 bd 	brne	80009364 <__avr32_udiv64+0x188>
800091ee:	16 38       	cp.w	r8,r11
800091f0:	e0 88 00 40 	brls	80009270 <__avr32_udiv64+0x94>
800091f4:	f0 08 12 00 	clz	r8,r8
800091f8:	c0 d0       	breq	80009212 <__avr32_udiv64+0x36>
800091fa:	f6 08 09 4b 	lsl	r11,r11,r8
800091fe:	f0 09 11 20 	rsub	r9,r8,32
80009202:	f8 08 09 4c 	lsl	r12,r12,r8
80009206:	f4 09 0a 49 	lsr	r9,r10,r9
8000920a:	f4 08 09 43 	lsl	r3,r10,r8
8000920e:	f3 eb 10 0b 	or	r11,r9,r11
80009212:	f8 0e 16 10 	lsr	lr,r12,0x10
80009216:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000921a:	f6 0e 0d 00 	divu	r0,r11,lr
8000921e:	e6 0b 16 10 	lsr	r11,r3,0x10
80009222:	00 99       	mov	r9,r0
80009224:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009228:	e0 0a 02 48 	mul	r8,r0,r10
8000922c:	10 3b       	cp.w	r11,r8
8000922e:	c0 a2       	brcc	80009242 <__avr32_udiv64+0x66>
80009230:	20 19       	sub	r9,1
80009232:	18 0b       	add	r11,r12
80009234:	18 3b       	cp.w	r11,r12
80009236:	c0 63       	brcs	80009242 <__avr32_udiv64+0x66>
80009238:	10 3b       	cp.w	r11,r8
8000923a:	f7 b9 03 01 	sublo	r9,1
8000923e:	f7 dc e3 0b 	addcs	r11,r11,r12
80009242:	f6 08 01 01 	sub	r1,r11,r8
80009246:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000924a:	e2 0e 0d 00 	divu	r0,r1,lr
8000924e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009252:	00 98       	mov	r8,r0
80009254:	e0 0a 02 4a 	mul	r10,r0,r10
80009258:	14 33       	cp.w	r3,r10
8000925a:	c0 82       	brcc	8000926a <__avr32_udiv64+0x8e>
8000925c:	20 18       	sub	r8,1
8000925e:	18 03       	add	r3,r12
80009260:	18 33       	cp.w	r3,r12
80009262:	c0 43       	brcs	8000926a <__avr32_udiv64+0x8e>
80009264:	14 33       	cp.w	r3,r10
80009266:	f7 b8 03 01 	sublo	r8,1
8000926a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000926e:	cd f8       	rjmp	8000942c <__avr32_udiv64+0x250>
80009270:	58 08       	cp.w	r8,0
80009272:	c0 51       	brne	8000927c <__avr32_udiv64+0xa0>
80009274:	30 19       	mov	r9,1
80009276:	f2 08 0d 08 	divu	r8,r9,r8
8000927a:	10 9c       	mov	r12,r8
8000927c:	f8 06 12 00 	clz	r6,r12
80009280:	c0 41       	brne	80009288 <__avr32_udiv64+0xac>
80009282:	18 1b       	sub	r11,r12
80009284:	30 19       	mov	r9,1
80009286:	c4 08       	rjmp	80009306 <__avr32_udiv64+0x12a>
80009288:	ec 01 11 20 	rsub	r1,r6,32
8000928c:	f4 01 0a 49 	lsr	r9,r10,r1
80009290:	f8 06 09 4c 	lsl	r12,r12,r6
80009294:	f6 06 09 48 	lsl	r8,r11,r6
80009298:	f6 01 0a 41 	lsr	r1,r11,r1
8000929c:	f3 e8 10 08 	or	r8,r9,r8
800092a0:	f8 03 16 10 	lsr	r3,r12,0x10
800092a4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800092a8:	e2 03 0d 00 	divu	r0,r1,r3
800092ac:	f0 0b 16 10 	lsr	r11,r8,0x10
800092b0:	00 9e       	mov	lr,r0
800092b2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800092b6:	e0 05 02 49 	mul	r9,r0,r5
800092ba:	12 3b       	cp.w	r11,r9
800092bc:	c0 a2       	brcc	800092d0 <__avr32_udiv64+0xf4>
800092be:	20 1e       	sub	lr,1
800092c0:	18 0b       	add	r11,r12
800092c2:	18 3b       	cp.w	r11,r12
800092c4:	c0 63       	brcs	800092d0 <__avr32_udiv64+0xf4>
800092c6:	12 3b       	cp.w	r11,r9
800092c8:	f7 be 03 01 	sublo	lr,1
800092cc:	f7 dc e3 0b 	addcs	r11,r11,r12
800092d0:	12 1b       	sub	r11,r9
800092d2:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800092d6:	f6 03 0d 02 	divu	r2,r11,r3
800092da:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800092de:	04 99       	mov	r9,r2
800092e0:	e4 05 02 4b 	mul	r11,r2,r5
800092e4:	16 38       	cp.w	r8,r11
800092e6:	c0 a2       	brcc	800092fa <__avr32_udiv64+0x11e>
800092e8:	20 19       	sub	r9,1
800092ea:	18 08       	add	r8,r12
800092ec:	18 38       	cp.w	r8,r12
800092ee:	c0 63       	brcs	800092fa <__avr32_udiv64+0x11e>
800092f0:	16 38       	cp.w	r8,r11
800092f2:	f7 b9 03 01 	sublo	r9,1
800092f6:	f1 dc e3 08 	addcs	r8,r8,r12
800092fa:	f4 06 09 43 	lsl	r3,r10,r6
800092fe:	f0 0b 01 0b 	sub	r11,r8,r11
80009302:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80009306:	f8 06 16 10 	lsr	r6,r12,0x10
8000930a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000930e:	f6 06 0d 00 	divu	r0,r11,r6
80009312:	e6 0b 16 10 	lsr	r11,r3,0x10
80009316:	00 9a       	mov	r10,r0
80009318:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000931c:	e0 0e 02 48 	mul	r8,r0,lr
80009320:	10 3b       	cp.w	r11,r8
80009322:	c0 a2       	brcc	80009336 <__avr32_udiv64+0x15a>
80009324:	20 1a       	sub	r10,1
80009326:	18 0b       	add	r11,r12
80009328:	18 3b       	cp.w	r11,r12
8000932a:	c0 63       	brcs	80009336 <__avr32_udiv64+0x15a>
8000932c:	10 3b       	cp.w	r11,r8
8000932e:	f7 ba 03 01 	sublo	r10,1
80009332:	f7 dc e3 0b 	addcs	r11,r11,r12
80009336:	f6 08 01 01 	sub	r1,r11,r8
8000933a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000933e:	e2 06 0d 00 	divu	r0,r1,r6
80009342:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80009346:	00 98       	mov	r8,r0
80009348:	e0 0e 02 4b 	mul	r11,r0,lr
8000934c:	16 33       	cp.w	r3,r11
8000934e:	c0 82       	brcc	8000935e <__avr32_udiv64+0x182>
80009350:	20 18       	sub	r8,1
80009352:	18 03       	add	r3,r12
80009354:	18 33       	cp.w	r3,r12
80009356:	c0 43       	brcs	8000935e <__avr32_udiv64+0x182>
80009358:	16 33       	cp.w	r3,r11
8000935a:	f7 b8 03 01 	sublo	r8,1
8000935e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009362:	c6 98       	rjmp	80009434 <__avr32_udiv64+0x258>
80009364:	16 39       	cp.w	r9,r11
80009366:	e0 8b 00 65 	brhi	80009430 <__avr32_udiv64+0x254>
8000936a:	f2 09 12 00 	clz	r9,r9
8000936e:	c0 b1       	brne	80009384 <__avr32_udiv64+0x1a8>
80009370:	10 3a       	cp.w	r10,r8
80009372:	5f 2a       	srhs	r10
80009374:	1c 3b       	cp.w	r11,lr
80009376:	5f b8       	srhi	r8
80009378:	10 4a       	or	r10,r8
8000937a:	f2 0a 18 00 	cp.b	r10,r9
8000937e:	c5 90       	breq	80009430 <__avr32_udiv64+0x254>
80009380:	30 18       	mov	r8,1
80009382:	c5 98       	rjmp	80009434 <__avr32_udiv64+0x258>
80009384:	f0 09 09 46 	lsl	r6,r8,r9
80009388:	f2 03 11 20 	rsub	r3,r9,32
8000938c:	fc 09 09 4e 	lsl	lr,lr,r9
80009390:	f0 03 0a 48 	lsr	r8,r8,r3
80009394:	f6 09 09 4c 	lsl	r12,r11,r9
80009398:	f4 03 0a 42 	lsr	r2,r10,r3
8000939c:	ef 46 ff f4 	st.w	r7[-12],r6
800093a0:	f6 03 0a 43 	lsr	r3,r11,r3
800093a4:	18 42       	or	r2,r12
800093a6:	f1 ee 10 0c 	or	r12,r8,lr
800093aa:	f8 01 16 10 	lsr	r1,r12,0x10
800093ae:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800093b2:	e6 01 0d 04 	divu	r4,r3,r1
800093b6:	e4 03 16 10 	lsr	r3,r2,0x10
800093ba:	08 9e       	mov	lr,r4
800093bc:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800093c0:	e8 06 02 48 	mul	r8,r4,r6
800093c4:	10 33       	cp.w	r3,r8
800093c6:	c0 a2       	brcc	800093da <__avr32_udiv64+0x1fe>
800093c8:	20 1e       	sub	lr,1
800093ca:	18 03       	add	r3,r12
800093cc:	18 33       	cp.w	r3,r12
800093ce:	c0 63       	brcs	800093da <__avr32_udiv64+0x1fe>
800093d0:	10 33       	cp.w	r3,r8
800093d2:	f7 be 03 01 	sublo	lr,1
800093d6:	e7 dc e3 03 	addcs	r3,r3,r12
800093da:	10 13       	sub	r3,r8
800093dc:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800093e0:	e6 01 0d 00 	divu	r0,r3,r1
800093e4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800093e8:	00 98       	mov	r8,r0
800093ea:	e0 06 02 46 	mul	r6,r0,r6
800093ee:	0c 3b       	cp.w	r11,r6
800093f0:	c0 a2       	brcc	80009404 <__avr32_udiv64+0x228>
800093f2:	20 18       	sub	r8,1
800093f4:	18 0b       	add	r11,r12
800093f6:	18 3b       	cp.w	r11,r12
800093f8:	c0 63       	brcs	80009404 <__avr32_udiv64+0x228>
800093fa:	0c 3b       	cp.w	r11,r6
800093fc:	f7 dc e3 0b 	addcs	r11,r11,r12
80009400:	f7 b8 03 01 	sublo	r8,1
80009404:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80009408:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000940c:	0c 1b       	sub	r11,r6
8000940e:	f0 04 06 42 	mulu.d	r2,r8,r4
80009412:	06 95       	mov	r5,r3
80009414:	16 35       	cp.w	r5,r11
80009416:	e0 8b 00 0a 	brhi	8000942a <__avr32_udiv64+0x24e>
8000941a:	5f 0b       	sreq	r11
8000941c:	f4 09 09 49 	lsl	r9,r10,r9
80009420:	12 32       	cp.w	r2,r9
80009422:	5f b9       	srhi	r9
80009424:	f7 e9 00 09 	and	r9,r11,r9
80009428:	c0 60       	breq	80009434 <__avr32_udiv64+0x258>
8000942a:	20 18       	sub	r8,1
8000942c:	30 09       	mov	r9,0
8000942e:	c0 38       	rjmp	80009434 <__avr32_udiv64+0x258>
80009430:	30 09       	mov	r9,0
80009432:	12 98       	mov	r8,r9
80009434:	10 9a       	mov	r10,r8
80009436:	12 93       	mov	r3,r9
80009438:	10 92       	mov	r2,r8
8000943a:	12 9b       	mov	r11,r9
8000943c:	2f dd       	sub	sp,-12
8000943e:	d8 32       	popm	r0-r7,pc

80009440 <__avr32_umod64>:
80009440:	d4 31       	pushm	r0-r7,lr
80009442:	1a 97       	mov	r7,sp
80009444:	20 3d       	sub	sp,12
80009446:	10 9c       	mov	r12,r8
80009448:	12 95       	mov	r5,r9
8000944a:	14 9e       	mov	lr,r10
8000944c:	16 91       	mov	r1,r11
8000944e:	16 96       	mov	r6,r11
80009450:	58 09       	cp.w	r9,0
80009452:	e0 81 00 81 	brne	80009554 <__avr32_umod64+0x114>
80009456:	16 38       	cp.w	r8,r11
80009458:	e0 88 00 12 	brls	8000947c <__avr32_umod64+0x3c>
8000945c:	f0 08 12 00 	clz	r8,r8
80009460:	c4 e0       	breq	800094fc <__avr32_umod64+0xbc>
80009462:	f6 08 09 46 	lsl	r6,r11,r8
80009466:	f8 08 09 4c 	lsl	r12,r12,r8
8000946a:	f0 0b 11 20 	rsub	r11,r8,32
8000946e:	f4 08 09 4e 	lsl	lr,r10,r8
80009472:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009476:	f7 e6 10 06 	or	r6,r11,r6
8000947a:	c4 18       	rjmp	800094fc <__avr32_umod64+0xbc>
8000947c:	58 08       	cp.w	r8,0
8000947e:	c0 51       	brne	80009488 <__avr32_umod64+0x48>
80009480:	30 19       	mov	r9,1
80009482:	f2 08 0d 08 	divu	r8,r9,r8
80009486:	10 9c       	mov	r12,r8
80009488:	f8 08 12 00 	clz	r8,r12
8000948c:	c0 31       	brne	80009492 <__avr32_umod64+0x52>
8000948e:	18 16       	sub	r6,r12
80009490:	c3 68       	rjmp	800094fc <__avr32_umod64+0xbc>
80009492:	f0 03 11 20 	rsub	r3,r8,32
80009496:	f4 03 0a 4b 	lsr	r11,r10,r3
8000949a:	f8 08 09 4c 	lsl	r12,r12,r8
8000949e:	ec 08 09 49 	lsl	r9,r6,r8
800094a2:	ec 03 0a 43 	lsr	r3,r6,r3
800094a6:	f7 e9 10 09 	or	r9,r11,r9
800094aa:	f8 05 16 10 	lsr	r5,r12,0x10
800094ae:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800094b2:	e6 05 0d 02 	divu	r2,r3,r5
800094b6:	f2 0e 16 10 	lsr	lr,r9,0x10
800094ba:	ec 02 02 4b 	mul	r11,r6,r2
800094be:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800094c2:	16 3e       	cp.w	lr,r11
800094c4:	c0 72       	brcc	800094d2 <__avr32_umod64+0x92>
800094c6:	18 0e       	add	lr,r12
800094c8:	18 3e       	cp.w	lr,r12
800094ca:	c0 43       	brcs	800094d2 <__avr32_umod64+0x92>
800094cc:	16 3e       	cp.w	lr,r11
800094ce:	fd dc e3 0e 	addcs	lr,lr,r12
800094d2:	fc 0b 01 03 	sub	r3,lr,r11
800094d6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800094da:	e6 05 0d 02 	divu	r2,r3,r5
800094de:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800094e2:	a5 36       	mul	r6,r2
800094e4:	0c 39       	cp.w	r9,r6
800094e6:	c0 72       	brcc	800094f4 <__avr32_umod64+0xb4>
800094e8:	18 09       	add	r9,r12
800094ea:	18 39       	cp.w	r9,r12
800094ec:	c0 43       	brcs	800094f4 <__avr32_umod64+0xb4>
800094ee:	0c 39       	cp.w	r9,r6
800094f0:	f3 dc e3 09 	addcs	r9,r9,r12
800094f4:	f2 06 01 06 	sub	r6,r9,r6
800094f8:	f4 08 09 4e 	lsl	lr,r10,r8
800094fc:	f8 0a 16 10 	lsr	r10,r12,0x10
80009500:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009504:	ec 0a 0d 02 	divu	r2,r6,r10
80009508:	fc 09 16 10 	lsr	r9,lr,0x10
8000950c:	ea 02 02 4b 	mul	r11,r5,r2
80009510:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009514:	16 39       	cp.w	r9,r11
80009516:	c0 72       	brcc	80009524 <__avr32_umod64+0xe4>
80009518:	18 09       	add	r9,r12
8000951a:	18 39       	cp.w	r9,r12
8000951c:	c0 43       	brcs	80009524 <__avr32_umod64+0xe4>
8000951e:	16 39       	cp.w	r9,r11
80009520:	f3 dc e3 09 	addcs	r9,r9,r12
80009524:	f2 0b 01 0b 	sub	r11,r9,r11
80009528:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000952c:	f6 0a 0d 0a 	divu	r10,r11,r10
80009530:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009534:	ea 0a 02 4a 	mul	r10,r5,r10
80009538:	14 3e       	cp.w	lr,r10
8000953a:	c0 72       	brcc	80009548 <__avr32_umod64+0x108>
8000953c:	18 0e       	add	lr,r12
8000953e:	18 3e       	cp.w	lr,r12
80009540:	c0 43       	brcs	80009548 <__avr32_umod64+0x108>
80009542:	14 3e       	cp.w	lr,r10
80009544:	fd dc e3 0e 	addcs	lr,lr,r12
80009548:	fc 0a 01 0a 	sub	r10,lr,r10
8000954c:	30 0b       	mov	r11,0
8000954e:	f4 08 0a 4a 	lsr	r10,r10,r8
80009552:	c7 b8       	rjmp	80009648 <__avr32_umod64+0x208>
80009554:	16 39       	cp.w	r9,r11
80009556:	e0 8b 00 79 	brhi	80009648 <__avr32_umod64+0x208>
8000955a:	f2 09 12 00 	clz	r9,r9
8000955e:	c1 21       	brne	80009582 <__avr32_umod64+0x142>
80009560:	10 3a       	cp.w	r10,r8
80009562:	5f 2b       	srhs	r11
80009564:	0a 31       	cp.w	r1,r5
80009566:	5f ba       	srhi	r10
80009568:	f7 ea 10 0a 	or	r10,r11,r10
8000956c:	f2 0a 18 00 	cp.b	r10,r9
80009570:	c0 60       	breq	8000957c <__avr32_umod64+0x13c>
80009572:	fc 08 01 0c 	sub	r12,lr,r8
80009576:	e2 05 01 46 	sbc	r6,r1,r5
8000957a:	18 9e       	mov	lr,r12
8000957c:	0c 9b       	mov	r11,r6
8000957e:	1c 9a       	mov	r10,lr
80009580:	c6 48       	rjmp	80009648 <__avr32_umod64+0x208>
80009582:	ea 09 09 4c 	lsl	r12,r5,r9
80009586:	f2 06 11 20 	rsub	r6,r9,32
8000958a:	f6 09 09 4b 	lsl	r11,r11,r9
8000958e:	f0 09 09 42 	lsl	r2,r8,r9
80009592:	ef 46 ff f4 	st.w	r7[-12],r6
80009596:	f0 06 0a 48 	lsr	r8,r8,r6
8000959a:	18 48       	or	r8,r12
8000959c:	e2 06 0a 4c 	lsr	r12,r1,r6
800095a0:	f4 09 09 43 	lsl	r3,r10,r9
800095a4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
800095a8:	f4 06 0a 4a 	lsr	r10,r10,r6
800095ac:	16 4a       	or	r10,r11
800095ae:	f0 0b 16 10 	lsr	r11,r8,0x10
800095b2:	f8 0b 0d 04 	divu	r4,r12,r11
800095b6:	f4 0c 16 10 	lsr	r12,r10,0x10
800095ba:	08 91       	mov	r1,r4
800095bc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800095c0:	e8 0e 02 46 	mul	r6,r4,lr
800095c4:	0c 3c       	cp.w	r12,r6
800095c6:	c0 a2       	brcc	800095da <__avr32_umod64+0x19a>
800095c8:	20 11       	sub	r1,1
800095ca:	10 0c       	add	r12,r8
800095cc:	10 3c       	cp.w	r12,r8
800095ce:	c0 63       	brcs	800095da <__avr32_umod64+0x19a>
800095d0:	0c 3c       	cp.w	r12,r6
800095d2:	f7 b1 03 01 	sublo	r1,1
800095d6:	f9 d8 e3 0c 	addcs	r12,r12,r8
800095da:	0c 1c       	sub	r12,r6
800095dc:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800095e0:	f8 0b 0d 04 	divu	r4,r12,r11
800095e4:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800095e8:	08 96       	mov	r6,r4
800095ea:	e8 0e 02 4e 	mul	lr,r4,lr
800095ee:	1c 3b       	cp.w	r11,lr
800095f0:	c0 a2       	brcc	80009604 <__avr32_umod64+0x1c4>
800095f2:	20 16       	sub	r6,1
800095f4:	10 0b       	add	r11,r8
800095f6:	10 3b       	cp.w	r11,r8
800095f8:	c0 63       	brcs	80009604 <__avr32_umod64+0x1c4>
800095fa:	1c 3b       	cp.w	r11,lr
800095fc:	f7 b6 03 01 	sublo	r6,1
80009600:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009604:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009608:	1c 1b       	sub	r11,lr
8000960a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000960e:	00 9e       	mov	lr,r0
80009610:	02 9c       	mov	r12,r1
80009612:	16 3c       	cp.w	r12,r11
80009614:	e0 8b 00 08 	brhi	80009624 <__avr32_umod64+0x1e4>
80009618:	5f 06       	sreq	r6
8000961a:	06 30       	cp.w	r0,r3
8000961c:	5f ba       	srhi	r10
8000961e:	ed ea 00 0a 	and	r10,r6,r10
80009622:	c0 60       	breq	8000962e <__avr32_umod64+0x1ee>
80009624:	fc 02 01 04 	sub	r4,lr,r2
80009628:	f8 08 01 4c 	sbc	r12,r12,r8
8000962c:	08 9e       	mov	lr,r4
8000962e:	e6 0e 01 0a 	sub	r10,r3,lr
80009632:	f6 0c 01 4c 	sbc	r12,r11,r12
80009636:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000963a:	f8 09 0a 4b 	lsr	r11,r12,r9
8000963e:	f4 09 0a 4a 	lsr	r10,r10,r9
80009642:	f8 01 09 4c 	lsl	r12,r12,r1
80009646:	18 4a       	or	r10,r12
80009648:	2f dd       	sub	sp,-12
8000964a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009800:	c0 08       	rjmp	80009800 <_evba>
	...

80009804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009804:	c0 08       	rjmp	80009804 <_handle_TLB_Multiple_Hit>
	...

80009808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009808:	c0 08       	rjmp	80009808 <_handle_Bus_Error_Data_Fetch>
	...

8000980c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000980c:	c0 08       	rjmp	8000980c <_handle_Bus_Error_Instruction_Fetch>
	...

80009810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009810:	c0 08       	rjmp	80009810 <_handle_NMI>
	...

80009814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009814:	c0 08       	rjmp	80009814 <_handle_Instruction_Address>
	...

80009818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009818:	c0 08       	rjmp	80009818 <_handle_ITLB_Protection>
	...

8000981c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000981c:	c0 08       	rjmp	8000981c <_handle_Breakpoint>
	...

80009820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009820:	c0 08       	rjmp	80009820 <_handle_Illegal_Opcode>
	...

80009824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009824:	c0 08       	rjmp	80009824 <_handle_Unimplemented_Instruction>
	...

80009828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009828:	c0 08       	rjmp	80009828 <_handle_Privilege_Violation>
	...

8000982c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000982c:	c0 08       	rjmp	8000982c <_handle_Floating_Point>
	...

80009830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009830:	c0 08       	rjmp	80009830 <_handle_Coprocessor_Absent>
	...

80009834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009834:	c0 08       	rjmp	80009834 <_handle_Data_Address_Read>
	...

80009838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009838:	c0 08       	rjmp	80009838 <_handle_Data_Address_Write>
	...

8000983c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000983c:	c0 08       	rjmp	8000983c <_handle_DTLB_Protection_Read>
	...

80009840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009840:	c0 08       	rjmp	80009840 <_handle_DTLB_Protection_Write>
	...

80009844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009844:	c0 08       	rjmp	80009844 <_handle_DTLB_Modified>
	...

80009850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009850:	c0 08       	rjmp	80009850 <_handle_ITLB_Miss>
	...

80009860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009860:	c0 08       	rjmp	80009860 <_handle_DTLB_Miss_Read>
	...

80009870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009870:	c0 08       	rjmp	80009870 <_handle_DTLB_Miss_Write>
	...

80009900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009900:	c0 08       	rjmp	80009900 <_handle_Supervisor_Call>
80009902:	d7 03       	nop

80009904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009904:	30 0c       	mov	r12,0
80009906:	fe b0 d0 2f 	rcall	80003964 <_get_interrupt_handler>
8000990a:	58 0c       	cp.w	r12,0
8000990c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009910:	d6 03       	rete

80009912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009912:	30 1c       	mov	r12,1
80009914:	fe b0 d0 28 	rcall	80003964 <_get_interrupt_handler>
80009918:	58 0c       	cp.w	r12,0
8000991a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000991e:	d6 03       	rete

80009920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009920:	30 2c       	mov	r12,2
80009922:	fe b0 d0 21 	rcall	80003964 <_get_interrupt_handler>
80009926:	58 0c       	cp.w	r12,0
80009928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000992c:	d6 03       	rete

8000992e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000992e:	30 3c       	mov	r12,3
80009930:	fe b0 d0 1a 	rcall	80003964 <_get_interrupt_handler>
80009934:	58 0c       	cp.w	r12,0
80009936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000993a:	d6 03       	rete
8000993c:	d7 03       	nop
8000993e:	d7 03       	nop
80009940:	d7 03       	nop
80009942:	d7 03       	nop
80009944:	d7 03       	nop
80009946:	d7 03       	nop
80009948:	d7 03       	nop
8000994a:	d7 03       	nop
8000994c:	d7 03       	nop
8000994e:	d7 03       	nop
80009950:	d7 03       	nop
80009952:	d7 03       	nop
80009954:	d7 03       	nop
80009956:	d7 03       	nop
80009958:	d7 03       	nop
8000995a:	d7 03       	nop
8000995c:	d7 03       	nop
8000995e:	d7 03       	nop
80009960:	d7 03       	nop
80009962:	d7 03       	nop
80009964:	d7 03       	nop
80009966:	d7 03       	nop
80009968:	d7 03       	nop
8000996a:	d7 03       	nop
8000996c:	d7 03       	nop
8000996e:	d7 03       	nop
80009970:	d7 03       	nop
80009972:	d7 03       	nop
80009974:	d7 03       	nop
80009976:	d7 03       	nop
80009978:	d7 03       	nop
8000997a:	d7 03       	nop
8000997c:	d7 03       	nop
8000997e:	d7 03       	nop
80009980:	d7 03       	nop
80009982:	d7 03       	nop
80009984:	d7 03       	nop
80009986:	d7 03       	nop
80009988:	d7 03       	nop
8000998a:	d7 03       	nop
8000998c:	d7 03       	nop
8000998e:	d7 03       	nop
80009990:	d7 03       	nop
80009992:	d7 03       	nop
80009994:	d7 03       	nop
80009996:	d7 03       	nop
80009998:	d7 03       	nop
8000999a:	d7 03       	nop
8000999c:	d7 03       	nop
8000999e:	d7 03       	nop
800099a0:	d7 03       	nop
800099a2:	d7 03       	nop
800099a4:	d7 03       	nop
800099a6:	d7 03       	nop
800099a8:	d7 03       	nop
800099aa:	d7 03       	nop
800099ac:	d7 03       	nop
800099ae:	d7 03       	nop
800099b0:	d7 03       	nop
800099b2:	d7 03       	nop
800099b4:	d7 03       	nop
800099b6:	d7 03       	nop
800099b8:	d7 03       	nop
800099ba:	d7 03       	nop
800099bc:	d7 03       	nop
800099be:	d7 03       	nop
800099c0:	d7 03       	nop
800099c2:	d7 03       	nop
800099c4:	d7 03       	nop
800099c6:	d7 03       	nop
800099c8:	d7 03       	nop
800099ca:	d7 03       	nop
800099cc:	d7 03       	nop
800099ce:	d7 03       	nop
800099d0:	d7 03       	nop
800099d2:	d7 03       	nop
800099d4:	d7 03       	nop
800099d6:	d7 03       	nop
800099d8:	d7 03       	nop
800099da:	d7 03       	nop
800099dc:	d7 03       	nop
800099de:	d7 03       	nop
800099e0:	d7 03       	nop
800099e2:	d7 03       	nop
800099e4:	d7 03       	nop
800099e6:	d7 03       	nop
800099e8:	d7 03       	nop
800099ea:	d7 03       	nop
800099ec:	d7 03       	nop
800099ee:	d7 03       	nop
800099f0:	d7 03       	nop
800099f2:	d7 03       	nop
800099f4:	d7 03       	nop
800099f6:	d7 03       	nop
800099f8:	d7 03       	nop
800099fa:	d7 03       	nop
800099fc:	d7 03       	nop
800099fe:	d7 03       	nop
