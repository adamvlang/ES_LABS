
CAN_LAB4.3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006fb8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000758  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000510  00000008  80009958  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  00000518  00000518  00000000  2**2
                  ALLOC
  8 .heap         0000e8f0  00000710  00000710  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000d90  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001897  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001f864  00000000  00000000  0000cb6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052de  00000000  00000000  0002c3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000de16  00000000  00000000  000316b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ffc  00000000  00000000  0003f4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000417f  00000000  00000000  000414c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00009f17  00000000  00000000  00045643  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00936d18  00000000  00000000  0004f55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000f60  00000000  00000000  00986278  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf c9 5c 	sub	pc,pc,-13988

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf e9 60 	sub	pc,pc,-5792

Disassembly of section .text:

80002008 <adc_start>:
80002008:	30 28       	mov	r8,2
8000200a:	99 08       	st.w	r12[0x0],r8
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
}
8000200c:	5e fc       	retal	r12

8000200e <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000200e:	30 18       	mov	r8,1
80002010:	f0 0b 09 48 	lsl	r8,r8,r11
80002014:	99 48       	st.w	r12[0x10],r8
}
80002016:	5e fc       	retal	r12

80002018 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002018:	78 78       	ld.w	r8,r12[0x1c]
8000201a:	30 19       	mov	r9,1
8000201c:	f2 0b 09 49 	lsl	r9,r9,r11
80002020:	f3 e8 00 08 	and	r8,r9,r8
}
80002024:	5f 1c       	srne	r12
80002026:	5e fc       	retal	r12

80002028 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002028:	eb cd 40 e0 	pushm	r5-r7,lr
8000202c:	18 97       	mov	r7,r12
8000202e:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002030:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002034:	0c 9b       	mov	r11,r6
80002036:	0e 9c       	mov	r12,r7
80002038:	f0 1f 00 05 	mcall	8000204c <adc_get_value+0x24>
8000203c:	cf c0       	breq	80002034 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000203e:	2d 07       	sub	r7,-48
80002040:	5c 75       	castu.h	r5
}
80002042:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 18       	sub	r8,1

80002050 <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
80002050:	30 08       	mov	r8,0
80002052:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002054:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002056:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002058:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
8000205a:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
8000205c:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000205e:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002060:	b8 f8       	st.b	r12[0x7],r8
}
80002062:	5e fc       	retal	r12

80002064 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002064:	eb cd 40 80 	pushm	r7,lr
80002068:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
8000206a:	49 68       	lddpc	r8,800020c0 <config_dpi204+0x5c>
8000206c:	1a 97       	mov	r7,sp
8000206e:	f0 ea 00 00 	ld.d	r10,r8[0]
80002072:	fa eb 00 00 	st.d	sp[0],r10
80002076:	f0 e8 00 08 	ld.d	r8,r8[8]
8000207a:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000207e:	30 4b       	mov	r11,4
80002080:	49 1c       	lddpc	r12,800020c4 <config_dpi204+0x60>
80002082:	f0 1f 00 12 	mcall	800020c8 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
80002086:	1a 9b       	mov	r11,sp
80002088:	fe 7c 28 00 	mov	r12,-55296
8000208c:	f0 1f 00 10 	mcall	800020cc <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002090:	30 09       	mov	r9,0
80002092:	12 9a       	mov	r10,r9
80002094:	12 9b       	mov	r11,r9
80002096:	fe 7c 28 00 	mov	r12,-55296
8000209a:	f0 1f 00 0e 	mcall	800020d0 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
8000209e:	fe 7c 28 00 	mov	r12,-55296
800020a2:	f0 1f 00 0d 	mcall	800020d4 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800020a6:	e0 6a 1b 00 	mov	r10,6912
800020aa:	ea 1a 00 b7 	orh	r10,0xb7
800020ae:	1a 9b       	mov	r11,sp
800020b0:	fe 7c 28 00 	mov	r12,-55296
800020b4:	f0 1f 00 09 	mcall	800020d8 <config_dpi204+0x74>
}
800020b8:	2f cd       	sub	sp,-16
800020ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800020be:	00 00       	add	r0,r0
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	92 30       	ld.sh	r0,r9[0x6]
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	92 40       	ld.sh	r0,r9[0x8]
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	32 6c       	mov	r12,38
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	34 ca       	mov	r10,76
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	35 02       	mov	r2,80
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	36 58       	mov	r8,101
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	35 a0       	mov	r0,90

800020dc <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800020dc:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800020de:	18 9b       	mov	r11,r12
800020e0:	fe 7c 24 00 	mov	r12,-56320
800020e4:	f0 1f 00 02 	mcall	800020ec <mASSERT_CS+0x10>
}
800020e8:	d8 02       	popm	pc
800020ea:	00 00       	add	r0,r0
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	35 2e       	mov	lr,82

800020f0 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800020f6:	49 88       	lddpc	r8,80002154 <config_SPI_SPARE+0x64>
800020f8:	1a 97       	mov	r7,sp
800020fa:	f0 ea 00 00 	ld.d	r10,r8[0]
800020fe:	fa eb 00 00 	st.d	sp[0],r10
80002102:	f0 e8 00 08 	ld.d	r8,r8[8]
80002106:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
8000210a:	30 4b       	mov	r11,4
8000210c:	49 3c       	lddpc	r12,80002158 <config_SPI_SPARE+0x68>
8000210e:	f0 1f 00 14 	mcall	8000215c <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
80002112:	1a 9b       	mov	r11,sp
80002114:	fe 7c 24 00 	mov	r12,-56320
80002118:	f0 1f 00 12 	mcall	80002160 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
8000211c:	30 09       	mov	r9,0
8000211e:	12 9a       	mov	r10,r9
80002120:	12 9b       	mov	r11,r9
80002122:	fe 7c 24 00 	mov	r12,-56320
80002126:	f0 1f 00 10 	mcall	80002164 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
8000212a:	30 0b       	mov	r11,0
8000212c:	fe 7c 24 00 	mov	r12,-56320
80002130:	f0 1f 00 0e 	mcall	80002168 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002134:	e0 6a 1b 00 	mov	r10,6912
80002138:	ea 1a 00 b7 	orh	r10,0xb7
8000213c:	1a 9b       	mov	r11,sp
8000213e:	fe 7c 24 00 	mov	r12,-56320
80002142:	f0 1f 00 0b 	mcall	8000216c <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002146:	fe 7c 24 00 	mov	r12,-56320
8000214a:	f0 1f 00 0a 	mcall	80002170 <config_SPI_SPARE+0x80>
}
8000214e:	2f cd       	sub	sp,-16
80002150:	e3 cd 80 80 	ldm	sp++,r7,pc
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	92 20       	ld.sh	r0,r9[0x4]
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	92 00       	ld.sh	r0,r9[0x0]
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	32 6c       	mov	r12,38
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	34 ca       	mov	r10,76
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	35 02       	mov	r2,80
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	35 2e       	mov	lr,82
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	35 a0       	mov	r0,90
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	36 58       	mov	r8,101

80002174 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002174:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002176:	fe 7c 24 00 	mov	r12,-56320
8000217a:	f0 1f 00 02 	mcall	80002180 <XferSPI_send+0xc>
	return 0;
}
8000217e:	d8 0a       	popm	pc,r12=0
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	36 5e       	mov	lr,101

80002184 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
80002184:	d4 01       	pushm	lr
80002186:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002188:	30 0b       	mov	r11,0
8000218a:	fe 7c 24 00 	mov	r12,-56320
8000218e:	f0 1f 00 0e 	mcall	800021c4 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
80002192:	e0 6b 00 a0 	mov	r11,160
80002196:	fe 7c 24 00 	mov	r12,-56320
8000219a:	f0 1f 00 0c 	mcall	800021c8 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
8000219e:	30 0b       	mov	r11,0
800021a0:	fe 7c 24 00 	mov	r12,-56320
800021a4:	f0 1f 00 09 	mcall	800021c8 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800021a8:	fa cb ff fe 	sub	r11,sp,-2
800021ac:	fe 7c 24 00 	mov	r12,-56320
800021b0:	f0 1f 00 07 	mcall	800021cc <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800021b4:	30 0b       	mov	r11,0
800021b6:	fe 7c 24 00 	mov	r12,-56320
800021ba:	f0 1f 00 06 	mcall	800021d0 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800021be:	1b bc       	ld.ub	r12,sp[0x3]
800021c0:	2f fd       	sub	sp,-4
800021c2:	d8 02       	popm	pc
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	35 2e       	mov	lr,82
800021c8:	80 00       	ld.sh	r0,r0[0x0]
800021ca:	36 5e       	mov	lr,101
800021cc:	80 00       	ld.sh	r0,r0[0x0]
800021ce:	36 82       	mov	r2,104
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	35 7a       	mov	r10,87

800021d4 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800021d4:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800021d6:	f0 1f 00 04 	mcall	800021e4 <CANRxReady+0x10>
800021da:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800021de:	5f 1c       	srne	r12
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	21 84       	sub	r4,24

800021e8 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800021e8:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800021ea:	f0 1f 00 04 	mcall	800021f8 <CANTxReady+0x10>
800021ee:	ec 1c 00 04 	eorl	r12,0x4
}
800021f2:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
800021f6:	d8 02       	popm	pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 84       	sub	r4,24

800021fc <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800021fc:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800021fe:	18 9b       	mov	r11,r12
80002200:	fe 7c 24 00 	mov	r12,-56320
80002204:	f0 1f 00 02 	mcall	8000220c <mDEASSERT_CS+0x10>
}
80002208:	d8 02       	popm	pc
8000220a:	00 00       	add	r0,r0
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	35 7a       	mov	r10,87

80002210 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
80002210:	d4 21       	pushm	r4-r7,lr
80002212:	18 97       	mov	r7,r12
80002214:	16 95       	mov	r5,r11
80002216:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002218:	18 96       	mov	r6,r12
8000221a:	5c 56       	castu.b	r6
8000221c:	0c 9c       	mov	r12,r6
8000221e:	f0 1f 00 0a 	mcall	80002244 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
80002222:	30 2b       	mov	r11,2
80002224:	0e 9c       	mov	r12,r7
80002226:	f0 1f 00 09 	mcall	80002248 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
8000222a:	0a 9b       	mov	r11,r5
8000222c:	0e 9c       	mov	r12,r7
8000222e:	f0 1f 00 07 	mcall	80002248 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
80002232:	08 9b       	mov	r11,r4
80002234:	0e 9c       	mov	r12,r7
80002236:	f0 1f 00 05 	mcall	80002248 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
8000223a:	0c 9c       	mov	r12,r6
8000223c:	f0 1f 00 04 	mcall	8000224c <CAN2515ByteWrite+0x3c>
}
80002240:	d8 22       	popm	r4-r7,pc
80002242:	00 00       	add	r0,r0
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	20 dc       	sub	r12,13
80002248:	80 00       	ld.sh	r0,r0[0x0]
8000224a:	21 74       	sub	r4,23
8000224c:	80 00       	ld.sh	r0,r0[0x0]
8000224e:	21 fc       	sub	r12,31

80002250 <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
80002250:	eb cd 40 e0 	pushm	r5-r7,lr
80002254:	18 97       	mov	r7,r12
80002256:	16 96       	mov	r6,r11
80002258:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
8000225a:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000225e:	32 7b       	mov	r11,39
80002260:	f0 1f 00 50 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
80002264:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002268:	32 6b       	mov	r11,38
8000226a:	0e 9c       	mov	r12,r7
8000226c:	f0 1f 00 4d 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
80002270:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002274:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002278:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000227c:	10 4a       	or	r10,r8
8000227e:	32 5b       	mov	r11,37
80002280:	0e 9c       	mov	r12,r7
80002282:	f0 1f 00 48 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
80002286:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
8000228a:	32 4b       	mov	r11,36
8000228c:	0e 9c       	mov	r12,r7
8000228e:	f0 1f 00 45 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
80002292:	0b ba       	ld.ub	r10,r5[0x3]
80002294:	30 bb       	mov	r11,11
80002296:	0e 9c       	mov	r12,r7
80002298:	f0 1f 00 42 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
8000229c:	0b aa       	ld.ub	r10,r5[0x2]
8000229e:	30 ab       	mov	r11,10
800022a0:	0e 9c       	mov	r12,r7
800022a2:	f0 1f 00 40 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800022a6:	6a 08       	ld.w	r8,r5[0x0]
800022a8:	f0 0a 16 0d 	lsr	r10,r8,0xd
800022ac:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800022b0:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022b4:	f1 ea 10 0a 	or	r10,r8,r10
800022b8:	a3 ba       	sbr	r10,0x3
800022ba:	e2 1a 00 eb 	andl	r10,0xeb,COH
800022be:	30 9b       	mov	r11,9
800022c0:	0e 9c       	mov	r12,r7
800022c2:	f0 1f 00 38 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
800022c6:	0b 0a       	ld.w	r10,r5++
800022c8:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800022cc:	30 8b       	mov	r11,8
800022ce:	0e 9c       	mov	r12,r7
800022d0:	f0 1f 00 34 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
800022d4:	0b ba       	ld.ub	r10,r5[0x3]
800022d6:	31 3b       	mov	r11,19
800022d8:	0e 9c       	mov	r12,r7
800022da:	f0 1f 00 32 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
800022de:	0b aa       	ld.ub	r10,r5[0x2]
800022e0:	31 2b       	mov	r11,18
800022e2:	0e 9c       	mov	r12,r7
800022e4:	f0 1f 00 2f 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800022e8:	6a 08       	ld.w	r8,r5[0x0]
800022ea:	f0 0a 16 0d 	lsr	r10,r8,0xd
800022ee:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800022f2:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022f6:	f1 ea 10 0a 	or	r10,r8,r10
800022fa:	a3 ba       	sbr	r10,0x3
800022fc:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002300:	31 1b       	mov	r11,17
80002302:	0e 9c       	mov	r12,r7
80002304:	f0 1f 00 27 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
80002308:	0b 0a       	ld.w	r10,r5++
8000230a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000230e:	31 0b       	mov	r11,16
80002310:	0e 9c       	mov	r12,r7
80002312:	f0 1f 00 24 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
80002316:	0b ba       	ld.ub	r10,r5[0x3]
80002318:	31 7b       	mov	r11,23
8000231a:	0e 9c       	mov	r12,r7
8000231c:	f0 1f 00 21 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
80002320:	0b aa       	ld.ub	r10,r5[0x2]
80002322:	31 6b       	mov	r11,22
80002324:	0e 9c       	mov	r12,r7
80002326:	f0 1f 00 1f 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
8000232a:	6a 08       	ld.w	r8,r5[0x0]
8000232c:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002330:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002334:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002338:	f1 ea 10 0a 	or	r10,r8,r10
8000233c:	a3 ba       	sbr	r10,0x3
8000233e:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002342:	31 5b       	mov	r11,21
80002344:	0e 9c       	mov	r12,r7
80002346:	f0 1f 00 17 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
8000234a:	0b 0a       	ld.w	r10,r5++
8000234c:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002350:	31 4b       	mov	r11,20
80002352:	0e 9c       	mov	r12,r7
80002354:	f0 1f 00 13 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002358:	0b ba       	ld.ub	r10,r5[0x3]
8000235a:	31 bb       	mov	r11,27
8000235c:	0e 9c       	mov	r12,r7
8000235e:	f0 1f 00 11 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
80002362:	0b aa       	ld.ub	r10,r5[0x2]
80002364:	31 ab       	mov	r11,26
80002366:	0e 9c       	mov	r12,r7
80002368:	f0 1f 00 0e 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
8000236c:	6a 08       	ld.w	r8,r5[0x0]
8000236e:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002372:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002376:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000237a:	f1 ea 10 0a 	or	r10,r8,r10
8000237e:	a3 ba       	sbr	r10,0x3
80002380:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002384:	31 9b       	mov	r11,25
80002386:	0e 9c       	mov	r12,r7
80002388:	f0 1f 00 06 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
8000238c:	6a 0a       	ld.w	r10,r5[0x0]
8000238e:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002392:	31 8b       	mov	r11,24
80002394:	0e 9c       	mov	r12,r7
80002396:	f0 1f 00 03 	mcall	800023a0 <CAN2515SetRXB1FiltersEx+0x150>
}
8000239a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000239e:	00 00       	add	r0,r0
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	22 10       	sub	r0,33

800023a4 <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
800023a4:	eb cd 40 e0 	pushm	r5-r7,lr
800023a8:	18 97       	mov	r7,r12
800023aa:	16 96       	mov	r6,r11
800023ac:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
800023ae:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
800023b2:	32 3b       	mov	r11,35
800023b4:	f0 1f 00 2f 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
800023b8:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
800023bc:	32 2b       	mov	r11,34
800023be:	0e 9c       	mov	r12,r7
800023c0:	f0 1f 00 2c 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
800023c4:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
800023c8:	ec 0a 16 0d 	lsr	r10,r6,0xd
800023cc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800023d0:	10 4a       	or	r10,r8
800023d2:	32 1b       	mov	r11,33
800023d4:	0e 9c       	mov	r12,r7
800023d6:	f0 1f 00 27 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
800023da:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800023de:	32 0b       	mov	r11,32
800023e0:	0e 9c       	mov	r12,r7
800023e2:	f0 1f 00 24 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
800023e6:	0b ba       	ld.ub	r10,r5[0x3]
800023e8:	30 3b       	mov	r11,3
800023ea:	0e 9c       	mov	r12,r7
800023ec:	f0 1f 00 21 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
800023f0:	0b aa       	ld.ub	r10,r5[0x2]
800023f2:	30 2b       	mov	r11,2
800023f4:	0e 9c       	mov	r12,r7
800023f6:	f0 1f 00 1f 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
800023fa:	6a 08       	ld.w	r8,r5[0x0]
800023fc:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002400:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002404:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002408:	f1 ea 10 0a 	or	r10,r8,r10
8000240c:	a3 ba       	sbr	r10,0x3
8000240e:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002412:	30 1b       	mov	r11,1
80002414:	0e 9c       	mov	r12,r7
80002416:	f0 1f 00 17 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
8000241a:	0b 0a       	ld.w	r10,r5++
8000241c:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002420:	30 0b       	mov	r11,0
80002422:	0e 9c       	mov	r12,r7
80002424:	f0 1f 00 13 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
80002428:	0b ba       	ld.ub	r10,r5[0x3]
8000242a:	30 7b       	mov	r11,7
8000242c:	0e 9c       	mov	r12,r7
8000242e:	f0 1f 00 11 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
80002432:	0b aa       	ld.ub	r10,r5[0x2]
80002434:	30 6b       	mov	r11,6
80002436:	0e 9c       	mov	r12,r7
80002438:	f0 1f 00 0e 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
8000243c:	6a 08       	ld.w	r8,r5[0x0]
8000243e:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002442:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002446:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000244a:	f1 ea 10 0a 	or	r10,r8,r10
8000244e:	a3 ba       	sbr	r10,0x3
80002450:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002454:	30 5b       	mov	r11,5
80002456:	0e 9c       	mov	r12,r7
80002458:	f0 1f 00 06 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
8000245c:	6a 0a       	ld.w	r10,r5[0x0]
8000245e:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
80002462:	30 4b       	mov	r11,4
80002464:	0e 9c       	mov	r12,r7
80002466:	f0 1f 00 03 	mcall	80002470 <CAN2515SetRXB0FiltersEx+0xcc>
}
8000246a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000246e:	00 00       	add	r0,r0
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	22 10       	sub	r0,33

80002474 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002474:	eb cd 40 c0 	pushm	r6-r7,lr
80002478:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
8000247a:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000247e:	0e 9c       	mov	r12,r7
80002480:	f0 1f 00 06 	mcall	80002498 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002484:	e0 6b 00 c0 	mov	r11,192
80002488:	0c 9c       	mov	r12,r6
8000248a:	f0 1f 00 05 	mcall	8000249c <CANReset+0x28>
	mDEASSERT_CS(Channel);
8000248e:	0e 9c       	mov	r12,r7
80002490:	f0 1f 00 04 	mcall	800024a0 <CANReset+0x2c>
}
80002494:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	20 dc       	sub	r12,13
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	21 74       	sub	r4,23
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	21 fc       	sub	r12,31

800024a4 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
800024a4:	eb cd 40 e0 	pushm	r5-r7,lr
800024a8:	20 1d       	sub	sp,4
800024aa:	18 97       	mov	r7,r12
800024ac:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
800024ae:	18 96       	mov	r6,r12
800024b0:	5c 56       	castu.b	r6
800024b2:	0c 9c       	mov	r12,r6
800024b4:	f0 1f 00 13 	mcall	80002500 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800024b8:	30 3b       	mov	r11,3
800024ba:	0e 9c       	mov	r12,r7
800024bc:	f0 1f 00 12 	mcall	80002504 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800024c0:	0a 9b       	mov	r11,r5
800024c2:	0e 9c       	mov	r12,r7
800024c4:	f0 1f 00 10 	mcall	80002504 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800024c8:	30 0b       	mov	r11,0
800024ca:	fe 7c 24 00 	mov	r12,-56320
800024ce:	f0 1f 00 0f 	mcall	80002508 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800024d2:	fe 77 24 00 	mov	r7,-56320
800024d6:	c0 28       	rjmp	800024da <CAN2515ByteRead+0x36>
		asm("NOP;");
800024d8:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800024da:	0e 9c       	mov	r12,r7
800024dc:	f0 1f 00 0c 	mcall	8000250c <CAN2515ByteRead+0x68>
800024e0:	cf c0       	breq	800024d8 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800024e2:	fa cb ff fe 	sub	r11,sp,-2
800024e6:	fe 7c 24 00 	mov	r12,-56320
800024ea:	f0 1f 00 0a 	mcall	80002510 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
800024ee:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
800024f0:	0c 9c       	mov	r12,r6
800024f2:	f0 1f 00 09 	mcall	80002514 <CAN2515ByteRead+0x70>

	return tempdata;
}
800024f6:	0e 9c       	mov	r12,r7
800024f8:	2f fd       	sub	sp,-4
800024fa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024fe:	00 00       	add	r0,r0
80002500:	80 00       	ld.sh	r0,r0[0x0]
80002502:	20 dc       	sub	r12,13
80002504:	80 00       	ld.sh	r0,r0[0x0]
80002506:	21 74       	sub	r4,23
80002508:	80 00       	ld.sh	r0,r0[0x0]
8000250a:	36 5e       	mov	lr,101
8000250c:	80 00       	ld.sh	r0,r0[0x0]
8000250e:	36 7a       	mov	r10,103
80002510:	80 00       	ld.sh	r0,r0[0x0]
80002512:	36 82       	mov	r2,104
80002514:	80 00       	ld.sh	r0,r0[0x0]
80002516:	21 fc       	sub	r12,31

80002518 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002518:	eb cd 40 80 	pushm	r7,lr
8000251c:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
8000251e:	58 ab       	cp.w	r11,10
80002520:	c1 11       	brne	80002542 <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
80002522:	30 3a       	mov	r10,3
80002524:	32 ab       	mov	r11,42
80002526:	f0 1f 00 30 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000252a:	e0 6a 00 ac 	mov	r10,172
8000252e:	32 9b       	mov	r11,41
80002530:	0e 9c       	mov	r12,r7
80002532:	f0 1f 00 2d 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002536:	30 7a       	mov	r10,7
80002538:	32 8b       	mov	r11,40
8000253a:	0e 9c       	mov	r12,r7
8000253c:	f0 1f 00 2a 	mcall	800025e4 <CANEnable+0xcc>
80002540:	c3 68       	rjmp	800025ac <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
80002542:	58 7b       	cp.w	r11,7
80002544:	c1 11       	brne	80002566 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002546:	30 1a       	mov	r10,1
80002548:	32 ab       	mov	r11,42
8000254a:	f0 1f 00 27 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000254e:	e0 6a 00 ac 	mov	r10,172
80002552:	32 9b       	mov	r11,41
80002554:	0e 9c       	mov	r12,r7
80002556:	f0 1f 00 24 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000255a:	30 7a       	mov	r10,7
8000255c:	32 8b       	mov	r11,40
8000255e:	0e 9c       	mov	r12,r7
80002560:	f0 1f 00 21 	mcall	800025e4 <CANEnable+0xcc>
80002564:	c2 48       	rjmp	800025ac <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002566:	58 5b       	cp.w	r11,5
80002568:	c1 11       	brne	8000258a <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000256a:	30 0a       	mov	r10,0
8000256c:	32 ab       	mov	r11,42
8000256e:	f0 1f 00 1e 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002572:	e0 6a 00 ac 	mov	r10,172
80002576:	32 9b       	mov	r11,41
80002578:	0e 9c       	mov	r12,r7
8000257a:	f0 1f 00 1b 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000257e:	30 7a       	mov	r10,7
80002580:	32 8b       	mov	r11,40
80002582:	0e 9c       	mov	r12,r7
80002584:	f0 1f 00 18 	mcall	800025e4 <CANEnable+0xcc>
80002588:	c1 28       	rjmp	800025ac <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
8000258a:	58 1b       	cp.w	r11,1
8000258c:	c1 01       	brne	800025ac <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000258e:	30 0a       	mov	r10,0
80002590:	32 ab       	mov	r11,42
80002592:	f0 1f 00 15 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
80002596:	e0 6a 00 91 	mov	r10,145
8000259a:	32 9b       	mov	r11,41
8000259c:	0e 9c       	mov	r12,r7
8000259e:	f0 1f 00 12 	mcall	800025e4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
800025a2:	30 3a       	mov	r10,3
800025a4:	32 8b       	mov	r11,40
800025a6:	0e 9c       	mov	r12,r7
800025a8:	f0 1f 00 0f 	mcall	800025e4 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
800025ac:	30 3a       	mov	r10,3
800025ae:	32 bb       	mov	r11,43
800025b0:	0e 9c       	mov	r12,r7
800025b2:	f0 1f 00 0d 	mcall	800025e4 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800025b6:	30 4a       	mov	r10,4
800025b8:	30 fb       	mov	r11,15
800025ba:	0e 9c       	mov	r12,r7
800025bc:	f0 1f 00 0a 	mcall	800025e4 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800025c0:	30 eb       	mov	r11,14
800025c2:	0e 9c       	mov	r12,r7
800025c4:	f0 1f 00 09 	mcall	800025e8 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800025c8:	30 eb       	mov	r11,14
800025ca:	0e 9c       	mov	r12,r7
800025cc:	f0 1f 00 07 	mcall	800025e8 <CANEnable+0xd0>
800025d0:	e2 1c 00 e0 	andl	r12,0xe0,COH
800025d4:	c0 60       	breq	800025e0 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800025d6:	30 4a       	mov	r10,4
800025d8:	30 fb       	mov	r11,15
800025da:	0e 9c       	mov	r12,r7
800025dc:	f0 1f 00 02 	mcall	800025e4 <CANEnable+0xcc>
800025e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	22 10       	sub	r0,33
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	24 a4       	sub	r4,74

800025ec <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
800025ec:	d4 21       	pushm	r4-r7,lr
800025ee:	18 97       	mov	r7,r12
800025f0:	16 94       	mov	r4,r11
800025f2:	14 95       	mov	r5,r10
800025f4:	12 96       	mov	r6,r9
	CANReset(Channel);
800025f6:	f0 1f 00 0f 	mcall	80002630 <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
800025fa:	34 0a       	mov	r10,64
800025fc:	36 0b       	mov	r11,96
800025fe:	0e 9c       	mov	r12,r7
80002600:	f0 1f 00 0d 	mcall	80002634 <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
80002604:	34 0a       	mov	r10,64
80002606:	37 0b       	mov	r11,112
80002608:	0e 9c       	mov	r12,r7
8000260a:	f0 1f 00 0b 	mcall	80002634 <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
8000260e:	0c 9a       	mov	r10,r6
80002610:	0a 9b       	mov	r11,r5
80002612:	0e 9c       	mov	r12,r7
80002614:	f0 1f 00 09 	mcall	80002638 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
80002618:	ec ca ff f8 	sub	r10,r6,-8
8000261c:	0a 9b       	mov	r11,r5
8000261e:	0e 9c       	mov	r12,r7
80002620:	f0 1f 00 07 	mcall	8000263c <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
80002624:	08 9b       	mov	r11,r4
80002626:	0e 9c       	mov	r12,r7
80002628:	f0 1f 00 06 	mcall	80002640 <InitializeCANExtended+0x54>
}
8000262c:	d8 22       	popm	r4-r7,pc
8000262e:	00 00       	add	r0,r0
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	24 74       	sub	r4,71
80002634:	80 00       	ld.sh	r0,r0[0x0]
80002636:	22 10       	sub	r0,33
80002638:	80 00       	ld.sh	r0,r0[0x0]
8000263a:	23 a4       	sub	r4,58
8000263c:	80 00       	ld.sh	r0,r0[0x0]
8000263e:	22 50       	sub	r0,37
80002640:	80 00       	ld.sh	r0,r0[0x0]
80002642:	25 18       	sub	r8,81

80002644 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002644:	eb cd 40 fe 	pushm	r1-r7,lr
80002648:	18 96       	mov	r6,r12
8000264a:	16 93       	mov	r3,r11
8000264c:	14 94       	mov	r4,r10
8000264e:	12 92       	mov	r2,r9
80002650:	10 91       	mov	r1,r8
80002652:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002654:	33 05       	mov	r5,48
80002656:	c1 78       	rjmp	80002684 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002658:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000265c:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002660:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002664:	14 38       	cp.w	r8,r10
80002666:	e0 88 00 08 	brls	80002676 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000266a:	12 38       	cp.w	r8,r9
8000266c:	fe 98 ff fa 	brls	80002660 <CANSendMsg+0x1c>
80002670:	12 3a       	cp.w	r10,r9
80002672:	c7 63       	brcs	8000275e <CANSendMsg+0x11a>
80002674:	cf 6b       	rjmp	80002660 <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002676:	12 38       	cp.w	r8,r9
80002678:	e0 8b 00 73 	brhi	8000275e <CANSendMsg+0x11a>
8000267c:	12 3a       	cp.w	r10,r9
8000267e:	c7 03       	brcs	8000275e <CANSendMsg+0x11a>
80002680:	cf 0b       	rjmp	80002660 <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
80002682:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002684:	0a 9b       	mov	r11,r5
80002686:	0c 9c       	mov	r12,r6
80002688:	f0 1f 00 38 	mcall	80002768 <CANSendMsg+0x124>
8000268c:	e2 1c 00 08 	andl	r12,0x8,COH
80002690:	ce 41       	brne	80002658 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
80002692:	e6 08 16 0b 	lsr	r8,r3,0xb
80002696:	c1 01       	brne	800026b6 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002698:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
8000269c:	33 1b       	mov	r11,49
8000269e:	0c 9c       	mov	r12,r6
800026a0:	f0 1f 00 33 	mcall	8000276c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
800026a4:	e6 0a 15 05 	lsl	r10,r3,0x5
800026a8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800026ac:	33 2b       	mov	r11,50
800026ae:	0c 9c       	mov	r12,r6
800026b0:	f0 1f 00 2f 	mcall	8000276c <CANSendMsg+0x128>
800026b4:	c2 18       	rjmp	800026f6 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800026b6:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800026ba:	33 1b       	mov	r11,49
800026bc:	0c 9c       	mov	r12,r6
800026be:	f0 1f 00 2c 	mcall	8000276c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800026c2:	e6 08 16 0d 	lsr	r8,r3,0xd
800026c6:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800026ca:	e2 18 00 e0 	andl	r8,0xe0,COH
800026ce:	10 4a       	or	r10,r8
800026d0:	a3 ba       	sbr	r10,0x3
800026d2:	e2 1a 00 eb 	andl	r10,0xeb,COH
800026d6:	33 2b       	mov	r11,50
800026d8:	0c 9c       	mov	r12,r6
800026da:	f0 1f 00 25 	mcall	8000276c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800026de:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800026e2:	33 3b       	mov	r11,51
800026e4:	0c 9c       	mov	r12,r6
800026e6:	f0 1f 00 22 	mcall	8000276c <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
800026ea:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
800026ee:	33 4b       	mov	r11,52
800026f0:	0c 9c       	mov	r12,r6
800026f2:	f0 1f 00 1f 	mcall	8000276c <CANSendMsg+0x128>
800026f6:	30 85       	mov	r5,8
800026f8:	ea 02 18 00 	cp.b	r2,r5
800026fc:	e4 05 17 80 	movls	r5,r2
80002700:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002704:	e0 41 00 52 	cp.w	r1,82
80002708:	c1 01       	brne	80002728 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
8000270a:	a7 a5       	sbr	r5,0x6
8000270c:	5c 55       	castu.b	r5
8000270e:	0a 9a       	mov	r10,r5
80002710:	33 5b       	mov	r11,53
80002712:	0c 9c       	mov	r12,r6
80002714:	f0 1f 00 16 	mcall	8000276c <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002718:	30 4b       	mov	r11,4
8000271a:	31 1c       	mov	r12,17
8000271c:	f0 1f 00 15 	mcall	80002770 <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
80002720:	49 5c       	lddpc	r12,80002774 <CANSendMsg+0x130>
80002722:	f0 1f 00 16 	mcall	80002778 <CANSendMsg+0x134>
80002726:	c0 68       	rjmp	80002732 <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002728:	0a 9a       	mov	r10,r5
8000272a:	33 5b       	mov	r11,53
8000272c:	0c 9c       	mov	r12,r6
8000272e:	f0 1f 00 10 	mcall	8000276c <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002732:	58 05       	cp.w	r5,0
80002734:	e0 8a 00 0e 	brle	80002750 <CANSendMsg+0x10c>
80002738:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
8000273a:	0e 9b       	mov	r11,r7
8000273c:	2c ab       	sub	r11,-54
8000273e:	e8 07 07 0a 	ld.ub	r10,r4[r7]
80002742:	5c 5b       	castu.b	r11
80002744:	0c 9c       	mov	r12,r6
80002746:	f0 1f 00 0a 	mcall	8000276c <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000274a:	2f f7       	sub	r7,-1
8000274c:	0a 37       	cp.w	r7,r5
8000274e:	cf 65       	brlt	8000273a <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
80002750:	30 8a       	mov	r10,8
80002752:	33 0b       	mov	r11,48
80002754:	0c 9c       	mov	r12,r6
80002756:	f0 1f 00 06 	mcall	8000276c <CANSendMsg+0x128>
8000275a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000275e:	e0 47 00 64 	cp.w	r7,100
80002762:	c9 01       	brne	80002682 <CANSendMsg+0x3e>
80002764:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002768:	80 00       	ld.sh	r0,r0[0x0]
8000276a:	24 a4       	sub	r4,74
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	22 10       	sub	r0,33
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	2f 08       	sub	r8,-16
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	92 74       	ld.sh	r4,r9[0xe]
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	2e 70       	sub	r0,-25

8000277c <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
8000277c:	d4 31       	pushm	r0-r7,lr
8000277e:	18 95       	mov	r5,r12
80002780:	16 92       	mov	r2,r11
80002782:	14 93       	mov	r3,r10
80002784:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002786:	f0 1f 00 55 	mcall	800028d8 <CANGetMsg+0x15c>

        if( (temp & 3) == 0 )
8000278a:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000278e:	e0 80 00 a3 	breq	800028d4 <CANGetMsg+0x158>
            return FALSE;
        temp&=0x03;
        if(temp==1){
80002792:	58 1c       	cp.w	r12,1
80002794:	c0 31       	brne	8000279a <CANGetMsg+0x1e>
80002796:	36 16       	mov	r6,97
80002798:	c0 58       	rjmp	800027a2 <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
8000279a:	58 2c       	cp.w	r12,2
8000279c:	e0 81 00 9c 	brne	800028d4 <CANGetMsg+0x158>
800027a0:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
800027a2:	0c 9b       	mov	r11,r6
800027a4:	0a 9c       	mov	r12,r5
800027a6:	f0 1f 00 4e 	mcall	800028dc <CANGetMsg+0x160>
800027aa:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
800027ac:	ec cb ff ff 	sub	r11,r6,-1
800027b0:	5c 5b       	castu.b	r11
800027b2:	0a 9c       	mov	r12,r5
800027b4:	f0 1f 00 4a 	mcall	800028dc <CANGetMsg+0x160>
800027b8:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800027ba:	ec cb ff fe 	sub	r11,r6,-2
800027be:	5c 5b       	castu.b	r11
800027c0:	0a 9c       	mov	r12,r5
800027c2:	f0 1f 00 47 	mcall	800028dc <CANGetMsg+0x160>
800027c6:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800027c8:	ec cb ff fd 	sub	r11,r6,-3
800027cc:	5c 5b       	castu.b	r11
800027ce:	0a 9c       	mov	r12,r5
800027d0:	f0 1f 00 43 	mcall	800028dc <CANGetMsg+0x160>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800027d4:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800027d8:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800027dc:	c0 d1       	brne	800027f6 <CANGetMsg+0x7a>
        {
            *pIdentifier = S1<<3 | S2>>5;
800027de:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800027e2:	ef e1 10 31 	or	r1,r7,r1<<0x3
800027e6:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
800027e8:	30 1c       	mov	r12,1
800027ea:	f0 1f 00 3e 	mcall	800028e0 <CANGetMsg+0x164>
            LED_Off(LED1);
800027ee:	30 2c       	mov	r12,2
800027f0:	f0 1f 00 3d 	mcall	800028e4 <CANGetMsg+0x168>
800027f4:	c1 48       	rjmp	8000281c <CANGetMsg+0xa0>

        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
800027f6:	a9 60       	lsl	r0,0x8
800027f8:	e1 e1 11 51 	or	r1,r0,r1<<0x15
800027fc:	e3 ec 10 0c 	or	r12,r1,r12
80002800:	e2 18 00 1c 	andl	r8,0x1c,COH
80002804:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002808:	0e 48       	or	r8,r7
8000280a:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000280e:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
80002810:	30 2c       	mov	r12,2
80002812:	f0 1f 00 34 	mcall	800028e0 <CANGetMsg+0x164>
            LED_Off(LED0);
80002816:	30 1c       	mov	r12,1
80002818:	f0 1f 00 33 	mcall	800028e4 <CANGetMsg+0x168>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
8000281c:	ec cb ff fc 	sub	r11,r6,-4
80002820:	5c 5b       	castu.b	r11
80002822:	0a 9c       	mov	r12,r5
80002824:	f0 1f 00 2e 	mcall	800028dc <CANGetMsg+0x160>
80002828:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
8000282c:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
8000282e:	30 88       	mov	r8,8
80002830:	f0 0c 18 00 	cp.b	r12,r8
80002834:	e0 88 00 07 	brls	80002842 <CANGetMsg+0xc6>
            *pMsgSize = 8;
80002838:	a8 88       	st.b	r4[0x0],r8
8000283a:	2f b6       	sub	r6,-5
8000283c:	5c 56       	castu.b	r6
8000283e:	30 07       	mov	r7,0
80002840:	c0 58       	rjmp	8000284a <CANGetMsg+0xce>

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002842:	58 0c       	cp.w	r12,0
80002844:	fe 99 ff fb 	brgt	8000283a <CANGetMsg+0xbe>
80002848:	c0 e8       	rjmp	80002864 <CANGetMsg+0xe8>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
8000284a:	0c 9b       	mov	r11,r6
8000284c:	0a 9c       	mov	r12,r5
8000284e:	f0 1f 00 24 	mcall	800028dc <CANGetMsg+0x160>
80002852:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002856:	2f f7       	sub	r7,-1
80002858:	2f f6       	sub	r6,-1
8000285a:	5c 56       	castu.b	r6
8000285c:	09 88       	ld.ub	r8,r4[0x0]
8000285e:	0e 38       	cp.w	r8,r7
80002860:	fe 99 ff f5 	brgt	8000284a <CANGetMsg+0xce>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
80002864:	30 4c       	mov	r12,4
80002866:	f0 1f 00 20 	mcall	800028e4 <CANGetMsg+0x168>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
8000286a:	36 0b       	mov	r11,96
8000286c:	0a 9c       	mov	r12,r5
8000286e:	f0 1f 00 1c 	mcall	800028dc <CANGetMsg+0x160>
80002872:	e2 1c 00 08 	andl	r12,0x8,COH
80002876:	c0 81       	brne	80002886 <CANGetMsg+0x10a>
80002878:	37 0b       	mov	r11,112
8000287a:	0a 9c       	mov	r12,r5
8000287c:	f0 1f 00 18 	mcall	800028dc <CANGetMsg+0x160>
80002880:	e2 1c 00 08 	andl	r12,0x8,COH
80002884:	c1 d0       	breq	800028be <CANGetMsg+0x142>
80002886:	64 08       	ld.w	r8,r2[0x0]
80002888:	58 18       	cp.w	r8,1
8000288a:	c1 a1       	brne	800028be <CANGetMsg+0x142>
                    {
                    Msg[0] = 0;
8000288c:	30 08       	mov	r8,0
8000288e:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002890:	30 18       	mov	r8,1
80002892:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002894:	30 28       	mov	r8,2
80002896:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002898:	30 38       	mov	r8,3
8000289a:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
8000289c:	30 08       	mov	r8,0
8000289e:	30 49       	mov	r9,4
800028a0:	06 9a       	mov	r10,r3
800028a2:	64 0b       	ld.w	r11,r2[0x0]
800028a4:	0a 9c       	mov	r12,r5
800028a6:	f0 1f 00 11 	mcall	800028e8 <CANGetMsg+0x16c>
                    dip204_set_cursor_position(17,4);
800028aa:	30 4b       	mov	r11,4
800028ac:	31 1c       	mov	r12,17
800028ae:	f0 1f 00 10 	mcall	800028ec <CANGetMsg+0x170>
                    dip204_printf_string("Re F");
800028b2:	49 0c       	lddpc	r12,800028f0 <CANGetMsg+0x174>
800028b4:	f0 1f 00 10 	mcall	800028f4 <CANGetMsg+0x178>
                    LED_On(LED2);
800028b8:	30 4c       	mov	r12,4
800028ba:	f0 1f 00 0a 	mcall	800028e0 <CANGetMsg+0x164>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800028be:	30 0a       	mov	r10,0
800028c0:	32 cb       	mov	r11,44
800028c2:	14 9c       	mov	r12,r10
800028c4:	f0 1f 00 0d 	mcall	800028f8 <CANGetMsg+0x17c>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800028c8:	30 0a       	mov	r10,0
800028ca:	32 cb       	mov	r11,44
800028cc:	14 9c       	mov	r12,r10
800028ce:	f0 1f 00 0b 	mcall	800028f8 <CANGetMsg+0x17c>
800028d2:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800028d4:	d8 3a       	popm	r0-r7,pc,r12=0
800028d6:	00 00       	add	r0,r0
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	21 84       	sub	r4,24
800028dc:	80 00       	ld.sh	r0,r0[0x0]
800028de:	24 a4       	sub	r4,74
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	2c dc       	sub	r12,-51
800028e4:	80 00       	ld.sh	r0,r0[0x0]
800028e6:	2d 2c       	sub	r12,-46
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	26 44       	sub	r4,100
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	2f 08       	sub	r8,-16
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	92 74       	ld.sh	r4,r9[0xe]
800028f4:	80 00       	ld.sh	r0,r0[0x0]
800028f6:	2e 70       	sub	r0,-25
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	22 10       	sub	r0,33

800028fc <nodeCount>:
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
{
800028fc:	eb cd 40 c0 	pushm	r6-r7,lr
80002900:	49 7a       	lddpc	r10,8000295c <nodeCount+0x60>
80002902:	30 08       	mov	r8,0
80002904:	10 99       	mov	r9,r8
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
	{
		//Adds any new nodes to its corresponding position in nodeCount bit seq.
		ids |= (1 << (nFrame[j].ID & 0x000F));
80002906:	30 16       	mov	r6,1
		UINT16 ids_new = ids;
		//If counts the number of nodes active within ~1000 ms
		ids_new &= ((ids_new >> j) & 0x01);

		//If there was a node found at the j'th bit 1 is added to l
		if(ids_new == 1)
80002908:	0c 9e       	mov	lr,r6
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
	{
		//Adds any new nodes to its corresponding position in nodeCount bit seq.
		ids |= (1 << (nFrame[j].ID & 0x000F));
8000290a:	94 8b       	ld.uh	r11,r10[0x0]
8000290c:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80002910:	ec 0b 09 4b 	lsl	r11,r6,r11
80002914:	16 48       	or	r8,r11
80002916:	5c 88       	casts.h	r8
		UINT16 ids_new = ids;
		//If counts the number of nodes active within ~1000 ms
		ids_new &= ((ids_new >> j) & 0x01);

		//If there was a node found at the j'th bit 1 is added to l
		if(ids_new == 1)
80002918:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000291c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002920:	f6 09 08 4b 	asr	r11,r11,r9
80002924:	f9 eb 00 0b 	and	r11,r12,r11
80002928:	fc 0b 19 00 	cp.h	r11,lr
8000292c:	c0 31       	brne	80002932 <nodeCount+0x36>
		{
			++l;
8000292e:	2f f7       	sub	r7,-1
80002930:	5c 57       	castu.b	r7
{
	UINT8 l;
	
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
80002932:	2f f9       	sub	r9,-1
80002934:	2f 6a       	sub	r10,-10
80002936:	59 09       	cp.w	r9,16
80002938:	ce 91       	brne	8000290a <nodeCount+0xe>
8000293a:	0e 96       	mov	r6,r7
8000293c:	48 99       	lddpc	r9,80002960 <nodeCount+0x64>
8000293e:	b2 08       	st.h	r9[0x0],r8
		{
			++l;
		}
	}
	//If the board itself is active on the bus we add 1
	if(CANRxReady(0) || CANTxReady(0))
80002940:	30 0c       	mov	r12,0
80002942:	f0 1f 00 09 	mcall	80002964 <nodeCount+0x68>
80002946:	c0 41       	brne	8000294e <nodeCount+0x52>
80002948:	f0 1f 00 08 	mcall	80002968 <nodeCount+0x6c>
8000294c:	c0 40       	breq	80002954 <nodeCount+0x58>
	{
		++l;
8000294e:	ec c7 ff ff 	sub	r7,r6,-1
80002952:	5c 57       	castu.b	r7
	}

	return l;
	
}
80002954:	0e 9c       	mov	r12,r7
80002956:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000295a:	00 00       	add	r0,r0
8000295c:	00 00       	add	r0,r0
8000295e:	06 74       	tst	r4,r3
80002960:	00 00       	add	r0,r0
80002962:	06 60       	and	r0,r3
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	21 d4       	sub	r4,29
80002968:	80 00       	ld.sh	r0,r0[0x0]
8000296a:	21 e8       	sub	r8,30

8000296c <initBoard>:
	dip204_printf_string("A L:");
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
{
8000296c:	d4 01       	pushm	lr
	//Enable ADC channels
	adc_enable( &AVR32_ADC, ADC_TEMPERATURE_CHANNEL );
8000296e:	30 0b       	mov	r11,0
80002970:	fe 7c 3c 00 	mov	r12,-50176
80002974:	f0 1f 00 10 	mcall	800029b4 <initBoard+0x48>
	adc_enable( &AVR32_ADC, ADC_LIGHT_CHANNEL );
80002978:	30 2b       	mov	r11,2
8000297a:	fe 7c 3c 00 	mov	r12,-50176
8000297e:	f0 1f 00 0e 	mcall	800029b4 <initBoard+0x48>

	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002982:	30 3a       	mov	r10,3
80002984:	e0 6b 1b 00 	mov	r11,6912
80002988:	ea 1b 00 b7 	orh	r11,0xb7
8000298c:	fe 7c 0c 00 	mov	r12,-62464
80002990:	f0 1f 00 0a 	mcall	800029b8 <initBoard+0x4c>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
80002994:	f0 1f 00 0a 	mcall	800029bc <initBoard+0x50>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002998:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
8000299a:	f0 1f 00 0a 	mcall	800029c0 <initBoard+0x54>
	Enable_global_interrupt();
8000299e:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
800029a0:	f0 1f 00 09 	mcall	800029c4 <initBoard+0x58>
	dip204_init(100,1);
800029a4:	30 1b       	mov	r11,1
800029a6:	36 4c       	mov	r12,100
800029a8:	f0 1f 00 08 	mcall	800029c8 <initBoard+0x5c>
	dip204_clear_display();
800029ac:	f0 1f 00 08 	mcall	800029cc <initBoard+0x60>
}
800029b0:	d8 02       	popm	pc
800029b2:	00 00       	add	r0,r0
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	20 0e       	sub	lr,0
800029b8:	80 00       	ld.sh	r0,r0[0x0]
800029ba:	33 f0       	mov	r0,63
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	20 f0       	sub	r0,15
800029c0:	80 00       	ld.sh	r0,r0[0x0]
800029c2:	32 d8       	mov	r8,45
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	20 64       	sub	r4,6
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	2f f0       	sub	r0,-1
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	2f 94       	sub	r4,-7

800029d0 <printLCD>:
	dip204_set_cursor_position(15, 3);
	dip204_printf_string("%d",  (lighttot/actNodes));
}

void printLCD(void)
{					
800029d0:	d4 01       	pushm	lr
	dip204_set_cursor_position(1, 1);
800029d2:	30 1b       	mov	r11,1
800029d4:	16 9c       	mov	r12,r11
800029d6:	f0 1f 00 17 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("Active nodes:");
800029da:	49 7c       	lddpc	r12,80002a34 <printLCD+0x64>
800029dc:	f0 1f 00 17 	mcall	80002a38 <printLCD+0x68>
	dip204_set_cursor_position(1, 2);
800029e0:	30 2b       	mov	r11,2
800029e2:	30 1c       	mov	r12,1
800029e4:	f0 1f 00 13 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("O T:");
800029e8:	49 5c       	lddpc	r12,80002a3c <printLCD+0x6c>
800029ea:	f0 1f 00 14 	mcall	80002a38 <printLCD+0x68>
	dip204_set_cursor_position(10, 2);
800029ee:	30 2b       	mov	r11,2
800029f0:	30 ac       	mov	r12,10
800029f2:	f0 1f 00 10 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("A T:");
800029f6:	49 3c       	lddpc	r12,80002a40 <printLCD+0x70>
800029f8:	f0 1f 00 10 	mcall	80002a38 <printLCD+0x68>
	dip204_set_cursor_position(1, 3);
800029fc:	30 3b       	mov	r11,3
800029fe:	30 1c       	mov	r12,1
80002a00:	f0 1f 00 0c 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("O L:");
80002a04:	49 0c       	lddpc	r12,80002a44 <printLCD+0x74>
80002a06:	f0 1f 00 0d 	mcall	80002a38 <printLCD+0x68>
	dip204_set_cursor_position(10, 3);
80002a0a:	30 3b       	mov	r11,3
80002a0c:	30 ac       	mov	r12,10
80002a0e:	f0 1f 00 09 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("A L:");
80002a12:	48 ec       	lddpc	r12,80002a48 <printLCD+0x78>
80002a14:	f0 1f 00 09 	mcall	80002a38 <printLCD+0x68>
	dip204_set_cursor_position(15, 1);
80002a18:	30 1b       	mov	r11,1
80002a1a:	30 fc       	mov	r12,15
80002a1c:	f0 1f 00 05 	mcall	80002a30 <printLCD+0x60>
	dip204_printf_string("%d", nodeCount());
80002a20:	f0 1f 00 0b 	mcall	80002a4c <printLCD+0x7c>
80002a24:	1a dc       	st.w	--sp,r12
80002a26:	48 bc       	lddpc	r12,80002a50 <printLCD+0x80>
80002a28:	f0 1f 00 04 	mcall	80002a38 <printLCD+0x68>
80002a2c:	2f fd       	sub	sp,-4
}
80002a2e:	d8 02       	popm	pc
80002a30:	80 00       	ld.sh	r0,r0[0x0]
80002a32:	2f 08       	sub	r8,-16
80002a34:	80 00       	ld.sh	r0,r0[0x0]
80002a36:	92 7c       	ld.sh	r12,r9[0xe]
80002a38:	80 00       	ld.sh	r0,r0[0x0]
80002a3a:	2e 70       	sub	r0,-25
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	92 8c       	ld.uh	r12,r9[0x0]
80002a40:	80 00       	ld.sh	r0,r0[0x0]
80002a42:	92 94       	ld.uh	r4,r9[0x2]
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	92 9c       	ld.uh	r12,r9[0x2]
80002a48:	80 00       	ld.sh	r0,r0[0x0]
80002a4a:	92 a4       	ld.uh	r4,r9[0x4]
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	28 fc       	sub	r12,-113
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	92 ac       	ld.uh	r12,r9[0x4]

80002a54 <average>:
	return l;
	
}

void average(void)
{
80002a54:	d4 21       	pushm	r4-r7,lr
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
80002a56:	f0 1f 00 1d 	mcall	80002ac8 <average+0x74>
80002a5a:	18 95       	mov	r5,r12
80002a5c:	49 cb       	lddpc	r11,80002acc <average+0x78>
80002a5e:	f6 c8 ff fc 	sub	r8,r11,-4

	return l;
	
}

void average(void)
80002a62:	f6 cb ff 5c 	sub	r11,r11,-164
80002a66:	30 07       	mov	r7,0
80002a68:	0e 96       	mov	r6,r7
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();

	for(int i = 0; i < 16; ++i)
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
80002a6a:	11 8a       	ld.ub	r10,r8[0x0]
80002a6c:	11 99       	ld.ub	r9,r8[0x1]
80002a6e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002a72:	12 06       	add	r6,r9
80002a74:	5c 86       	casts.h	r6
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
80002a76:	f1 3a ff fe 	ld.ub	r10,r8[-2]
80002a7a:	f1 39 ff ff 	ld.ub	r9,r8[-1]
80002a7e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002a82:	12 07       	add	r7,r9
80002a84:	5c 87       	casts.h	r7
80002a86:	2f 68       	sub	r8,-10
{
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();

	for(int i = 0; i < 16; ++i)
80002a88:	16 38       	cp.w	r8,r11
80002a8a:	cf 01       	brne	80002a6a <average+0x16>
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	dip204_set_cursor_position(15, 2);
80002a8c:	30 2b       	mov	r11,2
80002a8e:	30 fc       	mov	r12,15
80002a90:	f0 1f 00 10 	mcall	80002ad0 <average+0x7c>
	dip204_printf_string("%d",  (tempertot/actNodes));
80002a94:	49 04       	lddpc	r4,80002ad4 <average+0x80>
80002a96:	0e 99       	mov	r9,r7
80002a98:	5c 79       	castu.h	r9
80002a9a:	5c 75       	castu.h	r5
80002a9c:	f2 05 0d 08 	divu	r8,r9,r5
80002aa0:	5c 78       	castu.h	r8
80002aa2:	1a d8       	st.w	--sp,r8
80002aa4:	08 9c       	mov	r12,r4
80002aa6:	f0 1f 00 0d 	mcall	80002ad8 <average+0x84>
	dip204_set_cursor_position(15, 3);
80002aaa:	30 3b       	mov	r11,3
80002aac:	30 fc       	mov	r12,15
80002aae:	f0 1f 00 09 	mcall	80002ad0 <average+0x7c>
	dip204_printf_string("%d",  (lighttot/actNodes));
80002ab2:	f3 d6 c0 10 	bfextu	r9,r6,0x0,0x10
80002ab6:	f2 05 0d 08 	divu	r8,r9,r5
80002aba:	5c 78       	castu.h	r8
80002abc:	1a d8       	st.w	--sp,r8
80002abe:	08 9c       	mov	r12,r4
80002ac0:	f0 1f 00 06 	mcall	80002ad8 <average+0x84>
80002ac4:	2f ed       	sub	sp,-8
}
80002ac6:	d8 22       	popm	r4-r7,pc
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	28 fc       	sub	r12,-113
80002acc:	00 00       	add	r0,r0
80002ace:	06 74       	tst	r4,r3
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	2f 08       	sub	r8,-16
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	92 ac       	ld.uh	r12,r9[0x4]
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	2e 70       	sub	r0,-25

80002adc <readADC>:
	UINT8 mssg[8];

}nFrame[15];

void readADC(void)
{
80002adc:	eb cd 40 80 	pushm	r7,lr
	UINT32 readPot, readLight, readTemp;
	UINT16 potMSB, potLSB, lightMSB, lightLSB, tempMSB, tempLSB;

		
	//Reading ADC channels
	readLight = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80002ae0:	30 2b       	mov	r11,2
80002ae2:	fe 7c 3c 00 	mov	r12,-50176
80002ae6:	f0 1f 00 15 	mcall	80002b38 <readADC+0x5c>
80002aea:	18 97       	mov	r7,r12
	readTemp = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80002aec:	30 0b       	mov	r11,0
80002aee:	fe 7c 3c 00 	mov	r12,-50176
80002af2:	f0 1f 00 12 	mcall	80002b38 <readADC+0x5c>
	lightLSB = readLight & 0x000000FF;
				
	tempMSB = (readTemp >> 8) & 0x00000003;
	tempLSB = readTemp & 0x000000FF;
	
	nFrame[0x00F & ownId].mssg[0] = lightMSB;
80002af6:	49 28       	lddpc	r8,80002b3c <readADC+0x60>
80002af8:	90 89       	ld.uh	r9,r8[0x0]
80002afa:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002afe:	49 1a       	lddpc	r10,80002b40 <readADC+0x64>
80002b00:	f2 0b 15 02 	lsl	r11,r9,0x2
80002b04:	f6 09 00 08 	add	r8,r11,r9
80002b08:	f4 08 00 18 	add	r8,r10,r8<<0x1
80002b0c:	fd d7 c1 02 	bfextu	lr,r7,0x8,0x2
80002b10:	b0 ae       	st.b	r8[0x2],lr
	nFrame[0x00F & ownId].mssg[1] = lightLSB;
80002b12:	b0 b7       	st.b	r8[0x3],r7
	nFrame[0x00F & ownId].mssg[2] = tempMSB;
80002b14:	f3 dc c1 02 	bfextu	r9,r12,0x8,0x2
80002b18:	b0 c9       	st.b	r8[0x4],r9
	nFrame[0x00F & ownId].mssg[3] = tempLSB;
80002b1a:	b0 dc       	st.b	r8[0x5],r12
	nFrame[0x00F & ownId].mssg[4] = 0;
80002b1c:	f0 ca ff fc 	sub	r10,r8,-4
80002b20:	30 09       	mov	r9,0
80002b22:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[5] = 0;
80002b24:	f0 ca ff fb 	sub	r10,r8,-5
80002b28:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[6] = 0;
80002b2a:	f0 ca ff fa 	sub	r10,r8,-6
80002b2e:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[7] = 0;
80002b30:	2f 98       	sub	r8,-7
80002b32:	b0 a9       	st.b	r8[0x2],r9
}
80002b34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	20 28       	sub	r8,2
80002b3c:	00 00       	add	r0,r0
80002b3e:	00 08       	add	r8,r0
80002b40:	00 00       	add	r0,r0
80002b42:	06 74       	tst	r4,r3

80002b44 <ownADC>:

void ownADC(void)
{
80002b44:	eb cd 40 e0 	pushm	r5-r7,lr
	UINT16 light = 0;
	UINT16 temper= 0;
	
	readADC();
80002b48:	f0 1f 00 15 	mcall	80002b9c <ownADC+0x58>

	// Read light, 2 MSB msg[2], 8 LSB msg[3]
	light = (((UINT16)nFrame[0x00F & ownId].mssg[2]) << 8 ) | nFrame[0x00F & ownId].mssg[3];
80002b4c:	49 58       	lddpc	r8,80002ba0 <ownADC+0x5c>
80002b4e:	90 88       	ld.uh	r8,r8[0x0]
80002b50:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002b54:	49 49       	lddpc	r9,80002ba4 <ownADC+0x60>
80002b56:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002b5a:	f2 08 00 1a 	add	r10,r9,r8<<0x1
80002b5e:	15 c6       	ld.ub	r6,r10[0x4]
80002b60:	15 d9       	ld.ub	r9,r10[0x5]
80002b62:	f3 e6 10 86 	or	r6,r9,r6<<0x8
	
	// Read temp, 2 MSB msg[0], 8 LSB msg[1]
	temper = (((UINT16)nFrame[0x00F & ownId].mssg[0]) << 8 ) | nFrame[0x00F & ownId].mssg[1];
80002b66:	15 a5       	ld.ub	r5,r10[0x2]
80002b68:	15 b8       	ld.ub	r8,r10[0x3]
80002b6a:	f1 e5 10 85 	or	r5,r8,r5<<0x8
	
	dip204_set_cursor_position(6, 2);
80002b6e:	30 2b       	mov	r11,2
80002b70:	30 6c       	mov	r12,6
80002b72:	f0 1f 00 0e 	mcall	80002ba8 <ownADC+0x64>
	dip204_printf_string("%d", light);
80002b76:	48 e7       	lddpc	r7,80002bac <ownADC+0x68>
80002b78:	5c 76       	castu.h	r6
80002b7a:	1a d6       	st.w	--sp,r6
80002b7c:	0e 9c       	mov	r12,r7
80002b7e:	f0 1f 00 0d 	mcall	80002bb0 <ownADC+0x6c>
	dip204_set_cursor_position(6, 3);
80002b82:	30 3b       	mov	r11,3
80002b84:	30 6c       	mov	r12,6
80002b86:	f0 1f 00 09 	mcall	80002ba8 <ownADC+0x64>
	dip204_printf_string("%d", temper);
80002b8a:	5c 75       	castu.h	r5
80002b8c:	1a d5       	st.w	--sp,r5
80002b8e:	0e 9c       	mov	r12,r7
80002b90:	f0 1f 00 08 	mcall	80002bb0 <ownADC+0x6c>
80002b94:	2f ed       	sub	sp,-8

}
80002b96:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002b9a:	00 00       	add	r0,r0
80002b9c:	80 00       	ld.sh	r0,r0[0x0]
80002b9e:	2a dc       	sub	r12,-83
80002ba0:	00 00       	add	r0,r0
80002ba2:	00 08       	add	r8,r0
80002ba4:	00 00       	add	r0,r0
80002ba6:	06 74       	tst	r4,r3
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	2f 08       	sub	r8,-16
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	92 ac       	ld.uh	r12,r9[0x4]
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2e 70       	sub	r0,-25

80002bb4 <main>:
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) {
80002bb4:	d4 31       	pushm	r0-r7,lr
80002bb6:	20 3d       	sub	sp,12
	
	initBoard();
80002bb8:	f0 1f 00 36 	mcall	80002c90 <main+0xdc>

	UINT16 Mask = 0xFFF0; 
	UINT16 flt = 0x1200;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
80002bbc:	e0 68 12 00 	mov	r8,4608
80002bc0:	ba 08       	st.h	sp[0x0],r8
80002bc2:	ba 18       	st.h	sp[0x2],r8
80002bc4:	ba 28       	st.h	sp[0x4],r8
80002bc6:	ba 38       	st.h	sp[0x6],r8
80002bc8:	ba 48       	st.h	sp[0x8],r8
80002bca:	ba 58       	st.h	sp[0xa],r8
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);
80002bcc:	1a 99       	mov	r9,sp
80002bce:	e0 6a ff f0 	mov	r10,65520
80002bd2:	30 7b       	mov	r11,7
80002bd4:	30 0c       	mov	r12,0
80002bd6:	f0 1f 00 30 	mcall	80002c94 <main+0xe0>

	while(1){

		adc_start(&AVR32_ADC);
80002bda:	fe 73 3c 00 	mov	r3,-50176

		ids &= 0x0;
80002bde:	4a f2       	lddpc	r2,80002c98 <main+0xe4>
80002be0:	30 05       	mov	r5,0

		//Clear memory contents
		ClearMessages(msg);
80002be2:	4a f6       	lddpc	r6,80002c9c <main+0xe8>

		//Read any message available
		if(CANRxReady(0)){
80002be4:	30 07       	mov	r7,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002be6:	4a f0       	lddpc	r0,80002ca0 <main+0xec>
80002be8:	4a f1       	lddpc	r1,80002ca4 <main+0xf0>
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) {
80002bea:	ec c4 ff f8 	sub	r4,r6,-8
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);

	while(1){

		adc_start(&AVR32_ADC);
80002bee:	06 9c       	mov	r12,r3
80002bf0:	f0 1f 00 2e 	mcall	80002ca8 <main+0xf4>

		ids &= 0x0;
80002bf4:	a4 05       	st.h	r2[0x0],r5

		//Clear memory contents
		ClearMessages(msg);
80002bf6:	0c 9c       	mov	r12,r6
80002bf8:	f0 1f 00 2d 	mcall	80002cac <main+0xf8>

		//Read any message available
		if(CANRxReady(0)){
80002bfc:	0e 9c       	mov	r12,r7
80002bfe:	f0 1f 00 2d 	mcall	80002cb0 <main+0xfc>
80002c02:	c1 60       	breq	80002c2e <main+0x7a>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002c04:	00 99       	mov	r9,r0
80002c06:	0c 9a       	mov	r10,r6
80002c08:	02 9b       	mov	r11,r1
80002c0a:	0e 9c       	mov	r12,r7
80002c0c:	f0 1f 00 2a 	mcall	80002cb4 <main+0x100>
80002c10:	c0 f0       	breq	80002c2e <main+0x7a>
			{					
				nFrame[0x00F & Ident].ID = Ident;
80002c12:	62 08       	ld.w	r8,r1[0x0]
80002c14:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80002c18:	f2 09 00 29 	add	r9,r9,r9<<0x2
80002c1c:	4a 7a       	lddpc	r10,80002cb8 <main+0x104>
80002c1e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80002c22:	12 b8       	st.h	r9++,r8
80002c24:	0c 98       	mov	r8,r6

				//Adding frame to the struct
				for(int i = 0; i < 8; ++i)
				{
					nFrame[0x00F & Ident].mssg[i] = msg[i];
80002c26:	11 3a       	ld.ub	r10,r8++
80002c28:	12 ca       	st.b	r9++,r10
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
			{					
				nFrame[0x00F & Ident].ID = Ident;

				//Adding frame to the struct
				for(int i = 0; i < 8; ++i)
80002c2a:	08 38       	cp.w	r8,r4
80002c2c:	cf d1       	brne	80002c26 <main+0x72>
					nFrame[0x00F & Ident].mssg[i] = msg[i];
				}
			}
		}

		if(CANTxReady(0))
80002c2e:	0e 9c       	mov	r12,r7
80002c30:	f0 1f 00 23 	mcall	80002cbc <main+0x108>
80002c34:	c2 10       	breq	80002c76 <main+0xc2>
		{
			//readADC();
			CANSendMsg(0, 0x1202, msg, 8, 0);
80002c36:	0e 98       	mov	r8,r7
80002c38:	30 89       	mov	r9,8
80002c3a:	0c 9a       	mov	r10,r6
80002c3c:	e0 6b 12 02 	mov	r11,4610
80002c40:	0e 9c       	mov	r12,r7
80002c42:	f0 1f 00 20 	mcall	80002cc0 <main+0x10c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c46:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c4a:	e0 6a 1b 00 	mov	r10,6912
80002c4e:	ea 1a 00 b7 	orh	r10,0xb7
80002c52:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c56:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c5a:	14 38       	cp.w	r8,r10
80002c5c:	e0 88 00 08 	brls	80002c6c <main+0xb8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c60:	12 38       	cp.w	r8,r9
80002c62:	fe 98 ff fa 	brls	80002c56 <main+0xa2>
80002c66:	12 3a       	cp.w	r10,r9
80002c68:	c0 73       	brcs	80002c76 <main+0xc2>
80002c6a:	cf 6b       	rjmp	80002c56 <main+0xa2>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c6c:	12 38       	cp.w	r8,r9
80002c6e:	e0 8b 00 04 	brhi	80002c76 <main+0xc2>
80002c72:	12 3a       	cp.w	r10,r9
80002c74:	cf 12       	brcc	80002c56 <main+0xa2>
			delay_ms(1000);
		}
		
		dip204_clear_display();
80002c76:	f0 1f 00 14 	mcall	80002cc4 <main+0x110>
		printLCD();
80002c7a:	f0 1f 00 14 	mcall	80002cc8 <main+0x114>
		ownADC();
80002c7e:	f0 1f 00 14 	mcall	80002ccc <main+0x118>
		nodeCount();
80002c82:	f0 1f 00 14 	mcall	80002cd0 <main+0x11c>
		average();
80002c86:	f0 1f 00 14 	mcall	80002cd4 <main+0x120>
		dip204_hide_cursor();
80002c8a:	f0 1f 00 14 	mcall	80002cd8 <main+0x124>
		
		
	}
80002c8e:	cb 0b       	rjmp	80002bee <main+0x3a>
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	29 6c       	sub	r12,-106
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	25 ec       	sub	r12,94
80002c98:	00 00       	add	r0,r0
80002c9a:	06 60       	and	r0,r3
80002c9c:	00 00       	add	r0,r0
80002c9e:	06 64       	and	r4,r3
80002ca0:	00 00       	add	r0,r0
80002ca2:	06 6c       	and	r12,r3
80002ca4:	00 00       	add	r0,r0
80002ca6:	06 70       	tst	r0,r3
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	20 08       	sub	r8,0
80002cac:	80 00       	ld.sh	r0,r0[0x0]
80002cae:	20 50       	sub	r0,5
80002cb0:	80 00       	ld.sh	r0,r0[0x0]
80002cb2:	21 d4       	sub	r4,29
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	27 7c       	sub	r12,119
80002cb8:	00 00       	add	r0,r0
80002cba:	06 74       	tst	r4,r3
80002cbc:	80 00       	ld.sh	r0,r0[0x0]
80002cbe:	21 e8       	sub	r8,30
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	26 44       	sub	r4,100
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	2f 94       	sub	r4,-7
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	29 d0       	sub	r0,-99
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2b 44       	sub	r4,-76
80002cd0:	80 00       	ld.sh	r0,r0[0x0]
80002cd2:	28 fc       	sub	r12,-113
80002cd4:	80 00       	ld.sh	r0,r0[0x0]
80002cd6:	2a 54       	sub	r4,-91
80002cd8:	80 00       	ld.sh	r0,r0[0x0]
80002cda:	2f 64       	sub	r4,-10

80002cdc <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002cdc:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002ce0:	49 18       	lddpc	r8,80002d24 <LED_On+0x48>
80002ce2:	70 09       	ld.w	r9,r8[0x0]
80002ce4:	f9 e9 10 09 	or	r9,r12,r9
80002ce8:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002cea:	58 0c       	cp.w	r12,0
80002cec:	5e 0c       	reteq	r12
80002cee:	48 f8       	lddpc	r8,80002d28 <LED_On+0x4c>
80002cf0:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002cf2:	18 9a       	mov	r10,r12
80002cf4:	5c 9a       	brev	r10
80002cf6:	f4 0a 12 00 	clz	r10,r10
80002cfa:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002cfc:	f4 09 15 04 	lsl	r9,r10,0x4
80002d00:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002d02:	70 09       	ld.w	r9,r8[0x0]
80002d04:	a9 69       	lsl	r9,0x8
80002d06:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002d0a:	70 1b       	ld.w	r11,r8[0x4]
80002d0c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002d10:	70 1b       	ld.w	r11,r8[0x4]
80002d12:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d16:	70 1b       	ld.w	r11,r8[0x4]
80002d18:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d1a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d1e:	ce a1       	brne	80002cf2 <LED_On+0x16>
80002d20:	5e fc       	retal	r12
80002d22:	00 00       	add	r0,r0
80002d24:	00 00       	add	r0,r0
80002d26:	00 0c       	add	r12,r0
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	92 b0       	ld.uh	r0,r9[0x6]

80002d2c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002d2c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002d30:	49 28       	lddpc	r8,80002d78 <LED_Off+0x4c>
80002d32:	70 09       	ld.w	r9,r8[0x0]
80002d34:	f8 0a 11 ff 	rsub	r10,r12,-1
80002d38:	f5 e9 00 09 	and	r9,r10,r9
80002d3c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002d3e:	58 0c       	cp.w	r12,0
80002d40:	5e 0c       	reteq	r12
80002d42:	48 f8       	lddpc	r8,80002d7c <LED_Off+0x50>
80002d44:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002d46:	18 9a       	mov	r10,r12
80002d48:	5c 9a       	brev	r10
80002d4a:	f4 0a 12 00 	clz	r10,r10
80002d4e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002d50:	f4 09 15 04 	lsl	r9,r10,0x4
80002d54:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002d56:	70 09       	ld.w	r9,r8[0x0]
80002d58:	a9 69       	lsl	r9,0x8
80002d5a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002d5e:	70 1b       	ld.w	r11,r8[0x4]
80002d60:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002d64:	70 1b       	ld.w	r11,r8[0x4]
80002d66:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d6a:	70 1b       	ld.w	r11,r8[0x4]
80002d6c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d6e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d72:	ce a1       	brne	80002d46 <LED_Off+0x1a>
80002d74:	5e fc       	retal	r12
80002d76:	00 00       	add	r0,r0
80002d78:	00 00       	add	r0,r0
80002d7a:	00 0c       	add	r12,r0
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	92 b0       	ld.uh	r0,r9[0x6]

80002d80 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002d80:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002d82:	30 2b       	mov	r11,2
80002d84:	fe 7c 28 00 	mov	r12,-55296
80002d88:	f0 1f 00 02 	mcall	80002d90 <dip204_select+0x10>
}
80002d8c:	d8 02       	popm	pc
80002d8e:	00 00       	add	r0,r0
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	35 2e       	mov	lr,82

80002d94 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002d94:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002d98:	f8 c8 ff f8 	sub	r8,r12,-8
80002d9c:	30 69       	mov	r9,6
80002d9e:	f2 08 18 00 	cp.b	r8,r9
80002da2:	e0 8b 00 0f 	brhi	80002dc0 <dip204_write_byte+0x2c>
80002da6:	30 19       	mov	r9,1
80002da8:	f2 08 09 48 	lsl	r8,r9,r8
80002dac:	e2 18 00 55 	andl	r8,0x55,COH
80002db0:	c0 80       	breq	80002dc0 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002db2:	18 9b       	mov	r11,r12
80002db4:	fe 7c 28 00 	mov	r12,-55296
80002db8:	f0 1f 00 0c 	mcall	80002de8 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002dc0:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002dc2:	f8 07 16 18 	lsr	r7,r12,0x18
80002dc6:	0e 9b       	mov	r11,r7
80002dc8:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002dcc:	fe 7c 28 00 	mov	r12,-55296
80002dd0:	f0 1f 00 06 	mcall	80002de8 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002dd4:	ee 0b 15 04 	lsl	r11,r7,0x4
80002dd8:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002ddc:	fe 7c 28 00 	mov	r12,-55296
80002de0:	f0 1f 00 02 	mcall	80002de8 <dip204_write_byte+0x54>
80002de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002de8:	80 00       	ld.sh	r0,r0[0x0]
80002dea:	36 5e       	mov	lr,101

80002dec <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002dec:	eb cd 40 c0 	pushm	r6-r7,lr
80002df0:	20 1d       	sub	sp,4
80002df2:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002df4:	fa c7 ff fc 	sub	r7,sp,-4
80002df8:	30 08       	mov	r8,0
80002dfa:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002dfc:	30 0b       	mov	r11,0
80002dfe:	fe 7c 28 00 	mov	r12,-55296
80002e02:	f0 1f 00 08 	mcall	80002e20 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002e06:	0e 9b       	mov	r11,r7
80002e08:	fe 7c 28 00 	mov	r12,-55296
80002e0c:	f0 1f 00 06 	mcall	80002e24 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002e10:	1b b8       	ld.ub	r8,sp[0x3]
80002e12:	5c 98       	brev	r8
80002e14:	b9 88       	lsr	r8,0x18
80002e16:	ac 88       	st.b	r6[0x0],r8
}
80002e18:	2f fd       	sub	sp,-4
80002e1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e1e:	00 00       	add	r0,r0
80002e20:	80 00       	ld.sh	r0,r0[0x0]
80002e22:	36 5e       	mov	lr,101
80002e24:	80 00       	ld.sh	r0,r0[0x0]
80002e26:	36 82       	mov	r2,104

80002e28 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002e28:	eb cd 40 c0 	pushm	r6-r7,lr
80002e2c:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002e2e:	fa c7 ff fc 	sub	r7,sp,-4
80002e32:	30 08       	mov	r8,0
80002e34:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002e36:	e0 6c 00 fc 	mov	r12,252
80002e3a:	f0 1f 00 07 	mcall	80002e54 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002e3e:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002e40:	0e 9c       	mov	r12,r7
80002e42:	f0 1f 00 06 	mcall	80002e58 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002e46:	1b b8       	ld.ub	r8,sp[0x3]
80002e48:	ec 08 18 00 	cp.b	r8,r6
80002e4c:	cf a5       	brlt	80002e40 <dip204_wait_busy+0x18>
}
80002e4e:	2f fd       	sub	sp,-4
80002e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	2d 94       	sub	r4,-39
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	2d ec       	sub	r12,-34

80002e5c <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002e5c:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e5e:	30 2b       	mov	r11,2
80002e60:	fe 7c 28 00 	mov	r12,-55296
80002e64:	f0 1f 00 02 	mcall	80002e6c <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002e68:	d8 02       	popm	pc
80002e6a:	00 00       	add	r0,r0
80002e6c:	80 00       	ld.sh	r0,r0[0x0]
80002e6e:	35 7a       	mov	r10,87

80002e70 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002e70:	d4 21       	pushm	r4-r7,lr
80002e72:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002e74:	fa ca ff d4 	sub	r10,sp,-44
80002e78:	18 9b       	mov	r11,r12
80002e7a:	1a 9c       	mov	r12,sp
80002e7c:	f0 1f 00 1e 	mcall	80002ef4 <dip204_printf_string+0x84>
80002e80:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002e82:	31 38       	mov	r8,19
80002e84:	f0 0c 18 00 	cp.b	r12,r8
80002e88:	e0 8b 00 0e 	brhi	80002ea4 <dip204_printf_string+0x34>
80002e8c:	30 0a       	mov	r10,0
80002e8e:	31 49       	mov	r9,20
80002e90:	fa c8 ff e8 	sub	r8,sp,-24
80002e94:	18 08       	add	r8,r12
80002e96:	f1 6a ff e8 	st.b	r8[-24],r10
80002e9a:	2f fc       	sub	r12,-1
80002e9c:	5c 5c       	castu.b	r12
80002e9e:	f2 0c 18 00 	cp.b	r12,r9
80002ea2:	cf 71       	brne	80002e90 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002ea4:	f0 1f 00 15 	mcall	80002ef8 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002ea8:	30 08       	mov	r8,0
80002eaa:	1b 89       	ld.ub	r9,sp[0x0]
80002eac:	f0 09 18 00 	cp.b	r9,r8
80002eb0:	c1 e0       	breq	80002eec <dip204_printf_string+0x7c>
80002eb2:	30 06       	mov	r6,0
80002eb4:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002eb6:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002eba:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ebc:	08 9c       	mov	r12,r4
80002ebe:	f0 1f 00 10 	mcall	80002efc <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002ec2:	fa c8 ff e8 	sub	r8,sp,-24
80002ec6:	f0 06 00 06 	add	r6,r8,r6
80002eca:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002ece:	f0 1f 00 0c 	mcall	80002efc <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002ed2:	2f f7       	sub	r7,-1
80002ed4:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002ed6:	f0 1f 00 0b 	mcall	80002f00 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002eda:	0e 96       	mov	r6,r7
80002edc:	fa c8 ff e8 	sub	r8,sp,-24
80002ee0:	0e 08       	add	r8,r7
80002ee2:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002ee6:	ea 08 18 00 	cp.b	r8,r5
80002eea:	ce 91       	brne	80002ebc <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002eec:	f0 1f 00 06 	mcall	80002f04 <dip204_printf_string+0x94>
}
80002ef0:	2f ad       	sub	sp,-24
80002ef2:	d8 22       	popm	r4-r7,pc
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	38 58       	mov	r8,-123
80002ef8:	80 00       	ld.sh	r0,r0[0x0]
80002efa:	2d 80       	sub	r0,-40
80002efc:	80 00       	ld.sh	r0,r0[0x0]
80002efe:	2d 94       	sub	r4,-39
80002f00:	80 00       	ld.sh	r0,r0[0x0]
80002f02:	2e 28       	sub	r8,-30
80002f04:	80 00       	ld.sh	r0,r0[0x0]
80002f06:	2e 5c       	sub	r12,-27

80002f08 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002f08:	eb cd 40 c0 	pushm	r6-r7,lr
80002f0c:	18 96       	mov	r6,r12
80002f0e:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002f10:	f0 1f 00 11 	mcall	80002f54 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002f14:	31 48       	mov	r8,20
80002f16:	f0 06 18 00 	cp.b	r6,r8
80002f1a:	5f 89       	srls	r9
80002f1c:	30 48       	mov	r8,4
80002f1e:	f0 07 18 00 	cp.b	r7,r8
80002f22:	5f 88       	srls	r8
80002f24:	f3 e8 00 08 	and	r8,r9,r8
80002f28:	c0 31       	brne	80002f2e <dip204_set_cursor_position+0x26>
80002f2a:	30 06       	mov	r6,0
80002f2c:	c0 68       	rjmp	80002f38 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002f2e:	28 16       	sub	r6,-127
80002f30:	20 17       	sub	r7,1
80002f32:	a5 77       	lsl	r7,0x5
80002f34:	0e 06       	add	r6,r7
80002f36:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f38:	e0 6c 00 f8 	mov	r12,248
80002f3c:	f0 1f 00 07 	mcall	80002f58 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002f40:	0c 9c       	mov	r12,r6
80002f42:	f0 1f 00 06 	mcall	80002f58 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002f46:	f0 1f 00 06 	mcall	80002f5c <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002f4a:	f0 1f 00 06 	mcall	80002f60 <dip204_set_cursor_position+0x58>
}
80002f4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f52:	00 00       	add	r0,r0
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2d 80       	sub	r0,-40
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	2d 94       	sub	r4,-39
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	2e 28       	sub	r8,-30
80002f60:	80 00       	ld.sh	r0,r0[0x0]
80002f62:	2e 5c       	sub	r12,-27

80002f64 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002f64:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002f66:	f0 1f 00 08 	mcall	80002f84 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f6a:	e0 6c 00 f8 	mov	r12,248
80002f6e:	f0 1f 00 07 	mcall	80002f88 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002f72:	30 cc       	mov	r12,12
80002f74:	f0 1f 00 05 	mcall	80002f88 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002f78:	f0 1f 00 05 	mcall	80002f8c <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002f7c:	f0 1f 00 05 	mcall	80002f90 <dip204_hide_cursor+0x2c>
}
80002f80:	d8 02       	popm	pc
80002f82:	00 00       	add	r0,r0
80002f84:	80 00       	ld.sh	r0,r0[0x0]
80002f86:	2d 80       	sub	r0,-40
80002f88:	80 00       	ld.sh	r0,r0[0x0]
80002f8a:	2d 94       	sub	r4,-39
80002f8c:	80 00       	ld.sh	r0,r0[0x0]
80002f8e:	2e 28       	sub	r8,-30
80002f90:	80 00       	ld.sh	r0,r0[0x0]
80002f92:	2e 5c       	sub	r12,-27

80002f94 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002f94:	d4 01       	pushm	lr
  dip204_select();
80002f96:	f0 1f 00 13 	mcall	80002fe0 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f9a:	e0 6c 00 f8 	mov	r12,248
80002f9e:	f0 1f 00 12 	mcall	80002fe4 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002fa2:	30 1c       	mov	r12,1
80002fa4:	f0 1f 00 10 	mcall	80002fe4 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fa8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fac:	e0 69 bb 80 	mov	r9,48000
80002fb0:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002fb4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002fb8:	14 38       	cp.w	r8,r10
80002fba:	e0 88 00 08 	brls	80002fca <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002fbe:	12 38       	cp.w	r8,r9
80002fc0:	fe 98 ff fa 	brls	80002fb4 <dip204_clear_display+0x20>
80002fc4:	12 3a       	cp.w	r10,r9
80002fc6:	c0 73       	brcs	80002fd4 <dip204_clear_display+0x40>
80002fc8:	cf 6b       	rjmp	80002fb4 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002fca:	12 38       	cp.w	r8,r9
80002fcc:	e0 8b 00 04 	brhi	80002fd4 <dip204_clear_display+0x40>
80002fd0:	12 3a       	cp.w	r10,r9
80002fd2:	cf 12       	brcc	80002fb4 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002fd4:	f0 1f 00 05 	mcall	80002fe8 <dip204_clear_display+0x54>
  dip204_unselect();
80002fd8:	f0 1f 00 05 	mcall	80002fec <dip204_clear_display+0x58>
}
80002fdc:	d8 02       	popm	pc
80002fde:	00 00       	add	r0,r0
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	2d 80       	sub	r0,-40
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	2d 94       	sub	r4,-39
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	2e 28       	sub	r8,-30
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	2e 5c       	sub	r12,-27

80002ff0 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002ff0:	eb cd 40 80 	pushm	r7,lr
80002ff4:	20 4d       	sub	sp,16
80002ff6:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002ff8:	58 1c       	cp.w	r12,1
80002ffa:	c3 01       	brne	8000305a <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002ffc:	30 69       	mov	r9,6
80002ffe:	4f a8       	lddpc	r8,800031e4 <dip204_init+0x1f4>
80003000:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80003002:	30 2b       	mov	r11,2
80003004:	33 2c       	mov	r12,50
80003006:	f0 1f 00 79 	mcall	800031e8 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
8000300a:	30 08       	mov	r8,0
8000300c:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
8000300e:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80003010:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80003012:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80003014:	1a 9c       	mov	r12,sp
80003016:	f0 1f 00 76 	mcall	800031ec <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000301a:	58 07       	cp.w	r7,0
8000301c:	f9 b7 01 31 	movne	r7,49
80003020:	f9 b7 00 01 	moveq	r7,1
80003024:	4f 38       	lddpc	r8,800031f0 <dip204_init+0x200>
80003026:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80003028:	4f 3b       	lddpc	r11,800031f4 <dip204_init+0x204>
8000302a:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000302c:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80003030:	ab a8       	sbr	r8,0xa
80003032:	30 89       	mov	r9,8
80003034:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80003038:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000303a:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000303c:	33 28       	mov	r8,50
8000303e:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80003040:	30 08       	mov	r8,0
80003042:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80003044:	4e 87       	lddpc	r7,800031e4 <dip204_init+0x1f4>
80003046:	6e 0c       	ld.w	r12,r7[0x0]
80003048:	f0 1f 00 6c 	mcall	800031f8 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000304c:	6e 08       	ld.w	r8,r7[0x0]
8000304e:	30 1c       	mov	r12,1
80003050:	f8 08 09 4c 	lsl	r12,r12,r8
80003054:	f0 1f 00 6a 	mcall	800031fc <dip204_init+0x20c>
80003058:	c0 a8       	rjmp	8000306c <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
8000305a:	58 0b       	cp.w	r11,0
8000305c:	c0 50       	breq	80003066 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000305e:	33 2c       	mov	r12,50
80003060:	f0 1f 00 68 	mcall	80003200 <dip204_init+0x210>
80003064:	c0 48       	rjmp	8000306c <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80003066:	33 2c       	mov	r12,50
80003068:	f0 1f 00 67 	mcall	80003204 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000306c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003070:	e2 79 a9 80 	mov	r9,240000
80003074:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003078:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000307c:	14 38       	cp.w	r8,r10
8000307e:	e0 88 00 08 	brls	8000308e <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003082:	12 38       	cp.w	r8,r9
80003084:	fe 98 ff fa 	brls	80003078 <dip204_init+0x88>
80003088:	12 3a       	cp.w	r10,r9
8000308a:	c6 e3       	brcs	80003166 <dip204_init+0x176>
8000308c:	cf 6b       	rjmp	80003078 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000308e:	12 38       	cp.w	r8,r9
80003090:	e0 8b 00 6b 	brhi	80003166 <dip204_init+0x176>
80003094:	12 3a       	cp.w	r10,r9
80003096:	c6 83       	brcs	80003166 <dip204_init+0x176>
80003098:	cf 0b       	rjmp	80003078 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000309a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000309e:	14 38       	cp.w	r8,r10
800030a0:	e0 88 00 08 	brls	800030b0 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030a4:	12 38       	cp.w	r8,r9
800030a6:	fe 98 ff fa 	brls	8000309a <dip204_init+0xaa>
800030aa:	12 3a       	cp.w	r10,r9
800030ac:	c6 b3       	brcs	80003182 <dip204_init+0x192>
800030ae:	cf 6b       	rjmp	8000309a <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030b0:	12 38       	cp.w	r8,r9
800030b2:	e0 8b 00 68 	brhi	80003182 <dip204_init+0x192>
800030b6:	12 3a       	cp.w	r10,r9
800030b8:	c6 53       	brcs	80003182 <dip204_init+0x192>
800030ba:	cf 0b       	rjmp	8000309a <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030bc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030c0:	14 38       	cp.w	r8,r10
800030c2:	e0 88 00 08 	brls	800030d2 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030c6:	12 38       	cp.w	r8,r9
800030c8:	fe 98 ff fa 	brls	800030bc <dip204_init+0xcc>
800030cc:	12 3a       	cp.w	r10,r9
800030ce:	c6 23       	brcs	80003192 <dip204_init+0x1a2>
800030d0:	cf 6b       	rjmp	800030bc <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030d2:	12 38       	cp.w	r8,r9
800030d4:	e0 8b 00 5f 	brhi	80003192 <dip204_init+0x1a2>
800030d8:	12 3a       	cp.w	r10,r9
800030da:	c5 c3       	brcs	80003192 <dip204_init+0x1a2>
800030dc:	cf 0b       	rjmp	800030bc <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800030de:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800030e2:	14 38       	cp.w	r8,r10
800030e4:	e0 88 00 08 	brls	800030f4 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800030e8:	12 38       	cp.w	r8,r9
800030ea:	fe 98 ff fa 	brls	800030de <dip204_init+0xee>
800030ee:	12 3a       	cp.w	r10,r9
800030f0:	c5 93       	brcs	800031a2 <dip204_init+0x1b2>
800030f2:	cf 6b       	rjmp	800030de <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800030f4:	12 38       	cp.w	r8,r9
800030f6:	e0 8b 00 56 	brhi	800031a2 <dip204_init+0x1b2>
800030fa:	12 3a       	cp.w	r10,r9
800030fc:	c5 33       	brcs	800031a2 <dip204_init+0x1b2>
800030fe:	cf 0b       	rjmp	800030de <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003100:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003104:	14 38       	cp.w	r8,r10
80003106:	e0 88 00 08 	brls	80003116 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000310a:	12 38       	cp.w	r8,r9
8000310c:	fe 98 ff fa 	brls	80003100 <dip204_init+0x110>
80003110:	12 3a       	cp.w	r10,r9
80003112:	c5 03       	brcs	800031b2 <dip204_init+0x1c2>
80003114:	cf 6b       	rjmp	80003100 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003116:	12 38       	cp.w	r8,r9
80003118:	e0 8b 00 4d 	brhi	800031b2 <dip204_init+0x1c2>
8000311c:	12 3a       	cp.w	r10,r9
8000311e:	c4 a3       	brcs	800031b2 <dip204_init+0x1c2>
80003120:	cf 0b       	rjmp	80003100 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003122:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003126:	14 38       	cp.w	r8,r10
80003128:	e0 88 00 08 	brls	80003138 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000312c:	12 38       	cp.w	r8,r9
8000312e:	fe 98 ff fa 	brls	80003122 <dip204_init+0x132>
80003132:	12 3a       	cp.w	r10,r9
80003134:	c4 93       	brcs	800031c6 <dip204_init+0x1d6>
80003136:	cf 6b       	rjmp	80003122 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003138:	12 38       	cp.w	r8,r9
8000313a:	e0 8b 00 46 	brhi	800031c6 <dip204_init+0x1d6>
8000313e:	12 3a       	cp.w	r10,r9
80003140:	c4 33       	brcs	800031c6 <dip204_init+0x1d6>
80003142:	cf 0b       	rjmp	80003122 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003144:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003148:	14 38       	cp.w	r8,r10
8000314a:	e0 88 00 08 	brls	8000315a <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000314e:	12 38       	cp.w	r8,r9
80003150:	fe 98 ff fa 	brls	80003144 <dip204_init+0x154>
80003154:	12 3a       	cp.w	r10,r9
80003156:	c4 03       	brcs	800031d6 <dip204_init+0x1e6>
80003158:	cf 6b       	rjmp	80003144 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000315a:	12 38       	cp.w	r8,r9
8000315c:	e0 8b 00 3d 	brhi	800031d6 <dip204_init+0x1e6>
80003160:	12 3a       	cp.w	r10,r9
80003162:	c3 a3       	brcs	800031d6 <dip204_init+0x1e6>
80003164:	cf 0b       	rjmp	80003144 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80003166:	f0 1f 00 29 	mcall	80003208 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
8000316a:	e0 6c 00 f8 	mov	r12,248
8000316e:	f0 1f 00 28 	mcall	8000320c <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80003172:	33 4c       	mov	r12,52
80003174:	f0 1f 00 26 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003178:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000317c:	f0 ca d1 20 	sub	r10,r8,-12000
80003180:	c8 db       	rjmp	8000309a <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80003182:	30 9c       	mov	r12,9
80003184:	f0 1f 00 22 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003188:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000318c:	f0 ca d1 20 	sub	r10,r8,-12000
80003190:	c9 6b       	rjmp	800030bc <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80003192:	33 0c       	mov	r12,48
80003194:	f0 1f 00 1e 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003198:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000319c:	f0 ca d1 20 	sub	r10,r8,-12000
800031a0:	c9 fb       	rjmp	800030de <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800031a2:	30 fc       	mov	r12,15
800031a4:	f0 1f 00 1a 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031a8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031ac:	f0 ca d1 20 	sub	r10,r8,-12000
800031b0:	ca 8b       	rjmp	80003100 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800031b2:	30 1c       	mov	r12,1
800031b4:	f0 1f 00 16 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031b8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031bc:	e0 69 ea 60 	mov	r9,60000
800031c0:	f0 09 00 0a 	add	r10,r8,r9
800031c4:	ca fb       	rjmp	80003122 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800031c6:	30 6c       	mov	r12,6
800031c8:	f0 1f 00 11 	mcall	8000320c <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031cc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031d0:	f0 ca d1 20 	sub	r10,r8,-12000
800031d4:	cb 8b       	rjmp	80003144 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
800031d6:	f0 1f 00 0f 	mcall	80003210 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
800031da:	f0 1f 00 0f 	mcall	80003214 <dip204_init+0x224>
}
800031de:	2f cd       	sub	sp,-16
800031e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800031e4:	00 00       	add	r0,r0
800031e6:	00 10       	sub	r0,r0
800031e8:	80 00       	ld.sh	r0,r0[0x0]
800031ea:	32 18       	mov	r8,33
800031ec:	80 00       	ld.sh	r0,r0[0x0]
800031ee:	34 64       	mov	r4,70
800031f0:	00 00       	add	r0,r0
800031f2:	05 38       	ld.ub	r8,r2++
800031f4:	00 00       	add	r0,r0
800031f6:	05 18       	ld.sh	r8,r2++
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	34 1c       	mov	r12,65
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	34 52       	mov	r2,69
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	32 b8       	mov	r8,43
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	32 9c       	mov	r12,41
80003208:	80 00       	ld.sh	r0,r0[0x0]
8000320a:	2d 80       	sub	r0,-40
8000320c:	80 00       	ld.sh	r0,r0[0x0]
8000320e:	2d 94       	sub	r4,-39
80003210:	80 00       	ld.sh	r0,r0[0x0]
80003212:	2e 28       	sub	r8,-30
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	2e 5c       	sub	r12,-27

80003218 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003218:	f8 08 16 05 	lsr	r8,r12,0x5
8000321c:	a9 68       	lsl	r8,0x8
8000321e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80003222:	58 1b       	cp.w	r11,1
80003224:	c0 d0       	breq	8000323e <gpio_enable_module_pin+0x26>
80003226:	c0 63       	brcs	80003232 <gpio_enable_module_pin+0x1a>
80003228:	58 2b       	cp.w	r11,2
8000322a:	c1 00       	breq	8000324a <gpio_enable_module_pin+0x32>
8000322c:	58 3b       	cp.w	r11,3
8000322e:	c1 40       	breq	80003256 <gpio_enable_module_pin+0x3e>
80003230:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003232:	30 19       	mov	r9,1
80003234:	f2 0c 09 49 	lsl	r9,r9,r12
80003238:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000323a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000323c:	c1 28       	rjmp	80003260 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000323e:	30 19       	mov	r9,1
80003240:	f2 0c 09 49 	lsl	r9,r9,r12
80003244:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003246:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003248:	c0 c8       	rjmp	80003260 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000324a:	30 19       	mov	r9,1
8000324c:	f2 0c 09 49 	lsl	r9,r9,r12
80003250:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003252:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003254:	c0 68       	rjmp	80003260 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003256:	30 19       	mov	r9,1
80003258:	f2 0c 09 49 	lsl	r9,r9,r12
8000325c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000325e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003260:	30 19       	mov	r9,1
80003262:	f2 0c 09 4c 	lsl	r12,r9,r12
80003266:	91 2c       	st.w	r8[0x8],r12
80003268:	5e fd       	retal	0
8000326a:	d7 03       	nop

8000326c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000326c:	d4 21       	pushm	r4-r7,lr
8000326e:	18 97       	mov	r7,r12
80003270:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003272:	58 0b       	cp.w	r11,0
80003274:	c0 31       	brne	8000327a <gpio_enable_module+0xe>
80003276:	30 05       	mov	r5,0
80003278:	c0 d8       	rjmp	80003292 <gpio_enable_module+0x26>
8000327a:	30 06       	mov	r6,0
8000327c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000327e:	6e 1b       	ld.w	r11,r7[0x4]
80003280:	6e 0c       	ld.w	r12,r7[0x0]
80003282:	f0 1f 00 06 	mcall	80003298 <gpio_enable_module+0x2c>
80003286:	18 45       	or	r5,r12
		gpiomap++;
80003288:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000328a:	2f f6       	sub	r6,-1
8000328c:	0c 34       	cp.w	r4,r6
8000328e:	fe 9b ff f8 	brhi	8000327e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80003292:	0a 9c       	mov	r12,r5
80003294:	d8 22       	popm	r4-r7,pc
80003296:	00 00       	add	r0,r0
80003298:	80 00       	ld.sh	r0,r0[0x0]
8000329a:	32 18       	mov	r8,33

8000329c <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000329c:	f8 08 16 05 	lsr	r8,r12,0x5
800032a0:	a9 68       	lsl	r8,0x8
800032a2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800032a6:	30 19       	mov	r9,1
800032a8:	f2 0c 09 4c 	lsl	r12,r9,r12
800032ac:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800032b0:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032b4:	91 1c       	st.w	r8[0x4],r12
}
800032b6:	5e fc       	retal	r12

800032b8 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800032b8:	f8 08 16 05 	lsr	r8,r12,0x5
800032bc:	a9 68       	lsl	r8,0x8
800032be:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800032c2:	30 19       	mov	r9,1
800032c4:	f2 0c 09 4c 	lsl	r12,r9,r12
800032c8:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800032cc:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800032d0:	91 1c       	st.w	r8[0x4],r12
}
800032d2:	5e fc       	retal	r12

800032d4 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800032d4:	c0 08       	rjmp	800032d4 <_unhandled_interrupt>
800032d6:	d7 03       	nop

800032d8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800032d8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032da:	49 18       	lddpc	r8,8000331c <INTC_init_interrupts+0x44>
800032dc:	e3 b8 00 01 	mtsr	0x4,r8
800032e0:	49 0e       	lddpc	lr,80003320 <INTC_init_interrupts+0x48>
800032e2:	30 07       	mov	r7,0
800032e4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032e6:	49 0c       	lddpc	r12,80003324 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800032e8:	49 05       	lddpc	r5,80003328 <INTC_init_interrupts+0x50>
800032ea:	10 15       	sub	r5,r8
800032ec:	fe 76 08 00 	mov	r6,-63488
800032f0:	c1 08       	rjmp	80003310 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800032f2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800032f4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032f6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800032f8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800032fc:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800032fe:	10 3a       	cp.w	r10,r8
80003300:	fe 9b ff fc 	brhi	800032f8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003304:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003308:	2f f7       	sub	r7,-1
8000330a:	2f 8e       	sub	lr,-8
8000330c:	59 47       	cp.w	r7,20
8000330e:	c0 50       	breq	80003318 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003310:	7c 08       	ld.w	r8,lr[0x0]
80003312:	58 08       	cp.w	r8,0
80003314:	ce f1       	brne	800032f2 <INTC_init_interrupts+0x1a>
80003316:	cf 7b       	rjmp	80003304 <INTC_init_interrupts+0x2c>
80003318:	d8 22       	popm	r4-r7,pc
8000331a:	00 00       	add	r0,r0
8000331c:	80 00       	ld.sh	r0,r0[0x0]
8000331e:	90 00       	ld.sh	r0,r8[0x0]
80003320:	80 00       	ld.sh	r0,r0[0x0]
80003322:	93 30       	st.w	r9[0xc],r0
80003324:	80 00       	ld.sh	r0,r0[0x0]
80003326:	32 d4       	mov	r4,45
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	91 04       	st.w	r8[0x0],r4

8000332c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000332c:	fe 78 08 00 	mov	r8,-63488
80003330:	e0 69 00 83 	mov	r9,131
80003334:	f2 0c 01 0c 	sub	r12,r9,r12
80003338:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000333c:	f2 ca ff c0 	sub	r10,r9,-64
80003340:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003344:	58 08       	cp.w	r8,0
80003346:	c0 21       	brne	8000334a <_get_interrupt_handler+0x1e>
80003348:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000334a:	f0 08 12 00 	clz	r8,r8
8000334e:	48 5a       	lddpc	r10,80003360 <_get_interrupt_handler+0x34>
80003350:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003354:	f0 08 11 1f 	rsub	r8,r8,31
80003358:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000335a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000335e:	5e fc       	retal	r12
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	93 30       	st.w	r9[0xc],r0

80003364 <pm_set_osc0_mode>:
80003364:	78 a8       	ld.w	r8,r12[0x28]
80003366:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
8000336a:	99 a8       	st.w	r12[0x28],r8
8000336c:	5e fc       	retal	r12
8000336e:	d7 03       	nop

80003370 <pm_enable_osc0_crystal>:
80003370:	d4 01       	pushm	lr
80003372:	ec 5b bb 9f 	cp.w	r11,899999
80003376:	e0 8b 00 04 	brhi	8000337e <pm_enable_osc0_crystal+0xe>
8000337a:	30 4b       	mov	r11,4
8000337c:	c1 38       	rjmp	800033a2 <pm_enable_osc0_crystal+0x32>
8000337e:	e0 68 c6 bf 	mov	r8,50879
80003382:	ea 18 00 2d 	orh	r8,0x2d
80003386:	10 3b       	cp.w	r11,r8
80003388:	e0 8b 00 04 	brhi	80003390 <pm_enable_osc0_crystal+0x20>
8000338c:	30 5b       	mov	r11,5
8000338e:	c0 a8       	rjmp	800033a2 <pm_enable_osc0_crystal+0x32>
80003390:	e0 68 12 00 	mov	r8,4608
80003394:	ea 18 00 7a 	orh	r8,0x7a
80003398:	10 3b       	cp.w	r11,r8
8000339a:	f9 bb 03 06 	movlo	r11,6
8000339e:	f9 bb 02 07 	movhs	r11,7
800033a2:	f0 1f 00 02 	mcall	800033a8 <pm_enable_osc0_crystal+0x38>
800033a6:	d8 02       	popm	pc
800033a8:	80 00       	ld.sh	r0,r0[0x0]
800033aa:	33 64       	mov	r4,54

800033ac <pm_enable_clk0_no_wait>:
800033ac:	78 a8       	ld.w	r8,r12[0x28]
800033ae:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
800033b2:	99 a8       	st.w	r12[0x28],r8
800033b4:	78 08       	ld.w	r8,r12[0x0]
800033b6:	a3 a8       	sbr	r8,0x2
800033b8:	99 08       	st.w	r12[0x0],r8
800033ba:	5e fc       	retal	r12

800033bc <pm_wait_for_clk0_ready>:
800033bc:	79 58       	ld.w	r8,r12[0x54]
800033be:	e2 18 00 80 	andl	r8,0x80,COH
800033c2:	cf d0       	breq	800033bc <pm_wait_for_clk0_ready>
800033c4:	5e fc       	retal	r12
800033c6:	d7 03       	nop

800033c8 <pm_enable_clk0>:
800033c8:	eb cd 40 80 	pushm	r7,lr
800033cc:	18 97       	mov	r7,r12
800033ce:	f0 1f 00 04 	mcall	800033dc <pm_enable_clk0+0x14>
800033d2:	0e 9c       	mov	r12,r7
800033d4:	f0 1f 00 03 	mcall	800033e0 <pm_enable_clk0+0x18>
800033d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800033dc:	80 00       	ld.sh	r0,r0[0x0]
800033de:	33 ac       	mov	r12,58
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	33 bc       	mov	r12,59

800033e4 <pm_switch_to_clock>:
800033e4:	78 08       	ld.w	r8,r12[0x0]
800033e6:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
800033ea:	99 08       	st.w	r12[0x0],r8
800033ec:	5e fc       	retal	r12
800033ee:	d7 03       	nop

800033f0 <pm_switch_to_osc0>:
800033f0:	eb cd 40 c0 	pushm	r6-r7,lr
800033f4:	18 97       	mov	r7,r12
800033f6:	14 96       	mov	r6,r10
800033f8:	f0 1f 00 06 	mcall	80003410 <pm_switch_to_osc0+0x20>
800033fc:	0c 9b       	mov	r11,r6
800033fe:	0e 9c       	mov	r12,r7
80003400:	f0 1f 00 05 	mcall	80003414 <pm_switch_to_osc0+0x24>
80003404:	30 1b       	mov	r11,1
80003406:	0e 9c       	mov	r12,r7
80003408:	f0 1f 00 04 	mcall	80003418 <pm_switch_to_osc0+0x28>
8000340c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003410:	80 00       	ld.sh	r0,r0[0x0]
80003412:	33 70       	mov	r0,55
80003414:	80 00       	ld.sh	r0,r0[0x0]
80003416:	33 c8       	mov	r8,60
80003418:	80 00       	ld.sh	r0,r0[0x0]
8000341a:	33 e4       	mov	r4,62

8000341c <pwm_channel_init>:
8000341c:	58 0b       	cp.w	r11,0
8000341e:	c1 90       	breq	80003450 <pwm_channel_init+0x34>
80003420:	58 6c       	cp.w	r12,6
80003422:	e0 8b 00 17 	brhi	80003450 <pwm_channel_init+0x34>
80003426:	76 0a       	ld.w	r10,r11[0x0]
80003428:	fe 78 30 00 	mov	r8,-53248
8000342c:	f8 c9 ff f0 	sub	r9,r12,-16
80003430:	a5 79       	lsl	r9,0x5
80003432:	f0 09 00 09 	add	r9,r8,r9
80003436:	93 0a       	st.w	r9[0x0],r10
80003438:	76 19       	ld.w	r9,r11[0x4]
8000343a:	a5 7c       	lsl	r12,0x5
8000343c:	f0 0c 00 0c 	add	r12,r8,r12
80003440:	f8 c8 fd fc 	sub	r8,r12,-516
80003444:	91 09       	st.w	r8[0x0],r9
80003446:	76 28       	ld.w	r8,r11[0x8]
80003448:	f8 cc fd f8 	sub	r12,r12,-520
8000344c:	99 08       	st.w	r12[0x0],r8
8000344e:	5e fd       	retal	0
80003450:	5e ff       	retal	1

80003452 <pwm_start_channels>:
80003452:	18 98       	mov	r8,r12
80003454:	e0 18 ff 80 	andl	r8,0xff80
80003458:	c0 20       	breq	8000345c <pwm_start_channels+0xa>
8000345a:	5e ff       	retal	1
8000345c:	fe 78 30 00 	mov	r8,-53248
80003460:	91 1c       	st.w	r8[0x4],r12
80003462:	5e fd       	retal	0

80003464 <pwm_init>:
80003464:	e1 b8 00 00 	mfsr	r8,0x0
80003468:	58 0c       	cp.w	r12,0
8000346a:	c0 21       	brne	8000346e <pwm_init+0xa>
8000346c:	5e ff       	retal	1
8000346e:	e6 18 00 01 	andh	r8,0x1,COH
80003472:	c0 91       	brne	80003484 <pwm_init+0x20>
80003474:	d3 03       	ssrf	0x10
80003476:	fe 78 30 00 	mov	r8,-53248
8000347a:	37 f9       	mov	r9,127
8000347c:	91 59       	st.w	r8[0x14],r9
8000347e:	70 78       	ld.w	r8,r8[0x1c]
80003480:	d5 03       	csrf	0x10
80003482:	c0 68       	rjmp	8000348e <pwm_init+0x2a>
80003484:	fe 78 30 00 	mov	r8,-53248
80003488:	37 f9       	mov	r9,127
8000348a:	91 59       	st.w	r8[0x14],r9
8000348c:	70 78       	ld.w	r8,r8[0x1c]
8000348e:	78 08       	ld.w	r8,r12[0x0]
80003490:	78 39       	ld.w	r9,r12[0xc]
80003492:	a9 69       	lsl	r9,0x8
80003494:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003498:	78 18       	ld.w	r8,r12[0x4]
8000349a:	10 49       	or	r9,r8
8000349c:	78 28       	ld.w	r8,r12[0x8]
8000349e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
800034a2:	fe 78 30 00 	mov	r8,-53248
800034a6:	91 09       	st.w	r8[0x0],r9
800034a8:	5e fd       	retal	0

800034aa <getBaudDiv>:
800034aa:	f8 c8 00 01 	sub	r8,r12,1
800034ae:	f0 0b 00 0b 	add	r11,r8,r11
800034b2:	f6 0c 0d 0a 	divu	r10,r11,r12
800034b6:	14 9c       	mov	r12,r10
800034b8:	f4 c8 00 01 	sub	r8,r10,1
800034bc:	e0 48 00 fe 	cp.w	r8,254
800034c0:	e0 88 00 03 	brls	800034c6 <getBaudDiv+0x1c>
800034c4:	5e fe       	retal	-1
800034c6:	5c 8c       	casts.h	r12
800034c8:	5e fc       	retal	r12

800034ca <spi_initMaster>:
800034ca:	f7 39 00 0d 	ld.ub	r9,r11[13]
800034ce:	30 18       	mov	r8,1
800034d0:	f0 09 18 00 	cp.b	r9,r8
800034d4:	e0 88 00 04 	brls	800034dc <spi_initMaster+0x12>
800034d8:	30 2c       	mov	r12,2
800034da:	5e fc       	retal	r12
800034dc:	e0 68 00 80 	mov	r8,128
800034e0:	99 08       	st.w	r12[0x0],r8
800034e2:	78 18       	ld.w	r8,r12[0x4]
800034e4:	30 19       	mov	r9,1
800034e6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800034ea:	f7 39 00 0d 	ld.ub	r9,r11[13]
800034ee:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800034f2:	30 09       	mov	r9,0
800034f4:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800034f8:	30 fa       	mov	r10,15
800034fa:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
800034fe:	99 18       	st.w	r12[0x4],r8
80003500:	5e f9       	retal	r9

80003502 <spi_selectionMode>:
80003502:	d4 01       	pushm	lr
80003504:	30 18       	mov	r8,1
80003506:	f0 0b 18 00 	cp.b	r11,r8
8000350a:	5f be       	srhi	lr
8000350c:	f0 0a 18 00 	cp.b	r10,r8
80003510:	5f b8       	srhi	r8
80003512:	fd e8 10 08 	or	r8,lr,r8
80003516:	c0 30       	breq	8000351c <spi_selectionMode+0x1a>
80003518:	30 2c       	mov	r12,2
8000351a:	d8 02       	popm	pc
8000351c:	78 18       	ld.w	r8,r12[0x4]
8000351e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80003522:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80003526:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
8000352a:	99 18       	st.w	r12[0x4],r8
8000352c:	d8 0a       	popm	pc,r12=0

8000352e <spi_selectChip>:
8000352e:	78 18       	ld.w	r8,r12[0x4]
80003530:	ea 18 00 0f 	orh	r8,0xf
80003534:	99 18       	st.w	r12[0x4],r8
80003536:	78 18       	ld.w	r8,r12[0x4]
80003538:	e2 18 00 04 	andl	r8,0x4,COH
8000353c:	c0 f0       	breq	8000355a <spi_selectChip+0x2c>
8000353e:	30 e8       	mov	r8,14
80003540:	f0 0b 18 00 	cp.b	r11,r8
80003544:	e0 8b 00 19 	brhi	80003576 <spi_selectChip+0x48>
80003548:	78 18       	ld.w	r8,r12[0x4]
8000354a:	b1 6b       	lsl	r11,0x10
8000354c:	ea 1b ff f0 	orh	r11,0xfff0
80003550:	e8 1b ff ff 	orl	r11,0xffff
80003554:	10 6b       	and	r11,r8
80003556:	99 1b       	st.w	r12[0x4],r11
80003558:	5e fd       	retal	0
8000355a:	30 38       	mov	r8,3
8000355c:	f0 0b 18 00 	cp.b	r11,r8
80003560:	e0 8b 00 0b 	brhi	80003576 <spi_selectChip+0x48>
80003564:	78 18       	ld.w	r8,r12[0x4]
80003566:	2f 0b       	sub	r11,-16
80003568:	30 19       	mov	r9,1
8000356a:	f2 0b 09 4b 	lsl	r11,r9,r11
8000356e:	5c db       	com	r11
80003570:	10 6b       	and	r11,r8
80003572:	99 1b       	st.w	r12[0x4],r11
80003574:	5e fd       	retal	0
80003576:	30 2c       	mov	r12,2
80003578:	5e fc       	retal	r12

8000357a <spi_unselectChip>:
8000357a:	e0 68 3a 98 	mov	r8,15000
8000357e:	c0 58       	rjmp	80003588 <spi_unselectChip+0xe>
80003580:	58 08       	cp.w	r8,0
80003582:	c0 21       	brne	80003586 <spi_unselectChip+0xc>
80003584:	5e ff       	retal	1
80003586:	20 18       	sub	r8,1
80003588:	78 49       	ld.w	r9,r12[0x10]
8000358a:	e2 19 02 00 	andl	r9,0x200,COH
8000358e:	cf 90       	breq	80003580 <spi_unselectChip+0x6>
80003590:	78 18       	ld.w	r8,r12[0x4]
80003592:	ea 18 00 0f 	orh	r8,0xf
80003596:	99 18       	st.w	r12[0x4],r8
80003598:	fc 18 01 00 	movh	r8,0x100
8000359c:	99 08       	st.w	r12[0x0],r8
8000359e:	5e fd       	retal	0

800035a0 <spi_setupChipReg>:
800035a0:	eb cd 40 f8 	pushm	r3-r7,lr
800035a4:	18 95       	mov	r5,r12
800035a6:	16 97       	mov	r7,r11
800035a8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800035ac:	30 38       	mov	r8,3
800035ae:	f0 06 18 00 	cp.b	r6,r8
800035b2:	e0 8b 00 4d 	brhi	8000364c <spi_setupChipReg+0xac>
800035b6:	f7 34 00 0b 	ld.ub	r4,r11[11]
800035ba:	30 18       	mov	r8,1
800035bc:	f0 04 18 00 	cp.b	r4,r8
800035c0:	e0 8b 00 46 	brhi	8000364c <spi_setupChipReg+0xac>
800035c4:	f7 33 00 08 	ld.ub	r3,r11[8]
800035c8:	30 78       	mov	r8,7
800035ca:	f0 03 18 00 	cp.b	r3,r8
800035ce:	e0 88 00 3f 	brls	8000364c <spi_setupChipReg+0xac>
800035d2:	31 08       	mov	r8,16
800035d4:	f0 03 18 00 	cp.b	r3,r8
800035d8:	e0 8b 00 3a 	brhi	8000364c <spi_setupChipReg+0xac>
800035dc:	14 9b       	mov	r11,r10
800035de:	6e 1c       	ld.w	r12,r7[0x4]
800035e0:	f0 1f 00 1d 	mcall	80003654 <spi_setupChipReg+0xb4>
800035e4:	c3 45       	brlt	8000364c <spi_setupChipReg+0xac>
800035e6:	30 08       	mov	r8,0
800035e8:	ec 09 16 01 	lsr	r9,r6,0x1
800035ec:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800035f0:	ec 16 00 01 	eorl	r6,0x1
800035f4:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
800035f8:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
800035fc:	20 83       	sub	r3,8
800035fe:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
80003602:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
80003606:	ef 39 00 09 	ld.ub	r9,r7[9]
8000360a:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
8000360e:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003612:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
80003616:	0f 89       	ld.ub	r9,r7[0x0]
80003618:	30 1a       	mov	r10,1
8000361a:	f4 09 18 00 	cp.b	r9,r10
8000361e:	c0 e0       	breq	8000363a <spi_setupChipReg+0x9a>
80003620:	c0 a3       	brcs	80003634 <spi_setupChipReg+0x94>
80003622:	30 2a       	mov	r10,2
80003624:	f4 09 18 00 	cp.b	r9,r10
80003628:	c0 c0       	breq	80003640 <spi_setupChipReg+0xa0>
8000362a:	30 3a       	mov	r10,3
8000362c:	f4 09 18 00 	cp.b	r9,r10
80003630:	c0 e1       	brne	8000364c <spi_setupChipReg+0xac>
80003632:	c0 a8       	rjmp	80003646 <spi_setupChipReg+0xa6>
80003634:	8b c8       	st.w	r5[0x30],r8
80003636:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
8000363a:	8b d8       	st.w	r5[0x34],r8
8000363c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003640:	8b e8       	st.w	r5[0x38],r8
80003642:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80003646:	8b f8       	st.w	r5[0x3c],r8
80003648:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
8000364c:	30 2c       	mov	r12,2
8000364e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003652:	00 00       	add	r0,r0
80003654:	80 00       	ld.sh	r0,r0[0x0]
80003656:	34 aa       	mov	r10,74

80003658 <spi_enable>:
80003658:	30 18       	mov	r8,1
8000365a:	99 08       	st.w	r12[0x0],r8
8000365c:	5e fc       	retal	r12

8000365e <spi_write>:
8000365e:	e0 68 3a 98 	mov	r8,15000
80003662:	c0 58       	rjmp	8000366c <spi_write+0xe>
80003664:	58 08       	cp.w	r8,0
80003666:	c0 21       	brne	8000366a <spi_write+0xc>
80003668:	5e ff       	retal	1
8000366a:	20 18       	sub	r8,1
8000366c:	78 49       	ld.w	r9,r12[0x10]
8000366e:	e2 19 00 02 	andl	r9,0x2,COH
80003672:	cf 90       	breq	80003664 <spi_write+0x6>
80003674:	5c 7b       	castu.h	r11
80003676:	99 3b       	st.w	r12[0xc],r11
80003678:	5e fd       	retal	0

8000367a <spi_readRegisterFullCheck>:
8000367a:	78 4c       	ld.w	r12,r12[0x10]
8000367c:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003680:	5e fc       	retal	r12

80003682 <spi_read>:
80003682:	e0 68 3a 98 	mov	r8,15000
80003686:	c0 58       	rjmp	80003690 <spi_read+0xe>
80003688:	58 08       	cp.w	r8,0
8000368a:	c0 21       	brne	8000368e <spi_read+0xc>
8000368c:	5e ff       	retal	1
8000368e:	20 18       	sub	r8,1
80003690:	78 49       	ld.w	r9,r12[0x10]
80003692:	e2 19 02 01 	andl	r9,0x201,COH
80003696:	e0 49 02 01 	cp.w	r9,513
8000369a:	cf 71       	brne	80003688 <spi_read+0x6>
8000369c:	78 28       	ld.w	r8,r12[0x8]
8000369e:	b6 08       	st.h	r11[0x0],r8
800036a0:	5e fd       	retal	0
800036a2:	d7 03       	nop

800036a4 <_stext>:
800036a4:	e0 7d 00 00 	mov	sp,65536
800036a8:	fe c0 a6 a8 	sub	r0,pc,-22872
800036ac:	e3 b0 00 01 	mtsr	0x4,r0
800036b0:	d5 53       	csrf	0x15
800036b2:	30 80       	mov	r0,8
800036b4:	e0 61 05 18 	mov	r1,1304
800036b8:	02 30       	cp.w	r0,r1
800036ba:	c0 72       	brcc	800036c8 <idata_load_loop_end>
800036bc:	fe c2 9d 64 	sub	r2,pc,-25244

800036c0 <idata_load_loop>:
800036c0:	a5 05       	ld.d	r4,r2++
800036c2:	a1 24       	st.d	r0++,r4
800036c4:	02 30       	cp.w	r0,r1
800036c6:	cf d3       	brcs	800036c0 <idata_load_loop>

800036c8 <idata_load_loop_end>:
800036c8:	e0 60 05 18 	mov	r0,1304
800036cc:	e0 61 07 10 	mov	r1,1808
800036d0:	02 30       	cp.w	r0,r1
800036d2:	c0 62       	brcc	800036de <udata_clear_loop_end>
800036d4:	30 02       	mov	r2,0
800036d6:	30 03       	mov	r3,0

800036d8 <udata_clear_loop>:
800036d8:	a1 22       	st.d	r0++,r2
800036da:	02 30       	cp.w	r0,r1
800036dc:	cf e3       	brcs	800036d8 <udata_clear_loop>

800036de <udata_clear_loop_end>:
800036de:	fe cf 0b 2a 	sub	pc,pc,2858
800036e2:	d7 03       	nop

800036e4 <memcpy>:
800036e4:	58 8a       	cp.w	r10,8
800036e6:	c2 f5       	brlt	80003744 <memcpy+0x60>
800036e8:	f9 eb 10 09 	or	r9,r12,r11
800036ec:	e2 19 00 03 	andl	r9,0x3,COH
800036f0:	e0 81 00 97 	brne	8000381e <memcpy+0x13a>
800036f4:	e0 4a 00 20 	cp.w	r10,32
800036f8:	c3 b4       	brge	8000376e <memcpy+0x8a>
800036fa:	f4 08 14 02 	asr	r8,r10,0x2
800036fe:	f0 09 11 08 	rsub	r9,r8,8
80003702:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003706:	76 69       	ld.w	r9,r11[0x18]
80003708:	99 69       	st.w	r12[0x18],r9
8000370a:	76 59       	ld.w	r9,r11[0x14]
8000370c:	99 59       	st.w	r12[0x14],r9
8000370e:	76 49       	ld.w	r9,r11[0x10]
80003710:	99 49       	st.w	r12[0x10],r9
80003712:	76 39       	ld.w	r9,r11[0xc]
80003714:	99 39       	st.w	r12[0xc],r9
80003716:	76 29       	ld.w	r9,r11[0x8]
80003718:	99 29       	st.w	r12[0x8],r9
8000371a:	76 19       	ld.w	r9,r11[0x4]
8000371c:	99 19       	st.w	r12[0x4],r9
8000371e:	76 09       	ld.w	r9,r11[0x0]
80003720:	99 09       	st.w	r12[0x0],r9
80003722:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003726:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000372a:	e0 1a 00 03 	andl	r10,0x3
8000372e:	f4 0a 11 04 	rsub	r10,r10,4
80003732:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003736:	17 a9       	ld.ub	r9,r11[0x2]
80003738:	b0 a9       	st.b	r8[0x2],r9
8000373a:	17 99       	ld.ub	r9,r11[0x1]
8000373c:	b0 99       	st.b	r8[0x1],r9
8000373e:	17 89       	ld.ub	r9,r11[0x0]
80003740:	b0 89       	st.b	r8[0x0],r9
80003742:	5e fc       	retal	r12
80003744:	f4 0a 11 09 	rsub	r10,r10,9
80003748:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000374c:	17 f9       	ld.ub	r9,r11[0x7]
8000374e:	b8 f9       	st.b	r12[0x7],r9
80003750:	17 e9       	ld.ub	r9,r11[0x6]
80003752:	b8 e9       	st.b	r12[0x6],r9
80003754:	17 d9       	ld.ub	r9,r11[0x5]
80003756:	b8 d9       	st.b	r12[0x5],r9
80003758:	17 c9       	ld.ub	r9,r11[0x4]
8000375a:	b8 c9       	st.b	r12[0x4],r9
8000375c:	17 b9       	ld.ub	r9,r11[0x3]
8000375e:	b8 b9       	st.b	r12[0x3],r9
80003760:	17 a9       	ld.ub	r9,r11[0x2]
80003762:	b8 a9       	st.b	r12[0x2],r9
80003764:	17 99       	ld.ub	r9,r11[0x1]
80003766:	b8 99       	st.b	r12[0x1],r9
80003768:	17 89       	ld.ub	r9,r11[0x0]
8000376a:	b8 89       	st.b	r12[0x0],r9
8000376c:	5e fc       	retal	r12
8000376e:	eb cd 40 c0 	pushm	r6-r7,lr
80003772:	18 99       	mov	r9,r12
80003774:	22 0a       	sub	r10,32
80003776:	b7 07       	ld.d	r6,r11++
80003778:	b3 26       	st.d	r9++,r6
8000377a:	b7 07       	ld.d	r6,r11++
8000377c:	b3 26       	st.d	r9++,r6
8000377e:	b7 07       	ld.d	r6,r11++
80003780:	b3 26       	st.d	r9++,r6
80003782:	b7 07       	ld.d	r6,r11++
80003784:	b3 26       	st.d	r9++,r6
80003786:	22 0a       	sub	r10,32
80003788:	cf 74       	brge	80003776 <memcpy+0x92>
8000378a:	2f 0a       	sub	r10,-16
8000378c:	c0 65       	brlt	80003798 <memcpy+0xb4>
8000378e:	b7 07       	ld.d	r6,r11++
80003790:	b3 26       	st.d	r9++,r6
80003792:	b7 07       	ld.d	r6,r11++
80003794:	b3 26       	st.d	r9++,r6
80003796:	21 0a       	sub	r10,16
80003798:	5c 3a       	neg	r10
8000379a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000379e:	d7 03       	nop
800037a0:	d7 03       	nop
800037a2:	f7 36 00 0e 	ld.ub	r6,r11[14]
800037a6:	f3 66 00 0e 	st.b	r9[14],r6
800037aa:	f7 36 00 0d 	ld.ub	r6,r11[13]
800037ae:	f3 66 00 0d 	st.b	r9[13],r6
800037b2:	f7 36 00 0c 	ld.ub	r6,r11[12]
800037b6:	f3 66 00 0c 	st.b	r9[12],r6
800037ba:	f7 36 00 0b 	ld.ub	r6,r11[11]
800037be:	f3 66 00 0b 	st.b	r9[11],r6
800037c2:	f7 36 00 0a 	ld.ub	r6,r11[10]
800037c6:	f3 66 00 0a 	st.b	r9[10],r6
800037ca:	f7 36 00 09 	ld.ub	r6,r11[9]
800037ce:	f3 66 00 09 	st.b	r9[9],r6
800037d2:	f7 36 00 08 	ld.ub	r6,r11[8]
800037d6:	f3 66 00 08 	st.b	r9[8],r6
800037da:	f7 36 00 07 	ld.ub	r6,r11[7]
800037de:	f3 66 00 07 	st.b	r9[7],r6
800037e2:	f7 36 00 06 	ld.ub	r6,r11[6]
800037e6:	f3 66 00 06 	st.b	r9[6],r6
800037ea:	f7 36 00 05 	ld.ub	r6,r11[5]
800037ee:	f3 66 00 05 	st.b	r9[5],r6
800037f2:	f7 36 00 04 	ld.ub	r6,r11[4]
800037f6:	f3 66 00 04 	st.b	r9[4],r6
800037fa:	f7 36 00 03 	ld.ub	r6,r11[3]
800037fe:	f3 66 00 03 	st.b	r9[3],r6
80003802:	f7 36 00 02 	ld.ub	r6,r11[2]
80003806:	f3 66 00 02 	st.b	r9[2],r6
8000380a:	f7 36 00 01 	ld.ub	r6,r11[1]
8000380e:	f3 66 00 01 	st.b	r9[1],r6
80003812:	f7 36 00 00 	ld.ub	r6,r11[0]
80003816:	f3 66 00 00 	st.b	r9[0],r6
8000381a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000381e:	20 1a       	sub	r10,1
80003820:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003824:	f8 0a 0b 09 	st.b	r12[r10],r9
80003828:	cf b1       	brne	8000381e <memcpy+0x13a>
8000382a:	5e fc       	retal	r12

8000382c <_vsprintf_r>:
8000382c:	d4 01       	pushm	lr
8000382e:	21 7d       	sub	sp,92
80003830:	e0 68 ff ff 	mov	r8,65535
80003834:	ea 18 7f ff 	orh	r8,0x7fff
80003838:	50 58       	stdsp	sp[0x14],r8
8000383a:	50 28       	stdsp	sp[0x8],r8
8000383c:	e0 68 02 08 	mov	r8,520
80003840:	ba 68       	st.h	sp[0xc],r8
80003842:	3f f8       	mov	r8,-1
80003844:	50 4b       	stdsp	sp[0x10],r11
80003846:	50 0b       	stdsp	sp[0x0],r11
80003848:	ba 78       	st.h	sp[0xe],r8
8000384a:	1a 9b       	mov	r11,sp
8000384c:	ca 8d       	rcall	80003b9c <_vfprintf_r>
8000384e:	30 09       	mov	r9,0
80003850:	40 08       	lddsp	r8,sp[0x0]
80003852:	b0 89       	st.b	r8[0x0],r9
80003854:	2e 9d       	sub	sp,-92
80003856:	d8 02       	popm	pc

80003858 <vsprintf>:
80003858:	d4 01       	pushm	lr
8000385a:	e0 68 01 04 	mov	r8,260
8000385e:	14 99       	mov	r9,r10
80003860:	16 9a       	mov	r10,r11
80003862:	18 9b       	mov	r11,r12
80003864:	70 0c       	ld.w	r12,r8[0x0]
80003866:	ce 3f       	rcall	8000382c <_vsprintf_r>
80003868:	d8 02       	popm	pc
8000386a:	d7 03       	nop

8000386c <get_arg>:
8000386c:	d4 31       	pushm	r0-r7,lr
8000386e:	20 8d       	sub	sp,32
80003870:	fa c4 ff bc 	sub	r4,sp,-68
80003874:	50 4b       	stdsp	sp[0x10],r11
80003876:	68 2e       	ld.w	lr,r4[0x8]
80003878:	50 58       	stdsp	sp[0x14],r8
8000387a:	12 96       	mov	r6,r9
8000387c:	7c 0b       	ld.w	r11,lr[0x0]
8000387e:	70 05       	ld.w	r5,r8[0x0]
80003880:	50 6e       	stdsp	sp[0x18],lr
80003882:	58 0b       	cp.w	r11,0
80003884:	f4 0b 17 00 	moveq	r11,r10
80003888:	68 03       	ld.w	r3,r4[0x0]
8000388a:	68 11       	ld.w	r1,r4[0x4]
8000388c:	40 49       	lddsp	r9,sp[0x10]
8000388e:	30 08       	mov	r8,0
80003890:	c2 89       	rjmp	80003ae0 <get_arg+0x274>
80003892:	2f fb       	sub	r11,-1
80003894:	32 5c       	mov	r12,37
80003896:	17 8a       	ld.ub	r10,r11[0x0]
80003898:	f8 0a 18 00 	cp.b	r10,r12
8000389c:	5f 1e       	srne	lr
8000389e:	f0 0a 18 00 	cp.b	r10,r8
800038a2:	5f 1c       	srne	r12
800038a4:	fd ec 00 0c 	and	r12,lr,r12
800038a8:	f0 0c 18 00 	cp.b	r12,r8
800038ac:	cf 31       	brne	80003892 <get_arg+0x26>
800038ae:	58 0a       	cp.w	r10,0
800038b0:	e0 80 01 25 	breq	80003afa <get_arg+0x28e>
800038b4:	30 0c       	mov	r12,0
800038b6:	3f fa       	mov	r10,-1
800038b8:	18 90       	mov	r0,r12
800038ba:	50 3a       	stdsp	sp[0xc],r10
800038bc:	18 94       	mov	r4,r12
800038be:	18 92       	mov	r2,r12
800038c0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800038c4:	16 97       	mov	r7,r11
800038c6:	50 7c       	stdsp	sp[0x1c],r12
800038c8:	fe cc a2 1c 	sub	r12,pc,-24036
800038cc:	0f 3a       	ld.ub	r10,r7++
800038ce:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800038d2:	40 7c       	lddsp	r12,sp[0x1c]
800038d4:	1c 0c       	add	r12,lr
800038d6:	fe ce a2 f2 	sub	lr,pc,-23822
800038da:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800038de:	20 1e       	sub	lr,1
800038e0:	50 0e       	stdsp	sp[0x0],lr
800038e2:	fe ce a3 6a 	sub	lr,pc,-23702
800038e6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800038ea:	50 7c       	stdsp	sp[0x1c],r12
800038ec:	40 0c       	lddsp	r12,sp[0x0]
800038ee:	58 7c       	cp.w	r12,7
800038f0:	e0 8b 00 f1 	brhi	80003ad2 <get_arg+0x266>
800038f4:	fe ce a5 1c 	sub	lr,pc,-23268
800038f8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800038fc:	36 8b       	mov	r11,104
800038fe:	f6 0a 18 00 	cp.b	r10,r11
80003902:	e0 80 00 e8 	breq	80003ad2 <get_arg+0x266>
80003906:	37 1b       	mov	r11,113
80003908:	f6 0a 18 00 	cp.b	r10,r11
8000390c:	c0 70       	breq	8000391a <get_arg+0xae>
8000390e:	34 cb       	mov	r11,76
80003910:	f6 0a 18 00 	cp.b	r10,r11
80003914:	c0 51       	brne	8000391e <get_arg+0xb2>
80003916:	a3 b4       	sbr	r4,0x3
80003918:	cd d8       	rjmp	80003ad2 <get_arg+0x266>
8000391a:	a5 b4       	sbr	r4,0x5
8000391c:	cd b8       	rjmp	80003ad2 <get_arg+0x266>
8000391e:	08 9a       	mov	r10,r4
80003920:	0e 9b       	mov	r11,r7
80003922:	a5 aa       	sbr	r10,0x4
80003924:	17 3c       	ld.ub	r12,r11++
80003926:	a5 b4       	sbr	r4,0x5
80003928:	36 ce       	mov	lr,108
8000392a:	fc 0c 18 00 	cp.b	r12,lr
8000392e:	e0 80 00 d3 	breq	80003ad4 <get_arg+0x268>
80003932:	14 94       	mov	r4,r10
80003934:	cc f8       	rjmp	80003ad2 <get_arg+0x266>
80003936:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000393a:	36 7c       	mov	r12,103
8000393c:	f8 0a 18 00 	cp.b	r10,r12
80003940:	e0 8b 00 27 	brhi	8000398e <get_arg+0x122>
80003944:	36 5b       	mov	r11,101
80003946:	f6 0a 18 00 	cp.b	r10,r11
8000394a:	c4 82       	brcc	800039da <get_arg+0x16e>
8000394c:	34 fb       	mov	r11,79
8000394e:	f6 0a 18 00 	cp.b	r10,r11
80003952:	c4 80       	breq	800039e2 <get_arg+0x176>
80003954:	e0 8b 00 0c 	brhi	8000396c <get_arg+0x100>
80003958:	34 5b       	mov	r11,69
8000395a:	f6 0a 18 00 	cp.b	r10,r11
8000395e:	c3 e0       	breq	800039da <get_arg+0x16e>
80003960:	34 7b       	mov	r11,71
80003962:	f6 0a 18 00 	cp.b	r10,r11
80003966:	c3 a0       	breq	800039da <get_arg+0x16e>
80003968:	34 4b       	mov	r11,68
8000396a:	c0 88       	rjmp	8000397a <get_arg+0x10e>
8000396c:	35 8b       	mov	r11,88
8000396e:	f6 0a 18 00 	cp.b	r10,r11
80003972:	c2 c0       	breq	800039ca <get_arg+0x15e>
80003974:	e0 8b 00 07 	brhi	80003982 <get_arg+0x116>
80003978:	35 5b       	mov	r11,85
8000397a:	f6 0a 18 00 	cp.b	r10,r11
8000397e:	c3 51       	brne	800039e8 <get_arg+0x17c>
80003980:	c3 18       	rjmp	800039e2 <get_arg+0x176>
80003982:	36 3b       	mov	r11,99
80003984:	f6 0a 18 00 	cp.b	r10,r11
80003988:	c2 f0       	breq	800039e6 <get_arg+0x17a>
8000398a:	36 4b       	mov	r11,100
8000398c:	c0 e8       	rjmp	800039a8 <get_arg+0x13c>
8000398e:	37 0b       	mov	r11,112
80003990:	f6 0a 18 00 	cp.b	r10,r11
80003994:	c2 50       	breq	800039de <get_arg+0x172>
80003996:	e0 8b 00 0d 	brhi	800039b0 <get_arg+0x144>
8000399a:	36 eb       	mov	r11,110
8000399c:	f6 0a 18 00 	cp.b	r10,r11
800039a0:	c1 f0       	breq	800039de <get_arg+0x172>
800039a2:	e0 8b 00 14 	brhi	800039ca <get_arg+0x15e>
800039a6:	36 9b       	mov	r11,105
800039a8:	f6 0a 18 00 	cp.b	r10,r11
800039ac:	c1 e1       	brne	800039e8 <get_arg+0x17c>
800039ae:	c0 e8       	rjmp	800039ca <get_arg+0x15e>
800039b0:	37 5b       	mov	r11,117
800039b2:	f6 0a 18 00 	cp.b	r10,r11
800039b6:	c0 a0       	breq	800039ca <get_arg+0x15e>
800039b8:	37 8b       	mov	r11,120
800039ba:	f6 0a 18 00 	cp.b	r10,r11
800039be:	c0 60       	breq	800039ca <get_arg+0x15e>
800039c0:	37 3b       	mov	r11,115
800039c2:	f6 0a 18 00 	cp.b	r10,r11
800039c6:	c1 11       	brne	800039e8 <get_arg+0x17c>
800039c8:	c0 b8       	rjmp	800039de <get_arg+0x172>
800039ca:	ed b4 00 04 	bld	r4,0x4
800039ce:	c0 a0       	breq	800039e2 <get_arg+0x176>
800039d0:	ed b4 00 05 	bld	r4,0x5
800039d4:	c0 91       	brne	800039e6 <get_arg+0x17a>
800039d6:	30 20       	mov	r0,2
800039d8:	c0 88       	rjmp	800039e8 <get_arg+0x17c>
800039da:	30 40       	mov	r0,4
800039dc:	c0 68       	rjmp	800039e8 <get_arg+0x17c>
800039de:	30 30       	mov	r0,3
800039e0:	c0 48       	rjmp	800039e8 <get_arg+0x17c>
800039e2:	30 10       	mov	r0,1
800039e4:	c0 28       	rjmp	800039e8 <get_arg+0x17c>
800039e6:	30 00       	mov	r0,0
800039e8:	40 3b       	lddsp	r11,sp[0xc]
800039ea:	5b fb       	cp.w	r11,-1
800039ec:	c0 40       	breq	800039f4 <get_arg+0x188>
800039ee:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800039f2:	c7 08       	rjmp	80003ad2 <get_arg+0x266>
800039f4:	58 60       	cp.w	r0,6
800039f6:	e0 8b 00 6e 	brhi	80003ad2 <get_arg+0x266>
800039fa:	6c 0a       	ld.w	r10,r6[0x0]
800039fc:	ea cc ff ff 	sub	r12,r5,-1
80003a00:	fe ce a6 08 	sub	lr,pc,-23032
80003a04:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003a08:	f4 cb ff f8 	sub	r11,r10,-8
80003a0c:	8d 0b       	st.w	r6[0x0],r11
80003a0e:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a12:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a16:	c0 f8       	rjmp	80003a34 <get_arg+0x1c8>
80003a18:	f4 cb ff fc 	sub	r11,r10,-4
80003a1c:	8d 0b       	st.w	r6[0x0],r11
80003a1e:	74 0a       	ld.w	r10,r10[0x0]
80003a20:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003a24:	c0 88       	rjmp	80003a34 <get_arg+0x1c8>
80003a26:	f4 cb ff f8 	sub	r11,r10,-8
80003a2a:	8d 0b       	st.w	r6[0x0],r11
80003a2c:	f4 ea 00 00 	ld.d	r10,r10[0]
80003a30:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003a34:	0e 9b       	mov	r11,r7
80003a36:	18 95       	mov	r5,r12
80003a38:	c4 e8       	rjmp	80003ad4 <get_arg+0x268>
80003a3a:	62 0a       	ld.w	r10,r1[0x0]
80003a3c:	5b fa       	cp.w	r10,-1
80003a3e:	c0 b1       	brne	80003a54 <get_arg+0x1e8>
80003a40:	50 19       	stdsp	sp[0x4],r9
80003a42:	50 28       	stdsp	sp[0x8],r8
80003a44:	e0 6a 00 80 	mov	r10,128
80003a48:	30 0b       	mov	r11,0
80003a4a:	02 9c       	mov	r12,r1
80003a4c:	e0 a0 1d 78 	rcall	8000753c <memset>
80003a50:	40 28       	lddsp	r8,sp[0x8]
80003a52:	40 19       	lddsp	r9,sp[0x4]
80003a54:	e4 cc 00 01 	sub	r12,r2,1
80003a58:	0e 9b       	mov	r11,r7
80003a5a:	50 3c       	stdsp	sp[0xc],r12
80003a5c:	f2 0c 0c 49 	max	r9,r9,r12
80003a60:	c3 a8       	rjmp	80003ad4 <get_arg+0x268>
80003a62:	62 0a       	ld.w	r10,r1[0x0]
80003a64:	5b fa       	cp.w	r10,-1
80003a66:	c0 b1       	brne	80003a7c <get_arg+0x210>
80003a68:	50 19       	stdsp	sp[0x4],r9
80003a6a:	50 28       	stdsp	sp[0x8],r8
80003a6c:	e0 6a 00 80 	mov	r10,128
80003a70:	30 0b       	mov	r11,0
80003a72:	02 9c       	mov	r12,r1
80003a74:	e0 a0 1d 64 	rcall	8000753c <memset>
80003a78:	40 28       	lddsp	r8,sp[0x8]
80003a7a:	40 19       	lddsp	r9,sp[0x4]
80003a7c:	20 12       	sub	r2,1
80003a7e:	30 0a       	mov	r10,0
80003a80:	0e 9b       	mov	r11,r7
80003a82:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003a86:	f2 02 0c 49 	max	r9,r9,r2
80003a8a:	c2 58       	rjmp	80003ad4 <get_arg+0x268>
80003a8c:	16 97       	mov	r7,r11
80003a8e:	6c 0a       	ld.w	r10,r6[0x0]
80003a90:	f4 cb ff fc 	sub	r11,r10,-4
80003a94:	8d 0b       	st.w	r6[0x0],r11
80003a96:	74 0a       	ld.w	r10,r10[0x0]
80003a98:	0e 9b       	mov	r11,r7
80003a9a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003a9e:	2f f5       	sub	r5,-1
80003aa0:	c1 a8       	rjmp	80003ad4 <get_arg+0x268>
80003aa2:	f4 c2 00 30 	sub	r2,r10,48
80003aa6:	c0 68       	rjmp	80003ab2 <get_arg+0x246>
80003aa8:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003aac:	2f f7       	sub	r7,-1
80003aae:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003ab2:	0f 8a       	ld.ub	r10,r7[0x0]
80003ab4:	58 0a       	cp.w	r10,0
80003ab6:	c0 e0       	breq	80003ad2 <get_arg+0x266>
80003ab8:	23 0a       	sub	r10,48
80003aba:	58 9a       	cp.w	r10,9
80003abc:	fe 98 ff f6 	brls	80003aa8 <get_arg+0x23c>
80003ac0:	c0 98       	rjmp	80003ad2 <get_arg+0x266>
80003ac2:	2f f7       	sub	r7,-1
80003ac4:	0f 8a       	ld.ub	r10,r7[0x0]
80003ac6:	58 0a       	cp.w	r10,0
80003ac8:	c0 50       	breq	80003ad2 <get_arg+0x266>
80003aca:	23 0a       	sub	r10,48
80003acc:	58 9a       	cp.w	r10,9
80003ace:	fe 98 ff fa 	brls	80003ac2 <get_arg+0x256>
80003ad2:	0e 9b       	mov	r11,r7
80003ad4:	40 7c       	lddsp	r12,sp[0x1c]
80003ad6:	30 ba       	mov	r10,11
80003ad8:	f4 0c 18 00 	cp.b	r12,r10
80003adc:	fe 91 fe f2 	brne	800038c0 <get_arg+0x54>
80003ae0:	40 42       	lddsp	r2,sp[0x10]
80003ae2:	17 8c       	ld.ub	r12,r11[0x0]
80003ae4:	0a 32       	cp.w	r2,r5
80003ae6:	5f 4a       	srge	r10
80003ae8:	f0 0c 18 00 	cp.b	r12,r8
80003aec:	5f 1c       	srne	r12
80003aee:	f9 ea 00 0a 	and	r10,r12,r10
80003af2:	f0 0a 18 00 	cp.b	r10,r8
80003af6:	fe 91 fe cf 	brne	80003894 <get_arg+0x28>
80003afa:	30 08       	mov	r8,0
80003afc:	40 4e       	lddsp	lr,sp[0x10]
80003afe:	17 8a       	ld.ub	r10,r11[0x0]
80003b00:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003b04:	f0 0a 18 00 	cp.b	r10,r8
80003b08:	fc 09 17 10 	movne	r9,lr
80003b0c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003b10:	06 9e       	mov	lr,r3
80003b12:	c2 a8       	rjmp	80003b66 <get_arg+0x2fa>
80003b14:	62 0a       	ld.w	r10,r1[0x0]
80003b16:	58 3a       	cp.w	r10,3
80003b18:	c1 e0       	breq	80003b54 <get_arg+0x2e8>
80003b1a:	e0 89 00 07 	brgt	80003b28 <get_arg+0x2bc>
80003b1e:	58 1a       	cp.w	r10,1
80003b20:	c1 a0       	breq	80003b54 <get_arg+0x2e8>
80003b22:	58 2a       	cp.w	r10,2
80003b24:	c1 81       	brne	80003b54 <get_arg+0x2e8>
80003b26:	c0 58       	rjmp	80003b30 <get_arg+0x2c4>
80003b28:	58 5a       	cp.w	r10,5
80003b2a:	c0 c0       	breq	80003b42 <get_arg+0x2d6>
80003b2c:	c0 b5       	brlt	80003b42 <get_arg+0x2d6>
80003b2e:	c1 38       	rjmp	80003b54 <get_arg+0x2e8>
80003b30:	6c 0a       	ld.w	r10,r6[0x0]
80003b32:	f4 cc ff f8 	sub	r12,r10,-8
80003b36:	8d 0c       	st.w	r6[0x0],r12
80003b38:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b3c:	f0 e3 00 00 	st.d	r8[0],r2
80003b40:	c1 08       	rjmp	80003b60 <get_arg+0x2f4>
80003b42:	6c 0a       	ld.w	r10,r6[0x0]
80003b44:	f4 cc ff f8 	sub	r12,r10,-8
80003b48:	8d 0c       	st.w	r6[0x0],r12
80003b4a:	f4 e2 00 00 	ld.d	r2,r10[0]
80003b4e:	f0 e3 00 00 	st.d	r8[0],r2
80003b52:	c0 78       	rjmp	80003b60 <get_arg+0x2f4>
80003b54:	6c 0a       	ld.w	r10,r6[0x0]
80003b56:	f4 cc ff fc 	sub	r12,r10,-4
80003b5a:	8d 0c       	st.w	r6[0x0],r12
80003b5c:	74 0a       	ld.w	r10,r10[0x0]
80003b5e:	91 0a       	st.w	r8[0x0],r10
80003b60:	2f f5       	sub	r5,-1
80003b62:	2f 88       	sub	r8,-8
80003b64:	2f c1       	sub	r1,-4
80003b66:	12 35       	cp.w	r5,r9
80003b68:	fe 9a ff d6 	brle	80003b14 <get_arg+0x2a8>
80003b6c:	1c 93       	mov	r3,lr
80003b6e:	40 52       	lddsp	r2,sp[0x14]
80003b70:	40 6e       	lddsp	lr,sp[0x18]
80003b72:	85 05       	st.w	r2[0x0],r5
80003b74:	9d 0b       	st.w	lr[0x0],r11
80003b76:	40 4b       	lddsp	r11,sp[0x10]
80003b78:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003b7c:	2f 8d       	sub	sp,-32
80003b7e:	d8 32       	popm	r0-r7,pc

80003b80 <__sprint_r>:
80003b80:	d4 21       	pushm	r4-r7,lr
80003b82:	14 97       	mov	r7,r10
80003b84:	74 28       	ld.w	r8,r10[0x8]
80003b86:	58 08       	cp.w	r8,0
80003b88:	c0 41       	brne	80003b90 <__sprint_r+0x10>
80003b8a:	95 18       	st.w	r10[0x4],r8
80003b8c:	10 9c       	mov	r12,r8
80003b8e:	d8 22       	popm	r4-r7,pc
80003b90:	e0 a0 18 b4 	rcall	80006cf8 <__sfvwrite_r>
80003b94:	30 08       	mov	r8,0
80003b96:	8f 18       	st.w	r7[0x4],r8
80003b98:	8f 28       	st.w	r7[0x8],r8
80003b9a:	d8 22       	popm	r4-r7,pc

80003b9c <_vfprintf_r>:
80003b9c:	d4 31       	pushm	r0-r7,lr
80003b9e:	fa cd 06 bc 	sub	sp,sp,1724
80003ba2:	51 09       	stdsp	sp[0x40],r9
80003ba4:	16 91       	mov	r1,r11
80003ba6:	14 97       	mov	r7,r10
80003ba8:	18 95       	mov	r5,r12
80003baa:	e0 a0 1a 1d 	rcall	80006fe4 <_localeconv_r>
80003bae:	78 0c       	ld.w	r12,r12[0x0]
80003bb0:	50 cc       	stdsp	sp[0x30],r12
80003bb2:	58 05       	cp.w	r5,0
80003bb4:	c0 70       	breq	80003bc2 <_vfprintf_r+0x26>
80003bb6:	6a 68       	ld.w	r8,r5[0x18]
80003bb8:	58 08       	cp.w	r8,0
80003bba:	c0 41       	brne	80003bc2 <_vfprintf_r+0x26>
80003bbc:	0a 9c       	mov	r12,r5
80003bbe:	e0 a0 17 3d 	rcall	80006a38 <__sinit>
80003bc2:	fe c8 a4 06 	sub	r8,pc,-23546
80003bc6:	10 31       	cp.w	r1,r8
80003bc8:	c0 31       	brne	80003bce <_vfprintf_r+0x32>
80003bca:	6a 01       	ld.w	r1,r5[0x0]
80003bcc:	c0 c8       	rjmp	80003be4 <_vfprintf_r+0x48>
80003bce:	fe c8 a3 f2 	sub	r8,pc,-23566
80003bd2:	10 31       	cp.w	r1,r8
80003bd4:	c0 31       	brne	80003bda <_vfprintf_r+0x3e>
80003bd6:	6a 11       	ld.w	r1,r5[0x4]
80003bd8:	c0 68       	rjmp	80003be4 <_vfprintf_r+0x48>
80003bda:	fe c8 a3 de 	sub	r8,pc,-23586
80003bde:	10 31       	cp.w	r1,r8
80003be0:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003be4:	82 68       	ld.sh	r8,r1[0xc]
80003be6:	ed b8 00 03 	bld	r8,0x3
80003bea:	c0 41       	brne	80003bf2 <_vfprintf_r+0x56>
80003bec:	62 48       	ld.w	r8,r1[0x10]
80003bee:	58 08       	cp.w	r8,0
80003bf0:	c0 71       	brne	80003bfe <_vfprintf_r+0x62>
80003bf2:	02 9b       	mov	r11,r1
80003bf4:	0a 9c       	mov	r12,r5
80003bf6:	e0 a0 0f 5d 	rcall	80005ab0 <__swsetup_r>
80003bfa:	e0 81 0f 54 	brne	80005aa2 <_vfprintf_r+0x1f06>
80003bfe:	82 68       	ld.sh	r8,r1[0xc]
80003c00:	10 99       	mov	r9,r8
80003c02:	e2 19 00 1a 	andl	r9,0x1a,COH
80003c06:	58 a9       	cp.w	r9,10
80003c08:	c3 c1       	brne	80003c80 <_vfprintf_r+0xe4>
80003c0a:	82 79       	ld.sh	r9,r1[0xe]
80003c0c:	30 0a       	mov	r10,0
80003c0e:	f4 09 19 00 	cp.h	r9,r10
80003c12:	c3 75       	brlt	80003c80 <_vfprintf_r+0xe4>
80003c14:	a1 d8       	cbr	r8,0x1
80003c16:	fb 58 05 d0 	st.h	sp[1488],r8
80003c1a:	62 88       	ld.w	r8,r1[0x20]
80003c1c:	fb 48 05 e4 	st.w	sp[1508],r8
80003c20:	62 a8       	ld.w	r8,r1[0x28]
80003c22:	fb 48 05 ec 	st.w	sp[1516],r8
80003c26:	fa c8 ff bc 	sub	r8,sp,-68
80003c2a:	fb 48 05 d4 	st.w	sp[1492],r8
80003c2e:	fb 48 05 c4 	st.w	sp[1476],r8
80003c32:	e0 68 04 00 	mov	r8,1024
80003c36:	fb 48 05 d8 	st.w	sp[1496],r8
80003c3a:	fb 48 05 cc 	st.w	sp[1484],r8
80003c3e:	30 08       	mov	r8,0
80003c40:	fb 59 05 d2 	st.h	sp[1490],r9
80003c44:	0e 9a       	mov	r10,r7
80003c46:	41 09       	lddsp	r9,sp[0x40]
80003c48:	fa c7 fa 3c 	sub	r7,sp,-1476
80003c4c:	fb 48 05 dc 	st.w	sp[1500],r8
80003c50:	0a 9c       	mov	r12,r5
80003c52:	0e 9b       	mov	r11,r7
80003c54:	ca 4f       	rcall	80003b9c <_vfprintf_r>
80003c56:	50 bc       	stdsp	sp[0x2c],r12
80003c58:	c0 95       	brlt	80003c6a <_vfprintf_r+0xce>
80003c5a:	0e 9b       	mov	r11,r7
80003c5c:	0a 9c       	mov	r12,r5
80003c5e:	e0 a0 16 15 	rcall	80006888 <_fflush_r>
80003c62:	40 be       	lddsp	lr,sp[0x2c]
80003c64:	f9 be 01 ff 	movne	lr,-1
80003c68:	50 be       	stdsp	sp[0x2c],lr
80003c6a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003c6e:	ed b8 00 06 	bld	r8,0x6
80003c72:	e0 81 0f 1a 	brne	80005aa6 <_vfprintf_r+0x1f0a>
80003c76:	82 68       	ld.sh	r8,r1[0xc]
80003c78:	a7 a8       	sbr	r8,0x6
80003c7a:	a2 68       	st.h	r1[0xc],r8
80003c7c:	e0 8f 0f 15 	bral	80005aa6 <_vfprintf_r+0x1f0a>
80003c80:	30 08       	mov	r8,0
80003c82:	fb 48 06 b4 	st.w	sp[1716],r8
80003c86:	fb 48 06 90 	st.w	sp[1680],r8
80003c8a:	fb 48 06 8c 	st.w	sp[1676],r8
80003c8e:	fb 48 06 b0 	st.w	sp[1712],r8
80003c92:	30 08       	mov	r8,0
80003c94:	30 09       	mov	r9,0
80003c96:	50 a7       	stdsp	sp[0x28],r7
80003c98:	50 78       	stdsp	sp[0x1c],r8
80003c9a:	fa c3 f9 e0 	sub	r3,sp,-1568
80003c9e:	3f f8       	mov	r8,-1
80003ca0:	50 59       	stdsp	sp[0x14],r9
80003ca2:	fb 43 06 88 	st.w	sp[1672],r3
80003ca6:	fb 48 05 44 	st.w	sp[1348],r8
80003caa:	12 9c       	mov	r12,r9
80003cac:	50 69       	stdsp	sp[0x18],r9
80003cae:	50 d9       	stdsp	sp[0x34],r9
80003cb0:	50 e9       	stdsp	sp[0x38],r9
80003cb2:	50 b9       	stdsp	sp[0x2c],r9
80003cb4:	12 97       	mov	r7,r9
80003cb6:	0a 94       	mov	r4,r5
80003cb8:	40 a2       	lddsp	r2,sp[0x28]
80003cba:	32 5a       	mov	r10,37
80003cbc:	30 08       	mov	r8,0
80003cbe:	c0 28       	rjmp	80003cc2 <_vfprintf_r+0x126>
80003cc0:	2f f2       	sub	r2,-1
80003cc2:	05 89       	ld.ub	r9,r2[0x0]
80003cc4:	f0 09 18 00 	cp.b	r9,r8
80003cc8:	5f 1b       	srne	r11
80003cca:	f4 09 18 00 	cp.b	r9,r10
80003cce:	5f 19       	srne	r9
80003cd0:	f3 eb 00 0b 	and	r11,r9,r11
80003cd4:	f0 0b 18 00 	cp.b	r11,r8
80003cd8:	cf 41       	brne	80003cc0 <_vfprintf_r+0x124>
80003cda:	40 ab       	lddsp	r11,sp[0x28]
80003cdc:	e4 0b 01 06 	sub	r6,r2,r11
80003ce0:	c1 e0       	breq	80003d1c <_vfprintf_r+0x180>
80003ce2:	fa f8 06 90 	ld.w	r8,sp[1680]
80003ce6:	0c 08       	add	r8,r6
80003ce8:	87 0b       	st.w	r3[0x0],r11
80003cea:	fb 48 06 90 	st.w	sp[1680],r8
80003cee:	87 16       	st.w	r3[0x4],r6
80003cf0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003cf4:	2f f8       	sub	r8,-1
80003cf6:	fb 48 06 8c 	st.w	sp[1676],r8
80003cfa:	58 78       	cp.w	r8,7
80003cfc:	e0 89 00 04 	brgt	80003d04 <_vfprintf_r+0x168>
80003d00:	2f 83       	sub	r3,-8
80003d02:	c0 a8       	rjmp	80003d16 <_vfprintf_r+0x17a>
80003d04:	fa ca f9 78 	sub	r10,sp,-1672
80003d08:	02 9b       	mov	r11,r1
80003d0a:	08 9c       	mov	r12,r4
80003d0c:	c3 af       	rcall	80003b80 <__sprint_r>
80003d0e:	e0 81 0e c6 	brne	80005a9a <_vfprintf_r+0x1efe>
80003d12:	fa c3 f9 e0 	sub	r3,sp,-1568
80003d16:	40 ba       	lddsp	r10,sp[0x2c]
80003d18:	0c 0a       	add	r10,r6
80003d1a:	50 ba       	stdsp	sp[0x2c],r10
80003d1c:	05 89       	ld.ub	r9,r2[0x0]
80003d1e:	30 08       	mov	r8,0
80003d20:	f0 09 18 00 	cp.b	r9,r8
80003d24:	e0 80 0e aa 	breq	80005a78 <_vfprintf_r+0x1edc>
80003d28:	30 09       	mov	r9,0
80003d2a:	fb 68 06 bb 	st.b	sp[1723],r8
80003d2e:	0e 96       	mov	r6,r7
80003d30:	e4 c8 ff ff 	sub	r8,r2,-1
80003d34:	3f fe       	mov	lr,-1
80003d36:	50 93       	stdsp	sp[0x24],r3
80003d38:	50 41       	stdsp	sp[0x10],r1
80003d3a:	0e 93       	mov	r3,r7
80003d3c:	04 91       	mov	r1,r2
80003d3e:	50 89       	stdsp	sp[0x20],r9
80003d40:	50 a8       	stdsp	sp[0x28],r8
80003d42:	50 2e       	stdsp	sp[0x8],lr
80003d44:	50 39       	stdsp	sp[0xc],r9
80003d46:	12 95       	mov	r5,r9
80003d48:	12 90       	mov	r0,r9
80003d4a:	10 97       	mov	r7,r8
80003d4c:	08 92       	mov	r2,r4
80003d4e:	c0 78       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003d50:	3f fc       	mov	r12,-1
80003d52:	08 97       	mov	r7,r4
80003d54:	50 2c       	stdsp	sp[0x8],r12
80003d56:	c0 38       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003d58:	30 0b       	mov	r11,0
80003d5a:	50 3b       	stdsp	sp[0xc],r11
80003d5c:	0f 38       	ld.ub	r8,r7++
80003d5e:	c0 28       	rjmp	80003d62 <_vfprintf_r+0x1c6>
80003d60:	12 90       	mov	r0,r9
80003d62:	f0 c9 00 20 	sub	r9,r8,32
80003d66:	e0 49 00 58 	cp.w	r9,88
80003d6a:	e0 8b 0a 30 	brhi	800051ca <_vfprintf_r+0x162e>
80003d6e:	fe ca a9 5a 	sub	r10,pc,-22182
80003d72:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003d76:	50 a7       	stdsp	sp[0x28],r7
80003d78:	50 80       	stdsp	sp[0x20],r0
80003d7a:	0c 97       	mov	r7,r6
80003d7c:	04 94       	mov	r4,r2
80003d7e:	06 96       	mov	r6,r3
80003d80:	02 92       	mov	r2,r1
80003d82:	fe c9 a7 32 	sub	r9,pc,-22734
80003d86:	40 93       	lddsp	r3,sp[0x24]
80003d88:	10 90       	mov	r0,r8
80003d8a:	40 41       	lddsp	r1,sp[0x10]
80003d8c:	50 d9       	stdsp	sp[0x34],r9
80003d8e:	e0 8f 08 8e 	bral	80004eaa <_vfprintf_r+0x130e>
80003d92:	30 08       	mov	r8,0
80003d94:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003d98:	f0 09 18 00 	cp.b	r9,r8
80003d9c:	ce 01       	brne	80003d5c <_vfprintf_r+0x1c0>
80003d9e:	32 08       	mov	r8,32
80003da0:	c6 e8       	rjmp	80003e7c <_vfprintf_r+0x2e0>
80003da2:	a1 a5       	sbr	r5,0x0
80003da4:	cd cb       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003da6:	0f 89       	ld.ub	r9,r7[0x0]
80003da8:	f2 c8 00 30 	sub	r8,r9,48
80003dac:	58 98       	cp.w	r8,9
80003dae:	e0 8b 00 1d 	brhi	80003de8 <_vfprintf_r+0x24c>
80003db2:	ee c8 ff ff 	sub	r8,r7,-1
80003db6:	30 0b       	mov	r11,0
80003db8:	23 09       	sub	r9,48
80003dba:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003dbe:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003dc2:	11 39       	ld.ub	r9,r8++
80003dc4:	f2 ca 00 30 	sub	r10,r9,48
80003dc8:	58 9a       	cp.w	r10,9
80003dca:	fe 98 ff f7 	brls	80003db8 <_vfprintf_r+0x21c>
80003dce:	e0 49 00 24 	cp.w	r9,36
80003dd2:	cc 31       	brne	80003d58 <_vfprintf_r+0x1bc>
80003dd4:	e0 4b 00 20 	cp.w	r11,32
80003dd8:	e0 89 0e 60 	brgt	80005a98 <_vfprintf_r+0x1efc>
80003ddc:	20 1b       	sub	r11,1
80003dde:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003de2:	12 3b       	cp.w	r11,r9
80003de4:	c0 95       	brlt	80003df6 <_vfprintf_r+0x25a>
80003de6:	c1 08       	rjmp	80003e06 <_vfprintf_r+0x26a>
80003de8:	fa f9 06 b4 	ld.w	r9,sp[1716]
80003dec:	ec ca ff ff 	sub	r10,r6,-1
80003df0:	12 36       	cp.w	r6,r9
80003df2:	c1 f5       	brlt	80003e30 <_vfprintf_r+0x294>
80003df4:	c2 68       	rjmp	80003e40 <_vfprintf_r+0x2a4>
80003df6:	fa ce f9 44 	sub	lr,sp,-1724
80003dfa:	10 97       	mov	r7,r8
80003dfc:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003e00:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003e04:	c3 58       	rjmp	80003e6e <_vfprintf_r+0x2d2>
80003e06:	10 97       	mov	r7,r8
80003e08:	fa c8 f9 50 	sub	r8,sp,-1712
80003e0c:	1a d8       	st.w	--sp,r8
80003e0e:	fa c8 fa b8 	sub	r8,sp,-1352
80003e12:	1a d8       	st.w	--sp,r8
80003e14:	fa c8 fb b4 	sub	r8,sp,-1100
80003e18:	02 9a       	mov	r10,r1
80003e1a:	1a d8       	st.w	--sp,r8
80003e1c:	04 9c       	mov	r12,r2
80003e1e:	fa c8 f9 40 	sub	r8,sp,-1728
80003e22:	fa c9 ff b4 	sub	r9,sp,-76
80003e26:	fe b0 fd 23 	rcall	8000386c <get_arg>
80003e2a:	2f dd       	sub	sp,-12
80003e2c:	78 00       	ld.w	r0,r12[0x0]
80003e2e:	c2 08       	rjmp	80003e6e <_vfprintf_r+0x2d2>
80003e30:	fa cc f9 44 	sub	r12,sp,-1724
80003e34:	14 96       	mov	r6,r10
80003e36:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003e3a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003e3e:	c1 88       	rjmp	80003e6e <_vfprintf_r+0x2d2>
80003e40:	41 08       	lddsp	r8,sp[0x40]
80003e42:	59 f9       	cp.w	r9,31
80003e44:	e0 89 00 11 	brgt	80003e66 <_vfprintf_r+0x2ca>
80003e48:	f0 cb ff fc 	sub	r11,r8,-4
80003e4c:	51 0b       	stdsp	sp[0x40],r11
80003e4e:	70 00       	ld.w	r0,r8[0x0]
80003e50:	fa cb f9 44 	sub	r11,sp,-1724
80003e54:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003e58:	f1 40 fd 88 	st.w	r8[-632],r0
80003e5c:	2f f9       	sub	r9,-1
80003e5e:	14 96       	mov	r6,r10
80003e60:	fb 49 06 b4 	st.w	sp[1716],r9
80003e64:	c0 58       	rjmp	80003e6e <_vfprintf_r+0x2d2>
80003e66:	70 00       	ld.w	r0,r8[0x0]
80003e68:	14 96       	mov	r6,r10
80003e6a:	2f c8       	sub	r8,-4
80003e6c:	51 08       	stdsp	sp[0x40],r8
80003e6e:	58 00       	cp.w	r0,0
80003e70:	fe 94 ff 76 	brge	80003d5c <_vfprintf_r+0x1c0>
80003e74:	5c 30       	neg	r0
80003e76:	a3 a5       	sbr	r5,0x2
80003e78:	c7 2b       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003e7a:	32 b8       	mov	r8,43
80003e7c:	fb 68 06 bb 	st.b	sp[1723],r8
80003e80:	c6 eb       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003e82:	0f 38       	ld.ub	r8,r7++
80003e84:	e0 48 00 2a 	cp.w	r8,42
80003e88:	c0 30       	breq	80003e8e <_vfprintf_r+0x2f2>
80003e8a:	30 09       	mov	r9,0
80003e8c:	c7 98       	rjmp	80003f7e <_vfprintf_r+0x3e2>
80003e8e:	0f 88       	ld.ub	r8,r7[0x0]
80003e90:	f0 c9 00 30 	sub	r9,r8,48
80003e94:	58 99       	cp.w	r9,9
80003e96:	e0 8b 00 1f 	brhi	80003ed4 <_vfprintf_r+0x338>
80003e9a:	ee c4 ff ff 	sub	r4,r7,-1
80003e9e:	30 0b       	mov	r11,0
80003ea0:	23 08       	sub	r8,48
80003ea2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003ea6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003eaa:	09 38       	ld.ub	r8,r4++
80003eac:	f0 c9 00 30 	sub	r9,r8,48
80003eb0:	58 99       	cp.w	r9,9
80003eb2:	fe 98 ff f7 	brls	80003ea0 <_vfprintf_r+0x304>
80003eb6:	e0 48 00 24 	cp.w	r8,36
80003eba:	fe 91 ff 4f 	brne	80003d58 <_vfprintf_r+0x1bc>
80003ebe:	e0 4b 00 20 	cp.w	r11,32
80003ec2:	e0 89 0d eb 	brgt	80005a98 <_vfprintf_r+0x1efc>
80003ec6:	20 1b       	sub	r11,1
80003ec8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ecc:	10 3b       	cp.w	r11,r8
80003ece:	c0 a5       	brlt	80003ee2 <_vfprintf_r+0x346>
80003ed0:	c1 18       	rjmp	80003ef2 <_vfprintf_r+0x356>
80003ed2:	d7 03       	nop
80003ed4:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003ed8:	ec c9 ff ff 	sub	r9,r6,-1
80003edc:	14 36       	cp.w	r6,r10
80003ede:	c1 f5       	brlt	80003f1c <_vfprintf_r+0x380>
80003ee0:	c2 88       	rjmp	80003f30 <_vfprintf_r+0x394>
80003ee2:	fa ca f9 44 	sub	r10,sp,-1724
80003ee6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003eea:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003eee:	50 2b       	stdsp	sp[0x8],r11
80003ef0:	c3 c8       	rjmp	80003f68 <_vfprintf_r+0x3cc>
80003ef2:	fa c8 f9 50 	sub	r8,sp,-1712
80003ef6:	1a d8       	st.w	--sp,r8
80003ef8:	fa c8 fa b8 	sub	r8,sp,-1352
80003efc:	1a d8       	st.w	--sp,r8
80003efe:	fa c8 fb b4 	sub	r8,sp,-1100
80003f02:	02 9a       	mov	r10,r1
80003f04:	1a d8       	st.w	--sp,r8
80003f06:	04 9c       	mov	r12,r2
80003f08:	fa c8 f9 40 	sub	r8,sp,-1728
80003f0c:	fa c9 ff b4 	sub	r9,sp,-76
80003f10:	fe b0 fc ae 	rcall	8000386c <get_arg>
80003f14:	2f dd       	sub	sp,-12
80003f16:	78 0c       	ld.w	r12,r12[0x0]
80003f18:	50 2c       	stdsp	sp[0x8],r12
80003f1a:	c2 78       	rjmp	80003f68 <_vfprintf_r+0x3cc>
80003f1c:	12 96       	mov	r6,r9
80003f1e:	0e 94       	mov	r4,r7
80003f20:	fa c9 f9 44 	sub	r9,sp,-1724
80003f24:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003f28:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003f2c:	50 28       	stdsp	sp[0x8],r8
80003f2e:	c1 d8       	rjmp	80003f68 <_vfprintf_r+0x3cc>
80003f30:	41 08       	lddsp	r8,sp[0x40]
80003f32:	59 fa       	cp.w	r10,31
80003f34:	e0 89 00 14 	brgt	80003f5c <_vfprintf_r+0x3c0>
80003f38:	f0 cb ff fc 	sub	r11,r8,-4
80003f3c:	70 08       	ld.w	r8,r8[0x0]
80003f3e:	51 0b       	stdsp	sp[0x40],r11
80003f40:	50 28       	stdsp	sp[0x8],r8
80003f42:	fa c6 f9 44 	sub	r6,sp,-1724
80003f46:	40 2e       	lddsp	lr,sp[0x8]
80003f48:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003f4c:	f1 4e fd 88 	st.w	r8[-632],lr
80003f50:	2f fa       	sub	r10,-1
80003f52:	0e 94       	mov	r4,r7
80003f54:	fb 4a 06 b4 	st.w	sp[1716],r10
80003f58:	12 96       	mov	r6,r9
80003f5a:	c0 78       	rjmp	80003f68 <_vfprintf_r+0x3cc>
80003f5c:	70 0c       	ld.w	r12,r8[0x0]
80003f5e:	0e 94       	mov	r4,r7
80003f60:	2f c8       	sub	r8,-4
80003f62:	50 2c       	stdsp	sp[0x8],r12
80003f64:	12 96       	mov	r6,r9
80003f66:	51 08       	stdsp	sp[0x40],r8
80003f68:	40 2b       	lddsp	r11,sp[0x8]
80003f6a:	58 0b       	cp.w	r11,0
80003f6c:	fe 95 fe f2 	brlt	80003d50 <_vfprintf_r+0x1b4>
80003f70:	08 97       	mov	r7,r4
80003f72:	cf 5a       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003f74:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003f78:	0f 38       	ld.ub	r8,r7++
80003f7a:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003f7e:	f0 ca 00 30 	sub	r10,r8,48
80003f82:	58 9a       	cp.w	r10,9
80003f84:	fe 98 ff f8 	brls	80003f74 <_vfprintf_r+0x3d8>
80003f88:	3f fa       	mov	r10,-1
80003f8a:	f2 0a 0c 49 	max	r9,r9,r10
80003f8e:	50 29       	stdsp	sp[0x8],r9
80003f90:	ce 9a       	rjmp	80003d62 <_vfprintf_r+0x1c6>
80003f92:	a7 b5       	sbr	r5,0x7
80003f94:	ce 4a       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003f96:	30 09       	mov	r9,0
80003f98:	23 08       	sub	r8,48
80003f9a:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003f9e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003fa2:	0f 38       	ld.ub	r8,r7++
80003fa4:	f0 ca 00 30 	sub	r10,r8,48
80003fa8:	58 9a       	cp.w	r10,9
80003faa:	fe 98 ff f7 	brls	80003f98 <_vfprintf_r+0x3fc>
80003fae:	e0 48 00 24 	cp.w	r8,36
80003fb2:	fe 91 fe d7 	brne	80003d60 <_vfprintf_r+0x1c4>
80003fb6:	e0 49 00 20 	cp.w	r9,32
80003fba:	e0 89 0d 6f 	brgt	80005a98 <_vfprintf_r+0x1efc>
80003fbe:	f2 c3 00 01 	sub	r3,r9,1
80003fc2:	30 19       	mov	r9,1
80003fc4:	50 39       	stdsp	sp[0xc],r9
80003fc6:	cc ba       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003fc8:	a3 b5       	sbr	r5,0x3
80003fca:	cc 9a       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003fcc:	a7 a5       	sbr	r5,0x6
80003fce:	cc 7a       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003fd0:	0a 98       	mov	r8,r5
80003fd2:	a5 b5       	sbr	r5,0x5
80003fd4:	a5 a8       	sbr	r8,0x4
80003fd6:	0f 89       	ld.ub	r9,r7[0x0]
80003fd8:	36 ce       	mov	lr,108
80003fda:	fc 09 18 00 	cp.b	r9,lr
80003fde:	f7 b7 00 ff 	subeq	r7,-1
80003fe2:	f0 05 17 10 	movne	r5,r8
80003fe6:	cb ba       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003fe8:	a5 b5       	sbr	r5,0x5
80003fea:	cb 9a       	rjmp	80003d5c <_vfprintf_r+0x1c0>
80003fec:	50 a7       	stdsp	sp[0x28],r7
80003fee:	50 80       	stdsp	sp[0x20],r0
80003ff0:	0c 97       	mov	r7,r6
80003ff2:	10 90       	mov	r0,r8
80003ff4:	06 96       	mov	r6,r3
80003ff6:	04 94       	mov	r4,r2
80003ff8:	40 93       	lddsp	r3,sp[0x24]
80003ffa:	02 92       	mov	r2,r1
80003ffc:	0e 99       	mov	r9,r7
80003ffe:	40 41       	lddsp	r1,sp[0x10]
80004000:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004004:	40 3c       	lddsp	r12,sp[0xc]
80004006:	58 0c       	cp.w	r12,0
80004008:	c1 d0       	breq	80004042 <_vfprintf_r+0x4a6>
8000400a:	10 36       	cp.w	r6,r8
8000400c:	c0 64       	brge	80004018 <_vfprintf_r+0x47c>
8000400e:	fa cb f9 44 	sub	r11,sp,-1724
80004012:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004016:	c1 d8       	rjmp	80004050 <_vfprintf_r+0x4b4>
80004018:	fa c8 f9 50 	sub	r8,sp,-1712
8000401c:	1a d8       	st.w	--sp,r8
8000401e:	fa c8 fa b8 	sub	r8,sp,-1352
80004022:	1a d8       	st.w	--sp,r8
80004024:	fa c8 fb b4 	sub	r8,sp,-1100
80004028:	1a d8       	st.w	--sp,r8
8000402a:	fa c8 f9 40 	sub	r8,sp,-1728
8000402e:	fa c9 ff b4 	sub	r9,sp,-76
80004032:	04 9a       	mov	r10,r2
80004034:	0c 9b       	mov	r11,r6
80004036:	08 9c       	mov	r12,r4
80004038:	fe b0 fc 1a 	rcall	8000386c <get_arg>
8000403c:	2f dd       	sub	sp,-12
8000403e:	19 b8       	ld.ub	r8,r12[0x3]
80004040:	c2 28       	rjmp	80004084 <_vfprintf_r+0x4e8>
80004042:	2f f7       	sub	r7,-1
80004044:	10 39       	cp.w	r9,r8
80004046:	c0 84       	brge	80004056 <_vfprintf_r+0x4ba>
80004048:	fa ca f9 44 	sub	r10,sp,-1724
8000404c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004050:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004054:	c1 88       	rjmp	80004084 <_vfprintf_r+0x4e8>
80004056:	41 09       	lddsp	r9,sp[0x40]
80004058:	59 f8       	cp.w	r8,31
8000405a:	e0 89 00 12 	brgt	8000407e <_vfprintf_r+0x4e2>
8000405e:	f2 ca ff fc 	sub	r10,r9,-4
80004062:	51 0a       	stdsp	sp[0x40],r10
80004064:	72 09       	ld.w	r9,r9[0x0]
80004066:	fa c6 f9 44 	sub	r6,sp,-1724
8000406a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000406e:	2f f8       	sub	r8,-1
80004070:	f5 49 fd 88 	st.w	r10[-632],r9
80004074:	fb 48 06 b4 	st.w	sp[1716],r8
80004078:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000407c:	c0 48       	rjmp	80004084 <_vfprintf_r+0x4e8>
8000407e:	13 b8       	ld.ub	r8,r9[0x3]
80004080:	2f c9       	sub	r9,-4
80004082:	51 09       	stdsp	sp[0x40],r9
80004084:	fb 68 06 60 	st.b	sp[1632],r8
80004088:	30 0e       	mov	lr,0
8000408a:	30 08       	mov	r8,0
8000408c:	30 12       	mov	r2,1
8000408e:	fb 68 06 bb 	st.b	sp[1723],r8
80004092:	50 2e       	stdsp	sp[0x8],lr
80004094:	e0 8f 08 ad 	bral	800051ee <_vfprintf_r+0x1652>
80004098:	50 a7       	stdsp	sp[0x28],r7
8000409a:	50 80       	stdsp	sp[0x20],r0
8000409c:	0c 97       	mov	r7,r6
8000409e:	04 94       	mov	r4,r2
800040a0:	06 96       	mov	r6,r3
800040a2:	02 92       	mov	r2,r1
800040a4:	40 93       	lddsp	r3,sp[0x24]
800040a6:	10 90       	mov	r0,r8
800040a8:	40 41       	lddsp	r1,sp[0x10]
800040aa:	a5 a5       	sbr	r5,0x4
800040ac:	c0 a8       	rjmp	800040c0 <_vfprintf_r+0x524>
800040ae:	50 a7       	stdsp	sp[0x28],r7
800040b0:	50 80       	stdsp	sp[0x20],r0
800040b2:	0c 97       	mov	r7,r6
800040b4:	04 94       	mov	r4,r2
800040b6:	06 96       	mov	r6,r3
800040b8:	02 92       	mov	r2,r1
800040ba:	40 93       	lddsp	r3,sp[0x24]
800040bc:	10 90       	mov	r0,r8
800040be:	40 41       	lddsp	r1,sp[0x10]
800040c0:	ed b5 00 05 	bld	r5,0x5
800040c4:	c5 11       	brne	80004166 <_vfprintf_r+0x5ca>
800040c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040ca:	40 3c       	lddsp	r12,sp[0xc]
800040cc:	58 0c       	cp.w	r12,0
800040ce:	c1 e0       	breq	8000410a <_vfprintf_r+0x56e>
800040d0:	10 36       	cp.w	r6,r8
800040d2:	c0 64       	brge	800040de <_vfprintf_r+0x542>
800040d4:	fa cb f9 44 	sub	r11,sp,-1724
800040d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800040dc:	c2 08       	rjmp	8000411c <_vfprintf_r+0x580>
800040de:	fa c8 f9 50 	sub	r8,sp,-1712
800040e2:	1a d8       	st.w	--sp,r8
800040e4:	fa c8 fa b8 	sub	r8,sp,-1352
800040e8:	0c 9b       	mov	r11,r6
800040ea:	1a d8       	st.w	--sp,r8
800040ec:	fa c8 fb b4 	sub	r8,sp,-1100
800040f0:	1a d8       	st.w	--sp,r8
800040f2:	fa c9 ff b4 	sub	r9,sp,-76
800040f6:	fa c8 f9 40 	sub	r8,sp,-1728
800040fa:	04 9a       	mov	r10,r2
800040fc:	08 9c       	mov	r12,r4
800040fe:	fe b0 fb b7 	rcall	8000386c <get_arg>
80004102:	2f dd       	sub	sp,-12
80004104:	78 1b       	ld.w	r11,r12[0x4]
80004106:	78 09       	ld.w	r9,r12[0x0]
80004108:	c2 b8       	rjmp	8000415e <_vfprintf_r+0x5c2>
8000410a:	ee ca ff ff 	sub	r10,r7,-1
8000410e:	10 37       	cp.w	r7,r8
80004110:	c0 b4       	brge	80004126 <_vfprintf_r+0x58a>
80004112:	fa c9 f9 44 	sub	r9,sp,-1724
80004116:	14 97       	mov	r7,r10
80004118:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000411c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004120:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004124:	c1 d8       	rjmp	8000415e <_vfprintf_r+0x5c2>
80004126:	41 09       	lddsp	r9,sp[0x40]
80004128:	59 f8       	cp.w	r8,31
8000412a:	e0 89 00 14 	brgt	80004152 <_vfprintf_r+0x5b6>
8000412e:	f2 cb ff f8 	sub	r11,r9,-8
80004132:	51 0b       	stdsp	sp[0x40],r11
80004134:	fa c6 f9 44 	sub	r6,sp,-1724
80004138:	72 1b       	ld.w	r11,r9[0x4]
8000413a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000413e:	72 09       	ld.w	r9,r9[0x0]
80004140:	f9 4b fd 8c 	st.w	r12[-628],r11
80004144:	f9 49 fd 88 	st.w	r12[-632],r9
80004148:	2f f8       	sub	r8,-1
8000414a:	14 97       	mov	r7,r10
8000414c:	fb 48 06 b4 	st.w	sp[1716],r8
80004150:	c0 78       	rjmp	8000415e <_vfprintf_r+0x5c2>
80004152:	f2 c8 ff f8 	sub	r8,r9,-8
80004156:	72 1b       	ld.w	r11,r9[0x4]
80004158:	14 97       	mov	r7,r10
8000415a:	51 08       	stdsp	sp[0x40],r8
8000415c:	72 09       	ld.w	r9,r9[0x0]
8000415e:	16 98       	mov	r8,r11
80004160:	fa e9 00 00 	st.d	sp[0],r8
80004164:	ca e8       	rjmp	800042c0 <_vfprintf_r+0x724>
80004166:	ed b5 00 04 	bld	r5,0x4
8000416a:	c1 71       	brne	80004198 <_vfprintf_r+0x5fc>
8000416c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004170:	40 3e       	lddsp	lr,sp[0xc]
80004172:	58 0e       	cp.w	lr,0
80004174:	c0 80       	breq	80004184 <_vfprintf_r+0x5e8>
80004176:	10 36       	cp.w	r6,r8
80004178:	c6 94       	brge	8000424a <_vfprintf_r+0x6ae>
8000417a:	fa cc f9 44 	sub	r12,sp,-1724
8000417e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004182:	c8 28       	rjmp	80004286 <_vfprintf_r+0x6ea>
80004184:	ee ca ff ff 	sub	r10,r7,-1
80004188:	10 37       	cp.w	r7,r8
8000418a:	e0 84 00 81 	brge	8000428c <_vfprintf_r+0x6f0>
8000418e:	fa cb f9 44 	sub	r11,sp,-1724
80004192:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004196:	c7 78       	rjmp	80004284 <_vfprintf_r+0x6e8>
80004198:	ed b5 00 06 	bld	r5,0x6
8000419c:	c4 b1       	brne	80004232 <_vfprintf_r+0x696>
8000419e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800041a2:	40 3c       	lddsp	r12,sp[0xc]
800041a4:	58 0c       	cp.w	r12,0
800041a6:	c1 d0       	breq	800041e0 <_vfprintf_r+0x644>
800041a8:	10 36       	cp.w	r6,r8
800041aa:	c0 64       	brge	800041b6 <_vfprintf_r+0x61a>
800041ac:	fa cb f9 44 	sub	r11,sp,-1724
800041b0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800041b4:	c1 f8       	rjmp	800041f2 <_vfprintf_r+0x656>
800041b6:	fa c8 f9 50 	sub	r8,sp,-1712
800041ba:	1a d8       	st.w	--sp,r8
800041bc:	fa c8 fa b8 	sub	r8,sp,-1352
800041c0:	1a d8       	st.w	--sp,r8
800041c2:	fa c8 fb b4 	sub	r8,sp,-1100
800041c6:	1a d8       	st.w	--sp,r8
800041c8:	fa c8 f9 40 	sub	r8,sp,-1728
800041cc:	fa c9 ff b4 	sub	r9,sp,-76
800041d0:	04 9a       	mov	r10,r2
800041d2:	0c 9b       	mov	r11,r6
800041d4:	08 9c       	mov	r12,r4
800041d6:	fe b0 fb 4b 	rcall	8000386c <get_arg>
800041da:	2f dd       	sub	sp,-12
800041dc:	98 18       	ld.sh	r8,r12[0x2]
800041de:	c2 68       	rjmp	8000422a <_vfprintf_r+0x68e>
800041e0:	ee ca ff ff 	sub	r10,r7,-1
800041e4:	10 37       	cp.w	r7,r8
800041e6:	c0 94       	brge	800041f8 <_vfprintf_r+0x65c>
800041e8:	fa c9 f9 44 	sub	r9,sp,-1724
800041ec:	14 97       	mov	r7,r10
800041ee:	f2 06 00 36 	add	r6,r9,r6<<0x3
800041f2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800041f6:	c1 a8       	rjmp	8000422a <_vfprintf_r+0x68e>
800041f8:	41 09       	lddsp	r9,sp[0x40]
800041fa:	59 f8       	cp.w	r8,31
800041fc:	e0 89 00 13 	brgt	80004222 <_vfprintf_r+0x686>
80004200:	f2 cb ff fc 	sub	r11,r9,-4
80004204:	51 0b       	stdsp	sp[0x40],r11
80004206:	72 09       	ld.w	r9,r9[0x0]
80004208:	fa c6 f9 44 	sub	r6,sp,-1724
8000420c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004210:	2f f8       	sub	r8,-1
80004212:	f7 49 fd 88 	st.w	r11[-632],r9
80004216:	fb 48 06 b4 	st.w	sp[1716],r8
8000421a:	14 97       	mov	r7,r10
8000421c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004220:	c0 58       	rjmp	8000422a <_vfprintf_r+0x68e>
80004222:	92 18       	ld.sh	r8,r9[0x2]
80004224:	14 97       	mov	r7,r10
80004226:	2f c9       	sub	r9,-4
80004228:	51 09       	stdsp	sp[0x40],r9
8000422a:	50 18       	stdsp	sp[0x4],r8
8000422c:	bf 58       	asr	r8,0x1f
8000422e:	50 08       	stdsp	sp[0x0],r8
80004230:	c4 88       	rjmp	800042c0 <_vfprintf_r+0x724>
80004232:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004236:	40 3c       	lddsp	r12,sp[0xc]
80004238:	58 0c       	cp.w	r12,0
8000423a:	c1 d0       	breq	80004274 <_vfprintf_r+0x6d8>
8000423c:	10 36       	cp.w	r6,r8
8000423e:	c0 64       	brge	8000424a <_vfprintf_r+0x6ae>
80004240:	fa cb f9 44 	sub	r11,sp,-1724
80004244:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004248:	c1 f8       	rjmp	80004286 <_vfprintf_r+0x6ea>
8000424a:	fa c8 f9 50 	sub	r8,sp,-1712
8000424e:	1a d8       	st.w	--sp,r8
80004250:	fa c8 fa b8 	sub	r8,sp,-1352
80004254:	0c 9b       	mov	r11,r6
80004256:	1a d8       	st.w	--sp,r8
80004258:	fa c8 fb b4 	sub	r8,sp,-1100
8000425c:	04 9a       	mov	r10,r2
8000425e:	1a d8       	st.w	--sp,r8
80004260:	08 9c       	mov	r12,r4
80004262:	fa c8 f9 40 	sub	r8,sp,-1728
80004266:	fa c9 ff b4 	sub	r9,sp,-76
8000426a:	fe b0 fb 01 	rcall	8000386c <get_arg>
8000426e:	2f dd       	sub	sp,-12
80004270:	78 0b       	ld.w	r11,r12[0x0]
80004272:	c2 48       	rjmp	800042ba <_vfprintf_r+0x71e>
80004274:	ee ca ff ff 	sub	r10,r7,-1
80004278:	10 37       	cp.w	r7,r8
8000427a:	c0 94       	brge	8000428c <_vfprintf_r+0x6f0>
8000427c:	fa c9 f9 44 	sub	r9,sp,-1724
80004280:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004284:	14 97       	mov	r7,r10
80004286:	ec fb fd 88 	ld.w	r11,r6[-632]
8000428a:	c1 88       	rjmp	800042ba <_vfprintf_r+0x71e>
8000428c:	41 09       	lddsp	r9,sp[0x40]
8000428e:	59 f8       	cp.w	r8,31
80004290:	e0 89 00 11 	brgt	800042b2 <_vfprintf_r+0x716>
80004294:	f2 cb ff fc 	sub	r11,r9,-4
80004298:	51 0b       	stdsp	sp[0x40],r11
8000429a:	fa c6 f9 44 	sub	r6,sp,-1724
8000429e:	72 0b       	ld.w	r11,r9[0x0]
800042a0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800042a4:	f3 4b fd 88 	st.w	r9[-632],r11
800042a8:	2f f8       	sub	r8,-1
800042aa:	14 97       	mov	r7,r10
800042ac:	fb 48 06 b4 	st.w	sp[1716],r8
800042b0:	c0 58       	rjmp	800042ba <_vfprintf_r+0x71e>
800042b2:	72 0b       	ld.w	r11,r9[0x0]
800042b4:	14 97       	mov	r7,r10
800042b6:	2f c9       	sub	r9,-4
800042b8:	51 09       	stdsp	sp[0x40],r9
800042ba:	50 1b       	stdsp	sp[0x4],r11
800042bc:	bf 5b       	asr	r11,0x1f
800042be:	50 0b       	stdsp	sp[0x0],r11
800042c0:	fa ea 00 00 	ld.d	r10,sp[0]
800042c4:	58 0a       	cp.w	r10,0
800042c6:	5c 2b       	cpc	r11
800042c8:	c0 e4       	brge	800042e4 <_vfprintf_r+0x748>
800042ca:	30 08       	mov	r8,0
800042cc:	fa ea 00 00 	ld.d	r10,sp[0]
800042d0:	30 09       	mov	r9,0
800042d2:	f0 0a 01 0a 	sub	r10,r8,r10
800042d6:	f2 0b 01 4b 	sbc	r11,r9,r11
800042da:	32 d8       	mov	r8,45
800042dc:	fa eb 00 00 	st.d	sp[0],r10
800042e0:	fb 68 06 bb 	st.b	sp[1723],r8
800042e4:	30 18       	mov	r8,1
800042e6:	e0 8f 06 fa 	bral	800050da <_vfprintf_r+0x153e>
800042ea:	50 a7       	stdsp	sp[0x28],r7
800042ec:	50 80       	stdsp	sp[0x20],r0
800042ee:	0c 97       	mov	r7,r6
800042f0:	04 94       	mov	r4,r2
800042f2:	06 96       	mov	r6,r3
800042f4:	02 92       	mov	r2,r1
800042f6:	40 93       	lddsp	r3,sp[0x24]
800042f8:	10 90       	mov	r0,r8
800042fa:	40 41       	lddsp	r1,sp[0x10]
800042fc:	0e 99       	mov	r9,r7
800042fe:	ed b5 00 03 	bld	r5,0x3
80004302:	c4 11       	brne	80004384 <_vfprintf_r+0x7e8>
80004304:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004308:	40 3a       	lddsp	r10,sp[0xc]
8000430a:	58 0a       	cp.w	r10,0
8000430c:	c1 90       	breq	8000433e <_vfprintf_r+0x7a2>
8000430e:	10 36       	cp.w	r6,r8
80004310:	c6 45       	brlt	800043d8 <_vfprintf_r+0x83c>
80004312:	fa c8 f9 50 	sub	r8,sp,-1712
80004316:	1a d8       	st.w	--sp,r8
80004318:	fa c8 fa b8 	sub	r8,sp,-1352
8000431c:	1a d8       	st.w	--sp,r8
8000431e:	fa c8 fb b4 	sub	r8,sp,-1100
80004322:	0c 9b       	mov	r11,r6
80004324:	1a d8       	st.w	--sp,r8
80004326:	04 9a       	mov	r10,r2
80004328:	fa c8 f9 40 	sub	r8,sp,-1728
8000432c:	fa c9 ff b4 	sub	r9,sp,-76
80004330:	08 9c       	mov	r12,r4
80004332:	fe b0 fa 9d 	rcall	8000386c <get_arg>
80004336:	2f dd       	sub	sp,-12
80004338:	78 16       	ld.w	r6,r12[0x4]
8000433a:	50 76       	stdsp	sp[0x1c],r6
8000433c:	c4 88       	rjmp	800043cc <_vfprintf_r+0x830>
8000433e:	2f f7       	sub	r7,-1
80004340:	10 39       	cp.w	r9,r8
80004342:	c0 c4       	brge	8000435a <_vfprintf_r+0x7be>
80004344:	fa ce f9 44 	sub	lr,sp,-1724
80004348:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000434c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004350:	50 7c       	stdsp	sp[0x1c],r12
80004352:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004356:	50 56       	stdsp	sp[0x14],r6
80004358:	c6 68       	rjmp	80004424 <_vfprintf_r+0x888>
8000435a:	41 09       	lddsp	r9,sp[0x40]
8000435c:	59 f8       	cp.w	r8,31
8000435e:	e0 89 00 10 	brgt	8000437e <_vfprintf_r+0x7e2>
80004362:	f2 ca ff f8 	sub	r10,r9,-8
80004366:	72 1b       	ld.w	r11,r9[0x4]
80004368:	51 0a       	stdsp	sp[0x40],r10
8000436a:	72 09       	ld.w	r9,r9[0x0]
8000436c:	fa ca f9 44 	sub	r10,sp,-1724
80004370:	50 7b       	stdsp	sp[0x1c],r11
80004372:	50 59       	stdsp	sp[0x14],r9
80004374:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004378:	40 5b       	lddsp	r11,sp[0x14]
8000437a:	40 7a       	lddsp	r10,sp[0x1c]
8000437c:	c4 78       	rjmp	8000440a <_vfprintf_r+0x86e>
8000437e:	72 18       	ld.w	r8,r9[0x4]
80004380:	50 78       	stdsp	sp[0x1c],r8
80004382:	c4 c8       	rjmp	8000441a <_vfprintf_r+0x87e>
80004384:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004388:	40 3e       	lddsp	lr,sp[0xc]
8000438a:	58 0e       	cp.w	lr,0
8000438c:	c2 30       	breq	800043d2 <_vfprintf_r+0x836>
8000438e:	10 36       	cp.w	r6,r8
80004390:	c0 94       	brge	800043a2 <_vfprintf_r+0x806>
80004392:	fa cc f9 44 	sub	r12,sp,-1724
80004396:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000439a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000439e:	50 7b       	stdsp	sp[0x1c],r11
800043a0:	cd 9b       	rjmp	80004352 <_vfprintf_r+0x7b6>
800043a2:	fa c8 f9 50 	sub	r8,sp,-1712
800043a6:	1a d8       	st.w	--sp,r8
800043a8:	fa c8 fa b8 	sub	r8,sp,-1352
800043ac:	04 9a       	mov	r10,r2
800043ae:	1a d8       	st.w	--sp,r8
800043b0:	fa c8 fb b4 	sub	r8,sp,-1100
800043b4:	0c 9b       	mov	r11,r6
800043b6:	1a d8       	st.w	--sp,r8
800043b8:	08 9c       	mov	r12,r4
800043ba:	fa c8 f9 40 	sub	r8,sp,-1728
800043be:	fa c9 ff b4 	sub	r9,sp,-76
800043c2:	fe b0 fa 55 	rcall	8000386c <get_arg>
800043c6:	2f dd       	sub	sp,-12
800043c8:	78 1a       	ld.w	r10,r12[0x4]
800043ca:	50 7a       	stdsp	sp[0x1c],r10
800043cc:	78 0c       	ld.w	r12,r12[0x0]
800043ce:	50 5c       	stdsp	sp[0x14],r12
800043d0:	c2 a8       	rjmp	80004424 <_vfprintf_r+0x888>
800043d2:	2f f7       	sub	r7,-1
800043d4:	10 39       	cp.w	r9,r8
800043d6:	c0 94       	brge	800043e8 <_vfprintf_r+0x84c>
800043d8:	fa c9 f9 44 	sub	r9,sp,-1724
800043dc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800043e0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800043e4:	50 78       	stdsp	sp[0x1c],r8
800043e6:	cb 6b       	rjmp	80004352 <_vfprintf_r+0x7b6>
800043e8:	41 09       	lddsp	r9,sp[0x40]
800043ea:	59 f8       	cp.w	r8,31
800043ec:	e0 89 00 15 	brgt	80004416 <_vfprintf_r+0x87a>
800043f0:	f2 ca ff f8 	sub	r10,r9,-8
800043f4:	72 16       	ld.w	r6,r9[0x4]
800043f6:	72 09       	ld.w	r9,r9[0x0]
800043f8:	51 0a       	stdsp	sp[0x40],r10
800043fa:	50 59       	stdsp	sp[0x14],r9
800043fc:	fa ce f9 44 	sub	lr,sp,-1724
80004400:	50 76       	stdsp	sp[0x1c],r6
80004402:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004406:	40 5b       	lddsp	r11,sp[0x14]
80004408:	0c 9a       	mov	r10,r6
8000440a:	f2 eb fd 88 	st.d	r9[-632],r10
8000440e:	2f f8       	sub	r8,-1
80004410:	fb 48 06 b4 	st.w	sp[1716],r8
80004414:	c0 88       	rjmp	80004424 <_vfprintf_r+0x888>
80004416:	72 1c       	ld.w	r12,r9[0x4]
80004418:	50 7c       	stdsp	sp[0x1c],r12
8000441a:	f2 c8 ff f8 	sub	r8,r9,-8
8000441e:	51 08       	stdsp	sp[0x40],r8
80004420:	72 09       	ld.w	r9,r9[0x0]
80004422:	50 59       	stdsp	sp[0x14],r9
80004424:	40 5b       	lddsp	r11,sp[0x14]
80004426:	40 7a       	lddsp	r10,sp[0x1c]
80004428:	e0 a0 1c de 	rcall	80007de4 <__isinfd>
8000442c:	18 96       	mov	r6,r12
8000442e:	c1 70       	breq	8000445c <_vfprintf_r+0x8c0>
80004430:	30 08       	mov	r8,0
80004432:	30 09       	mov	r9,0
80004434:	40 5b       	lddsp	r11,sp[0x14]
80004436:	40 7a       	lddsp	r10,sp[0x1c]
80004438:	e0 a0 21 cc 	rcall	800087d0 <__avr32_f64_cmp_lt>
8000443c:	c0 40       	breq	80004444 <_vfprintf_r+0x8a8>
8000443e:	32 d8       	mov	r8,45
80004440:	fb 68 06 bb 	st.b	sp[1723],r8
80004444:	fe c8 ad e0 	sub	r8,pc,-21024
80004448:	fe c6 ad e0 	sub	r6,pc,-21024
8000444c:	a7 d5       	cbr	r5,0x7
8000444e:	e0 40 00 47 	cp.w	r0,71
80004452:	f0 06 17 a0 	movle	r6,r8
80004456:	30 32       	mov	r2,3
80004458:	e0 8f 06 ce 	bral	800051f4 <_vfprintf_r+0x1658>
8000445c:	40 5b       	lddsp	r11,sp[0x14]
8000445e:	40 7a       	lddsp	r10,sp[0x1c]
80004460:	e0 a0 1c d7 	rcall	80007e0e <__isnand>
80004464:	c0 e0       	breq	80004480 <_vfprintf_r+0x8e4>
80004466:	50 26       	stdsp	sp[0x8],r6
80004468:	fe c8 ad fc 	sub	r8,pc,-20996
8000446c:	fe c6 ad fc 	sub	r6,pc,-20996
80004470:	a7 d5       	cbr	r5,0x7
80004472:	e0 40 00 47 	cp.w	r0,71
80004476:	f0 06 17 a0 	movle	r6,r8
8000447a:	30 32       	mov	r2,3
8000447c:	e0 8f 06 c2 	bral	80005200 <_vfprintf_r+0x1664>
80004480:	40 2a       	lddsp	r10,sp[0x8]
80004482:	5b fa       	cp.w	r10,-1
80004484:	c0 41       	brne	8000448c <_vfprintf_r+0x8f0>
80004486:	30 69       	mov	r9,6
80004488:	50 29       	stdsp	sp[0x8],r9
8000448a:	c1 18       	rjmp	800044ac <_vfprintf_r+0x910>
8000448c:	e0 40 00 47 	cp.w	r0,71
80004490:	5f 09       	sreq	r9
80004492:	e0 40 00 67 	cp.w	r0,103
80004496:	5f 08       	sreq	r8
80004498:	f3 e8 10 08 	or	r8,r9,r8
8000449c:	f8 08 18 00 	cp.b	r8,r12
800044a0:	c0 60       	breq	800044ac <_vfprintf_r+0x910>
800044a2:	40 28       	lddsp	r8,sp[0x8]
800044a4:	58 08       	cp.w	r8,0
800044a6:	f9 b8 00 01 	moveq	r8,1
800044aa:	50 28       	stdsp	sp[0x8],r8
800044ac:	40 78       	lddsp	r8,sp[0x1c]
800044ae:	40 59       	lddsp	r9,sp[0x14]
800044b0:	fa e9 06 94 	st.d	sp[1684],r8
800044b4:	a9 a5       	sbr	r5,0x8
800044b6:	fa f8 06 94 	ld.w	r8,sp[1684]
800044ba:	58 08       	cp.w	r8,0
800044bc:	c0 65       	brlt	800044c8 <_vfprintf_r+0x92c>
800044be:	40 5e       	lddsp	lr,sp[0x14]
800044c0:	30 0c       	mov	r12,0
800044c2:	50 6e       	stdsp	sp[0x18],lr
800044c4:	50 9c       	stdsp	sp[0x24],r12
800044c6:	c0 78       	rjmp	800044d4 <_vfprintf_r+0x938>
800044c8:	40 5b       	lddsp	r11,sp[0x14]
800044ca:	32 da       	mov	r10,45
800044cc:	ee 1b 80 00 	eorh	r11,0x8000
800044d0:	50 9a       	stdsp	sp[0x24],r10
800044d2:	50 6b       	stdsp	sp[0x18],r11
800044d4:	e0 40 00 46 	cp.w	r0,70
800044d8:	5f 09       	sreq	r9
800044da:	e0 40 00 66 	cp.w	r0,102
800044de:	5f 08       	sreq	r8
800044e0:	f3 e8 10 08 	or	r8,r9,r8
800044e4:	50 48       	stdsp	sp[0x10],r8
800044e6:	c0 40       	breq	800044ee <_vfprintf_r+0x952>
800044e8:	40 22       	lddsp	r2,sp[0x8]
800044ea:	30 39       	mov	r9,3
800044ec:	c1 08       	rjmp	8000450c <_vfprintf_r+0x970>
800044ee:	e0 40 00 45 	cp.w	r0,69
800044f2:	5f 09       	sreq	r9
800044f4:	e0 40 00 65 	cp.w	r0,101
800044f8:	5f 08       	sreq	r8
800044fa:	40 22       	lddsp	r2,sp[0x8]
800044fc:	10 49       	or	r9,r8
800044fe:	2f f2       	sub	r2,-1
80004500:	40 46       	lddsp	r6,sp[0x10]
80004502:	ec 09 18 00 	cp.b	r9,r6
80004506:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000450a:	30 29       	mov	r9,2
8000450c:	fa c8 f9 5c 	sub	r8,sp,-1700
80004510:	1a d8       	st.w	--sp,r8
80004512:	fa c8 f9 54 	sub	r8,sp,-1708
80004516:	1a d8       	st.w	--sp,r8
80004518:	fa c8 f9 4c 	sub	r8,sp,-1716
8000451c:	08 9c       	mov	r12,r4
8000451e:	1a d8       	st.w	--sp,r8
80004520:	04 98       	mov	r8,r2
80004522:	40 9b       	lddsp	r11,sp[0x24]
80004524:	40 aa       	lddsp	r10,sp[0x28]
80004526:	e0 a0 0b c3 	rcall	80005cac <_dtoa_r>
8000452a:	e0 40 00 47 	cp.w	r0,71
8000452e:	5f 19       	srne	r9
80004530:	e0 40 00 67 	cp.w	r0,103
80004534:	5f 18       	srne	r8
80004536:	18 96       	mov	r6,r12
80004538:	2f dd       	sub	sp,-12
8000453a:	f3 e8 00 08 	and	r8,r9,r8
8000453e:	c0 41       	brne	80004546 <_vfprintf_r+0x9aa>
80004540:	ed b5 00 00 	bld	r5,0x0
80004544:	c3 01       	brne	800045a4 <_vfprintf_r+0xa08>
80004546:	ec 02 00 0e 	add	lr,r6,r2
8000454a:	50 3e       	stdsp	sp[0xc],lr
8000454c:	40 4c       	lddsp	r12,sp[0x10]
8000454e:	58 0c       	cp.w	r12,0
80004550:	c1 50       	breq	8000457a <_vfprintf_r+0x9de>
80004552:	0d 89       	ld.ub	r9,r6[0x0]
80004554:	33 08       	mov	r8,48
80004556:	f0 09 18 00 	cp.b	r9,r8
8000455a:	c0 b1       	brne	80004570 <_vfprintf_r+0x9d4>
8000455c:	30 08       	mov	r8,0
8000455e:	30 09       	mov	r9,0
80004560:	40 6b       	lddsp	r11,sp[0x18]
80004562:	40 7a       	lddsp	r10,sp[0x1c]
80004564:	e0 a0 20 ef 	rcall	80008742 <__avr32_f64_cmp_eq>
80004568:	fb b2 00 01 	rsubeq	r2,1
8000456c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004570:	40 3b       	lddsp	r11,sp[0xc]
80004572:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004576:	10 0b       	add	r11,r8
80004578:	50 3b       	stdsp	sp[0xc],r11
8000457a:	40 6b       	lddsp	r11,sp[0x18]
8000457c:	30 08       	mov	r8,0
8000457e:	30 09       	mov	r9,0
80004580:	40 7a       	lddsp	r10,sp[0x1c]
80004582:	e0 a0 20 e0 	rcall	80008742 <__avr32_f64_cmp_eq>
80004586:	c0 90       	breq	80004598 <_vfprintf_r+0x9fc>
80004588:	40 3a       	lddsp	r10,sp[0xc]
8000458a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000458e:	c0 58       	rjmp	80004598 <_vfprintf_r+0x9fc>
80004590:	10 c9       	st.b	r8++,r9
80004592:	fb 48 06 a4 	st.w	sp[1700],r8
80004596:	c0 28       	rjmp	8000459a <_vfprintf_r+0x9fe>
80004598:	33 09       	mov	r9,48
8000459a:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000459e:	40 3e       	lddsp	lr,sp[0xc]
800045a0:	1c 38       	cp.w	r8,lr
800045a2:	cf 73       	brcs	80004590 <_vfprintf_r+0x9f4>
800045a4:	e0 40 00 47 	cp.w	r0,71
800045a8:	5f 09       	sreq	r9
800045aa:	e0 40 00 67 	cp.w	r0,103
800045ae:	5f 08       	sreq	r8
800045b0:	f3 e8 10 08 	or	r8,r9,r8
800045b4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800045b8:	0c 19       	sub	r9,r6
800045ba:	50 69       	stdsp	sp[0x18],r9
800045bc:	58 08       	cp.w	r8,0
800045be:	c0 b0       	breq	800045d4 <_vfprintf_r+0xa38>
800045c0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800045c4:	5b d8       	cp.w	r8,-3
800045c6:	c0 55       	brlt	800045d0 <_vfprintf_r+0xa34>
800045c8:	40 2c       	lddsp	r12,sp[0x8]
800045ca:	18 38       	cp.w	r8,r12
800045cc:	e0 8a 00 6a 	brle	800046a0 <_vfprintf_r+0xb04>
800045d0:	20 20       	sub	r0,2
800045d2:	c0 58       	rjmp	800045dc <_vfprintf_r+0xa40>
800045d4:	e0 40 00 65 	cp.w	r0,101
800045d8:	e0 89 00 46 	brgt	80004664 <_vfprintf_r+0xac8>
800045dc:	fa fb 06 ac 	ld.w	r11,sp[1708]
800045e0:	fb 60 06 9c 	st.b	sp[1692],r0
800045e4:	20 1b       	sub	r11,1
800045e6:	fb 4b 06 ac 	st.w	sp[1708],r11
800045ea:	c0 47       	brpl	800045f2 <_vfprintf_r+0xa56>
800045ec:	5c 3b       	neg	r11
800045ee:	32 d8       	mov	r8,45
800045f0:	c0 28       	rjmp	800045f4 <_vfprintf_r+0xa58>
800045f2:	32 b8       	mov	r8,43
800045f4:	fb 68 06 9d 	st.b	sp[1693],r8
800045f8:	58 9b       	cp.w	r11,9
800045fa:	e0 8a 00 1d 	brle	80004634 <_vfprintf_r+0xa98>
800045fe:	fa c9 fa 35 	sub	r9,sp,-1483
80004602:	30 aa       	mov	r10,10
80004604:	12 98       	mov	r8,r9
80004606:	0e 9c       	mov	r12,r7
80004608:	0c 92       	mov	r2,r6
8000460a:	f6 0a 0c 06 	divs	r6,r11,r10
8000460e:	0e 9b       	mov	r11,r7
80004610:	2d 0b       	sub	r11,-48
80004612:	10 fb       	st.b	--r8,r11
80004614:	0c 9b       	mov	r11,r6
80004616:	58 96       	cp.w	r6,9
80004618:	fe 99 ff f9 	brgt	8000460a <_vfprintf_r+0xa6e>
8000461c:	2d 0b       	sub	r11,-48
8000461e:	18 97       	mov	r7,r12
80004620:	04 96       	mov	r6,r2
80004622:	10 fb       	st.b	--r8,r11
80004624:	fa ca f9 62 	sub	r10,sp,-1694
80004628:	c0 38       	rjmp	8000462e <_vfprintf_r+0xa92>
8000462a:	11 3b       	ld.ub	r11,r8++
8000462c:	14 cb       	st.b	r10++,r11
8000462e:	12 38       	cp.w	r8,r9
80004630:	cf d3       	brcs	8000462a <_vfprintf_r+0xa8e>
80004632:	c0 98       	rjmp	80004644 <_vfprintf_r+0xaa8>
80004634:	2d 0b       	sub	r11,-48
80004636:	33 08       	mov	r8,48
80004638:	fb 6b 06 9f 	st.b	sp[1695],r11
8000463c:	fb 68 06 9e 	st.b	sp[1694],r8
80004640:	fa ca f9 60 	sub	r10,sp,-1696
80004644:	fa c8 f9 64 	sub	r8,sp,-1692
80004648:	f4 08 01 08 	sub	r8,r10,r8
8000464c:	50 e8       	stdsp	sp[0x38],r8
8000464e:	10 92       	mov	r2,r8
80004650:	40 6b       	lddsp	r11,sp[0x18]
80004652:	16 02       	add	r2,r11
80004654:	58 1b       	cp.w	r11,1
80004656:	e0 89 00 05 	brgt	80004660 <_vfprintf_r+0xac4>
8000465a:	ed b5 00 00 	bld	r5,0x0
8000465e:	c3 51       	brne	800046c8 <_vfprintf_r+0xb2c>
80004660:	2f f2       	sub	r2,-1
80004662:	c3 38       	rjmp	800046c8 <_vfprintf_r+0xb2c>
80004664:	e0 40 00 66 	cp.w	r0,102
80004668:	c1 c1       	brne	800046a0 <_vfprintf_r+0xb04>
8000466a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000466e:	58 02       	cp.w	r2,0
80004670:	e0 8a 00 0c 	brle	80004688 <_vfprintf_r+0xaec>
80004674:	40 2a       	lddsp	r10,sp[0x8]
80004676:	58 0a       	cp.w	r10,0
80004678:	c0 41       	brne	80004680 <_vfprintf_r+0xae4>
8000467a:	ed b5 00 00 	bld	r5,0x0
8000467e:	c2 51       	brne	800046c8 <_vfprintf_r+0xb2c>
80004680:	2f f2       	sub	r2,-1
80004682:	40 29       	lddsp	r9,sp[0x8]
80004684:	12 02       	add	r2,r9
80004686:	c0 b8       	rjmp	8000469c <_vfprintf_r+0xb00>
80004688:	40 28       	lddsp	r8,sp[0x8]
8000468a:	58 08       	cp.w	r8,0
8000468c:	c0 61       	brne	80004698 <_vfprintf_r+0xafc>
8000468e:	ed b5 00 00 	bld	r5,0x0
80004692:	c0 30       	breq	80004698 <_vfprintf_r+0xafc>
80004694:	30 12       	mov	r2,1
80004696:	c1 98       	rjmp	800046c8 <_vfprintf_r+0xb2c>
80004698:	40 22       	lddsp	r2,sp[0x8]
8000469a:	2f e2       	sub	r2,-2
8000469c:	36 60       	mov	r0,102
8000469e:	c1 58       	rjmp	800046c8 <_vfprintf_r+0xb2c>
800046a0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800046a4:	40 6e       	lddsp	lr,sp[0x18]
800046a6:	1c 32       	cp.w	r2,lr
800046a8:	c0 65       	brlt	800046b4 <_vfprintf_r+0xb18>
800046aa:	ed b5 00 00 	bld	r5,0x0
800046ae:	f7 b2 00 ff 	subeq	r2,-1
800046b2:	c0 a8       	rjmp	800046c6 <_vfprintf_r+0xb2a>
800046b4:	e4 08 11 02 	rsub	r8,r2,2
800046b8:	40 6c       	lddsp	r12,sp[0x18]
800046ba:	58 02       	cp.w	r2,0
800046bc:	f0 02 17 a0 	movle	r2,r8
800046c0:	f9 b2 09 01 	movgt	r2,1
800046c4:	18 02       	add	r2,r12
800046c6:	36 70       	mov	r0,103
800046c8:	40 9b       	lddsp	r11,sp[0x24]
800046ca:	58 0b       	cp.w	r11,0
800046cc:	e0 80 05 94 	breq	800051f4 <_vfprintf_r+0x1658>
800046d0:	32 d8       	mov	r8,45
800046d2:	fb 68 06 bb 	st.b	sp[1723],r8
800046d6:	e0 8f 05 93 	bral	800051fc <_vfprintf_r+0x1660>
800046da:	50 a7       	stdsp	sp[0x28],r7
800046dc:	04 94       	mov	r4,r2
800046de:	0c 97       	mov	r7,r6
800046e0:	02 92       	mov	r2,r1
800046e2:	06 96       	mov	r6,r3
800046e4:	40 41       	lddsp	r1,sp[0x10]
800046e6:	40 93       	lddsp	r3,sp[0x24]
800046e8:	0e 99       	mov	r9,r7
800046ea:	ed b5 00 05 	bld	r5,0x5
800046ee:	c4 81       	brne	8000477e <_vfprintf_r+0xbe2>
800046f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046f4:	40 3e       	lddsp	lr,sp[0xc]
800046f6:	58 0e       	cp.w	lr,0
800046f8:	c1 d0       	breq	80004732 <_vfprintf_r+0xb96>
800046fa:	10 36       	cp.w	r6,r8
800046fc:	c0 64       	brge	80004708 <_vfprintf_r+0xb6c>
800046fe:	fa cc f9 44 	sub	r12,sp,-1724
80004702:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004706:	c1 d8       	rjmp	80004740 <_vfprintf_r+0xba4>
80004708:	fa c8 f9 50 	sub	r8,sp,-1712
8000470c:	1a d8       	st.w	--sp,r8
8000470e:	fa c8 fa b8 	sub	r8,sp,-1352
80004712:	04 9a       	mov	r10,r2
80004714:	1a d8       	st.w	--sp,r8
80004716:	fa c8 fb b4 	sub	r8,sp,-1100
8000471a:	0c 9b       	mov	r11,r6
8000471c:	1a d8       	st.w	--sp,r8
8000471e:	08 9c       	mov	r12,r4
80004720:	fa c8 f9 40 	sub	r8,sp,-1728
80004724:	fa c9 ff b4 	sub	r9,sp,-76
80004728:	fe b0 f8 a2 	rcall	8000386c <get_arg>
8000472c:	2f dd       	sub	sp,-12
8000472e:	78 0a       	ld.w	r10,r12[0x0]
80004730:	c2 08       	rjmp	80004770 <_vfprintf_r+0xbd4>
80004732:	2f f7       	sub	r7,-1
80004734:	10 39       	cp.w	r9,r8
80004736:	c0 84       	brge	80004746 <_vfprintf_r+0xbaa>
80004738:	fa cb f9 44 	sub	r11,sp,-1724
8000473c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004740:	ec fa fd 88 	ld.w	r10,r6[-632]
80004744:	c1 68       	rjmp	80004770 <_vfprintf_r+0xbd4>
80004746:	41 09       	lddsp	r9,sp[0x40]
80004748:	59 f8       	cp.w	r8,31
8000474a:	e0 89 00 10 	brgt	8000476a <_vfprintf_r+0xbce>
8000474e:	f2 ca ff fc 	sub	r10,r9,-4
80004752:	51 0a       	stdsp	sp[0x40],r10
80004754:	fa c6 f9 44 	sub	r6,sp,-1724
80004758:	72 0a       	ld.w	r10,r9[0x0]
8000475a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000475e:	f3 4a fd 88 	st.w	r9[-632],r10
80004762:	2f f8       	sub	r8,-1
80004764:	fb 48 06 b4 	st.w	sp[1716],r8
80004768:	c0 48       	rjmp	80004770 <_vfprintf_r+0xbd4>
8000476a:	72 0a       	ld.w	r10,r9[0x0]
8000476c:	2f c9       	sub	r9,-4
8000476e:	51 09       	stdsp	sp[0x40],r9
80004770:	40 be       	lddsp	lr,sp[0x2c]
80004772:	1c 98       	mov	r8,lr
80004774:	95 1e       	st.w	r10[0x4],lr
80004776:	bf 58       	asr	r8,0x1f
80004778:	95 08       	st.w	r10[0x0],r8
8000477a:	fe 9f fa 9f 	bral	80003cb8 <_vfprintf_r+0x11c>
8000477e:	ed b5 00 04 	bld	r5,0x4
80004782:	c4 80       	breq	80004812 <_vfprintf_r+0xc76>
80004784:	e2 15 00 40 	andl	r5,0x40,COH
80004788:	c4 50       	breq	80004812 <_vfprintf_r+0xc76>
8000478a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000478e:	40 3c       	lddsp	r12,sp[0xc]
80004790:	58 0c       	cp.w	r12,0
80004792:	c1 d0       	breq	800047cc <_vfprintf_r+0xc30>
80004794:	10 36       	cp.w	r6,r8
80004796:	c0 64       	brge	800047a2 <_vfprintf_r+0xc06>
80004798:	fa cb f9 44 	sub	r11,sp,-1724
8000479c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800047a0:	c1 d8       	rjmp	800047da <_vfprintf_r+0xc3e>
800047a2:	fa c8 f9 50 	sub	r8,sp,-1712
800047a6:	1a d8       	st.w	--sp,r8
800047a8:	fa c8 fa b8 	sub	r8,sp,-1352
800047ac:	04 9a       	mov	r10,r2
800047ae:	1a d8       	st.w	--sp,r8
800047b0:	fa c8 fb b4 	sub	r8,sp,-1100
800047b4:	0c 9b       	mov	r11,r6
800047b6:	1a d8       	st.w	--sp,r8
800047b8:	08 9c       	mov	r12,r4
800047ba:	fa c8 f9 40 	sub	r8,sp,-1728
800047be:	fa c9 ff b4 	sub	r9,sp,-76
800047c2:	fe b0 f8 55 	rcall	8000386c <get_arg>
800047c6:	2f dd       	sub	sp,-12
800047c8:	78 0a       	ld.w	r10,r12[0x0]
800047ca:	c2 08       	rjmp	8000480a <_vfprintf_r+0xc6e>
800047cc:	2f f7       	sub	r7,-1
800047ce:	10 39       	cp.w	r9,r8
800047d0:	c0 84       	brge	800047e0 <_vfprintf_r+0xc44>
800047d2:	fa ca f9 44 	sub	r10,sp,-1724
800047d6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800047da:	ec fa fd 88 	ld.w	r10,r6[-632]
800047de:	c1 68       	rjmp	8000480a <_vfprintf_r+0xc6e>
800047e0:	41 09       	lddsp	r9,sp[0x40]
800047e2:	59 f8       	cp.w	r8,31
800047e4:	e0 89 00 10 	brgt	80004804 <_vfprintf_r+0xc68>
800047e8:	f2 ca ff fc 	sub	r10,r9,-4
800047ec:	51 0a       	stdsp	sp[0x40],r10
800047ee:	fa c6 f9 44 	sub	r6,sp,-1724
800047f2:	72 0a       	ld.w	r10,r9[0x0]
800047f4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800047f8:	f3 4a fd 88 	st.w	r9[-632],r10
800047fc:	2f f8       	sub	r8,-1
800047fe:	fb 48 06 b4 	st.w	sp[1716],r8
80004802:	c0 48       	rjmp	8000480a <_vfprintf_r+0xc6e>
80004804:	72 0a       	ld.w	r10,r9[0x0]
80004806:	2f c9       	sub	r9,-4
80004808:	51 09       	stdsp	sp[0x40],r9
8000480a:	40 be       	lddsp	lr,sp[0x2c]
8000480c:	b4 0e       	st.h	r10[0x0],lr
8000480e:	fe 9f fa 55 	bral	80003cb8 <_vfprintf_r+0x11c>
80004812:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004816:	40 3c       	lddsp	r12,sp[0xc]
80004818:	58 0c       	cp.w	r12,0
8000481a:	c1 d0       	breq	80004854 <_vfprintf_r+0xcb8>
8000481c:	10 36       	cp.w	r6,r8
8000481e:	c0 64       	brge	8000482a <_vfprintf_r+0xc8e>
80004820:	fa cb f9 44 	sub	r11,sp,-1724
80004824:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004828:	c1 d8       	rjmp	80004862 <_vfprintf_r+0xcc6>
8000482a:	fa c8 f9 50 	sub	r8,sp,-1712
8000482e:	1a d8       	st.w	--sp,r8
80004830:	fa c8 fa b8 	sub	r8,sp,-1352
80004834:	04 9a       	mov	r10,r2
80004836:	1a d8       	st.w	--sp,r8
80004838:	fa c8 fb b4 	sub	r8,sp,-1100
8000483c:	0c 9b       	mov	r11,r6
8000483e:	1a d8       	st.w	--sp,r8
80004840:	08 9c       	mov	r12,r4
80004842:	fa c8 f9 40 	sub	r8,sp,-1728
80004846:	fa c9 ff b4 	sub	r9,sp,-76
8000484a:	fe b0 f8 11 	rcall	8000386c <get_arg>
8000484e:	2f dd       	sub	sp,-12
80004850:	78 0a       	ld.w	r10,r12[0x0]
80004852:	c2 08       	rjmp	80004892 <_vfprintf_r+0xcf6>
80004854:	2f f7       	sub	r7,-1
80004856:	10 39       	cp.w	r9,r8
80004858:	c0 84       	brge	80004868 <_vfprintf_r+0xccc>
8000485a:	fa ca f9 44 	sub	r10,sp,-1724
8000485e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004862:	ec fa fd 88 	ld.w	r10,r6[-632]
80004866:	c1 68       	rjmp	80004892 <_vfprintf_r+0xcf6>
80004868:	41 09       	lddsp	r9,sp[0x40]
8000486a:	59 f8       	cp.w	r8,31
8000486c:	e0 89 00 10 	brgt	8000488c <_vfprintf_r+0xcf0>
80004870:	f2 ca ff fc 	sub	r10,r9,-4
80004874:	51 0a       	stdsp	sp[0x40],r10
80004876:	fa c6 f9 44 	sub	r6,sp,-1724
8000487a:	72 0a       	ld.w	r10,r9[0x0]
8000487c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004880:	f3 4a fd 88 	st.w	r9[-632],r10
80004884:	2f f8       	sub	r8,-1
80004886:	fb 48 06 b4 	st.w	sp[1716],r8
8000488a:	c0 48       	rjmp	80004892 <_vfprintf_r+0xcf6>
8000488c:	72 0a       	ld.w	r10,r9[0x0]
8000488e:	2f c9       	sub	r9,-4
80004890:	51 09       	stdsp	sp[0x40],r9
80004892:	40 be       	lddsp	lr,sp[0x2c]
80004894:	95 0e       	st.w	r10[0x0],lr
80004896:	fe 9f fa 11 	bral	80003cb8 <_vfprintf_r+0x11c>
8000489a:	50 a7       	stdsp	sp[0x28],r7
8000489c:	50 80       	stdsp	sp[0x20],r0
8000489e:	0c 97       	mov	r7,r6
800048a0:	04 94       	mov	r4,r2
800048a2:	06 96       	mov	r6,r3
800048a4:	02 92       	mov	r2,r1
800048a6:	40 93       	lddsp	r3,sp[0x24]
800048a8:	10 90       	mov	r0,r8
800048aa:	40 41       	lddsp	r1,sp[0x10]
800048ac:	a5 a5       	sbr	r5,0x4
800048ae:	c0 a8       	rjmp	800048c2 <_vfprintf_r+0xd26>
800048b0:	50 a7       	stdsp	sp[0x28],r7
800048b2:	50 80       	stdsp	sp[0x20],r0
800048b4:	0c 97       	mov	r7,r6
800048b6:	04 94       	mov	r4,r2
800048b8:	06 96       	mov	r6,r3
800048ba:	02 92       	mov	r2,r1
800048bc:	40 93       	lddsp	r3,sp[0x24]
800048be:	10 90       	mov	r0,r8
800048c0:	40 41       	lddsp	r1,sp[0x10]
800048c2:	ed b5 00 05 	bld	r5,0x5
800048c6:	c5 d1       	brne	80004980 <_vfprintf_r+0xde4>
800048c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048cc:	40 3c       	lddsp	r12,sp[0xc]
800048ce:	58 0c       	cp.w	r12,0
800048d0:	c2 60       	breq	8000491c <_vfprintf_r+0xd80>
800048d2:	10 36       	cp.w	r6,r8
800048d4:	c0 a4       	brge	800048e8 <_vfprintf_r+0xd4c>
800048d6:	fa cb f9 44 	sub	r11,sp,-1724
800048da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048de:	ec e8 fd 88 	ld.d	r8,r6[-632]
800048e2:	fa e9 00 00 	st.d	sp[0],r8
800048e6:	c1 88       	rjmp	80004916 <_vfprintf_r+0xd7a>
800048e8:	fa c8 f9 50 	sub	r8,sp,-1712
800048ec:	1a d8       	st.w	--sp,r8
800048ee:	fa c8 fa b8 	sub	r8,sp,-1352
800048f2:	04 9a       	mov	r10,r2
800048f4:	1a d8       	st.w	--sp,r8
800048f6:	0c 9b       	mov	r11,r6
800048f8:	fa c8 fb b4 	sub	r8,sp,-1100
800048fc:	08 9c       	mov	r12,r4
800048fe:	1a d8       	st.w	--sp,r8
80004900:	fa c8 f9 40 	sub	r8,sp,-1728
80004904:	fa c9 ff b4 	sub	r9,sp,-76
80004908:	fe b0 f7 b2 	rcall	8000386c <get_arg>
8000490c:	2f dd       	sub	sp,-12
8000490e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004912:	fa eb 00 00 	st.d	sp[0],r10
80004916:	30 08       	mov	r8,0
80004918:	e0 8f 03 de 	bral	800050d4 <_vfprintf_r+0x1538>
8000491c:	ee ca ff ff 	sub	r10,r7,-1
80004920:	10 37       	cp.w	r7,r8
80004922:	c0 b4       	brge	80004938 <_vfprintf_r+0xd9c>
80004924:	fa c9 f9 44 	sub	r9,sp,-1724
80004928:	14 97       	mov	r7,r10
8000492a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000492e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004932:	fa eb 00 00 	st.d	sp[0],r10
80004936:	c1 88       	rjmp	80004966 <_vfprintf_r+0xdca>
80004938:	41 09       	lddsp	r9,sp[0x40]
8000493a:	59 f8       	cp.w	r8,31
8000493c:	e0 89 00 18 	brgt	8000496c <_vfprintf_r+0xdd0>
80004940:	f2 e6 00 00 	ld.d	r6,r9[0]
80004944:	f2 cb ff f8 	sub	r11,r9,-8
80004948:	fa e7 00 00 	st.d	sp[0],r6
8000494c:	51 0b       	stdsp	sp[0x40],r11
8000494e:	fa c6 f9 44 	sub	r6,sp,-1724
80004952:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004956:	fa e6 00 00 	ld.d	r6,sp[0]
8000495a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000495e:	2f f8       	sub	r8,-1
80004960:	14 97       	mov	r7,r10
80004962:	fb 48 06 b4 	st.w	sp[1716],r8
80004966:	40 38       	lddsp	r8,sp[0xc]
80004968:	e0 8f 03 b6 	bral	800050d4 <_vfprintf_r+0x1538>
8000496c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004970:	40 38       	lddsp	r8,sp[0xc]
80004972:	fa e7 00 00 	st.d	sp[0],r6
80004976:	2f 89       	sub	r9,-8
80004978:	14 97       	mov	r7,r10
8000497a:	51 09       	stdsp	sp[0x40],r9
8000497c:	e0 8f 03 ac 	bral	800050d4 <_vfprintf_r+0x1538>
80004980:	ed b5 00 04 	bld	r5,0x4
80004984:	c1 61       	brne	800049b0 <_vfprintf_r+0xe14>
80004986:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000498a:	40 3e       	lddsp	lr,sp[0xc]
8000498c:	58 0e       	cp.w	lr,0
8000498e:	c0 80       	breq	8000499e <_vfprintf_r+0xe02>
80004990:	10 36       	cp.w	r6,r8
80004992:	c6 74       	brge	80004a60 <_vfprintf_r+0xec4>
80004994:	fa cc f9 44 	sub	r12,sp,-1724
80004998:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000499c:	c8 08       	rjmp	80004a9c <_vfprintf_r+0xf00>
8000499e:	ee ca ff ff 	sub	r10,r7,-1
800049a2:	10 37       	cp.w	r7,r8
800049a4:	c7 f4       	brge	80004aa2 <_vfprintf_r+0xf06>
800049a6:	fa cb f9 44 	sub	r11,sp,-1724
800049aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049ae:	c7 68       	rjmp	80004a9a <_vfprintf_r+0xefe>
800049b0:	ed b5 00 06 	bld	r5,0x6
800049b4:	c4 a1       	brne	80004a48 <_vfprintf_r+0xeac>
800049b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049ba:	40 3c       	lddsp	r12,sp[0xc]
800049bc:	58 0c       	cp.w	r12,0
800049be:	c1 d0       	breq	800049f8 <_vfprintf_r+0xe5c>
800049c0:	10 36       	cp.w	r6,r8
800049c2:	c0 64       	brge	800049ce <_vfprintf_r+0xe32>
800049c4:	fa cb f9 44 	sub	r11,sp,-1724
800049c8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049cc:	c1 f8       	rjmp	80004a0a <_vfprintf_r+0xe6e>
800049ce:	fa c8 f9 50 	sub	r8,sp,-1712
800049d2:	1a d8       	st.w	--sp,r8
800049d4:	fa c8 fa b8 	sub	r8,sp,-1352
800049d8:	1a d8       	st.w	--sp,r8
800049da:	fa c8 fb b4 	sub	r8,sp,-1100
800049de:	1a d8       	st.w	--sp,r8
800049e0:	fa c8 f9 40 	sub	r8,sp,-1728
800049e4:	fa c9 ff b4 	sub	r9,sp,-76
800049e8:	04 9a       	mov	r10,r2
800049ea:	0c 9b       	mov	r11,r6
800049ec:	08 9c       	mov	r12,r4
800049ee:	fe b0 f7 3f 	rcall	8000386c <get_arg>
800049f2:	2f dd       	sub	sp,-12
800049f4:	98 18       	ld.sh	r8,r12[0x2]
800049f6:	c2 68       	rjmp	80004a42 <_vfprintf_r+0xea6>
800049f8:	ee ca ff ff 	sub	r10,r7,-1
800049fc:	10 37       	cp.w	r7,r8
800049fe:	c0 94       	brge	80004a10 <_vfprintf_r+0xe74>
80004a00:	fa c9 f9 44 	sub	r9,sp,-1724
80004a04:	14 97       	mov	r7,r10
80004a06:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a0a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004a0e:	c1 a8       	rjmp	80004a42 <_vfprintf_r+0xea6>
80004a10:	41 09       	lddsp	r9,sp[0x40]
80004a12:	59 f8       	cp.w	r8,31
80004a14:	e0 89 00 13 	brgt	80004a3a <_vfprintf_r+0xe9e>
80004a18:	f2 cb ff fc 	sub	r11,r9,-4
80004a1c:	51 0b       	stdsp	sp[0x40],r11
80004a1e:	72 09       	ld.w	r9,r9[0x0]
80004a20:	fa c6 f9 44 	sub	r6,sp,-1724
80004a24:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004a28:	2f f8       	sub	r8,-1
80004a2a:	f7 49 fd 88 	st.w	r11[-632],r9
80004a2e:	fb 48 06 b4 	st.w	sp[1716],r8
80004a32:	14 97       	mov	r7,r10
80004a34:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004a38:	c0 58       	rjmp	80004a42 <_vfprintf_r+0xea6>
80004a3a:	92 18       	ld.sh	r8,r9[0x2]
80004a3c:	14 97       	mov	r7,r10
80004a3e:	2f c9       	sub	r9,-4
80004a40:	51 09       	stdsp	sp[0x40],r9
80004a42:	5c 78       	castu.h	r8
80004a44:	50 18       	stdsp	sp[0x4],r8
80004a46:	c4 68       	rjmp	80004ad2 <_vfprintf_r+0xf36>
80004a48:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a4c:	40 3c       	lddsp	r12,sp[0xc]
80004a4e:	58 0c       	cp.w	r12,0
80004a50:	c1 d0       	breq	80004a8a <_vfprintf_r+0xeee>
80004a52:	10 36       	cp.w	r6,r8
80004a54:	c0 64       	brge	80004a60 <_vfprintf_r+0xec4>
80004a56:	fa cb f9 44 	sub	r11,sp,-1724
80004a5a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a5e:	c1 f8       	rjmp	80004a9c <_vfprintf_r+0xf00>
80004a60:	fa c8 f9 50 	sub	r8,sp,-1712
80004a64:	1a d8       	st.w	--sp,r8
80004a66:	fa c8 fa b8 	sub	r8,sp,-1352
80004a6a:	0c 9b       	mov	r11,r6
80004a6c:	1a d8       	st.w	--sp,r8
80004a6e:	fa c8 fb b4 	sub	r8,sp,-1100
80004a72:	04 9a       	mov	r10,r2
80004a74:	1a d8       	st.w	--sp,r8
80004a76:	08 9c       	mov	r12,r4
80004a78:	fa c8 f9 40 	sub	r8,sp,-1728
80004a7c:	fa c9 ff b4 	sub	r9,sp,-76
80004a80:	fe b0 f6 f6 	rcall	8000386c <get_arg>
80004a84:	2f dd       	sub	sp,-12
80004a86:	78 0b       	ld.w	r11,r12[0x0]
80004a88:	c2 48       	rjmp	80004ad0 <_vfprintf_r+0xf34>
80004a8a:	ee ca ff ff 	sub	r10,r7,-1
80004a8e:	10 37       	cp.w	r7,r8
80004a90:	c0 94       	brge	80004aa2 <_vfprintf_r+0xf06>
80004a92:	fa c9 f9 44 	sub	r9,sp,-1724
80004a96:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a9a:	14 97       	mov	r7,r10
80004a9c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004aa0:	c1 88       	rjmp	80004ad0 <_vfprintf_r+0xf34>
80004aa2:	41 09       	lddsp	r9,sp[0x40]
80004aa4:	59 f8       	cp.w	r8,31
80004aa6:	e0 89 00 11 	brgt	80004ac8 <_vfprintf_r+0xf2c>
80004aaa:	f2 cb ff fc 	sub	r11,r9,-4
80004aae:	51 0b       	stdsp	sp[0x40],r11
80004ab0:	fa c6 f9 44 	sub	r6,sp,-1724
80004ab4:	72 0b       	ld.w	r11,r9[0x0]
80004ab6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004aba:	f3 4b fd 88 	st.w	r9[-632],r11
80004abe:	2f f8       	sub	r8,-1
80004ac0:	14 97       	mov	r7,r10
80004ac2:	fb 48 06 b4 	st.w	sp[1716],r8
80004ac6:	c0 58       	rjmp	80004ad0 <_vfprintf_r+0xf34>
80004ac8:	72 0b       	ld.w	r11,r9[0x0]
80004aca:	14 97       	mov	r7,r10
80004acc:	2f c9       	sub	r9,-4
80004ace:	51 09       	stdsp	sp[0x40],r9
80004ad0:	50 1b       	stdsp	sp[0x4],r11
80004ad2:	30 0e       	mov	lr,0
80004ad4:	50 0e       	stdsp	sp[0x0],lr
80004ad6:	1c 98       	mov	r8,lr
80004ad8:	e0 8f 02 fe 	bral	800050d4 <_vfprintf_r+0x1538>
80004adc:	50 a7       	stdsp	sp[0x28],r7
80004ade:	50 80       	stdsp	sp[0x20],r0
80004ae0:	0c 97       	mov	r7,r6
80004ae2:	04 94       	mov	r4,r2
80004ae4:	06 96       	mov	r6,r3
80004ae6:	02 92       	mov	r2,r1
80004ae8:	40 93       	lddsp	r3,sp[0x24]
80004aea:	40 41       	lddsp	r1,sp[0x10]
80004aec:	0e 99       	mov	r9,r7
80004aee:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004af2:	40 3c       	lddsp	r12,sp[0xc]
80004af4:	58 0c       	cp.w	r12,0
80004af6:	c1 d0       	breq	80004b30 <_vfprintf_r+0xf94>
80004af8:	10 36       	cp.w	r6,r8
80004afa:	c0 64       	brge	80004b06 <_vfprintf_r+0xf6a>
80004afc:	fa cb f9 44 	sub	r11,sp,-1724
80004b00:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b04:	c1 d8       	rjmp	80004b3e <_vfprintf_r+0xfa2>
80004b06:	fa c8 f9 50 	sub	r8,sp,-1712
80004b0a:	1a d8       	st.w	--sp,r8
80004b0c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b10:	1a d8       	st.w	--sp,r8
80004b12:	fa c8 fb b4 	sub	r8,sp,-1100
80004b16:	1a d8       	st.w	--sp,r8
80004b18:	fa c9 ff b4 	sub	r9,sp,-76
80004b1c:	fa c8 f9 40 	sub	r8,sp,-1728
80004b20:	04 9a       	mov	r10,r2
80004b22:	0c 9b       	mov	r11,r6
80004b24:	08 9c       	mov	r12,r4
80004b26:	fe b0 f6 a3 	rcall	8000386c <get_arg>
80004b2a:	2f dd       	sub	sp,-12
80004b2c:	78 09       	ld.w	r9,r12[0x0]
80004b2e:	c2 18       	rjmp	80004b70 <_vfprintf_r+0xfd4>
80004b30:	2f f7       	sub	r7,-1
80004b32:	10 39       	cp.w	r9,r8
80004b34:	c0 84       	brge	80004b44 <_vfprintf_r+0xfa8>
80004b36:	fa ca f9 44 	sub	r10,sp,-1724
80004b3a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004b3e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004b42:	c1 78       	rjmp	80004b70 <_vfprintf_r+0xfd4>
80004b44:	41 09       	lddsp	r9,sp[0x40]
80004b46:	59 f8       	cp.w	r8,31
80004b48:	e0 89 00 10 	brgt	80004b68 <_vfprintf_r+0xfcc>
80004b4c:	f2 ca ff fc 	sub	r10,r9,-4
80004b50:	51 0a       	stdsp	sp[0x40],r10
80004b52:	fa c6 f9 44 	sub	r6,sp,-1724
80004b56:	72 09       	ld.w	r9,r9[0x0]
80004b58:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004b5c:	f5 49 fd 88 	st.w	r10[-632],r9
80004b60:	2f f8       	sub	r8,-1
80004b62:	fb 48 06 b4 	st.w	sp[1716],r8
80004b66:	c0 58       	rjmp	80004b70 <_vfprintf_r+0xfd4>
80004b68:	f2 c8 ff fc 	sub	r8,r9,-4
80004b6c:	51 08       	stdsp	sp[0x40],r8
80004b6e:	72 09       	ld.w	r9,r9[0x0]
80004b70:	33 08       	mov	r8,48
80004b72:	fb 68 06 b8 	st.b	sp[1720],r8
80004b76:	37 88       	mov	r8,120
80004b78:	30 0e       	mov	lr,0
80004b7a:	fb 68 06 b9 	st.b	sp[1721],r8
80004b7e:	fe cc b5 0a 	sub	r12,pc,-19190
80004b82:	50 19       	stdsp	sp[0x4],r9
80004b84:	a1 b5       	sbr	r5,0x1
80004b86:	50 0e       	stdsp	sp[0x0],lr
80004b88:	50 dc       	stdsp	sp[0x34],r12
80004b8a:	30 28       	mov	r8,2
80004b8c:	37 80       	mov	r0,120
80004b8e:	e0 8f 02 a3 	bral	800050d4 <_vfprintf_r+0x1538>
80004b92:	50 a7       	stdsp	sp[0x28],r7
80004b94:	50 80       	stdsp	sp[0x20],r0
80004b96:	10 90       	mov	r0,r8
80004b98:	30 08       	mov	r8,0
80004b9a:	fb 68 06 bb 	st.b	sp[1723],r8
80004b9e:	0c 97       	mov	r7,r6
80004ba0:	04 94       	mov	r4,r2
80004ba2:	06 96       	mov	r6,r3
80004ba4:	02 92       	mov	r2,r1
80004ba6:	40 93       	lddsp	r3,sp[0x24]
80004ba8:	40 41       	lddsp	r1,sp[0x10]
80004baa:	0e 99       	mov	r9,r7
80004bac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bb0:	40 3b       	lddsp	r11,sp[0xc]
80004bb2:	58 0b       	cp.w	r11,0
80004bb4:	c1 d0       	breq	80004bee <_vfprintf_r+0x1052>
80004bb6:	10 36       	cp.w	r6,r8
80004bb8:	c0 64       	brge	80004bc4 <_vfprintf_r+0x1028>
80004bba:	fa ca f9 44 	sub	r10,sp,-1724
80004bbe:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004bc2:	c1 d8       	rjmp	80004bfc <_vfprintf_r+0x1060>
80004bc4:	fa c8 f9 50 	sub	r8,sp,-1712
80004bc8:	1a d8       	st.w	--sp,r8
80004bca:	fa c8 fa b8 	sub	r8,sp,-1352
80004bce:	1a d8       	st.w	--sp,r8
80004bd0:	fa c8 fb b4 	sub	r8,sp,-1100
80004bd4:	0c 9b       	mov	r11,r6
80004bd6:	1a d8       	st.w	--sp,r8
80004bd8:	04 9a       	mov	r10,r2
80004bda:	fa c8 f9 40 	sub	r8,sp,-1728
80004bde:	fa c9 ff b4 	sub	r9,sp,-76
80004be2:	08 9c       	mov	r12,r4
80004be4:	fe b0 f6 44 	rcall	8000386c <get_arg>
80004be8:	2f dd       	sub	sp,-12
80004bea:	78 06       	ld.w	r6,r12[0x0]
80004bec:	c2 08       	rjmp	80004c2c <_vfprintf_r+0x1090>
80004bee:	2f f7       	sub	r7,-1
80004bf0:	10 39       	cp.w	r9,r8
80004bf2:	c0 84       	brge	80004c02 <_vfprintf_r+0x1066>
80004bf4:	fa c9 f9 44 	sub	r9,sp,-1724
80004bf8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004bfc:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004c00:	c1 68       	rjmp	80004c2c <_vfprintf_r+0x1090>
80004c02:	41 09       	lddsp	r9,sp[0x40]
80004c04:	59 f8       	cp.w	r8,31
80004c06:	e0 89 00 10 	brgt	80004c26 <_vfprintf_r+0x108a>
80004c0a:	f2 ca ff fc 	sub	r10,r9,-4
80004c0e:	51 0a       	stdsp	sp[0x40],r10
80004c10:	72 06       	ld.w	r6,r9[0x0]
80004c12:	fa ce f9 44 	sub	lr,sp,-1724
80004c16:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004c1a:	f3 46 fd 88 	st.w	r9[-632],r6
80004c1e:	2f f8       	sub	r8,-1
80004c20:	fb 48 06 b4 	st.w	sp[1716],r8
80004c24:	c0 48       	rjmp	80004c2c <_vfprintf_r+0x1090>
80004c26:	72 06       	ld.w	r6,r9[0x0]
80004c28:	2f c9       	sub	r9,-4
80004c2a:	51 09       	stdsp	sp[0x40],r9
80004c2c:	40 2c       	lddsp	r12,sp[0x8]
80004c2e:	58 0c       	cp.w	r12,0
80004c30:	c1 05       	brlt	80004c50 <_vfprintf_r+0x10b4>
80004c32:	18 9a       	mov	r10,r12
80004c34:	30 0b       	mov	r11,0
80004c36:	0c 9c       	mov	r12,r6
80004c38:	e0 a0 14 58 	rcall	800074e8 <memchr>
80004c3c:	e0 80 02 df 	breq	800051fa <_vfprintf_r+0x165e>
80004c40:	f8 06 01 02 	sub	r2,r12,r6
80004c44:	40 2b       	lddsp	r11,sp[0x8]
80004c46:	16 32       	cp.w	r2,r11
80004c48:	e0 89 02 d9 	brgt	800051fa <_vfprintf_r+0x165e>
80004c4c:	e0 8f 02 d4 	bral	800051f4 <_vfprintf_r+0x1658>
80004c50:	30 0a       	mov	r10,0
80004c52:	0c 9c       	mov	r12,r6
80004c54:	50 2a       	stdsp	sp[0x8],r10
80004c56:	e0 a0 19 33 	rcall	80007ebc <strlen>
80004c5a:	18 92       	mov	r2,r12
80004c5c:	e0 8f 02 d2 	bral	80005200 <_vfprintf_r+0x1664>
80004c60:	50 a7       	stdsp	sp[0x28],r7
80004c62:	50 80       	stdsp	sp[0x20],r0
80004c64:	0c 97       	mov	r7,r6
80004c66:	04 94       	mov	r4,r2
80004c68:	06 96       	mov	r6,r3
80004c6a:	02 92       	mov	r2,r1
80004c6c:	40 93       	lddsp	r3,sp[0x24]
80004c6e:	10 90       	mov	r0,r8
80004c70:	40 41       	lddsp	r1,sp[0x10]
80004c72:	a5 a5       	sbr	r5,0x4
80004c74:	c0 a8       	rjmp	80004c88 <_vfprintf_r+0x10ec>
80004c76:	50 a7       	stdsp	sp[0x28],r7
80004c78:	50 80       	stdsp	sp[0x20],r0
80004c7a:	0c 97       	mov	r7,r6
80004c7c:	04 94       	mov	r4,r2
80004c7e:	06 96       	mov	r6,r3
80004c80:	02 92       	mov	r2,r1
80004c82:	40 93       	lddsp	r3,sp[0x24]
80004c84:	10 90       	mov	r0,r8
80004c86:	40 41       	lddsp	r1,sp[0x10]
80004c88:	ed b5 00 05 	bld	r5,0x5
80004c8c:	c5 61       	brne	80004d38 <_vfprintf_r+0x119c>
80004c8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c92:	40 39       	lddsp	r9,sp[0xc]
80004c94:	58 09       	cp.w	r9,0
80004c96:	c2 10       	breq	80004cd8 <_vfprintf_r+0x113c>
80004c98:	10 36       	cp.w	r6,r8
80004c9a:	c0 74       	brge	80004ca8 <_vfprintf_r+0x110c>
80004c9c:	fa c8 f9 44 	sub	r8,sp,-1724
80004ca0:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004ca4:	c2 38       	rjmp	80004cea <_vfprintf_r+0x114e>
80004ca6:	d7 03       	nop
80004ca8:	fa c8 f9 50 	sub	r8,sp,-1712
80004cac:	1a d8       	st.w	--sp,r8
80004cae:	fa c8 fa b8 	sub	r8,sp,-1352
80004cb2:	1a d8       	st.w	--sp,r8
80004cb4:	fa c8 fb b4 	sub	r8,sp,-1100
80004cb8:	1a d8       	st.w	--sp,r8
80004cba:	fa c8 f9 40 	sub	r8,sp,-1728
80004cbe:	fa c9 ff b4 	sub	r9,sp,-76
80004cc2:	04 9a       	mov	r10,r2
80004cc4:	0c 9b       	mov	r11,r6
80004cc6:	08 9c       	mov	r12,r4
80004cc8:	fe b0 f5 d2 	rcall	8000386c <get_arg>
80004ccc:	2f dd       	sub	sp,-12
80004cce:	f8 e8 00 00 	ld.d	r8,r12[0]
80004cd2:	fa e9 00 00 	st.d	sp[0],r8
80004cd6:	c2 e8       	rjmp	80004d32 <_vfprintf_r+0x1196>
80004cd8:	ee ca ff ff 	sub	r10,r7,-1
80004cdc:	10 37       	cp.w	r7,r8
80004cde:	c0 b4       	brge	80004cf4 <_vfprintf_r+0x1158>
80004ce0:	fa c8 f9 44 	sub	r8,sp,-1724
80004ce4:	14 97       	mov	r7,r10
80004ce6:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004cea:	ec ea fd 88 	ld.d	r10,r6[-632]
80004cee:	fa eb 00 00 	st.d	sp[0],r10
80004cf2:	c2 08       	rjmp	80004d32 <_vfprintf_r+0x1196>
80004cf4:	41 09       	lddsp	r9,sp[0x40]
80004cf6:	59 f8       	cp.w	r8,31
80004cf8:	e0 89 00 16 	brgt	80004d24 <_vfprintf_r+0x1188>
80004cfc:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d00:	f2 cb ff f8 	sub	r11,r9,-8
80004d04:	fa e7 00 00 	st.d	sp[0],r6
80004d08:	51 0b       	stdsp	sp[0x40],r11
80004d0a:	fa c6 f9 44 	sub	r6,sp,-1724
80004d0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004d12:	fa e6 00 00 	ld.d	r6,sp[0]
80004d16:	f2 e7 fd 88 	st.d	r9[-632],r6
80004d1a:	2f f8       	sub	r8,-1
80004d1c:	14 97       	mov	r7,r10
80004d1e:	fb 48 06 b4 	st.w	sp[1716],r8
80004d22:	c0 88       	rjmp	80004d32 <_vfprintf_r+0x1196>
80004d24:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d28:	2f 89       	sub	r9,-8
80004d2a:	fa e7 00 00 	st.d	sp[0],r6
80004d2e:	51 09       	stdsp	sp[0x40],r9
80004d30:	14 97       	mov	r7,r10
80004d32:	30 18       	mov	r8,1
80004d34:	e0 8f 01 d0 	bral	800050d4 <_vfprintf_r+0x1538>
80004d38:	ed b5 00 04 	bld	r5,0x4
80004d3c:	c1 61       	brne	80004d68 <_vfprintf_r+0x11cc>
80004d3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d42:	40 3e       	lddsp	lr,sp[0xc]
80004d44:	58 0e       	cp.w	lr,0
80004d46:	c0 80       	breq	80004d56 <_vfprintf_r+0x11ba>
80004d48:	10 36       	cp.w	r6,r8
80004d4a:	c6 74       	brge	80004e18 <_vfprintf_r+0x127c>
80004d4c:	fa cc f9 44 	sub	r12,sp,-1724
80004d50:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d54:	c8 08       	rjmp	80004e54 <_vfprintf_r+0x12b8>
80004d56:	ee ca ff ff 	sub	r10,r7,-1
80004d5a:	10 37       	cp.w	r7,r8
80004d5c:	c7 f4       	brge	80004e5a <_vfprintf_r+0x12be>
80004d5e:	fa cb f9 44 	sub	r11,sp,-1724
80004d62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d66:	c7 68       	rjmp	80004e52 <_vfprintf_r+0x12b6>
80004d68:	ed b5 00 06 	bld	r5,0x6
80004d6c:	c4 a1       	brne	80004e00 <_vfprintf_r+0x1264>
80004d6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d72:	40 3c       	lddsp	r12,sp[0xc]
80004d74:	58 0c       	cp.w	r12,0
80004d76:	c1 d0       	breq	80004db0 <_vfprintf_r+0x1214>
80004d78:	10 36       	cp.w	r6,r8
80004d7a:	c0 64       	brge	80004d86 <_vfprintf_r+0x11ea>
80004d7c:	fa cb f9 44 	sub	r11,sp,-1724
80004d80:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d84:	c1 f8       	rjmp	80004dc2 <_vfprintf_r+0x1226>
80004d86:	fa c8 f9 50 	sub	r8,sp,-1712
80004d8a:	1a d8       	st.w	--sp,r8
80004d8c:	fa c8 fa b8 	sub	r8,sp,-1352
80004d90:	1a d8       	st.w	--sp,r8
80004d92:	fa c8 fb b4 	sub	r8,sp,-1100
80004d96:	1a d8       	st.w	--sp,r8
80004d98:	fa c8 f9 40 	sub	r8,sp,-1728
80004d9c:	fa c9 ff b4 	sub	r9,sp,-76
80004da0:	04 9a       	mov	r10,r2
80004da2:	0c 9b       	mov	r11,r6
80004da4:	08 9c       	mov	r12,r4
80004da6:	fe b0 f5 63 	rcall	8000386c <get_arg>
80004daa:	2f dd       	sub	sp,-12
80004dac:	98 18       	ld.sh	r8,r12[0x2]
80004dae:	c2 68       	rjmp	80004dfa <_vfprintf_r+0x125e>
80004db0:	ee ca ff ff 	sub	r10,r7,-1
80004db4:	10 37       	cp.w	r7,r8
80004db6:	c0 94       	brge	80004dc8 <_vfprintf_r+0x122c>
80004db8:	fa c9 f9 44 	sub	r9,sp,-1724
80004dbc:	14 97       	mov	r7,r10
80004dbe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004dc2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004dc6:	c1 a8       	rjmp	80004dfa <_vfprintf_r+0x125e>
80004dc8:	41 09       	lddsp	r9,sp[0x40]
80004dca:	59 f8       	cp.w	r8,31
80004dcc:	e0 89 00 13 	brgt	80004df2 <_vfprintf_r+0x1256>
80004dd0:	f2 cb ff fc 	sub	r11,r9,-4
80004dd4:	51 0b       	stdsp	sp[0x40],r11
80004dd6:	72 09       	ld.w	r9,r9[0x0]
80004dd8:	fa c6 f9 44 	sub	r6,sp,-1724
80004ddc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004de0:	2f f8       	sub	r8,-1
80004de2:	f7 49 fd 88 	st.w	r11[-632],r9
80004de6:	fb 48 06 b4 	st.w	sp[1716],r8
80004dea:	14 97       	mov	r7,r10
80004dec:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004df0:	c0 58       	rjmp	80004dfa <_vfprintf_r+0x125e>
80004df2:	92 18       	ld.sh	r8,r9[0x2]
80004df4:	14 97       	mov	r7,r10
80004df6:	2f c9       	sub	r9,-4
80004df8:	51 09       	stdsp	sp[0x40],r9
80004dfa:	5c 78       	castu.h	r8
80004dfc:	50 18       	stdsp	sp[0x4],r8
80004dfe:	c4 68       	rjmp	80004e8a <_vfprintf_r+0x12ee>
80004e00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e04:	40 3c       	lddsp	r12,sp[0xc]
80004e06:	58 0c       	cp.w	r12,0
80004e08:	c1 d0       	breq	80004e42 <_vfprintf_r+0x12a6>
80004e0a:	10 36       	cp.w	r6,r8
80004e0c:	c0 64       	brge	80004e18 <_vfprintf_r+0x127c>
80004e0e:	fa cb f9 44 	sub	r11,sp,-1724
80004e12:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e16:	c1 f8       	rjmp	80004e54 <_vfprintf_r+0x12b8>
80004e18:	fa c8 f9 50 	sub	r8,sp,-1712
80004e1c:	1a d8       	st.w	--sp,r8
80004e1e:	fa c8 fa b8 	sub	r8,sp,-1352
80004e22:	0c 9b       	mov	r11,r6
80004e24:	1a d8       	st.w	--sp,r8
80004e26:	fa c8 fb b4 	sub	r8,sp,-1100
80004e2a:	04 9a       	mov	r10,r2
80004e2c:	1a d8       	st.w	--sp,r8
80004e2e:	08 9c       	mov	r12,r4
80004e30:	fa c8 f9 40 	sub	r8,sp,-1728
80004e34:	fa c9 ff b4 	sub	r9,sp,-76
80004e38:	fe b0 f5 1a 	rcall	8000386c <get_arg>
80004e3c:	2f dd       	sub	sp,-12
80004e3e:	78 0b       	ld.w	r11,r12[0x0]
80004e40:	c2 48       	rjmp	80004e88 <_vfprintf_r+0x12ec>
80004e42:	ee ca ff ff 	sub	r10,r7,-1
80004e46:	10 37       	cp.w	r7,r8
80004e48:	c0 94       	brge	80004e5a <_vfprintf_r+0x12be>
80004e4a:	fa c9 f9 44 	sub	r9,sp,-1724
80004e4e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e52:	14 97       	mov	r7,r10
80004e54:	ec fb fd 88 	ld.w	r11,r6[-632]
80004e58:	c1 88       	rjmp	80004e88 <_vfprintf_r+0x12ec>
80004e5a:	41 09       	lddsp	r9,sp[0x40]
80004e5c:	59 f8       	cp.w	r8,31
80004e5e:	e0 89 00 11 	brgt	80004e80 <_vfprintf_r+0x12e4>
80004e62:	f2 cb ff fc 	sub	r11,r9,-4
80004e66:	51 0b       	stdsp	sp[0x40],r11
80004e68:	fa c6 f9 44 	sub	r6,sp,-1724
80004e6c:	72 0b       	ld.w	r11,r9[0x0]
80004e6e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e72:	f3 4b fd 88 	st.w	r9[-632],r11
80004e76:	2f f8       	sub	r8,-1
80004e78:	14 97       	mov	r7,r10
80004e7a:	fb 48 06 b4 	st.w	sp[1716],r8
80004e7e:	c0 58       	rjmp	80004e88 <_vfprintf_r+0x12ec>
80004e80:	72 0b       	ld.w	r11,r9[0x0]
80004e82:	14 97       	mov	r7,r10
80004e84:	2f c9       	sub	r9,-4
80004e86:	51 09       	stdsp	sp[0x40],r9
80004e88:	50 1b       	stdsp	sp[0x4],r11
80004e8a:	30 0e       	mov	lr,0
80004e8c:	30 18       	mov	r8,1
80004e8e:	50 0e       	stdsp	sp[0x0],lr
80004e90:	c2 29       	rjmp	800050d4 <_vfprintf_r+0x1538>
80004e92:	50 a7       	stdsp	sp[0x28],r7
80004e94:	50 80       	stdsp	sp[0x20],r0
80004e96:	0c 97       	mov	r7,r6
80004e98:	04 94       	mov	r4,r2
80004e9a:	06 96       	mov	r6,r3
80004e9c:	02 92       	mov	r2,r1
80004e9e:	fe cc b8 2a 	sub	r12,pc,-18390
80004ea2:	40 93       	lddsp	r3,sp[0x24]
80004ea4:	10 90       	mov	r0,r8
80004ea6:	40 41       	lddsp	r1,sp[0x10]
80004ea8:	50 dc       	stdsp	sp[0x34],r12
80004eaa:	ed b5 00 05 	bld	r5,0x5
80004eae:	c5 51       	brne	80004f58 <_vfprintf_r+0x13bc>
80004eb0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004eb4:	40 3b       	lddsp	r11,sp[0xc]
80004eb6:	58 0b       	cp.w	r11,0
80004eb8:	c2 20       	breq	80004efc <_vfprintf_r+0x1360>
80004eba:	10 36       	cp.w	r6,r8
80004ebc:	c0 a4       	brge	80004ed0 <_vfprintf_r+0x1334>
80004ebe:	fa ca f9 44 	sub	r10,sp,-1724
80004ec2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004ec6:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004eca:	fa e9 00 00 	st.d	sp[0],r8
80004ece:	cf 28       	rjmp	800050b2 <_vfprintf_r+0x1516>
80004ed0:	fa c8 f9 50 	sub	r8,sp,-1712
80004ed4:	1a d8       	st.w	--sp,r8
80004ed6:	fa c8 fa b8 	sub	r8,sp,-1352
80004eda:	04 9a       	mov	r10,r2
80004edc:	1a d8       	st.w	--sp,r8
80004ede:	0c 9b       	mov	r11,r6
80004ee0:	fa c8 fb b4 	sub	r8,sp,-1100
80004ee4:	08 9c       	mov	r12,r4
80004ee6:	1a d8       	st.w	--sp,r8
80004ee8:	fa c8 f9 40 	sub	r8,sp,-1728
80004eec:	fa c9 ff b4 	sub	r9,sp,-76
80004ef0:	fe b0 f4 be 	rcall	8000386c <get_arg>
80004ef4:	2f dd       	sub	sp,-12
80004ef6:	f8 ea 00 00 	ld.d	r10,r12[0]
80004efa:	c0 c8       	rjmp	80004f12 <_vfprintf_r+0x1376>
80004efc:	ee ca ff ff 	sub	r10,r7,-1
80004f00:	10 37       	cp.w	r7,r8
80004f02:	c0 b4       	brge	80004f18 <_vfprintf_r+0x137c>
80004f04:	fa c9 f9 44 	sub	r9,sp,-1724
80004f08:	14 97       	mov	r7,r10
80004f0a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004f0e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f12:	fa eb 00 00 	st.d	sp[0],r10
80004f16:	cc e8       	rjmp	800050b2 <_vfprintf_r+0x1516>
80004f18:	41 09       	lddsp	r9,sp[0x40]
80004f1a:	59 f8       	cp.w	r8,31
80004f1c:	e0 89 00 16 	brgt	80004f48 <_vfprintf_r+0x13ac>
80004f20:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f24:	f2 cb ff f8 	sub	r11,r9,-8
80004f28:	fa e7 00 00 	st.d	sp[0],r6
80004f2c:	51 0b       	stdsp	sp[0x40],r11
80004f2e:	fa c6 f9 44 	sub	r6,sp,-1724
80004f32:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f36:	fa e6 00 00 	ld.d	r6,sp[0]
80004f3a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f3e:	2f f8       	sub	r8,-1
80004f40:	14 97       	mov	r7,r10
80004f42:	fb 48 06 b4 	st.w	sp[1716],r8
80004f46:	cb 68       	rjmp	800050b2 <_vfprintf_r+0x1516>
80004f48:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f4c:	2f 89       	sub	r9,-8
80004f4e:	fa e7 00 00 	st.d	sp[0],r6
80004f52:	51 09       	stdsp	sp[0x40],r9
80004f54:	14 97       	mov	r7,r10
80004f56:	ca e8       	rjmp	800050b2 <_vfprintf_r+0x1516>
80004f58:	ed b5 00 04 	bld	r5,0x4
80004f5c:	c1 71       	brne	80004f8a <_vfprintf_r+0x13ee>
80004f5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f62:	40 3e       	lddsp	lr,sp[0xc]
80004f64:	58 0e       	cp.w	lr,0
80004f66:	c0 80       	breq	80004f76 <_vfprintf_r+0x13da>
80004f68:	10 36       	cp.w	r6,r8
80004f6a:	c6 94       	brge	8000503c <_vfprintf_r+0x14a0>
80004f6c:	fa cc f9 44 	sub	r12,sp,-1724
80004f70:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f74:	c8 28       	rjmp	80005078 <_vfprintf_r+0x14dc>
80004f76:	ee ca ff ff 	sub	r10,r7,-1
80004f7a:	10 37       	cp.w	r7,r8
80004f7c:	e0 84 00 81 	brge	8000507e <_vfprintf_r+0x14e2>
80004f80:	fa cb f9 44 	sub	r11,sp,-1724
80004f84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f88:	c7 78       	rjmp	80005076 <_vfprintf_r+0x14da>
80004f8a:	ed b5 00 06 	bld	r5,0x6
80004f8e:	c4 b1       	brne	80005024 <_vfprintf_r+0x1488>
80004f90:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f94:	40 3c       	lddsp	r12,sp[0xc]
80004f96:	58 0c       	cp.w	r12,0
80004f98:	c1 d0       	breq	80004fd2 <_vfprintf_r+0x1436>
80004f9a:	10 36       	cp.w	r6,r8
80004f9c:	c0 64       	brge	80004fa8 <_vfprintf_r+0x140c>
80004f9e:	fa cb f9 44 	sub	r11,sp,-1724
80004fa2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fa6:	c1 f8       	rjmp	80004fe4 <_vfprintf_r+0x1448>
80004fa8:	fa c8 f9 50 	sub	r8,sp,-1712
80004fac:	1a d8       	st.w	--sp,r8
80004fae:	fa c8 fa b8 	sub	r8,sp,-1352
80004fb2:	1a d8       	st.w	--sp,r8
80004fb4:	fa c8 fb b4 	sub	r8,sp,-1100
80004fb8:	1a d8       	st.w	--sp,r8
80004fba:	fa c8 f9 40 	sub	r8,sp,-1728
80004fbe:	fa c9 ff b4 	sub	r9,sp,-76
80004fc2:	04 9a       	mov	r10,r2
80004fc4:	0c 9b       	mov	r11,r6
80004fc6:	08 9c       	mov	r12,r4
80004fc8:	fe b0 f4 52 	rcall	8000386c <get_arg>
80004fcc:	2f dd       	sub	sp,-12
80004fce:	98 18       	ld.sh	r8,r12[0x2]
80004fd0:	c2 78       	rjmp	8000501e <_vfprintf_r+0x1482>
80004fd2:	ee ca ff ff 	sub	r10,r7,-1
80004fd6:	10 37       	cp.w	r7,r8
80004fd8:	c0 a4       	brge	80004fec <_vfprintf_r+0x1450>
80004fda:	fa c9 f9 44 	sub	r9,sp,-1724
80004fde:	14 97       	mov	r7,r10
80004fe0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004fe4:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004fe8:	c1 b8       	rjmp	8000501e <_vfprintf_r+0x1482>
80004fea:	d7 03       	nop
80004fec:	41 09       	lddsp	r9,sp[0x40]
80004fee:	59 f8       	cp.w	r8,31
80004ff0:	e0 89 00 13 	brgt	80005016 <_vfprintf_r+0x147a>
80004ff4:	f2 cb ff fc 	sub	r11,r9,-4
80004ff8:	51 0b       	stdsp	sp[0x40],r11
80004ffa:	72 09       	ld.w	r9,r9[0x0]
80004ffc:	fa c6 f9 44 	sub	r6,sp,-1724
80005000:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005004:	2f f8       	sub	r8,-1
80005006:	f7 49 fd 88 	st.w	r11[-632],r9
8000500a:	fb 48 06 b4 	st.w	sp[1716],r8
8000500e:	14 97       	mov	r7,r10
80005010:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005014:	c0 58       	rjmp	8000501e <_vfprintf_r+0x1482>
80005016:	92 18       	ld.sh	r8,r9[0x2]
80005018:	14 97       	mov	r7,r10
8000501a:	2f c9       	sub	r9,-4
8000501c:	51 09       	stdsp	sp[0x40],r9
8000501e:	5c 78       	castu.h	r8
80005020:	50 18       	stdsp	sp[0x4],r8
80005022:	c4 68       	rjmp	800050ae <_vfprintf_r+0x1512>
80005024:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005028:	40 3c       	lddsp	r12,sp[0xc]
8000502a:	58 0c       	cp.w	r12,0
8000502c:	c1 d0       	breq	80005066 <_vfprintf_r+0x14ca>
8000502e:	10 36       	cp.w	r6,r8
80005030:	c0 64       	brge	8000503c <_vfprintf_r+0x14a0>
80005032:	fa cb f9 44 	sub	r11,sp,-1724
80005036:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000503a:	c1 f8       	rjmp	80005078 <_vfprintf_r+0x14dc>
8000503c:	fa c8 f9 50 	sub	r8,sp,-1712
80005040:	1a d8       	st.w	--sp,r8
80005042:	fa c8 fa b8 	sub	r8,sp,-1352
80005046:	0c 9b       	mov	r11,r6
80005048:	1a d8       	st.w	--sp,r8
8000504a:	fa c8 fb b4 	sub	r8,sp,-1100
8000504e:	04 9a       	mov	r10,r2
80005050:	1a d8       	st.w	--sp,r8
80005052:	08 9c       	mov	r12,r4
80005054:	fa c8 f9 40 	sub	r8,sp,-1728
80005058:	fa c9 ff b4 	sub	r9,sp,-76
8000505c:	fe b0 f4 08 	rcall	8000386c <get_arg>
80005060:	2f dd       	sub	sp,-12
80005062:	78 0b       	ld.w	r11,r12[0x0]
80005064:	c2 48       	rjmp	800050ac <_vfprintf_r+0x1510>
80005066:	ee ca ff ff 	sub	r10,r7,-1
8000506a:	10 37       	cp.w	r7,r8
8000506c:	c0 94       	brge	8000507e <_vfprintf_r+0x14e2>
8000506e:	fa c9 f9 44 	sub	r9,sp,-1724
80005072:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005076:	14 97       	mov	r7,r10
80005078:	ec fb fd 88 	ld.w	r11,r6[-632]
8000507c:	c1 88       	rjmp	800050ac <_vfprintf_r+0x1510>
8000507e:	41 09       	lddsp	r9,sp[0x40]
80005080:	59 f8       	cp.w	r8,31
80005082:	e0 89 00 11 	brgt	800050a4 <_vfprintf_r+0x1508>
80005086:	f2 cb ff fc 	sub	r11,r9,-4
8000508a:	51 0b       	stdsp	sp[0x40],r11
8000508c:	fa c6 f9 44 	sub	r6,sp,-1724
80005090:	72 0b       	ld.w	r11,r9[0x0]
80005092:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005096:	f3 4b fd 88 	st.w	r9[-632],r11
8000509a:	2f f8       	sub	r8,-1
8000509c:	14 97       	mov	r7,r10
8000509e:	fb 48 06 b4 	st.w	sp[1716],r8
800050a2:	c0 58       	rjmp	800050ac <_vfprintf_r+0x1510>
800050a4:	72 0b       	ld.w	r11,r9[0x0]
800050a6:	14 97       	mov	r7,r10
800050a8:	2f c9       	sub	r9,-4
800050aa:	51 09       	stdsp	sp[0x40],r9
800050ac:	50 1b       	stdsp	sp[0x4],r11
800050ae:	30 0e       	mov	lr,0
800050b0:	50 0e       	stdsp	sp[0x0],lr
800050b2:	40 08       	lddsp	r8,sp[0x0]
800050b4:	40 1c       	lddsp	r12,sp[0x4]
800050b6:	18 48       	or	r8,r12
800050b8:	5f 19       	srne	r9
800050ba:	0a 98       	mov	r8,r5
800050bc:	eb e9 00 09 	and	r9,r5,r9
800050c0:	a1 b8       	sbr	r8,0x1
800050c2:	58 09       	cp.w	r9,0
800050c4:	c0 70       	breq	800050d2 <_vfprintf_r+0x1536>
800050c6:	10 95       	mov	r5,r8
800050c8:	fb 60 06 b9 	st.b	sp[1721],r0
800050cc:	33 08       	mov	r8,48
800050ce:	fb 68 06 b8 	st.b	sp[1720],r8
800050d2:	30 28       	mov	r8,2
800050d4:	30 09       	mov	r9,0
800050d6:	fb 69 06 bb 	st.b	sp[1723],r9
800050da:	0a 99       	mov	r9,r5
800050dc:	a7 d9       	cbr	r9,0x7
800050de:	40 2b       	lddsp	r11,sp[0x8]
800050e0:	40 16       	lddsp	r6,sp[0x4]
800050e2:	58 0b       	cp.w	r11,0
800050e4:	5f 1a       	srne	r10
800050e6:	f2 05 17 40 	movge	r5,r9
800050ea:	fa c2 f9 78 	sub	r2,sp,-1672
800050ee:	40 09       	lddsp	r9,sp[0x0]
800050f0:	0c 49       	or	r9,r6
800050f2:	5f 19       	srne	r9
800050f4:	f5 e9 10 09 	or	r9,r10,r9
800050f8:	c5 c0       	breq	800051b0 <_vfprintf_r+0x1614>
800050fa:	30 19       	mov	r9,1
800050fc:	f2 08 18 00 	cp.b	r8,r9
80005100:	c0 60       	breq	8000510c <_vfprintf_r+0x1570>
80005102:	30 29       	mov	r9,2
80005104:	f2 08 18 00 	cp.b	r8,r9
80005108:	c0 41       	brne	80005110 <_vfprintf_r+0x1574>
8000510a:	c3 c8       	rjmp	80005182 <_vfprintf_r+0x15e6>
8000510c:	04 96       	mov	r6,r2
8000510e:	c3 08       	rjmp	8000516e <_vfprintf_r+0x15d2>
80005110:	04 96       	mov	r6,r2
80005112:	fa e8 00 00 	ld.d	r8,sp[0]
80005116:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000511a:	2d 0a       	sub	r10,-48
8000511c:	0c fa       	st.b	--r6,r10
8000511e:	f0 0b 16 03 	lsr	r11,r8,0x3
80005122:	f2 0c 16 03 	lsr	r12,r9,0x3
80005126:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000512a:	18 99       	mov	r9,r12
8000512c:	16 98       	mov	r8,r11
8000512e:	58 08       	cp.w	r8,0
80005130:	5c 29       	cpc	r9
80005132:	cf 21       	brne	80005116 <_vfprintf_r+0x157a>
80005134:	fa e9 00 00 	st.d	sp[0],r8
80005138:	ed b5 00 00 	bld	r5,0x0
8000513c:	c4 51       	brne	800051c6 <_vfprintf_r+0x162a>
8000513e:	33 09       	mov	r9,48
80005140:	f2 0a 18 00 	cp.b	r10,r9
80005144:	c4 10       	breq	800051c6 <_vfprintf_r+0x162a>
80005146:	0c f9       	st.b	--r6,r9
80005148:	c3 f8       	rjmp	800051c6 <_vfprintf_r+0x162a>
8000514a:	fa ea 00 00 	ld.d	r10,sp[0]
8000514e:	30 a8       	mov	r8,10
80005150:	30 09       	mov	r9,0
80005152:	e0 a0 1e 31 	rcall	80008db4 <__avr32_umod64>
80005156:	30 a8       	mov	r8,10
80005158:	2d 0a       	sub	r10,-48
8000515a:	30 09       	mov	r9,0
8000515c:	ac 8a       	st.b	r6[0x0],r10
8000515e:	fa ea 00 00 	ld.d	r10,sp[0]
80005162:	e0 a0 1c f7 	rcall	80008b50 <__avr32_udiv64>
80005166:	16 99       	mov	r9,r11
80005168:	14 98       	mov	r8,r10
8000516a:	fa e9 00 00 	st.d	sp[0],r8
8000516e:	20 16       	sub	r6,1
80005170:	fa ea 00 00 	ld.d	r10,sp[0]
80005174:	58 9a       	cp.w	r10,9
80005176:	5c 2b       	cpc	r11
80005178:	fe 9b ff e9 	brhi	8000514a <_vfprintf_r+0x15ae>
8000517c:	1b f8       	ld.ub	r8,sp[0x7]
8000517e:	2d 08       	sub	r8,-48
80005180:	c2 08       	rjmp	800051c0 <_vfprintf_r+0x1624>
80005182:	04 96       	mov	r6,r2
80005184:	fa e8 00 00 	ld.d	r8,sp[0]
80005188:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000518c:	40 de       	lddsp	lr,sp[0x34]
8000518e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005192:	0c fa       	st.b	--r6,r10
80005194:	f2 0b 16 04 	lsr	r11,r9,0x4
80005198:	f0 0a 16 04 	lsr	r10,r8,0x4
8000519c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800051a0:	16 99       	mov	r9,r11
800051a2:	14 98       	mov	r8,r10
800051a4:	58 08       	cp.w	r8,0
800051a6:	5c 29       	cpc	r9
800051a8:	cf 01       	brne	80005188 <_vfprintf_r+0x15ec>
800051aa:	fa e9 00 00 	st.d	sp[0],r8
800051ae:	c0 c8       	rjmp	800051c6 <_vfprintf_r+0x162a>
800051b0:	58 08       	cp.w	r8,0
800051b2:	c0 91       	brne	800051c4 <_vfprintf_r+0x1628>
800051b4:	ed b5 00 00 	bld	r5,0x0
800051b8:	c0 61       	brne	800051c4 <_vfprintf_r+0x1628>
800051ba:	fa c6 f9 79 	sub	r6,sp,-1671
800051be:	33 08       	mov	r8,48
800051c0:	ac 88       	st.b	r6[0x0],r8
800051c2:	c0 28       	rjmp	800051c6 <_vfprintf_r+0x162a>
800051c4:	04 96       	mov	r6,r2
800051c6:	0c 12       	sub	r2,r6
800051c8:	c1 c8       	rjmp	80005200 <_vfprintf_r+0x1664>
800051ca:	50 a7       	stdsp	sp[0x28],r7
800051cc:	50 80       	stdsp	sp[0x20],r0
800051ce:	40 93       	lddsp	r3,sp[0x24]
800051d0:	0c 97       	mov	r7,r6
800051d2:	10 90       	mov	r0,r8
800051d4:	04 94       	mov	r4,r2
800051d6:	40 41       	lddsp	r1,sp[0x10]
800051d8:	58 08       	cp.w	r8,0
800051da:	e0 80 04 4f 	breq	80005a78 <_vfprintf_r+0x1edc>
800051de:	fb 68 06 60 	st.b	sp[1632],r8
800051e2:	30 0c       	mov	r12,0
800051e4:	30 08       	mov	r8,0
800051e6:	30 12       	mov	r2,1
800051e8:	fb 68 06 bb 	st.b	sp[1723],r8
800051ec:	50 2c       	stdsp	sp[0x8],r12
800051ee:	fa c6 f9 a0 	sub	r6,sp,-1632
800051f2:	c0 78       	rjmp	80005200 <_vfprintf_r+0x1664>
800051f4:	30 0b       	mov	r11,0
800051f6:	50 2b       	stdsp	sp[0x8],r11
800051f8:	c0 48       	rjmp	80005200 <_vfprintf_r+0x1664>
800051fa:	40 22       	lddsp	r2,sp[0x8]
800051fc:	30 0a       	mov	r10,0
800051fe:	50 2a       	stdsp	sp[0x8],r10
80005200:	40 29       	lddsp	r9,sp[0x8]
80005202:	e4 09 0c 49 	max	r9,r2,r9
80005206:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000520a:	50 39       	stdsp	sp[0xc],r9
8000520c:	0a 9e       	mov	lr,r5
8000520e:	30 09       	mov	r9,0
80005210:	e2 1e 00 02 	andl	lr,0x2,COH
80005214:	f2 08 18 00 	cp.b	r8,r9
80005218:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000521c:	f7 b8 01 ff 	subne	r8,-1
80005220:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005224:	0a 9b       	mov	r11,r5
80005226:	58 0e       	cp.w	lr,0
80005228:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000522c:	f7 bc 01 fe 	subne	r12,-2
80005230:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005234:	e2 1b 00 84 	andl	r11,0x84,COH
80005238:	50 fe       	stdsp	sp[0x3c],lr
8000523a:	50 9b       	stdsp	sp[0x24],r11
8000523c:	c4 71       	brne	800052ca <_vfprintf_r+0x172e>
8000523e:	40 8a       	lddsp	r10,sp[0x20]
80005240:	40 39       	lddsp	r9,sp[0xc]
80005242:	12 1a       	sub	r10,r9
80005244:	50 4a       	stdsp	sp[0x10],r10
80005246:	58 0a       	cp.w	r10,0
80005248:	e0 89 00 20 	brgt	80005288 <_vfprintf_r+0x16ec>
8000524c:	c3 f8       	rjmp	800052ca <_vfprintf_r+0x172e>
8000524e:	2f 09       	sub	r9,-16
80005250:	2f f8       	sub	r8,-1
80005252:	fe ce bb c6 	sub	lr,pc,-17466
80005256:	31 0c       	mov	r12,16
80005258:	fb 49 06 90 	st.w	sp[1680],r9
8000525c:	87 0e       	st.w	r3[0x0],lr
8000525e:	87 1c       	st.w	r3[0x4],r12
80005260:	fb 48 06 8c 	st.w	sp[1676],r8
80005264:	58 78       	cp.w	r8,7
80005266:	e0 89 00 04 	brgt	8000526e <_vfprintf_r+0x16d2>
8000526a:	2f 83       	sub	r3,-8
8000526c:	c0 b8       	rjmp	80005282 <_vfprintf_r+0x16e6>
8000526e:	fa ca f9 78 	sub	r10,sp,-1672
80005272:	02 9b       	mov	r11,r1
80005274:	08 9c       	mov	r12,r4
80005276:	fe b0 f4 85 	rcall	80003b80 <__sprint_r>
8000527a:	e0 81 04 10 	brne	80005a9a <_vfprintf_r+0x1efe>
8000527e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005282:	40 4b       	lddsp	r11,sp[0x10]
80005284:	21 0b       	sub	r11,16
80005286:	50 4b       	stdsp	sp[0x10],r11
80005288:	fa f9 06 90 	ld.w	r9,sp[1680]
8000528c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005290:	fe ca bc 04 	sub	r10,pc,-17404
80005294:	40 4e       	lddsp	lr,sp[0x10]
80005296:	59 0e       	cp.w	lr,16
80005298:	fe 99 ff db 	brgt	8000524e <_vfprintf_r+0x16b2>
8000529c:	1c 09       	add	r9,lr
8000529e:	2f f8       	sub	r8,-1
800052a0:	87 0a       	st.w	r3[0x0],r10
800052a2:	fb 49 06 90 	st.w	sp[1680],r9
800052a6:	87 1e       	st.w	r3[0x4],lr
800052a8:	fb 48 06 8c 	st.w	sp[1676],r8
800052ac:	58 78       	cp.w	r8,7
800052ae:	e0 89 00 04 	brgt	800052b6 <_vfprintf_r+0x171a>
800052b2:	2f 83       	sub	r3,-8
800052b4:	c0 b8       	rjmp	800052ca <_vfprintf_r+0x172e>
800052b6:	fa ca f9 78 	sub	r10,sp,-1672
800052ba:	02 9b       	mov	r11,r1
800052bc:	08 9c       	mov	r12,r4
800052be:	fe b0 f4 61 	rcall	80003b80 <__sprint_r>
800052c2:	e0 81 03 ec 	brne	80005a9a <_vfprintf_r+0x1efe>
800052c6:	fa c3 f9 e0 	sub	r3,sp,-1568
800052ca:	30 09       	mov	r9,0
800052cc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800052d0:	f2 08 18 00 	cp.b	r8,r9
800052d4:	c1 f0       	breq	80005312 <_vfprintf_r+0x1776>
800052d6:	fa f8 06 90 	ld.w	r8,sp[1680]
800052da:	fa c9 f9 45 	sub	r9,sp,-1723
800052de:	2f f8       	sub	r8,-1
800052e0:	87 09       	st.w	r3[0x0],r9
800052e2:	fb 48 06 90 	st.w	sp[1680],r8
800052e6:	30 19       	mov	r9,1
800052e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052ec:	87 19       	st.w	r3[0x4],r9
800052ee:	2f f8       	sub	r8,-1
800052f0:	fb 48 06 8c 	st.w	sp[1676],r8
800052f4:	58 78       	cp.w	r8,7
800052f6:	e0 89 00 04 	brgt	800052fe <_vfprintf_r+0x1762>
800052fa:	2f 83       	sub	r3,-8
800052fc:	c0 b8       	rjmp	80005312 <_vfprintf_r+0x1776>
800052fe:	fa ca f9 78 	sub	r10,sp,-1672
80005302:	02 9b       	mov	r11,r1
80005304:	08 9c       	mov	r12,r4
80005306:	fe b0 f4 3d 	rcall	80003b80 <__sprint_r>
8000530a:	e0 81 03 c8 	brne	80005a9a <_vfprintf_r+0x1efe>
8000530e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005312:	40 fc       	lddsp	r12,sp[0x3c]
80005314:	58 0c       	cp.w	r12,0
80005316:	c1 f0       	breq	80005354 <_vfprintf_r+0x17b8>
80005318:	fa f8 06 90 	ld.w	r8,sp[1680]
8000531c:	fa c9 f9 48 	sub	r9,sp,-1720
80005320:	2f e8       	sub	r8,-2
80005322:	87 09       	st.w	r3[0x0],r9
80005324:	fb 48 06 90 	st.w	sp[1680],r8
80005328:	30 29       	mov	r9,2
8000532a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000532e:	87 19       	st.w	r3[0x4],r9
80005330:	2f f8       	sub	r8,-1
80005332:	fb 48 06 8c 	st.w	sp[1676],r8
80005336:	58 78       	cp.w	r8,7
80005338:	e0 89 00 04 	brgt	80005340 <_vfprintf_r+0x17a4>
8000533c:	2f 83       	sub	r3,-8
8000533e:	c0 b8       	rjmp	80005354 <_vfprintf_r+0x17b8>
80005340:	fa ca f9 78 	sub	r10,sp,-1672
80005344:	02 9b       	mov	r11,r1
80005346:	08 9c       	mov	r12,r4
80005348:	fe b0 f4 1c 	rcall	80003b80 <__sprint_r>
8000534c:	e0 81 03 a7 	brne	80005a9a <_vfprintf_r+0x1efe>
80005350:	fa c3 f9 e0 	sub	r3,sp,-1568
80005354:	40 9b       	lddsp	r11,sp[0x24]
80005356:	e0 4b 00 80 	cp.w	r11,128
8000535a:	c4 71       	brne	800053e8 <_vfprintf_r+0x184c>
8000535c:	40 8a       	lddsp	r10,sp[0x20]
8000535e:	40 39       	lddsp	r9,sp[0xc]
80005360:	12 1a       	sub	r10,r9
80005362:	50 4a       	stdsp	sp[0x10],r10
80005364:	58 0a       	cp.w	r10,0
80005366:	e0 89 00 20 	brgt	800053a6 <_vfprintf_r+0x180a>
8000536a:	c3 f8       	rjmp	800053e8 <_vfprintf_r+0x184c>
8000536c:	2f 09       	sub	r9,-16
8000536e:	2f f8       	sub	r8,-1
80005370:	fe ce bc d4 	sub	lr,pc,-17196
80005374:	31 0c       	mov	r12,16
80005376:	fb 49 06 90 	st.w	sp[1680],r9
8000537a:	87 0e       	st.w	r3[0x0],lr
8000537c:	87 1c       	st.w	r3[0x4],r12
8000537e:	fb 48 06 8c 	st.w	sp[1676],r8
80005382:	58 78       	cp.w	r8,7
80005384:	e0 89 00 04 	brgt	8000538c <_vfprintf_r+0x17f0>
80005388:	2f 83       	sub	r3,-8
8000538a:	c0 b8       	rjmp	800053a0 <_vfprintf_r+0x1804>
8000538c:	fa ca f9 78 	sub	r10,sp,-1672
80005390:	02 9b       	mov	r11,r1
80005392:	08 9c       	mov	r12,r4
80005394:	fe b0 f3 f6 	rcall	80003b80 <__sprint_r>
80005398:	e0 81 03 81 	brne	80005a9a <_vfprintf_r+0x1efe>
8000539c:	fa c3 f9 e0 	sub	r3,sp,-1568
800053a0:	40 4b       	lddsp	r11,sp[0x10]
800053a2:	21 0b       	sub	r11,16
800053a4:	50 4b       	stdsp	sp[0x10],r11
800053a6:	fa f9 06 90 	ld.w	r9,sp[1680]
800053aa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053ae:	fe ca bd 12 	sub	r10,pc,-17134
800053b2:	40 4e       	lddsp	lr,sp[0x10]
800053b4:	59 0e       	cp.w	lr,16
800053b6:	fe 99 ff db 	brgt	8000536c <_vfprintf_r+0x17d0>
800053ba:	1c 09       	add	r9,lr
800053bc:	2f f8       	sub	r8,-1
800053be:	87 0a       	st.w	r3[0x0],r10
800053c0:	fb 49 06 90 	st.w	sp[1680],r9
800053c4:	87 1e       	st.w	r3[0x4],lr
800053c6:	fb 48 06 8c 	st.w	sp[1676],r8
800053ca:	58 78       	cp.w	r8,7
800053cc:	e0 89 00 04 	brgt	800053d4 <_vfprintf_r+0x1838>
800053d0:	2f 83       	sub	r3,-8
800053d2:	c0 b8       	rjmp	800053e8 <_vfprintf_r+0x184c>
800053d4:	fa ca f9 78 	sub	r10,sp,-1672
800053d8:	02 9b       	mov	r11,r1
800053da:	08 9c       	mov	r12,r4
800053dc:	fe b0 f3 d2 	rcall	80003b80 <__sprint_r>
800053e0:	e0 81 03 5d 	brne	80005a9a <_vfprintf_r+0x1efe>
800053e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800053e8:	40 2c       	lddsp	r12,sp[0x8]
800053ea:	04 1c       	sub	r12,r2
800053ec:	50 2c       	stdsp	sp[0x8],r12
800053ee:	58 0c       	cp.w	r12,0
800053f0:	e0 89 00 20 	brgt	80005430 <_vfprintf_r+0x1894>
800053f4:	c3 f8       	rjmp	80005472 <_vfprintf_r+0x18d6>
800053f6:	2f 09       	sub	r9,-16
800053f8:	2f f8       	sub	r8,-1
800053fa:	fe cb bd 5e 	sub	r11,pc,-17058
800053fe:	31 0a       	mov	r10,16
80005400:	fb 49 06 90 	st.w	sp[1680],r9
80005404:	87 0b       	st.w	r3[0x0],r11
80005406:	87 1a       	st.w	r3[0x4],r10
80005408:	fb 48 06 8c 	st.w	sp[1676],r8
8000540c:	58 78       	cp.w	r8,7
8000540e:	e0 89 00 04 	brgt	80005416 <_vfprintf_r+0x187a>
80005412:	2f 83       	sub	r3,-8
80005414:	c0 b8       	rjmp	8000542a <_vfprintf_r+0x188e>
80005416:	fa ca f9 78 	sub	r10,sp,-1672
8000541a:	02 9b       	mov	r11,r1
8000541c:	08 9c       	mov	r12,r4
8000541e:	fe b0 f3 b1 	rcall	80003b80 <__sprint_r>
80005422:	e0 81 03 3c 	brne	80005a9a <_vfprintf_r+0x1efe>
80005426:	fa c3 f9 e0 	sub	r3,sp,-1568
8000542a:	40 29       	lddsp	r9,sp[0x8]
8000542c:	21 09       	sub	r9,16
8000542e:	50 29       	stdsp	sp[0x8],r9
80005430:	fa f9 06 90 	ld.w	r9,sp[1680]
80005434:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005438:	fe ca bd 9c 	sub	r10,pc,-16996
8000543c:	40 2e       	lddsp	lr,sp[0x8]
8000543e:	59 0e       	cp.w	lr,16
80005440:	fe 99 ff db 	brgt	800053f6 <_vfprintf_r+0x185a>
80005444:	1c 09       	add	r9,lr
80005446:	2f f8       	sub	r8,-1
80005448:	87 0a       	st.w	r3[0x0],r10
8000544a:	fb 49 06 90 	st.w	sp[1680],r9
8000544e:	87 1e       	st.w	r3[0x4],lr
80005450:	fb 48 06 8c 	st.w	sp[1676],r8
80005454:	58 78       	cp.w	r8,7
80005456:	e0 89 00 04 	brgt	8000545e <_vfprintf_r+0x18c2>
8000545a:	2f 83       	sub	r3,-8
8000545c:	c0 b8       	rjmp	80005472 <_vfprintf_r+0x18d6>
8000545e:	fa ca f9 78 	sub	r10,sp,-1672
80005462:	02 9b       	mov	r11,r1
80005464:	08 9c       	mov	r12,r4
80005466:	fe b0 f3 8d 	rcall	80003b80 <__sprint_r>
8000546a:	e0 81 03 18 	brne	80005a9a <_vfprintf_r+0x1efe>
8000546e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005472:	ed b5 00 08 	bld	r5,0x8
80005476:	c0 b0       	breq	8000548c <_vfprintf_r+0x18f0>
80005478:	fa f8 06 90 	ld.w	r8,sp[1680]
8000547c:	87 12       	st.w	r3[0x4],r2
8000547e:	87 06       	st.w	r3[0x0],r6
80005480:	f0 02 00 02 	add	r2,r8,r2
80005484:	fb 42 06 90 	st.w	sp[1680],r2
80005488:	e0 8f 01 d4 	bral	80005830 <_vfprintf_r+0x1c94>
8000548c:	e0 40 00 65 	cp.w	r0,101
80005490:	e0 8a 01 d6 	brle	8000583c <_vfprintf_r+0x1ca0>
80005494:	30 08       	mov	r8,0
80005496:	30 09       	mov	r9,0
80005498:	40 5b       	lddsp	r11,sp[0x14]
8000549a:	40 7a       	lddsp	r10,sp[0x1c]
8000549c:	e0 a0 19 53 	rcall	80008742 <__avr32_f64_cmp_eq>
800054a0:	c7 90       	breq	80005592 <_vfprintf_r+0x19f6>
800054a2:	fa f8 06 90 	ld.w	r8,sp[1680]
800054a6:	fe c9 be 1e 	sub	r9,pc,-16866
800054aa:	2f f8       	sub	r8,-1
800054ac:	87 09       	st.w	r3[0x0],r9
800054ae:	fb 48 06 90 	st.w	sp[1680],r8
800054b2:	30 19       	mov	r9,1
800054b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054b8:	87 19       	st.w	r3[0x4],r9
800054ba:	2f f8       	sub	r8,-1
800054bc:	fb 48 06 8c 	st.w	sp[1676],r8
800054c0:	58 78       	cp.w	r8,7
800054c2:	e0 89 00 05 	brgt	800054cc <_vfprintf_r+0x1930>
800054c6:	2f 83       	sub	r3,-8
800054c8:	c0 c8       	rjmp	800054e0 <_vfprintf_r+0x1944>
800054ca:	d7 03       	nop
800054cc:	fa ca f9 78 	sub	r10,sp,-1672
800054d0:	02 9b       	mov	r11,r1
800054d2:	08 9c       	mov	r12,r4
800054d4:	fe b0 f3 56 	rcall	80003b80 <__sprint_r>
800054d8:	e0 81 02 e1 	brne	80005a9a <_vfprintf_r+0x1efe>
800054dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800054e0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800054e4:	40 6c       	lddsp	r12,sp[0x18]
800054e6:	18 38       	cp.w	r8,r12
800054e8:	c0 55       	brlt	800054f2 <_vfprintf_r+0x1956>
800054ea:	ed b5 00 00 	bld	r5,0x0
800054ee:	e0 81 02 6b 	brne	800059c4 <_vfprintf_r+0x1e28>
800054f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800054f6:	2f f8       	sub	r8,-1
800054f8:	40 cb       	lddsp	r11,sp[0x30]
800054fa:	fb 48 06 90 	st.w	sp[1680],r8
800054fe:	30 19       	mov	r9,1
80005500:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005504:	87 0b       	st.w	r3[0x0],r11
80005506:	2f f8       	sub	r8,-1
80005508:	87 19       	st.w	r3[0x4],r9
8000550a:	fb 48 06 8c 	st.w	sp[1676],r8
8000550e:	58 78       	cp.w	r8,7
80005510:	e0 89 00 04 	brgt	80005518 <_vfprintf_r+0x197c>
80005514:	2f 83       	sub	r3,-8
80005516:	c0 b8       	rjmp	8000552c <_vfprintf_r+0x1990>
80005518:	fa ca f9 78 	sub	r10,sp,-1672
8000551c:	02 9b       	mov	r11,r1
8000551e:	08 9c       	mov	r12,r4
80005520:	fe b0 f3 30 	rcall	80003b80 <__sprint_r>
80005524:	e0 81 02 bb 	brne	80005a9a <_vfprintf_r+0x1efe>
80005528:	fa c3 f9 e0 	sub	r3,sp,-1568
8000552c:	40 66       	lddsp	r6,sp[0x18]
8000552e:	20 16       	sub	r6,1
80005530:	58 06       	cp.w	r6,0
80005532:	e0 89 00 1d 	brgt	8000556c <_vfprintf_r+0x19d0>
80005536:	e0 8f 02 47 	bral	800059c4 <_vfprintf_r+0x1e28>
8000553a:	2f 09       	sub	r9,-16
8000553c:	2f f8       	sub	r8,-1
8000553e:	fb 49 06 90 	st.w	sp[1680],r9
80005542:	87 02       	st.w	r3[0x0],r2
80005544:	87 10       	st.w	r3[0x4],r0
80005546:	fb 48 06 8c 	st.w	sp[1676],r8
8000554a:	58 78       	cp.w	r8,7
8000554c:	e0 89 00 04 	brgt	80005554 <_vfprintf_r+0x19b8>
80005550:	2f 83       	sub	r3,-8
80005552:	c0 b8       	rjmp	80005568 <_vfprintf_r+0x19cc>
80005554:	fa ca f9 78 	sub	r10,sp,-1672
80005558:	02 9b       	mov	r11,r1
8000555a:	08 9c       	mov	r12,r4
8000555c:	fe b0 f3 12 	rcall	80003b80 <__sprint_r>
80005560:	e0 81 02 9d 	brne	80005a9a <_vfprintf_r+0x1efe>
80005564:	fa c3 f9 e0 	sub	r3,sp,-1568
80005568:	21 06       	sub	r6,16
8000556a:	c0 48       	rjmp	80005572 <_vfprintf_r+0x19d6>
8000556c:	fe c2 be d0 	sub	r2,pc,-16688
80005570:	31 00       	mov	r0,16
80005572:	fa f9 06 90 	ld.w	r9,sp[1680]
80005576:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000557a:	fe ca be de 	sub	r10,pc,-16674
8000557e:	59 06       	cp.w	r6,16
80005580:	fe 99 ff dd 	brgt	8000553a <_vfprintf_r+0x199e>
80005584:	0c 09       	add	r9,r6
80005586:	87 0a       	st.w	r3[0x0],r10
80005588:	fb 49 06 90 	st.w	sp[1680],r9
8000558c:	2f f8       	sub	r8,-1
8000558e:	87 16       	st.w	r3[0x4],r6
80005590:	c5 39       	rjmp	80005836 <_vfprintf_r+0x1c9a>
80005592:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005596:	58 0a       	cp.w	r10,0
80005598:	e0 89 00 92 	brgt	800056bc <_vfprintf_r+0x1b20>
8000559c:	fa f8 06 90 	ld.w	r8,sp[1680]
800055a0:	fe c9 bf 18 	sub	r9,pc,-16616
800055a4:	2f f8       	sub	r8,-1
800055a6:	87 09       	st.w	r3[0x0],r9
800055a8:	fb 48 06 90 	st.w	sp[1680],r8
800055ac:	30 19       	mov	r9,1
800055ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055b2:	87 19       	st.w	r3[0x4],r9
800055b4:	2f f8       	sub	r8,-1
800055b6:	fb 48 06 8c 	st.w	sp[1676],r8
800055ba:	58 78       	cp.w	r8,7
800055bc:	e0 89 00 04 	brgt	800055c4 <_vfprintf_r+0x1a28>
800055c0:	2f 83       	sub	r3,-8
800055c2:	c0 b8       	rjmp	800055d8 <_vfprintf_r+0x1a3c>
800055c4:	fa ca f9 78 	sub	r10,sp,-1672
800055c8:	02 9b       	mov	r11,r1
800055ca:	08 9c       	mov	r12,r4
800055cc:	fe b0 f2 da 	rcall	80003b80 <__sprint_r>
800055d0:	e0 81 02 65 	brne	80005a9a <_vfprintf_r+0x1efe>
800055d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800055d8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800055dc:	58 08       	cp.w	r8,0
800055de:	c0 81       	brne	800055ee <_vfprintf_r+0x1a52>
800055e0:	40 6a       	lddsp	r10,sp[0x18]
800055e2:	58 0a       	cp.w	r10,0
800055e4:	c0 51       	brne	800055ee <_vfprintf_r+0x1a52>
800055e6:	ed b5 00 00 	bld	r5,0x0
800055ea:	e0 81 01 ed 	brne	800059c4 <_vfprintf_r+0x1e28>
800055ee:	40 c9       	lddsp	r9,sp[0x30]
800055f0:	fa f8 06 90 	ld.w	r8,sp[1680]
800055f4:	2f f8       	sub	r8,-1
800055f6:	87 09       	st.w	r3[0x0],r9
800055f8:	fb 48 06 90 	st.w	sp[1680],r8
800055fc:	30 19       	mov	r9,1
800055fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005602:	87 19       	st.w	r3[0x4],r9
80005604:	2f f8       	sub	r8,-1
80005606:	fb 48 06 8c 	st.w	sp[1676],r8
8000560a:	58 78       	cp.w	r8,7
8000560c:	e0 89 00 04 	brgt	80005614 <_vfprintf_r+0x1a78>
80005610:	2f 83       	sub	r3,-8
80005612:	c0 b8       	rjmp	80005628 <_vfprintf_r+0x1a8c>
80005614:	fa ca f9 78 	sub	r10,sp,-1672
80005618:	02 9b       	mov	r11,r1
8000561a:	08 9c       	mov	r12,r4
8000561c:	fe b0 f2 b2 	rcall	80003b80 <__sprint_r>
80005620:	e0 81 02 3d 	brne	80005a9a <_vfprintf_r+0x1efe>
80005624:	fa c3 f9 e0 	sub	r3,sp,-1568
80005628:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000562c:	5c 32       	neg	r2
8000562e:	58 02       	cp.w	r2,0
80005630:	e0 89 00 1d 	brgt	8000566a <_vfprintf_r+0x1ace>
80005634:	c3 d8       	rjmp	800056ae <_vfprintf_r+0x1b12>
80005636:	2f 09       	sub	r9,-16
80005638:	2f f8       	sub	r8,-1
8000563a:	31 0e       	mov	lr,16
8000563c:	fb 49 06 90 	st.w	sp[1680],r9
80005640:	87 00       	st.w	r3[0x0],r0
80005642:	87 1e       	st.w	r3[0x4],lr
80005644:	fb 48 06 8c 	st.w	sp[1676],r8
80005648:	58 78       	cp.w	r8,7
8000564a:	e0 89 00 04 	brgt	80005652 <_vfprintf_r+0x1ab6>
8000564e:	2f 83       	sub	r3,-8
80005650:	c0 b8       	rjmp	80005666 <_vfprintf_r+0x1aca>
80005652:	fa ca f9 78 	sub	r10,sp,-1672
80005656:	02 9b       	mov	r11,r1
80005658:	08 9c       	mov	r12,r4
8000565a:	fe b0 f2 93 	rcall	80003b80 <__sprint_r>
8000565e:	e0 81 02 1e 	brne	80005a9a <_vfprintf_r+0x1efe>
80005662:	fa c3 f9 e0 	sub	r3,sp,-1568
80005666:	21 02       	sub	r2,16
80005668:	c0 38       	rjmp	8000566e <_vfprintf_r+0x1ad2>
8000566a:	fe c0 bf ce 	sub	r0,pc,-16434
8000566e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005672:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005676:	fe ca bf da 	sub	r10,pc,-16422
8000567a:	59 02       	cp.w	r2,16
8000567c:	fe 99 ff dd 	brgt	80005636 <_vfprintf_r+0x1a9a>
80005680:	04 09       	add	r9,r2
80005682:	2f f8       	sub	r8,-1
80005684:	87 0a       	st.w	r3[0x0],r10
80005686:	fb 49 06 90 	st.w	sp[1680],r9
8000568a:	87 12       	st.w	r3[0x4],r2
8000568c:	fb 48 06 8c 	st.w	sp[1676],r8
80005690:	58 78       	cp.w	r8,7
80005692:	e0 89 00 04 	brgt	8000569a <_vfprintf_r+0x1afe>
80005696:	2f 83       	sub	r3,-8
80005698:	c0 b8       	rjmp	800056ae <_vfprintf_r+0x1b12>
8000569a:	fa ca f9 78 	sub	r10,sp,-1672
8000569e:	02 9b       	mov	r11,r1
800056a0:	08 9c       	mov	r12,r4
800056a2:	fe b0 f2 6f 	rcall	80003b80 <__sprint_r>
800056a6:	e0 81 01 fa 	brne	80005a9a <_vfprintf_r+0x1efe>
800056aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800056ae:	40 6c       	lddsp	r12,sp[0x18]
800056b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800056b4:	87 06       	st.w	r3[0x0],r6
800056b6:	87 1c       	st.w	r3[0x4],r12
800056b8:	18 08       	add	r8,r12
800056ba:	cb 98       	rjmp	8000582c <_vfprintf_r+0x1c90>
800056bc:	fa f9 06 90 	ld.w	r9,sp[1680]
800056c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056c4:	40 6b       	lddsp	r11,sp[0x18]
800056c6:	16 3a       	cp.w	r10,r11
800056c8:	c6 f5       	brlt	800057a6 <_vfprintf_r+0x1c0a>
800056ca:	16 09       	add	r9,r11
800056cc:	2f f8       	sub	r8,-1
800056ce:	87 06       	st.w	r3[0x0],r6
800056d0:	fb 49 06 90 	st.w	sp[1680],r9
800056d4:	87 1b       	st.w	r3[0x4],r11
800056d6:	fb 48 06 8c 	st.w	sp[1676],r8
800056da:	58 78       	cp.w	r8,7
800056dc:	e0 89 00 04 	brgt	800056e4 <_vfprintf_r+0x1b48>
800056e0:	2f 83       	sub	r3,-8
800056e2:	c0 b8       	rjmp	800056f8 <_vfprintf_r+0x1b5c>
800056e4:	fa ca f9 78 	sub	r10,sp,-1672
800056e8:	02 9b       	mov	r11,r1
800056ea:	08 9c       	mov	r12,r4
800056ec:	fe b0 f2 4a 	rcall	80003b80 <__sprint_r>
800056f0:	e0 81 01 d5 	brne	80005a9a <_vfprintf_r+0x1efe>
800056f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800056f8:	fa f6 06 ac 	ld.w	r6,sp[1708]
800056fc:	40 6a       	lddsp	r10,sp[0x18]
800056fe:	14 16       	sub	r6,r10
80005700:	58 06       	cp.w	r6,0
80005702:	e0 89 00 1c 	brgt	8000573a <_vfprintf_r+0x1b9e>
80005706:	c3 d8       	rjmp	80005780 <_vfprintf_r+0x1be4>
80005708:	2f 09       	sub	r9,-16
8000570a:	2f f8       	sub	r8,-1
8000570c:	fb 49 06 90 	st.w	sp[1680],r9
80005710:	87 02       	st.w	r3[0x0],r2
80005712:	87 10       	st.w	r3[0x4],r0
80005714:	fb 48 06 8c 	st.w	sp[1676],r8
80005718:	58 78       	cp.w	r8,7
8000571a:	e0 89 00 04 	brgt	80005722 <_vfprintf_r+0x1b86>
8000571e:	2f 83       	sub	r3,-8
80005720:	c0 b8       	rjmp	80005736 <_vfprintf_r+0x1b9a>
80005722:	fa ca f9 78 	sub	r10,sp,-1672
80005726:	02 9b       	mov	r11,r1
80005728:	08 9c       	mov	r12,r4
8000572a:	fe b0 f2 2b 	rcall	80003b80 <__sprint_r>
8000572e:	e0 81 01 b6 	brne	80005a9a <_vfprintf_r+0x1efe>
80005732:	fa c3 f9 e0 	sub	r3,sp,-1568
80005736:	21 06       	sub	r6,16
80005738:	c0 48       	rjmp	80005740 <_vfprintf_r+0x1ba4>
8000573a:	fe c2 c0 9e 	sub	r2,pc,-16226
8000573e:	31 00       	mov	r0,16
80005740:	fa f9 06 90 	ld.w	r9,sp[1680]
80005744:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005748:	fe ca c0 ac 	sub	r10,pc,-16212
8000574c:	59 06       	cp.w	r6,16
8000574e:	fe 99 ff dd 	brgt	80005708 <_vfprintf_r+0x1b6c>
80005752:	0c 09       	add	r9,r6
80005754:	2f f8       	sub	r8,-1
80005756:	87 0a       	st.w	r3[0x0],r10
80005758:	fb 49 06 90 	st.w	sp[1680],r9
8000575c:	87 16       	st.w	r3[0x4],r6
8000575e:	fb 48 06 8c 	st.w	sp[1676],r8
80005762:	58 78       	cp.w	r8,7
80005764:	e0 89 00 04 	brgt	8000576c <_vfprintf_r+0x1bd0>
80005768:	2f 83       	sub	r3,-8
8000576a:	c0 b8       	rjmp	80005780 <_vfprintf_r+0x1be4>
8000576c:	fa ca f9 78 	sub	r10,sp,-1672
80005770:	02 9b       	mov	r11,r1
80005772:	08 9c       	mov	r12,r4
80005774:	fe b0 f2 06 	rcall	80003b80 <__sprint_r>
80005778:	e0 81 01 91 	brne	80005a9a <_vfprintf_r+0x1efe>
8000577c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005780:	ed b5 00 00 	bld	r5,0x0
80005784:	e0 81 01 20 	brne	800059c4 <_vfprintf_r+0x1e28>
80005788:	40 c9       	lddsp	r9,sp[0x30]
8000578a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000578e:	2f f8       	sub	r8,-1
80005790:	87 09       	st.w	r3[0x0],r9
80005792:	fb 48 06 90 	st.w	sp[1680],r8
80005796:	30 19       	mov	r9,1
80005798:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000579c:	87 19       	st.w	r3[0x4],r9
8000579e:	2f f8       	sub	r8,-1
800057a0:	fb 48 06 8c 	st.w	sp[1676],r8
800057a4:	c0 29       	rjmp	800059a8 <_vfprintf_r+0x1e0c>
800057a6:	14 09       	add	r9,r10
800057a8:	2f f8       	sub	r8,-1
800057aa:	fb 49 06 90 	st.w	sp[1680],r9
800057ae:	87 06       	st.w	r3[0x0],r6
800057b0:	87 1a       	st.w	r3[0x4],r10
800057b2:	fb 48 06 8c 	st.w	sp[1676],r8
800057b6:	58 78       	cp.w	r8,7
800057b8:	e0 89 00 04 	brgt	800057c0 <_vfprintf_r+0x1c24>
800057bc:	2f 83       	sub	r3,-8
800057be:	c0 b8       	rjmp	800057d4 <_vfprintf_r+0x1c38>
800057c0:	fa ca f9 78 	sub	r10,sp,-1672
800057c4:	02 9b       	mov	r11,r1
800057c6:	08 9c       	mov	r12,r4
800057c8:	fe b0 f1 dc 	rcall	80003b80 <__sprint_r>
800057cc:	e0 81 01 67 	brne	80005a9a <_vfprintf_r+0x1efe>
800057d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800057d4:	40 c8       	lddsp	r8,sp[0x30]
800057d6:	87 08       	st.w	r3[0x0],r8
800057d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800057dc:	2f f8       	sub	r8,-1
800057de:	30 19       	mov	r9,1
800057e0:	fb 48 06 90 	st.w	sp[1680],r8
800057e4:	87 19       	st.w	r3[0x4],r9
800057e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057ea:	2f f8       	sub	r8,-1
800057ec:	fb 48 06 8c 	st.w	sp[1676],r8
800057f0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800057f4:	58 78       	cp.w	r8,7
800057f6:	e0 89 00 04 	brgt	800057fe <_vfprintf_r+0x1c62>
800057fa:	2f 83       	sub	r3,-8
800057fc:	c0 b8       	rjmp	80005812 <_vfprintf_r+0x1c76>
800057fe:	fa ca f9 78 	sub	r10,sp,-1672
80005802:	02 9b       	mov	r11,r1
80005804:	08 9c       	mov	r12,r4
80005806:	fe b0 f1 bd 	rcall	80003b80 <__sprint_r>
8000580a:	e0 81 01 48 	brne	80005a9a <_vfprintf_r+0x1efe>
8000580e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005812:	04 06       	add	r6,r2
80005814:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005818:	87 06       	st.w	r3[0x0],r6
8000581a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000581e:	40 66       	lddsp	r6,sp[0x18]
80005820:	40 6e       	lddsp	lr,sp[0x18]
80005822:	10 16       	sub	r6,r8
80005824:	f2 08 01 08 	sub	r8,r9,r8
80005828:	87 16       	st.w	r3[0x4],r6
8000582a:	1c 08       	add	r8,lr
8000582c:	fb 48 06 90 	st.w	sp[1680],r8
80005830:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005834:	2f f8       	sub	r8,-1
80005836:	fb 48 06 8c 	st.w	sp[1676],r8
8000583a:	cb 78       	rjmp	800059a8 <_vfprintf_r+0x1e0c>
8000583c:	40 6c       	lddsp	r12,sp[0x18]
8000583e:	58 1c       	cp.w	r12,1
80005840:	e0 89 00 06 	brgt	8000584c <_vfprintf_r+0x1cb0>
80005844:	ed b5 00 00 	bld	r5,0x0
80005848:	e0 81 00 85 	brne	80005952 <_vfprintf_r+0x1db6>
8000584c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005850:	2f f8       	sub	r8,-1
80005852:	30 19       	mov	r9,1
80005854:	fb 48 06 90 	st.w	sp[1680],r8
80005858:	87 06       	st.w	r3[0x0],r6
8000585a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000585e:	87 19       	st.w	r3[0x4],r9
80005860:	2f f8       	sub	r8,-1
80005862:	fb 48 06 8c 	st.w	sp[1676],r8
80005866:	58 78       	cp.w	r8,7
80005868:	e0 89 00 04 	brgt	80005870 <_vfprintf_r+0x1cd4>
8000586c:	2f 83       	sub	r3,-8
8000586e:	c0 b8       	rjmp	80005884 <_vfprintf_r+0x1ce8>
80005870:	fa ca f9 78 	sub	r10,sp,-1672
80005874:	02 9b       	mov	r11,r1
80005876:	08 9c       	mov	r12,r4
80005878:	fe b0 f1 84 	rcall	80003b80 <__sprint_r>
8000587c:	e0 81 01 0f 	brne	80005a9a <_vfprintf_r+0x1efe>
80005880:	fa c3 f9 e0 	sub	r3,sp,-1568
80005884:	fa f8 06 90 	ld.w	r8,sp[1680]
80005888:	2f f8       	sub	r8,-1
8000588a:	40 cb       	lddsp	r11,sp[0x30]
8000588c:	fb 48 06 90 	st.w	sp[1680],r8
80005890:	30 19       	mov	r9,1
80005892:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005896:	87 0b       	st.w	r3[0x0],r11
80005898:	2f f8       	sub	r8,-1
8000589a:	87 19       	st.w	r3[0x4],r9
8000589c:	fb 48 06 8c 	st.w	sp[1676],r8
800058a0:	58 78       	cp.w	r8,7
800058a2:	e0 89 00 05 	brgt	800058ac <_vfprintf_r+0x1d10>
800058a6:	2f 83       	sub	r3,-8
800058a8:	c0 c8       	rjmp	800058c0 <_vfprintf_r+0x1d24>
800058aa:	d7 03       	nop
800058ac:	fa ca f9 78 	sub	r10,sp,-1672
800058b0:	02 9b       	mov	r11,r1
800058b2:	08 9c       	mov	r12,r4
800058b4:	fe b0 f1 66 	rcall	80003b80 <__sprint_r>
800058b8:	e0 81 00 f1 	brne	80005a9a <_vfprintf_r+0x1efe>
800058bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800058c0:	30 08       	mov	r8,0
800058c2:	30 09       	mov	r9,0
800058c4:	40 5b       	lddsp	r11,sp[0x14]
800058c6:	40 7a       	lddsp	r10,sp[0x1c]
800058c8:	e0 a0 17 3d 	rcall	80008742 <__avr32_f64_cmp_eq>
800058cc:	40 68       	lddsp	r8,sp[0x18]
800058ce:	20 18       	sub	r8,1
800058d0:	58 0c       	cp.w	r12,0
800058d2:	c0 d1       	brne	800058ec <_vfprintf_r+0x1d50>
800058d4:	2f f6       	sub	r6,-1
800058d6:	87 18       	st.w	r3[0x4],r8
800058d8:	87 06       	st.w	r3[0x0],r6
800058da:	fa f6 06 90 	ld.w	r6,sp[1680]
800058de:	10 06       	add	r6,r8
800058e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058e4:	fb 46 06 90 	st.w	sp[1680],r6
800058e8:	2f f8       	sub	r8,-1
800058ea:	c3 18       	rjmp	8000594c <_vfprintf_r+0x1db0>
800058ec:	10 96       	mov	r6,r8
800058ee:	58 08       	cp.w	r8,0
800058f0:	e0 89 00 1c 	brgt	80005928 <_vfprintf_r+0x1d8c>
800058f4:	c4 b8       	rjmp	8000598a <_vfprintf_r+0x1dee>
800058f6:	2f 09       	sub	r9,-16
800058f8:	2f f8       	sub	r8,-1
800058fa:	fb 49 06 90 	st.w	sp[1680],r9
800058fe:	87 02       	st.w	r3[0x0],r2
80005900:	87 10       	st.w	r3[0x4],r0
80005902:	fb 48 06 8c 	st.w	sp[1676],r8
80005906:	58 78       	cp.w	r8,7
80005908:	e0 89 00 04 	brgt	80005910 <_vfprintf_r+0x1d74>
8000590c:	2f 83       	sub	r3,-8
8000590e:	c0 b8       	rjmp	80005924 <_vfprintf_r+0x1d88>
80005910:	fa ca f9 78 	sub	r10,sp,-1672
80005914:	02 9b       	mov	r11,r1
80005916:	08 9c       	mov	r12,r4
80005918:	fe b0 f1 34 	rcall	80003b80 <__sprint_r>
8000591c:	e0 81 00 bf 	brne	80005a9a <_vfprintf_r+0x1efe>
80005920:	fa c3 f9 e0 	sub	r3,sp,-1568
80005924:	21 06       	sub	r6,16
80005926:	c0 48       	rjmp	8000592e <_vfprintf_r+0x1d92>
80005928:	fe c2 c2 8c 	sub	r2,pc,-15732
8000592c:	31 00       	mov	r0,16
8000592e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005932:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005936:	fe ca c2 9a 	sub	r10,pc,-15718
8000593a:	59 06       	cp.w	r6,16
8000593c:	fe 99 ff dd 	brgt	800058f6 <_vfprintf_r+0x1d5a>
80005940:	0c 09       	add	r9,r6
80005942:	87 0a       	st.w	r3[0x0],r10
80005944:	fb 49 06 90 	st.w	sp[1680],r9
80005948:	2f f8       	sub	r8,-1
8000594a:	87 16       	st.w	r3[0x4],r6
8000594c:	fb 48 06 8c 	st.w	sp[1676],r8
80005950:	c0 e8       	rjmp	8000596c <_vfprintf_r+0x1dd0>
80005952:	fa f8 06 90 	ld.w	r8,sp[1680]
80005956:	2f f8       	sub	r8,-1
80005958:	30 19       	mov	r9,1
8000595a:	fb 48 06 90 	st.w	sp[1680],r8
8000595e:	87 06       	st.w	r3[0x0],r6
80005960:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005964:	87 19       	st.w	r3[0x4],r9
80005966:	2f f8       	sub	r8,-1
80005968:	fb 48 06 8c 	st.w	sp[1676],r8
8000596c:	58 78       	cp.w	r8,7
8000596e:	e0 89 00 04 	brgt	80005976 <_vfprintf_r+0x1dda>
80005972:	2f 83       	sub	r3,-8
80005974:	c0 b8       	rjmp	8000598a <_vfprintf_r+0x1dee>
80005976:	fa ca f9 78 	sub	r10,sp,-1672
8000597a:	02 9b       	mov	r11,r1
8000597c:	08 9c       	mov	r12,r4
8000597e:	fe b0 f1 01 	rcall	80003b80 <__sprint_r>
80005982:	e0 81 00 8c 	brne	80005a9a <_vfprintf_r+0x1efe>
80005986:	fa c3 f9 e0 	sub	r3,sp,-1568
8000598a:	40 ea       	lddsp	r10,sp[0x38]
8000598c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005990:	14 08       	add	r8,r10
80005992:	fa c9 f9 64 	sub	r9,sp,-1692
80005996:	fb 48 06 90 	st.w	sp[1680],r8
8000599a:	87 1a       	st.w	r3[0x4],r10
8000599c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059a0:	87 09       	st.w	r3[0x0],r9
800059a2:	2f f8       	sub	r8,-1
800059a4:	fb 48 06 8c 	st.w	sp[1676],r8
800059a8:	58 78       	cp.w	r8,7
800059aa:	e0 89 00 04 	brgt	800059b2 <_vfprintf_r+0x1e16>
800059ae:	2f 83       	sub	r3,-8
800059b0:	c0 a8       	rjmp	800059c4 <_vfprintf_r+0x1e28>
800059b2:	fa ca f9 78 	sub	r10,sp,-1672
800059b6:	02 9b       	mov	r11,r1
800059b8:	08 9c       	mov	r12,r4
800059ba:	fe b0 f0 e3 	rcall	80003b80 <__sprint_r>
800059be:	c6 e1       	brne	80005a9a <_vfprintf_r+0x1efe>
800059c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800059c4:	e2 15 00 04 	andl	r5,0x4,COH
800059c8:	c3 f0       	breq	80005a46 <_vfprintf_r+0x1eaa>
800059ca:	40 86       	lddsp	r6,sp[0x20]
800059cc:	40 39       	lddsp	r9,sp[0xc]
800059ce:	12 16       	sub	r6,r9
800059d0:	58 06       	cp.w	r6,0
800059d2:	e0 89 00 1a 	brgt	80005a06 <_vfprintf_r+0x1e6a>
800059d6:	c3 88       	rjmp	80005a46 <_vfprintf_r+0x1eaa>
800059d8:	2f 09       	sub	r9,-16
800059da:	2f f8       	sub	r8,-1
800059dc:	fb 49 06 90 	st.w	sp[1680],r9
800059e0:	87 05       	st.w	r3[0x0],r5
800059e2:	87 12       	st.w	r3[0x4],r2
800059e4:	fb 48 06 8c 	st.w	sp[1676],r8
800059e8:	58 78       	cp.w	r8,7
800059ea:	e0 89 00 04 	brgt	800059f2 <_vfprintf_r+0x1e56>
800059ee:	2f 83       	sub	r3,-8
800059f0:	c0 98       	rjmp	80005a02 <_vfprintf_r+0x1e66>
800059f2:	00 9a       	mov	r10,r0
800059f4:	02 9b       	mov	r11,r1
800059f6:	08 9c       	mov	r12,r4
800059f8:	fe b0 f0 c4 	rcall	80003b80 <__sprint_r>
800059fc:	c4 f1       	brne	80005a9a <_vfprintf_r+0x1efe>
800059fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a02:	21 06       	sub	r6,16
80005a04:	c0 68       	rjmp	80005a10 <_vfprintf_r+0x1e74>
80005a06:	fe c5 c3 7a 	sub	r5,pc,-15494
80005a0a:	31 02       	mov	r2,16
80005a0c:	fa c0 f9 78 	sub	r0,sp,-1672
80005a10:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a14:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a18:	fe ca c3 8c 	sub	r10,pc,-15476
80005a1c:	59 06       	cp.w	r6,16
80005a1e:	fe 99 ff dd 	brgt	800059d8 <_vfprintf_r+0x1e3c>
80005a22:	0c 09       	add	r9,r6
80005a24:	2f f8       	sub	r8,-1
80005a26:	87 0a       	st.w	r3[0x0],r10
80005a28:	87 16       	st.w	r3[0x4],r6
80005a2a:	fb 49 06 90 	st.w	sp[1680],r9
80005a2e:	fb 48 06 8c 	st.w	sp[1676],r8
80005a32:	58 78       	cp.w	r8,7
80005a34:	e0 8a 00 09 	brle	80005a46 <_vfprintf_r+0x1eaa>
80005a38:	fa ca f9 78 	sub	r10,sp,-1672
80005a3c:	02 9b       	mov	r11,r1
80005a3e:	08 9c       	mov	r12,r4
80005a40:	fe b0 f0 a0 	rcall	80003b80 <__sprint_r>
80005a44:	c2 b1       	brne	80005a9a <_vfprintf_r+0x1efe>
80005a46:	40 bc       	lddsp	r12,sp[0x2c]
80005a48:	40 36       	lddsp	r6,sp[0xc]
80005a4a:	40 8e       	lddsp	lr,sp[0x20]
80005a4c:	ec 0e 0c 48 	max	r8,r6,lr
80005a50:	10 0c       	add	r12,r8
80005a52:	50 bc       	stdsp	sp[0x2c],r12
80005a54:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a58:	58 08       	cp.w	r8,0
80005a5a:	c0 80       	breq	80005a6a <_vfprintf_r+0x1ece>
80005a5c:	fa ca f9 78 	sub	r10,sp,-1672
80005a60:	02 9b       	mov	r11,r1
80005a62:	08 9c       	mov	r12,r4
80005a64:	fe b0 f0 8e 	rcall	80003b80 <__sprint_r>
80005a68:	c1 91       	brne	80005a9a <_vfprintf_r+0x1efe>
80005a6a:	30 0b       	mov	r11,0
80005a6c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a70:	fb 4b 06 8c 	st.w	sp[1676],r11
80005a74:	fe 9f f1 22 	bral	80003cb8 <_vfprintf_r+0x11c>
80005a78:	08 95       	mov	r5,r4
80005a7a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a7e:	58 08       	cp.w	r8,0
80005a80:	c0 80       	breq	80005a90 <_vfprintf_r+0x1ef4>
80005a82:	08 9c       	mov	r12,r4
80005a84:	fa ca f9 78 	sub	r10,sp,-1672
80005a88:	02 9b       	mov	r11,r1
80005a8a:	fe b0 f0 7b 	rcall	80003b80 <__sprint_r>
80005a8e:	c0 61       	brne	80005a9a <_vfprintf_r+0x1efe>
80005a90:	30 08       	mov	r8,0
80005a92:	fb 48 06 8c 	st.w	sp[1676],r8
80005a96:	c0 28       	rjmp	80005a9a <_vfprintf_r+0x1efe>
80005a98:	40 41       	lddsp	r1,sp[0x10]
80005a9a:	82 68       	ld.sh	r8,r1[0xc]
80005a9c:	ed b8 00 06 	bld	r8,0x6
80005aa0:	c0 31       	brne	80005aa6 <_vfprintf_r+0x1f0a>
80005aa2:	3f fa       	mov	r10,-1
80005aa4:	50 ba       	stdsp	sp[0x2c],r10
80005aa6:	40 bc       	lddsp	r12,sp[0x2c]
80005aa8:	fe 3d f9 44 	sub	sp,-1724
80005aac:	d8 32       	popm	r0-r7,pc
80005aae:	d7 03       	nop

80005ab0 <__swsetup_r>:
80005ab0:	d4 21       	pushm	r4-r7,lr
80005ab2:	e0 68 01 04 	mov	r8,260
80005ab6:	18 96       	mov	r6,r12
80005ab8:	16 97       	mov	r7,r11
80005aba:	70 0c       	ld.w	r12,r8[0x0]
80005abc:	58 0c       	cp.w	r12,0
80005abe:	c0 60       	breq	80005aca <__swsetup_r+0x1a>
80005ac0:	78 68       	ld.w	r8,r12[0x18]
80005ac2:	58 08       	cp.w	r8,0
80005ac4:	c0 31       	brne	80005aca <__swsetup_r+0x1a>
80005ac6:	e0 a0 07 b9 	rcall	80006a38 <__sinit>
80005aca:	fe c8 c3 0e 	sub	r8,pc,-15602
80005ace:	10 37       	cp.w	r7,r8
80005ad0:	c0 61       	brne	80005adc <__swsetup_r+0x2c>
80005ad2:	e0 68 01 04 	mov	r8,260
80005ad6:	70 08       	ld.w	r8,r8[0x0]
80005ad8:	70 07       	ld.w	r7,r8[0x0]
80005ada:	c1 28       	rjmp	80005afe <__swsetup_r+0x4e>
80005adc:	fe c8 c3 00 	sub	r8,pc,-15616
80005ae0:	10 37       	cp.w	r7,r8
80005ae2:	c0 61       	brne	80005aee <__swsetup_r+0x3e>
80005ae4:	e0 68 01 04 	mov	r8,260
80005ae8:	70 08       	ld.w	r8,r8[0x0]
80005aea:	70 17       	ld.w	r7,r8[0x4]
80005aec:	c0 98       	rjmp	80005afe <__swsetup_r+0x4e>
80005aee:	fe c8 c2 f2 	sub	r8,pc,-15630
80005af2:	10 37       	cp.w	r7,r8
80005af4:	c0 51       	brne	80005afe <__swsetup_r+0x4e>
80005af6:	e0 68 01 04 	mov	r8,260
80005afa:	70 08       	ld.w	r8,r8[0x0]
80005afc:	70 27       	ld.w	r7,r8[0x8]
80005afe:	8e 68       	ld.sh	r8,r7[0xc]
80005b00:	ed b8 00 03 	bld	r8,0x3
80005b04:	c1 e0       	breq	80005b40 <__swsetup_r+0x90>
80005b06:	ed b8 00 04 	bld	r8,0x4
80005b0a:	c3 e1       	brne	80005b86 <__swsetup_r+0xd6>
80005b0c:	ed b8 00 02 	bld	r8,0x2
80005b10:	c1 51       	brne	80005b3a <__swsetup_r+0x8a>
80005b12:	6e db       	ld.w	r11,r7[0x34]
80005b14:	58 0b       	cp.w	r11,0
80005b16:	c0 a0       	breq	80005b2a <__swsetup_r+0x7a>
80005b18:	ee c8 ff bc 	sub	r8,r7,-68
80005b1c:	10 3b       	cp.w	r11,r8
80005b1e:	c0 40       	breq	80005b26 <__swsetup_r+0x76>
80005b20:	0c 9c       	mov	r12,r6
80005b22:	e0 a0 08 25 	rcall	80006b6c <_free_r>
80005b26:	30 08       	mov	r8,0
80005b28:	8f d8       	st.w	r7[0x34],r8
80005b2a:	8e 68       	ld.sh	r8,r7[0xc]
80005b2c:	e0 18 ff db 	andl	r8,0xffdb
80005b30:	ae 68       	st.h	r7[0xc],r8
80005b32:	30 08       	mov	r8,0
80005b34:	8f 18       	st.w	r7[0x4],r8
80005b36:	6e 48       	ld.w	r8,r7[0x10]
80005b38:	8f 08       	st.w	r7[0x0],r8
80005b3a:	8e 68       	ld.sh	r8,r7[0xc]
80005b3c:	a3 b8       	sbr	r8,0x3
80005b3e:	ae 68       	st.h	r7[0xc],r8
80005b40:	6e 48       	ld.w	r8,r7[0x10]
80005b42:	58 08       	cp.w	r8,0
80005b44:	c0 b1       	brne	80005b5a <__swsetup_r+0xaa>
80005b46:	8e 68       	ld.sh	r8,r7[0xc]
80005b48:	e2 18 02 80 	andl	r8,0x280,COH
80005b4c:	e0 48 02 00 	cp.w	r8,512
80005b50:	c0 50       	breq	80005b5a <__swsetup_r+0xaa>
80005b52:	0c 9c       	mov	r12,r6
80005b54:	0e 9b       	mov	r11,r7
80005b56:	e0 a0 0a 4b 	rcall	80006fec <__smakebuf_r>
80005b5a:	8e 69       	ld.sh	r9,r7[0xc]
80005b5c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005b60:	c0 70       	breq	80005b6e <__swsetup_r+0xbe>
80005b62:	30 08       	mov	r8,0
80005b64:	8f 28       	st.w	r7[0x8],r8
80005b66:	6e 58       	ld.w	r8,r7[0x14]
80005b68:	5c 38       	neg	r8
80005b6a:	8f 68       	st.w	r7[0x18],r8
80005b6c:	c0 68       	rjmp	80005b78 <__swsetup_r+0xc8>
80005b6e:	ed b9 00 01 	bld	r9,0x1
80005b72:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005b76:	8f 28       	st.w	r7[0x8],r8
80005b78:	6e 48       	ld.w	r8,r7[0x10]
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	c0 61       	brne	80005b88 <__swsetup_r+0xd8>
80005b7e:	8e 68       	ld.sh	r8,r7[0xc]
80005b80:	ed b8 00 07 	bld	r8,0x7
80005b84:	c0 21       	brne	80005b88 <__swsetup_r+0xd8>
80005b86:	dc 2a       	popm	r4-r7,pc,r12=-1
80005b88:	d8 2a       	popm	r4-r7,pc,r12=0
80005b8a:	d7 03       	nop

80005b8c <quorem>:
80005b8c:	d4 31       	pushm	r0-r7,lr
80005b8e:	20 2d       	sub	sp,8
80005b90:	18 97       	mov	r7,r12
80005b92:	78 48       	ld.w	r8,r12[0x10]
80005b94:	76 46       	ld.w	r6,r11[0x10]
80005b96:	0c 38       	cp.w	r8,r6
80005b98:	c0 34       	brge	80005b9e <quorem+0x12>
80005b9a:	30 0c       	mov	r12,0
80005b9c:	c8 58       	rjmp	80005ca6 <quorem+0x11a>
80005b9e:	ec c2 ff fc 	sub	r2,r6,-4
80005ba2:	f6 c3 ff ec 	sub	r3,r11,-20
80005ba6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005baa:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005bae:	2f f9       	sub	r9,-1
80005bb0:	20 16       	sub	r6,1
80005bb2:	f8 09 0d 08 	divu	r8,r12,r9
80005bb6:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005bba:	ee c4 ff ec 	sub	r4,r7,-20
80005bbe:	10 95       	mov	r5,r8
80005bc0:	58 08       	cp.w	r8,0
80005bc2:	c4 10       	breq	80005c44 <quorem+0xb8>
80005bc4:	30 09       	mov	r9,0
80005bc6:	06 9a       	mov	r10,r3
80005bc8:	08 98       	mov	r8,r4
80005bca:	12 91       	mov	r1,r9
80005bcc:	50 0b       	stdsp	sp[0x0],r11
80005bce:	70 0e       	ld.w	lr,r8[0x0]
80005bd0:	b1 8e       	lsr	lr,0x10
80005bd2:	50 1e       	stdsp	sp[0x4],lr
80005bd4:	15 0e       	ld.w	lr,r10++
80005bd6:	fc 00 16 10 	lsr	r0,lr,0x10
80005bda:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005bde:	ea 0e 03 41 	mac	r1,r5,lr
80005be2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005be6:	b1 81       	lsr	r1,0x10
80005be8:	40 1b       	lddsp	r11,sp[0x4]
80005bea:	ea 00 02 40 	mul	r0,r5,r0
80005bee:	e2 00 00 00 	add	r0,r1,r0
80005bf2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005bf6:	02 1b       	sub	r11,r1
80005bf8:	50 1b       	stdsp	sp[0x4],r11
80005bfa:	70 0b       	ld.w	r11,r8[0x0]
80005bfc:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005c00:	02 09       	add	r9,r1
80005c02:	f2 0e 01 0e 	sub	lr,r9,lr
80005c06:	b0 1e       	st.h	r8[0x2],lr
80005c08:	fc 09 14 10 	asr	r9,lr,0x10
80005c0c:	40 1e       	lddsp	lr,sp[0x4]
80005c0e:	fc 09 00 09 	add	r9,lr,r9
80005c12:	b0 09       	st.h	r8[0x0],r9
80005c14:	e0 01 16 10 	lsr	r1,r0,0x10
80005c18:	2f c8       	sub	r8,-4
80005c1a:	b1 49       	asr	r9,0x10
80005c1c:	04 3a       	cp.w	r10,r2
80005c1e:	fe 98 ff d8 	brls	80005bce <quorem+0x42>
80005c22:	40 0b       	lddsp	r11,sp[0x0]
80005c24:	58 0c       	cp.w	r12,0
80005c26:	c0 f1       	brne	80005c44 <quorem+0xb8>
80005c28:	ec c8 ff fb 	sub	r8,r6,-5
80005c2c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005c30:	c0 28       	rjmp	80005c34 <quorem+0xa8>
80005c32:	20 16       	sub	r6,1
80005c34:	20 48       	sub	r8,4
80005c36:	08 38       	cp.w	r8,r4
80005c38:	e0 88 00 05 	brls	80005c42 <quorem+0xb6>
80005c3c:	70 09       	ld.w	r9,r8[0x0]
80005c3e:	58 09       	cp.w	r9,0
80005c40:	cf 90       	breq	80005c32 <quorem+0xa6>
80005c42:	8f 46       	st.w	r7[0x10],r6
80005c44:	0e 9c       	mov	r12,r7
80005c46:	e0 a0 0c fb 	rcall	8000763c <__mcmp>
80005c4a:	c2 d5       	brlt	80005ca4 <quorem+0x118>
80005c4c:	2f f5       	sub	r5,-1
80005c4e:	08 98       	mov	r8,r4
80005c50:	30 09       	mov	r9,0
80005c52:	07 0b       	ld.w	r11,r3++
80005c54:	f6 0a 16 10 	lsr	r10,r11,0x10
80005c58:	70 0c       	ld.w	r12,r8[0x0]
80005c5a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005c5e:	f8 0e 16 10 	lsr	lr,r12,0x10
80005c62:	14 1e       	sub	lr,r10
80005c64:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005c68:	16 1a       	sub	r10,r11
80005c6a:	12 0a       	add	r10,r9
80005c6c:	b0 1a       	st.h	r8[0x2],r10
80005c6e:	b1 4a       	asr	r10,0x10
80005c70:	fc 0a 00 09 	add	r9,lr,r10
80005c74:	b0 09       	st.h	r8[0x0],r9
80005c76:	2f c8       	sub	r8,-4
80005c78:	b1 49       	asr	r9,0x10
80005c7a:	04 33       	cp.w	r3,r2
80005c7c:	fe 98 ff eb 	brls	80005c52 <quorem+0xc6>
80005c80:	ec c8 ff fb 	sub	r8,r6,-5
80005c84:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005c88:	58 09       	cp.w	r9,0
80005c8a:	c0 d1       	brne	80005ca4 <quorem+0x118>
80005c8c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005c90:	c0 28       	rjmp	80005c94 <quorem+0x108>
80005c92:	20 16       	sub	r6,1
80005c94:	20 48       	sub	r8,4
80005c96:	08 38       	cp.w	r8,r4
80005c98:	e0 88 00 05 	brls	80005ca2 <quorem+0x116>
80005c9c:	70 09       	ld.w	r9,r8[0x0]
80005c9e:	58 09       	cp.w	r9,0
80005ca0:	cf 90       	breq	80005c92 <quorem+0x106>
80005ca2:	8f 46       	st.w	r7[0x10],r6
80005ca4:	0a 9c       	mov	r12,r5
80005ca6:	2f ed       	sub	sp,-8
80005ca8:	d8 32       	popm	r0-r7,pc
80005caa:	d7 03       	nop

80005cac <_dtoa_r>:
80005cac:	d4 31       	pushm	r0-r7,lr
80005cae:	21 ad       	sub	sp,104
80005cb0:	fa c4 ff 74 	sub	r4,sp,-140
80005cb4:	18 97       	mov	r7,r12
80005cb6:	16 95       	mov	r5,r11
80005cb8:	68 2c       	ld.w	r12,r4[0x8]
80005cba:	50 c9       	stdsp	sp[0x30],r9
80005cbc:	68 16       	ld.w	r6,r4[0x4]
80005cbe:	68 09       	ld.w	r9,r4[0x0]
80005cc0:	50 e8       	stdsp	sp[0x38],r8
80005cc2:	14 94       	mov	r4,r10
80005cc4:	51 2c       	stdsp	sp[0x48],r12
80005cc6:	fa e5 00 08 	st.d	sp[8],r4
80005cca:	51 59       	stdsp	sp[0x54],r9
80005ccc:	6e 95       	ld.w	r5,r7[0x24]
80005cce:	58 05       	cp.w	r5,0
80005cd0:	c0 91       	brne	80005ce2 <_dtoa_r+0x36>
80005cd2:	31 0c       	mov	r12,16
80005cd4:	e0 a0 09 ea 	rcall	800070a8 <malloc>
80005cd8:	99 35       	st.w	r12[0xc],r5
80005cda:	8f 9c       	st.w	r7[0x24],r12
80005cdc:	99 15       	st.w	r12[0x4],r5
80005cde:	99 25       	st.w	r12[0x8],r5
80005ce0:	99 05       	st.w	r12[0x0],r5
80005ce2:	6e 99       	ld.w	r9,r7[0x24]
80005ce4:	72 08       	ld.w	r8,r9[0x0]
80005ce6:	58 08       	cp.w	r8,0
80005ce8:	c0 f0       	breq	80005d06 <_dtoa_r+0x5a>
80005cea:	72 1a       	ld.w	r10,r9[0x4]
80005cec:	91 1a       	st.w	r8[0x4],r10
80005cee:	30 1a       	mov	r10,1
80005cf0:	72 19       	ld.w	r9,r9[0x4]
80005cf2:	f4 09 09 49 	lsl	r9,r10,r9
80005cf6:	10 9b       	mov	r11,r8
80005cf8:	91 29       	st.w	r8[0x8],r9
80005cfa:	0e 9c       	mov	r12,r7
80005cfc:	e0 a0 0c ba 	rcall	80007670 <_Bfree>
80005d00:	6e 98       	ld.w	r8,r7[0x24]
80005d02:	30 09       	mov	r9,0
80005d04:	91 09       	st.w	r8[0x0],r9
80005d06:	40 28       	lddsp	r8,sp[0x8]
80005d08:	10 94       	mov	r4,r8
80005d0a:	58 08       	cp.w	r8,0
80005d0c:	c0 64       	brge	80005d18 <_dtoa_r+0x6c>
80005d0e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005d12:	50 28       	stdsp	sp[0x8],r8
80005d14:	30 18       	mov	r8,1
80005d16:	c0 28       	rjmp	80005d1a <_dtoa_r+0x6e>
80005d18:	30 08       	mov	r8,0
80005d1a:	8d 08       	st.w	r6[0x0],r8
80005d1c:	fc 1c 7f f0 	movh	r12,0x7ff0
80005d20:	40 26       	lddsp	r6,sp[0x8]
80005d22:	0c 98       	mov	r8,r6
80005d24:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005d28:	18 38       	cp.w	r8,r12
80005d2a:	c2 01       	brne	80005d6a <_dtoa_r+0xbe>
80005d2c:	e0 68 27 0f 	mov	r8,9999
80005d30:	41 5b       	lddsp	r11,sp[0x54]
80005d32:	97 08       	st.w	r11[0x0],r8
80005d34:	40 3a       	lddsp	r10,sp[0xc]
80005d36:	58 0a       	cp.w	r10,0
80005d38:	c0 71       	brne	80005d46 <_dtoa_r+0x9a>
80005d3a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005d3e:	c0 41       	brne	80005d46 <_dtoa_r+0x9a>
80005d40:	fe cc c5 94 	sub	r12,pc,-14956
80005d44:	c0 38       	rjmp	80005d4a <_dtoa_r+0x9e>
80005d46:	fe cc c5 8e 	sub	r12,pc,-14962
80005d4a:	41 29       	lddsp	r9,sp[0x48]
80005d4c:	58 09       	cp.w	r9,0
80005d4e:	e0 80 05 9a 	breq	80006882 <_dtoa_r+0xbd6>
80005d52:	f8 c8 ff fd 	sub	r8,r12,-3
80005d56:	f8 c9 ff f8 	sub	r9,r12,-8
80005d5a:	11 8b       	ld.ub	r11,r8[0x0]
80005d5c:	30 0a       	mov	r10,0
80005d5e:	41 25       	lddsp	r5,sp[0x48]
80005d60:	f4 0b 18 00 	cp.b	r11,r10
80005d64:	f2 08 17 10 	movne	r8,r9
80005d68:	c1 68       	rjmp	80005d94 <_dtoa_r+0xe8>
80005d6a:	fa ea 00 08 	ld.d	r10,sp[8]
80005d6e:	30 08       	mov	r8,0
80005d70:	fa eb 00 3c 	st.d	sp[60],r10
80005d74:	30 09       	mov	r9,0
80005d76:	e0 a0 14 e6 	rcall	80008742 <__avr32_f64_cmp_eq>
80005d7a:	c1 00       	breq	80005d9a <_dtoa_r+0xee>
80005d7c:	30 18       	mov	r8,1
80005d7e:	41 5a       	lddsp	r10,sp[0x54]
80005d80:	95 08       	st.w	r10[0x0],r8
80005d82:	fe cc c6 fa 	sub	r12,pc,-14598
80005d86:	41 29       	lddsp	r9,sp[0x48]
80005d88:	f8 08 00 08 	add	r8,r12,r8
80005d8c:	58 09       	cp.w	r9,0
80005d8e:	e0 80 05 7a 	breq	80006882 <_dtoa_r+0xbd6>
80005d92:	12 95       	mov	r5,r9
80005d94:	8b 08       	st.w	r5[0x0],r8
80005d96:	e0 8f 05 76 	bral	80006882 <_dtoa_r+0xbd6>
80005d9a:	fa c8 ff 9c 	sub	r8,sp,-100
80005d9e:	fa c9 ff a0 	sub	r9,sp,-96
80005da2:	fa ea 00 3c 	ld.d	r10,sp[60]
80005da6:	0e 9c       	mov	r12,r7
80005da8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005dac:	e0 a0 0c b4 	rcall	80007714 <__d2b>
80005db0:	18 93       	mov	r3,r12
80005db2:	58 05       	cp.w	r5,0
80005db4:	c0 d0       	breq	80005dce <_dtoa_r+0x122>
80005db6:	fa ea 00 3c 	ld.d	r10,sp[60]
80005dba:	30 04       	mov	r4,0
80005dbc:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005dc0:	ea c5 03 ff 	sub	r5,r5,1023
80005dc4:	10 9b       	mov	r11,r8
80005dc6:	51 74       	stdsp	sp[0x5c],r4
80005dc8:	ea 1b 3f f0 	orh	r11,0x3ff0
80005dcc:	c2 58       	rjmp	80005e16 <_dtoa_r+0x16a>
80005dce:	41 88       	lddsp	r8,sp[0x60]
80005dd0:	41 9c       	lddsp	r12,sp[0x64]
80005dd2:	10 0c       	add	r12,r8
80005dd4:	f8 c5 fb ce 	sub	r5,r12,-1074
80005dd8:	e0 45 00 20 	cp.w	r5,32
80005ddc:	e0 8a 00 0e 	brle	80005df8 <_dtoa_r+0x14c>
80005de0:	f8 cc fb ee 	sub	r12,r12,-1042
80005de4:	40 3b       	lddsp	r11,sp[0xc]
80005de6:	ea 08 11 40 	rsub	r8,r5,64
80005dea:	f6 0c 0a 4c 	lsr	r12,r11,r12
80005dee:	ec 08 09 46 	lsl	r6,r6,r8
80005df2:	0c 4c       	or	r12,r6
80005df4:	c0 78       	rjmp	80005e02 <_dtoa_r+0x156>
80005df6:	d7 03       	nop
80005df8:	ea 0c 11 20 	rsub	r12,r5,32
80005dfc:	40 3a       	lddsp	r10,sp[0xc]
80005dfe:	f4 0c 09 4c 	lsl	r12,r10,r12
80005e02:	e0 a0 14 2c 	rcall	8000865a <__avr32_u32_to_f64>
80005e06:	fc 18 fe 10 	movh	r8,0xfe10
80005e0a:	30 19       	mov	r9,1
80005e0c:	ea c5 04 33 	sub	r5,r5,1075
80005e10:	f0 0b 00 0b 	add	r11,r8,r11
80005e14:	51 79       	stdsp	sp[0x5c],r9
80005e16:	30 08       	mov	r8,0
80005e18:	fc 19 3f f8 	movh	r9,0x3ff8
80005e1c:	e0 a0 12 b4 	rcall	80008384 <__avr32_f64_sub>
80005e20:	e0 68 43 61 	mov	r8,17249
80005e24:	ea 18 63 6f 	orh	r8,0x636f
80005e28:	e0 69 87 a7 	mov	r9,34727
80005e2c:	ea 19 3f d2 	orh	r9,0x3fd2
80005e30:	e0 a0 11 be 	rcall	800081ac <__avr32_f64_mul>
80005e34:	e0 68 c8 b3 	mov	r8,51379
80005e38:	ea 18 8b 60 	orh	r8,0x8b60
80005e3c:	e0 69 8a 28 	mov	r9,35368
80005e40:	ea 19 3f c6 	orh	r9,0x3fc6
80005e44:	e0 a0 13 6e 	rcall	80008520 <__avr32_f64_add>
80005e48:	0a 9c       	mov	r12,r5
80005e4a:	14 90       	mov	r0,r10
80005e4c:	16 91       	mov	r1,r11
80005e4e:	e0 a0 14 0a 	rcall	80008662 <__avr32_s32_to_f64>
80005e52:	e0 68 79 fb 	mov	r8,31227
80005e56:	ea 18 50 9f 	orh	r8,0x509f
80005e5a:	e0 69 44 13 	mov	r9,17427
80005e5e:	ea 19 3f d3 	orh	r9,0x3fd3
80005e62:	e0 a0 11 a5 	rcall	800081ac <__avr32_f64_mul>
80005e66:	14 98       	mov	r8,r10
80005e68:	16 99       	mov	r9,r11
80005e6a:	00 9a       	mov	r10,r0
80005e6c:	02 9b       	mov	r11,r1
80005e6e:	e0 a0 13 59 	rcall	80008520 <__avr32_f64_add>
80005e72:	14 90       	mov	r0,r10
80005e74:	16 91       	mov	r1,r11
80005e76:	e0 a0 13 df 	rcall	80008634 <__avr32_f64_to_s32>
80005e7a:	30 08       	mov	r8,0
80005e7c:	18 96       	mov	r6,r12
80005e7e:	30 09       	mov	r9,0
80005e80:	00 9a       	mov	r10,r0
80005e82:	02 9b       	mov	r11,r1
80005e84:	e0 a0 14 a6 	rcall	800087d0 <__avr32_f64_cmp_lt>
80005e88:	c0 c0       	breq	80005ea0 <_dtoa_r+0x1f4>
80005e8a:	0c 9c       	mov	r12,r6
80005e8c:	e0 a0 13 eb 	rcall	80008662 <__avr32_s32_to_f64>
80005e90:	14 98       	mov	r8,r10
80005e92:	16 99       	mov	r9,r11
80005e94:	00 9a       	mov	r10,r0
80005e96:	02 9b       	mov	r11,r1
80005e98:	e0 a0 14 55 	rcall	80008742 <__avr32_f64_cmp_eq>
80005e9c:	f7 b6 00 01 	subeq	r6,1
80005ea0:	59 66       	cp.w	r6,22
80005ea2:	e0 88 00 05 	brls	80005eac <_dtoa_r+0x200>
80005ea6:	30 18       	mov	r8,1
80005ea8:	51 48       	stdsp	sp[0x50],r8
80005eaa:	c1 38       	rjmp	80005ed0 <_dtoa_r+0x224>
80005eac:	fe c8 c6 44 	sub	r8,pc,-14780
80005eb0:	fa ea 00 3c 	ld.d	r10,sp[60]
80005eb4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005eb8:	e0 a0 14 8c 	rcall	800087d0 <__avr32_f64_cmp_lt>
80005ebc:	f9 b4 00 00 	moveq	r4,0
80005ec0:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005ec4:	f7 b6 01 01 	subne	r6,1
80005ec8:	f9 bc 01 00 	movne	r12,0
80005ecc:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005ed0:	41 90       	lddsp	r0,sp[0x64]
80005ed2:	20 10       	sub	r0,1
80005ed4:	0a 10       	sub	r0,r5
80005ed6:	c0 46       	brmi	80005ede <_dtoa_r+0x232>
80005ed8:	50 40       	stdsp	sp[0x10],r0
80005eda:	30 00       	mov	r0,0
80005edc:	c0 48       	rjmp	80005ee4 <_dtoa_r+0x238>
80005ede:	30 0b       	mov	r11,0
80005ee0:	5c 30       	neg	r0
80005ee2:	50 4b       	stdsp	sp[0x10],r11
80005ee4:	ec 02 11 00 	rsub	r2,r6,0
80005ee8:	58 06       	cp.w	r6,0
80005eea:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005eee:	f5 d6 e4 0a 	addge	r10,r10,r6
80005ef2:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005ef6:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005efa:	f9 b2 04 00 	movge	r2,0
80005efe:	e1 d6 e5 10 	sublt	r0,r0,r6
80005f02:	f9 b9 05 00 	movlt	r9,0
80005f06:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005f0a:	40 c8       	lddsp	r8,sp[0x30]
80005f0c:	58 98       	cp.w	r8,9
80005f0e:	e0 8b 00 20 	brhi	80005f4e <_dtoa_r+0x2a2>
80005f12:	58 58       	cp.w	r8,5
80005f14:	f9 b4 0a 01 	movle	r4,1
80005f18:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005f1c:	f7 b5 09 04 	subgt	r5,4
80005f20:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005f24:	f9 b4 09 00 	movgt	r4,0
80005f28:	40 cc       	lddsp	r12,sp[0x30]
80005f2a:	58 3c       	cp.w	r12,3
80005f2c:	c2 d0       	breq	80005f86 <_dtoa_r+0x2da>
80005f2e:	e0 89 00 05 	brgt	80005f38 <_dtoa_r+0x28c>
80005f32:	58 2c       	cp.w	r12,2
80005f34:	c1 01       	brne	80005f54 <_dtoa_r+0x2a8>
80005f36:	c1 88       	rjmp	80005f66 <_dtoa_r+0x2ba>
80005f38:	40 cb       	lddsp	r11,sp[0x30]
80005f3a:	58 4b       	cp.w	r11,4
80005f3c:	c0 60       	breq	80005f48 <_dtoa_r+0x29c>
80005f3e:	58 5b       	cp.w	r11,5
80005f40:	c0 a1       	brne	80005f54 <_dtoa_r+0x2a8>
80005f42:	30 1a       	mov	r10,1
80005f44:	50 da       	stdsp	sp[0x34],r10
80005f46:	c2 28       	rjmp	80005f8a <_dtoa_r+0x2de>
80005f48:	30 19       	mov	r9,1
80005f4a:	50 d9       	stdsp	sp[0x34],r9
80005f4c:	c0 f8       	rjmp	80005f6a <_dtoa_r+0x2be>
80005f4e:	30 08       	mov	r8,0
80005f50:	30 14       	mov	r4,1
80005f52:	50 c8       	stdsp	sp[0x30],r8
80005f54:	3f f5       	mov	r5,-1
80005f56:	30 1c       	mov	r12,1
80005f58:	30 0b       	mov	r11,0
80005f5a:	50 95       	stdsp	sp[0x24],r5
80005f5c:	50 dc       	stdsp	sp[0x34],r12
80005f5e:	0a 91       	mov	r1,r5
80005f60:	31 28       	mov	r8,18
80005f62:	50 eb       	stdsp	sp[0x38],r11
80005f64:	c2 08       	rjmp	80005fa4 <_dtoa_r+0x2f8>
80005f66:	30 0a       	mov	r10,0
80005f68:	50 da       	stdsp	sp[0x34],r10
80005f6a:	40 e9       	lddsp	r9,sp[0x38]
80005f6c:	58 09       	cp.w	r9,0
80005f6e:	e0 89 00 07 	brgt	80005f7c <_dtoa_r+0x2d0>
80005f72:	30 18       	mov	r8,1
80005f74:	50 98       	stdsp	sp[0x24],r8
80005f76:	10 91       	mov	r1,r8
80005f78:	50 e8       	stdsp	sp[0x38],r8
80005f7a:	c1 58       	rjmp	80005fa4 <_dtoa_r+0x2f8>
80005f7c:	40 e5       	lddsp	r5,sp[0x38]
80005f7e:	50 95       	stdsp	sp[0x24],r5
80005f80:	0a 91       	mov	r1,r5
80005f82:	0a 98       	mov	r8,r5
80005f84:	c1 08       	rjmp	80005fa4 <_dtoa_r+0x2f8>
80005f86:	30 0c       	mov	r12,0
80005f88:	50 dc       	stdsp	sp[0x34],r12
80005f8a:	40 eb       	lddsp	r11,sp[0x38]
80005f8c:	ec 0b 00 0b 	add	r11,r6,r11
80005f90:	50 9b       	stdsp	sp[0x24],r11
80005f92:	16 98       	mov	r8,r11
80005f94:	2f f8       	sub	r8,-1
80005f96:	58 08       	cp.w	r8,0
80005f98:	e0 89 00 05 	brgt	80005fa2 <_dtoa_r+0x2f6>
80005f9c:	10 91       	mov	r1,r8
80005f9e:	30 18       	mov	r8,1
80005fa0:	c0 28       	rjmp	80005fa4 <_dtoa_r+0x2f8>
80005fa2:	10 91       	mov	r1,r8
80005fa4:	30 09       	mov	r9,0
80005fa6:	6e 9a       	ld.w	r10,r7[0x24]
80005fa8:	95 19       	st.w	r10[0x4],r9
80005faa:	30 49       	mov	r9,4
80005fac:	c0 68       	rjmp	80005fb8 <_dtoa_r+0x30c>
80005fae:	d7 03       	nop
80005fb0:	6a 1a       	ld.w	r10,r5[0x4]
80005fb2:	a1 79       	lsl	r9,0x1
80005fb4:	2f fa       	sub	r10,-1
80005fb6:	8b 1a       	st.w	r5[0x4],r10
80005fb8:	6e 95       	ld.w	r5,r7[0x24]
80005fba:	f2 ca ff ec 	sub	r10,r9,-20
80005fbe:	10 3a       	cp.w	r10,r8
80005fc0:	fe 98 ff f8 	brls	80005fb0 <_dtoa_r+0x304>
80005fc4:	6a 1b       	ld.w	r11,r5[0x4]
80005fc6:	0e 9c       	mov	r12,r7
80005fc8:	e0 a0 0b 6e 	rcall	800076a4 <_Balloc>
80005fcc:	58 e1       	cp.w	r1,14
80005fce:	5f 88       	srls	r8
80005fd0:	8b 0c       	st.w	r5[0x0],r12
80005fd2:	f1 e4 00 04 	and	r4,r8,r4
80005fd6:	6e 98       	ld.w	r8,r7[0x24]
80005fd8:	70 08       	ld.w	r8,r8[0x0]
80005fda:	50 88       	stdsp	sp[0x20],r8
80005fdc:	e0 80 01 82 	breq	800062e0 <_dtoa_r+0x634>
80005fe0:	58 06       	cp.w	r6,0
80005fe2:	e0 8a 00 43 	brle	80006068 <_dtoa_r+0x3bc>
80005fe6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005fea:	fe c8 c7 82 	sub	r8,pc,-14462
80005fee:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005ff2:	fa e5 00 18 	st.d	sp[24],r4
80005ff6:	ec 04 14 04 	asr	r4,r6,0x4
80005ffa:	ed b4 00 04 	bld	r4,0x4
80005ffe:	c0 30       	breq	80006004 <_dtoa_r+0x358>
80006000:	30 25       	mov	r5,2
80006002:	c1 08       	rjmp	80006022 <_dtoa_r+0x376>
80006004:	fe c8 c6 d4 	sub	r8,pc,-14636
80006008:	f0 e8 00 20 	ld.d	r8,r8[32]
8000600c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006010:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006014:	e0 a0 14 12 	rcall	80008838 <__avr32_f64_div>
80006018:	30 35       	mov	r5,3
8000601a:	14 98       	mov	r8,r10
8000601c:	16 99       	mov	r9,r11
8000601e:	fa e9 00 08 	st.d	sp[8],r8
80006022:	fe cc c6 f2 	sub	r12,pc,-14606
80006026:	50 a3       	stdsp	sp[0x28],r3
80006028:	0c 93       	mov	r3,r6
8000602a:	18 96       	mov	r6,r12
8000602c:	c0 f8       	rjmp	8000604a <_dtoa_r+0x39e>
8000602e:	fa ea 00 18 	ld.d	r10,sp[24]
80006032:	ed b4 00 00 	bld	r4,0x0
80006036:	c0 81       	brne	80006046 <_dtoa_r+0x39a>
80006038:	ec e8 00 00 	ld.d	r8,r6[0]
8000603c:	2f f5       	sub	r5,-1
8000603e:	e0 a0 10 b7 	rcall	800081ac <__avr32_f64_mul>
80006042:	fa eb 00 18 	st.d	sp[24],r10
80006046:	a1 54       	asr	r4,0x1
80006048:	2f 86       	sub	r6,-8
8000604a:	58 04       	cp.w	r4,0
8000604c:	cf 11       	brne	8000602e <_dtoa_r+0x382>
8000604e:	fa e8 00 18 	ld.d	r8,sp[24]
80006052:	fa ea 00 08 	ld.d	r10,sp[8]
80006056:	06 96       	mov	r6,r3
80006058:	e0 a0 13 f0 	rcall	80008838 <__avr32_f64_div>
8000605c:	40 a3       	lddsp	r3,sp[0x28]
8000605e:	14 98       	mov	r8,r10
80006060:	16 99       	mov	r9,r11
80006062:	fa e9 00 08 	st.d	sp[8],r8
80006066:	c2 f8       	rjmp	800060c4 <_dtoa_r+0x418>
80006068:	ec 08 11 00 	rsub	r8,r6,0
8000606c:	c0 31       	brne	80006072 <_dtoa_r+0x3c6>
8000606e:	30 25       	mov	r5,2
80006070:	c2 a8       	rjmp	800060c4 <_dtoa_r+0x418>
80006072:	fe cc c7 42 	sub	r12,pc,-14526
80006076:	f0 04 14 04 	asr	r4,r8,0x4
8000607a:	50 1c       	stdsp	sp[0x4],r12
8000607c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006080:	fe c9 c8 18 	sub	r9,pc,-14312
80006084:	fa ea 00 3c 	ld.d	r10,sp[60]
80006088:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000608c:	e0 a0 10 90 	rcall	800081ac <__avr32_f64_mul>
80006090:	40 1c       	lddsp	r12,sp[0x4]
80006092:	50 63       	stdsp	sp[0x18],r3
80006094:	30 25       	mov	r5,2
80006096:	0c 93       	mov	r3,r6
80006098:	fa eb 00 08 	st.d	sp[8],r10
8000609c:	18 96       	mov	r6,r12
8000609e:	c0 f8       	rjmp	800060bc <_dtoa_r+0x410>
800060a0:	fa ea 00 08 	ld.d	r10,sp[8]
800060a4:	ed b4 00 00 	bld	r4,0x0
800060a8:	c0 81       	brne	800060b8 <_dtoa_r+0x40c>
800060aa:	ec e8 00 00 	ld.d	r8,r6[0]
800060ae:	2f f5       	sub	r5,-1
800060b0:	e0 a0 10 7e 	rcall	800081ac <__avr32_f64_mul>
800060b4:	fa eb 00 08 	st.d	sp[8],r10
800060b8:	a1 54       	asr	r4,0x1
800060ba:	2f 86       	sub	r6,-8
800060bc:	58 04       	cp.w	r4,0
800060be:	cf 11       	brne	800060a0 <_dtoa_r+0x3f4>
800060c0:	06 96       	mov	r6,r3
800060c2:	40 63       	lddsp	r3,sp[0x18]
800060c4:	41 4a       	lddsp	r10,sp[0x50]
800060c6:	58 0a       	cp.w	r10,0
800060c8:	c2 a0       	breq	8000611c <_dtoa_r+0x470>
800060ca:	fa e8 00 08 	ld.d	r8,sp[8]
800060ce:	58 01       	cp.w	r1,0
800060d0:	5f 94       	srgt	r4
800060d2:	fa e9 00 18 	st.d	sp[24],r8
800060d6:	30 08       	mov	r8,0
800060d8:	fc 19 3f f0 	movh	r9,0x3ff0
800060dc:	fa ea 00 18 	ld.d	r10,sp[24]
800060e0:	e0 a0 13 78 	rcall	800087d0 <__avr32_f64_cmp_lt>
800060e4:	f9 bc 00 00 	moveq	r12,0
800060e8:	f9 bc 01 01 	movne	r12,1
800060ec:	e9 ec 00 0c 	and	r12,r4,r12
800060f0:	c1 60       	breq	8000611c <_dtoa_r+0x470>
800060f2:	40 98       	lddsp	r8,sp[0x24]
800060f4:	58 08       	cp.w	r8,0
800060f6:	e0 8a 00 f1 	brle	800062d8 <_dtoa_r+0x62c>
800060fa:	30 08       	mov	r8,0
800060fc:	fc 19 40 24 	movh	r9,0x4024
80006100:	ec c4 00 01 	sub	r4,r6,1
80006104:	fa ea 00 18 	ld.d	r10,sp[24]
80006108:	2f f5       	sub	r5,-1
8000610a:	50 64       	stdsp	sp[0x18],r4
8000610c:	e0 a0 10 50 	rcall	800081ac <__avr32_f64_mul>
80006110:	40 94       	lddsp	r4,sp[0x24]
80006112:	14 98       	mov	r8,r10
80006114:	16 99       	mov	r9,r11
80006116:	fa e9 00 08 	st.d	sp[8],r8
8000611a:	c0 38       	rjmp	80006120 <_dtoa_r+0x474>
8000611c:	50 66       	stdsp	sp[0x18],r6
8000611e:	02 94       	mov	r4,r1
80006120:	0a 9c       	mov	r12,r5
80006122:	e0 a0 12 a0 	rcall	80008662 <__avr32_s32_to_f64>
80006126:	fa e8 00 08 	ld.d	r8,sp[8]
8000612a:	e0 a0 10 41 	rcall	800081ac <__avr32_f64_mul>
8000612e:	30 08       	mov	r8,0
80006130:	fc 19 40 1c 	movh	r9,0x401c
80006134:	e0 a0 11 f6 	rcall	80008520 <__avr32_f64_add>
80006138:	14 98       	mov	r8,r10
8000613a:	16 99       	mov	r9,r11
8000613c:	fa e9 00 28 	st.d	sp[40],r8
80006140:	fc 18 fc c0 	movh	r8,0xfcc0
80006144:	40 a5       	lddsp	r5,sp[0x28]
80006146:	10 05       	add	r5,r8
80006148:	50 a5       	stdsp	sp[0x28],r5
8000614a:	58 04       	cp.w	r4,0
8000614c:	c2 11       	brne	8000618e <_dtoa_r+0x4e2>
8000614e:	fa ea 00 08 	ld.d	r10,sp[8]
80006152:	30 08       	mov	r8,0
80006154:	fc 19 40 14 	movh	r9,0x4014
80006158:	e0 a0 11 16 	rcall	80008384 <__avr32_f64_sub>
8000615c:	40 bc       	lddsp	r12,sp[0x2c]
8000615e:	fa eb 00 08 	st.d	sp[8],r10
80006162:	14 98       	mov	r8,r10
80006164:	16 99       	mov	r9,r11
80006166:	18 9a       	mov	r10,r12
80006168:	0a 9b       	mov	r11,r5
8000616a:	e0 a0 13 33 	rcall	800087d0 <__avr32_f64_cmp_lt>
8000616e:	e0 81 02 54 	brne	80006616 <_dtoa_r+0x96a>
80006172:	0a 98       	mov	r8,r5
80006174:	40 b9       	lddsp	r9,sp[0x2c]
80006176:	ee 18 80 00 	eorh	r8,0x8000
8000617a:	fa ea 00 08 	ld.d	r10,sp[8]
8000617e:	10 95       	mov	r5,r8
80006180:	12 98       	mov	r8,r9
80006182:	0a 99       	mov	r9,r5
80006184:	e0 a0 13 26 	rcall	800087d0 <__avr32_f64_cmp_lt>
80006188:	e0 81 02 3e 	brne	80006604 <_dtoa_r+0x958>
8000618c:	ca 68       	rjmp	800062d8 <_dtoa_r+0x62c>
8000618e:	fe c9 c9 26 	sub	r9,pc,-14042
80006192:	e8 c8 00 01 	sub	r8,r4,1
80006196:	40 d5       	lddsp	r5,sp[0x34]
80006198:	58 05       	cp.w	r5,0
8000619a:	c4 f0       	breq	80006238 <_dtoa_r+0x58c>
8000619c:	30 0c       	mov	r12,0
8000619e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800061a2:	51 3c       	stdsp	sp[0x4c],r12
800061a4:	30 0a       	mov	r10,0
800061a6:	fc 1b 3f e0 	movh	r11,0x3fe0
800061aa:	e0 a0 13 47 	rcall	80008838 <__avr32_f64_div>
800061ae:	fa e8 00 28 	ld.d	r8,sp[40]
800061b2:	40 85       	lddsp	r5,sp[0x20]
800061b4:	e0 a0 10 e8 	rcall	80008384 <__avr32_f64_sub>
800061b8:	fa eb 00 28 	st.d	sp[40],r10
800061bc:	fa ea 00 08 	ld.d	r10,sp[8]
800061c0:	e0 a0 12 3a 	rcall	80008634 <__avr32_f64_to_s32>
800061c4:	51 6c       	stdsp	sp[0x58],r12
800061c6:	e0 a0 12 4e 	rcall	80008662 <__avr32_s32_to_f64>
800061ca:	14 98       	mov	r8,r10
800061cc:	16 99       	mov	r9,r11
800061ce:	fa ea 00 08 	ld.d	r10,sp[8]
800061d2:	e0 a0 10 d9 	rcall	80008384 <__avr32_f64_sub>
800061d6:	fa eb 00 08 	st.d	sp[8],r10
800061da:	41 68       	lddsp	r8,sp[0x58]
800061dc:	2d 08       	sub	r8,-48
800061de:	0a c8       	st.b	r5++,r8
800061e0:	41 39       	lddsp	r9,sp[0x4c]
800061e2:	2f f9       	sub	r9,-1
800061e4:	51 39       	stdsp	sp[0x4c],r9
800061e6:	fa e8 00 28 	ld.d	r8,sp[40]
800061ea:	e0 a0 12 f3 	rcall	800087d0 <__avr32_f64_cmp_lt>
800061ee:	e0 81 03 39 	brne	80006860 <_dtoa_r+0xbb4>
800061f2:	fa e8 00 08 	ld.d	r8,sp[8]
800061f6:	30 0a       	mov	r10,0
800061f8:	fc 1b 3f f0 	movh	r11,0x3ff0
800061fc:	e0 a0 10 c4 	rcall	80008384 <__avr32_f64_sub>
80006200:	fa e8 00 28 	ld.d	r8,sp[40]
80006204:	e0 a0 12 e6 	rcall	800087d0 <__avr32_f64_cmp_lt>
80006208:	fa ea 00 28 	ld.d	r10,sp[40]
8000620c:	30 08       	mov	r8,0
8000620e:	fc 19 40 24 	movh	r9,0x4024
80006212:	e0 81 00 da 	brne	800063c6 <_dtoa_r+0x71a>
80006216:	41 3c       	lddsp	r12,sp[0x4c]
80006218:	08 3c       	cp.w	r12,r4
8000621a:	c5 f4       	brge	800062d8 <_dtoa_r+0x62c>
8000621c:	e0 a0 0f c8 	rcall	800081ac <__avr32_f64_mul>
80006220:	30 08       	mov	r8,0
80006222:	fa eb 00 28 	st.d	sp[40],r10
80006226:	fc 19 40 24 	movh	r9,0x4024
8000622a:	fa ea 00 08 	ld.d	r10,sp[8]
8000622e:	e0 a0 0f bf 	rcall	800081ac <__avr32_f64_mul>
80006232:	fa eb 00 08 	st.d	sp[8],r10
80006236:	cc 3b       	rjmp	800061bc <_dtoa_r+0x510>
80006238:	40 85       	lddsp	r5,sp[0x20]
8000623a:	08 05       	add	r5,r4
8000623c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006240:	51 35       	stdsp	sp[0x4c],r5
80006242:	fa e8 00 28 	ld.d	r8,sp[40]
80006246:	40 85       	lddsp	r5,sp[0x20]
80006248:	e0 a0 0f b2 	rcall	800081ac <__avr32_f64_mul>
8000624c:	fa eb 00 28 	st.d	sp[40],r10
80006250:	fa ea 00 08 	ld.d	r10,sp[8]
80006254:	e0 a0 11 f0 	rcall	80008634 <__avr32_f64_to_s32>
80006258:	51 6c       	stdsp	sp[0x58],r12
8000625a:	e0 a0 12 04 	rcall	80008662 <__avr32_s32_to_f64>
8000625e:	14 98       	mov	r8,r10
80006260:	16 99       	mov	r9,r11
80006262:	fa ea 00 08 	ld.d	r10,sp[8]
80006266:	e0 a0 10 8f 	rcall	80008384 <__avr32_f64_sub>
8000626a:	fa eb 00 08 	st.d	sp[8],r10
8000626e:	41 68       	lddsp	r8,sp[0x58]
80006270:	2d 08       	sub	r8,-48
80006272:	0a c8       	st.b	r5++,r8
80006274:	41 3c       	lddsp	r12,sp[0x4c]
80006276:	18 35       	cp.w	r5,r12
80006278:	c2 81       	brne	800062c8 <_dtoa_r+0x61c>
8000627a:	30 08       	mov	r8,0
8000627c:	fc 19 3f e0 	movh	r9,0x3fe0
80006280:	fa ea 00 28 	ld.d	r10,sp[40]
80006284:	e0 a0 11 4e 	rcall	80008520 <__avr32_f64_add>
80006288:	40 85       	lddsp	r5,sp[0x20]
8000628a:	fa e8 00 08 	ld.d	r8,sp[8]
8000628e:	08 05       	add	r5,r4
80006290:	e0 a0 12 a0 	rcall	800087d0 <__avr32_f64_cmp_lt>
80006294:	e0 81 00 99 	brne	800063c6 <_dtoa_r+0x71a>
80006298:	fa e8 00 28 	ld.d	r8,sp[40]
8000629c:	30 0a       	mov	r10,0
8000629e:	fc 1b 3f e0 	movh	r11,0x3fe0
800062a2:	e0 a0 10 71 	rcall	80008384 <__avr32_f64_sub>
800062a6:	14 98       	mov	r8,r10
800062a8:	16 99       	mov	r9,r11
800062aa:	fa ea 00 08 	ld.d	r10,sp[8]
800062ae:	e0 a0 12 91 	rcall	800087d0 <__avr32_f64_cmp_lt>
800062b2:	c1 30       	breq	800062d8 <_dtoa_r+0x62c>
800062b4:	33 09       	mov	r9,48
800062b6:	0a 98       	mov	r8,r5
800062b8:	11 7a       	ld.ub	r10,--r8
800062ba:	f2 0a 18 00 	cp.b	r10,r9
800062be:	e0 81 02 d1 	brne	80006860 <_dtoa_r+0xbb4>
800062c2:	10 95       	mov	r5,r8
800062c4:	cf 9b       	rjmp	800062b6 <_dtoa_r+0x60a>
800062c6:	d7 03       	nop
800062c8:	30 08       	mov	r8,0
800062ca:	fc 19 40 24 	movh	r9,0x4024
800062ce:	e0 a0 0f 6f 	rcall	800081ac <__avr32_f64_mul>
800062d2:	fa eb 00 08 	st.d	sp[8],r10
800062d6:	cb db       	rjmp	80006250 <_dtoa_r+0x5a4>
800062d8:	fa ea 00 3c 	ld.d	r10,sp[60]
800062dc:	fa eb 00 08 	st.d	sp[8],r10
800062e0:	58 e6       	cp.w	r6,14
800062e2:	5f ab       	srle	r11
800062e4:	41 8a       	lddsp	r10,sp[0x60]
800062e6:	30 08       	mov	r8,0
800062e8:	f4 09 11 ff 	rsub	r9,r10,-1
800062ec:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800062f0:	f0 09 18 00 	cp.b	r9,r8
800062f4:	e0 80 00 82 	breq	800063f8 <_dtoa_r+0x74c>
800062f8:	40 ea       	lddsp	r10,sp[0x38]
800062fa:	58 01       	cp.w	r1,0
800062fc:	5f a9       	srle	r9
800062fe:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006302:	fe ca ca 9a 	sub	r10,pc,-13670
80006306:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000630a:	fa e5 00 10 	st.d	sp[16],r4
8000630e:	f0 09 18 00 	cp.b	r9,r8
80006312:	c1 40       	breq	8000633a <_dtoa_r+0x68e>
80006314:	58 01       	cp.w	r1,0
80006316:	e0 81 01 77 	brne	80006604 <_dtoa_r+0x958>
8000631a:	30 08       	mov	r8,0
8000631c:	fc 19 40 14 	movh	r9,0x4014
80006320:	08 9a       	mov	r10,r4
80006322:	0a 9b       	mov	r11,r5
80006324:	e0 a0 0f 44 	rcall	800081ac <__avr32_f64_mul>
80006328:	fa e8 00 08 	ld.d	r8,sp[8]
8000632c:	e0 a0 12 1e 	rcall	80008768 <__avr32_f64_cmp_ge>
80006330:	e0 81 01 6a 	brne	80006604 <_dtoa_r+0x958>
80006334:	02 92       	mov	r2,r1
80006336:	e0 8f 01 72 	bral	8000661a <_dtoa_r+0x96e>
8000633a:	40 85       	lddsp	r5,sp[0x20]
8000633c:	30 14       	mov	r4,1
8000633e:	fa e8 00 10 	ld.d	r8,sp[16]
80006342:	fa ea 00 08 	ld.d	r10,sp[8]
80006346:	e0 a0 12 79 	rcall	80008838 <__avr32_f64_div>
8000634a:	e0 a0 11 75 	rcall	80008634 <__avr32_f64_to_s32>
8000634e:	18 92       	mov	r2,r12
80006350:	e0 a0 11 89 	rcall	80008662 <__avr32_s32_to_f64>
80006354:	fa e8 00 10 	ld.d	r8,sp[16]
80006358:	e0 a0 0f 2a 	rcall	800081ac <__avr32_f64_mul>
8000635c:	14 98       	mov	r8,r10
8000635e:	16 99       	mov	r9,r11
80006360:	fa ea 00 08 	ld.d	r10,sp[8]
80006364:	e0 a0 10 10 	rcall	80008384 <__avr32_f64_sub>
80006368:	fa eb 00 08 	st.d	sp[8],r10
8000636c:	e4 c8 ff d0 	sub	r8,r2,-48
80006370:	0a c8       	st.b	r5++,r8
80006372:	fc 19 40 24 	movh	r9,0x4024
80006376:	30 08       	mov	r8,0
80006378:	02 34       	cp.w	r4,r1
8000637a:	c3 31       	brne	800063e0 <_dtoa_r+0x734>
8000637c:	fa e8 00 08 	ld.d	r8,sp[8]
80006380:	e0 a0 10 d0 	rcall	80008520 <__avr32_f64_add>
80006384:	16 91       	mov	r1,r11
80006386:	14 90       	mov	r0,r10
80006388:	14 98       	mov	r8,r10
8000638a:	02 99       	mov	r9,r1
8000638c:	fa ea 00 10 	ld.d	r10,sp[16]
80006390:	e0 a0 12 20 	rcall	800087d0 <__avr32_f64_cmp_lt>
80006394:	c1 a1       	brne	800063c8 <_dtoa_r+0x71c>
80006396:	fa e8 00 10 	ld.d	r8,sp[16]
8000639a:	00 9a       	mov	r10,r0
8000639c:	02 9b       	mov	r11,r1
8000639e:	e0 a0 11 d2 	rcall	80008742 <__avr32_f64_cmp_eq>
800063a2:	e0 80 02 5e 	breq	8000685e <_dtoa_r+0xbb2>
800063a6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800063aa:	c0 f1       	brne	800063c8 <_dtoa_r+0x71c>
800063ac:	e0 8f 02 59 	bral	8000685e <_dtoa_r+0xbb2>
800063b0:	40 8a       	lddsp	r10,sp[0x20]
800063b2:	14 38       	cp.w	r8,r10
800063b4:	c0 30       	breq	800063ba <_dtoa_r+0x70e>
800063b6:	10 95       	mov	r5,r8
800063b8:	c0 98       	rjmp	800063ca <_dtoa_r+0x71e>
800063ba:	33 08       	mov	r8,48
800063bc:	40 89       	lddsp	r9,sp[0x20]
800063be:	2f f6       	sub	r6,-1
800063c0:	b2 88       	st.b	r9[0x0],r8
800063c2:	40 88       	lddsp	r8,sp[0x20]
800063c4:	c0 88       	rjmp	800063d4 <_dtoa_r+0x728>
800063c6:	40 66       	lddsp	r6,sp[0x18]
800063c8:	33 99       	mov	r9,57
800063ca:	0a 98       	mov	r8,r5
800063cc:	11 7a       	ld.ub	r10,--r8
800063ce:	f2 0a 18 00 	cp.b	r10,r9
800063d2:	ce f0       	breq	800063b0 <_dtoa_r+0x704>
800063d4:	50 66       	stdsp	sp[0x18],r6
800063d6:	11 89       	ld.ub	r9,r8[0x0]
800063d8:	2f f9       	sub	r9,-1
800063da:	b0 89       	st.b	r8[0x0],r9
800063dc:	e0 8f 02 42 	bral	80006860 <_dtoa_r+0xbb4>
800063e0:	e0 a0 0e e6 	rcall	800081ac <__avr32_f64_mul>
800063e4:	2f f4       	sub	r4,-1
800063e6:	fa eb 00 08 	st.d	sp[8],r10
800063ea:	30 08       	mov	r8,0
800063ec:	30 09       	mov	r9,0
800063ee:	e0 a0 11 aa 	rcall	80008742 <__avr32_f64_cmp_eq>
800063f2:	ca 60       	breq	8000633e <_dtoa_r+0x692>
800063f4:	e0 8f 02 35 	bral	8000685e <_dtoa_r+0xbb2>
800063f8:	40 d8       	lddsp	r8,sp[0x34]
800063fa:	58 08       	cp.w	r8,0
800063fc:	c0 51       	brne	80006406 <_dtoa_r+0x75a>
800063fe:	04 98       	mov	r8,r2
80006400:	00 95       	mov	r5,r0
80006402:	40 d4       	lddsp	r4,sp[0x34]
80006404:	c3 78       	rjmp	80006472 <_dtoa_r+0x7c6>
80006406:	40 c5       	lddsp	r5,sp[0x30]
80006408:	58 15       	cp.w	r5,1
8000640a:	e0 89 00 0f 	brgt	80006428 <_dtoa_r+0x77c>
8000640e:	41 74       	lddsp	r4,sp[0x5c]
80006410:	58 04       	cp.w	r4,0
80006412:	c0 40       	breq	8000641a <_dtoa_r+0x76e>
80006414:	f4 c9 fb cd 	sub	r9,r10,-1075
80006418:	c0 48       	rjmp	80006420 <_dtoa_r+0x774>
8000641a:	41 99       	lddsp	r9,sp[0x64]
8000641c:	f2 09 11 36 	rsub	r9,r9,54
80006420:	04 98       	mov	r8,r2
80006422:	00 95       	mov	r5,r0
80006424:	c1 c8       	rjmp	8000645c <_dtoa_r+0x7b0>
80006426:	d7 03       	nop
80006428:	e2 c8 00 01 	sub	r8,r1,1
8000642c:	58 01       	cp.w	r1,0
8000642e:	e0 05 17 40 	movge	r5,r0
80006432:	e2 09 17 40 	movge	r9,r1
80006436:	e1 d1 e5 15 	sublt	r5,r0,r1
8000643a:	f9 b9 05 00 	movlt	r9,0
8000643e:	10 32       	cp.w	r2,r8
80006440:	e5 d8 e4 18 	subge	r8,r2,r8
80006444:	f1 d2 e5 18 	sublt	r8,r8,r2
80006448:	e5 d8 e5 02 	addlt	r2,r2,r8
8000644c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006450:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006454:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006458:	f9 b8 05 00 	movlt	r8,0
8000645c:	40 4b       	lddsp	r11,sp[0x10]
8000645e:	12 0b       	add	r11,r9
80006460:	50 08       	stdsp	sp[0x0],r8
80006462:	50 4b       	stdsp	sp[0x10],r11
80006464:	12 00       	add	r0,r9
80006466:	30 1b       	mov	r11,1
80006468:	0e 9c       	mov	r12,r7
8000646a:	e0 a0 0a d1 	rcall	80007a0c <__i2b>
8000646e:	40 08       	lddsp	r8,sp[0x0]
80006470:	18 94       	mov	r4,r12
80006472:	40 4a       	lddsp	r10,sp[0x10]
80006474:	58 05       	cp.w	r5,0
80006476:	5f 99       	srgt	r9
80006478:	58 0a       	cp.w	r10,0
8000647a:	5f 9a       	srgt	r10
8000647c:	f5 e9 00 09 	and	r9,r10,r9
80006480:	c0 80       	breq	80006490 <_dtoa_r+0x7e4>
80006482:	40 4c       	lddsp	r12,sp[0x10]
80006484:	f8 05 0d 49 	min	r9,r12,r5
80006488:	12 1c       	sub	r12,r9
8000648a:	12 10       	sub	r0,r9
8000648c:	50 4c       	stdsp	sp[0x10],r12
8000648e:	12 15       	sub	r5,r9
80006490:	58 02       	cp.w	r2,0
80006492:	e0 8a 00 27 	brle	800064e0 <_dtoa_r+0x834>
80006496:	40 db       	lddsp	r11,sp[0x34]
80006498:	58 0b       	cp.w	r11,0
8000649a:	c1 d0       	breq	800064d4 <_dtoa_r+0x828>
8000649c:	58 08       	cp.w	r8,0
8000649e:	e0 8a 00 17 	brle	800064cc <_dtoa_r+0x820>
800064a2:	10 9a       	mov	r10,r8
800064a4:	50 08       	stdsp	sp[0x0],r8
800064a6:	08 9b       	mov	r11,r4
800064a8:	0e 9c       	mov	r12,r7
800064aa:	e0 a0 0a f7 	rcall	80007a98 <__pow5mult>
800064ae:	06 9a       	mov	r10,r3
800064b0:	18 9b       	mov	r11,r12
800064b2:	18 94       	mov	r4,r12
800064b4:	0e 9c       	mov	r12,r7
800064b6:	e0 a0 0a 2b 	rcall	8000790c <__multiply>
800064ba:	18 99       	mov	r9,r12
800064bc:	06 9b       	mov	r11,r3
800064be:	50 19       	stdsp	sp[0x4],r9
800064c0:	0e 9c       	mov	r12,r7
800064c2:	e0 a0 08 d7 	rcall	80007670 <_Bfree>
800064c6:	40 19       	lddsp	r9,sp[0x4]
800064c8:	40 08       	lddsp	r8,sp[0x0]
800064ca:	12 93       	mov	r3,r9
800064cc:	e4 08 01 0a 	sub	r10,r2,r8
800064d0:	c0 80       	breq	800064e0 <_dtoa_r+0x834>
800064d2:	c0 28       	rjmp	800064d6 <_dtoa_r+0x82a>
800064d4:	04 9a       	mov	r10,r2
800064d6:	06 9b       	mov	r11,r3
800064d8:	0e 9c       	mov	r12,r7
800064da:	e0 a0 0a df 	rcall	80007a98 <__pow5mult>
800064de:	18 93       	mov	r3,r12
800064e0:	30 1b       	mov	r11,1
800064e2:	0e 9c       	mov	r12,r7
800064e4:	e0 a0 0a 94 	rcall	80007a0c <__i2b>
800064e8:	41 1a       	lddsp	r10,sp[0x44]
800064ea:	18 92       	mov	r2,r12
800064ec:	58 0a       	cp.w	r10,0
800064ee:	e0 8a 00 07 	brle	800064fc <_dtoa_r+0x850>
800064f2:	18 9b       	mov	r11,r12
800064f4:	0e 9c       	mov	r12,r7
800064f6:	e0 a0 0a d1 	rcall	80007a98 <__pow5mult>
800064fa:	18 92       	mov	r2,r12
800064fc:	40 c9       	lddsp	r9,sp[0x30]
800064fe:	58 19       	cp.w	r9,1
80006500:	e0 89 00 14 	brgt	80006528 <_dtoa_r+0x87c>
80006504:	40 38       	lddsp	r8,sp[0xc]
80006506:	58 08       	cp.w	r8,0
80006508:	c1 01       	brne	80006528 <_dtoa_r+0x87c>
8000650a:	40 29       	lddsp	r9,sp[0x8]
8000650c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006510:	c0 c1       	brne	80006528 <_dtoa_r+0x87c>
80006512:	12 98       	mov	r8,r9
80006514:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006518:	c0 80       	breq	80006528 <_dtoa_r+0x87c>
8000651a:	40 4c       	lddsp	r12,sp[0x10]
8000651c:	30 1b       	mov	r11,1
8000651e:	2f fc       	sub	r12,-1
80006520:	2f f0       	sub	r0,-1
80006522:	50 4c       	stdsp	sp[0x10],r12
80006524:	50 6b       	stdsp	sp[0x18],r11
80006526:	c0 38       	rjmp	8000652c <_dtoa_r+0x880>
80006528:	30 0a       	mov	r10,0
8000652a:	50 6a       	stdsp	sp[0x18],r10
8000652c:	41 19       	lddsp	r9,sp[0x44]
8000652e:	58 09       	cp.w	r9,0
80006530:	c0 31       	brne	80006536 <_dtoa_r+0x88a>
80006532:	30 1c       	mov	r12,1
80006534:	c0 98       	rjmp	80006546 <_dtoa_r+0x89a>
80006536:	64 48       	ld.w	r8,r2[0x10]
80006538:	2f c8       	sub	r8,-4
8000653a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000653e:	e0 a0 08 08 	rcall	8000754e <__hi0bits>
80006542:	f8 0c 11 20 	rsub	r12,r12,32
80006546:	40 4b       	lddsp	r11,sp[0x10]
80006548:	f8 0b 00 08 	add	r8,r12,r11
8000654c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006550:	c0 c0       	breq	80006568 <_dtoa_r+0x8bc>
80006552:	f0 08 11 20 	rsub	r8,r8,32
80006556:	58 48       	cp.w	r8,4
80006558:	e0 8a 00 06 	brle	80006564 <_dtoa_r+0x8b8>
8000655c:	20 48       	sub	r8,4
8000655e:	10 0b       	add	r11,r8
80006560:	50 4b       	stdsp	sp[0x10],r11
80006562:	c0 78       	rjmp	80006570 <_dtoa_r+0x8c4>
80006564:	58 48       	cp.w	r8,4
80006566:	c0 70       	breq	80006574 <_dtoa_r+0x8c8>
80006568:	40 4a       	lddsp	r10,sp[0x10]
8000656a:	2e 48       	sub	r8,-28
8000656c:	10 0a       	add	r10,r8
8000656e:	50 4a       	stdsp	sp[0x10],r10
80006570:	10 00       	add	r0,r8
80006572:	10 05       	add	r5,r8
80006574:	58 00       	cp.w	r0,0
80006576:	e0 8a 00 08 	brle	80006586 <_dtoa_r+0x8da>
8000657a:	06 9b       	mov	r11,r3
8000657c:	00 9a       	mov	r10,r0
8000657e:	0e 9c       	mov	r12,r7
80006580:	e0 a0 09 82 	rcall	80007884 <__lshift>
80006584:	18 93       	mov	r3,r12
80006586:	40 49       	lddsp	r9,sp[0x10]
80006588:	58 09       	cp.w	r9,0
8000658a:	e0 8a 00 08 	brle	8000659a <_dtoa_r+0x8ee>
8000658e:	04 9b       	mov	r11,r2
80006590:	12 9a       	mov	r10,r9
80006592:	0e 9c       	mov	r12,r7
80006594:	e0 a0 09 78 	rcall	80007884 <__lshift>
80006598:	18 92       	mov	r2,r12
8000659a:	41 48       	lddsp	r8,sp[0x50]
8000659c:	58 08       	cp.w	r8,0
8000659e:	c1 b0       	breq	800065d4 <_dtoa_r+0x928>
800065a0:	04 9b       	mov	r11,r2
800065a2:	06 9c       	mov	r12,r3
800065a4:	e0 a0 08 4c 	rcall	8000763c <__mcmp>
800065a8:	c1 64       	brge	800065d4 <_dtoa_r+0x928>
800065aa:	06 9b       	mov	r11,r3
800065ac:	30 09       	mov	r9,0
800065ae:	30 aa       	mov	r10,10
800065b0:	0e 9c       	mov	r12,r7
800065b2:	e0 a0 0a 35 	rcall	80007a1c <__multadd>
800065b6:	20 16       	sub	r6,1
800065b8:	18 93       	mov	r3,r12
800065ba:	40 dc       	lddsp	r12,sp[0x34]
800065bc:	58 0c       	cp.w	r12,0
800065be:	c0 31       	brne	800065c4 <_dtoa_r+0x918>
800065c0:	40 91       	lddsp	r1,sp[0x24]
800065c2:	c0 98       	rjmp	800065d4 <_dtoa_r+0x928>
800065c4:	08 9b       	mov	r11,r4
800065c6:	40 91       	lddsp	r1,sp[0x24]
800065c8:	30 09       	mov	r9,0
800065ca:	30 aa       	mov	r10,10
800065cc:	0e 9c       	mov	r12,r7
800065ce:	e0 a0 0a 27 	rcall	80007a1c <__multadd>
800065d2:	18 94       	mov	r4,r12
800065d4:	58 01       	cp.w	r1,0
800065d6:	5f a9       	srle	r9
800065d8:	40 cb       	lddsp	r11,sp[0x30]
800065da:	58 2b       	cp.w	r11,2
800065dc:	5f 98       	srgt	r8
800065de:	f3 e8 00 08 	and	r8,r9,r8
800065e2:	c2 50       	breq	8000662c <_dtoa_r+0x980>
800065e4:	58 01       	cp.w	r1,0
800065e6:	c1 11       	brne	80006608 <_dtoa_r+0x95c>
800065e8:	04 9b       	mov	r11,r2
800065ea:	02 99       	mov	r9,r1
800065ec:	30 5a       	mov	r10,5
800065ee:	0e 9c       	mov	r12,r7
800065f0:	e0 a0 0a 16 	rcall	80007a1c <__multadd>
800065f4:	18 92       	mov	r2,r12
800065f6:	18 9b       	mov	r11,r12
800065f8:	06 9c       	mov	r12,r3
800065fa:	e0 a0 08 21 	rcall	8000763c <__mcmp>
800065fe:	e0 89 00 0f 	brgt	8000661c <_dtoa_r+0x970>
80006602:	c0 38       	rjmp	80006608 <_dtoa_r+0x95c>
80006604:	30 02       	mov	r2,0
80006606:	04 94       	mov	r4,r2
80006608:	40 ea       	lddsp	r10,sp[0x38]
8000660a:	30 09       	mov	r9,0
8000660c:	5c da       	com	r10
8000660e:	40 85       	lddsp	r5,sp[0x20]
80006610:	50 6a       	stdsp	sp[0x18],r10
80006612:	50 49       	stdsp	sp[0x10],r9
80006614:	c0 f9       	rjmp	80006832 <_dtoa_r+0xb86>
80006616:	08 92       	mov	r2,r4
80006618:	40 66       	lddsp	r6,sp[0x18]
8000661a:	04 94       	mov	r4,r2
8000661c:	2f f6       	sub	r6,-1
8000661e:	50 66       	stdsp	sp[0x18],r6
80006620:	33 18       	mov	r8,49
80006622:	40 85       	lddsp	r5,sp[0x20]
80006624:	0a c8       	st.b	r5++,r8
80006626:	30 08       	mov	r8,0
80006628:	50 48       	stdsp	sp[0x10],r8
8000662a:	c0 49       	rjmp	80006832 <_dtoa_r+0xb86>
8000662c:	40 dc       	lddsp	r12,sp[0x34]
8000662e:	58 0c       	cp.w	r12,0
80006630:	e0 80 00 b5 	breq	8000679a <_dtoa_r+0xaee>
80006634:	58 05       	cp.w	r5,0
80006636:	e0 8a 00 08 	brle	80006646 <_dtoa_r+0x99a>
8000663a:	08 9b       	mov	r11,r4
8000663c:	0a 9a       	mov	r10,r5
8000663e:	0e 9c       	mov	r12,r7
80006640:	e0 a0 09 22 	rcall	80007884 <__lshift>
80006644:	18 94       	mov	r4,r12
80006646:	40 6b       	lddsp	r11,sp[0x18]
80006648:	58 0b       	cp.w	r11,0
8000664a:	c0 31       	brne	80006650 <_dtoa_r+0x9a4>
8000664c:	08 9c       	mov	r12,r4
8000664e:	c1 38       	rjmp	80006674 <_dtoa_r+0x9c8>
80006650:	68 1b       	ld.w	r11,r4[0x4]
80006652:	0e 9c       	mov	r12,r7
80006654:	e0 a0 08 28 	rcall	800076a4 <_Balloc>
80006658:	68 4a       	ld.w	r10,r4[0x10]
8000665a:	18 95       	mov	r5,r12
8000665c:	e8 cb ff f4 	sub	r11,r4,-12
80006660:	2f ea       	sub	r10,-2
80006662:	2f 4c       	sub	r12,-12
80006664:	a3 6a       	lsl	r10,0x2
80006666:	fe b0 e8 3f 	rcall	800036e4 <memcpy>
8000666a:	0a 9b       	mov	r11,r5
8000666c:	30 1a       	mov	r10,1
8000666e:	0e 9c       	mov	r12,r7
80006670:	e0 a0 09 0a 	rcall	80007884 <__lshift>
80006674:	50 44       	stdsp	sp[0x10],r4
80006676:	40 3a       	lddsp	r10,sp[0xc]
80006678:	30 19       	mov	r9,1
8000667a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000667e:	18 94       	mov	r4,r12
80006680:	50 da       	stdsp	sp[0x34],r10
80006682:	40 85       	lddsp	r5,sp[0x20]
80006684:	50 99       	stdsp	sp[0x24],r9
80006686:	50 26       	stdsp	sp[0x8],r6
80006688:	50 e1       	stdsp	sp[0x38],r1
8000668a:	04 9b       	mov	r11,r2
8000668c:	06 9c       	mov	r12,r3
8000668e:	fe b0 fa 7f 	rcall	80005b8c <quorem>
80006692:	40 4b       	lddsp	r11,sp[0x10]
80006694:	f8 c0 ff d0 	sub	r0,r12,-48
80006698:	06 9c       	mov	r12,r3
8000669a:	e0 a0 07 d1 	rcall	8000763c <__mcmp>
8000669e:	08 9a       	mov	r10,r4
800066a0:	50 6c       	stdsp	sp[0x18],r12
800066a2:	04 9b       	mov	r11,r2
800066a4:	0e 9c       	mov	r12,r7
800066a6:	e0 a0 08 87 	rcall	800077b4 <__mdiff>
800066aa:	18 91       	mov	r1,r12
800066ac:	78 38       	ld.w	r8,r12[0xc]
800066ae:	58 08       	cp.w	r8,0
800066b0:	c0 30       	breq	800066b6 <_dtoa_r+0xa0a>
800066b2:	30 16       	mov	r6,1
800066b4:	c0 68       	rjmp	800066c0 <_dtoa_r+0xa14>
800066b6:	18 9b       	mov	r11,r12
800066b8:	06 9c       	mov	r12,r3
800066ba:	e0 a0 07 c1 	rcall	8000763c <__mcmp>
800066be:	18 96       	mov	r6,r12
800066c0:	0e 9c       	mov	r12,r7
800066c2:	02 9b       	mov	r11,r1
800066c4:	e0 a0 07 d6 	rcall	80007670 <_Bfree>
800066c8:	40 cc       	lddsp	r12,sp[0x30]
800066ca:	ed ec 10 08 	or	r8,r6,r12
800066ce:	c0 d1       	brne	800066e8 <_dtoa_r+0xa3c>
800066d0:	40 db       	lddsp	r11,sp[0x34]
800066d2:	58 0b       	cp.w	r11,0
800066d4:	c0 a1       	brne	800066e8 <_dtoa_r+0xa3c>
800066d6:	40 26       	lddsp	r6,sp[0x8]
800066d8:	e0 40 00 39 	cp.w	r0,57
800066dc:	c3 00       	breq	8000673c <_dtoa_r+0xa90>
800066de:	40 6a       	lddsp	r10,sp[0x18]
800066e0:	58 0a       	cp.w	r10,0
800066e2:	e0 89 00 24 	brgt	8000672a <_dtoa_r+0xa7e>
800066e6:	c2 f8       	rjmp	80006744 <_dtoa_r+0xa98>
800066e8:	40 69       	lddsp	r9,sp[0x18]
800066ea:	58 09       	cp.w	r9,0
800066ec:	c0 85       	brlt	800066fc <_dtoa_r+0xa50>
800066ee:	12 98       	mov	r8,r9
800066f0:	40 cc       	lddsp	r12,sp[0x30]
800066f2:	18 48       	or	r8,r12
800066f4:	c1 d1       	brne	8000672e <_dtoa_r+0xa82>
800066f6:	40 db       	lddsp	r11,sp[0x34]
800066f8:	58 0b       	cp.w	r11,0
800066fa:	c1 a1       	brne	8000672e <_dtoa_r+0xa82>
800066fc:	0c 99       	mov	r9,r6
800066fe:	40 26       	lddsp	r6,sp[0x8]
80006700:	58 09       	cp.w	r9,0
80006702:	e0 8a 00 21 	brle	80006744 <_dtoa_r+0xa98>
80006706:	06 9b       	mov	r11,r3
80006708:	30 1a       	mov	r10,1
8000670a:	0e 9c       	mov	r12,r7
8000670c:	e0 a0 08 bc 	rcall	80007884 <__lshift>
80006710:	04 9b       	mov	r11,r2
80006712:	18 93       	mov	r3,r12
80006714:	e0 a0 07 94 	rcall	8000763c <__mcmp>
80006718:	e0 89 00 06 	brgt	80006724 <_dtoa_r+0xa78>
8000671c:	c1 41       	brne	80006744 <_dtoa_r+0xa98>
8000671e:	ed b0 00 00 	bld	r0,0x0
80006722:	c1 11       	brne	80006744 <_dtoa_r+0xa98>
80006724:	e0 40 00 39 	cp.w	r0,57
80006728:	c0 a0       	breq	8000673c <_dtoa_r+0xa90>
8000672a:	2f f0       	sub	r0,-1
8000672c:	c0 c8       	rjmp	80006744 <_dtoa_r+0xa98>
8000672e:	58 06       	cp.w	r6,0
80006730:	e0 8a 00 0c 	brle	80006748 <_dtoa_r+0xa9c>
80006734:	40 26       	lddsp	r6,sp[0x8]
80006736:	e0 40 00 39 	cp.w	r0,57
8000673a:	c0 41       	brne	80006742 <_dtoa_r+0xa96>
8000673c:	33 98       	mov	r8,57
8000673e:	0a c8       	st.b	r5++,r8
80006740:	c6 78       	rjmp	8000680e <_dtoa_r+0xb62>
80006742:	2f f0       	sub	r0,-1
80006744:	0a c0       	st.b	r5++,r0
80006746:	c7 58       	rjmp	80006830 <_dtoa_r+0xb84>
80006748:	0a c0       	st.b	r5++,r0
8000674a:	40 9a       	lddsp	r10,sp[0x24]
8000674c:	40 e9       	lddsp	r9,sp[0x38]
8000674e:	12 3a       	cp.w	r10,r9
80006750:	c4 30       	breq	800067d6 <_dtoa_r+0xb2a>
80006752:	06 9b       	mov	r11,r3
80006754:	30 09       	mov	r9,0
80006756:	30 aa       	mov	r10,10
80006758:	0e 9c       	mov	r12,r7
8000675a:	e0 a0 09 61 	rcall	80007a1c <__multadd>
8000675e:	40 48       	lddsp	r8,sp[0x10]
80006760:	18 93       	mov	r3,r12
80006762:	08 38       	cp.w	r8,r4
80006764:	c0 91       	brne	80006776 <_dtoa_r+0xaca>
80006766:	10 9b       	mov	r11,r8
80006768:	30 09       	mov	r9,0
8000676a:	30 aa       	mov	r10,10
8000676c:	0e 9c       	mov	r12,r7
8000676e:	e0 a0 09 57 	rcall	80007a1c <__multadd>
80006772:	50 4c       	stdsp	sp[0x10],r12
80006774:	c0 e8       	rjmp	80006790 <_dtoa_r+0xae4>
80006776:	40 4b       	lddsp	r11,sp[0x10]
80006778:	30 09       	mov	r9,0
8000677a:	30 aa       	mov	r10,10
8000677c:	0e 9c       	mov	r12,r7
8000677e:	e0 a0 09 4f 	rcall	80007a1c <__multadd>
80006782:	08 9b       	mov	r11,r4
80006784:	50 4c       	stdsp	sp[0x10],r12
80006786:	30 09       	mov	r9,0
80006788:	30 aa       	mov	r10,10
8000678a:	0e 9c       	mov	r12,r7
8000678c:	e0 a0 09 48 	rcall	80007a1c <__multadd>
80006790:	18 94       	mov	r4,r12
80006792:	40 9c       	lddsp	r12,sp[0x24]
80006794:	2f fc       	sub	r12,-1
80006796:	50 9c       	stdsp	sp[0x24],r12
80006798:	c7 9b       	rjmp	8000668a <_dtoa_r+0x9de>
8000679a:	30 18       	mov	r8,1
8000679c:	06 90       	mov	r0,r3
8000679e:	40 85       	lddsp	r5,sp[0x20]
800067a0:	08 93       	mov	r3,r4
800067a2:	0c 94       	mov	r4,r6
800067a4:	10 96       	mov	r6,r8
800067a6:	04 9b       	mov	r11,r2
800067a8:	00 9c       	mov	r12,r0
800067aa:	fe b0 f9 f1 	rcall	80005b8c <quorem>
800067ae:	2d 0c       	sub	r12,-48
800067b0:	0a cc       	st.b	r5++,r12
800067b2:	02 36       	cp.w	r6,r1
800067b4:	c0 a4       	brge	800067c8 <_dtoa_r+0xb1c>
800067b6:	00 9b       	mov	r11,r0
800067b8:	30 09       	mov	r9,0
800067ba:	30 aa       	mov	r10,10
800067bc:	0e 9c       	mov	r12,r7
800067be:	2f f6       	sub	r6,-1
800067c0:	e0 a0 09 2e 	rcall	80007a1c <__multadd>
800067c4:	18 90       	mov	r0,r12
800067c6:	cf 0b       	rjmp	800067a6 <_dtoa_r+0xafa>
800067c8:	08 96       	mov	r6,r4
800067ca:	30 0b       	mov	r11,0
800067cc:	06 94       	mov	r4,r3
800067ce:	50 4b       	stdsp	sp[0x10],r11
800067d0:	00 93       	mov	r3,r0
800067d2:	18 90       	mov	r0,r12
800067d4:	c0 28       	rjmp	800067d8 <_dtoa_r+0xb2c>
800067d6:	40 26       	lddsp	r6,sp[0x8]
800067d8:	06 9b       	mov	r11,r3
800067da:	30 1a       	mov	r10,1
800067dc:	0e 9c       	mov	r12,r7
800067de:	e0 a0 08 53 	rcall	80007884 <__lshift>
800067e2:	04 9b       	mov	r11,r2
800067e4:	18 93       	mov	r3,r12
800067e6:	e0 a0 07 2b 	rcall	8000763c <__mcmp>
800067ea:	e0 89 00 12 	brgt	8000680e <_dtoa_r+0xb62>
800067ee:	c1 b1       	brne	80006824 <_dtoa_r+0xb78>
800067f0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800067f4:	c0 d1       	brne	8000680e <_dtoa_r+0xb62>
800067f6:	c1 78       	rjmp	80006824 <_dtoa_r+0xb78>
800067f8:	40 89       	lddsp	r9,sp[0x20]
800067fa:	12 38       	cp.w	r8,r9
800067fc:	c0 30       	breq	80006802 <_dtoa_r+0xb56>
800067fe:	10 95       	mov	r5,r8
80006800:	c0 88       	rjmp	80006810 <_dtoa_r+0xb64>
80006802:	2f f6       	sub	r6,-1
80006804:	50 66       	stdsp	sp[0x18],r6
80006806:	33 18       	mov	r8,49
80006808:	40 8c       	lddsp	r12,sp[0x20]
8000680a:	b8 88       	st.b	r12[0x0],r8
8000680c:	c1 38       	rjmp	80006832 <_dtoa_r+0xb86>
8000680e:	33 9a       	mov	r10,57
80006810:	0a 98       	mov	r8,r5
80006812:	11 79       	ld.ub	r9,--r8
80006814:	f4 09 18 00 	cp.b	r9,r10
80006818:	cf 00       	breq	800067f8 <_dtoa_r+0xb4c>
8000681a:	2f f9       	sub	r9,-1
8000681c:	b0 89       	st.b	r8[0x0],r9
8000681e:	c0 98       	rjmp	80006830 <_dtoa_r+0xb84>
80006820:	10 95       	mov	r5,r8
80006822:	c0 28       	rjmp	80006826 <_dtoa_r+0xb7a>
80006824:	33 09       	mov	r9,48
80006826:	0a 98       	mov	r8,r5
80006828:	11 7a       	ld.ub	r10,--r8
8000682a:	f2 0a 18 00 	cp.b	r10,r9
8000682e:	cf 90       	breq	80006820 <_dtoa_r+0xb74>
80006830:	50 66       	stdsp	sp[0x18],r6
80006832:	04 9b       	mov	r11,r2
80006834:	0e 9c       	mov	r12,r7
80006836:	e0 a0 07 1d 	rcall	80007670 <_Bfree>
8000683a:	58 04       	cp.w	r4,0
8000683c:	c1 20       	breq	80006860 <_dtoa_r+0xbb4>
8000683e:	40 4b       	lddsp	r11,sp[0x10]
80006840:	08 3b       	cp.w	r11,r4
80006842:	5f 19       	srne	r9
80006844:	58 0b       	cp.w	r11,0
80006846:	5f 18       	srne	r8
80006848:	f3 e8 00 08 	and	r8,r9,r8
8000684c:	c0 40       	breq	80006854 <_dtoa_r+0xba8>
8000684e:	0e 9c       	mov	r12,r7
80006850:	e0 a0 07 10 	rcall	80007670 <_Bfree>
80006854:	08 9b       	mov	r11,r4
80006856:	0e 9c       	mov	r12,r7
80006858:	e0 a0 07 0c 	rcall	80007670 <_Bfree>
8000685c:	c0 28       	rjmp	80006860 <_dtoa_r+0xbb4>
8000685e:	50 66       	stdsp	sp[0x18],r6
80006860:	0e 9c       	mov	r12,r7
80006862:	06 9b       	mov	r11,r3
80006864:	e0 a0 07 06 	rcall	80007670 <_Bfree>
80006868:	30 08       	mov	r8,0
8000686a:	aa 88       	st.b	r5[0x0],r8
8000686c:	40 68       	lddsp	r8,sp[0x18]
8000686e:	41 5a       	lddsp	r10,sp[0x54]
80006870:	2f f8       	sub	r8,-1
80006872:	41 29       	lddsp	r9,sp[0x48]
80006874:	95 08       	st.w	r10[0x0],r8
80006876:	40 8c       	lddsp	r12,sp[0x20]
80006878:	58 09       	cp.w	r9,0
8000687a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000687e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006882:	2e 6d       	sub	sp,-104
80006884:	d8 32       	popm	r0-r7,pc
80006886:	d7 03       	nop

80006888 <_fflush_r>:
80006888:	d4 21       	pushm	r4-r7,lr
8000688a:	16 97       	mov	r7,r11
8000688c:	18 96       	mov	r6,r12
8000688e:	76 48       	ld.w	r8,r11[0x10]
80006890:	58 08       	cp.w	r8,0
80006892:	c7 f0       	breq	80006990 <_fflush_r+0x108>
80006894:	58 0c       	cp.w	r12,0
80006896:	c0 50       	breq	800068a0 <_fflush_r+0x18>
80006898:	78 68       	ld.w	r8,r12[0x18]
8000689a:	58 08       	cp.w	r8,0
8000689c:	c0 21       	brne	800068a0 <_fflush_r+0x18>
8000689e:	cc dc       	rcall	80006a38 <__sinit>
800068a0:	fe c8 d0 e4 	sub	r8,pc,-12060
800068a4:	10 37       	cp.w	r7,r8
800068a6:	c0 31       	brne	800068ac <_fflush_r+0x24>
800068a8:	6c 07       	ld.w	r7,r6[0x0]
800068aa:	c0 c8       	rjmp	800068c2 <_fflush_r+0x3a>
800068ac:	fe c8 d0 d0 	sub	r8,pc,-12080
800068b0:	10 37       	cp.w	r7,r8
800068b2:	c0 31       	brne	800068b8 <_fflush_r+0x30>
800068b4:	6c 17       	ld.w	r7,r6[0x4]
800068b6:	c0 68       	rjmp	800068c2 <_fflush_r+0x3a>
800068b8:	fe c8 d0 bc 	sub	r8,pc,-12100
800068bc:	10 37       	cp.w	r7,r8
800068be:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800068c2:	8e 6a       	ld.sh	r10,r7[0xc]
800068c4:	14 98       	mov	r8,r10
800068c6:	ed ba 00 03 	bld	r10,0x3
800068ca:	c4 20       	breq	8000694e <_fflush_r+0xc6>
800068cc:	ab ba       	sbr	r10,0xb
800068ce:	ae 6a       	st.h	r7[0xc],r10
800068d0:	6e 18       	ld.w	r8,r7[0x4]
800068d2:	58 08       	cp.w	r8,0
800068d4:	e0 89 00 06 	brgt	800068e0 <_fflush_r+0x58>
800068d8:	6f 08       	ld.w	r8,r7[0x40]
800068da:	58 08       	cp.w	r8,0
800068dc:	e0 8a 00 5a 	brle	80006990 <_fflush_r+0x108>
800068e0:	6e b8       	ld.w	r8,r7[0x2c]
800068e2:	58 08       	cp.w	r8,0
800068e4:	c5 60       	breq	80006990 <_fflush_r+0x108>
800068e6:	e2 1a 10 00 	andl	r10,0x1000,COH
800068ea:	c0 30       	breq	800068f0 <_fflush_r+0x68>
800068ec:	6f 55       	ld.w	r5,r7[0x54]
800068ee:	c0 f8       	rjmp	8000690c <_fflush_r+0x84>
800068f0:	30 19       	mov	r9,1
800068f2:	6e 8b       	ld.w	r11,r7[0x20]
800068f4:	0c 9c       	mov	r12,r6
800068f6:	5d 18       	icall	r8
800068f8:	18 95       	mov	r5,r12
800068fa:	5b fc       	cp.w	r12,-1
800068fc:	c0 81       	brne	8000690c <_fflush_r+0x84>
800068fe:	6c 38       	ld.w	r8,r6[0xc]
80006900:	59 d8       	cp.w	r8,29
80006902:	c4 70       	breq	80006990 <_fflush_r+0x108>
80006904:	8e 68       	ld.sh	r8,r7[0xc]
80006906:	a7 a8       	sbr	r8,0x6
80006908:	ae 68       	st.h	r7[0xc],r8
8000690a:	d8 22       	popm	r4-r7,pc
8000690c:	8e 68       	ld.sh	r8,r7[0xc]
8000690e:	ed b8 00 02 	bld	r8,0x2
80006912:	c0 91       	brne	80006924 <_fflush_r+0x9c>
80006914:	6e 18       	ld.w	r8,r7[0x4]
80006916:	10 15       	sub	r5,r8
80006918:	6e d8       	ld.w	r8,r7[0x34]
8000691a:	58 08       	cp.w	r8,0
8000691c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006920:	eb d8 e1 15 	subne	r5,r5,r8
80006924:	6e b8       	ld.w	r8,r7[0x2c]
80006926:	0c 9c       	mov	r12,r6
80006928:	30 09       	mov	r9,0
8000692a:	0a 9a       	mov	r10,r5
8000692c:	6e 8b       	ld.w	r11,r7[0x20]
8000692e:	5d 18       	icall	r8
80006930:	8e 68       	ld.sh	r8,r7[0xc]
80006932:	0a 3c       	cp.w	r12,r5
80006934:	c2 61       	brne	80006980 <_fflush_r+0xf8>
80006936:	ab d8       	cbr	r8,0xb
80006938:	30 0c       	mov	r12,0
8000693a:	6e 49       	ld.w	r9,r7[0x10]
8000693c:	ae 68       	st.h	r7[0xc],r8
8000693e:	8f 1c       	st.w	r7[0x4],r12
80006940:	8f 09       	st.w	r7[0x0],r9
80006942:	ed b8 00 0c 	bld	r8,0xc
80006946:	c2 51       	brne	80006990 <_fflush_r+0x108>
80006948:	ef 45 00 54 	st.w	r7[84],r5
8000694c:	d8 22       	popm	r4-r7,pc
8000694e:	6e 45       	ld.w	r5,r7[0x10]
80006950:	58 05       	cp.w	r5,0
80006952:	c1 f0       	breq	80006990 <_fflush_r+0x108>
80006954:	6e 04       	ld.w	r4,r7[0x0]
80006956:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000695a:	8f 05       	st.w	r7[0x0],r5
8000695c:	f9 b8 01 00 	movne	r8,0
80006960:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006964:	0a 14       	sub	r4,r5
80006966:	8f 28       	st.w	r7[0x8],r8
80006968:	c1 18       	rjmp	8000698a <_fflush_r+0x102>
8000696a:	08 99       	mov	r9,r4
8000696c:	0a 9a       	mov	r10,r5
8000696e:	6e a8       	ld.w	r8,r7[0x28]
80006970:	6e 8b       	ld.w	r11,r7[0x20]
80006972:	0c 9c       	mov	r12,r6
80006974:	5d 18       	icall	r8
80006976:	18 14       	sub	r4,r12
80006978:	58 0c       	cp.w	r12,0
8000697a:	e0 89 00 07 	brgt	80006988 <_fflush_r+0x100>
8000697e:	8e 68       	ld.sh	r8,r7[0xc]
80006980:	a7 a8       	sbr	r8,0x6
80006982:	3f fc       	mov	r12,-1
80006984:	ae 68       	st.h	r7[0xc],r8
80006986:	d8 22       	popm	r4-r7,pc
80006988:	18 05       	add	r5,r12
8000698a:	58 04       	cp.w	r4,0
8000698c:	fe 99 ff ef 	brgt	8000696a <_fflush_r+0xe2>
80006990:	d8 2a       	popm	r4-r7,pc,r12=0
80006992:	d7 03       	nop

80006994 <__sfp_lock_acquire>:
80006994:	5e fc       	retal	r12

80006996 <__sfp_lock_release>:
80006996:	5e fc       	retal	r12

80006998 <_cleanup_r>:
80006998:	d4 01       	pushm	lr
8000699a:	fe cb e8 6a 	sub	r11,pc,-6038
8000699e:	e0 a0 02 fd 	rcall	80006f98 <_fwalk>
800069a2:	d8 02       	popm	pc

800069a4 <__sfmoreglue>:
800069a4:	d4 21       	pushm	r4-r7,lr
800069a6:	16 95       	mov	r5,r11
800069a8:	f6 06 10 5c 	mul	r6,r11,92
800069ac:	ec cb ff f4 	sub	r11,r6,-12
800069b0:	e0 a0 03 84 	rcall	800070b8 <_malloc_r>
800069b4:	18 97       	mov	r7,r12
800069b6:	c0 90       	breq	800069c8 <__sfmoreglue+0x24>
800069b8:	99 15       	st.w	r12[0x4],r5
800069ba:	30 0b       	mov	r11,0
800069bc:	2f 4c       	sub	r12,-12
800069be:	0c 9a       	mov	r10,r6
800069c0:	8f 2c       	st.w	r7[0x8],r12
800069c2:	8f 0b       	st.w	r7[0x0],r11
800069c4:	e0 a0 05 bc 	rcall	8000753c <memset>
800069c8:	0e 9c       	mov	r12,r7
800069ca:	d8 22       	popm	r4-r7,pc

800069cc <__sfp>:
800069cc:	d4 21       	pushm	r4-r7,lr
800069ce:	fe c8 d5 fa 	sub	r8,pc,-10758
800069d2:	18 96       	mov	r6,r12
800069d4:	70 07       	ld.w	r7,r8[0x0]
800069d6:	6e 68       	ld.w	r8,r7[0x18]
800069d8:	58 08       	cp.w	r8,0
800069da:	c0 31       	brne	800069e0 <__sfp+0x14>
800069dc:	0e 9c       	mov	r12,r7
800069de:	c2 dc       	rcall	80006a38 <__sinit>
800069e0:	ee c7 ff 28 	sub	r7,r7,-216
800069e4:	30 05       	mov	r5,0
800069e6:	6e 2c       	ld.w	r12,r7[0x8]
800069e8:	6e 18       	ld.w	r8,r7[0x4]
800069ea:	c0 68       	rjmp	800069f6 <__sfp+0x2a>
800069ec:	98 69       	ld.sh	r9,r12[0xc]
800069ee:	ea 09 19 00 	cp.h	r9,r5
800069f2:	c1 10       	breq	80006a14 <__sfp+0x48>
800069f4:	2a 4c       	sub	r12,-92
800069f6:	20 18       	sub	r8,1
800069f8:	cf a7       	brpl	800069ec <__sfp+0x20>
800069fa:	6e 08       	ld.w	r8,r7[0x0]
800069fc:	58 08       	cp.w	r8,0
800069fe:	c0 61       	brne	80006a0a <__sfp+0x3e>
80006a00:	30 4b       	mov	r11,4
80006a02:	0c 9c       	mov	r12,r6
80006a04:	cd 0f       	rcall	800069a4 <__sfmoreglue>
80006a06:	8f 0c       	st.w	r7[0x0],r12
80006a08:	c0 30       	breq	80006a0e <__sfp+0x42>
80006a0a:	6e 07       	ld.w	r7,r7[0x0]
80006a0c:	ce db       	rjmp	800069e6 <__sfp+0x1a>
80006a0e:	30 c8       	mov	r8,12
80006a10:	8d 38       	st.w	r6[0xc],r8
80006a12:	d8 22       	popm	r4-r7,pc
80006a14:	30 08       	mov	r8,0
80006a16:	f9 48 00 4c 	st.w	r12[76],r8
80006a1a:	99 08       	st.w	r12[0x0],r8
80006a1c:	99 28       	st.w	r12[0x8],r8
80006a1e:	99 18       	st.w	r12[0x4],r8
80006a20:	99 48       	st.w	r12[0x10],r8
80006a22:	99 58       	st.w	r12[0x14],r8
80006a24:	99 68       	st.w	r12[0x18],r8
80006a26:	99 d8       	st.w	r12[0x34],r8
80006a28:	99 e8       	st.w	r12[0x38],r8
80006a2a:	f9 48 00 48 	st.w	r12[72],r8
80006a2e:	3f f8       	mov	r8,-1
80006a30:	b8 78       	st.h	r12[0xe],r8
80006a32:	30 18       	mov	r8,1
80006a34:	b8 68       	st.h	r12[0xc],r8
80006a36:	d8 22       	popm	r4-r7,pc

80006a38 <__sinit>:
80006a38:	d4 21       	pushm	r4-r7,lr
80006a3a:	18 96       	mov	r6,r12
80006a3c:	78 67       	ld.w	r7,r12[0x18]
80006a3e:	58 07       	cp.w	r7,0
80006a40:	c4 91       	brne	80006ad2 <__sinit+0x9a>
80006a42:	fe c8 00 aa 	sub	r8,pc,170
80006a46:	30 15       	mov	r5,1
80006a48:	99 a8       	st.w	r12[0x28],r8
80006a4a:	f9 47 00 d8 	st.w	r12[216],r7
80006a4e:	f9 47 00 dc 	st.w	r12[220],r7
80006a52:	f9 47 00 e0 	st.w	r12[224],r7
80006a56:	99 65       	st.w	r12[0x18],r5
80006a58:	cb af       	rcall	800069cc <__sfp>
80006a5a:	8d 0c       	st.w	r6[0x0],r12
80006a5c:	0c 9c       	mov	r12,r6
80006a5e:	cb 7f       	rcall	800069cc <__sfp>
80006a60:	8d 1c       	st.w	r6[0x4],r12
80006a62:	0c 9c       	mov	r12,r6
80006a64:	cb 4f       	rcall	800069cc <__sfp>
80006a66:	6c 09       	ld.w	r9,r6[0x0]
80006a68:	30 48       	mov	r8,4
80006a6a:	93 07       	st.w	r9[0x0],r7
80006a6c:	b2 68       	st.h	r9[0xc],r8
80006a6e:	93 17       	st.w	r9[0x4],r7
80006a70:	93 27       	st.w	r9[0x8],r7
80006a72:	6c 18       	ld.w	r8,r6[0x4]
80006a74:	b2 77       	st.h	r9[0xe],r7
80006a76:	93 47       	st.w	r9[0x10],r7
80006a78:	93 57       	st.w	r9[0x14],r7
80006a7a:	93 67       	st.w	r9[0x18],r7
80006a7c:	93 89       	st.w	r9[0x20],r9
80006a7e:	91 07       	st.w	r8[0x0],r7
80006a80:	91 17       	st.w	r8[0x4],r7
80006a82:	91 27       	st.w	r8[0x8],r7
80006a84:	fe ce eb e4 	sub	lr,pc,-5148
80006a88:	fe cb ec 14 	sub	r11,pc,-5100
80006a8c:	93 9e       	st.w	r9[0x24],lr
80006a8e:	93 ab       	st.w	r9[0x28],r11
80006a90:	fe ca ec 3c 	sub	r10,pc,-5060
80006a94:	fe c4 ec 48 	sub	r4,pc,-5048
80006a98:	93 ba       	st.w	r9[0x2c],r10
80006a9a:	93 c4       	st.w	r9[0x30],r4
80006a9c:	30 99       	mov	r9,9
80006a9e:	b0 69       	st.h	r8[0xc],r9
80006aa0:	b0 75       	st.h	r8[0xe],r5
80006aa2:	91 c4       	st.w	r8[0x30],r4
80006aa4:	91 47       	st.w	r8[0x10],r7
80006aa6:	91 57       	st.w	r8[0x14],r7
80006aa8:	91 67       	st.w	r8[0x18],r7
80006aaa:	91 88       	st.w	r8[0x20],r8
80006aac:	91 9e       	st.w	r8[0x24],lr
80006aae:	91 ab       	st.w	r8[0x28],r11
80006ab0:	91 ba       	st.w	r8[0x2c],r10
80006ab2:	8d 2c       	st.w	r6[0x8],r12
80006ab4:	31 28       	mov	r8,18
80006ab6:	99 07       	st.w	r12[0x0],r7
80006ab8:	b8 68       	st.h	r12[0xc],r8
80006aba:	99 17       	st.w	r12[0x4],r7
80006abc:	99 27       	st.w	r12[0x8],r7
80006abe:	30 28       	mov	r8,2
80006ac0:	b8 78       	st.h	r12[0xe],r8
80006ac2:	99 c4       	st.w	r12[0x30],r4
80006ac4:	99 67       	st.w	r12[0x18],r7
80006ac6:	99 9e       	st.w	r12[0x24],lr
80006ac8:	99 ab       	st.w	r12[0x28],r11
80006aca:	99 ba       	st.w	r12[0x2c],r10
80006acc:	99 47       	st.w	r12[0x10],r7
80006ace:	99 57       	st.w	r12[0x14],r7
80006ad0:	99 8c       	st.w	r12[0x20],r12
80006ad2:	d8 22       	popm	r4-r7,pc

80006ad4 <_malloc_trim_r>:
80006ad4:	d4 21       	pushm	r4-r7,lr
80006ad6:	16 95       	mov	r5,r11
80006ad8:	18 97       	mov	r7,r12
80006ada:	e0 a0 05 38 	rcall	8000754a <__malloc_lock>
80006ade:	e0 64 01 08 	mov	r4,264
80006ae2:	68 28       	ld.w	r8,r4[0x8]
80006ae4:	70 16       	ld.w	r6,r8[0x4]
80006ae6:	e0 16 ff fc 	andl	r6,0xfffc
80006aea:	ec c8 ff 91 	sub	r8,r6,-111
80006aee:	f0 05 01 05 	sub	r5,r8,r5
80006af2:	e0 15 ff 80 	andl	r5,0xff80
80006af6:	ea c5 00 80 	sub	r5,r5,128
80006afa:	e0 45 00 7f 	cp.w	r5,127
80006afe:	e0 8a 00 25 	brle	80006b48 <_malloc_trim_r+0x74>
80006b02:	30 0b       	mov	r11,0
80006b04:	0e 9c       	mov	r12,r7
80006b06:	e0 a0 09 93 	rcall	80007e2c <_sbrk_r>
80006b0a:	68 28       	ld.w	r8,r4[0x8]
80006b0c:	0c 08       	add	r8,r6
80006b0e:	10 3c       	cp.w	r12,r8
80006b10:	c1 c1       	brne	80006b48 <_malloc_trim_r+0x74>
80006b12:	ea 0b 11 00 	rsub	r11,r5,0
80006b16:	0e 9c       	mov	r12,r7
80006b18:	e0 a0 09 8a 	rcall	80007e2c <_sbrk_r>
80006b1c:	5b fc       	cp.w	r12,-1
80006b1e:	c1 91       	brne	80006b50 <_malloc_trim_r+0x7c>
80006b20:	30 0b       	mov	r11,0
80006b22:	0e 9c       	mov	r12,r7
80006b24:	e0 a0 09 84 	rcall	80007e2c <_sbrk_r>
80006b28:	68 28       	ld.w	r8,r4[0x8]
80006b2a:	f8 08 01 09 	sub	r9,r12,r8
80006b2e:	58 f9       	cp.w	r9,15
80006b30:	e0 8a 00 0c 	brle	80006b48 <_malloc_trim_r+0x74>
80006b34:	a1 a9       	sbr	r9,0x0
80006b36:	91 19       	st.w	r8[0x4],r9
80006b38:	e0 68 05 14 	mov	r8,1300
80006b3c:	70 09       	ld.w	r9,r8[0x0]
80006b3e:	e0 68 06 34 	mov	r8,1588
80006b42:	f8 09 01 09 	sub	r9,r12,r9
80006b46:	91 09       	st.w	r8[0x0],r9
80006b48:	0e 9c       	mov	r12,r7
80006b4a:	e0 a0 05 01 	rcall	8000754c <__malloc_unlock>
80006b4e:	d8 2a       	popm	r4-r7,pc,r12=0
80006b50:	68 28       	ld.w	r8,r4[0x8]
80006b52:	0a 16       	sub	r6,r5
80006b54:	a1 a6       	sbr	r6,0x0
80006b56:	91 16       	st.w	r8[0x4],r6
80006b58:	e0 68 06 34 	mov	r8,1588
80006b5c:	70 09       	ld.w	r9,r8[0x0]
80006b5e:	0a 19       	sub	r9,r5
80006b60:	0e 9c       	mov	r12,r7
80006b62:	91 09       	st.w	r8[0x0],r9
80006b64:	e0 a0 04 f4 	rcall	8000754c <__malloc_unlock>
80006b68:	da 2a       	popm	r4-r7,pc,r12=1
80006b6a:	d7 03       	nop

80006b6c <_free_r>:
80006b6c:	d4 21       	pushm	r4-r7,lr
80006b6e:	16 96       	mov	r6,r11
80006b70:	18 97       	mov	r7,r12
80006b72:	58 0b       	cp.w	r11,0
80006b74:	e0 80 00 c0 	breq	80006cf4 <_free_r+0x188>
80006b78:	e0 a0 04 e9 	rcall	8000754a <__malloc_lock>
80006b7c:	20 86       	sub	r6,8
80006b7e:	e0 6a 01 08 	mov	r10,264
80006b82:	6c 18       	ld.w	r8,r6[0x4]
80006b84:	74 2e       	ld.w	lr,r10[0x8]
80006b86:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006b8a:	a1 c8       	cbr	r8,0x0
80006b8c:	ec 08 00 09 	add	r9,r6,r8
80006b90:	72 1b       	ld.w	r11,r9[0x4]
80006b92:	e0 1b ff fc 	andl	r11,0xfffc
80006b96:	1c 39       	cp.w	r9,lr
80006b98:	c1 e1       	brne	80006bd4 <_free_r+0x68>
80006b9a:	f6 08 00 08 	add	r8,r11,r8
80006b9e:	58 0c       	cp.w	r12,0
80006ba0:	c0 81       	brne	80006bb0 <_free_r+0x44>
80006ba2:	6c 09       	ld.w	r9,r6[0x0]
80006ba4:	12 16       	sub	r6,r9
80006ba6:	12 08       	add	r8,r9
80006ba8:	6c 3b       	ld.w	r11,r6[0xc]
80006baa:	6c 29       	ld.w	r9,r6[0x8]
80006bac:	97 29       	st.w	r11[0x8],r9
80006bae:	93 3b       	st.w	r9[0xc],r11
80006bb0:	10 99       	mov	r9,r8
80006bb2:	95 26       	st.w	r10[0x8],r6
80006bb4:	a1 a9       	sbr	r9,0x0
80006bb6:	8d 19       	st.w	r6[0x4],r9
80006bb8:	e0 69 05 10 	mov	r9,1296
80006bbc:	72 09       	ld.w	r9,r9[0x0]
80006bbe:	12 38       	cp.w	r8,r9
80006bc0:	c0 63       	brcs	80006bcc <_free_r+0x60>
80006bc2:	e0 68 06 30 	mov	r8,1584
80006bc6:	0e 9c       	mov	r12,r7
80006bc8:	70 0b       	ld.w	r11,r8[0x0]
80006bca:	c8 5f       	rcall	80006ad4 <_malloc_trim_r>
80006bcc:	0e 9c       	mov	r12,r7
80006bce:	e0 a0 04 bf 	rcall	8000754c <__malloc_unlock>
80006bd2:	d8 22       	popm	r4-r7,pc
80006bd4:	93 1b       	st.w	r9[0x4],r11
80006bd6:	58 0c       	cp.w	r12,0
80006bd8:	c0 30       	breq	80006bde <_free_r+0x72>
80006bda:	30 0c       	mov	r12,0
80006bdc:	c1 08       	rjmp	80006bfc <_free_r+0x90>
80006bde:	6c 0e       	ld.w	lr,r6[0x0]
80006be0:	f4 c5 ff f8 	sub	r5,r10,-8
80006be4:	1c 16       	sub	r6,lr
80006be6:	1c 08       	add	r8,lr
80006be8:	6c 2e       	ld.w	lr,r6[0x8]
80006bea:	0a 3e       	cp.w	lr,r5
80006bec:	f9 bc 00 01 	moveq	r12,1
80006bf0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006bf4:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006bf8:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006bfc:	f2 0b 00 0e 	add	lr,r9,r11
80006c00:	7c 1e       	ld.w	lr,lr[0x4]
80006c02:	ed be 00 00 	bld	lr,0x0
80006c06:	c1 40       	breq	80006c2e <_free_r+0xc2>
80006c08:	16 08       	add	r8,r11
80006c0a:	58 0c       	cp.w	r12,0
80006c0c:	c0 d1       	brne	80006c26 <_free_r+0xba>
80006c0e:	e0 6e 01 08 	mov	lr,264
80006c12:	72 2b       	ld.w	r11,r9[0x8]
80006c14:	2f 8e       	sub	lr,-8
80006c16:	1c 3b       	cp.w	r11,lr
80006c18:	c0 71       	brne	80006c26 <_free_r+0xba>
80006c1a:	97 36       	st.w	r11[0xc],r6
80006c1c:	97 26       	st.w	r11[0x8],r6
80006c1e:	8d 2b       	st.w	r6[0x8],r11
80006c20:	8d 3b       	st.w	r6[0xc],r11
80006c22:	30 1c       	mov	r12,1
80006c24:	c0 58       	rjmp	80006c2e <_free_r+0xc2>
80006c26:	72 2b       	ld.w	r11,r9[0x8]
80006c28:	72 39       	ld.w	r9,r9[0xc]
80006c2a:	93 2b       	st.w	r9[0x8],r11
80006c2c:	97 39       	st.w	r11[0xc],r9
80006c2e:	10 99       	mov	r9,r8
80006c30:	ec 08 09 08 	st.w	r6[r8],r8
80006c34:	a1 a9       	sbr	r9,0x0
80006c36:	8d 19       	st.w	r6[0x4],r9
80006c38:	58 0c       	cp.w	r12,0
80006c3a:	c5 a1       	brne	80006cee <_free_r+0x182>
80006c3c:	e0 48 01 ff 	cp.w	r8,511
80006c40:	e0 8b 00 13 	brhi	80006c66 <_free_r+0xfa>
80006c44:	a3 98       	lsr	r8,0x3
80006c46:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006c4a:	72 2b       	ld.w	r11,r9[0x8]
80006c4c:	8d 39       	st.w	r6[0xc],r9
80006c4e:	8d 2b       	st.w	r6[0x8],r11
80006c50:	97 36       	st.w	r11[0xc],r6
80006c52:	93 26       	st.w	r9[0x8],r6
80006c54:	a3 48       	asr	r8,0x2
80006c56:	74 19       	ld.w	r9,r10[0x4]
80006c58:	30 1b       	mov	r11,1
80006c5a:	f6 08 09 48 	lsl	r8,r11,r8
80006c5e:	f3 e8 10 08 	or	r8,r9,r8
80006c62:	95 18       	st.w	r10[0x4],r8
80006c64:	c4 58       	rjmp	80006cee <_free_r+0x182>
80006c66:	f0 0b 16 09 	lsr	r11,r8,0x9
80006c6a:	58 4b       	cp.w	r11,4
80006c6c:	e0 8b 00 06 	brhi	80006c78 <_free_r+0x10c>
80006c70:	f0 0b 16 06 	lsr	r11,r8,0x6
80006c74:	2c 8b       	sub	r11,-56
80006c76:	c2 08       	rjmp	80006cb6 <_free_r+0x14a>
80006c78:	59 4b       	cp.w	r11,20
80006c7a:	e0 8b 00 04 	brhi	80006c82 <_free_r+0x116>
80006c7e:	2a 5b       	sub	r11,-91
80006c80:	c1 b8       	rjmp	80006cb6 <_free_r+0x14a>
80006c82:	e0 4b 00 54 	cp.w	r11,84
80006c86:	e0 8b 00 06 	brhi	80006c92 <_free_r+0x126>
80006c8a:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006c8e:	29 2b       	sub	r11,-110
80006c90:	c1 38       	rjmp	80006cb6 <_free_r+0x14a>
80006c92:	e0 4b 01 54 	cp.w	r11,340
80006c96:	e0 8b 00 06 	brhi	80006ca2 <_free_r+0x136>
80006c9a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006c9e:	28 9b       	sub	r11,-119
80006ca0:	c0 b8       	rjmp	80006cb6 <_free_r+0x14a>
80006ca2:	e0 4b 05 54 	cp.w	r11,1364
80006ca6:	e0 88 00 05 	brls	80006cb0 <_free_r+0x144>
80006caa:	37 eb       	mov	r11,126
80006cac:	c0 58       	rjmp	80006cb6 <_free_r+0x14a>
80006cae:	d7 03       	nop
80006cb0:	f0 0b 16 12 	lsr	r11,r8,0x12
80006cb4:	28 4b       	sub	r11,-124
80006cb6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006cba:	78 29       	ld.w	r9,r12[0x8]
80006cbc:	18 39       	cp.w	r9,r12
80006cbe:	c0 e1       	brne	80006cda <_free_r+0x16e>
80006cc0:	74 18       	ld.w	r8,r10[0x4]
80006cc2:	a3 4b       	asr	r11,0x2
80006cc4:	30 1c       	mov	r12,1
80006cc6:	f8 0b 09 4b 	lsl	r11,r12,r11
80006cca:	f1 eb 10 0b 	or	r11,r8,r11
80006cce:	12 98       	mov	r8,r9
80006cd0:	95 1b       	st.w	r10[0x4],r11
80006cd2:	c0 a8       	rjmp	80006ce6 <_free_r+0x17a>
80006cd4:	72 29       	ld.w	r9,r9[0x8]
80006cd6:	18 39       	cp.w	r9,r12
80006cd8:	c0 60       	breq	80006ce4 <_free_r+0x178>
80006cda:	72 1a       	ld.w	r10,r9[0x4]
80006cdc:	e0 1a ff fc 	andl	r10,0xfffc
80006ce0:	14 38       	cp.w	r8,r10
80006ce2:	cf 93       	brcs	80006cd4 <_free_r+0x168>
80006ce4:	72 38       	ld.w	r8,r9[0xc]
80006ce6:	8d 38       	st.w	r6[0xc],r8
80006ce8:	8d 29       	st.w	r6[0x8],r9
80006cea:	93 36       	st.w	r9[0xc],r6
80006cec:	91 26       	st.w	r8[0x8],r6
80006cee:	0e 9c       	mov	r12,r7
80006cf0:	e0 a0 04 2e 	rcall	8000754c <__malloc_unlock>
80006cf4:	d8 22       	popm	r4-r7,pc
80006cf6:	d7 03       	nop

80006cf8 <__sfvwrite_r>:
80006cf8:	d4 31       	pushm	r0-r7,lr
80006cfa:	20 3d       	sub	sp,12
80006cfc:	14 94       	mov	r4,r10
80006cfe:	18 95       	mov	r5,r12
80006d00:	16 97       	mov	r7,r11
80006d02:	74 28       	ld.w	r8,r10[0x8]
80006d04:	58 08       	cp.w	r8,0
80006d06:	e0 80 01 45 	breq	80006f90 <__sfvwrite_r+0x298>
80006d0a:	96 68       	ld.sh	r8,r11[0xc]
80006d0c:	ed b8 00 03 	bld	r8,0x3
80006d10:	c0 41       	brne	80006d18 <__sfvwrite_r+0x20>
80006d12:	76 48       	ld.w	r8,r11[0x10]
80006d14:	58 08       	cp.w	r8,0
80006d16:	c0 c1       	brne	80006d2e <__sfvwrite_r+0x36>
80006d18:	0e 9b       	mov	r11,r7
80006d1a:	0a 9c       	mov	r12,r5
80006d1c:	fe b0 f6 ca 	rcall	80005ab0 <__swsetup_r>
80006d20:	c0 70       	breq	80006d2e <__sfvwrite_r+0x36>
80006d22:	8e 68       	ld.sh	r8,r7[0xc]
80006d24:	a7 a8       	sbr	r8,0x6
80006d26:	ae 68       	st.h	r7[0xc],r8
80006d28:	30 98       	mov	r8,9
80006d2a:	8b 38       	st.w	r5[0xc],r8
80006d2c:	c3 09       	rjmp	80006f8c <__sfvwrite_r+0x294>
80006d2e:	8e 63       	ld.sh	r3,r7[0xc]
80006d30:	68 00       	ld.w	r0,r4[0x0]
80006d32:	06 96       	mov	r6,r3
80006d34:	e2 16 00 02 	andl	r6,0x2,COH
80006d38:	c2 10       	breq	80006d7a <__sfvwrite_r+0x82>
80006d3a:	30 03       	mov	r3,0
80006d3c:	e0 62 04 00 	mov	r2,1024
80006d40:	06 96       	mov	r6,r3
80006d42:	c0 48       	rjmp	80006d4a <__sfvwrite_r+0x52>
80006d44:	60 03       	ld.w	r3,r0[0x0]
80006d46:	60 16       	ld.w	r6,r0[0x4]
80006d48:	2f 80       	sub	r0,-8
80006d4a:	58 06       	cp.w	r6,0
80006d4c:	cf c0       	breq	80006d44 <__sfvwrite_r+0x4c>
80006d4e:	e0 46 04 00 	cp.w	r6,1024
80006d52:	ec 09 17 80 	movls	r9,r6
80006d56:	e4 09 17 b0 	movhi	r9,r2
80006d5a:	06 9a       	mov	r10,r3
80006d5c:	6e a8       	ld.w	r8,r7[0x28]
80006d5e:	6e 8b       	ld.w	r11,r7[0x20]
80006d60:	0a 9c       	mov	r12,r5
80006d62:	5d 18       	icall	r8
80006d64:	18 16       	sub	r6,r12
80006d66:	58 0c       	cp.w	r12,0
80006d68:	e0 8a 01 0f 	brle	80006f86 <__sfvwrite_r+0x28e>
80006d6c:	68 28       	ld.w	r8,r4[0x8]
80006d6e:	18 18       	sub	r8,r12
80006d70:	89 28       	st.w	r4[0x8],r8
80006d72:	e0 80 01 0f 	breq	80006f90 <__sfvwrite_r+0x298>
80006d76:	18 03       	add	r3,r12
80006d78:	ce 9b       	rjmp	80006d4a <__sfvwrite_r+0x52>
80006d7a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006d7e:	c0 70       	breq	80006d8c <__sfvwrite_r+0x94>
80006d80:	50 06       	stdsp	sp[0x0],r6
80006d82:	0c 93       	mov	r3,r6
80006d84:	0c 91       	mov	r1,r6
80006d86:	50 15       	stdsp	sp[0x4],r5
80006d88:	08 92       	mov	r2,r4
80006d8a:	c9 e8       	rjmp	80006ec6 <__sfvwrite_r+0x1ce>
80006d8c:	06 96       	mov	r6,r3
80006d8e:	08 91       	mov	r1,r4
80006d90:	c0 48       	rjmp	80006d98 <__sfvwrite_r+0xa0>
80006d92:	60 03       	ld.w	r3,r0[0x0]
80006d94:	60 16       	ld.w	r6,r0[0x4]
80006d96:	2f 80       	sub	r0,-8
80006d98:	58 06       	cp.w	r6,0
80006d9a:	cf c0       	breq	80006d92 <__sfvwrite_r+0x9a>
80006d9c:	8e 68       	ld.sh	r8,r7[0xc]
80006d9e:	6e 24       	ld.w	r4,r7[0x8]
80006da0:	10 99       	mov	r9,r8
80006da2:	e2 19 02 00 	andl	r9,0x200,COH
80006da6:	c5 50       	breq	80006e50 <__sfvwrite_r+0x158>
80006da8:	08 36       	cp.w	r6,r4
80006daa:	c4 33       	brcs	80006e30 <__sfvwrite_r+0x138>
80006dac:	10 99       	mov	r9,r8
80006dae:	e2 19 04 80 	andl	r9,0x480,COH
80006db2:	c3 f0       	breq	80006e30 <__sfvwrite_r+0x138>
80006db4:	6e 4b       	ld.w	r11,r7[0x10]
80006db6:	6e 09       	ld.w	r9,r7[0x0]
80006db8:	16 19       	sub	r9,r11
80006dba:	50 09       	stdsp	sp[0x0],r9
80006dbc:	6e 59       	ld.w	r9,r7[0x14]
80006dbe:	10 9c       	mov	r12,r8
80006dc0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006dc4:	30 28       	mov	r8,2
80006dc6:	f4 08 0c 08 	divs	r8,r10,r8
80006dca:	fa e9 00 04 	st.d	sp[4],r8
80006dce:	10 94       	mov	r4,r8
80006dd0:	40 09       	lddsp	r9,sp[0x0]
80006dd2:	e2 1c 04 00 	andl	r12,0x400,COH
80006dd6:	2f f9       	sub	r9,-1
80006dd8:	0c 09       	add	r9,r6
80006dda:	12 38       	cp.w	r8,r9
80006ddc:	f2 04 17 30 	movlo	r4,r9
80006de0:	58 0c       	cp.w	r12,0
80006de2:	c1 00       	breq	80006e02 <__sfvwrite_r+0x10a>
80006de4:	08 9b       	mov	r11,r4
80006de6:	0a 9c       	mov	r12,r5
80006de8:	c6 8d       	rcall	800070b8 <_malloc_r>
80006dea:	18 92       	mov	r2,r12
80006dec:	c1 40       	breq	80006e14 <__sfvwrite_r+0x11c>
80006dee:	40 0a       	lddsp	r10,sp[0x0]
80006df0:	6e 4b       	ld.w	r11,r7[0x10]
80006df2:	fe b0 e4 79 	rcall	800036e4 <memcpy>
80006df6:	8e 68       	ld.sh	r8,r7[0xc]
80006df8:	e0 18 fb 7f 	andl	r8,0xfb7f
80006dfc:	a7 b8       	sbr	r8,0x7
80006dfe:	ae 68       	st.h	r7[0xc],r8
80006e00:	c0 d8       	rjmp	80006e1a <__sfvwrite_r+0x122>
80006e02:	08 9a       	mov	r10,r4
80006e04:	0a 9c       	mov	r12,r5
80006e06:	e0 a0 06 8f 	rcall	80007b24 <_realloc_r>
80006e0a:	18 92       	mov	r2,r12
80006e0c:	c0 71       	brne	80006e1a <__sfvwrite_r+0x122>
80006e0e:	6e 4b       	ld.w	r11,r7[0x10]
80006e10:	0a 9c       	mov	r12,r5
80006e12:	ca de       	rcall	80006b6c <_free_r>
80006e14:	30 c8       	mov	r8,12
80006e16:	8b 38       	st.w	r5[0xc],r8
80006e18:	cb 78       	rjmp	80006f86 <__sfvwrite_r+0x28e>
80006e1a:	40 0a       	lddsp	r10,sp[0x0]
80006e1c:	40 09       	lddsp	r9,sp[0x0]
80006e1e:	e8 0a 01 0a 	sub	r10,r4,r10
80006e22:	e4 09 00 08 	add	r8,r2,r9
80006e26:	8f 54       	st.w	r7[0x14],r4
80006e28:	8f 2a       	st.w	r7[0x8],r10
80006e2a:	8f 08       	st.w	r7[0x0],r8
80006e2c:	8f 42       	st.w	r7[0x10],r2
80006e2e:	0c 94       	mov	r4,r6
80006e30:	08 36       	cp.w	r6,r4
80006e32:	ec 04 17 30 	movlo	r4,r6
80006e36:	06 9b       	mov	r11,r3
80006e38:	08 9a       	mov	r10,r4
80006e3a:	6e 0c       	ld.w	r12,r7[0x0]
80006e3c:	e0 a0 03 61 	rcall	800074fe <memmove>
80006e40:	6e 08       	ld.w	r8,r7[0x0]
80006e42:	08 08       	add	r8,r4
80006e44:	8f 08       	st.w	r7[0x0],r8
80006e46:	6e 28       	ld.w	r8,r7[0x8]
80006e48:	08 18       	sub	r8,r4
80006e4a:	0c 94       	mov	r4,r6
80006e4c:	8f 28       	st.w	r7[0x8],r8
80006e4e:	c3 08       	rjmp	80006eae <__sfvwrite_r+0x1b6>
80006e50:	08 36       	cp.w	r6,r4
80006e52:	5f ba       	srhi	r10
80006e54:	6e 0c       	ld.w	r12,r7[0x0]
80006e56:	6e 48       	ld.w	r8,r7[0x10]
80006e58:	10 3c       	cp.w	r12,r8
80006e5a:	5f b8       	srhi	r8
80006e5c:	f5 e8 00 08 	and	r8,r10,r8
80006e60:	f2 08 18 00 	cp.b	r8,r9
80006e64:	c0 e0       	breq	80006e80 <__sfvwrite_r+0x188>
80006e66:	06 9b       	mov	r11,r3
80006e68:	08 9a       	mov	r10,r4
80006e6a:	e0 a0 03 4a 	rcall	800074fe <memmove>
80006e6e:	6e 08       	ld.w	r8,r7[0x0]
80006e70:	08 08       	add	r8,r4
80006e72:	0e 9b       	mov	r11,r7
80006e74:	8f 08       	st.w	r7[0x0],r8
80006e76:	0a 9c       	mov	r12,r5
80006e78:	fe b0 fd 08 	rcall	80006888 <_fflush_r>
80006e7c:	c1 90       	breq	80006eae <__sfvwrite_r+0x1b6>
80006e7e:	c8 48       	rjmp	80006f86 <__sfvwrite_r+0x28e>
80006e80:	6e 59       	ld.w	r9,r7[0x14]
80006e82:	12 36       	cp.w	r6,r9
80006e84:	c0 a3       	brcs	80006e98 <__sfvwrite_r+0x1a0>
80006e86:	6e a8       	ld.w	r8,r7[0x28]
80006e88:	06 9a       	mov	r10,r3
80006e8a:	6e 8b       	ld.w	r11,r7[0x20]
80006e8c:	0a 9c       	mov	r12,r5
80006e8e:	5d 18       	icall	r8
80006e90:	18 94       	mov	r4,r12
80006e92:	e0 89 00 0e 	brgt	80006eae <__sfvwrite_r+0x1b6>
80006e96:	c7 88       	rjmp	80006f86 <__sfvwrite_r+0x28e>
80006e98:	0c 9a       	mov	r10,r6
80006e9a:	06 9b       	mov	r11,r3
80006e9c:	e0 a0 03 31 	rcall	800074fe <memmove>
80006ea0:	6e 08       	ld.w	r8,r7[0x0]
80006ea2:	0c 08       	add	r8,r6
80006ea4:	0c 94       	mov	r4,r6
80006ea6:	8f 08       	st.w	r7[0x0],r8
80006ea8:	6e 28       	ld.w	r8,r7[0x8]
80006eaa:	0c 18       	sub	r8,r6
80006eac:	8f 28       	st.w	r7[0x8],r8
80006eae:	62 28       	ld.w	r8,r1[0x8]
80006eb0:	08 18       	sub	r8,r4
80006eb2:	83 28       	st.w	r1[0x8],r8
80006eb4:	c6 e0       	breq	80006f90 <__sfvwrite_r+0x298>
80006eb6:	08 16       	sub	r6,r4
80006eb8:	08 03       	add	r3,r4
80006eba:	c6 fb       	rjmp	80006d98 <__sfvwrite_r+0xa0>
80006ebc:	60 03       	ld.w	r3,r0[0x0]
80006ebe:	60 11       	ld.w	r1,r0[0x4]
80006ec0:	30 08       	mov	r8,0
80006ec2:	2f 80       	sub	r0,-8
80006ec4:	50 08       	stdsp	sp[0x0],r8
80006ec6:	58 01       	cp.w	r1,0
80006ec8:	cf a0       	breq	80006ebc <__sfvwrite_r+0x1c4>
80006eca:	40 0a       	lddsp	r10,sp[0x0]
80006ecc:	58 0a       	cp.w	r10,0
80006ece:	c1 51       	brne	80006ef8 <__sfvwrite_r+0x200>
80006ed0:	e2 c6 ff ff 	sub	r6,r1,-1
80006ed4:	02 9a       	mov	r10,r1
80006ed6:	30 ab       	mov	r11,10
80006ed8:	06 9c       	mov	r12,r3
80006eda:	e0 a0 03 07 	rcall	800074e8 <memchr>
80006ede:	f8 c8 ff ff 	sub	r8,r12,-1
80006ee2:	58 0c       	cp.w	r12,0
80006ee4:	f1 d3 e1 16 	subne	r6,r8,r3
80006ee8:	f9 b9 01 01 	movne	r9,1
80006eec:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006ef0:	f9 b8 00 01 	moveq	r8,1
80006ef4:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006ef8:	02 36       	cp.w	r6,r1
80006efa:	ec 04 17 80 	movls	r4,r6
80006efe:	e2 04 17 b0 	movhi	r4,r1
80006f02:	6e 59       	ld.w	r9,r7[0x14]
80006f04:	6e 25       	ld.w	r5,r7[0x8]
80006f06:	f2 05 00 05 	add	r5,r9,r5
80006f0a:	0a 34       	cp.w	r4,r5
80006f0c:	5f 9a       	srgt	r10
80006f0e:	6e 0c       	ld.w	r12,r7[0x0]
80006f10:	6e 48       	ld.w	r8,r7[0x10]
80006f12:	10 3c       	cp.w	r12,r8
80006f14:	5f b8       	srhi	r8
80006f16:	f5 e8 00 08 	and	r8,r10,r8
80006f1a:	30 0a       	mov	r10,0
80006f1c:	f4 08 18 00 	cp.b	r8,r10
80006f20:	c0 e0       	breq	80006f3c <__sfvwrite_r+0x244>
80006f22:	06 9b       	mov	r11,r3
80006f24:	0a 9a       	mov	r10,r5
80006f26:	e0 a0 02 ec 	rcall	800074fe <memmove>
80006f2a:	6e 08       	ld.w	r8,r7[0x0]
80006f2c:	0a 08       	add	r8,r5
80006f2e:	0e 9b       	mov	r11,r7
80006f30:	8f 08       	st.w	r7[0x0],r8
80006f32:	40 1c       	lddsp	r12,sp[0x4]
80006f34:	fe b0 fc aa 	rcall	80006888 <_fflush_r>
80006f38:	c1 80       	breq	80006f68 <__sfvwrite_r+0x270>
80006f3a:	c2 68       	rjmp	80006f86 <__sfvwrite_r+0x28e>
80006f3c:	12 34       	cp.w	r4,r9
80006f3e:	c0 a5       	brlt	80006f52 <__sfvwrite_r+0x25a>
80006f40:	6e a8       	ld.w	r8,r7[0x28]
80006f42:	06 9a       	mov	r10,r3
80006f44:	6e 8b       	ld.w	r11,r7[0x20]
80006f46:	40 1c       	lddsp	r12,sp[0x4]
80006f48:	5d 18       	icall	r8
80006f4a:	18 95       	mov	r5,r12
80006f4c:	e0 89 00 0e 	brgt	80006f68 <__sfvwrite_r+0x270>
80006f50:	c1 b8       	rjmp	80006f86 <__sfvwrite_r+0x28e>
80006f52:	08 9a       	mov	r10,r4
80006f54:	06 9b       	mov	r11,r3
80006f56:	e0 a0 02 d4 	rcall	800074fe <memmove>
80006f5a:	6e 08       	ld.w	r8,r7[0x0]
80006f5c:	08 08       	add	r8,r4
80006f5e:	08 95       	mov	r5,r4
80006f60:	8f 08       	st.w	r7[0x0],r8
80006f62:	6e 28       	ld.w	r8,r7[0x8]
80006f64:	08 18       	sub	r8,r4
80006f66:	8f 28       	st.w	r7[0x8],r8
80006f68:	0a 16       	sub	r6,r5
80006f6a:	c0 71       	brne	80006f78 <__sfvwrite_r+0x280>
80006f6c:	0e 9b       	mov	r11,r7
80006f6e:	40 1c       	lddsp	r12,sp[0x4]
80006f70:	fe b0 fc 8c 	rcall	80006888 <_fflush_r>
80006f74:	c0 91       	brne	80006f86 <__sfvwrite_r+0x28e>
80006f76:	50 06       	stdsp	sp[0x0],r6
80006f78:	64 28       	ld.w	r8,r2[0x8]
80006f7a:	0a 18       	sub	r8,r5
80006f7c:	85 28       	st.w	r2[0x8],r8
80006f7e:	c0 90       	breq	80006f90 <__sfvwrite_r+0x298>
80006f80:	0a 11       	sub	r1,r5
80006f82:	0a 03       	add	r3,r5
80006f84:	ca 1b       	rjmp	80006ec6 <__sfvwrite_r+0x1ce>
80006f86:	8e 68       	ld.sh	r8,r7[0xc]
80006f88:	a7 a8       	sbr	r8,0x6
80006f8a:	ae 68       	st.h	r7[0xc],r8
80006f8c:	3f fc       	mov	r12,-1
80006f8e:	c0 28       	rjmp	80006f92 <__sfvwrite_r+0x29a>
80006f90:	30 0c       	mov	r12,0
80006f92:	2f dd       	sub	sp,-12
80006f94:	d8 32       	popm	r0-r7,pc
80006f96:	d7 03       	nop

80006f98 <_fwalk>:
80006f98:	d4 31       	pushm	r0-r7,lr
80006f9a:	30 05       	mov	r5,0
80006f9c:	16 91       	mov	r1,r11
80006f9e:	f8 c7 ff 28 	sub	r7,r12,-216
80006fa2:	0a 92       	mov	r2,r5
80006fa4:	fe b0 fc f8 	rcall	80006994 <__sfp_lock_acquire>
80006fa8:	3f f3       	mov	r3,-1
80006faa:	c1 68       	rjmp	80006fd6 <_fwalk+0x3e>
80006fac:	6e 26       	ld.w	r6,r7[0x8]
80006fae:	6e 14       	ld.w	r4,r7[0x4]
80006fb0:	2f 46       	sub	r6,-12
80006fb2:	c0 c8       	rjmp	80006fca <_fwalk+0x32>
80006fb4:	8c 08       	ld.sh	r8,r6[0x0]
80006fb6:	e4 08 19 00 	cp.h	r8,r2
80006fba:	c0 70       	breq	80006fc8 <_fwalk+0x30>
80006fbc:	8c 18       	ld.sh	r8,r6[0x2]
80006fbe:	e6 08 19 00 	cp.h	r8,r3
80006fc2:	c0 30       	breq	80006fc8 <_fwalk+0x30>
80006fc4:	5d 11       	icall	r1
80006fc6:	18 45       	or	r5,r12
80006fc8:	2a 46       	sub	r6,-92
80006fca:	20 14       	sub	r4,1
80006fcc:	ec cc 00 0c 	sub	r12,r6,12
80006fd0:	58 04       	cp.w	r4,0
80006fd2:	cf 14       	brge	80006fb4 <_fwalk+0x1c>
80006fd4:	6e 07       	ld.w	r7,r7[0x0]
80006fd6:	58 07       	cp.w	r7,0
80006fd8:	ce a1       	brne	80006fac <_fwalk+0x14>
80006fda:	fe b0 fc de 	rcall	80006996 <__sfp_lock_release>
80006fde:	0a 9c       	mov	r12,r5
80006fe0:	d8 32       	popm	r0-r7,pc
80006fe2:	d7 03       	nop

80006fe4 <_localeconv_r>:
80006fe4:	fe cc d7 c8 	sub	r12,pc,-10296
80006fe8:	5e fc       	retal	r12
80006fea:	d7 03       	nop

80006fec <__smakebuf_r>:
80006fec:	d4 21       	pushm	r4-r7,lr
80006fee:	20 fd       	sub	sp,60
80006ff0:	96 68       	ld.sh	r8,r11[0xc]
80006ff2:	16 97       	mov	r7,r11
80006ff4:	18 96       	mov	r6,r12
80006ff6:	e2 18 00 02 	andl	r8,0x2,COH
80006ffa:	c3 c1       	brne	80007072 <__smakebuf_r+0x86>
80006ffc:	96 7b       	ld.sh	r11,r11[0xe]
80006ffe:	f0 0b 19 00 	cp.h	r11,r8
80007002:	c0 55       	brlt	8000700c <__smakebuf_r+0x20>
80007004:	1a 9a       	mov	r10,sp
80007006:	e0 a0 08 9d 	rcall	80008140 <_fstat_r>
8000700a:	c0 f4       	brge	80007028 <__smakebuf_r+0x3c>
8000700c:	8e 65       	ld.sh	r5,r7[0xc]
8000700e:	0a 98       	mov	r8,r5
80007010:	ab b8       	sbr	r8,0xb
80007012:	e2 15 00 80 	andl	r5,0x80,COH
80007016:	ae 68       	st.h	r7[0xc],r8
80007018:	30 04       	mov	r4,0
8000701a:	e0 68 04 00 	mov	r8,1024
8000701e:	f9 b5 01 40 	movne	r5,64
80007022:	f0 05 17 00 	moveq	r5,r8
80007026:	c1 c8       	rjmp	8000705e <__smakebuf_r+0x72>
80007028:	40 18       	lddsp	r8,sp[0x4]
8000702a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000702e:	e0 48 20 00 	cp.w	r8,8192
80007032:	5f 04       	sreq	r4
80007034:	e0 48 80 00 	cp.w	r8,32768
80007038:	c0 e1       	brne	80007054 <__smakebuf_r+0x68>
8000703a:	6e b9       	ld.w	r9,r7[0x2c]
8000703c:	fe c8 f1 e8 	sub	r8,pc,-3608
80007040:	10 39       	cp.w	r9,r8
80007042:	c0 91       	brne	80007054 <__smakebuf_r+0x68>
80007044:	8e 68       	ld.sh	r8,r7[0xc]
80007046:	e0 65 04 00 	mov	r5,1024
8000704a:	ab a8       	sbr	r8,0xa
8000704c:	ef 45 00 50 	st.w	r7[80],r5
80007050:	ae 68       	st.h	r7[0xc],r8
80007052:	c0 68       	rjmp	8000705e <__smakebuf_r+0x72>
80007054:	8e 68       	ld.sh	r8,r7[0xc]
80007056:	e0 65 04 00 	mov	r5,1024
8000705a:	ab b8       	sbr	r8,0xb
8000705c:	ae 68       	st.h	r7[0xc],r8
8000705e:	0a 9b       	mov	r11,r5
80007060:	0c 9c       	mov	r12,r6
80007062:	c2 bc       	rcall	800070b8 <_malloc_r>
80007064:	8e 68       	ld.sh	r8,r7[0xc]
80007066:	c0 d1       	brne	80007080 <__smakebuf_r+0x94>
80007068:	ed b8 00 09 	bld	r8,0x9
8000706c:	c1 b0       	breq	800070a2 <__smakebuf_r+0xb6>
8000706e:	a1 b8       	sbr	r8,0x1
80007070:	ae 68       	st.h	r7[0xc],r8
80007072:	ee c8 ff b9 	sub	r8,r7,-71
80007076:	8f 48       	st.w	r7[0x10],r8
80007078:	8f 08       	st.w	r7[0x0],r8
8000707a:	30 18       	mov	r8,1
8000707c:	8f 58       	st.w	r7[0x14],r8
8000707e:	c1 28       	rjmp	800070a2 <__smakebuf_r+0xb6>
80007080:	a7 b8       	sbr	r8,0x7
80007082:	8f 4c       	st.w	r7[0x10],r12
80007084:	ae 68       	st.h	r7[0xc],r8
80007086:	8f 55       	st.w	r7[0x14],r5
80007088:	fe c8 06 f0 	sub	r8,pc,1776
8000708c:	8f 0c       	st.w	r7[0x0],r12
8000708e:	8d a8       	st.w	r6[0x28],r8
80007090:	58 04       	cp.w	r4,0
80007092:	c0 80       	breq	800070a2 <__smakebuf_r+0xb6>
80007094:	8e 7c       	ld.sh	r12,r7[0xe]
80007096:	e0 a0 07 47 	rcall	80007f24 <isatty>
8000709a:	c0 40       	breq	800070a2 <__smakebuf_r+0xb6>
8000709c:	8e 68       	ld.sh	r8,r7[0xc]
8000709e:	a1 a8       	sbr	r8,0x0
800070a0:	ae 68       	st.h	r7[0xc],r8
800070a2:	2f 1d       	sub	sp,-60
800070a4:	d8 22       	popm	r4-r7,pc
800070a6:	d7 03       	nop

800070a8 <malloc>:
800070a8:	d4 01       	pushm	lr
800070aa:	e0 68 01 04 	mov	r8,260
800070ae:	18 9b       	mov	r11,r12
800070b0:	70 0c       	ld.w	r12,r8[0x0]
800070b2:	c0 3c       	rcall	800070b8 <_malloc_r>
800070b4:	d8 02       	popm	pc
800070b6:	d7 03       	nop

800070b8 <_malloc_r>:
800070b8:	d4 31       	pushm	r0-r7,lr
800070ba:	f6 c8 ff f5 	sub	r8,r11,-11
800070be:	18 95       	mov	r5,r12
800070c0:	10 97       	mov	r7,r8
800070c2:	e0 17 ff f8 	andl	r7,0xfff8
800070c6:	59 68       	cp.w	r8,22
800070c8:	f9 b7 08 10 	movls	r7,16
800070cc:	16 37       	cp.w	r7,r11
800070ce:	5f 38       	srlo	r8
800070d0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800070d4:	c0 50       	breq	800070de <_malloc_r+0x26>
800070d6:	30 c8       	mov	r8,12
800070d8:	99 38       	st.w	r12[0xc],r8
800070da:	e0 8f 01 f7 	bral	800074c8 <_malloc_r+0x410>
800070de:	e0 a0 02 36 	rcall	8000754a <__malloc_lock>
800070e2:	e0 47 01 f7 	cp.w	r7,503
800070e6:	e0 8b 00 1d 	brhi	80007120 <_malloc_r+0x68>
800070ea:	ee 03 16 03 	lsr	r3,r7,0x3
800070ee:	e0 68 01 08 	mov	r8,264
800070f2:	f0 03 00 38 	add	r8,r8,r3<<0x3
800070f6:	70 36       	ld.w	r6,r8[0xc]
800070f8:	10 36       	cp.w	r6,r8
800070fa:	c0 61       	brne	80007106 <_malloc_r+0x4e>
800070fc:	ec c8 ff f8 	sub	r8,r6,-8
80007100:	70 36       	ld.w	r6,r8[0xc]
80007102:	10 36       	cp.w	r6,r8
80007104:	c0 c0       	breq	8000711c <_malloc_r+0x64>
80007106:	6c 18       	ld.w	r8,r6[0x4]
80007108:	e0 18 ff fc 	andl	r8,0xfffc
8000710c:	6c 3a       	ld.w	r10,r6[0xc]
8000710e:	ec 08 00 09 	add	r9,r6,r8
80007112:	0a 9c       	mov	r12,r5
80007114:	6c 28       	ld.w	r8,r6[0x8]
80007116:	95 28       	st.w	r10[0x8],r8
80007118:	91 3a       	st.w	r8[0xc],r10
8000711a:	c4 78       	rjmp	800071a8 <_malloc_r+0xf0>
8000711c:	2f e3       	sub	r3,-2
8000711e:	c4 d8       	rjmp	800071b8 <_malloc_r+0x100>
80007120:	ee 03 16 09 	lsr	r3,r7,0x9
80007124:	c0 41       	brne	8000712c <_malloc_r+0x74>
80007126:	ee 03 16 03 	lsr	r3,r7,0x3
8000712a:	c2 68       	rjmp	80007176 <_malloc_r+0xbe>
8000712c:	58 43       	cp.w	r3,4
8000712e:	e0 8b 00 06 	brhi	8000713a <_malloc_r+0x82>
80007132:	ee 03 16 06 	lsr	r3,r7,0x6
80007136:	2c 83       	sub	r3,-56
80007138:	c1 f8       	rjmp	80007176 <_malloc_r+0xbe>
8000713a:	59 43       	cp.w	r3,20
8000713c:	e0 8b 00 04 	brhi	80007144 <_malloc_r+0x8c>
80007140:	2a 53       	sub	r3,-91
80007142:	c1 a8       	rjmp	80007176 <_malloc_r+0xbe>
80007144:	e0 43 00 54 	cp.w	r3,84
80007148:	e0 8b 00 06 	brhi	80007154 <_malloc_r+0x9c>
8000714c:	ee 03 16 0c 	lsr	r3,r7,0xc
80007150:	29 23       	sub	r3,-110
80007152:	c1 28       	rjmp	80007176 <_malloc_r+0xbe>
80007154:	e0 43 01 54 	cp.w	r3,340
80007158:	e0 8b 00 06 	brhi	80007164 <_malloc_r+0xac>
8000715c:	ee 03 16 0f 	lsr	r3,r7,0xf
80007160:	28 93       	sub	r3,-119
80007162:	c0 a8       	rjmp	80007176 <_malloc_r+0xbe>
80007164:	e0 43 05 54 	cp.w	r3,1364
80007168:	e0 88 00 04 	brls	80007170 <_malloc_r+0xb8>
8000716c:	37 e3       	mov	r3,126
8000716e:	c0 48       	rjmp	80007176 <_malloc_r+0xbe>
80007170:	ee 03 16 12 	lsr	r3,r7,0x12
80007174:	28 43       	sub	r3,-124
80007176:	e0 6a 01 08 	mov	r10,264
8000717a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000717e:	74 36       	ld.w	r6,r10[0xc]
80007180:	c1 98       	rjmp	800071b2 <_malloc_r+0xfa>
80007182:	6c 19       	ld.w	r9,r6[0x4]
80007184:	e0 19 ff fc 	andl	r9,0xfffc
80007188:	f2 07 01 0b 	sub	r11,r9,r7
8000718c:	58 fb       	cp.w	r11,15
8000718e:	e0 8a 00 04 	brle	80007196 <_malloc_r+0xde>
80007192:	20 13       	sub	r3,1
80007194:	c1 18       	rjmp	800071b6 <_malloc_r+0xfe>
80007196:	6c 38       	ld.w	r8,r6[0xc]
80007198:	58 0b       	cp.w	r11,0
8000719a:	c0 b5       	brlt	800071b0 <_malloc_r+0xf8>
8000719c:	6c 2a       	ld.w	r10,r6[0x8]
8000719e:	ec 09 00 09 	add	r9,r6,r9
800071a2:	0a 9c       	mov	r12,r5
800071a4:	91 2a       	st.w	r8[0x8],r10
800071a6:	95 38       	st.w	r10[0xc],r8
800071a8:	72 18       	ld.w	r8,r9[0x4]
800071aa:	a1 a8       	sbr	r8,0x0
800071ac:	93 18       	st.w	r9[0x4],r8
800071ae:	cb c8       	rjmp	80007326 <_malloc_r+0x26e>
800071b0:	10 96       	mov	r6,r8
800071b2:	14 36       	cp.w	r6,r10
800071b4:	ce 71       	brne	80007182 <_malloc_r+0xca>
800071b6:	2f f3       	sub	r3,-1
800071b8:	e0 6a 01 08 	mov	r10,264
800071bc:	f4 cc ff f8 	sub	r12,r10,-8
800071c0:	78 26       	ld.w	r6,r12[0x8]
800071c2:	18 36       	cp.w	r6,r12
800071c4:	c6 c0       	breq	8000729c <_malloc_r+0x1e4>
800071c6:	6c 19       	ld.w	r9,r6[0x4]
800071c8:	e0 19 ff fc 	andl	r9,0xfffc
800071cc:	f2 07 01 08 	sub	r8,r9,r7
800071d0:	58 f8       	cp.w	r8,15
800071d2:	e0 89 00 8f 	brgt	800072f0 <_malloc_r+0x238>
800071d6:	99 3c       	st.w	r12[0xc],r12
800071d8:	99 2c       	st.w	r12[0x8],r12
800071da:	58 08       	cp.w	r8,0
800071dc:	c0 55       	brlt	800071e6 <_malloc_r+0x12e>
800071de:	ec 09 00 09 	add	r9,r6,r9
800071e2:	0a 9c       	mov	r12,r5
800071e4:	ce 2b       	rjmp	800071a8 <_malloc_r+0xf0>
800071e6:	e0 49 01 ff 	cp.w	r9,511
800071ea:	e0 8b 00 13 	brhi	80007210 <_malloc_r+0x158>
800071ee:	a3 99       	lsr	r9,0x3
800071f0:	f4 09 00 38 	add	r8,r10,r9<<0x3
800071f4:	70 2b       	ld.w	r11,r8[0x8]
800071f6:	8d 38       	st.w	r6[0xc],r8
800071f8:	8d 2b       	st.w	r6[0x8],r11
800071fa:	97 36       	st.w	r11[0xc],r6
800071fc:	91 26       	st.w	r8[0x8],r6
800071fe:	a3 49       	asr	r9,0x2
80007200:	74 18       	ld.w	r8,r10[0x4]
80007202:	30 1b       	mov	r11,1
80007204:	f6 09 09 49 	lsl	r9,r11,r9
80007208:	f1 e9 10 09 	or	r9,r8,r9
8000720c:	95 19       	st.w	r10[0x4],r9
8000720e:	c4 78       	rjmp	8000729c <_malloc_r+0x1e4>
80007210:	f2 0a 16 09 	lsr	r10,r9,0x9
80007214:	58 4a       	cp.w	r10,4
80007216:	e0 8b 00 07 	brhi	80007224 <_malloc_r+0x16c>
8000721a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000721e:	2c 8a       	sub	r10,-56
80007220:	c2 08       	rjmp	80007260 <_malloc_r+0x1a8>
80007222:	d7 03       	nop
80007224:	59 4a       	cp.w	r10,20
80007226:	e0 8b 00 04 	brhi	8000722e <_malloc_r+0x176>
8000722a:	2a 5a       	sub	r10,-91
8000722c:	c1 a8       	rjmp	80007260 <_malloc_r+0x1a8>
8000722e:	e0 4a 00 54 	cp.w	r10,84
80007232:	e0 8b 00 06 	brhi	8000723e <_malloc_r+0x186>
80007236:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000723a:	29 2a       	sub	r10,-110
8000723c:	c1 28       	rjmp	80007260 <_malloc_r+0x1a8>
8000723e:	e0 4a 01 54 	cp.w	r10,340
80007242:	e0 8b 00 06 	brhi	8000724e <_malloc_r+0x196>
80007246:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000724a:	28 9a       	sub	r10,-119
8000724c:	c0 a8       	rjmp	80007260 <_malloc_r+0x1a8>
8000724e:	e0 4a 05 54 	cp.w	r10,1364
80007252:	e0 88 00 04 	brls	8000725a <_malloc_r+0x1a2>
80007256:	37 ea       	mov	r10,126
80007258:	c0 48       	rjmp	80007260 <_malloc_r+0x1a8>
8000725a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000725e:	28 4a       	sub	r10,-124
80007260:	e0 6b 01 08 	mov	r11,264
80007264:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007268:	68 28       	ld.w	r8,r4[0x8]
8000726a:	08 38       	cp.w	r8,r4
8000726c:	c0 e1       	brne	80007288 <_malloc_r+0x1d0>
8000726e:	76 19       	ld.w	r9,r11[0x4]
80007270:	a3 4a       	asr	r10,0x2
80007272:	30 1e       	mov	lr,1
80007274:	fc 0a 09 4a 	lsl	r10,lr,r10
80007278:	f3 ea 10 0a 	or	r10,r9,r10
8000727c:	10 99       	mov	r9,r8
8000727e:	97 1a       	st.w	r11[0x4],r10
80007280:	c0 a8       	rjmp	80007294 <_malloc_r+0x1dc>
80007282:	70 28       	ld.w	r8,r8[0x8]
80007284:	08 38       	cp.w	r8,r4
80007286:	c0 60       	breq	80007292 <_malloc_r+0x1da>
80007288:	70 1a       	ld.w	r10,r8[0x4]
8000728a:	e0 1a ff fc 	andl	r10,0xfffc
8000728e:	14 39       	cp.w	r9,r10
80007290:	cf 93       	brcs	80007282 <_malloc_r+0x1ca>
80007292:	70 39       	ld.w	r9,r8[0xc]
80007294:	8d 39       	st.w	r6[0xc],r9
80007296:	8d 28       	st.w	r6[0x8],r8
80007298:	91 36       	st.w	r8[0xc],r6
8000729a:	93 26       	st.w	r9[0x8],r6
8000729c:	e6 08 14 02 	asr	r8,r3,0x2
800072a0:	30 1b       	mov	r11,1
800072a2:	e0 64 01 08 	mov	r4,264
800072a6:	f6 08 09 4b 	lsl	r11,r11,r8
800072aa:	68 18       	ld.w	r8,r4[0x4]
800072ac:	10 3b       	cp.w	r11,r8
800072ae:	e0 8b 00 69 	brhi	80007380 <_malloc_r+0x2c8>
800072b2:	f7 e8 00 09 	and	r9,r11,r8
800072b6:	c0 b1       	brne	800072cc <_malloc_r+0x214>
800072b8:	e0 13 ff fc 	andl	r3,0xfffc
800072bc:	a1 7b       	lsl	r11,0x1
800072be:	2f c3       	sub	r3,-4
800072c0:	c0 38       	rjmp	800072c6 <_malloc_r+0x20e>
800072c2:	2f c3       	sub	r3,-4
800072c4:	a1 7b       	lsl	r11,0x1
800072c6:	f7 e8 00 09 	and	r9,r11,r8
800072ca:	cf c0       	breq	800072c2 <_malloc_r+0x20a>
800072cc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800072d0:	06 92       	mov	r2,r3
800072d2:	1c 91       	mov	r1,lr
800072d4:	62 36       	ld.w	r6,r1[0xc]
800072d6:	c2 d8       	rjmp	80007330 <_malloc_r+0x278>
800072d8:	6c 1a       	ld.w	r10,r6[0x4]
800072da:	e0 1a ff fc 	andl	r10,0xfffc
800072de:	f4 07 01 08 	sub	r8,r10,r7
800072e2:	58 f8       	cp.w	r8,15
800072e4:	e0 8a 00 15 	brle	8000730e <_malloc_r+0x256>
800072e8:	6c 3a       	ld.w	r10,r6[0xc]
800072ea:	6c 29       	ld.w	r9,r6[0x8]
800072ec:	95 29       	st.w	r10[0x8],r9
800072ee:	93 3a       	st.w	r9[0xc],r10
800072f0:	0e 99       	mov	r9,r7
800072f2:	ec 07 00 07 	add	r7,r6,r7
800072f6:	a1 a9       	sbr	r9,0x0
800072f8:	99 37       	st.w	r12[0xc],r7
800072fa:	99 27       	st.w	r12[0x8],r7
800072fc:	8d 19       	st.w	r6[0x4],r9
800072fe:	ee 08 09 08 	st.w	r7[r8],r8
80007302:	8f 2c       	st.w	r7[0x8],r12
80007304:	8f 3c       	st.w	r7[0xc],r12
80007306:	a1 a8       	sbr	r8,0x0
80007308:	0a 9c       	mov	r12,r5
8000730a:	8f 18       	st.w	r7[0x4],r8
8000730c:	c0 d8       	rjmp	80007326 <_malloc_r+0x26e>
8000730e:	6c 39       	ld.w	r9,r6[0xc]
80007310:	58 08       	cp.w	r8,0
80007312:	c0 e5       	brlt	8000732e <_malloc_r+0x276>
80007314:	ec 0a 00 0a 	add	r10,r6,r10
80007318:	74 18       	ld.w	r8,r10[0x4]
8000731a:	a1 a8       	sbr	r8,0x0
8000731c:	0a 9c       	mov	r12,r5
8000731e:	95 18       	st.w	r10[0x4],r8
80007320:	6c 28       	ld.w	r8,r6[0x8]
80007322:	93 28       	st.w	r9[0x8],r8
80007324:	91 39       	st.w	r8[0xc],r9
80007326:	c1 3d       	rcall	8000754c <__malloc_unlock>
80007328:	ec cc ff f8 	sub	r12,r6,-8
8000732c:	d8 32       	popm	r0-r7,pc
8000732e:	12 96       	mov	r6,r9
80007330:	02 36       	cp.w	r6,r1
80007332:	cd 31       	brne	800072d8 <_malloc_r+0x220>
80007334:	2f f2       	sub	r2,-1
80007336:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000733a:	c0 30       	breq	80007340 <_malloc_r+0x288>
8000733c:	2f 81       	sub	r1,-8
8000733e:	cc bb       	rjmp	800072d4 <_malloc_r+0x21c>
80007340:	1c 98       	mov	r8,lr
80007342:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007346:	c0 81       	brne	80007356 <_malloc_r+0x29e>
80007348:	68 19       	ld.w	r9,r4[0x4]
8000734a:	f6 08 11 ff 	rsub	r8,r11,-1
8000734e:	f3 e8 00 08 	and	r8,r9,r8
80007352:	89 18       	st.w	r4[0x4],r8
80007354:	c0 78       	rjmp	80007362 <_malloc_r+0x2aa>
80007356:	f0 c9 00 08 	sub	r9,r8,8
8000735a:	20 13       	sub	r3,1
8000735c:	70 08       	ld.w	r8,r8[0x0]
8000735e:	12 38       	cp.w	r8,r9
80007360:	cf 10       	breq	80007342 <_malloc_r+0x28a>
80007362:	a1 7b       	lsl	r11,0x1
80007364:	68 18       	ld.w	r8,r4[0x4]
80007366:	10 3b       	cp.w	r11,r8
80007368:	e0 8b 00 0c 	brhi	80007380 <_malloc_r+0x2c8>
8000736c:	58 0b       	cp.w	r11,0
8000736e:	c0 90       	breq	80007380 <_malloc_r+0x2c8>
80007370:	04 93       	mov	r3,r2
80007372:	c0 38       	rjmp	80007378 <_malloc_r+0x2c0>
80007374:	2f c3       	sub	r3,-4
80007376:	a1 7b       	lsl	r11,0x1
80007378:	f7 e8 00 09 	and	r9,r11,r8
8000737c:	ca 81       	brne	800072cc <_malloc_r+0x214>
8000737e:	cf bb       	rjmp	80007374 <_malloc_r+0x2bc>
80007380:	68 23       	ld.w	r3,r4[0x8]
80007382:	66 12       	ld.w	r2,r3[0x4]
80007384:	e0 12 ff fc 	andl	r2,0xfffc
80007388:	0e 32       	cp.w	r2,r7
8000738a:	5f 39       	srlo	r9
8000738c:	e4 07 01 08 	sub	r8,r2,r7
80007390:	58 f8       	cp.w	r8,15
80007392:	5f aa       	srle	r10
80007394:	f5 e9 10 09 	or	r9,r10,r9
80007398:	e0 80 00 9a 	breq	800074cc <_malloc_r+0x414>
8000739c:	e0 68 06 30 	mov	r8,1584
800073a0:	70 01       	ld.w	r1,r8[0x0]
800073a2:	e0 68 05 14 	mov	r8,1300
800073a6:	2f 01       	sub	r1,-16
800073a8:	70 08       	ld.w	r8,r8[0x0]
800073aa:	0e 01       	add	r1,r7
800073ac:	5b f8       	cp.w	r8,-1
800073ae:	c0 40       	breq	800073b6 <_malloc_r+0x2fe>
800073b0:	28 11       	sub	r1,-127
800073b2:	e0 11 ff 80 	andl	r1,0xff80
800073b6:	02 9b       	mov	r11,r1
800073b8:	0a 9c       	mov	r12,r5
800073ba:	e0 a0 05 39 	rcall	80007e2c <_sbrk_r>
800073be:	18 96       	mov	r6,r12
800073c0:	5b fc       	cp.w	r12,-1
800073c2:	c7 50       	breq	800074ac <_malloc_r+0x3f4>
800073c4:	e6 02 00 08 	add	r8,r3,r2
800073c8:	10 3c       	cp.w	r12,r8
800073ca:	c0 32       	brcc	800073d0 <_malloc_r+0x318>
800073cc:	08 33       	cp.w	r3,r4
800073ce:	c6 f1       	brne	800074ac <_malloc_r+0x3f4>
800073d0:	e0 6a 06 34 	mov	r10,1588
800073d4:	74 09       	ld.w	r9,r10[0x0]
800073d6:	e2 09 00 09 	add	r9,r1,r9
800073da:	95 09       	st.w	r10[0x0],r9
800073dc:	10 36       	cp.w	r6,r8
800073de:	c0 a1       	brne	800073f2 <_malloc_r+0x33a>
800073e0:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800073e4:	c0 71       	brne	800073f2 <_malloc_r+0x33a>
800073e6:	e2 02 00 02 	add	r2,r1,r2
800073ea:	68 28       	ld.w	r8,r4[0x8]
800073ec:	a1 a2       	sbr	r2,0x0
800073ee:	91 12       	st.w	r8[0x4],r2
800073f0:	c4 f8       	rjmp	8000748e <_malloc_r+0x3d6>
800073f2:	e0 6a 05 14 	mov	r10,1300
800073f6:	74 0b       	ld.w	r11,r10[0x0]
800073f8:	5b fb       	cp.w	r11,-1
800073fa:	c0 31       	brne	80007400 <_malloc_r+0x348>
800073fc:	95 06       	st.w	r10[0x0],r6
800073fe:	c0 78       	rjmp	8000740c <_malloc_r+0x354>
80007400:	ec 09 00 09 	add	r9,r6,r9
80007404:	e0 6a 06 34 	mov	r10,1588
80007408:	10 19       	sub	r9,r8
8000740a:	95 09       	st.w	r10[0x0],r9
8000740c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007410:	f0 09 11 08 	rsub	r9,r8,8
80007414:	58 08       	cp.w	r8,0
80007416:	f2 08 17 10 	movne	r8,r9
8000741a:	ed d8 e1 06 	addne	r6,r6,r8
8000741e:	28 08       	sub	r8,-128
80007420:	ec 01 00 01 	add	r1,r6,r1
80007424:	0a 9c       	mov	r12,r5
80007426:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000742a:	f0 01 01 01 	sub	r1,r8,r1
8000742e:	02 9b       	mov	r11,r1
80007430:	e0 a0 04 fe 	rcall	80007e2c <_sbrk_r>
80007434:	e0 68 06 34 	mov	r8,1588
80007438:	5b fc       	cp.w	r12,-1
8000743a:	ec 0c 17 00 	moveq	r12,r6
8000743e:	f9 b1 00 00 	moveq	r1,0
80007442:	70 09       	ld.w	r9,r8[0x0]
80007444:	0c 1c       	sub	r12,r6
80007446:	89 26       	st.w	r4[0x8],r6
80007448:	02 0c       	add	r12,r1
8000744a:	12 01       	add	r1,r9
8000744c:	a1 ac       	sbr	r12,0x0
8000744e:	91 01       	st.w	r8[0x0],r1
80007450:	8d 1c       	st.w	r6[0x4],r12
80007452:	08 33       	cp.w	r3,r4
80007454:	c1 d0       	breq	8000748e <_malloc_r+0x3d6>
80007456:	58 f2       	cp.w	r2,15
80007458:	e0 8b 00 05 	brhi	80007462 <_malloc_r+0x3aa>
8000745c:	30 18       	mov	r8,1
8000745e:	8d 18       	st.w	r6[0x4],r8
80007460:	c2 68       	rjmp	800074ac <_malloc_r+0x3f4>
80007462:	30 59       	mov	r9,5
80007464:	20 c2       	sub	r2,12
80007466:	e0 12 ff f8 	andl	r2,0xfff8
8000746a:	e6 02 00 08 	add	r8,r3,r2
8000746e:	91 29       	st.w	r8[0x8],r9
80007470:	91 19       	st.w	r8[0x4],r9
80007472:	66 18       	ld.w	r8,r3[0x4]
80007474:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007478:	e5 e8 10 08 	or	r8,r2,r8
8000747c:	87 18       	st.w	r3[0x4],r8
8000747e:	58 f2       	cp.w	r2,15
80007480:	e0 88 00 07 	brls	8000748e <_malloc_r+0x3d6>
80007484:	e6 cb ff f8 	sub	r11,r3,-8
80007488:	0a 9c       	mov	r12,r5
8000748a:	fe b0 fb 71 	rcall	80006b6c <_free_r>
8000748e:	e0 69 06 2c 	mov	r9,1580
80007492:	72 0a       	ld.w	r10,r9[0x0]
80007494:	e0 68 06 34 	mov	r8,1588
80007498:	70 08       	ld.w	r8,r8[0x0]
8000749a:	14 38       	cp.w	r8,r10
8000749c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800074a0:	e0 69 06 28 	mov	r9,1576
800074a4:	72 0a       	ld.w	r10,r9[0x0]
800074a6:	14 38       	cp.w	r8,r10
800074a8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800074ac:	68 28       	ld.w	r8,r4[0x8]
800074ae:	70 18       	ld.w	r8,r8[0x4]
800074b0:	e0 18 ff fc 	andl	r8,0xfffc
800074b4:	0e 38       	cp.w	r8,r7
800074b6:	5f 39       	srlo	r9
800074b8:	0e 18       	sub	r8,r7
800074ba:	58 f8       	cp.w	r8,15
800074bc:	5f aa       	srle	r10
800074be:	f5 e9 10 09 	or	r9,r10,r9
800074c2:	c0 50       	breq	800074cc <_malloc_r+0x414>
800074c4:	0a 9c       	mov	r12,r5
800074c6:	c4 3c       	rcall	8000754c <__malloc_unlock>
800074c8:	d8 3a       	popm	r0-r7,pc,r12=0
800074ca:	d7 03       	nop
800074cc:	68 26       	ld.w	r6,r4[0x8]
800074ce:	a1 a8       	sbr	r8,0x0
800074d0:	0e 99       	mov	r9,r7
800074d2:	a1 a9       	sbr	r9,0x0
800074d4:	8d 19       	st.w	r6[0x4],r9
800074d6:	ec 07 00 07 	add	r7,r6,r7
800074da:	0a 9c       	mov	r12,r5
800074dc:	89 27       	st.w	r4[0x8],r7
800074de:	8f 18       	st.w	r7[0x4],r8
800074e0:	c3 6c       	rcall	8000754c <__malloc_unlock>
800074e2:	ec cc ff f8 	sub	r12,r6,-8
800074e6:	d8 32       	popm	r0-r7,pc

800074e8 <memchr>:
800074e8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800074ec:	c0 68       	rjmp	800074f8 <memchr+0x10>
800074ee:	20 1a       	sub	r10,1
800074f0:	19 88       	ld.ub	r8,r12[0x0]
800074f2:	16 38       	cp.w	r8,r11
800074f4:	5e 0c       	reteq	r12
800074f6:	2f fc       	sub	r12,-1
800074f8:	58 0a       	cp.w	r10,0
800074fa:	cf a1       	brne	800074ee <memchr+0x6>
800074fc:	5e fa       	retal	r10

800074fe <memmove>:
800074fe:	d4 01       	pushm	lr
80007500:	18 3b       	cp.w	r11,r12
80007502:	c1 92       	brcc	80007534 <memmove+0x36>
80007504:	f6 0a 00 09 	add	r9,r11,r10
80007508:	12 3c       	cp.w	r12,r9
8000750a:	c1 52       	brcc	80007534 <memmove+0x36>
8000750c:	f8 0a 00 0b 	add	r11,r12,r10
80007510:	30 08       	mov	r8,0
80007512:	c0 68       	rjmp	8000751e <memmove+0x20>
80007514:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007518:	20 1a       	sub	r10,1
8000751a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000751e:	20 18       	sub	r8,1
80007520:	58 0a       	cp.w	r10,0
80007522:	cf 91       	brne	80007514 <memmove+0x16>
80007524:	d8 02       	popm	pc
80007526:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000752a:	20 1a       	sub	r10,1
8000752c:	f8 08 0b 09 	st.b	r12[r8],r9
80007530:	2f f8       	sub	r8,-1
80007532:	c0 28       	rjmp	80007536 <memmove+0x38>
80007534:	30 08       	mov	r8,0
80007536:	58 0a       	cp.w	r10,0
80007538:	cf 71       	brne	80007526 <memmove+0x28>
8000753a:	d8 02       	popm	pc

8000753c <memset>:
8000753c:	18 98       	mov	r8,r12
8000753e:	c0 38       	rjmp	80007544 <memset+0x8>
80007540:	10 cb       	st.b	r8++,r11
80007542:	20 1a       	sub	r10,1
80007544:	58 0a       	cp.w	r10,0
80007546:	cf d1       	brne	80007540 <memset+0x4>
80007548:	5e fc       	retal	r12

8000754a <__malloc_lock>:
8000754a:	5e fc       	retal	r12

8000754c <__malloc_unlock>:
8000754c:	5e fc       	retal	r12

8000754e <__hi0bits>:
8000754e:	18 98       	mov	r8,r12
80007550:	e0 1c 00 00 	andl	r12,0x0
80007554:	f0 09 15 10 	lsl	r9,r8,0x10
80007558:	58 0c       	cp.w	r12,0
8000755a:	f2 08 17 00 	moveq	r8,r9
8000755e:	f9 bc 00 10 	moveq	r12,16
80007562:	f9 bc 01 00 	movne	r12,0
80007566:	10 9a       	mov	r10,r8
80007568:	f0 09 15 08 	lsl	r9,r8,0x8
8000756c:	e6 1a ff 00 	andh	r10,0xff00,COH
80007570:	f7 bc 00 f8 	subeq	r12,-8
80007574:	f2 08 17 00 	moveq	r8,r9
80007578:	10 9a       	mov	r10,r8
8000757a:	f0 09 15 04 	lsl	r9,r8,0x4
8000757e:	e6 1a f0 00 	andh	r10,0xf000,COH
80007582:	f7 bc 00 fc 	subeq	r12,-4
80007586:	f2 08 17 00 	moveq	r8,r9
8000758a:	10 9a       	mov	r10,r8
8000758c:	f0 09 15 02 	lsl	r9,r8,0x2
80007590:	e6 1a c0 00 	andh	r10,0xc000,COH
80007594:	f7 bc 00 fe 	subeq	r12,-2
80007598:	f2 08 17 00 	moveq	r8,r9
8000759c:	58 08       	cp.w	r8,0
8000759e:	5e 5c       	retlt	r12
800075a0:	ed b8 00 1e 	bld	r8,0x1e
800075a4:	f9 bc 01 20 	movne	r12,32
800075a8:	f7 bc 00 ff 	subeq	r12,-1
800075ac:	5e fc       	retal	r12

800075ae <__lo0bits>:
800075ae:	18 99       	mov	r9,r12
800075b0:	78 08       	ld.w	r8,r12[0x0]
800075b2:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800075b6:	c1 50       	breq	800075e0 <__lo0bits+0x32>
800075b8:	ed b8 00 00 	bld	r8,0x0
800075bc:	c0 21       	brne	800075c0 <__lo0bits+0x12>
800075be:	5e fd       	retal	0
800075c0:	10 9b       	mov	r11,r8
800075c2:	f0 0a 16 01 	lsr	r10,r8,0x1
800075c6:	e2 1b 00 02 	andl	r11,0x2,COH
800075ca:	a3 88       	lsr	r8,0x2
800075cc:	58 0b       	cp.w	r11,0
800075ce:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800075d2:	f9 bc 01 01 	movne	r12,1
800075d6:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800075da:	f9 bc 00 02 	moveq	r12,2
800075de:	5e fc       	retal	r12
800075e0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800075e4:	f0 0b 16 10 	lsr	r11,r8,0x10
800075e8:	58 0a       	cp.w	r10,0
800075ea:	f6 08 17 00 	moveq	r8,r11
800075ee:	f9 bc 00 10 	moveq	r12,16
800075f2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800075f6:	f0 0a 16 08 	lsr	r10,r8,0x8
800075fa:	58 0b       	cp.w	r11,0
800075fc:	f7 bc 00 f8 	subeq	r12,-8
80007600:	f4 08 17 00 	moveq	r8,r10
80007604:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007608:	f0 0a 16 04 	lsr	r10,r8,0x4
8000760c:	58 0b       	cp.w	r11,0
8000760e:	f7 bc 00 fc 	subeq	r12,-4
80007612:	f4 08 17 00 	moveq	r8,r10
80007616:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000761a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000761e:	58 0b       	cp.w	r11,0
80007620:	f7 bc 00 fe 	subeq	r12,-2
80007624:	f4 08 17 00 	moveq	r8,r10
80007628:	ed b8 00 00 	bld	r8,0x0
8000762c:	c0 60       	breq	80007638 <__lo0bits+0x8a>
8000762e:	a1 98       	lsr	r8,0x1
80007630:	c0 31       	brne	80007636 <__lo0bits+0x88>
80007632:	32 0c       	mov	r12,32
80007634:	5e fc       	retal	r12
80007636:	2f fc       	sub	r12,-1
80007638:	93 08       	st.w	r9[0x0],r8
8000763a:	5e fc       	retal	r12

8000763c <__mcmp>:
8000763c:	d4 01       	pushm	lr
8000763e:	18 98       	mov	r8,r12
80007640:	76 49       	ld.w	r9,r11[0x10]
80007642:	78 4c       	ld.w	r12,r12[0x10]
80007644:	12 1c       	sub	r12,r9
80007646:	c1 31       	brne	8000766c <__mcmp+0x30>
80007648:	2f b9       	sub	r9,-5
8000764a:	a3 69       	lsl	r9,0x2
8000764c:	12 0b       	add	r11,r9
8000764e:	f0 09 00 09 	add	r9,r8,r9
80007652:	2e c8       	sub	r8,-20
80007654:	13 4e       	ld.w	lr,--r9
80007656:	17 4a       	ld.w	r10,--r11
80007658:	14 3e       	cp.w	lr,r10
8000765a:	c0 60       	breq	80007666 <__mcmp+0x2a>
8000765c:	f9 bc 03 ff 	movlo	r12,-1
80007660:	f9 bc 02 01 	movhs	r12,1
80007664:	d8 02       	popm	pc
80007666:	10 39       	cp.w	r9,r8
80007668:	fe 9b ff f6 	brhi	80007654 <__mcmp+0x18>
8000766c:	d8 02       	popm	pc
8000766e:	d7 03       	nop

80007670 <_Bfree>:
80007670:	d4 21       	pushm	r4-r7,lr
80007672:	18 97       	mov	r7,r12
80007674:	16 95       	mov	r5,r11
80007676:	78 96       	ld.w	r6,r12[0x24]
80007678:	58 06       	cp.w	r6,0
8000767a:	c0 91       	brne	8000768c <_Bfree+0x1c>
8000767c:	31 0c       	mov	r12,16
8000767e:	fe b0 fd 15 	rcall	800070a8 <malloc>
80007682:	99 36       	st.w	r12[0xc],r6
80007684:	8f 9c       	st.w	r7[0x24],r12
80007686:	99 16       	st.w	r12[0x4],r6
80007688:	99 26       	st.w	r12[0x8],r6
8000768a:	99 06       	st.w	r12[0x0],r6
8000768c:	58 05       	cp.w	r5,0
8000768e:	c0 90       	breq	800076a0 <_Bfree+0x30>
80007690:	6a 19       	ld.w	r9,r5[0x4]
80007692:	6e 98       	ld.w	r8,r7[0x24]
80007694:	70 38       	ld.w	r8,r8[0xc]
80007696:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000769a:	8b 0a       	st.w	r5[0x0],r10
8000769c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800076a0:	d8 22       	popm	r4-r7,pc
800076a2:	d7 03       	nop

800076a4 <_Balloc>:
800076a4:	d4 21       	pushm	r4-r7,lr
800076a6:	18 97       	mov	r7,r12
800076a8:	16 96       	mov	r6,r11
800076aa:	78 95       	ld.w	r5,r12[0x24]
800076ac:	58 05       	cp.w	r5,0
800076ae:	c0 91       	brne	800076c0 <_Balloc+0x1c>
800076b0:	31 0c       	mov	r12,16
800076b2:	fe b0 fc fb 	rcall	800070a8 <malloc>
800076b6:	99 35       	st.w	r12[0xc],r5
800076b8:	8f 9c       	st.w	r7[0x24],r12
800076ba:	99 15       	st.w	r12[0x4],r5
800076bc:	99 25       	st.w	r12[0x8],r5
800076be:	99 05       	st.w	r12[0x0],r5
800076c0:	6e 95       	ld.w	r5,r7[0x24]
800076c2:	6a 38       	ld.w	r8,r5[0xc]
800076c4:	58 08       	cp.w	r8,0
800076c6:	c0 b1       	brne	800076dc <_Balloc+0x38>
800076c8:	31 0a       	mov	r10,16
800076ca:	30 4b       	mov	r11,4
800076cc:	0e 9c       	mov	r12,r7
800076ce:	e0 a0 04 93 	rcall	80007ff4 <_calloc_r>
800076d2:	8b 3c       	st.w	r5[0xc],r12
800076d4:	6e 98       	ld.w	r8,r7[0x24]
800076d6:	70 3c       	ld.w	r12,r8[0xc]
800076d8:	58 0c       	cp.w	r12,0
800076da:	c1 b0       	breq	80007710 <_Balloc+0x6c>
800076dc:	6e 98       	ld.w	r8,r7[0x24]
800076de:	70 38       	ld.w	r8,r8[0xc]
800076e0:	f0 06 00 28 	add	r8,r8,r6<<0x2
800076e4:	70 0c       	ld.w	r12,r8[0x0]
800076e6:	58 0c       	cp.w	r12,0
800076e8:	c0 40       	breq	800076f0 <_Balloc+0x4c>
800076ea:	78 09       	ld.w	r9,r12[0x0]
800076ec:	91 09       	st.w	r8[0x0],r9
800076ee:	c0 e8       	rjmp	8000770a <_Balloc+0x66>
800076f0:	0e 9c       	mov	r12,r7
800076f2:	30 17       	mov	r7,1
800076f4:	0e 9b       	mov	r11,r7
800076f6:	ee 06 09 47 	lsl	r7,r7,r6
800076fa:	ee ca ff fb 	sub	r10,r7,-5
800076fe:	a3 6a       	lsl	r10,0x2
80007700:	e0 a0 04 7a 	rcall	80007ff4 <_calloc_r>
80007704:	c0 60       	breq	80007710 <_Balloc+0x6c>
80007706:	99 16       	st.w	r12[0x4],r6
80007708:	99 27       	st.w	r12[0x8],r7
8000770a:	30 08       	mov	r8,0
8000770c:	99 38       	st.w	r12[0xc],r8
8000770e:	99 48       	st.w	r12[0x10],r8
80007710:	d8 22       	popm	r4-r7,pc
80007712:	d7 03       	nop

80007714 <__d2b>:
80007714:	d4 31       	pushm	r0-r7,lr
80007716:	20 2d       	sub	sp,8
80007718:	16 93       	mov	r3,r11
8000771a:	12 96       	mov	r6,r9
8000771c:	10 95       	mov	r5,r8
8000771e:	14 92       	mov	r2,r10
80007720:	30 1b       	mov	r11,1
80007722:	cc 1f       	rcall	800076a4 <_Balloc>
80007724:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007728:	50 09       	stdsp	sp[0x0],r9
8000772a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000772e:	b5 a9       	sbr	r9,0x14
80007730:	f0 01 16 14 	lsr	r1,r8,0x14
80007734:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007738:	18 94       	mov	r4,r12
8000773a:	58 02       	cp.w	r2,0
8000773c:	c1 d0       	breq	80007776 <__d2b+0x62>
8000773e:	fa cc ff f8 	sub	r12,sp,-8
80007742:	18 d2       	st.w	--r12,r2
80007744:	c3 5f       	rcall	800075ae <__lo0bits>
80007746:	40 18       	lddsp	r8,sp[0x4]
80007748:	c0 d0       	breq	80007762 <__d2b+0x4e>
8000774a:	40 09       	lddsp	r9,sp[0x0]
8000774c:	f8 0a 11 20 	rsub	r10,r12,32
80007750:	f2 0a 09 4a 	lsl	r10,r9,r10
80007754:	f5 e8 10 08 	or	r8,r10,r8
80007758:	89 58       	st.w	r4[0x14],r8
8000775a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000775e:	50 09       	stdsp	sp[0x0],r9
80007760:	c0 28       	rjmp	80007764 <__d2b+0x50>
80007762:	89 58       	st.w	r4[0x14],r8
80007764:	40 08       	lddsp	r8,sp[0x0]
80007766:	58 08       	cp.w	r8,0
80007768:	f9 b3 01 02 	movne	r3,2
8000776c:	f9 b3 00 01 	moveq	r3,1
80007770:	89 68       	st.w	r4[0x18],r8
80007772:	89 43       	st.w	r4[0x10],r3
80007774:	c0 88       	rjmp	80007784 <__d2b+0x70>
80007776:	1a 9c       	mov	r12,sp
80007778:	c1 bf       	rcall	800075ae <__lo0bits>
8000777a:	30 13       	mov	r3,1
8000777c:	40 08       	lddsp	r8,sp[0x0]
8000777e:	2e 0c       	sub	r12,-32
80007780:	89 43       	st.w	r4[0x10],r3
80007782:	89 58       	st.w	r4[0x14],r8
80007784:	58 01       	cp.w	r1,0
80007786:	c0 90       	breq	80007798 <__d2b+0x84>
80007788:	e2 c1 04 33 	sub	r1,r1,1075
8000778c:	18 01       	add	r1,r12
8000778e:	8d 01       	st.w	r6[0x0],r1
80007790:	f8 0c 11 35 	rsub	r12,r12,53
80007794:	8b 0c       	st.w	r5[0x0],r12
80007796:	c0 c8       	rjmp	800077ae <__d2b+0x9a>
80007798:	e6 c8 ff fc 	sub	r8,r3,-4
8000779c:	f8 cc 04 32 	sub	r12,r12,1074
800077a0:	a5 73       	lsl	r3,0x5
800077a2:	8d 0c       	st.w	r6[0x0],r12
800077a4:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800077a8:	cd 3e       	rcall	8000754e <__hi0bits>
800077aa:	18 13       	sub	r3,r12
800077ac:	8b 03       	st.w	r5[0x0],r3
800077ae:	08 9c       	mov	r12,r4
800077b0:	2f ed       	sub	sp,-8
800077b2:	d8 32       	popm	r0-r7,pc

800077b4 <__mdiff>:
800077b4:	d4 31       	pushm	r0-r7,lr
800077b6:	74 48       	ld.w	r8,r10[0x10]
800077b8:	76 45       	ld.w	r5,r11[0x10]
800077ba:	16 97       	mov	r7,r11
800077bc:	14 96       	mov	r6,r10
800077be:	10 15       	sub	r5,r8
800077c0:	c1 31       	brne	800077e6 <__mdiff+0x32>
800077c2:	2f b8       	sub	r8,-5
800077c4:	ee ce ff ec 	sub	lr,r7,-20
800077c8:	a3 68       	lsl	r8,0x2
800077ca:	f4 08 00 0b 	add	r11,r10,r8
800077ce:	ee 08 00 08 	add	r8,r7,r8
800077d2:	11 4a       	ld.w	r10,--r8
800077d4:	17 49       	ld.w	r9,--r11
800077d6:	12 3a       	cp.w	r10,r9
800077d8:	c0 30       	breq	800077de <__mdiff+0x2a>
800077da:	c0 e2       	brcc	800077f6 <__mdiff+0x42>
800077dc:	c0 78       	rjmp	800077ea <__mdiff+0x36>
800077de:	1c 38       	cp.w	r8,lr
800077e0:	fe 9b ff f9 	brhi	800077d2 <__mdiff+0x1e>
800077e4:	c4 98       	rjmp	80007876 <__mdiff+0xc2>
800077e6:	58 05       	cp.w	r5,0
800077e8:	c0 64       	brge	800077f4 <__mdiff+0x40>
800077ea:	0e 98       	mov	r8,r7
800077ec:	30 15       	mov	r5,1
800077ee:	0c 97       	mov	r7,r6
800077f0:	10 96       	mov	r6,r8
800077f2:	c0 28       	rjmp	800077f6 <__mdiff+0x42>
800077f4:	30 05       	mov	r5,0
800077f6:	6e 1b       	ld.w	r11,r7[0x4]
800077f8:	c5 6f       	rcall	800076a4 <_Balloc>
800077fa:	6e 49       	ld.w	r9,r7[0x10]
800077fc:	6c 44       	ld.w	r4,r6[0x10]
800077fe:	99 35       	st.w	r12[0xc],r5
80007800:	2f b4       	sub	r4,-5
80007802:	f2 c5 ff fb 	sub	r5,r9,-5
80007806:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000780a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000780e:	2e c6       	sub	r6,-20
80007810:	2e c7       	sub	r7,-20
80007812:	f8 c8 ff ec 	sub	r8,r12,-20
80007816:	30 0a       	mov	r10,0
80007818:	0f 0e       	ld.w	lr,r7++
8000781a:	0d 0b       	ld.w	r11,r6++
8000781c:	fc 02 16 10 	lsr	r2,lr,0x10
80007820:	f6 03 16 10 	lsr	r3,r11,0x10
80007824:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007828:	e4 03 01 03 	sub	r3,r2,r3
8000782c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007830:	fc 0b 01 0b 	sub	r11,lr,r11
80007834:	f6 0a 00 0a 	add	r10,r11,r10
80007838:	b0 1a       	st.h	r8[0x2],r10
8000783a:	b1 4a       	asr	r10,0x10
8000783c:	e6 0a 00 0a 	add	r10,r3,r10
80007840:	b0 0a       	st.h	r8[0x0],r10
80007842:	2f c8       	sub	r8,-4
80007844:	b1 4a       	asr	r10,0x10
80007846:	08 36       	cp.w	r6,r4
80007848:	ce 83       	brcs	80007818 <__mdiff+0x64>
8000784a:	c0 d8       	rjmp	80007864 <__mdiff+0xb0>
8000784c:	0f 0b       	ld.w	r11,r7++
8000784e:	f6 0e 16 10 	lsr	lr,r11,0x10
80007852:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007856:	16 0a       	add	r10,r11
80007858:	b0 1a       	st.h	r8[0x2],r10
8000785a:	b1 4a       	asr	r10,0x10
8000785c:	1c 0a       	add	r10,lr
8000785e:	b0 0a       	st.h	r8[0x0],r10
80007860:	2f c8       	sub	r8,-4
80007862:	b1 4a       	asr	r10,0x10
80007864:	0a 37       	cp.w	r7,r5
80007866:	cf 33       	brcs	8000784c <__mdiff+0x98>
80007868:	c0 28       	rjmp	8000786c <__mdiff+0xb8>
8000786a:	20 19       	sub	r9,1
8000786c:	11 4a       	ld.w	r10,--r8
8000786e:	58 0a       	cp.w	r10,0
80007870:	cf d0       	breq	8000786a <__mdiff+0xb6>
80007872:	99 49       	st.w	r12[0x10],r9
80007874:	d8 32       	popm	r0-r7,pc
80007876:	30 0b       	mov	r11,0
80007878:	c1 6f       	rcall	800076a4 <_Balloc>
8000787a:	30 18       	mov	r8,1
8000787c:	99 48       	st.w	r12[0x10],r8
8000787e:	30 08       	mov	r8,0
80007880:	99 58       	st.w	r12[0x14],r8
80007882:	d8 32       	popm	r0-r7,pc

80007884 <__lshift>:
80007884:	d4 31       	pushm	r0-r7,lr
80007886:	16 97       	mov	r7,r11
80007888:	76 46       	ld.w	r6,r11[0x10]
8000788a:	f4 02 14 05 	asr	r2,r10,0x5
8000788e:	2f f6       	sub	r6,-1
80007890:	14 93       	mov	r3,r10
80007892:	18 94       	mov	r4,r12
80007894:	04 06       	add	r6,r2
80007896:	76 1b       	ld.w	r11,r11[0x4]
80007898:	6e 28       	ld.w	r8,r7[0x8]
8000789a:	c0 38       	rjmp	800078a0 <__lshift+0x1c>
8000789c:	2f fb       	sub	r11,-1
8000789e:	a1 78       	lsl	r8,0x1
800078a0:	10 36       	cp.w	r6,r8
800078a2:	fe 99 ff fd 	brgt	8000789c <__lshift+0x18>
800078a6:	08 9c       	mov	r12,r4
800078a8:	cf ee       	rcall	800076a4 <_Balloc>
800078aa:	30 09       	mov	r9,0
800078ac:	18 95       	mov	r5,r12
800078ae:	f8 c8 ff ec 	sub	r8,r12,-20
800078b2:	12 9a       	mov	r10,r9
800078b4:	c0 38       	rjmp	800078ba <__lshift+0x36>
800078b6:	10 aa       	st.w	r8++,r10
800078b8:	2f f9       	sub	r9,-1
800078ba:	04 39       	cp.w	r9,r2
800078bc:	cf d5       	brlt	800078b6 <__lshift+0x32>
800078be:	6e 4b       	ld.w	r11,r7[0x10]
800078c0:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800078c4:	2f bb       	sub	r11,-5
800078c6:	ee c9 ff ec 	sub	r9,r7,-20
800078ca:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800078ce:	58 03       	cp.w	r3,0
800078d0:	c1 30       	breq	800078f6 <__lshift+0x72>
800078d2:	e6 0c 11 20 	rsub	r12,r3,32
800078d6:	30 0a       	mov	r10,0
800078d8:	72 02       	ld.w	r2,r9[0x0]
800078da:	e4 03 09 42 	lsl	r2,r2,r3
800078de:	04 4a       	or	r10,r2
800078e0:	10 aa       	st.w	r8++,r10
800078e2:	13 0a       	ld.w	r10,r9++
800078e4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800078e8:	16 39       	cp.w	r9,r11
800078ea:	cf 73       	brcs	800078d8 <__lshift+0x54>
800078ec:	91 0a       	st.w	r8[0x0],r10
800078ee:	58 0a       	cp.w	r10,0
800078f0:	c0 70       	breq	800078fe <__lshift+0x7a>
800078f2:	2f f6       	sub	r6,-1
800078f4:	c0 58       	rjmp	800078fe <__lshift+0x7a>
800078f6:	13 0a       	ld.w	r10,r9++
800078f8:	10 aa       	st.w	r8++,r10
800078fa:	16 39       	cp.w	r9,r11
800078fc:	cf d3       	brcs	800078f6 <__lshift+0x72>
800078fe:	08 9c       	mov	r12,r4
80007900:	20 16       	sub	r6,1
80007902:	0e 9b       	mov	r11,r7
80007904:	8b 46       	st.w	r5[0x10],r6
80007906:	cb 5e       	rcall	80007670 <_Bfree>
80007908:	0a 9c       	mov	r12,r5
8000790a:	d8 32       	popm	r0-r7,pc

8000790c <__multiply>:
8000790c:	d4 31       	pushm	r0-r7,lr
8000790e:	20 2d       	sub	sp,8
80007910:	76 49       	ld.w	r9,r11[0x10]
80007912:	74 48       	ld.w	r8,r10[0x10]
80007914:	16 96       	mov	r6,r11
80007916:	14 95       	mov	r5,r10
80007918:	10 39       	cp.w	r9,r8
8000791a:	ec 08 17 50 	movlt	r8,r6
8000791e:	ea 06 17 50 	movlt	r6,r5
80007922:	f0 05 17 50 	movlt	r5,r8
80007926:	6c 28       	ld.w	r8,r6[0x8]
80007928:	76 43       	ld.w	r3,r11[0x10]
8000792a:	74 42       	ld.w	r2,r10[0x10]
8000792c:	76 1b       	ld.w	r11,r11[0x4]
8000792e:	e4 03 00 07 	add	r7,r2,r3
80007932:	10 37       	cp.w	r7,r8
80007934:	f7 bb 09 ff 	subgt	r11,-1
80007938:	cb 6e       	rcall	800076a4 <_Balloc>
8000793a:	ee c4 ff fb 	sub	r4,r7,-5
8000793e:	f8 c9 ff ec 	sub	r9,r12,-20
80007942:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007946:	30 0a       	mov	r10,0
80007948:	12 98       	mov	r8,r9
8000794a:	c0 28       	rjmp	8000794e <__multiply+0x42>
8000794c:	10 aa       	st.w	r8++,r10
8000794e:	08 38       	cp.w	r8,r4
80007950:	cf e3       	brcs	8000794c <__multiply+0x40>
80007952:	2f b3       	sub	r3,-5
80007954:	2f b2       	sub	r2,-5
80007956:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000795a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000795e:	ec cb ff ec 	sub	r11,r6,-20
80007962:	50 12       	stdsp	sp[0x4],r2
80007964:	ea ca ff ec 	sub	r10,r5,-20
80007968:	c4 48       	rjmp	800079f0 <__multiply+0xe4>
8000796a:	94 95       	ld.uh	r5,r10[0x2]
8000796c:	58 05       	cp.w	r5,0
8000796e:	c2 00       	breq	800079ae <__multiply+0xa2>
80007970:	12 98       	mov	r8,r9
80007972:	16 96       	mov	r6,r11
80007974:	30 0e       	mov	lr,0
80007976:	50 09       	stdsp	sp[0x0],r9
80007978:	0d 02       	ld.w	r2,r6++
8000797a:	e4 00 16 10 	lsr	r0,r2,0x10
8000797e:	70 01       	ld.w	r1,r8[0x0]
80007980:	70 09       	ld.w	r9,r8[0x0]
80007982:	b1 81       	lsr	r1,0x10
80007984:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007988:	e0 05 03 41 	mac	r1,r0,r5
8000798c:	ab 32       	mul	r2,r5
8000798e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007992:	00 02       	add	r2,r0
80007994:	e4 0e 00 0e 	add	lr,r2,lr
80007998:	b0 1e       	st.h	r8[0x2],lr
8000799a:	b1 8e       	lsr	lr,0x10
8000799c:	1c 01       	add	r1,lr
8000799e:	b0 01       	st.h	r8[0x0],r1
800079a0:	e2 0e 16 10 	lsr	lr,r1,0x10
800079a4:	2f c8       	sub	r8,-4
800079a6:	06 36       	cp.w	r6,r3
800079a8:	ce 83       	brcs	80007978 <__multiply+0x6c>
800079aa:	40 09       	lddsp	r9,sp[0x0]
800079ac:	91 0e       	st.w	r8[0x0],lr
800079ae:	94 86       	ld.uh	r6,r10[0x0]
800079b0:	58 06       	cp.w	r6,0
800079b2:	c1 d0       	breq	800079ec <__multiply+0xe0>
800079b4:	72 02       	ld.w	r2,r9[0x0]
800079b6:	12 98       	mov	r8,r9
800079b8:	16 9e       	mov	lr,r11
800079ba:	30 05       	mov	r5,0
800079bc:	b0 12       	st.h	r8[0x2],r2
800079be:	1d 01       	ld.w	r1,lr++
800079c0:	90 82       	ld.uh	r2,r8[0x0]
800079c2:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800079c6:	ad 30       	mul	r0,r6
800079c8:	e0 02 00 02 	add	r2,r0,r2
800079cc:	e4 05 00 05 	add	r5,r2,r5
800079d0:	b0 05       	st.h	r8[0x0],r5
800079d2:	b1 85       	lsr	r5,0x10
800079d4:	b1 81       	lsr	r1,0x10
800079d6:	2f c8       	sub	r8,-4
800079d8:	ad 31       	mul	r1,r6
800079da:	90 92       	ld.uh	r2,r8[0x2]
800079dc:	e2 02 00 02 	add	r2,r1,r2
800079e0:	0a 02       	add	r2,r5
800079e2:	e4 05 16 10 	lsr	r5,r2,0x10
800079e6:	06 3e       	cp.w	lr,r3
800079e8:	ce a3       	brcs	800079bc <__multiply+0xb0>
800079ea:	91 02       	st.w	r8[0x0],r2
800079ec:	2f ca       	sub	r10,-4
800079ee:	2f c9       	sub	r9,-4
800079f0:	40 18       	lddsp	r8,sp[0x4]
800079f2:	10 3a       	cp.w	r10,r8
800079f4:	cb b3       	brcs	8000796a <__multiply+0x5e>
800079f6:	c0 28       	rjmp	800079fa <__multiply+0xee>
800079f8:	20 17       	sub	r7,1
800079fa:	58 07       	cp.w	r7,0
800079fc:	e0 8a 00 05 	brle	80007a06 <__multiply+0xfa>
80007a00:	09 48       	ld.w	r8,--r4
80007a02:	58 08       	cp.w	r8,0
80007a04:	cf a0       	breq	800079f8 <__multiply+0xec>
80007a06:	99 47       	st.w	r12[0x10],r7
80007a08:	2f ed       	sub	sp,-8
80007a0a:	d8 32       	popm	r0-r7,pc

80007a0c <__i2b>:
80007a0c:	d4 21       	pushm	r4-r7,lr
80007a0e:	16 97       	mov	r7,r11
80007a10:	30 1b       	mov	r11,1
80007a12:	c4 9e       	rcall	800076a4 <_Balloc>
80007a14:	30 19       	mov	r9,1
80007a16:	99 57       	st.w	r12[0x14],r7
80007a18:	99 49       	st.w	r12[0x10],r9
80007a1a:	d8 22       	popm	r4-r7,pc

80007a1c <__multadd>:
80007a1c:	d4 31       	pushm	r0-r7,lr
80007a1e:	30 08       	mov	r8,0
80007a20:	12 95       	mov	r5,r9
80007a22:	16 97       	mov	r7,r11
80007a24:	18 96       	mov	r6,r12
80007a26:	76 44       	ld.w	r4,r11[0x10]
80007a28:	f6 c9 ff ec 	sub	r9,r11,-20
80007a2c:	72 0b       	ld.w	r11,r9[0x0]
80007a2e:	f6 0c 16 10 	lsr	r12,r11,0x10
80007a32:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a36:	f4 0c 02 4c 	mul	r12,r10,r12
80007a3a:	f4 0b 03 45 	mac	r5,r10,r11
80007a3e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007a42:	b1 85       	lsr	r5,0x10
80007a44:	18 05       	add	r5,r12
80007a46:	ea 0c 15 10 	lsl	r12,r5,0x10
80007a4a:	f8 0b 00 0b 	add	r11,r12,r11
80007a4e:	12 ab       	st.w	r9++,r11
80007a50:	2f f8       	sub	r8,-1
80007a52:	b1 85       	lsr	r5,0x10
80007a54:	08 38       	cp.w	r8,r4
80007a56:	ce b5       	brlt	80007a2c <__multadd+0x10>
80007a58:	58 05       	cp.w	r5,0
80007a5a:	c1 c0       	breq	80007a92 <__multadd+0x76>
80007a5c:	6e 28       	ld.w	r8,r7[0x8]
80007a5e:	10 34       	cp.w	r4,r8
80007a60:	c1 35       	brlt	80007a86 <__multadd+0x6a>
80007a62:	6e 1b       	ld.w	r11,r7[0x4]
80007a64:	0c 9c       	mov	r12,r6
80007a66:	2f fb       	sub	r11,-1
80007a68:	c1 ee       	rcall	800076a4 <_Balloc>
80007a6a:	6e 4a       	ld.w	r10,r7[0x10]
80007a6c:	ee cb ff f4 	sub	r11,r7,-12
80007a70:	18 93       	mov	r3,r12
80007a72:	2f ea       	sub	r10,-2
80007a74:	2f 4c       	sub	r12,-12
80007a76:	a3 6a       	lsl	r10,0x2
80007a78:	fe b0 de 36 	rcall	800036e4 <memcpy>
80007a7c:	0e 9b       	mov	r11,r7
80007a7e:	0c 9c       	mov	r12,r6
80007a80:	fe b0 fd f8 	rcall	80007670 <_Bfree>
80007a84:	06 97       	mov	r7,r3
80007a86:	e8 c8 ff ff 	sub	r8,r4,-1
80007a8a:	2f b4       	sub	r4,-5
80007a8c:	8f 48       	st.w	r7[0x10],r8
80007a8e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007a92:	0e 9c       	mov	r12,r7
80007a94:	d8 32       	popm	r0-r7,pc
80007a96:	d7 03       	nop

80007a98 <__pow5mult>:
80007a98:	d4 31       	pushm	r0-r7,lr
80007a9a:	14 96       	mov	r6,r10
80007a9c:	18 97       	mov	r7,r12
80007a9e:	16 94       	mov	r4,r11
80007aa0:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007aa4:	c0 90       	breq	80007ab6 <__pow5mult+0x1e>
80007aa6:	20 18       	sub	r8,1
80007aa8:	fe c9 e2 4c 	sub	r9,pc,-7604
80007aac:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007ab0:	30 09       	mov	r9,0
80007ab2:	cb 5f       	rcall	80007a1c <__multadd>
80007ab4:	18 94       	mov	r4,r12
80007ab6:	a3 46       	asr	r6,0x2
80007ab8:	c3 40       	breq	80007b20 <__pow5mult+0x88>
80007aba:	6e 95       	ld.w	r5,r7[0x24]
80007abc:	58 05       	cp.w	r5,0
80007abe:	c0 91       	brne	80007ad0 <__pow5mult+0x38>
80007ac0:	31 0c       	mov	r12,16
80007ac2:	fe b0 fa f3 	rcall	800070a8 <malloc>
80007ac6:	99 35       	st.w	r12[0xc],r5
80007ac8:	8f 9c       	st.w	r7[0x24],r12
80007aca:	99 15       	st.w	r12[0x4],r5
80007acc:	99 25       	st.w	r12[0x8],r5
80007ace:	99 05       	st.w	r12[0x0],r5
80007ad0:	6e 93       	ld.w	r3,r7[0x24]
80007ad2:	66 25       	ld.w	r5,r3[0x8]
80007ad4:	58 05       	cp.w	r5,0
80007ad6:	c0 c1       	brne	80007aee <__pow5mult+0x56>
80007ad8:	e0 6b 02 71 	mov	r11,625
80007adc:	0e 9c       	mov	r12,r7
80007ade:	c9 7f       	rcall	80007a0c <__i2b>
80007ae0:	87 2c       	st.w	r3[0x8],r12
80007ae2:	30 08       	mov	r8,0
80007ae4:	18 95       	mov	r5,r12
80007ae6:	99 08       	st.w	r12[0x0],r8
80007ae8:	c0 38       	rjmp	80007aee <__pow5mult+0x56>
80007aea:	06 9c       	mov	r12,r3
80007aec:	18 95       	mov	r5,r12
80007aee:	ed b6 00 00 	bld	r6,0x0
80007af2:	c0 b1       	brne	80007b08 <__pow5mult+0x70>
80007af4:	08 9b       	mov	r11,r4
80007af6:	0a 9a       	mov	r10,r5
80007af8:	0e 9c       	mov	r12,r7
80007afa:	c0 9f       	rcall	8000790c <__multiply>
80007afc:	08 9b       	mov	r11,r4
80007afe:	18 93       	mov	r3,r12
80007b00:	0e 9c       	mov	r12,r7
80007b02:	06 94       	mov	r4,r3
80007b04:	fe b0 fd b6 	rcall	80007670 <_Bfree>
80007b08:	a1 56       	asr	r6,0x1
80007b0a:	c0 b0       	breq	80007b20 <__pow5mult+0x88>
80007b0c:	6a 03       	ld.w	r3,r5[0x0]
80007b0e:	58 03       	cp.w	r3,0
80007b10:	ce d1       	brne	80007aea <__pow5mult+0x52>
80007b12:	0a 9a       	mov	r10,r5
80007b14:	0a 9b       	mov	r11,r5
80007b16:	0e 9c       	mov	r12,r7
80007b18:	cf ae       	rcall	8000790c <__multiply>
80007b1a:	8b 0c       	st.w	r5[0x0],r12
80007b1c:	99 03       	st.w	r12[0x0],r3
80007b1e:	ce 7b       	rjmp	80007aec <__pow5mult+0x54>
80007b20:	08 9c       	mov	r12,r4
80007b22:	d8 32       	popm	r0-r7,pc

80007b24 <_realloc_r>:
80007b24:	d4 31       	pushm	r0-r7,lr
80007b26:	20 1d       	sub	sp,4
80007b28:	16 94       	mov	r4,r11
80007b2a:	18 92       	mov	r2,r12
80007b2c:	14 9b       	mov	r11,r10
80007b2e:	58 04       	cp.w	r4,0
80007b30:	c0 51       	brne	80007b3a <_realloc_r+0x16>
80007b32:	fe b0 fa c3 	rcall	800070b8 <_malloc_r>
80007b36:	18 95       	mov	r5,r12
80007b38:	c5 39       	rjmp	80007dde <_realloc_r+0x2ba>
80007b3a:	50 0a       	stdsp	sp[0x0],r10
80007b3c:	fe b0 fd 07 	rcall	8000754a <__malloc_lock>
80007b40:	40 0b       	lddsp	r11,sp[0x0]
80007b42:	f6 c8 ff f5 	sub	r8,r11,-11
80007b46:	e8 c1 00 08 	sub	r1,r4,8
80007b4a:	10 96       	mov	r6,r8
80007b4c:	62 1c       	ld.w	r12,r1[0x4]
80007b4e:	e0 16 ff f8 	andl	r6,0xfff8
80007b52:	59 68       	cp.w	r8,22
80007b54:	f9 b6 08 10 	movls	r6,16
80007b58:	16 36       	cp.w	r6,r11
80007b5a:	5f 38       	srlo	r8
80007b5c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007b60:	c0 50       	breq	80007b6a <_realloc_r+0x46>
80007b62:	30 c8       	mov	r8,12
80007b64:	30 05       	mov	r5,0
80007b66:	85 38       	st.w	r2[0xc],r8
80007b68:	c3 b9       	rjmp	80007dde <_realloc_r+0x2ba>
80007b6a:	18 90       	mov	r0,r12
80007b6c:	e0 10 ff fc 	andl	r0,0xfffc
80007b70:	0c 30       	cp.w	r0,r6
80007b72:	e0 84 01 0b 	brge	80007d88 <_realloc_r+0x264>
80007b76:	e0 68 01 08 	mov	r8,264
80007b7a:	e2 00 00 09 	add	r9,r1,r0
80007b7e:	70 25       	ld.w	r5,r8[0x8]
80007b80:	0a 39       	cp.w	r9,r5
80007b82:	c0 90       	breq	80007b94 <_realloc_r+0x70>
80007b84:	72 1a       	ld.w	r10,r9[0x4]
80007b86:	a1 ca       	cbr	r10,0x0
80007b88:	f2 0a 00 0a 	add	r10,r9,r10
80007b8c:	74 1a       	ld.w	r10,r10[0x4]
80007b8e:	ed ba 00 00 	bld	r10,0x0
80007b92:	c2 20       	breq	80007bd6 <_realloc_r+0xb2>
80007b94:	72 1a       	ld.w	r10,r9[0x4]
80007b96:	e0 1a ff fc 	andl	r10,0xfffc
80007b9a:	f4 00 00 03 	add	r3,r10,r0
80007b9e:	0a 39       	cp.w	r9,r5
80007ba0:	c1 31       	brne	80007bc6 <_realloc_r+0xa2>
80007ba2:	ec c7 ff f0 	sub	r7,r6,-16
80007ba6:	0e 33       	cp.w	r3,r7
80007ba8:	c1 95       	brlt	80007bda <_realloc_r+0xb6>
80007baa:	e2 06 00 09 	add	r9,r1,r6
80007bae:	0c 13       	sub	r3,r6
80007bb0:	a1 a3       	sbr	r3,0x0
80007bb2:	93 13       	st.w	r9[0x4],r3
80007bb4:	91 29       	st.w	r8[0x8],r9
80007bb6:	04 9c       	mov	r12,r2
80007bb8:	62 18       	ld.w	r8,r1[0x4]
80007bba:	08 95       	mov	r5,r4
80007bbc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bc0:	10 46       	or	r6,r8
80007bc2:	83 16       	st.w	r1[0x4],r6
80007bc4:	c0 b9       	rjmp	80007dda <_realloc_r+0x2b6>
80007bc6:	0c 33       	cp.w	r3,r6
80007bc8:	c0 95       	brlt	80007bda <_realloc_r+0xb6>
80007bca:	72 28       	ld.w	r8,r9[0x8]
80007bcc:	02 97       	mov	r7,r1
80007bce:	72 39       	ld.w	r9,r9[0xc]
80007bd0:	93 28       	st.w	r9[0x8],r8
80007bd2:	91 39       	st.w	r8[0xc],r9
80007bd4:	cd c8       	rjmp	80007d8c <_realloc_r+0x268>
80007bd6:	30 0a       	mov	r10,0
80007bd8:	14 99       	mov	r9,r10
80007bda:	ed bc 00 00 	bld	r12,0x0
80007bde:	e0 80 00 95 	breq	80007d08 <_realloc_r+0x1e4>
80007be2:	62 07       	ld.w	r7,r1[0x0]
80007be4:	e2 07 01 07 	sub	r7,r1,r7
80007be8:	6e 1c       	ld.w	r12,r7[0x4]
80007bea:	e0 1c ff fc 	andl	r12,0xfffc
80007bee:	58 09       	cp.w	r9,0
80007bf0:	c5 60       	breq	80007c9c <_realloc_r+0x178>
80007bf2:	f8 00 00 03 	add	r3,r12,r0
80007bf6:	0a 39       	cp.w	r9,r5
80007bf8:	c4 81       	brne	80007c88 <_realloc_r+0x164>
80007bfa:	14 03       	add	r3,r10
80007bfc:	ec c9 ff f0 	sub	r9,r6,-16
80007c00:	12 33       	cp.w	r3,r9
80007c02:	c4 d5       	brlt	80007c9c <_realloc_r+0x178>
80007c04:	6e 3a       	ld.w	r10,r7[0xc]
80007c06:	6e 29       	ld.w	r9,r7[0x8]
80007c08:	95 29       	st.w	r10[0x8],r9
80007c0a:	93 3a       	st.w	r9[0xc],r10
80007c0c:	ee c5 ff f8 	sub	r5,r7,-8
80007c10:	e0 ca 00 04 	sub	r10,r0,4
80007c14:	e0 4a 00 24 	cp.w	r10,36
80007c18:	e0 8b 00 25 	brhi	80007c62 <_realloc_r+0x13e>
80007c1c:	0a 99       	mov	r9,r5
80007c1e:	59 3a       	cp.w	r10,19
80007c20:	e0 88 00 1a 	brls	80007c54 <_realloc_r+0x130>
80007c24:	09 09       	ld.w	r9,r4++
80007c26:	8b 09       	st.w	r5[0x0],r9
80007c28:	09 09       	ld.w	r9,r4++
80007c2a:	8f 39       	st.w	r7[0xc],r9
80007c2c:	ee c9 ff f0 	sub	r9,r7,-16
80007c30:	59 ba       	cp.w	r10,27
80007c32:	e0 88 00 11 	brls	80007c54 <_realloc_r+0x130>
80007c36:	09 0b       	ld.w	r11,r4++
80007c38:	93 0b       	st.w	r9[0x0],r11
80007c3a:	09 09       	ld.w	r9,r4++
80007c3c:	8f 59       	st.w	r7[0x14],r9
80007c3e:	ee c9 ff e8 	sub	r9,r7,-24
80007c42:	e0 4a 00 24 	cp.w	r10,36
80007c46:	c0 71       	brne	80007c54 <_realloc_r+0x130>
80007c48:	09 0a       	ld.w	r10,r4++
80007c4a:	93 0a       	st.w	r9[0x0],r10
80007c4c:	ee c9 ff e0 	sub	r9,r7,-32
80007c50:	09 0a       	ld.w	r10,r4++
80007c52:	8f 7a       	st.w	r7[0x1c],r10
80007c54:	09 0a       	ld.w	r10,r4++
80007c56:	12 aa       	st.w	r9++,r10
80007c58:	68 0a       	ld.w	r10,r4[0x0]
80007c5a:	93 0a       	st.w	r9[0x0],r10
80007c5c:	68 1a       	ld.w	r10,r4[0x4]
80007c5e:	93 1a       	st.w	r9[0x4],r10
80007c60:	c0 78       	rjmp	80007c6e <_realloc_r+0x14a>
80007c62:	50 08       	stdsp	sp[0x0],r8
80007c64:	08 9b       	mov	r11,r4
80007c66:	0a 9c       	mov	r12,r5
80007c68:	fe b0 fc 4b 	rcall	800074fe <memmove>
80007c6c:	40 08       	lddsp	r8,sp[0x0]
80007c6e:	ee 06 00 09 	add	r9,r7,r6
80007c72:	0c 13       	sub	r3,r6
80007c74:	a1 a3       	sbr	r3,0x0
80007c76:	93 13       	st.w	r9[0x4],r3
80007c78:	91 29       	st.w	r8[0x8],r9
80007c7a:	04 9c       	mov	r12,r2
80007c7c:	6e 18       	ld.w	r8,r7[0x4]
80007c7e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007c82:	10 46       	or	r6,r8
80007c84:	8f 16       	st.w	r7[0x4],r6
80007c86:	ca a8       	rjmp	80007dda <_realloc_r+0x2b6>
80007c88:	14 03       	add	r3,r10
80007c8a:	0c 33       	cp.w	r3,r6
80007c8c:	c0 85       	brlt	80007c9c <_realloc_r+0x178>
80007c8e:	72 28       	ld.w	r8,r9[0x8]
80007c90:	72 39       	ld.w	r9,r9[0xc]
80007c92:	93 28       	st.w	r9[0x8],r8
80007c94:	91 39       	st.w	r8[0xc],r9
80007c96:	6e 28       	ld.w	r8,r7[0x8]
80007c98:	6e 39       	ld.w	r9,r7[0xc]
80007c9a:	c0 78       	rjmp	80007ca8 <_realloc_r+0x184>
80007c9c:	f8 00 00 03 	add	r3,r12,r0
80007ca0:	0c 33       	cp.w	r3,r6
80007ca2:	c3 35       	brlt	80007d08 <_realloc_r+0x1e4>
80007ca4:	6e 39       	ld.w	r9,r7[0xc]
80007ca6:	6e 28       	ld.w	r8,r7[0x8]
80007ca8:	93 28       	st.w	r9[0x8],r8
80007caa:	91 39       	st.w	r8[0xc],r9
80007cac:	e0 ca 00 04 	sub	r10,r0,4
80007cb0:	ee cc ff f8 	sub	r12,r7,-8
80007cb4:	e0 4a 00 24 	cp.w	r10,36
80007cb8:	e0 8b 00 24 	brhi	80007d00 <_realloc_r+0x1dc>
80007cbc:	59 3a       	cp.w	r10,19
80007cbe:	e0 88 00 1a 	brls	80007cf2 <_realloc_r+0x1ce>
80007cc2:	09 08       	ld.w	r8,r4++
80007cc4:	99 08       	st.w	r12[0x0],r8
80007cc6:	09 08       	ld.w	r8,r4++
80007cc8:	8f 38       	st.w	r7[0xc],r8
80007cca:	ee cc ff f0 	sub	r12,r7,-16
80007cce:	59 ba       	cp.w	r10,27
80007cd0:	e0 88 00 11 	brls	80007cf2 <_realloc_r+0x1ce>
80007cd4:	09 08       	ld.w	r8,r4++
80007cd6:	99 08       	st.w	r12[0x0],r8
80007cd8:	09 08       	ld.w	r8,r4++
80007cda:	8f 58       	st.w	r7[0x14],r8
80007cdc:	ee cc ff e8 	sub	r12,r7,-24
80007ce0:	e0 4a 00 24 	cp.w	r10,36
80007ce4:	c0 71       	brne	80007cf2 <_realloc_r+0x1ce>
80007ce6:	09 08       	ld.w	r8,r4++
80007ce8:	99 08       	st.w	r12[0x0],r8
80007cea:	ee cc ff e0 	sub	r12,r7,-32
80007cee:	09 08       	ld.w	r8,r4++
80007cf0:	8f 78       	st.w	r7[0x1c],r8
80007cf2:	09 08       	ld.w	r8,r4++
80007cf4:	18 a8       	st.w	r12++,r8
80007cf6:	68 08       	ld.w	r8,r4[0x0]
80007cf8:	99 08       	st.w	r12[0x0],r8
80007cfa:	68 18       	ld.w	r8,r4[0x4]
80007cfc:	99 18       	st.w	r12[0x4],r8
80007cfe:	c4 78       	rjmp	80007d8c <_realloc_r+0x268>
80007d00:	08 9b       	mov	r11,r4
80007d02:	fe b0 fb fe 	rcall	800074fe <memmove>
80007d06:	c4 38       	rjmp	80007d8c <_realloc_r+0x268>
80007d08:	04 9c       	mov	r12,r2
80007d0a:	fe b0 f9 d7 	rcall	800070b8 <_malloc_r>
80007d0e:	18 95       	mov	r5,r12
80007d10:	c3 a0       	breq	80007d84 <_realloc_r+0x260>
80007d12:	62 18       	ld.w	r8,r1[0x4]
80007d14:	f8 c9 00 08 	sub	r9,r12,8
80007d18:	a1 c8       	cbr	r8,0x0
80007d1a:	e2 08 00 08 	add	r8,r1,r8
80007d1e:	10 39       	cp.w	r9,r8
80007d20:	c0 71       	brne	80007d2e <_realloc_r+0x20a>
80007d22:	72 13       	ld.w	r3,r9[0x4]
80007d24:	02 97       	mov	r7,r1
80007d26:	e0 13 ff fc 	andl	r3,0xfffc
80007d2a:	00 03       	add	r3,r0
80007d2c:	c3 08       	rjmp	80007d8c <_realloc_r+0x268>
80007d2e:	e0 ca 00 04 	sub	r10,r0,4
80007d32:	e0 4a 00 24 	cp.w	r10,36
80007d36:	e0 8b 00 20 	brhi	80007d76 <_realloc_r+0x252>
80007d3a:	08 99       	mov	r9,r4
80007d3c:	18 98       	mov	r8,r12
80007d3e:	59 3a       	cp.w	r10,19
80007d40:	e0 88 00 14 	brls	80007d68 <_realloc_r+0x244>
80007d44:	13 0b       	ld.w	r11,r9++
80007d46:	10 ab       	st.w	r8++,r11
80007d48:	13 0b       	ld.w	r11,r9++
80007d4a:	10 ab       	st.w	r8++,r11
80007d4c:	59 ba       	cp.w	r10,27
80007d4e:	e0 88 00 0d 	brls	80007d68 <_realloc_r+0x244>
80007d52:	13 0b       	ld.w	r11,r9++
80007d54:	10 ab       	st.w	r8++,r11
80007d56:	13 0b       	ld.w	r11,r9++
80007d58:	10 ab       	st.w	r8++,r11
80007d5a:	e0 4a 00 24 	cp.w	r10,36
80007d5e:	c0 51       	brne	80007d68 <_realloc_r+0x244>
80007d60:	13 0a       	ld.w	r10,r9++
80007d62:	10 aa       	st.w	r8++,r10
80007d64:	13 0a       	ld.w	r10,r9++
80007d66:	10 aa       	st.w	r8++,r10
80007d68:	13 0a       	ld.w	r10,r9++
80007d6a:	10 aa       	st.w	r8++,r10
80007d6c:	72 0a       	ld.w	r10,r9[0x0]
80007d6e:	91 0a       	st.w	r8[0x0],r10
80007d70:	72 19       	ld.w	r9,r9[0x4]
80007d72:	91 19       	st.w	r8[0x4],r9
80007d74:	c0 48       	rjmp	80007d7c <_realloc_r+0x258>
80007d76:	08 9b       	mov	r11,r4
80007d78:	fe b0 fb c3 	rcall	800074fe <memmove>
80007d7c:	08 9b       	mov	r11,r4
80007d7e:	04 9c       	mov	r12,r2
80007d80:	fe b0 f6 f6 	rcall	80006b6c <_free_r>
80007d84:	04 9c       	mov	r12,r2
80007d86:	c2 a8       	rjmp	80007dda <_realloc_r+0x2b6>
80007d88:	00 93       	mov	r3,r0
80007d8a:	02 97       	mov	r7,r1
80007d8c:	e6 06 01 09 	sub	r9,r3,r6
80007d90:	6e 18       	ld.w	r8,r7[0x4]
80007d92:	58 f9       	cp.w	r9,15
80007d94:	e0 88 00 16 	brls	80007dc0 <_realloc_r+0x29c>
80007d98:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007d9c:	ed e8 10 08 	or	r8,r6,r8
80007da0:	8f 18       	st.w	r7[0x4],r8
80007da2:	12 98       	mov	r8,r9
80007da4:	a1 a8       	sbr	r8,0x0
80007da6:	ee 06 00 0b 	add	r11,r7,r6
80007daa:	f6 09 00 09 	add	r9,r11,r9
80007dae:	97 18       	st.w	r11[0x4],r8
80007db0:	72 18       	ld.w	r8,r9[0x4]
80007db2:	a1 a8       	sbr	r8,0x0
80007db4:	2f 8b       	sub	r11,-8
80007db6:	93 18       	st.w	r9[0x4],r8
80007db8:	04 9c       	mov	r12,r2
80007dba:	fe b0 f6 d9 	rcall	80006b6c <_free_r>
80007dbe:	c0 b8       	rjmp	80007dd4 <_realloc_r+0x2b0>
80007dc0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007dc4:	e7 e8 10 08 	or	r8,r3,r8
80007dc8:	8f 18       	st.w	r7[0x4],r8
80007dca:	ee 03 00 03 	add	r3,r7,r3
80007dce:	66 18       	ld.w	r8,r3[0x4]
80007dd0:	a1 a8       	sbr	r8,0x0
80007dd2:	87 18       	st.w	r3[0x4],r8
80007dd4:	04 9c       	mov	r12,r2
80007dd6:	ee c5 ff f8 	sub	r5,r7,-8
80007dda:	fe b0 fb b9 	rcall	8000754c <__malloc_unlock>
80007dde:	0a 9c       	mov	r12,r5
80007de0:	2f fd       	sub	sp,-4
80007de2:	d8 32       	popm	r0-r7,pc

80007de4 <__isinfd>:
80007de4:	14 98       	mov	r8,r10
80007de6:	fc 19 7f f0 	movh	r9,0x7ff0
80007dea:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007dee:	f0 0b 11 00 	rsub	r11,r8,0
80007df2:	f7 e8 10 08 	or	r8,r11,r8
80007df6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80007dfa:	f2 08 01 08 	sub	r8,r9,r8
80007dfe:	f0 0c 11 00 	rsub	r12,r8,0
80007e02:	f9 e8 10 08 	or	r8,r12,r8
80007e06:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007e0a:	2f fc       	sub	r12,-1
80007e0c:	5e fc       	retal	r12

80007e0e <__isnand>:
80007e0e:	14 98       	mov	r8,r10
80007e10:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007e14:	f0 0c 11 00 	rsub	r12,r8,0
80007e18:	10 4c       	or	r12,r8
80007e1a:	fc 18 7f f0 	movh	r8,0x7ff0
80007e1e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007e22:	f0 0c 01 0c 	sub	r12,r8,r12
80007e26:	bf 9c       	lsr	r12,0x1f
80007e28:	5e fc       	retal	r12
80007e2a:	d7 03       	nop

80007e2c <_sbrk_r>:
80007e2c:	d4 21       	pushm	r4-r7,lr
80007e2e:	30 08       	mov	r8,0
80007e30:	18 97       	mov	r7,r12
80007e32:	e0 66 07 0c 	mov	r6,1804
80007e36:	16 9c       	mov	r12,r11
80007e38:	8d 08       	st.w	r6[0x0],r8
80007e3a:	ca fc       	rcall	80007f98 <_sbrk>
80007e3c:	5b fc       	cp.w	r12,-1
80007e3e:	c0 51       	brne	80007e48 <_sbrk_r+0x1c>
80007e40:	6c 08       	ld.w	r8,r6[0x0]
80007e42:	58 08       	cp.w	r8,0
80007e44:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007e48:	d8 22       	popm	r4-r7,pc
80007e4a:	d7 03       	nop

80007e4c <__sclose>:
80007e4c:	d4 01       	pushm	lr
80007e4e:	96 7b       	ld.sh	r11,r11[0xe]
80007e50:	cf ec       	rcall	8000804c <_close_r>
80007e52:	d8 02       	popm	pc

80007e54 <__sseek>:
80007e54:	d4 21       	pushm	r4-r7,lr
80007e56:	16 97       	mov	r7,r11
80007e58:	96 7b       	ld.sh	r11,r11[0xe]
80007e5a:	c8 5d       	rcall	80008164 <_lseek_r>
80007e5c:	8e 68       	ld.sh	r8,r7[0xc]
80007e5e:	10 99       	mov	r9,r8
80007e60:	ad c8       	cbr	r8,0xc
80007e62:	ad a9       	sbr	r9,0xc
80007e64:	5b fc       	cp.w	r12,-1
80007e66:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007e6a:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007e6e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007e72:	d8 22       	popm	r4-r7,pc

80007e74 <__swrite>:
80007e74:	d4 21       	pushm	r4-r7,lr
80007e76:	96 68       	ld.sh	r8,r11[0xc]
80007e78:	16 97       	mov	r7,r11
80007e7a:	14 95       	mov	r5,r10
80007e7c:	12 94       	mov	r4,r9
80007e7e:	e2 18 01 00 	andl	r8,0x100,COH
80007e82:	18 96       	mov	r6,r12
80007e84:	c0 50       	breq	80007e8e <__swrite+0x1a>
80007e86:	30 29       	mov	r9,2
80007e88:	30 0a       	mov	r10,0
80007e8a:	96 7b       	ld.sh	r11,r11[0xe]
80007e8c:	c6 cd       	rcall	80008164 <_lseek_r>
80007e8e:	8e 68       	ld.sh	r8,r7[0xc]
80007e90:	ad c8       	cbr	r8,0xc
80007e92:	08 99       	mov	r9,r4
80007e94:	0a 9a       	mov	r10,r5
80007e96:	8e 7b       	ld.sh	r11,r7[0xe]
80007e98:	0c 9c       	mov	r12,r6
80007e9a:	ae 68       	st.h	r7[0xc],r8
80007e9c:	c9 ac       	rcall	80007fd0 <_write_r>
80007e9e:	d8 22       	popm	r4-r7,pc

80007ea0 <__sread>:
80007ea0:	d4 21       	pushm	r4-r7,lr
80007ea2:	16 97       	mov	r7,r11
80007ea4:	96 7b       	ld.sh	r11,r11[0xe]
80007ea6:	c7 1d       	rcall	80008188 <_read_r>
80007ea8:	c0 65       	brlt	80007eb4 <__sread+0x14>
80007eaa:	6f 58       	ld.w	r8,r7[0x54]
80007eac:	18 08       	add	r8,r12
80007eae:	ef 48 00 54 	st.w	r7[84],r8
80007eb2:	d8 22       	popm	r4-r7,pc
80007eb4:	8e 68       	ld.sh	r8,r7[0xc]
80007eb6:	ad c8       	cbr	r8,0xc
80007eb8:	ae 68       	st.h	r7[0xc],r8
80007eba:	d8 22       	popm	r4-r7,pc

80007ebc <strlen>:
80007ebc:	30 09       	mov	r9,0
80007ebe:	18 98       	mov	r8,r12
80007ec0:	c0 28       	rjmp	80007ec4 <strlen+0x8>
80007ec2:	2f f8       	sub	r8,-1
80007ec4:	11 8a       	ld.ub	r10,r8[0x0]
80007ec6:	f2 0a 18 00 	cp.b	r10,r9
80007eca:	cf c1       	brne	80007ec2 <strlen+0x6>
80007ecc:	f0 0c 01 0c 	sub	r12,r8,r12
80007ed0:	5e fc       	retal	r12
80007ed2:	d7 03       	nop

80007ed4 <_close>:
80007ed4:	30 28       	mov	r8,2
80007ed6:	d6 73       	breakpoint
80007ed8:	3f fc       	mov	r12,-1
80007eda:	35 8b       	mov	r11,88
80007edc:	58 0c       	cp.w	r12,0
80007ede:	5e 4c       	retge	r12
80007ee0:	e0 6a 07 0c 	mov	r10,1804
80007ee4:	95 0b       	st.w	r10[0x0],r11
80007ee6:	5e fc       	retal	r12

80007ee8 <_lseek>:
80007ee8:	30 58       	mov	r8,5
80007eea:	d6 73       	breakpoint
80007eec:	3f fc       	mov	r12,-1
80007eee:	35 8b       	mov	r11,88
80007ef0:	58 0c       	cp.w	r12,0
80007ef2:	5e 4c       	retge	r12
80007ef4:	e0 6a 07 0c 	mov	r10,1804
80007ef8:	95 0b       	st.w	r10[0x0],r11
80007efa:	5e fc       	retal	r12

80007efc <_read>:
80007efc:	30 38       	mov	r8,3
80007efe:	d6 73       	breakpoint
80007f00:	3f fc       	mov	r12,-1
80007f02:	35 8b       	mov	r11,88
80007f04:	58 0c       	cp.w	r12,0
80007f06:	5e 4c       	retge	r12
80007f08:	e0 6a 07 0c 	mov	r10,1804
80007f0c:	95 0b       	st.w	r10[0x0],r11
80007f0e:	5e fc       	retal	r12

80007f10 <_write>:
80007f10:	30 48       	mov	r8,4
80007f12:	d6 73       	breakpoint
80007f14:	3f fc       	mov	r12,-1
80007f16:	35 8b       	mov	r11,88
80007f18:	58 0c       	cp.w	r12,0
80007f1a:	5e 4c       	retge	r12
80007f1c:	e0 6a 07 0c 	mov	r10,1804
80007f20:	95 0b       	st.w	r10[0x0],r11
80007f22:	5e fc       	retal	r12

80007f24 <isatty>:
80007f24:	30 b8       	mov	r8,11
80007f26:	d6 73       	breakpoint
80007f28:	3f fc       	mov	r12,-1
80007f2a:	35 8b       	mov	r11,88
80007f2c:	58 0c       	cp.w	r12,0
80007f2e:	5e 4c       	retge	r12
80007f30:	e0 6a 07 0c 	mov	r10,1804
80007f34:	95 0b       	st.w	r10[0x0],r11
80007f36:	5e fc       	retal	r12

80007f38 <_fstat_host>:
80007f38:	30 98       	mov	r8,9
80007f3a:	d6 73       	breakpoint
80007f3c:	3f fc       	mov	r12,-1
80007f3e:	35 8b       	mov	r11,88
80007f40:	58 0c       	cp.w	r12,0
80007f42:	5e 4c       	retge	r12
80007f44:	e0 6a 07 0c 	mov	r10,1804
80007f48:	95 0b       	st.w	r10[0x0],r11
80007f4a:	5e fc       	retal	r12

80007f4c <_fstat>:
80007f4c:	d4 21       	pushm	r4-r7,lr
80007f4e:	21 0d       	sub	sp,64
80007f50:	16 97       	mov	r7,r11
80007f52:	1a 9b       	mov	r11,sp
80007f54:	cf 2f       	rcall	80007f38 <_fstat_host>
80007f56:	c0 34       	brge	80007f5c <_fstat+0x10>
80007f58:	3f fc       	mov	r12,-1
80007f5a:	c1 c8       	rjmp	80007f92 <_fstat+0x46>
80007f5c:	40 08       	lddsp	r8,sp[0x0]
80007f5e:	ae 08       	st.h	r7[0x0],r8
80007f60:	40 18       	lddsp	r8,sp[0x4]
80007f62:	ae 18       	st.h	r7[0x2],r8
80007f64:	40 28       	lddsp	r8,sp[0x8]
80007f66:	8f 18       	st.w	r7[0x4],r8
80007f68:	40 38       	lddsp	r8,sp[0xc]
80007f6a:	ae 48       	st.h	r7[0x8],r8
80007f6c:	40 48       	lddsp	r8,sp[0x10]
80007f6e:	ae 58       	st.h	r7[0xa],r8
80007f70:	40 58       	lddsp	r8,sp[0x14]
80007f72:	ae 68       	st.h	r7[0xc],r8
80007f74:	40 68       	lddsp	r8,sp[0x18]
80007f76:	ae 78       	st.h	r7[0xe],r8
80007f78:	40 88       	lddsp	r8,sp[0x20]
80007f7a:	8f 48       	st.w	r7[0x10],r8
80007f7c:	40 a8       	lddsp	r8,sp[0x28]
80007f7e:	8f b8       	st.w	r7[0x2c],r8
80007f80:	40 c8       	lddsp	r8,sp[0x30]
80007f82:	8f c8       	st.w	r7[0x30],r8
80007f84:	40 d8       	lddsp	r8,sp[0x34]
80007f86:	8f 58       	st.w	r7[0x14],r8
80007f88:	40 e8       	lddsp	r8,sp[0x38]
80007f8a:	30 0c       	mov	r12,0
80007f8c:	8f 78       	st.w	r7[0x1c],r8
80007f8e:	40 f8       	lddsp	r8,sp[0x3c]
80007f90:	8f 98       	st.w	r7[0x24],r8
80007f92:	2f 0d       	sub	sp,-64
80007f94:	d8 22       	popm	r4-r7,pc
80007f96:	d7 03       	nop

80007f98 <_sbrk>:
80007f98:	d4 01       	pushm	lr
80007f9a:	e0 68 06 5c 	mov	r8,1628
80007f9e:	70 09       	ld.w	r9,r8[0x0]
80007fa0:	58 09       	cp.w	r9,0
80007fa2:	c0 41       	brne	80007faa <_sbrk+0x12>
80007fa4:	e0 69 07 10 	mov	r9,1808
80007fa8:	91 09       	st.w	r8[0x0],r9
80007faa:	e0 69 06 5c 	mov	r9,1628
80007fae:	e0 6a f0 00 	mov	r10,61440
80007fb2:	72 08       	ld.w	r8,r9[0x0]
80007fb4:	f0 0c 00 0c 	add	r12,r8,r12
80007fb8:	14 3c       	cp.w	r12,r10
80007fba:	e0 8b 00 04 	brhi	80007fc2 <_sbrk+0x2a>
80007fbe:	93 0c       	st.w	r9[0x0],r12
80007fc0:	c0 58       	rjmp	80007fca <_sbrk+0x32>
80007fc2:	c5 5c       	rcall	8000806c <__errno>
80007fc4:	30 c8       	mov	r8,12
80007fc6:	99 08       	st.w	r12[0x0],r8
80007fc8:	3f f8       	mov	r8,-1
80007fca:	10 9c       	mov	r12,r8
80007fcc:	d8 02       	popm	pc
80007fce:	d7 03       	nop

80007fd0 <_write_r>:
80007fd0:	d4 21       	pushm	r4-r7,lr
80007fd2:	16 98       	mov	r8,r11
80007fd4:	18 97       	mov	r7,r12
80007fd6:	10 9c       	mov	r12,r8
80007fd8:	30 08       	mov	r8,0
80007fda:	14 9b       	mov	r11,r10
80007fdc:	e0 66 07 0c 	mov	r6,1804
80007fe0:	12 9a       	mov	r10,r9
80007fe2:	8d 08       	st.w	r6[0x0],r8
80007fe4:	c9 6f       	rcall	80007f10 <_write>
80007fe6:	5b fc       	cp.w	r12,-1
80007fe8:	c0 51       	brne	80007ff2 <_write_r+0x22>
80007fea:	6c 08       	ld.w	r8,r6[0x0]
80007fec:	58 08       	cp.w	r8,0
80007fee:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007ff2:	d8 22       	popm	r4-r7,pc

80007ff4 <_calloc_r>:
80007ff4:	d4 21       	pushm	r4-r7,lr
80007ff6:	f4 0b 02 4b 	mul	r11,r10,r11
80007ffa:	fe b0 f8 5f 	rcall	800070b8 <_malloc_r>
80007ffe:	18 97       	mov	r7,r12
80008000:	c2 30       	breq	80008046 <_calloc_r+0x52>
80008002:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008006:	e0 1a ff fc 	andl	r10,0xfffc
8000800a:	20 4a       	sub	r10,4
8000800c:	e0 4a 00 24 	cp.w	r10,36
80008010:	e0 8b 00 18 	brhi	80008040 <_calloc_r+0x4c>
80008014:	18 98       	mov	r8,r12
80008016:	59 3a       	cp.w	r10,19
80008018:	e0 88 00 0f 	brls	80008036 <_calloc_r+0x42>
8000801c:	30 09       	mov	r9,0
8000801e:	10 a9       	st.w	r8++,r9
80008020:	10 a9       	st.w	r8++,r9
80008022:	59 ba       	cp.w	r10,27
80008024:	e0 88 00 09 	brls	80008036 <_calloc_r+0x42>
80008028:	10 a9       	st.w	r8++,r9
8000802a:	10 a9       	st.w	r8++,r9
8000802c:	e0 4a 00 24 	cp.w	r10,36
80008030:	c0 31       	brne	80008036 <_calloc_r+0x42>
80008032:	10 a9       	st.w	r8++,r9
80008034:	10 a9       	st.w	r8++,r9
80008036:	30 09       	mov	r9,0
80008038:	10 a9       	st.w	r8++,r9
8000803a:	91 19       	st.w	r8[0x4],r9
8000803c:	91 09       	st.w	r8[0x0],r9
8000803e:	c0 48       	rjmp	80008046 <_calloc_r+0x52>
80008040:	30 0b       	mov	r11,0
80008042:	fe b0 fa 7d 	rcall	8000753c <memset>
80008046:	0e 9c       	mov	r12,r7
80008048:	d8 22       	popm	r4-r7,pc
8000804a:	d7 03       	nop

8000804c <_close_r>:
8000804c:	d4 21       	pushm	r4-r7,lr
8000804e:	30 08       	mov	r8,0
80008050:	18 97       	mov	r7,r12
80008052:	e0 66 07 0c 	mov	r6,1804
80008056:	16 9c       	mov	r12,r11
80008058:	8d 08       	st.w	r6[0x0],r8
8000805a:	c3 df       	rcall	80007ed4 <_close>
8000805c:	5b fc       	cp.w	r12,-1
8000805e:	c0 51       	brne	80008068 <_close_r+0x1c>
80008060:	6c 08       	ld.w	r8,r6[0x0]
80008062:	58 08       	cp.w	r8,0
80008064:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008068:	d8 22       	popm	r4-r7,pc
8000806a:	d7 03       	nop

8000806c <__errno>:
8000806c:	e0 68 01 04 	mov	r8,260
80008070:	70 0c       	ld.w	r12,r8[0x0]
80008072:	2f 4c       	sub	r12,-12
80008074:	5e fc       	retal	r12
80008076:	d7 03       	nop

80008078 <_fclose_r>:
80008078:	d4 21       	pushm	r4-r7,lr
8000807a:	18 96       	mov	r6,r12
8000807c:	16 97       	mov	r7,r11
8000807e:	58 0b       	cp.w	r11,0
80008080:	c0 31       	brne	80008086 <_fclose_r+0xe>
80008082:	16 95       	mov	r5,r11
80008084:	c5 38       	rjmp	8000812a <_fclose_r+0xb2>
80008086:	fe b0 f4 87 	rcall	80006994 <__sfp_lock_acquire>
8000808a:	58 06       	cp.w	r6,0
8000808c:	c0 70       	breq	8000809a <_fclose_r+0x22>
8000808e:	6c 68       	ld.w	r8,r6[0x18]
80008090:	58 08       	cp.w	r8,0
80008092:	c0 41       	brne	8000809a <_fclose_r+0x22>
80008094:	0c 9c       	mov	r12,r6
80008096:	fe b0 f4 d1 	rcall	80006a38 <__sinit>
8000809a:	fe c8 e8 de 	sub	r8,pc,-5922
8000809e:	10 37       	cp.w	r7,r8
800080a0:	c0 31       	brne	800080a6 <_fclose_r+0x2e>
800080a2:	6c 07       	ld.w	r7,r6[0x0]
800080a4:	c0 c8       	rjmp	800080bc <_fclose_r+0x44>
800080a6:	fe c8 e8 ca 	sub	r8,pc,-5942
800080aa:	10 37       	cp.w	r7,r8
800080ac:	c0 31       	brne	800080b2 <_fclose_r+0x3a>
800080ae:	6c 17       	ld.w	r7,r6[0x4]
800080b0:	c0 68       	rjmp	800080bc <_fclose_r+0x44>
800080b2:	fe c8 e8 b6 	sub	r8,pc,-5962
800080b6:	10 37       	cp.w	r7,r8
800080b8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800080bc:	8e 69       	ld.sh	r9,r7[0xc]
800080be:	30 08       	mov	r8,0
800080c0:	f0 09 19 00 	cp.h	r9,r8
800080c4:	c0 51       	brne	800080ce <_fclose_r+0x56>
800080c6:	fe b0 f4 68 	rcall	80006996 <__sfp_lock_release>
800080ca:	30 05       	mov	r5,0
800080cc:	c2 f8       	rjmp	8000812a <_fclose_r+0xb2>
800080ce:	0e 9b       	mov	r11,r7
800080d0:	0c 9c       	mov	r12,r6
800080d2:	fe b0 f3 db 	rcall	80006888 <_fflush_r>
800080d6:	6e c8       	ld.w	r8,r7[0x30]
800080d8:	18 95       	mov	r5,r12
800080da:	58 08       	cp.w	r8,0
800080dc:	c0 60       	breq	800080e8 <_fclose_r+0x70>
800080de:	6e 8b       	ld.w	r11,r7[0x20]
800080e0:	0c 9c       	mov	r12,r6
800080e2:	5d 18       	icall	r8
800080e4:	f9 b5 05 ff 	movlt	r5,-1
800080e8:	8e 68       	ld.sh	r8,r7[0xc]
800080ea:	ed b8 00 07 	bld	r8,0x7
800080ee:	c0 51       	brne	800080f8 <_fclose_r+0x80>
800080f0:	6e 4b       	ld.w	r11,r7[0x10]
800080f2:	0c 9c       	mov	r12,r6
800080f4:	fe b0 f5 3c 	rcall	80006b6c <_free_r>
800080f8:	6e db       	ld.w	r11,r7[0x34]
800080fa:	58 0b       	cp.w	r11,0
800080fc:	c0 a0       	breq	80008110 <_fclose_r+0x98>
800080fe:	ee c8 ff bc 	sub	r8,r7,-68
80008102:	10 3b       	cp.w	r11,r8
80008104:	c0 40       	breq	8000810c <_fclose_r+0x94>
80008106:	0c 9c       	mov	r12,r6
80008108:	fe b0 f5 32 	rcall	80006b6c <_free_r>
8000810c:	30 08       	mov	r8,0
8000810e:	8f d8       	st.w	r7[0x34],r8
80008110:	6f 2b       	ld.w	r11,r7[0x48]
80008112:	58 0b       	cp.w	r11,0
80008114:	c0 70       	breq	80008122 <_fclose_r+0xaa>
80008116:	0c 9c       	mov	r12,r6
80008118:	fe b0 f5 2a 	rcall	80006b6c <_free_r>
8000811c:	30 08       	mov	r8,0
8000811e:	ef 48 00 48 	st.w	r7[72],r8
80008122:	30 08       	mov	r8,0
80008124:	ae 68       	st.h	r7[0xc],r8
80008126:	fe b0 f4 38 	rcall	80006996 <__sfp_lock_release>
8000812a:	0a 9c       	mov	r12,r5
8000812c:	d8 22       	popm	r4-r7,pc
8000812e:	d7 03       	nop

80008130 <fclose>:
80008130:	d4 01       	pushm	lr
80008132:	e0 68 01 04 	mov	r8,260
80008136:	18 9b       	mov	r11,r12
80008138:	70 0c       	ld.w	r12,r8[0x0]
8000813a:	c9 ff       	rcall	80008078 <_fclose_r>
8000813c:	d8 02       	popm	pc
8000813e:	d7 03       	nop

80008140 <_fstat_r>:
80008140:	d4 21       	pushm	r4-r7,lr
80008142:	16 98       	mov	r8,r11
80008144:	18 97       	mov	r7,r12
80008146:	10 9c       	mov	r12,r8
80008148:	30 08       	mov	r8,0
8000814a:	e0 66 07 0c 	mov	r6,1804
8000814e:	14 9b       	mov	r11,r10
80008150:	8d 08       	st.w	r6[0x0],r8
80008152:	cf de       	rcall	80007f4c <_fstat>
80008154:	5b fc       	cp.w	r12,-1
80008156:	c0 51       	brne	80008160 <_fstat_r+0x20>
80008158:	6c 08       	ld.w	r8,r6[0x0]
8000815a:	58 08       	cp.w	r8,0
8000815c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008160:	d8 22       	popm	r4-r7,pc
80008162:	d7 03       	nop

80008164 <_lseek_r>:
80008164:	d4 21       	pushm	r4-r7,lr
80008166:	16 98       	mov	r8,r11
80008168:	18 97       	mov	r7,r12
8000816a:	10 9c       	mov	r12,r8
8000816c:	30 08       	mov	r8,0
8000816e:	14 9b       	mov	r11,r10
80008170:	e0 66 07 0c 	mov	r6,1804
80008174:	12 9a       	mov	r10,r9
80008176:	8d 08       	st.w	r6[0x0],r8
80008178:	cb 8e       	rcall	80007ee8 <_lseek>
8000817a:	5b fc       	cp.w	r12,-1
8000817c:	c0 51       	brne	80008186 <_lseek_r+0x22>
8000817e:	6c 08       	ld.w	r8,r6[0x0]
80008180:	58 08       	cp.w	r8,0
80008182:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008186:	d8 22       	popm	r4-r7,pc

80008188 <_read_r>:
80008188:	d4 21       	pushm	r4-r7,lr
8000818a:	16 98       	mov	r8,r11
8000818c:	18 97       	mov	r7,r12
8000818e:	10 9c       	mov	r12,r8
80008190:	30 08       	mov	r8,0
80008192:	14 9b       	mov	r11,r10
80008194:	e0 66 07 0c 	mov	r6,1804
80008198:	12 9a       	mov	r10,r9
8000819a:	8d 08       	st.w	r6[0x0],r8
8000819c:	cb 0e       	rcall	80007efc <_read>
8000819e:	5b fc       	cp.w	r12,-1
800081a0:	c0 51       	brne	800081aa <_read_r+0x22>
800081a2:	6c 08       	ld.w	r8,r6[0x0]
800081a4:	58 08       	cp.w	r8,0
800081a6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800081aa:	d8 22       	popm	r4-r7,pc

800081ac <__avr32_f64_mul>:
800081ac:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800081b0:	e0 80 00 dc 	breq	80008368 <__avr32_f64_mul_op1_zero>
800081b4:	d4 21       	pushm	r4-r7,lr
800081b6:	f7 e9 20 0e 	eor	lr,r11,r9
800081ba:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800081be:	30 15       	mov	r5,1
800081c0:	c4 30       	breq	80008246 <__avr32_f64_mul_op1_subnormal>
800081c2:	ab 6b       	lsl	r11,0xa
800081c4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800081c8:	ab 6a       	lsl	r10,0xa
800081ca:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800081ce:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800081d2:	c5 c0       	breq	8000828a <__avr32_f64_mul_op2_subnormal>
800081d4:	a1 78       	lsl	r8,0x1
800081d6:	5c f9       	rol	r9
800081d8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800081dc:	e0 47 07 ff 	cp.w	r7,2047
800081e0:	c7 70       	breq	800082ce <__avr32_f64_mul_op_nan_or_inf>
800081e2:	e0 46 07 ff 	cp.w	r6,2047
800081e6:	c7 40       	breq	800082ce <__avr32_f64_mul_op_nan_or_inf>
800081e8:	ee 06 00 0c 	add	r12,r7,r6
800081ec:	e0 2c 03 fe 	sub	r12,1022
800081f0:	f6 08 06 44 	mulu.d	r4,r11,r8
800081f4:	f4 09 07 44 	macu.d	r4,r10,r9
800081f8:	f4 08 06 46 	mulu.d	r6,r10,r8
800081fc:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008200:	08 07       	add	r7,r4
80008202:	f4 05 00 4a 	adc	r10,r10,r5
80008206:	5c 0b       	acr	r11
80008208:	ed bb 00 14 	bld	r11,0x14
8000820c:	c0 50       	breq	80008216 <__avr32_f64_mul+0x6a>
8000820e:	a1 77       	lsl	r7,0x1
80008210:	5c fa       	rol	r10
80008212:	5c fb       	rol	r11
80008214:	20 1c       	sub	r12,1
80008216:	58 0c       	cp.w	r12,0
80008218:	e0 8a 00 6f 	brle	800082f6 <__avr32_f64_mul_res_subnormal>
8000821c:	e0 4c 07 ff 	cp.w	r12,2047
80008220:	e0 84 00 9c 	brge	80008358 <__avr32_f64_mul_res_inf>
80008224:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008228:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000822c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008230:	ee 17 80 00 	eorh	r7,0x8000
80008234:	f1 b7 04 20 	satu	r7,0x1
80008238:	0e 0a       	add	r10,r7
8000823a:	5c 0b       	acr	r11
8000823c:	ed be 00 1f 	bld	lr,0x1f
80008240:	ef bb 00 1f 	bst	r11,0x1f
80008244:	d8 22       	popm	r4-r7,pc

80008246 <__avr32_f64_mul_op1_subnormal>:
80008246:	e4 1b 00 0f 	andh	r11,0xf
8000824a:	f4 0c 12 00 	clz	r12,r10
8000824e:	f6 06 12 00 	clz	r6,r11
80008252:	f7 bc 03 e1 	sublo	r12,-31
80008256:	f8 06 17 30 	movlo	r6,r12
8000825a:	f7 b6 02 01 	subhs	r6,1
8000825e:	e0 46 00 20 	cp.w	r6,32
80008262:	c0 d4       	brge	8000827c <__avr32_f64_mul_op1_subnormal+0x36>
80008264:	ec 0c 11 20 	rsub	r12,r6,32
80008268:	f6 06 09 4b 	lsl	r11,r11,r6
8000826c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008270:	18 4b       	or	r11,r12
80008272:	f4 06 09 4a 	lsl	r10,r10,r6
80008276:	20 b6       	sub	r6,11
80008278:	0c 17       	sub	r7,r6
8000827a:	ca ab       	rjmp	800081ce <__avr32_f64_mul+0x22>
8000827c:	f4 06 09 4b 	lsl	r11,r10,r6
80008280:	c6 40       	breq	80008348 <__avr32_f64_mul_res_zero>
80008282:	30 0a       	mov	r10,0
80008284:	20 b6       	sub	r6,11
80008286:	0c 17       	sub	r7,r6
80008288:	ca 3b       	rjmp	800081ce <__avr32_f64_mul+0x22>

8000828a <__avr32_f64_mul_op2_subnormal>:
8000828a:	e4 19 00 0f 	andh	r9,0xf
8000828e:	f0 0c 12 00 	clz	r12,r8
80008292:	f2 05 12 00 	clz	r5,r9
80008296:	f7 bc 03 ea 	sublo	r12,-22
8000829a:	f8 05 17 30 	movlo	r5,r12
8000829e:	f7 b5 02 0a 	subhs	r5,10
800082a2:	e0 45 00 20 	cp.w	r5,32
800082a6:	c0 d4       	brge	800082c0 <__avr32_f64_mul_op2_subnormal+0x36>
800082a8:	ea 0c 11 20 	rsub	r12,r5,32
800082ac:	f2 05 09 49 	lsl	r9,r9,r5
800082b0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800082b4:	18 49       	or	r9,r12
800082b6:	f0 05 09 48 	lsl	r8,r8,r5
800082ba:	20 25       	sub	r5,2
800082bc:	0a 16       	sub	r6,r5
800082be:	c8 fb       	rjmp	800081dc <__avr32_f64_mul+0x30>
800082c0:	f0 05 09 49 	lsl	r9,r8,r5
800082c4:	c4 20       	breq	80008348 <__avr32_f64_mul_res_zero>
800082c6:	30 08       	mov	r8,0
800082c8:	20 25       	sub	r5,2
800082ca:	0a 16       	sub	r6,r5
800082cc:	c8 8b       	rjmp	800081dc <__avr32_f64_mul+0x30>

800082ce <__avr32_f64_mul_op_nan_or_inf>:
800082ce:	e4 19 00 0f 	andh	r9,0xf
800082d2:	e4 1b 00 0f 	andh	r11,0xf
800082d6:	14 4b       	or	r11,r10
800082d8:	10 49       	or	r9,r8
800082da:	e0 47 07 ff 	cp.w	r7,2047
800082de:	c0 91       	brne	800082f0 <__avr32_f64_mul_op1_not_naninf>
800082e0:	58 0b       	cp.w	r11,0
800082e2:	c3 81       	brne	80008352 <__avr32_f64_mul_res_nan>
800082e4:	e0 46 07 ff 	cp.w	r6,2047
800082e8:	c3 81       	brne	80008358 <__avr32_f64_mul_res_inf>
800082ea:	58 09       	cp.w	r9,0
800082ec:	c3 60       	breq	80008358 <__avr32_f64_mul_res_inf>
800082ee:	c3 28       	rjmp	80008352 <__avr32_f64_mul_res_nan>

800082f0 <__avr32_f64_mul_op1_not_naninf>:
800082f0:	58 09       	cp.w	r9,0
800082f2:	c3 30       	breq	80008358 <__avr32_f64_mul_res_inf>
800082f4:	c2 f8       	rjmp	80008352 <__avr32_f64_mul_res_nan>

800082f6 <__avr32_f64_mul_res_subnormal>:
800082f6:	5c 3c       	neg	r12
800082f8:	2f fc       	sub	r12,-1
800082fa:	f1 bc 04 c0 	satu	r12,0x6
800082fe:	e0 4c 00 20 	cp.w	r12,32
80008302:	c1 14       	brge	80008324 <__avr32_f64_mul_res_subnormal+0x2e>
80008304:	f8 08 11 20 	rsub	r8,r12,32
80008308:	0e 46       	or	r6,r7
8000830a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000830e:	f4 08 09 49 	lsl	r9,r10,r8
80008312:	12 47       	or	r7,r9
80008314:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008318:	f6 08 09 49 	lsl	r9,r11,r8
8000831c:	12 4a       	or	r10,r9
8000831e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008322:	c8 3b       	rjmp	80008228 <__avr32_f64_mul+0x7c>
80008324:	f8 08 11 20 	rsub	r8,r12,32
80008328:	f9 b9 00 00 	moveq	r9,0
8000832c:	c0 30       	breq	80008332 <__avr32_f64_mul_res_subnormal+0x3c>
8000832e:	f6 08 09 49 	lsl	r9,r11,r8
80008332:	0e 46       	or	r6,r7
80008334:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008338:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000833c:	f3 ea 10 07 	or	r7,r9,r10
80008340:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008344:	30 0b       	mov	r11,0
80008346:	c7 1b       	rjmp	80008228 <__avr32_f64_mul+0x7c>

80008348 <__avr32_f64_mul_res_zero>:
80008348:	1c 9b       	mov	r11,lr
8000834a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000834e:	30 0a       	mov	r10,0
80008350:	d8 22       	popm	r4-r7,pc

80008352 <__avr32_f64_mul_res_nan>:
80008352:	3f fb       	mov	r11,-1
80008354:	3f fa       	mov	r10,-1
80008356:	d8 22       	popm	r4-r7,pc

80008358 <__avr32_f64_mul_res_inf>:
80008358:	f0 6b 00 00 	mov	r11,-1048576
8000835c:	ed be 00 1f 	bld	lr,0x1f
80008360:	ef bb 00 1f 	bst	r11,0x1f
80008364:	30 0a       	mov	r10,0
80008366:	d8 22       	popm	r4-r7,pc

80008368 <__avr32_f64_mul_op1_zero>:
80008368:	f7 e9 20 0b 	eor	r11,r11,r9
8000836c:	e6 1b 80 00 	andh	r11,0x8000,COH
80008370:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008374:	e0 4c 07 ff 	cp.w	r12,2047
80008378:	5e 1c       	retne	r12
8000837a:	3f fa       	mov	r10,-1
8000837c:	3f fb       	mov	r11,-1
8000837e:	5e fc       	retal	r12

80008380 <__avr32_f64_sub_from_add>:
80008380:	ee 19 80 00 	eorh	r9,0x8000

80008384 <__avr32_f64_sub>:
80008384:	f7 e9 20 0c 	eor	r12,r11,r9
80008388:	e0 86 00 ca 	brmi	8000851c <__avr32_f64_add_from_sub>
8000838c:	eb cd 40 e0 	pushm	r5-r7,lr
80008390:	16 9c       	mov	r12,r11
80008392:	e6 1c 80 00 	andh	r12,0x8000,COH
80008396:	bf db       	cbr	r11,0x1f
80008398:	bf d9       	cbr	r9,0x1f
8000839a:	10 3a       	cp.w	r10,r8
8000839c:	f2 0b 13 00 	cpc	r11,r9
800083a0:	c0 92       	brcc	800083b2 <__avr32_f64_sub+0x2e>
800083a2:	16 97       	mov	r7,r11
800083a4:	12 9b       	mov	r11,r9
800083a6:	0e 99       	mov	r9,r7
800083a8:	14 97       	mov	r7,r10
800083aa:	10 9a       	mov	r10,r8
800083ac:	0e 98       	mov	r8,r7
800083ae:	ee 1c 80 00 	eorh	r12,0x8000
800083b2:	f6 07 16 14 	lsr	r7,r11,0x14
800083b6:	ab 7b       	lsl	r11,0xb
800083b8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800083bc:	ab 7a       	lsl	r10,0xb
800083be:	bf bb       	sbr	r11,0x1f
800083c0:	f2 06 16 14 	lsr	r6,r9,0x14
800083c4:	c4 40       	breq	8000844c <__avr32_f64_sub_opL_subnormal>
800083c6:	ab 79       	lsl	r9,0xb
800083c8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800083cc:	ab 78       	lsl	r8,0xb
800083ce:	bf b9       	sbr	r9,0x1f

800083d0 <__avr32_f64_sub_opL_subnormal_done>:
800083d0:	e0 47 07 ff 	cp.w	r7,2047
800083d4:	c4 f0       	breq	80008472 <__avr32_f64_sub_opH_nan_or_inf>
800083d6:	0e 26       	rsub	r6,r7
800083d8:	c1 20       	breq	800083fc <__avr32_f64_sub_shift_done>
800083da:	ec 05 11 20 	rsub	r5,r6,32
800083de:	e0 46 00 20 	cp.w	r6,32
800083e2:	c7 c2       	brcc	800084da <__avr32_f64_sub_longshift>
800083e4:	f0 05 09 4e 	lsl	lr,r8,r5
800083e8:	f2 05 09 45 	lsl	r5,r9,r5
800083ec:	f0 06 0a 48 	lsr	r8,r8,r6
800083f0:	f2 06 0a 49 	lsr	r9,r9,r6
800083f4:	0a 48       	or	r8,r5
800083f6:	58 0e       	cp.w	lr,0
800083f8:	5f 1e       	srne	lr
800083fa:	1c 48       	or	r8,lr

800083fc <__avr32_f64_sub_shift_done>:
800083fc:	10 1a       	sub	r10,r8
800083fe:	f6 09 01 4b 	sbc	r11,r11,r9
80008402:	f6 06 12 00 	clz	r6,r11
80008406:	c0 e0       	breq	80008422 <__avr32_f64_sub_longnormalize_done>
80008408:	c7 83       	brcs	800084f8 <__avr32_f64_sub_longnormalize>
8000840a:	ec 0e 11 20 	rsub	lr,r6,32
8000840e:	f6 06 09 4b 	lsl	r11,r11,r6
80008412:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008416:	1c 4b       	or	r11,lr
80008418:	f4 06 09 4a 	lsl	r10,r10,r6
8000841c:	0c 17       	sub	r7,r6
8000841e:	e0 8a 00 39 	brle	80008490 <__avr32_f64_sub_subnormal_result>

80008422 <__avr32_f64_sub_longnormalize_done>:
80008422:	f4 09 15 15 	lsl	r9,r10,0x15
80008426:	ab 9a       	lsr	r10,0xb
80008428:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000842c:	ab 9b       	lsr	r11,0xb
8000842e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008432:	18 4b       	or	r11,r12

80008434 <__avr32_f64_sub_round>:
80008434:	fc 17 80 00 	movh	r7,0x8000
80008438:	ed ba 00 00 	bld	r10,0x0
8000843c:	f7 b7 01 ff 	subne	r7,-1
80008440:	0e 39       	cp.w	r9,r7
80008442:	5f 29       	srhs	r9
80008444:	12 0a       	add	r10,r9
80008446:	5c 0b       	acr	r11
80008448:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000844c <__avr32_f64_sub_opL_subnormal>:
8000844c:	ab 79       	lsl	r9,0xb
8000844e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008452:	ab 78       	lsl	r8,0xb
80008454:	f3 e8 10 0e 	or	lr,r9,r8
80008458:	f9 b6 01 01 	movne	r6,1
8000845c:	ee 0e 11 00 	rsub	lr,r7,0
80008460:	f9 b7 00 01 	moveq	r7,1
80008464:	ef bb 00 1f 	bst	r11,0x1f
80008468:	f7 ea 10 0e 	or	lr,r11,r10
8000846c:	f9 b7 00 00 	moveq	r7,0
80008470:	cb 0b       	rjmp	800083d0 <__avr32_f64_sub_opL_subnormal_done>

80008472 <__avr32_f64_sub_opH_nan_or_inf>:
80008472:	bf db       	cbr	r11,0x1f
80008474:	f7 ea 10 0e 	or	lr,r11,r10
80008478:	c0 81       	brne	80008488 <__avr32_f64_sub_return_nan>
8000847a:	e0 46 07 ff 	cp.w	r6,2047
8000847e:	c0 50       	breq	80008488 <__avr32_f64_sub_return_nan>
80008480:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008484:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008488 <__avr32_f64_sub_return_nan>:
80008488:	3f fa       	mov	r10,-1
8000848a:	3f fb       	mov	r11,-1
8000848c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008490 <__avr32_f64_sub_subnormal_result>:
80008490:	5c 37       	neg	r7
80008492:	2f f7       	sub	r7,-1
80008494:	f1 b7 04 c0 	satu	r7,0x6
80008498:	e0 47 00 20 	cp.w	r7,32
8000849c:	c1 14       	brge	800084be <__avr32_f64_sub_subnormal_result+0x2e>
8000849e:	ee 08 11 20 	rsub	r8,r7,32
800084a2:	f4 08 09 49 	lsl	r9,r10,r8
800084a6:	5f 16       	srne	r6
800084a8:	f4 07 0a 4a 	lsr	r10,r10,r7
800084ac:	0c 4a       	or	r10,r6
800084ae:	f6 08 09 49 	lsl	r9,r11,r8
800084b2:	f5 e9 10 0a 	or	r10,r10,r9
800084b6:	f4 07 0a 4b 	lsr	r11,r10,r7
800084ba:	30 07       	mov	r7,0
800084bc:	cb 3b       	rjmp	80008422 <__avr32_f64_sub_longnormalize_done>
800084be:	ee 08 11 40 	rsub	r8,r7,64
800084c2:	f6 08 09 49 	lsl	r9,r11,r8
800084c6:	14 49       	or	r9,r10
800084c8:	5f 16       	srne	r6
800084ca:	f6 07 0a 4a 	lsr	r10,r11,r7
800084ce:	0c 4a       	or	r10,r6
800084d0:	30 0b       	mov	r11,0
800084d2:	30 07       	mov	r7,0
800084d4:	ca 7b       	rjmp	80008422 <__avr32_f64_sub_longnormalize_done>
800084d6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800084da <__avr32_f64_sub_longshift>:
800084da:	f1 b6 04 c0 	satu	r6,0x6
800084de:	f0 0e 17 00 	moveq	lr,r8
800084e2:	c0 40       	breq	800084ea <__avr32_f64_sub_longshift+0x10>
800084e4:	f2 05 09 4e 	lsl	lr,r9,r5
800084e8:	10 4e       	or	lr,r8
800084ea:	f2 06 0a 48 	lsr	r8,r9,r6
800084ee:	30 09       	mov	r9,0
800084f0:	58 0e       	cp.w	lr,0
800084f2:	5f 1e       	srne	lr
800084f4:	1c 48       	or	r8,lr
800084f6:	c8 3b       	rjmp	800083fc <__avr32_f64_sub_shift_done>

800084f8 <__avr32_f64_sub_longnormalize>:
800084f8:	f4 06 12 00 	clz	r6,r10
800084fc:	f9 b7 03 00 	movlo	r7,0
80008500:	f9 b6 03 00 	movlo	r6,0
80008504:	f9 bc 03 00 	movlo	r12,0
80008508:	f7 b6 02 e0 	subhs	r6,-32
8000850c:	f4 06 09 4b 	lsl	r11,r10,r6
80008510:	30 0a       	mov	r10,0
80008512:	0c 17       	sub	r7,r6
80008514:	fe 9a ff be 	brle	80008490 <__avr32_f64_sub_subnormal_result>
80008518:	c8 5b       	rjmp	80008422 <__avr32_f64_sub_longnormalize_done>
8000851a:	d7 03       	nop

8000851c <__avr32_f64_add_from_sub>:
8000851c:	ee 19 80 00 	eorh	r9,0x8000

80008520 <__avr32_f64_add>:
80008520:	f7 e9 20 0c 	eor	r12,r11,r9
80008524:	fe 96 ff 2e 	brmi	80008380 <__avr32_f64_sub_from_add>
80008528:	eb cd 40 e0 	pushm	r5-r7,lr
8000852c:	16 9c       	mov	r12,r11
8000852e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008532:	bf db       	cbr	r11,0x1f
80008534:	bf d9       	cbr	r9,0x1f
80008536:	12 3b       	cp.w	r11,r9
80008538:	c0 72       	brcc	80008546 <__avr32_f64_add+0x26>
8000853a:	16 97       	mov	r7,r11
8000853c:	12 9b       	mov	r11,r9
8000853e:	0e 99       	mov	r9,r7
80008540:	14 97       	mov	r7,r10
80008542:	10 9a       	mov	r10,r8
80008544:	0e 98       	mov	r8,r7
80008546:	30 0e       	mov	lr,0
80008548:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000854c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008550:	b5 ab       	sbr	r11,0x14
80008552:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008556:	c6 20       	breq	8000861a <__avr32_f64_add_op2_subnormal>
80008558:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000855c:	b5 a9       	sbr	r9,0x14
8000855e:	e0 47 07 ff 	cp.w	r7,2047
80008562:	c2 80       	breq	800085b2 <__avr32_f64_add_opH_nan_or_inf>
80008564:	0e 26       	rsub	r6,r7
80008566:	c1 20       	breq	8000858a <__avr32_f64_add_shift_done>
80008568:	e0 46 00 36 	cp.w	r6,54
8000856c:	c1 52       	brcc	80008596 <__avr32_f64_add_res_of_done>
8000856e:	ec 05 11 20 	rsub	r5,r6,32
80008572:	e0 46 00 20 	cp.w	r6,32
80008576:	c3 52       	brcc	800085e0 <__avr32_f64_add_longshift>
80008578:	f0 05 09 4e 	lsl	lr,r8,r5
8000857c:	f2 05 09 45 	lsl	r5,r9,r5
80008580:	f0 06 0a 48 	lsr	r8,r8,r6
80008584:	f2 06 0a 49 	lsr	r9,r9,r6
80008588:	0a 48       	or	r8,r5

8000858a <__avr32_f64_add_shift_done>:
8000858a:	10 0a       	add	r10,r8
8000858c:	f6 09 00 4b 	adc	r11,r11,r9
80008590:	ed bb 00 15 	bld	r11,0x15
80008594:	c3 40       	breq	800085fc <__avr32_f64_add_res_of>

80008596 <__avr32_f64_add_res_of_done>:
80008596:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000859a:	18 4b       	or	r11,r12

8000859c <__avr32_f64_add_round>:
8000859c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800085a0:	18 4e       	or	lr,r12
800085a2:	ee 1e 80 00 	eorh	lr,0x8000
800085a6:	f1 be 04 20 	satu	lr,0x1
800085aa:	1c 0a       	add	r10,lr
800085ac:	5c 0b       	acr	r11
800085ae:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085b2 <__avr32_f64_add_opH_nan_or_inf>:
800085b2:	b5 cb       	cbr	r11,0x14
800085b4:	f7 ea 10 0e 	or	lr,r11,r10
800085b8:	c1 01       	brne	800085d8 <__avr32_f64_add_return_nan>
800085ba:	e0 46 07 ff 	cp.w	r6,2047
800085be:	c0 30       	breq	800085c4 <__avr32_f64_add_opL_nan_or_inf>
800085c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085c4 <__avr32_f64_add_opL_nan_or_inf>:
800085c4:	b5 c9       	cbr	r9,0x14
800085c6:	f3 e8 10 0e 	or	lr,r9,r8
800085ca:	c0 71       	brne	800085d8 <__avr32_f64_add_return_nan>
800085cc:	30 0a       	mov	r10,0
800085ce:	fc 1b 7f f0 	movh	r11,0x7ff0
800085d2:	18 4b       	or	r11,r12
800085d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085d8 <__avr32_f64_add_return_nan>:
800085d8:	3f fa       	mov	r10,-1
800085da:	3f fb       	mov	r11,-1
800085dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800085e0 <__avr32_f64_add_longshift>:
800085e0:	f1 b6 04 c0 	satu	r6,0x6
800085e4:	f0 0e 17 00 	moveq	lr,r8
800085e8:	c0 60       	breq	800085f4 <__avr32_f64_add_longshift+0x14>
800085ea:	f2 05 09 4e 	lsl	lr,r9,r5
800085ee:	58 08       	cp.w	r8,0
800085f0:	5f 18       	srne	r8
800085f2:	10 4e       	or	lr,r8
800085f4:	f2 06 0a 48 	lsr	r8,r9,r6
800085f8:	30 09       	mov	r9,0
800085fa:	cc 8b       	rjmp	8000858a <__avr32_f64_add_shift_done>

800085fc <__avr32_f64_add_res_of>:
800085fc:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008600:	a1 9b       	lsr	r11,0x1
80008602:	5d 0a       	ror	r10
80008604:	5d 0e       	ror	lr
80008606:	2f f7       	sub	r7,-1
80008608:	e0 47 07 ff 	cp.w	r7,2047
8000860c:	f9 ba 00 00 	moveq	r10,0
80008610:	f9 bb 00 00 	moveq	r11,0
80008614:	f9 be 00 00 	moveq	lr,0
80008618:	cb fb       	rjmp	80008596 <__avr32_f64_add_res_of_done>

8000861a <__avr32_f64_add_op2_subnormal>:
8000861a:	30 16       	mov	r6,1
8000861c:	58 07       	cp.w	r7,0
8000861e:	ca 01       	brne	8000855e <__avr32_f64_add+0x3e>
80008620:	b5 cb       	cbr	r11,0x14
80008622:	10 0a       	add	r10,r8
80008624:	f6 09 00 4b 	adc	r11,r11,r9
80008628:	18 4b       	or	r11,r12
8000862a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000862e:	d7 03       	nop

80008630 <__avr32_f64_to_u32>:
80008630:	58 0b       	cp.w	r11,0
80008632:	5e 6d       	retmi	0

80008634 <__avr32_f64_to_s32>:
80008634:	f6 0c 15 01 	lsl	r12,r11,0x1
80008638:	b5 9c       	lsr	r12,0x15
8000863a:	e0 2c 03 ff 	sub	r12,1023
8000863e:	5e 3d       	retlo	0
80008640:	f8 0c 11 1f 	rsub	r12,r12,31
80008644:	16 99       	mov	r9,r11
80008646:	ab 7b       	lsl	r11,0xb
80008648:	bf bb       	sbr	r11,0x1f
8000864a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000864e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008652:	a1 79       	lsl	r9,0x1
80008654:	5e 2b       	reths	r11
80008656:	5c 3b       	neg	r11
80008658:	5e fb       	retal	r11

8000865a <__avr32_u32_to_f64>:
8000865a:	f8 cb 00 00 	sub	r11,r12,0
8000865e:	30 0c       	mov	r12,0
80008660:	c0 38       	rjmp	80008666 <__avr32_s32_to_f64+0x4>

80008662 <__avr32_s32_to_f64>:
80008662:	18 9b       	mov	r11,r12
80008664:	5c 4b       	abs	r11
80008666:	30 0a       	mov	r10,0
80008668:	5e 0b       	reteq	r11
8000866a:	d4 01       	pushm	lr
8000866c:	e0 69 04 1e 	mov	r9,1054
80008670:	f6 08 12 00 	clz	r8,r11
80008674:	c1 70       	breq	800086a2 <__avr32_s32_to_f64+0x40>
80008676:	c0 c3       	brcs	8000868e <__avr32_s32_to_f64+0x2c>
80008678:	f0 0e 11 20 	rsub	lr,r8,32
8000867c:	f6 08 09 4b 	lsl	r11,r11,r8
80008680:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008684:	1c 4b       	or	r11,lr
80008686:	f4 08 09 4a 	lsl	r10,r10,r8
8000868a:	10 19       	sub	r9,r8
8000868c:	c0 b8       	rjmp	800086a2 <__avr32_s32_to_f64+0x40>
8000868e:	f4 08 12 00 	clz	r8,r10
80008692:	f9 b8 03 00 	movlo	r8,0
80008696:	f7 b8 02 e0 	subhs	r8,-32
8000869a:	f4 08 09 4b 	lsl	r11,r10,r8
8000869e:	30 0a       	mov	r10,0
800086a0:	10 19       	sub	r9,r8
800086a2:	58 09       	cp.w	r9,0
800086a4:	e0 89 00 30 	brgt	80008704 <__avr32_s32_to_f64+0xa2>
800086a8:	5c 39       	neg	r9
800086aa:	2f f9       	sub	r9,-1
800086ac:	e0 49 00 36 	cp.w	r9,54
800086b0:	c0 43       	brcs	800086b8 <__avr32_s32_to_f64+0x56>
800086b2:	30 0b       	mov	r11,0
800086b4:	30 0a       	mov	r10,0
800086b6:	c2 68       	rjmp	80008702 <__avr32_s32_to_f64+0xa0>
800086b8:	2f 69       	sub	r9,-10
800086ba:	f2 08 11 20 	rsub	r8,r9,32
800086be:	e0 49 00 20 	cp.w	r9,32
800086c2:	c0 b2       	brcc	800086d8 <__avr32_s32_to_f64+0x76>
800086c4:	f4 08 09 4e 	lsl	lr,r10,r8
800086c8:	f6 08 09 48 	lsl	r8,r11,r8
800086cc:	f4 09 0a 4a 	lsr	r10,r10,r9
800086d0:	f6 09 0a 4b 	lsr	r11,r11,r9
800086d4:	10 4b       	or	r11,r8
800086d6:	c0 88       	rjmp	800086e6 <__avr32_s32_to_f64+0x84>
800086d8:	f6 08 09 4e 	lsl	lr,r11,r8
800086dc:	14 4e       	or	lr,r10
800086de:	16 9a       	mov	r10,r11
800086e0:	30 0b       	mov	r11,0
800086e2:	f4 09 0a 4a 	lsr	r10,r10,r9
800086e6:	ed ba 00 00 	bld	r10,0x0
800086ea:	c0 92       	brcc	800086fc <__avr32_s32_to_f64+0x9a>
800086ec:	1c 7e       	tst	lr,lr
800086ee:	c0 41       	brne	800086f6 <__avr32_s32_to_f64+0x94>
800086f0:	ed ba 00 01 	bld	r10,0x1
800086f4:	c0 42       	brcc	800086fc <__avr32_s32_to_f64+0x9a>
800086f6:	2f fa       	sub	r10,-1
800086f8:	f7 bb 02 ff 	subhs	r11,-1
800086fc:	5c fc       	rol	r12
800086fe:	5d 0b       	ror	r11
80008700:	5d 0a       	ror	r10
80008702:	d8 02       	popm	pc
80008704:	e0 68 03 ff 	mov	r8,1023
80008708:	ed ba 00 0b 	bld	r10,0xb
8000870c:	f7 b8 00 ff 	subeq	r8,-1
80008710:	10 0a       	add	r10,r8
80008712:	5c 0b       	acr	r11
80008714:	f7 b9 03 fe 	sublo	r9,-2
80008718:	e0 49 07 ff 	cp.w	r9,2047
8000871c:	c0 55       	brlt	80008726 <__avr32_s32_to_f64+0xc4>
8000871e:	30 0a       	mov	r10,0
80008720:	fc 1b ff e0 	movh	r11,0xffe0
80008724:	c0 c8       	rjmp	8000873c <__floatsidf_return_op1>
80008726:	ed bb 00 1f 	bld	r11,0x1f
8000872a:	f7 b9 01 01 	subne	r9,1
8000872e:	ab 9a       	lsr	r10,0xb
80008730:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008734:	a1 7b       	lsl	r11,0x1
80008736:	ab 9b       	lsr	r11,0xb
80008738:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000873c <__floatsidf_return_op1>:
8000873c:	a1 7c       	lsl	r12,0x1
8000873e:	5d 0b       	ror	r11
80008740:	d8 02       	popm	pc

80008742 <__avr32_f64_cmp_eq>:
80008742:	10 3a       	cp.w	r10,r8
80008744:	f2 0b 13 00 	cpc	r11,r9
80008748:	c0 80       	breq	80008758 <__avr32_f64_cmp_eq+0x16>
8000874a:	a1 7b       	lsl	r11,0x1
8000874c:	a1 79       	lsl	r9,0x1
8000874e:	14 4b       	or	r11,r10
80008750:	12 4b       	or	r11,r9
80008752:	10 4b       	or	r11,r8
80008754:	5e 0f       	reteq	1
80008756:	5e fd       	retal	0
80008758:	a1 7b       	lsl	r11,0x1
8000875a:	fc 1c ff e0 	movh	r12,0xffe0
8000875e:	58 0a       	cp.w	r10,0
80008760:	f8 0b 13 00 	cpc	r11,r12
80008764:	5e 8f       	retls	1
80008766:	5e fd       	retal	0

80008768 <__avr32_f64_cmp_ge>:
80008768:	1a de       	st.w	--sp,lr
8000876a:	1a d7       	st.w	--sp,r7
8000876c:	a1 7b       	lsl	r11,0x1
8000876e:	5f 3c       	srlo	r12
80008770:	a1 79       	lsl	r9,0x1
80008772:	5f 37       	srlo	r7
80008774:	5c fc       	rol	r12
80008776:	fc 1e ff e0 	movh	lr,0xffe0
8000877a:	58 0a       	cp.w	r10,0
8000877c:	fc 0b 13 00 	cpc	r11,lr
80008780:	e0 8b 00 1d 	brhi	800087ba <__avr32_f64_cmp_ge+0x52>
80008784:	58 08       	cp.w	r8,0
80008786:	fc 09 13 00 	cpc	r9,lr
8000878a:	e0 8b 00 18 	brhi	800087ba <__avr32_f64_cmp_ge+0x52>
8000878e:	58 0b       	cp.w	r11,0
80008790:	f5 ba 00 00 	subfeq	r10,0
80008794:	c1 50       	breq	800087be <__avr32_f64_cmp_ge+0x56>
80008796:	1b 07       	ld.w	r7,sp++
80008798:	1b 0e       	ld.w	lr,sp++
8000879a:	58 3c       	cp.w	r12,3
8000879c:	c0 a0       	breq	800087b0 <__avr32_f64_cmp_ge+0x48>
8000879e:	58 1c       	cp.w	r12,1
800087a0:	c0 33       	brcs	800087a6 <__avr32_f64_cmp_ge+0x3e>
800087a2:	5e 0f       	reteq	1
800087a4:	5e 1d       	retne	0
800087a6:	10 3a       	cp.w	r10,r8
800087a8:	f2 0b 13 00 	cpc	r11,r9
800087ac:	5e 2f       	reths	1
800087ae:	5e 3d       	retlo	0
800087b0:	14 38       	cp.w	r8,r10
800087b2:	f6 09 13 00 	cpc	r9,r11
800087b6:	5e 2f       	reths	1
800087b8:	5e 3d       	retlo	0
800087ba:	1b 07       	ld.w	r7,sp++
800087bc:	d8 0a       	popm	pc,r12=0
800087be:	58 17       	cp.w	r7,1
800087c0:	5f 0c       	sreq	r12
800087c2:	58 09       	cp.w	r9,0
800087c4:	f5 b8 00 00 	subfeq	r8,0
800087c8:	1b 07       	ld.w	r7,sp++
800087ca:	1b 0e       	ld.w	lr,sp++
800087cc:	5e 0f       	reteq	1
800087ce:	5e fc       	retal	r12

800087d0 <__avr32_f64_cmp_lt>:
800087d0:	1a de       	st.w	--sp,lr
800087d2:	1a d7       	st.w	--sp,r7
800087d4:	a1 7b       	lsl	r11,0x1
800087d6:	5f 3c       	srlo	r12
800087d8:	a1 79       	lsl	r9,0x1
800087da:	5f 37       	srlo	r7
800087dc:	5c fc       	rol	r12
800087de:	fc 1e ff e0 	movh	lr,0xffe0
800087e2:	58 0a       	cp.w	r10,0
800087e4:	fc 0b 13 00 	cpc	r11,lr
800087e8:	e0 8b 00 1d 	brhi	80008822 <__avr32_f64_cmp_lt+0x52>
800087ec:	58 08       	cp.w	r8,0
800087ee:	fc 09 13 00 	cpc	r9,lr
800087f2:	e0 8b 00 18 	brhi	80008822 <__avr32_f64_cmp_lt+0x52>
800087f6:	58 0b       	cp.w	r11,0
800087f8:	f5 ba 00 00 	subfeq	r10,0
800087fc:	c1 50       	breq	80008826 <__avr32_f64_cmp_lt+0x56>
800087fe:	1b 07       	ld.w	r7,sp++
80008800:	1b 0e       	ld.w	lr,sp++
80008802:	58 3c       	cp.w	r12,3
80008804:	c0 a0       	breq	80008818 <__avr32_f64_cmp_lt+0x48>
80008806:	58 1c       	cp.w	r12,1
80008808:	c0 33       	brcs	8000880e <__avr32_f64_cmp_lt+0x3e>
8000880a:	5e 0d       	reteq	0
8000880c:	5e 1f       	retne	1
8000880e:	10 3a       	cp.w	r10,r8
80008810:	f2 0b 13 00 	cpc	r11,r9
80008814:	5e 2d       	reths	0
80008816:	5e 3f       	retlo	1
80008818:	14 38       	cp.w	r8,r10
8000881a:	f6 09 13 00 	cpc	r9,r11
8000881e:	5e 2d       	reths	0
80008820:	5e 3f       	retlo	1
80008822:	1b 07       	ld.w	r7,sp++
80008824:	d8 0a       	popm	pc,r12=0
80008826:	58 17       	cp.w	r7,1
80008828:	5f 1c       	srne	r12
8000882a:	58 09       	cp.w	r9,0
8000882c:	f5 b8 00 00 	subfeq	r8,0
80008830:	1b 07       	ld.w	r7,sp++
80008832:	1b 0e       	ld.w	lr,sp++
80008834:	5e 0d       	reteq	0
80008836:	5e fc       	retal	r12

80008838 <__avr32_f64_div>:
80008838:	eb cd 40 ff 	pushm	r0-r7,lr
8000883c:	f7 e9 20 0e 	eor	lr,r11,r9
80008840:	f6 07 16 14 	lsr	r7,r11,0x14
80008844:	a9 7b       	lsl	r11,0x9
80008846:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000884a:	a9 7a       	lsl	r10,0x9
8000884c:	bd bb       	sbr	r11,0x1d
8000884e:	e4 1b 3f ff 	andh	r11,0x3fff
80008852:	ab d7       	cbr	r7,0xb
80008854:	e0 80 00 cc 	breq	800089ec <__avr32_f64_div_round_subnormal+0x54>
80008858:	e0 47 07 ff 	cp.w	r7,2047
8000885c:	e0 84 00 b5 	brge	800089c6 <__avr32_f64_div_round_subnormal+0x2e>
80008860:	f2 06 16 14 	lsr	r6,r9,0x14
80008864:	a9 79       	lsl	r9,0x9
80008866:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000886a:	a9 78       	lsl	r8,0x9
8000886c:	bd b9       	sbr	r9,0x1d
8000886e:	e4 19 3f ff 	andh	r9,0x3fff
80008872:	ab d6       	cbr	r6,0xb
80008874:	e0 80 00 e2 	breq	80008a38 <__avr32_f64_div_round_subnormal+0xa0>
80008878:	e0 46 07 ff 	cp.w	r6,2047
8000887c:	e0 84 00 b2 	brge	800089e0 <__avr32_f64_div_round_subnormal+0x48>
80008880:	0c 17       	sub	r7,r6
80008882:	fe 37 fc 01 	sub	r7,-1023
80008886:	fc 1c 80 00 	movh	r12,0x8000
8000888a:	f8 03 16 01 	lsr	r3,r12,0x1
8000888e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008892:	5c d4       	com	r4
80008894:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008898:	e6 09 06 44 	mulu.d	r4,r3,r9
8000889c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088a0:	e6 05 06 44 	mulu.d	r4,r3,r5
800088a4:	ea 03 15 02 	lsl	r3,r5,0x2
800088a8:	e6 09 06 44 	mulu.d	r4,r3,r9
800088ac:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088b0:	e6 05 06 44 	mulu.d	r4,r3,r5
800088b4:	ea 03 15 02 	lsl	r3,r5,0x2
800088b8:	e6 09 06 44 	mulu.d	r4,r3,r9
800088bc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800088c0:	e6 05 06 44 	mulu.d	r4,r3,r5
800088c4:	ea 03 15 02 	lsl	r3,r5,0x2
800088c8:	e6 08 06 40 	mulu.d	r0,r3,r8
800088cc:	e4 09 07 40 	macu.d	r0,r2,r9
800088d0:	e6 09 06 44 	mulu.d	r4,r3,r9
800088d4:	02 04       	add	r4,r1
800088d6:	5c 05       	acr	r5
800088d8:	a3 65       	lsl	r5,0x2
800088da:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800088de:	a3 64       	lsl	r4,0x2
800088e0:	5c 34       	neg	r4
800088e2:	f8 05 01 45 	sbc	r5,r12,r5
800088e6:	e6 04 06 40 	mulu.d	r0,r3,r4
800088ea:	e4 05 07 40 	macu.d	r0,r2,r5
800088ee:	e6 05 06 44 	mulu.d	r4,r3,r5
800088f2:	02 04       	add	r4,r1
800088f4:	5c 05       	acr	r5
800088f6:	ea 03 15 02 	lsl	r3,r5,0x2
800088fa:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800088fe:	e8 02 15 02 	lsl	r2,r4,0x2
80008902:	e6 08 06 40 	mulu.d	r0,r3,r8
80008906:	e4 09 07 40 	macu.d	r0,r2,r9
8000890a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000890e:	02 04       	add	r4,r1
80008910:	5c 05       	acr	r5
80008912:	a3 65       	lsl	r5,0x2
80008914:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008918:	a3 64       	lsl	r4,0x2
8000891a:	5c 34       	neg	r4
8000891c:	f8 05 01 45 	sbc	r5,r12,r5
80008920:	e6 04 06 40 	mulu.d	r0,r3,r4
80008924:	e4 05 07 40 	macu.d	r0,r2,r5
80008928:	e6 05 06 44 	mulu.d	r4,r3,r5
8000892c:	02 04       	add	r4,r1
8000892e:	5c 05       	acr	r5
80008930:	ea 03 15 02 	lsl	r3,r5,0x2
80008934:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008938:	e8 02 15 02 	lsl	r2,r4,0x2
8000893c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008940:	e4 0b 07 40 	macu.d	r0,r2,r11
80008944:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008948:	02 02       	add	r2,r1
8000894a:	5c 03       	acr	r3
8000894c:	ed b3 00 1c 	bld	r3,0x1c
80008950:	c0 90       	breq	80008962 <__avr32_f64_div+0x12a>
80008952:	a1 72       	lsl	r2,0x1
80008954:	5c f3       	rol	r3
80008956:	20 17       	sub	r7,1
80008958:	a3 9a       	lsr	r10,0x3
8000895a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000895e:	a3 9b       	lsr	r11,0x3
80008960:	c0 58       	rjmp	8000896a <__avr32_f64_div+0x132>
80008962:	a5 8a       	lsr	r10,0x4
80008964:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008968:	a5 8b       	lsr	r11,0x4
8000896a:	58 07       	cp.w	r7,0
8000896c:	e0 8a 00 8b 	brle	80008a82 <__avr32_f64_div_res_subnormal>
80008970:	e0 12 ff 00 	andl	r2,0xff00
80008974:	e8 12 00 80 	orl	r2,0x80
80008978:	e6 08 06 40 	mulu.d	r0,r3,r8
8000897c:	e4 09 07 40 	macu.d	r0,r2,r9
80008980:	e4 08 06 44 	mulu.d	r4,r2,r8
80008984:	e6 09 06 48 	mulu.d	r8,r3,r9
80008988:	00 05       	add	r5,r0
8000898a:	f0 01 00 48 	adc	r8,r8,r1
8000898e:	5c 09       	acr	r9
80008990:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008994:	58 04       	cp.w	r4,0
80008996:	5c 25       	cpc	r5

80008998 <__avr32_f64_div_round_subnormal>:
80008998:	f4 08 13 00 	cpc	r8,r10
8000899c:	f6 09 13 00 	cpc	r9,r11
800089a0:	5f 36       	srlo	r6
800089a2:	f8 06 17 00 	moveq	r6,r12
800089a6:	e4 0a 16 08 	lsr	r10,r2,0x8
800089aa:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800089ae:	e6 0b 16 08 	lsr	r11,r3,0x8
800089b2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800089b6:	ed be 00 1f 	bld	lr,0x1f
800089ba:	ef bb 00 1f 	bst	r11,0x1f
800089be:	0c 0a       	add	r10,r6
800089c0:	5c 0b       	acr	r11
800089c2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800089c6:	e4 1b 00 0f 	andh	r11,0xf
800089ca:	14 4b       	or	r11,r10
800089cc:	e0 81 00 a7 	brne	80008b1a <__avr32_f64_div_res_subnormal+0x98>
800089d0:	f2 06 16 14 	lsr	r6,r9,0x14
800089d4:	ab d6       	cbr	r6,0xb
800089d6:	e0 46 07 ff 	cp.w	r6,2047
800089da:	e0 81 00 a4 	brne	80008b22 <__avr32_f64_div_res_subnormal+0xa0>
800089de:	c9 e8       	rjmp	80008b1a <__avr32_f64_div_res_subnormal+0x98>
800089e0:	e4 19 00 0f 	andh	r9,0xf
800089e4:	10 49       	or	r9,r8
800089e6:	e0 81 00 9a 	brne	80008b1a <__avr32_f64_div_res_subnormal+0x98>
800089ea:	c9 28       	rjmp	80008b0e <__avr32_f64_div_res_subnormal+0x8c>
800089ec:	a3 7b       	lsl	r11,0x3
800089ee:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800089f2:	a3 7a       	lsl	r10,0x3
800089f4:	f5 eb 10 04 	or	r4,r10,r11
800089f8:	e0 80 00 a0 	breq	80008b38 <__avr32_f64_div_op1_zero>
800089fc:	f6 04 12 00 	clz	r4,r11
80008a00:	c1 70       	breq	80008a2e <__avr32_f64_div_round_subnormal+0x96>
80008a02:	c0 c3       	brcs	80008a1a <__avr32_f64_div_round_subnormal+0x82>
80008a04:	e8 05 11 20 	rsub	r5,r4,32
80008a08:	f6 04 09 4b 	lsl	r11,r11,r4
80008a0c:	f4 05 0a 45 	lsr	r5,r10,r5
80008a10:	0a 4b       	or	r11,r5
80008a12:	f4 04 09 4a 	lsl	r10,r10,r4
80008a16:	08 17       	sub	r7,r4
80008a18:	c0 b8       	rjmp	80008a2e <__avr32_f64_div_round_subnormal+0x96>
80008a1a:	f4 04 12 00 	clz	r4,r10
80008a1e:	f9 b4 03 00 	movlo	r4,0
80008a22:	f7 b4 02 e0 	subhs	r4,-32
80008a26:	f4 04 09 4b 	lsl	r11,r10,r4
80008a2a:	30 0a       	mov	r10,0
80008a2c:	08 17       	sub	r7,r4
80008a2e:	a3 8a       	lsr	r10,0x2
80008a30:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008a34:	a3 8b       	lsr	r11,0x2
80008a36:	c1 1b       	rjmp	80008858 <__avr32_f64_div+0x20>
80008a38:	a3 79       	lsl	r9,0x3
80008a3a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008a3e:	a3 78       	lsl	r8,0x3
80008a40:	f3 e8 10 04 	or	r4,r9,r8
80008a44:	c6 f0       	breq	80008b22 <__avr32_f64_div_res_subnormal+0xa0>
80008a46:	f2 04 12 00 	clz	r4,r9
80008a4a:	c1 70       	breq	80008a78 <__avr32_f64_div_round_subnormal+0xe0>
80008a4c:	c0 c3       	brcs	80008a64 <__avr32_f64_div_round_subnormal+0xcc>
80008a4e:	e8 05 11 20 	rsub	r5,r4,32
80008a52:	f2 04 09 49 	lsl	r9,r9,r4
80008a56:	f0 05 0a 45 	lsr	r5,r8,r5
80008a5a:	0a 49       	or	r9,r5
80008a5c:	f0 04 09 48 	lsl	r8,r8,r4
80008a60:	08 16       	sub	r6,r4
80008a62:	c0 b8       	rjmp	80008a78 <__avr32_f64_div_round_subnormal+0xe0>
80008a64:	f0 04 12 00 	clz	r4,r8
80008a68:	f9 b4 03 00 	movlo	r4,0
80008a6c:	f7 b4 02 e0 	subhs	r4,-32
80008a70:	f0 04 09 49 	lsl	r9,r8,r4
80008a74:	30 08       	mov	r8,0
80008a76:	08 16       	sub	r6,r4
80008a78:	a3 88       	lsr	r8,0x2
80008a7a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008a7e:	a3 89       	lsr	r9,0x2
80008a80:	cf ca       	rjmp	80008878 <__avr32_f64_div+0x40>

80008a82 <__avr32_f64_div_res_subnormal>:
80008a82:	5c 37       	neg	r7
80008a84:	2f f7       	sub	r7,-1
80008a86:	f1 b7 04 c0 	satu	r7,0x6
80008a8a:	e0 47 00 20 	cp.w	r7,32
80008a8e:	c1 54       	brge	80008ab8 <__avr32_f64_div_res_subnormal+0x36>
80008a90:	ee 06 11 20 	rsub	r6,r7,32
80008a94:	e4 07 0a 42 	lsr	r2,r2,r7
80008a98:	e6 06 09 4c 	lsl	r12,r3,r6
80008a9c:	18 42       	or	r2,r12
80008a9e:	e6 07 0a 43 	lsr	r3,r3,r7
80008aa2:	f4 06 09 41 	lsl	r1,r10,r6
80008aa6:	f4 07 0a 4a 	lsr	r10,r10,r7
80008aaa:	f6 06 09 4c 	lsl	r12,r11,r6
80008aae:	18 4a       	or	r10,r12
80008ab0:	f6 07 0a 4b 	lsr	r11,r11,r7
80008ab4:	30 00       	mov	r0,0
80008ab6:	c1 58       	rjmp	80008ae0 <__avr32_f64_div_res_subnormal+0x5e>
80008ab8:	ee 06 11 20 	rsub	r6,r7,32
80008abc:	f9 b0 00 00 	moveq	r0,0
80008ac0:	f9 bc 00 00 	moveq	r12,0
80008ac4:	c0 50       	breq	80008ace <__avr32_f64_div_res_subnormal+0x4c>
80008ac6:	f4 06 09 40 	lsl	r0,r10,r6
80008aca:	f6 06 09 4c 	lsl	r12,r11,r6
80008ace:	e6 07 0a 42 	lsr	r2,r3,r7
80008ad2:	30 03       	mov	r3,0
80008ad4:	f4 07 0a 41 	lsr	r1,r10,r7
80008ad8:	18 41       	or	r1,r12
80008ada:	f6 07 0a 4a 	lsr	r10,r11,r7
80008ade:	30 0b       	mov	r11,0
80008ae0:	e0 12 ff 00 	andl	r2,0xff00
80008ae4:	e8 12 00 80 	orl	r2,0x80
80008ae8:	e6 08 06 46 	mulu.d	r6,r3,r8
80008aec:	e4 09 07 46 	macu.d	r6,r2,r9
80008af0:	e4 08 06 44 	mulu.d	r4,r2,r8
80008af4:	e6 09 06 48 	mulu.d	r8,r3,r9
80008af8:	0c 05       	add	r5,r6
80008afa:	f0 07 00 48 	adc	r8,r8,r7
80008afe:	5c 09       	acr	r9
80008b00:	30 07       	mov	r7,0
80008b02:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008b06:	00 34       	cp.w	r4,r0
80008b08:	e2 05 13 00 	cpc	r5,r1
80008b0c:	c4 6b       	rjmp	80008998 <__avr32_f64_div_round_subnormal>
80008b0e:	1c 9b       	mov	r11,lr
80008b10:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b14:	30 0a       	mov	r10,0
80008b16:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b1a:	3f fb       	mov	r11,-1
80008b1c:	30 0a       	mov	r10,0
80008b1e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008b22:	f5 eb 10 04 	or	r4,r10,r11
80008b26:	c0 90       	breq	80008b38 <__avr32_f64_div_op1_zero>
80008b28:	1c 9b       	mov	r11,lr
80008b2a:	e6 1b 80 00 	andh	r11,0x8000,COH
80008b2e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008b32:	30 0a       	mov	r10,0
80008b34:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008b38 <__avr32_f64_div_op1_zero>:
80008b38:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008b3c:	ce f0       	breq	80008b1a <__avr32_f64_div_res_subnormal+0x98>
80008b3e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008b42:	e0 44 07 ff 	cp.w	r4,2047
80008b46:	ce 41       	brne	80008b0e <__avr32_f64_div_res_subnormal+0x8c>
80008b48:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008b4c:	ce 10       	breq	80008b0e <__avr32_f64_div_res_subnormal+0x8c>
80008b4e:	ce 6b       	rjmp	80008b1a <__avr32_f64_div_res_subnormal+0x98>

80008b50 <__avr32_udiv64>:
80008b50:	d4 31       	pushm	r0-r7,lr
80008b52:	1a 97       	mov	r7,sp
80008b54:	20 3d       	sub	sp,12
80008b56:	10 9c       	mov	r12,r8
80008b58:	12 9e       	mov	lr,r9
80008b5a:	14 93       	mov	r3,r10
80008b5c:	58 09       	cp.w	r9,0
80008b5e:	e0 81 00 bd 	brne	80008cd8 <__avr32_udiv64+0x188>
80008b62:	16 38       	cp.w	r8,r11
80008b64:	e0 88 00 40 	brls	80008be4 <__avr32_udiv64+0x94>
80008b68:	f0 08 12 00 	clz	r8,r8
80008b6c:	c0 d0       	breq	80008b86 <__avr32_udiv64+0x36>
80008b6e:	f6 08 09 4b 	lsl	r11,r11,r8
80008b72:	f0 09 11 20 	rsub	r9,r8,32
80008b76:	f8 08 09 4c 	lsl	r12,r12,r8
80008b7a:	f4 09 0a 49 	lsr	r9,r10,r9
80008b7e:	f4 08 09 43 	lsl	r3,r10,r8
80008b82:	f3 eb 10 0b 	or	r11,r9,r11
80008b86:	f8 0e 16 10 	lsr	lr,r12,0x10
80008b8a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008b8e:	f6 0e 0d 00 	divu	r0,r11,lr
80008b92:	e6 0b 16 10 	lsr	r11,r3,0x10
80008b96:	00 99       	mov	r9,r0
80008b98:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b9c:	e0 0a 02 48 	mul	r8,r0,r10
80008ba0:	10 3b       	cp.w	r11,r8
80008ba2:	c0 a2       	brcc	80008bb6 <__avr32_udiv64+0x66>
80008ba4:	20 19       	sub	r9,1
80008ba6:	18 0b       	add	r11,r12
80008ba8:	18 3b       	cp.w	r11,r12
80008baa:	c0 63       	brcs	80008bb6 <__avr32_udiv64+0x66>
80008bac:	10 3b       	cp.w	r11,r8
80008bae:	f7 b9 03 01 	sublo	r9,1
80008bb2:	f7 dc e3 0b 	addcs	r11,r11,r12
80008bb6:	f6 08 01 01 	sub	r1,r11,r8
80008bba:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008bbe:	e2 0e 0d 00 	divu	r0,r1,lr
80008bc2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008bc6:	00 98       	mov	r8,r0
80008bc8:	e0 0a 02 4a 	mul	r10,r0,r10
80008bcc:	14 33       	cp.w	r3,r10
80008bce:	c0 82       	brcc	80008bde <__avr32_udiv64+0x8e>
80008bd0:	20 18       	sub	r8,1
80008bd2:	18 03       	add	r3,r12
80008bd4:	18 33       	cp.w	r3,r12
80008bd6:	c0 43       	brcs	80008bde <__avr32_udiv64+0x8e>
80008bd8:	14 33       	cp.w	r3,r10
80008bda:	f7 b8 03 01 	sublo	r8,1
80008bde:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008be2:	cd f8       	rjmp	80008da0 <__avr32_udiv64+0x250>
80008be4:	58 08       	cp.w	r8,0
80008be6:	c0 51       	brne	80008bf0 <__avr32_udiv64+0xa0>
80008be8:	30 19       	mov	r9,1
80008bea:	f2 08 0d 08 	divu	r8,r9,r8
80008bee:	10 9c       	mov	r12,r8
80008bf0:	f8 06 12 00 	clz	r6,r12
80008bf4:	c0 41       	brne	80008bfc <__avr32_udiv64+0xac>
80008bf6:	18 1b       	sub	r11,r12
80008bf8:	30 19       	mov	r9,1
80008bfa:	c4 08       	rjmp	80008c7a <__avr32_udiv64+0x12a>
80008bfc:	ec 01 11 20 	rsub	r1,r6,32
80008c00:	f4 01 0a 49 	lsr	r9,r10,r1
80008c04:	f8 06 09 4c 	lsl	r12,r12,r6
80008c08:	f6 06 09 48 	lsl	r8,r11,r6
80008c0c:	f6 01 0a 41 	lsr	r1,r11,r1
80008c10:	f3 e8 10 08 	or	r8,r9,r8
80008c14:	f8 03 16 10 	lsr	r3,r12,0x10
80008c18:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008c1c:	e2 03 0d 00 	divu	r0,r1,r3
80008c20:	f0 0b 16 10 	lsr	r11,r8,0x10
80008c24:	00 9e       	mov	lr,r0
80008c26:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c2a:	e0 05 02 49 	mul	r9,r0,r5
80008c2e:	12 3b       	cp.w	r11,r9
80008c30:	c0 a2       	brcc	80008c44 <__avr32_udiv64+0xf4>
80008c32:	20 1e       	sub	lr,1
80008c34:	18 0b       	add	r11,r12
80008c36:	18 3b       	cp.w	r11,r12
80008c38:	c0 63       	brcs	80008c44 <__avr32_udiv64+0xf4>
80008c3a:	12 3b       	cp.w	r11,r9
80008c3c:	f7 be 03 01 	sublo	lr,1
80008c40:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c44:	12 1b       	sub	r11,r9
80008c46:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008c4a:	f6 03 0d 02 	divu	r2,r11,r3
80008c4e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008c52:	04 99       	mov	r9,r2
80008c54:	e4 05 02 4b 	mul	r11,r2,r5
80008c58:	16 38       	cp.w	r8,r11
80008c5a:	c0 a2       	brcc	80008c6e <__avr32_udiv64+0x11e>
80008c5c:	20 19       	sub	r9,1
80008c5e:	18 08       	add	r8,r12
80008c60:	18 38       	cp.w	r8,r12
80008c62:	c0 63       	brcs	80008c6e <__avr32_udiv64+0x11e>
80008c64:	16 38       	cp.w	r8,r11
80008c66:	f7 b9 03 01 	sublo	r9,1
80008c6a:	f1 dc e3 08 	addcs	r8,r8,r12
80008c6e:	f4 06 09 43 	lsl	r3,r10,r6
80008c72:	f0 0b 01 0b 	sub	r11,r8,r11
80008c76:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008c7a:	f8 06 16 10 	lsr	r6,r12,0x10
80008c7e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008c82:	f6 06 0d 00 	divu	r0,r11,r6
80008c86:	e6 0b 16 10 	lsr	r11,r3,0x10
80008c8a:	00 9a       	mov	r10,r0
80008c8c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008c90:	e0 0e 02 48 	mul	r8,r0,lr
80008c94:	10 3b       	cp.w	r11,r8
80008c96:	c0 a2       	brcc	80008caa <__avr32_udiv64+0x15a>
80008c98:	20 1a       	sub	r10,1
80008c9a:	18 0b       	add	r11,r12
80008c9c:	18 3b       	cp.w	r11,r12
80008c9e:	c0 63       	brcs	80008caa <__avr32_udiv64+0x15a>
80008ca0:	10 3b       	cp.w	r11,r8
80008ca2:	f7 ba 03 01 	sublo	r10,1
80008ca6:	f7 dc e3 0b 	addcs	r11,r11,r12
80008caa:	f6 08 01 01 	sub	r1,r11,r8
80008cae:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008cb2:	e2 06 0d 00 	divu	r0,r1,r6
80008cb6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008cba:	00 98       	mov	r8,r0
80008cbc:	e0 0e 02 4b 	mul	r11,r0,lr
80008cc0:	16 33       	cp.w	r3,r11
80008cc2:	c0 82       	brcc	80008cd2 <__avr32_udiv64+0x182>
80008cc4:	20 18       	sub	r8,1
80008cc6:	18 03       	add	r3,r12
80008cc8:	18 33       	cp.w	r3,r12
80008cca:	c0 43       	brcs	80008cd2 <__avr32_udiv64+0x182>
80008ccc:	16 33       	cp.w	r3,r11
80008cce:	f7 b8 03 01 	sublo	r8,1
80008cd2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008cd6:	c6 98       	rjmp	80008da8 <__avr32_udiv64+0x258>
80008cd8:	16 39       	cp.w	r9,r11
80008cda:	e0 8b 00 65 	brhi	80008da4 <__avr32_udiv64+0x254>
80008cde:	f2 09 12 00 	clz	r9,r9
80008ce2:	c0 b1       	brne	80008cf8 <__avr32_udiv64+0x1a8>
80008ce4:	10 3a       	cp.w	r10,r8
80008ce6:	5f 2a       	srhs	r10
80008ce8:	1c 3b       	cp.w	r11,lr
80008cea:	5f b8       	srhi	r8
80008cec:	10 4a       	or	r10,r8
80008cee:	f2 0a 18 00 	cp.b	r10,r9
80008cf2:	c5 90       	breq	80008da4 <__avr32_udiv64+0x254>
80008cf4:	30 18       	mov	r8,1
80008cf6:	c5 98       	rjmp	80008da8 <__avr32_udiv64+0x258>
80008cf8:	f0 09 09 46 	lsl	r6,r8,r9
80008cfc:	f2 03 11 20 	rsub	r3,r9,32
80008d00:	fc 09 09 4e 	lsl	lr,lr,r9
80008d04:	f0 03 0a 48 	lsr	r8,r8,r3
80008d08:	f6 09 09 4c 	lsl	r12,r11,r9
80008d0c:	f4 03 0a 42 	lsr	r2,r10,r3
80008d10:	ef 46 ff f4 	st.w	r7[-12],r6
80008d14:	f6 03 0a 43 	lsr	r3,r11,r3
80008d18:	18 42       	or	r2,r12
80008d1a:	f1 ee 10 0c 	or	r12,r8,lr
80008d1e:	f8 01 16 10 	lsr	r1,r12,0x10
80008d22:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008d26:	e6 01 0d 04 	divu	r4,r3,r1
80008d2a:	e4 03 16 10 	lsr	r3,r2,0x10
80008d2e:	08 9e       	mov	lr,r4
80008d30:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008d34:	e8 06 02 48 	mul	r8,r4,r6
80008d38:	10 33       	cp.w	r3,r8
80008d3a:	c0 a2       	brcc	80008d4e <__avr32_udiv64+0x1fe>
80008d3c:	20 1e       	sub	lr,1
80008d3e:	18 03       	add	r3,r12
80008d40:	18 33       	cp.w	r3,r12
80008d42:	c0 63       	brcs	80008d4e <__avr32_udiv64+0x1fe>
80008d44:	10 33       	cp.w	r3,r8
80008d46:	f7 be 03 01 	sublo	lr,1
80008d4a:	e7 dc e3 03 	addcs	r3,r3,r12
80008d4e:	10 13       	sub	r3,r8
80008d50:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008d54:	e6 01 0d 00 	divu	r0,r3,r1
80008d58:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008d5c:	00 98       	mov	r8,r0
80008d5e:	e0 06 02 46 	mul	r6,r0,r6
80008d62:	0c 3b       	cp.w	r11,r6
80008d64:	c0 a2       	brcc	80008d78 <__avr32_udiv64+0x228>
80008d66:	20 18       	sub	r8,1
80008d68:	18 0b       	add	r11,r12
80008d6a:	18 3b       	cp.w	r11,r12
80008d6c:	c0 63       	brcs	80008d78 <__avr32_udiv64+0x228>
80008d6e:	0c 3b       	cp.w	r11,r6
80008d70:	f7 dc e3 0b 	addcs	r11,r11,r12
80008d74:	f7 b8 03 01 	sublo	r8,1
80008d78:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008d7c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008d80:	0c 1b       	sub	r11,r6
80008d82:	f0 04 06 42 	mulu.d	r2,r8,r4
80008d86:	06 95       	mov	r5,r3
80008d88:	16 35       	cp.w	r5,r11
80008d8a:	e0 8b 00 0a 	brhi	80008d9e <__avr32_udiv64+0x24e>
80008d8e:	5f 0b       	sreq	r11
80008d90:	f4 09 09 49 	lsl	r9,r10,r9
80008d94:	12 32       	cp.w	r2,r9
80008d96:	5f b9       	srhi	r9
80008d98:	f7 e9 00 09 	and	r9,r11,r9
80008d9c:	c0 60       	breq	80008da8 <__avr32_udiv64+0x258>
80008d9e:	20 18       	sub	r8,1
80008da0:	30 09       	mov	r9,0
80008da2:	c0 38       	rjmp	80008da8 <__avr32_udiv64+0x258>
80008da4:	30 09       	mov	r9,0
80008da6:	12 98       	mov	r8,r9
80008da8:	10 9a       	mov	r10,r8
80008daa:	12 93       	mov	r3,r9
80008dac:	10 92       	mov	r2,r8
80008dae:	12 9b       	mov	r11,r9
80008db0:	2f dd       	sub	sp,-12
80008db2:	d8 32       	popm	r0-r7,pc

80008db4 <__avr32_umod64>:
80008db4:	d4 31       	pushm	r0-r7,lr
80008db6:	1a 97       	mov	r7,sp
80008db8:	20 3d       	sub	sp,12
80008dba:	10 9c       	mov	r12,r8
80008dbc:	12 95       	mov	r5,r9
80008dbe:	14 9e       	mov	lr,r10
80008dc0:	16 91       	mov	r1,r11
80008dc2:	16 96       	mov	r6,r11
80008dc4:	58 09       	cp.w	r9,0
80008dc6:	e0 81 00 81 	brne	80008ec8 <__avr32_umod64+0x114>
80008dca:	16 38       	cp.w	r8,r11
80008dcc:	e0 88 00 12 	brls	80008df0 <__avr32_umod64+0x3c>
80008dd0:	f0 08 12 00 	clz	r8,r8
80008dd4:	c4 e0       	breq	80008e70 <__avr32_umod64+0xbc>
80008dd6:	f6 08 09 46 	lsl	r6,r11,r8
80008dda:	f8 08 09 4c 	lsl	r12,r12,r8
80008dde:	f0 0b 11 20 	rsub	r11,r8,32
80008de2:	f4 08 09 4e 	lsl	lr,r10,r8
80008de6:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008dea:	f7 e6 10 06 	or	r6,r11,r6
80008dee:	c4 18       	rjmp	80008e70 <__avr32_umod64+0xbc>
80008df0:	58 08       	cp.w	r8,0
80008df2:	c0 51       	brne	80008dfc <__avr32_umod64+0x48>
80008df4:	30 19       	mov	r9,1
80008df6:	f2 08 0d 08 	divu	r8,r9,r8
80008dfa:	10 9c       	mov	r12,r8
80008dfc:	f8 08 12 00 	clz	r8,r12
80008e00:	c0 31       	brne	80008e06 <__avr32_umod64+0x52>
80008e02:	18 16       	sub	r6,r12
80008e04:	c3 68       	rjmp	80008e70 <__avr32_umod64+0xbc>
80008e06:	f0 03 11 20 	rsub	r3,r8,32
80008e0a:	f4 03 0a 4b 	lsr	r11,r10,r3
80008e0e:	f8 08 09 4c 	lsl	r12,r12,r8
80008e12:	ec 08 09 49 	lsl	r9,r6,r8
80008e16:	ec 03 0a 43 	lsr	r3,r6,r3
80008e1a:	f7 e9 10 09 	or	r9,r11,r9
80008e1e:	f8 05 16 10 	lsr	r5,r12,0x10
80008e22:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008e26:	e6 05 0d 02 	divu	r2,r3,r5
80008e2a:	f2 0e 16 10 	lsr	lr,r9,0x10
80008e2e:	ec 02 02 4b 	mul	r11,r6,r2
80008e32:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008e36:	16 3e       	cp.w	lr,r11
80008e38:	c0 72       	brcc	80008e46 <__avr32_umod64+0x92>
80008e3a:	18 0e       	add	lr,r12
80008e3c:	18 3e       	cp.w	lr,r12
80008e3e:	c0 43       	brcs	80008e46 <__avr32_umod64+0x92>
80008e40:	16 3e       	cp.w	lr,r11
80008e42:	fd dc e3 0e 	addcs	lr,lr,r12
80008e46:	fc 0b 01 03 	sub	r3,lr,r11
80008e4a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008e4e:	e6 05 0d 02 	divu	r2,r3,r5
80008e52:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e56:	a5 36       	mul	r6,r2
80008e58:	0c 39       	cp.w	r9,r6
80008e5a:	c0 72       	brcc	80008e68 <__avr32_umod64+0xb4>
80008e5c:	18 09       	add	r9,r12
80008e5e:	18 39       	cp.w	r9,r12
80008e60:	c0 43       	brcs	80008e68 <__avr32_umod64+0xb4>
80008e62:	0c 39       	cp.w	r9,r6
80008e64:	f3 dc e3 09 	addcs	r9,r9,r12
80008e68:	f2 06 01 06 	sub	r6,r9,r6
80008e6c:	f4 08 09 4e 	lsl	lr,r10,r8
80008e70:	f8 0a 16 10 	lsr	r10,r12,0x10
80008e74:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008e78:	ec 0a 0d 02 	divu	r2,r6,r10
80008e7c:	fc 09 16 10 	lsr	r9,lr,0x10
80008e80:	ea 02 02 4b 	mul	r11,r5,r2
80008e84:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008e88:	16 39       	cp.w	r9,r11
80008e8a:	c0 72       	brcc	80008e98 <__avr32_umod64+0xe4>
80008e8c:	18 09       	add	r9,r12
80008e8e:	18 39       	cp.w	r9,r12
80008e90:	c0 43       	brcs	80008e98 <__avr32_umod64+0xe4>
80008e92:	16 39       	cp.w	r9,r11
80008e94:	f3 dc e3 09 	addcs	r9,r9,r12
80008e98:	f2 0b 01 0b 	sub	r11,r9,r11
80008e9c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008ea0:	f6 0a 0d 0a 	divu	r10,r11,r10
80008ea4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008ea8:	ea 0a 02 4a 	mul	r10,r5,r10
80008eac:	14 3e       	cp.w	lr,r10
80008eae:	c0 72       	brcc	80008ebc <__avr32_umod64+0x108>
80008eb0:	18 0e       	add	lr,r12
80008eb2:	18 3e       	cp.w	lr,r12
80008eb4:	c0 43       	brcs	80008ebc <__avr32_umod64+0x108>
80008eb6:	14 3e       	cp.w	lr,r10
80008eb8:	fd dc e3 0e 	addcs	lr,lr,r12
80008ebc:	fc 0a 01 0a 	sub	r10,lr,r10
80008ec0:	30 0b       	mov	r11,0
80008ec2:	f4 08 0a 4a 	lsr	r10,r10,r8
80008ec6:	c7 b8       	rjmp	80008fbc <__avr32_umod64+0x208>
80008ec8:	16 39       	cp.w	r9,r11
80008eca:	e0 8b 00 79 	brhi	80008fbc <__avr32_umod64+0x208>
80008ece:	f2 09 12 00 	clz	r9,r9
80008ed2:	c1 21       	brne	80008ef6 <__avr32_umod64+0x142>
80008ed4:	10 3a       	cp.w	r10,r8
80008ed6:	5f 2b       	srhs	r11
80008ed8:	0a 31       	cp.w	r1,r5
80008eda:	5f ba       	srhi	r10
80008edc:	f7 ea 10 0a 	or	r10,r11,r10
80008ee0:	f2 0a 18 00 	cp.b	r10,r9
80008ee4:	c0 60       	breq	80008ef0 <__avr32_umod64+0x13c>
80008ee6:	fc 08 01 0c 	sub	r12,lr,r8
80008eea:	e2 05 01 46 	sbc	r6,r1,r5
80008eee:	18 9e       	mov	lr,r12
80008ef0:	0c 9b       	mov	r11,r6
80008ef2:	1c 9a       	mov	r10,lr
80008ef4:	c6 48       	rjmp	80008fbc <__avr32_umod64+0x208>
80008ef6:	ea 09 09 4c 	lsl	r12,r5,r9
80008efa:	f2 06 11 20 	rsub	r6,r9,32
80008efe:	f6 09 09 4b 	lsl	r11,r11,r9
80008f02:	f0 09 09 42 	lsl	r2,r8,r9
80008f06:	ef 46 ff f4 	st.w	r7[-12],r6
80008f0a:	f0 06 0a 48 	lsr	r8,r8,r6
80008f0e:	18 48       	or	r8,r12
80008f10:	e2 06 0a 4c 	lsr	r12,r1,r6
80008f14:	f4 09 09 43 	lsl	r3,r10,r9
80008f18:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008f1c:	f4 06 0a 4a 	lsr	r10,r10,r6
80008f20:	16 4a       	or	r10,r11
80008f22:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f26:	f8 0b 0d 04 	divu	r4,r12,r11
80008f2a:	f4 0c 16 10 	lsr	r12,r10,0x10
80008f2e:	08 91       	mov	r1,r4
80008f30:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008f34:	e8 0e 02 46 	mul	r6,r4,lr
80008f38:	0c 3c       	cp.w	r12,r6
80008f3a:	c0 a2       	brcc	80008f4e <__avr32_umod64+0x19a>
80008f3c:	20 11       	sub	r1,1
80008f3e:	10 0c       	add	r12,r8
80008f40:	10 3c       	cp.w	r12,r8
80008f42:	c0 63       	brcs	80008f4e <__avr32_umod64+0x19a>
80008f44:	0c 3c       	cp.w	r12,r6
80008f46:	f7 b1 03 01 	sublo	r1,1
80008f4a:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008f4e:	0c 1c       	sub	r12,r6
80008f50:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008f54:	f8 0b 0d 04 	divu	r4,r12,r11
80008f58:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008f5c:	08 96       	mov	r6,r4
80008f5e:	e8 0e 02 4e 	mul	lr,r4,lr
80008f62:	1c 3b       	cp.w	r11,lr
80008f64:	c0 a2       	brcc	80008f78 <__avr32_umod64+0x1c4>
80008f66:	20 16       	sub	r6,1
80008f68:	10 0b       	add	r11,r8
80008f6a:	10 3b       	cp.w	r11,r8
80008f6c:	c0 63       	brcs	80008f78 <__avr32_umod64+0x1c4>
80008f6e:	1c 3b       	cp.w	r11,lr
80008f70:	f7 b6 03 01 	sublo	r6,1
80008f74:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008f78:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008f7c:	1c 1b       	sub	r11,lr
80008f7e:	e2 02 06 40 	mulu.d	r0,r1,r2
80008f82:	00 9e       	mov	lr,r0
80008f84:	02 9c       	mov	r12,r1
80008f86:	16 3c       	cp.w	r12,r11
80008f88:	e0 8b 00 08 	brhi	80008f98 <__avr32_umod64+0x1e4>
80008f8c:	5f 06       	sreq	r6
80008f8e:	06 30       	cp.w	r0,r3
80008f90:	5f ba       	srhi	r10
80008f92:	ed ea 00 0a 	and	r10,r6,r10
80008f96:	c0 60       	breq	80008fa2 <__avr32_umod64+0x1ee>
80008f98:	fc 02 01 04 	sub	r4,lr,r2
80008f9c:	f8 08 01 4c 	sbc	r12,r12,r8
80008fa0:	08 9e       	mov	lr,r4
80008fa2:	e6 0e 01 0a 	sub	r10,r3,lr
80008fa6:	f6 0c 01 4c 	sbc	r12,r11,r12
80008faa:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008fae:	f8 09 0a 4b 	lsr	r11,r12,r9
80008fb2:	f4 09 0a 4a 	lsr	r10,r10,r9
80008fb6:	f8 01 09 4c 	lsl	r12,r12,r1
80008fba:	18 4a       	or	r10,r12
80008fbc:	2f dd       	sub	sp,-12
80008fbe:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 d1 13 	rcall	8000332c <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 d1 0c 	rcall	8000332c <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 d1 05 	rcall	8000332c <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 d0 fe 	rcall	8000332c <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
