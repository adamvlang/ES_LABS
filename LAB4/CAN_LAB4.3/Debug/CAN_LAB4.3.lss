
CAN_LAB4.3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000071e8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009200  80009200  00009600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000758  80009400  80009400  00009800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000510  00000008  80009b58  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  00000518  00000518  00000000  2**2
                  ALLOC
  8 .heap         0000e8f0  00000710  00000710  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000a518  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000e28  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000019de  00000000  00000000  0000b370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00020e89  00000000  00000000  0000cd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005580  00000000  00000000  0002dbd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e65b  00000000  00000000  00033157  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000216c  00000000  00000000  000417b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042aa  00000000  00000000  00043920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000a1a2  00000000  00000000  00047bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00a21501  00000000  00000000  00051d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000ff0  00000000  00000000  00a73270  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c7 2c 	sub	pc,pc,-14548

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e7 30 	sub	pc,pc,-6352

Disassembly of section .text:

80002008 <adc_start>:
80002008:	30 28       	mov	r8,2
8000200a:	99 08       	st.w	r12[0x0],r8
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
}
8000200c:	5e fc       	retal	r12

8000200e <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000200e:	30 18       	mov	r8,1
80002010:	f0 0b 09 48 	lsl	r8,r8,r11
80002014:	99 48       	st.w	r12[0x10],r8
}
80002016:	5e fc       	retal	r12

80002018 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002018:	78 78       	ld.w	r8,r12[0x1c]
8000201a:	30 19       	mov	r9,1
8000201c:	f2 0b 09 49 	lsl	r9,r9,r11
80002020:	f3 e8 00 08 	and	r8,r9,r8
}
80002024:	5f 1c       	srne	r12
80002026:	5e fc       	retal	r12

80002028 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002028:	eb cd 40 e0 	pushm	r5-r7,lr
8000202c:	18 97       	mov	r7,r12
8000202e:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002030:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002034:	0c 9b       	mov	r11,r6
80002036:	0e 9c       	mov	r12,r7
80002038:	f0 1f 00 05 	mcall	8000204c <adc_get_value+0x24>
8000203c:	cf c0       	breq	80002034 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000203e:	2d 07       	sub	r7,-48
80002040:	5c 75       	castu.h	r5
}
80002042:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 18       	sub	r8,1

80002050 <rtc_is_busy>:
#include "rtc.h"


int rtc_is_busy(volatile avr32_rtc_t *rtc)
{
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
80002050:	78 0c       	ld.w	r12,r12[0x0]
}
80002052:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002056:	5e fc       	retal	r12

80002058 <rtc_set_value>:
  return 1;
}


void rtc_set_value(volatile avr32_rtc_t *rtc, unsigned long val)
{
80002058:	eb cd 40 c0 	pushm	r6-r7,lr
8000205c:	18 97       	mov	r7,r12
8000205e:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
80002060:	0e 9c       	mov	r12,r7
80002062:	f0 1f 00 06 	mcall	80002078 <rtc_set_value+0x20>
80002066:	cf d1       	brne	80002060 <rtc_set_value+0x8>
  // Set the new val value
  rtc->val = val;
80002068:	8f 16       	st.w	r7[0x4],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
8000206a:	0e 9c       	mov	r12,r7
8000206c:	f0 1f 00 03 	mcall	80002078 <rtc_set_value+0x20>
80002070:	cf d1       	brne	8000206a <rtc_set_value+0x12>
}
80002072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	20 50       	sub	r0,5

8000207c <rtc_enable>:
  while (rtc_is_busy(rtc));
}


void rtc_enable(volatile avr32_rtc_t *rtc)
{
8000207c:	eb cd 40 80 	pushm	r7,lr
80002080:	18 97       	mov	r7,r12
  // Wait until the rtc CTRL register is up-to-date
  while (rtc_is_busy(rtc));
80002082:	0e 9c       	mov	r12,r7
80002084:	f0 1f 00 06 	mcall	8000209c <rtc_enable+0x20>
80002088:	cf d1       	brne	80002082 <rtc_enable+0x6>
  // Enable the RTC
  rtc->ctrl |= AVR32_RTC_CTRL_EN_MASK;
8000208a:	6e 08       	ld.w	r8,r7[0x0]
8000208c:	a1 a8       	sbr	r8,0x0
8000208e:	8f 08       	st.w	r7[0x0],r8
  // Wait until write is done
  while (rtc_is_busy(rtc));
80002090:	0e 9c       	mov	r12,r7
80002092:	f0 1f 00 03 	mcall	8000209c <rtc_enable+0x20>
80002096:	cf d1       	brne	80002090 <rtc_enable+0x14>
}
80002098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	20 50       	sub	r0,5

800020a0 <rtc_enable_interrupt>:
}


void rtc_enable_interrupt(volatile avr32_rtc_t *rtc)
{
  rtc->ier = AVR32_RTC_IER_TOPI_MASK;
800020a0:	30 18       	mov	r8,1
800020a2:	99 48       	st.w	r12[0x10],r8
}
800020a4:	5e fc       	retal	r12
800020a6:	d7 03       	nop

800020a8 <rtc_set_top_value>:
  if (global_interrupt_enabled) cpu_irq_enable();
}


void rtc_set_top_value(volatile avr32_rtc_t *rtc, unsigned long top)
{
800020a8:	eb cd 40 c0 	pushm	r6-r7,lr
800020ac:	18 97       	mov	r7,r12
800020ae:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
800020b0:	0e 9c       	mov	r12,r7
800020b2:	f0 1f 00 06 	mcall	800020c8 <rtc_set_top_value+0x20>
800020b6:	cf d1       	brne	800020b0 <rtc_set_top_value+0x8>
  // Set the new val value
  rtc->top = top;
800020b8:	8f 26       	st.w	r7[0x8],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
800020ba:	0e 9c       	mov	r12,r7
800020bc:	f0 1f 00 03 	mcall	800020c8 <rtc_set_top_value+0x20>
800020c0:	cf d1       	brne	800020ba <rtc_set_top_value+0x12>
}
800020c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 50       	sub	r0,5

800020cc <rtc_clear_interrupt>:
}


void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800020cc:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800020d0:	e6 18 00 01 	andh	r8,0x1,COH
800020d4:	c0 71       	brne	800020e2 <rtc_clear_interrupt+0x16>
800020d6:	d3 03       	ssrf	0x10
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020d8:	30 18       	mov	r8,1
800020da:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020dc:	78 78       	ld.w	r8,r12[0x1c]
  if (global_interrupt_enabled) cpu_irq_enable();
800020de:	d5 03       	csrf	0x10
800020e0:	5e fc       	retal	r12
void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020e2:	30 18       	mov	r8,1
800020e4:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020e6:	78 78       	ld.w	r8,r12[0x1c]
800020e8:	5e fc       	retal	r12
800020ea:	d7 03       	nop

800020ec <rtc_init>:
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
}


int rtc_init(volatile avr32_rtc_t *rtc, unsigned char osc_type, unsigned char psel)
{
800020ec:	eb cd 40 e0 	pushm	r5-r7,lr
800020f0:	18 97       	mov	r7,r12
800020f2:	16 96       	mov	r6,r11
800020f4:	14 95       	mov	r5,r10
  // If exit, it means that the configuration has not been set correctly
  if (osc_type > (1 << AVR32_RTC_CTRL_CLK32_SIZE) - 1 ||
800020f6:	30 18       	mov	r8,1
800020f8:	f0 0b 18 00 	cp.b	r11,r8
800020fc:	5f b9       	srhi	r9
800020fe:	30 f8       	mov	r8,15
80002100:	f0 0a 18 00 	cp.b	r10,r8
80002104:	5f b8       	srhi	r8
80002106:	f3 e8 10 08 	or	r8,r9,r8
8000210a:	c0 30       	breq	80002110 <rtc_init+0x24>
8000210c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
      psel > (1 << AVR32_RTC_CTRL_PSEL_SIZE) - 1)
    return 0;

  // If we use the 32-kHz oscillator, we have to enable it first
  if (osc_type == RTC_OSC_32KHZ)
80002110:	30 18       	mov	r8,1
80002112:	f0 0b 18 00 	cp.b	r11,r8
80002116:	c0 a1       	brne	8000212a <rtc_init+0x3e>
  {
    // Select the 32-kHz oscillator crystal
    pm_enable_osc32_crystal(&AVR32_PM);
80002118:	fe 7c 0c 00 	mov	r12,-62464
8000211c:	f0 1f 00 0f 	mcall	80002158 <rtc_init+0x6c>
    // Enable the 32-kHz clock and wait until the osc32 clock is ready.
    pm_enable_clk32(&AVR32_PM, AVR32_PM_OSCCTRL32_STARTUP_0_RCOSC);
80002120:	30 0b       	mov	r11,0
80002122:	fe 7c 0c 00 	mov	r12,-62464
80002126:	f0 1f 00 0e 	mcall	8000215c <rtc_init+0x70>
  }

  // Wait until the rtc accepts writes to the CTRL register
  while (rtc_is_busy(rtc));
8000212a:	0e 9c       	mov	r12,r7
8000212c:	f0 1f 00 0d 	mcall	80002160 <rtc_init+0x74>
80002130:	cf d1       	brne	8000212a <rtc_init+0x3e>

  // Set the new RTC configuration
  rtc->ctrl = osc_type << AVR32_RTC_CTRL_CLK32_OFFSET |
80002132:	a3 76       	lsl	r6,0x3
80002134:	b1 a6       	sbr	r6,0x10
80002136:	ed e5 10 85 	or	r5,r6,r5<<0x8
8000213a:	8f 05       	st.w	r7[0x0],r5
              psel << AVR32_RTC_CTRL_PSEL_OFFSET |
              AVR32_RTC_CTRL_CLKEN_MASK;

  // Wait until write is done
  while (rtc_is_busy(rtc));
8000213c:	0e 9c       	mov	r12,r7
8000213e:	f0 1f 00 09 	mcall	80002160 <rtc_init+0x74>
80002142:	cf d1       	brne	8000213c <rtc_init+0x50>

  // Set the counter value to 0
  rtc_set_value(rtc, 0x00000000);
80002144:	30 0b       	mov	r11,0
80002146:	0e 9c       	mov	r12,r7
80002148:	f0 1f 00 07 	mcall	80002164 <rtc_init+0x78>
  // Set the top value to 0xFFFFFFFF
  rtc_set_top_value(rtc, 0xFFFFFFFF);
8000214c:	3f fb       	mov	r11,-1
8000214e:	0e 9c       	mov	r12,r7
80002150:	f0 1f 00 06 	mcall	80002168 <rtc_init+0x7c>
80002154:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	35 cc       	mov	r12,92
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	35 f8       	mov	r8,95
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	20 50       	sub	r0,5
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	20 58       	sub	r8,5
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	20 a8       	sub	r8,10

8000216c <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
8000216c:	30 08       	mov	r8,0
8000216e:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002170:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002172:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002174:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002176:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002178:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000217a:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
8000217c:	b8 f8       	st.b	r12[0x7],r8
}
8000217e:	5e fc       	retal	r12

80002180 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002180:	eb cd 40 80 	pushm	r7,lr
80002184:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002186:	49 68       	lddpc	r8,800021dc <config_dpi204+0x5c>
80002188:	1a 97       	mov	r7,sp
8000218a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000218e:	fa eb 00 00 	st.d	sp[0],r10
80002192:	f0 e8 00 08 	ld.d	r8,r8[8]
80002196:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000219a:	30 4b       	mov	r11,4
8000219c:	49 1c       	lddpc	r12,800021e0 <config_dpi204+0x60>
8000219e:	f0 1f 00 12 	mcall	800021e4 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
800021a2:	1a 9b       	mov	r11,sp
800021a4:	fe 7c 28 00 	mov	r12,-55296
800021a8:	f0 1f 00 10 	mcall	800021e8 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800021ac:	30 09       	mov	r9,0
800021ae:	12 9a       	mov	r10,r9
800021b0:	12 9b       	mov	r11,r9
800021b2:	fe 7c 28 00 	mov	r12,-55296
800021b6:	f0 1f 00 0e 	mcall	800021ec <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
800021ba:	fe 7c 28 00 	mov	r12,-55296
800021be:	f0 1f 00 0d 	mcall	800021f0 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800021c2:	e0 6a 1b 00 	mov	r10,6912
800021c6:	ea 1a 00 b7 	orh	r10,0xb7
800021ca:	1a 9b       	mov	r11,sp
800021cc:	fe 7c 28 00 	mov	r12,-55296
800021d0:	f0 1f 00 09 	mcall	800021f4 <config_dpi204+0x74>
}
800021d4:	2f cd       	sub	sp,-16
800021d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	94 30       	ld.sh	r0,r10[0x6]
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	94 40       	ld.sh	r0,r10[0x8]
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	33 c8       	mov	r8,60
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	36 fa       	mov	r10,111
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	37 32       	mov	r2,115
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	38 88       	mov	r8,-120
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	37 d0       	mov	r0,125

800021f8 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800021f8:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800021fa:	18 9b       	mov	r11,r12
800021fc:	fe 7c 24 00 	mov	r12,-56320
80002200:	f0 1f 00 02 	mcall	80002208 <mASSERT_CS+0x10>
}
80002204:	d8 02       	popm	pc
80002206:	00 00       	add	r0,r0
80002208:	80 00       	ld.sh	r0,r0[0x0]
8000220a:	37 5e       	mov	lr,117

8000220c <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
80002212:	49 88       	lddpc	r8,80002270 <config_SPI_SPARE+0x64>
80002214:	1a 97       	mov	r7,sp
80002216:	f0 ea 00 00 	ld.d	r10,r8[0]
8000221a:	fa eb 00 00 	st.d	sp[0],r10
8000221e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002222:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
80002226:	30 4b       	mov	r11,4
80002228:	49 3c       	lddpc	r12,80002274 <config_SPI_SPARE+0x68>
8000222a:	f0 1f 00 14 	mcall	80002278 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
8000222e:	1a 9b       	mov	r11,sp
80002230:	fe 7c 24 00 	mov	r12,-56320
80002234:	f0 1f 00 12 	mcall	8000227c <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
80002238:	30 09       	mov	r9,0
8000223a:	12 9a       	mov	r10,r9
8000223c:	12 9b       	mov	r11,r9
8000223e:	fe 7c 24 00 	mov	r12,-56320
80002242:	f0 1f 00 10 	mcall	80002280 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
80002246:	30 0b       	mov	r11,0
80002248:	fe 7c 24 00 	mov	r12,-56320
8000224c:	f0 1f 00 0e 	mcall	80002284 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002250:	e0 6a 1b 00 	mov	r10,6912
80002254:	ea 1a 00 b7 	orh	r10,0xb7
80002258:	1a 9b       	mov	r11,sp
8000225a:	fe 7c 24 00 	mov	r12,-56320
8000225e:	f0 1f 00 0b 	mcall	80002288 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002262:	fe 7c 24 00 	mov	r12,-56320
80002266:	f0 1f 00 0a 	mcall	8000228c <config_SPI_SPARE+0x80>
}
8000226a:	2f cd       	sub	sp,-16
8000226c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	94 20       	ld.sh	r0,r10[0x4]
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	94 00       	ld.sh	r0,r10[0x0]
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	33 c8       	mov	r8,60
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	36 fa       	mov	r10,111
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	37 32       	mov	r2,115
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	37 5e       	mov	lr,117
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	37 d0       	mov	r0,125
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	38 88       	mov	r8,-120

80002290 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002290:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002292:	fe 7c 24 00 	mov	r12,-56320
80002296:	f0 1f 00 02 	mcall	8000229c <XferSPI_send+0xc>
	return 0;
}
8000229a:	d8 0a       	popm	pc,r12=0
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	38 8e       	mov	lr,-120

800022a0 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
800022a0:	d4 01       	pushm	lr
800022a2:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
800022a4:	30 0b       	mov	r11,0
800022a6:	fe 7c 24 00 	mov	r12,-56320
800022aa:	f0 1f 00 0e 	mcall	800022e0 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
800022ae:	e0 6b 00 a0 	mov	r11,160
800022b2:	fe 7c 24 00 	mov	r12,-56320
800022b6:	f0 1f 00 0c 	mcall	800022e4 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
800022ba:	30 0b       	mov	r11,0
800022bc:	fe 7c 24 00 	mov	r12,-56320
800022c0:	f0 1f 00 09 	mcall	800022e4 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800022c4:	fa cb ff fe 	sub	r11,sp,-2
800022c8:	fe 7c 24 00 	mov	r12,-56320
800022cc:	f0 1f 00 07 	mcall	800022e8 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800022d0:	30 0b       	mov	r11,0
800022d2:	fe 7c 24 00 	mov	r12,-56320
800022d6:	f0 1f 00 06 	mcall	800022ec <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800022da:	1b bc       	ld.ub	r12,sp[0x3]
800022dc:	2f fd       	sub	sp,-4
800022de:	d8 02       	popm	pc
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	37 5e       	mov	lr,117
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	38 8e       	mov	lr,-120
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	38 b2       	mov	r2,-117
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	37 aa       	mov	r10,122

800022f0 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800022f0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800022f2:	f0 1f 00 04 	mcall	80002300 <CANRxReady+0x10>
800022f6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800022fa:	5f 1c       	srne	r12
800022fc:	d8 02       	popm	pc
800022fe:	00 00       	add	r0,r0
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	22 a0       	sub	r0,42

80002304 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
80002304:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
80002306:	f0 1f 00 04 	mcall	80002314 <CANTxReady+0x10>
8000230a:	ec 1c 00 04 	eorl	r12,0x4
}
8000230e:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
80002312:	d8 02       	popm	pc
80002314:	80 00       	ld.sh	r0,r0[0x0]
80002316:	22 a0       	sub	r0,42

80002318 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
80002318:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
8000231a:	18 9b       	mov	r11,r12
8000231c:	fe 7c 24 00 	mov	r12,-56320
80002320:	f0 1f 00 02 	mcall	80002328 <mDEASSERT_CS+0x10>
}
80002324:	d8 02       	popm	pc
80002326:	00 00       	add	r0,r0
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	37 aa       	mov	r10,122

8000232c <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
8000232c:	d4 21       	pushm	r4-r7,lr
8000232e:	18 97       	mov	r7,r12
80002330:	16 95       	mov	r5,r11
80002332:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002334:	18 96       	mov	r6,r12
80002336:	5c 56       	castu.b	r6
80002338:	0c 9c       	mov	r12,r6
8000233a:	f0 1f 00 0a 	mcall	80002360 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
8000233e:	30 2b       	mov	r11,2
80002340:	0e 9c       	mov	r12,r7
80002342:	f0 1f 00 09 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
80002346:	0a 9b       	mov	r11,r5
80002348:	0e 9c       	mov	r12,r7
8000234a:	f0 1f 00 07 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
8000234e:	08 9b       	mov	r11,r4
80002350:	0e 9c       	mov	r12,r7
80002352:	f0 1f 00 05 	mcall	80002364 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
80002356:	0c 9c       	mov	r12,r6
80002358:	f0 1f 00 04 	mcall	80002368 <CAN2515ByteWrite+0x3c>
}
8000235c:	d8 22       	popm	r4-r7,pc
8000235e:	00 00       	add	r0,r0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	21 f8       	sub	r8,31
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	22 90       	sub	r0,41
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	23 18       	sub	r8,49

8000236c <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
8000236c:	eb cd 40 e0 	pushm	r5-r7,lr
80002370:	18 97       	mov	r7,r12
80002372:	16 96       	mov	r6,r11
80002374:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
80002376:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000237a:	32 7b       	mov	r11,39
8000237c:	f0 1f 00 50 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
80002380:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002384:	32 6b       	mov	r11,38
80002386:	0e 9c       	mov	r12,r7
80002388:	f0 1f 00 4d 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
8000238c:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002390:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002394:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002398:	10 4a       	or	r10,r8
8000239a:	32 5b       	mov	r11,37
8000239c:	0e 9c       	mov	r12,r7
8000239e:	f0 1f 00 48 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
800023a2:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800023a6:	32 4b       	mov	r11,36
800023a8:	0e 9c       	mov	r12,r7
800023aa:	f0 1f 00 45 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
800023ae:	0b ba       	ld.ub	r10,r5[0x3]
800023b0:	30 bb       	mov	r11,11
800023b2:	0e 9c       	mov	r12,r7
800023b4:	f0 1f 00 42 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
800023b8:	0b aa       	ld.ub	r10,r5[0x2]
800023ba:	30 ab       	mov	r11,10
800023bc:	0e 9c       	mov	r12,r7
800023be:	f0 1f 00 40 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800023c2:	6a 08       	ld.w	r8,r5[0x0]
800023c4:	f0 0a 16 0d 	lsr	r10,r8,0xd
800023c8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800023cc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800023d0:	f1 ea 10 0a 	or	r10,r8,r10
800023d4:	a3 ba       	sbr	r10,0x3
800023d6:	e2 1a 00 eb 	andl	r10,0xeb,COH
800023da:	30 9b       	mov	r11,9
800023dc:	0e 9c       	mov	r12,r7
800023de:	f0 1f 00 38 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
800023e2:	0b 0a       	ld.w	r10,r5++
800023e4:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800023e8:	30 8b       	mov	r11,8
800023ea:	0e 9c       	mov	r12,r7
800023ec:	f0 1f 00 34 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
800023f0:	0b ba       	ld.ub	r10,r5[0x3]
800023f2:	31 3b       	mov	r11,19
800023f4:	0e 9c       	mov	r12,r7
800023f6:	f0 1f 00 32 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
800023fa:	0b aa       	ld.ub	r10,r5[0x2]
800023fc:	31 2b       	mov	r11,18
800023fe:	0e 9c       	mov	r12,r7
80002400:	f0 1f 00 2f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002404:	6a 08       	ld.w	r8,r5[0x0]
80002406:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000240a:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000240e:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002412:	f1 ea 10 0a 	or	r10,r8,r10
80002416:	a3 ba       	sbr	r10,0x3
80002418:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000241c:	31 1b       	mov	r11,17
8000241e:	0e 9c       	mov	r12,r7
80002420:	f0 1f 00 27 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
80002424:	0b 0a       	ld.w	r10,r5++
80002426:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000242a:	31 0b       	mov	r11,16
8000242c:	0e 9c       	mov	r12,r7
8000242e:	f0 1f 00 24 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
80002432:	0b ba       	ld.ub	r10,r5[0x3]
80002434:	31 7b       	mov	r11,23
80002436:	0e 9c       	mov	r12,r7
80002438:	f0 1f 00 21 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
8000243c:	0b aa       	ld.ub	r10,r5[0x2]
8000243e:	31 6b       	mov	r11,22
80002440:	0e 9c       	mov	r12,r7
80002442:	f0 1f 00 1f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002446:	6a 08       	ld.w	r8,r5[0x0]
80002448:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000244c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002450:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002454:	f1 ea 10 0a 	or	r10,r8,r10
80002458:	a3 ba       	sbr	r10,0x3
8000245a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000245e:	31 5b       	mov	r11,21
80002460:	0e 9c       	mov	r12,r7
80002462:	f0 1f 00 17 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
80002466:	0b 0a       	ld.w	r10,r5++
80002468:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000246c:	31 4b       	mov	r11,20
8000246e:	0e 9c       	mov	r12,r7
80002470:	f0 1f 00 13 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002474:	0b ba       	ld.ub	r10,r5[0x3]
80002476:	31 bb       	mov	r11,27
80002478:	0e 9c       	mov	r12,r7
8000247a:	f0 1f 00 11 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
8000247e:	0b aa       	ld.ub	r10,r5[0x2]
80002480:	31 ab       	mov	r11,26
80002482:	0e 9c       	mov	r12,r7
80002484:	f0 1f 00 0e 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000248e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002492:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002496:	f1 ea 10 0a 	or	r10,r8,r10
8000249a:	a3 ba       	sbr	r10,0x3
8000249c:	e2 1a 00 eb 	andl	r10,0xeb,COH
800024a0:	31 9b       	mov	r11,25
800024a2:	0e 9c       	mov	r12,r7
800024a4:	f0 1f 00 06 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
800024a8:	6a 0a       	ld.w	r10,r5[0x0]
800024aa:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800024ae:	31 8b       	mov	r11,24
800024b0:	0e 9c       	mov	r12,r7
800024b2:	f0 1f 00 03 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
}
800024b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024ba:	00 00       	add	r0,r0
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	23 2c       	sub	r12,50

800024c0 <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
800024c0:	eb cd 40 e0 	pushm	r5-r7,lr
800024c4:	18 97       	mov	r7,r12
800024c6:	16 96       	mov	r6,r11
800024c8:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
800024ca:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
800024ce:	32 3b       	mov	r11,35
800024d0:	f0 1f 00 2f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
800024d4:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
800024d8:	32 2b       	mov	r11,34
800024da:	0e 9c       	mov	r12,r7
800024dc:	f0 1f 00 2c 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
800024e0:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
800024e4:	ec 0a 16 0d 	lsr	r10,r6,0xd
800024e8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800024ec:	10 4a       	or	r10,r8
800024ee:	32 1b       	mov	r11,33
800024f0:	0e 9c       	mov	r12,r7
800024f2:	f0 1f 00 27 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
800024f6:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800024fa:	32 0b       	mov	r11,32
800024fc:	0e 9c       	mov	r12,r7
800024fe:	f0 1f 00 24 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
80002502:	0b ba       	ld.ub	r10,r5[0x3]
80002504:	30 3b       	mov	r11,3
80002506:	0e 9c       	mov	r12,r7
80002508:	f0 1f 00 21 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
8000250c:	0b aa       	ld.ub	r10,r5[0x2]
8000250e:	30 2b       	mov	r11,2
80002510:	0e 9c       	mov	r12,r7
80002512:	f0 1f 00 1f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002516:	6a 08       	ld.w	r8,r5[0x0]
80002518:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000251c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002520:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002524:	f1 ea 10 0a 	or	r10,r8,r10
80002528:	a3 ba       	sbr	r10,0x3
8000252a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000252e:	30 1b       	mov	r11,1
80002530:	0e 9c       	mov	r12,r7
80002532:	f0 1f 00 17 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
80002536:	0b 0a       	ld.w	r10,r5++
80002538:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000253c:	30 0b       	mov	r11,0
8000253e:	0e 9c       	mov	r12,r7
80002540:	f0 1f 00 13 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
80002544:	0b ba       	ld.ub	r10,r5[0x3]
80002546:	30 7b       	mov	r11,7
80002548:	0e 9c       	mov	r12,r7
8000254a:	f0 1f 00 11 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
8000254e:	0b aa       	ld.ub	r10,r5[0x2]
80002550:	30 6b       	mov	r11,6
80002552:	0e 9c       	mov	r12,r7
80002554:	f0 1f 00 0e 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002558:	6a 08       	ld.w	r8,r5[0x0]
8000255a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000255e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002562:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002566:	f1 ea 10 0a 	or	r10,r8,r10
8000256a:	a3 ba       	sbr	r10,0x3
8000256c:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002570:	30 5b       	mov	r11,5
80002572:	0e 9c       	mov	r12,r7
80002574:	f0 1f 00 06 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
80002578:	6a 0a       	ld.w	r10,r5[0x0]
8000257a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000257e:	30 4b       	mov	r11,4
80002580:	0e 9c       	mov	r12,r7
80002582:	f0 1f 00 03 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
}
80002586:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	23 2c       	sub	r12,50

80002590 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002590:	eb cd 40 c0 	pushm	r6-r7,lr
80002594:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002596:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000259a:	0e 9c       	mov	r12,r7
8000259c:	f0 1f 00 06 	mcall	800025b4 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
800025a0:	e0 6b 00 c0 	mov	r11,192
800025a4:	0c 9c       	mov	r12,r6
800025a6:	f0 1f 00 05 	mcall	800025b8 <CANReset+0x28>
	mDEASSERT_CS(Channel);
800025aa:	0e 9c       	mov	r12,r7
800025ac:	f0 1f 00 04 	mcall	800025bc <CANReset+0x2c>
}
800025b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	21 f8       	sub	r8,31
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	22 90       	sub	r0,41
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	23 18       	sub	r8,49

800025c0 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
800025c0:	eb cd 40 e0 	pushm	r5-r7,lr
800025c4:	20 1d       	sub	sp,4
800025c6:	18 97       	mov	r7,r12
800025c8:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
800025ca:	18 96       	mov	r6,r12
800025cc:	5c 56       	castu.b	r6
800025ce:	0c 9c       	mov	r12,r6
800025d0:	f0 1f 00 13 	mcall	8000261c <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800025d4:	30 3b       	mov	r11,3
800025d6:	0e 9c       	mov	r12,r7
800025d8:	f0 1f 00 12 	mcall	80002620 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800025dc:	0a 9b       	mov	r11,r5
800025de:	0e 9c       	mov	r12,r7
800025e0:	f0 1f 00 10 	mcall	80002620 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800025e4:	30 0b       	mov	r11,0
800025e6:	fe 7c 24 00 	mov	r12,-56320
800025ea:	f0 1f 00 0f 	mcall	80002624 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025ee:	fe 77 24 00 	mov	r7,-56320
800025f2:	c0 28       	rjmp	800025f6 <CAN2515ByteRead+0x36>
		asm("NOP;");
800025f4:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025f6:	0e 9c       	mov	r12,r7
800025f8:	f0 1f 00 0c 	mcall	80002628 <CAN2515ByteRead+0x68>
800025fc:	cf c0       	breq	800025f4 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800025fe:	fa cb ff fe 	sub	r11,sp,-2
80002602:	fe 7c 24 00 	mov	r12,-56320
80002606:	f0 1f 00 0a 	mcall	8000262c <CAN2515ByteRead+0x6c>
	return spidataread_temp;
8000260a:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
8000260c:	0c 9c       	mov	r12,r6
8000260e:	f0 1f 00 09 	mcall	80002630 <CAN2515ByteRead+0x70>

	return tempdata;
}
80002612:	0e 9c       	mov	r12,r7
80002614:	2f fd       	sub	sp,-4
80002616:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000261a:	00 00       	add	r0,r0
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	21 f8       	sub	r8,31
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	22 90       	sub	r0,41
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	38 8e       	mov	lr,-120
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	38 aa       	mov	r10,-118
8000262c:	80 00       	ld.sh	r0,r0[0x0]
8000262e:	38 b2       	mov	r2,-117
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	23 18       	sub	r8,49

80002634 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002634:	eb cd 40 80 	pushm	r7,lr
80002638:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
8000263a:	58 ab       	cp.w	r11,10
8000263c:	c1 11       	brne	8000265e <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
8000263e:	30 3a       	mov	r10,3
80002640:	32 ab       	mov	r11,42
80002642:	f0 1f 00 30 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002646:	e0 6a 00 ac 	mov	r10,172
8000264a:	32 9b       	mov	r11,41
8000264c:	0e 9c       	mov	r12,r7
8000264e:	f0 1f 00 2d 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002652:	30 7a       	mov	r10,7
80002654:	32 8b       	mov	r11,40
80002656:	0e 9c       	mov	r12,r7
80002658:	f0 1f 00 2a 	mcall	80002700 <CANEnable+0xcc>
8000265c:	c3 68       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
8000265e:	58 7b       	cp.w	r11,7
80002660:	c1 11       	brne	80002682 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002662:	30 1a       	mov	r10,1
80002664:	32 ab       	mov	r11,42
80002666:	f0 1f 00 27 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000266a:	e0 6a 00 ac 	mov	r10,172
8000266e:	32 9b       	mov	r11,41
80002670:	0e 9c       	mov	r12,r7
80002672:	f0 1f 00 24 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002676:	30 7a       	mov	r10,7
80002678:	32 8b       	mov	r11,40
8000267a:	0e 9c       	mov	r12,r7
8000267c:	f0 1f 00 21 	mcall	80002700 <CANEnable+0xcc>
80002680:	c2 48       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002682:	58 5b       	cp.w	r11,5
80002684:	c1 11       	brne	800026a6 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002686:	30 0a       	mov	r10,0
80002688:	32 ab       	mov	r11,42
8000268a:	f0 1f 00 1e 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000268e:	e0 6a 00 ac 	mov	r10,172
80002692:	32 9b       	mov	r11,41
80002694:	0e 9c       	mov	r12,r7
80002696:	f0 1f 00 1b 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000269a:	30 7a       	mov	r10,7
8000269c:	32 8b       	mov	r11,40
8000269e:	0e 9c       	mov	r12,r7
800026a0:	f0 1f 00 18 	mcall	80002700 <CANEnable+0xcc>
800026a4:	c1 28       	rjmp	800026c8 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
800026a6:	58 1b       	cp.w	r11,1
800026a8:	c1 01       	brne	800026c8 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
800026aa:	30 0a       	mov	r10,0
800026ac:	32 ab       	mov	r11,42
800026ae:	f0 1f 00 15 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
800026b2:	e0 6a 00 91 	mov	r10,145
800026b6:	32 9b       	mov	r11,41
800026b8:	0e 9c       	mov	r12,r7
800026ba:	f0 1f 00 12 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
800026be:	30 3a       	mov	r10,3
800026c0:	32 8b       	mov	r11,40
800026c2:	0e 9c       	mov	r12,r7
800026c4:	f0 1f 00 0f 	mcall	80002700 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
800026c8:	30 3a       	mov	r10,3
800026ca:	32 bb       	mov	r11,43
800026cc:	0e 9c       	mov	r12,r7
800026ce:	f0 1f 00 0d 	mcall	80002700 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800026d2:	30 4a       	mov	r10,4
800026d4:	30 fb       	mov	r11,15
800026d6:	0e 9c       	mov	r12,r7
800026d8:	f0 1f 00 0a 	mcall	80002700 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800026dc:	30 eb       	mov	r11,14
800026de:	0e 9c       	mov	r12,r7
800026e0:	f0 1f 00 09 	mcall	80002704 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800026e4:	30 eb       	mov	r11,14
800026e6:	0e 9c       	mov	r12,r7
800026e8:	f0 1f 00 07 	mcall	80002704 <CANEnable+0xd0>
800026ec:	e2 1c 00 e0 	andl	r12,0xe0,COH
800026f0:	c0 60       	breq	800026fc <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800026f2:	30 4a       	mov	r10,4
800026f4:	30 fb       	mov	r11,15
800026f6:	0e 9c       	mov	r12,r7
800026f8:	f0 1f 00 02 	mcall	80002700 <CANEnable+0xcc>
800026fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	23 2c       	sub	r12,50
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	25 c0       	sub	r0,92

80002708 <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
80002708:	d4 21       	pushm	r4-r7,lr
8000270a:	18 97       	mov	r7,r12
8000270c:	16 94       	mov	r4,r11
8000270e:	14 95       	mov	r5,r10
80002710:	12 96       	mov	r6,r9
	CANReset(Channel);
80002712:	f0 1f 00 0f 	mcall	8000274c <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
80002716:	34 0a       	mov	r10,64
80002718:	36 0b       	mov	r11,96
8000271a:	0e 9c       	mov	r12,r7
8000271c:	f0 1f 00 0d 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
80002720:	34 0a       	mov	r10,64
80002722:	37 0b       	mov	r11,112
80002724:	0e 9c       	mov	r12,r7
80002726:	f0 1f 00 0b 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
8000272a:	0c 9a       	mov	r10,r6
8000272c:	0a 9b       	mov	r11,r5
8000272e:	0e 9c       	mov	r12,r7
80002730:	f0 1f 00 09 	mcall	80002754 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
80002734:	ec ca ff f8 	sub	r10,r6,-8
80002738:	0a 9b       	mov	r11,r5
8000273a:	0e 9c       	mov	r12,r7
8000273c:	f0 1f 00 07 	mcall	80002758 <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
80002740:	08 9b       	mov	r11,r4
80002742:	0e 9c       	mov	r12,r7
80002744:	f0 1f 00 06 	mcall	8000275c <InitializeCANExtended+0x54>
}
80002748:	d8 22       	popm	r4-r7,pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	25 90       	sub	r0,89
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	23 2c       	sub	r12,50
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	24 c0       	sub	r0,76
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	23 6c       	sub	r12,54
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	26 34       	sub	r4,99

80002760 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002760:	eb cd 40 fe 	pushm	r1-r7,lr
80002764:	18 96       	mov	r6,r12
80002766:	16 93       	mov	r3,r11
80002768:	14 94       	mov	r4,r10
8000276a:	12 92       	mov	r2,r9
8000276c:	10 91       	mov	r1,r8
8000276e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002770:	33 05       	mov	r5,48
80002772:	c1 78       	rjmp	800027a0 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002774:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002778:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000277c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002780:	14 38       	cp.w	r8,r10
80002782:	e0 88 00 08 	brls	80002792 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002786:	12 38       	cp.w	r8,r9
80002788:	fe 98 ff fa 	brls	8000277c <CANSendMsg+0x1c>
8000278c:	12 3a       	cp.w	r10,r9
8000278e:	c7 63       	brcs	8000287a <CANSendMsg+0x11a>
80002790:	cf 6b       	rjmp	8000277c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002792:	12 38       	cp.w	r8,r9
80002794:	e0 8b 00 73 	brhi	8000287a <CANSendMsg+0x11a>
80002798:	12 3a       	cp.w	r10,r9
8000279a:	c7 03       	brcs	8000287a <CANSendMsg+0x11a>
8000279c:	cf 0b       	rjmp	8000277c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000279e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
800027a0:	0a 9b       	mov	r11,r5
800027a2:	0c 9c       	mov	r12,r6
800027a4:	f0 1f 00 38 	mcall	80002884 <CANSendMsg+0x124>
800027a8:	e2 1c 00 08 	andl	r12,0x8,COH
800027ac:	ce 41       	brne	80002774 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
800027ae:	e6 08 16 0b 	lsr	r8,r3,0xb
800027b2:	c1 01       	brne	800027d2 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
800027b4:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
800027b8:	33 1b       	mov	r11,49
800027ba:	0c 9c       	mov	r12,r6
800027bc:	f0 1f 00 33 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
800027c0:	e6 0a 15 05 	lsl	r10,r3,0x5
800027c4:	e2 1a 00 e0 	andl	r10,0xe0,COH
800027c8:	33 2b       	mov	r11,50
800027ca:	0c 9c       	mov	r12,r6
800027cc:	f0 1f 00 2f 	mcall	80002888 <CANSendMsg+0x128>
800027d0:	c2 18       	rjmp	80002812 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800027d2:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800027d6:	33 1b       	mov	r11,49
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 2c 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800027de:	e6 08 16 0d 	lsr	r8,r3,0xd
800027e2:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800027e6:	e2 18 00 e0 	andl	r8,0xe0,COH
800027ea:	10 4a       	or	r10,r8
800027ec:	a3 ba       	sbr	r10,0x3
800027ee:	e2 1a 00 eb 	andl	r10,0xeb,COH
800027f2:	33 2b       	mov	r11,50
800027f4:	0c 9c       	mov	r12,r6
800027f6:	f0 1f 00 25 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800027fa:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800027fe:	33 3b       	mov	r11,51
80002800:	0c 9c       	mov	r12,r6
80002802:	f0 1f 00 22 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002806:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
8000280a:	33 4b       	mov	r11,52
8000280c:	0c 9c       	mov	r12,r6
8000280e:	f0 1f 00 1f 	mcall	80002888 <CANSendMsg+0x128>
80002812:	30 85       	mov	r5,8
80002814:	ea 02 18 00 	cp.b	r2,r5
80002818:	e4 05 17 80 	movls	r5,r2
8000281c:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002820:	e0 41 00 52 	cp.w	r1,82
80002824:	c1 01       	brne	80002844 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
80002826:	a7 a5       	sbr	r5,0x6
80002828:	5c 55       	castu.b	r5
8000282a:	0a 9a       	mov	r10,r5
8000282c:	33 5b       	mov	r11,53
8000282e:	0c 9c       	mov	r12,r6
80002830:	f0 1f 00 16 	mcall	80002888 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002834:	30 4b       	mov	r11,4
80002836:	31 1c       	mov	r12,17
80002838:	f0 1f 00 15 	mcall	8000288c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
8000283c:	49 5c       	lddpc	r12,80002890 <CANSendMsg+0x130>
8000283e:	f0 1f 00 16 	mcall	80002894 <CANSendMsg+0x134>
80002842:	c0 68       	rjmp	8000284e <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002844:	0a 9a       	mov	r10,r5
80002846:	33 5b       	mov	r11,53
80002848:	0c 9c       	mov	r12,r6
8000284a:	f0 1f 00 10 	mcall	80002888 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000284e:	58 05       	cp.w	r5,0
80002850:	e0 8a 00 0e 	brle	8000286c <CANSendMsg+0x10c>
80002854:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002856:	0e 9b       	mov	r11,r7
80002858:	2c ab       	sub	r11,-54
8000285a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
8000285e:	5c 5b       	castu.b	r11
80002860:	0c 9c       	mov	r12,r6
80002862:	f0 1f 00 0a 	mcall	80002888 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002866:	2f f7       	sub	r7,-1
80002868:	0a 37       	cp.w	r7,r5
8000286a:	cf 65       	brlt	80002856 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
8000286c:	30 8a       	mov	r10,8
8000286e:	33 0b       	mov	r11,48
80002870:	0c 9c       	mov	r12,r6
80002872:	f0 1f 00 06 	mcall	80002888 <CANSendMsg+0x128>
80002876:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000287a:	e0 47 00 64 	cp.w	r7,100
8000287e:	c9 01       	brne	8000279e <CANSendMsg+0x3e>
80002880:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	25 c0       	sub	r0,92
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	23 2c       	sub	r12,50
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	30 64       	mov	r4,6
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	94 74       	ld.sh	r4,r10[0xe]
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	2f cc       	sub	r12,-4

80002898 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002898:	d4 31       	pushm	r0-r7,lr
8000289a:	18 95       	mov	r5,r12
8000289c:	16 92       	mov	r2,r11
8000289e:	14 93       	mov	r3,r10
800028a0:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
800028a2:	f0 1f 00 55 	mcall	800029f4 <CANGetMsg+0x15c>

        if( (temp & 3) == 0 )
800028a6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800028aa:	e0 80 00 a3 	breq	800029f0 <CANGetMsg+0x158>
            return FALSE;
        temp&=0x03;
        if(temp==1){
800028ae:	58 1c       	cp.w	r12,1
800028b0:	c0 31       	brne	800028b6 <CANGetMsg+0x1e>
800028b2:	36 16       	mov	r6,97
800028b4:	c0 58       	rjmp	800028be <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
800028b6:	58 2c       	cp.w	r12,2
800028b8:	e0 81 00 9c 	brne	800029f0 <CANGetMsg+0x158>
800028bc:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
800028be:	0c 9b       	mov	r11,r6
800028c0:	0a 9c       	mov	r12,r5
800028c2:	f0 1f 00 4e 	mcall	800029f8 <CANGetMsg+0x160>
800028c6:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
800028c8:	ec cb ff ff 	sub	r11,r6,-1
800028cc:	5c 5b       	castu.b	r11
800028ce:	0a 9c       	mov	r12,r5
800028d0:	f0 1f 00 4a 	mcall	800029f8 <CANGetMsg+0x160>
800028d4:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800028d6:	ec cb ff fe 	sub	r11,r6,-2
800028da:	5c 5b       	castu.b	r11
800028dc:	0a 9c       	mov	r12,r5
800028de:	f0 1f 00 47 	mcall	800029f8 <CANGetMsg+0x160>
800028e2:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800028e4:	ec cb ff fd 	sub	r11,r6,-3
800028e8:	5c 5b       	castu.b	r11
800028ea:	0a 9c       	mov	r12,r5
800028ec:	f0 1f 00 43 	mcall	800029f8 <CANGetMsg+0x160>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800028f0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800028f4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800028f8:	c0 d1       	brne	80002912 <CANGetMsg+0x7a>
        {
            *pIdentifier = S1<<3 | S2>>5;
800028fa:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800028fe:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002902:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
80002904:	30 1c       	mov	r12,1
80002906:	f0 1f 00 3e 	mcall	800029fc <CANGetMsg+0x164>
            LED_Off(LED1);
8000290a:	30 2c       	mov	r12,2
8000290c:	f0 1f 00 3d 	mcall	80002a00 <CANGetMsg+0x168>
80002910:	c1 48       	rjmp	80002938 <CANGetMsg+0xa0>

        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002912:	a9 60       	lsl	r0,0x8
80002914:	e1 e1 11 51 	or	r1,r0,r1<<0x15
80002918:	e3 ec 10 0c 	or	r12,r1,r12
8000291c:	e2 18 00 1c 	andl	r8,0x1c,COH
80002920:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002924:	0e 48       	or	r8,r7
80002926:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000292a:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
8000292c:	30 2c       	mov	r12,2
8000292e:	f0 1f 00 34 	mcall	800029fc <CANGetMsg+0x164>
            LED_Off(LED0);
80002932:	30 1c       	mov	r12,1
80002934:	f0 1f 00 33 	mcall	80002a00 <CANGetMsg+0x168>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002938:	ec cb ff fc 	sub	r11,r6,-4
8000293c:	5c 5b       	castu.b	r11
8000293e:	0a 9c       	mov	r12,r5
80002940:	f0 1f 00 2e 	mcall	800029f8 <CANGetMsg+0x160>
80002944:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002948:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
8000294a:	30 88       	mov	r8,8
8000294c:	f0 0c 18 00 	cp.b	r12,r8
80002950:	e0 88 00 07 	brls	8000295e <CANGetMsg+0xc6>
            *pMsgSize = 8;
80002954:	a8 88       	st.b	r4[0x0],r8
80002956:	2f b6       	sub	r6,-5
80002958:	5c 56       	castu.b	r6
8000295a:	30 07       	mov	r7,0
8000295c:	c0 58       	rjmp	80002966 <CANGetMsg+0xce>

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000295e:	58 0c       	cp.w	r12,0
80002960:	fe 99 ff fb 	brgt	80002956 <CANGetMsg+0xbe>
80002964:	c0 e8       	rjmp	80002980 <CANGetMsg+0xe8>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80002966:	0c 9b       	mov	r11,r6
80002968:	0a 9c       	mov	r12,r5
8000296a:	f0 1f 00 24 	mcall	800029f8 <CANGetMsg+0x160>
8000296e:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002972:	2f f7       	sub	r7,-1
80002974:	2f f6       	sub	r6,-1
80002976:	5c 56       	castu.b	r6
80002978:	09 88       	ld.ub	r8,r4[0x0]
8000297a:	0e 38       	cp.w	r8,r7
8000297c:	fe 99 ff f5 	brgt	80002966 <CANGetMsg+0xce>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
80002980:	30 4c       	mov	r12,4
80002982:	f0 1f 00 20 	mcall	80002a00 <CANGetMsg+0x168>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002986:	36 0b       	mov	r11,96
80002988:	0a 9c       	mov	r12,r5
8000298a:	f0 1f 00 1c 	mcall	800029f8 <CANGetMsg+0x160>
8000298e:	e2 1c 00 08 	andl	r12,0x8,COH
80002992:	c0 81       	brne	800029a2 <CANGetMsg+0x10a>
80002994:	37 0b       	mov	r11,112
80002996:	0a 9c       	mov	r12,r5
80002998:	f0 1f 00 18 	mcall	800029f8 <CANGetMsg+0x160>
8000299c:	e2 1c 00 08 	andl	r12,0x8,COH
800029a0:	c1 d0       	breq	800029da <CANGetMsg+0x142>
800029a2:	64 08       	ld.w	r8,r2[0x0]
800029a4:	58 18       	cp.w	r8,1
800029a6:	c1 a1       	brne	800029da <CANGetMsg+0x142>
                    {
                    Msg[0] = 0;
800029a8:	30 08       	mov	r8,0
800029aa:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
800029ac:	30 18       	mov	r8,1
800029ae:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
800029b0:	30 28       	mov	r8,2
800029b2:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
800029b4:	30 38       	mov	r8,3
800029b6:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
800029b8:	30 08       	mov	r8,0
800029ba:	30 49       	mov	r9,4
800029bc:	06 9a       	mov	r10,r3
800029be:	64 0b       	ld.w	r11,r2[0x0]
800029c0:	0a 9c       	mov	r12,r5
800029c2:	f0 1f 00 11 	mcall	80002a04 <CANGetMsg+0x16c>
                    dip204_set_cursor_position(17,4);
800029c6:	30 4b       	mov	r11,4
800029c8:	31 1c       	mov	r12,17
800029ca:	f0 1f 00 10 	mcall	80002a08 <CANGetMsg+0x170>
                    dip204_printf_string("Re F");
800029ce:	49 0c       	lddpc	r12,80002a0c <CANGetMsg+0x174>
800029d0:	f0 1f 00 10 	mcall	80002a10 <CANGetMsg+0x178>
                    LED_On(LED2);
800029d4:	30 4c       	mov	r12,4
800029d6:	f0 1f 00 0a 	mcall	800029fc <CANGetMsg+0x164>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800029da:	30 0a       	mov	r10,0
800029dc:	32 cb       	mov	r11,44
800029de:	14 9c       	mov	r12,r10
800029e0:	f0 1f 00 0d 	mcall	80002a14 <CANGetMsg+0x17c>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800029e4:	30 0a       	mov	r10,0
800029e6:	32 cb       	mov	r11,44
800029e8:	14 9c       	mov	r12,r10
800029ea:	f0 1f 00 0b 	mcall	80002a14 <CANGetMsg+0x17c>
800029ee:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800029f0:	d8 3a       	popm	r0-r7,pc,r12=0
800029f2:	00 00       	add	r0,r0
800029f4:	80 00       	ld.sh	r0,r0[0x0]
800029f6:	22 a0       	sub	r0,42
800029f8:	80 00       	ld.sh	r0,r0[0x0]
800029fa:	25 c0       	sub	r0,92
800029fc:	80 00       	ld.sh	r0,r0[0x0]
800029fe:	2e 38       	sub	r8,-29
80002a00:	80 00       	ld.sh	r0,r0[0x0]
80002a02:	2e 88       	sub	r8,-24
80002a04:	80 00       	ld.sh	r0,r0[0x0]
80002a06:	27 60       	sub	r0,118
80002a08:	80 00       	ld.sh	r0,r0[0x0]
80002a0a:	30 64       	mov	r4,6
80002a0c:	80 00       	ld.sh	r0,r0[0x0]
80002a0e:	94 74       	ld.sh	r4,r10[0xe]
80002a10:	80 00       	ld.sh	r0,r0[0x0]
80002a12:	2f cc       	sub	r12,-4
80002a14:	80 00       	ld.sh	r0,r0[0x0]
80002a16:	23 2c       	sub	r12,50

80002a18 <nodeCount>:
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
{
80002a18:	eb cd 40 c0 	pushm	r6-r7,lr
80002a1c:	49 1a       	lddpc	r10,80002a60 <nodeCount+0x48>
80002a1e:	30 08       	mov	r8,0
80002a20:	10 99       	mov	r9,r8
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
	{
		//Adds any new nodes to its corresponding position in nodeCount bit seq.
		ids |= (1 << (nFrame[j].ID & 0x000F));
80002a22:	30 17       	mov	r7,1
		UINT16 ids_new = ids;
		//If counts the number of nodes active within ~1000 ms
		ids_new &= ((ids_new >> j) & 0x01);

		//If there was a node found at the j'th bit 1 is added to l
		if(ids_new == 1)
80002a24:	0e 96       	mov	r6,r7
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
	{
		//Adds any new nodes to its corresponding position in nodeCount bit seq.
		ids |= (1 << (nFrame[j].ID & 0x000F));
80002a26:	94 8b       	ld.uh	r11,r10[0x0]
80002a28:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80002a2c:	ee 0b 09 4b 	lsl	r11,r7,r11
80002a30:	16 48       	or	r8,r11
80002a32:	5c 88       	casts.h	r8
		UINT16 ids_new = ids;
		//If counts the number of nodes active within ~1000 ms
		ids_new &= ((ids_new >> j) & 0x01);

		//If there was a node found at the j'th bit 1 is added to l
		if(ids_new == 1)
80002a34:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002a38:	fd d8 c0 01 	bfextu	lr,r8,0x0,0x1
80002a3c:	f6 09 08 4b 	asr	r11,r11,r9
80002a40:	fd eb 00 0b 	and	r11,lr,r11
80002a44:	ec 0b 19 00 	cp.h	r11,r6
80002a48:	c0 31       	brne	80002a4e <nodeCount+0x36>
		{
			++l;
80002a4a:	2f fc       	sub	r12,-1
80002a4c:	5c 5c       	castu.b	r12
UINT8 nodeCount(void)
{
	UINT8 l;
	ids = 0;

	for(int j = 0; j < 16 ; ++j)
80002a4e:	2f f9       	sub	r9,-1
80002a50:	2f 6a       	sub	r10,-10
80002a52:	59 09       	cp.w	r9,16
80002a54:	ce 91       	brne	80002a26 <nodeCount+0xe>
80002a56:	48 49       	lddpc	r9,80002a64 <nodeCount+0x4c>
80002a58:	b2 08       	st.h	r9[0x0],r8
			++l;
		}
	}
	return l;
	
}
80002a5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a5e:	00 00       	add	r0,r0
80002a60:	00 00       	add	r0,r0
80002a62:	06 74       	tst	r4,r3
80002a64:	00 00       	add	r0,r0
80002a66:	06 60       	and	r0,r3

80002a68 <initBoard>:
	dip204_printf_string("A L:");
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
{
80002a68:	d4 01       	pushm	lr
	//Enable ADC channels
	adc_enable( &AVR32_ADC, ADC_TEMPERATURE_CHANNEL );
80002a6a:	30 0b       	mov	r11,0
80002a6c:	fe 7c 3c 00 	mov	r12,-50176
80002a70:	f0 1f 00 1b 	mcall	80002adc <initBoard+0x74>
	adc_enable( &AVR32_ADC, ADC_LIGHT_CHANNEL );
80002a74:	30 2b       	mov	r11,2
80002a76:	fe 7c 3c 00 	mov	r12,-50176
80002a7a:	f0 1f 00 19 	mcall	80002adc <initBoard+0x74>

	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002a7e:	30 3a       	mov	r10,3
80002a80:	e0 6b 1b 00 	mov	r11,6912
80002a84:	ea 1b 00 b7 	orh	r11,0xb7
80002a88:	fe 7c 0c 00 	mov	r12,-62464
80002a8c:	f0 1f 00 15 	mcall	80002ae0 <initBoard+0x78>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
80002a90:	f0 1f 00 15 	mcall	80002ae4 <initBoard+0x7c>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002a94:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002a96:	f0 1f 00 15 	mcall	80002ae8 <initBoard+0x80>

	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&interrupt, AVR32_RTC_IRQ, AVR32_INTC_INT0);
80002a9a:	30 0a       	mov	r10,0
80002a9c:	32 8b       	mov	r11,40
80002a9e:	49 4c       	lddpc	r12,80002aec <initBoard+0x84>
80002aa0:	f0 1f 00 14 	mcall	80002af0 <initBoard+0x88>
	rtc_init(&AVR32_RTC, RTC_OSC_32KHZ, 14);
80002aa4:	30 ea       	mov	r10,14
80002aa6:	30 1b       	mov	r11,1
80002aa8:	fe 7c 0d 00 	mov	r12,-62208
80002aac:	f0 1f 00 12 	mcall	80002af4 <initBoard+0x8c>
	// Set top value to 0 to generate an interrupt every seconds */
	rtc_set_top_value(&AVR32_RTC, 0);
80002ab0:	30 0b       	mov	r11,0
80002ab2:	fe 7c 0d 00 	mov	r12,-62208
80002ab6:	f0 1f 00 11 	mcall	80002af8 <initBoard+0x90>
	// Enable the interrupts
	rtc_enable_interrupt(&AVR32_RTC);
80002aba:	fe 7c 0d 00 	mov	r12,-62208
80002abe:	f0 1f 00 10 	mcall	80002afc <initBoard+0x94>
	// Enable the RTC
	rtc_enable(&AVR32_RTC);
80002ac2:	fe 7c 0d 00 	mov	r12,-62208
80002ac6:	f0 1f 00 0f 	mcall	80002b00 <initBoard+0x98>
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
80002aca:	f0 1f 00 0f 	mcall	80002b04 <initBoard+0x9c>
	dip204_init(100,1);
80002ace:	30 1b       	mov	r11,1
80002ad0:	36 4c       	mov	r12,100
80002ad2:	f0 1f 00 0e 	mcall	80002b08 <initBoard+0xa0>
	dip204_clear_display();
80002ad6:	f0 1f 00 0e 	mcall	80002b0c <initBoard+0xa4>
}
80002ada:	d8 02       	popm	pc
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	20 0e       	sub	lr,0
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	36 20       	mov	r0,98
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	22 0c       	sub	r12,32
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	34 b4       	mov	r4,75
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	2b 10       	sub	r0,-79
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	34 34       	mov	r4,67
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	20 ec       	sub	r12,14
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	20 a8       	sub	r8,10
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	20 a0       	sub	r0,10
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	20 7c       	sub	r12,7
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	21 80       	sub	r0,24
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	31 4c       	mov	r12,20
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	30 f0       	mov	r0,15

80002b10 <interrupt>:
	return l;
	
}

__attribute__((__interrupt__)) static void interrupt(void)
{
80002b10:	d4 01       	pushm	lr
		
	struct frame nFrame;

	rtc_clear_interrupt(&AVR32_RTC);
80002b12:	fe 7c 0d 00 	mov	r12,-62208
80002b16:	f0 1f 00 03 	mcall	80002b20 <interrupt+0x10>
}
80002b1a:	d4 02       	popm	lr
80002b1c:	d6 03       	rete
80002b1e:	00 00       	add	r0,r0
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	20 cc       	sub	r12,12

80002b24 <printLCD>:
	dip204_set_cursor_position(15, 2);
	dip204_printf_string("%d",  (lighttot/actNodes));
}

void printLCD(void)
{					
80002b24:	d4 01       	pushm	lr
	dip204_set_cursor_position(1, 1);
80002b26:	30 1b       	mov	r11,1
80002b28:	16 9c       	mov	r12,r11
80002b2a:	f0 1f 00 17 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("Active nodes:");
80002b2e:	49 7c       	lddpc	r12,80002b88 <printLCD+0x64>
80002b30:	f0 1f 00 17 	mcall	80002b8c <printLCD+0x68>
	dip204_set_cursor_position(1, 3);
80002b34:	30 3b       	mov	r11,3
80002b36:	30 1c       	mov	r12,1
80002b38:	f0 1f 00 13 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("O T:");
80002b3c:	49 5c       	lddpc	r12,80002b90 <printLCD+0x6c>
80002b3e:	f0 1f 00 14 	mcall	80002b8c <printLCD+0x68>
	dip204_set_cursor_position(10, 3);
80002b42:	30 3b       	mov	r11,3
80002b44:	30 ac       	mov	r12,10
80002b46:	f0 1f 00 10 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("A T:");
80002b4a:	49 3c       	lddpc	r12,80002b94 <printLCD+0x70>
80002b4c:	f0 1f 00 10 	mcall	80002b8c <printLCD+0x68>
	dip204_set_cursor_position(1, 2);
80002b50:	30 2b       	mov	r11,2
80002b52:	30 1c       	mov	r12,1
80002b54:	f0 1f 00 0c 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("O L:");
80002b58:	49 0c       	lddpc	r12,80002b98 <printLCD+0x74>
80002b5a:	f0 1f 00 0d 	mcall	80002b8c <printLCD+0x68>
	dip204_set_cursor_position(10, 2);
80002b5e:	30 2b       	mov	r11,2
80002b60:	30 ac       	mov	r12,10
80002b62:	f0 1f 00 09 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("A L:");
80002b66:	48 ec       	lddpc	r12,80002b9c <printLCD+0x78>
80002b68:	f0 1f 00 09 	mcall	80002b8c <printLCD+0x68>
	dip204_set_cursor_position(15, 1);
80002b6c:	30 1b       	mov	r11,1
80002b6e:	30 fc       	mov	r12,15
80002b70:	f0 1f 00 05 	mcall	80002b84 <printLCD+0x60>
	dip204_printf_string("%d", nodeCount());
80002b74:	f0 1f 00 0b 	mcall	80002ba0 <printLCD+0x7c>
80002b78:	1a dc       	st.w	--sp,r12
80002b7a:	48 bc       	lddpc	r12,80002ba4 <printLCD+0x80>
80002b7c:	f0 1f 00 04 	mcall	80002b8c <printLCD+0x68>
80002b80:	2f fd       	sub	sp,-4
}
80002b82:	d8 02       	popm	pc
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	30 64       	mov	r4,6
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	94 7c       	ld.sh	r12,r10[0xe]
80002b8c:	80 00       	ld.sh	r0,r0[0x0]
80002b8e:	2f cc       	sub	r12,-4
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	94 8c       	ld.uh	r12,r10[0x0]
80002b94:	80 00       	ld.sh	r0,r0[0x0]
80002b96:	94 94       	ld.uh	r4,r10[0x2]
80002b98:	80 00       	ld.sh	r0,r0[0x0]
80002b9a:	94 9c       	ld.uh	r12,r10[0x2]
80002b9c:	80 00       	ld.sh	r0,r0[0x0]
80002b9e:	94 a4       	ld.uh	r4,r10[0x4]
80002ba0:	80 00       	ld.sh	r0,r0[0x0]
80002ba2:	2a 18       	sub	r8,-95
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	94 ac       	ld.uh	r12,r10[0x4]

80002ba8 <average>:

	rtc_clear_interrupt(&AVR32_RTC);
}

void average(void)
{
80002ba8:	d4 21       	pushm	r4-r7,lr
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
80002baa:	f0 1f 00 1d 	mcall	80002c1c <average+0x74>
80002bae:	18 95       	mov	r5,r12
80002bb0:	49 cb       	lddpc	r11,80002c20 <average+0x78>
80002bb2:	f6 c8 ff fc 	sub	r8,r11,-4
	struct frame nFrame;

	rtc_clear_interrupt(&AVR32_RTC);
}

void average(void)
80002bb6:	f6 cb ff 5c 	sub	r11,r11,-164
80002bba:	30 07       	mov	r7,0
80002bbc:	0e 96       	mov	r6,r7
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();

	for(int i = 0; i < 16; ++i)
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
80002bbe:	11 8a       	ld.ub	r10,r8[0x0]
80002bc0:	11 99       	ld.ub	r9,r8[0x1]
80002bc2:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002bc6:	12 06       	add	r6,r9
80002bc8:	5c 86       	casts.h	r6
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
80002bca:	f1 3a ff fe 	ld.ub	r10,r8[-2]
80002bce:	f1 39 ff ff 	ld.ub	r9,r8[-1]
80002bd2:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002bd6:	12 07       	add	r7,r9
80002bd8:	5c 87       	casts.h	r7
80002bda:	2f 68       	sub	r8,-10
{
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();

	for(int i = 0; i < 16; ++i)
80002bdc:	16 38       	cp.w	r8,r11
80002bde:	cf 01       	brne	80002bbe <average+0x16>
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	dip204_set_cursor_position(15, 3);
80002be0:	30 3b       	mov	r11,3
80002be2:	30 fc       	mov	r12,15
80002be4:	f0 1f 00 10 	mcall	80002c24 <average+0x7c>
	dip204_printf_string("%d",  (tempertot/actNodes));
80002be8:	49 04       	lddpc	r4,80002c28 <average+0x80>
80002bea:	0e 99       	mov	r9,r7
80002bec:	5c 79       	castu.h	r9
80002bee:	5c 75       	castu.h	r5
80002bf0:	f2 05 0d 08 	divu	r8,r9,r5
80002bf4:	5c 78       	castu.h	r8
80002bf6:	1a d8       	st.w	--sp,r8
80002bf8:	08 9c       	mov	r12,r4
80002bfa:	f0 1f 00 0d 	mcall	80002c2c <average+0x84>
	dip204_set_cursor_position(15, 2);
80002bfe:	30 2b       	mov	r11,2
80002c00:	30 fc       	mov	r12,15
80002c02:	f0 1f 00 09 	mcall	80002c24 <average+0x7c>
	dip204_printf_string("%d",  (lighttot/actNodes));
80002c06:	f3 d6 c0 10 	bfextu	r9,r6,0x0,0x10
80002c0a:	f2 05 0d 08 	divu	r8,r9,r5
80002c0e:	5c 78       	castu.h	r8
80002c10:	1a d8       	st.w	--sp,r8
80002c12:	08 9c       	mov	r12,r4
80002c14:	f0 1f 00 06 	mcall	80002c2c <average+0x84>
80002c18:	2f ed       	sub	sp,-8
}
80002c1a:	d8 22       	popm	r4-r7,pc
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	2a 18       	sub	r8,-95
80002c20:	00 00       	add	r0,r0
80002c22:	06 74       	tst	r4,r3
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	30 64       	mov	r4,6
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	94 ac       	ld.uh	r12,r10[0x4]
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	2f cc       	sub	r12,-4

80002c30 <readADC>:
	UINT8 mssg[8];

}nFrame[15];

void readADC(void)
{
80002c30:	eb cd 40 80 	pushm	r7,lr
	UINT32 readPot, readLight, readTemp;
	UINT16 potMSB, potLSB, lightMSB, lightLSB, tempMSB, tempLSB;

		
	//Reading ADC channels
	readLight = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80002c34:	30 2b       	mov	r11,2
80002c36:	fe 7c 3c 00 	mov	r12,-50176
80002c3a:	f0 1f 00 15 	mcall	80002c8c <readADC+0x5c>
80002c3e:	18 97       	mov	r7,r12
	readTemp = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80002c40:	30 0b       	mov	r11,0
80002c42:	fe 7c 3c 00 	mov	r12,-50176
80002c46:	f0 1f 00 12 	mcall	80002c8c <readADC+0x5c>
	lightLSB = readLight & 0x000000FF;
				
	tempMSB = (readTemp >> 8) & 0x00000003;
	tempLSB = readTemp & 0x000000FF;
	
	nFrame[0x00F & ownId].mssg[0] = tempMSB;
80002c4a:	49 28       	lddpc	r8,80002c90 <readADC+0x60>
80002c4c:	90 89       	ld.uh	r9,r8[0x0]
80002c4e:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002c52:	49 1a       	lddpc	r10,80002c94 <readADC+0x64>
80002c54:	f2 0b 15 02 	lsl	r11,r9,0x2
80002c58:	f6 09 00 08 	add	r8,r11,r9
80002c5c:	f4 08 00 18 	add	r8,r10,r8<<0x1
80002c60:	fd dc c1 02 	bfextu	lr,r12,0x8,0x2
80002c64:	b0 ae       	st.b	r8[0x2],lr
	nFrame[0x00F & ownId].mssg[1] = tempLSB;
80002c66:	b0 bc       	st.b	r8[0x3],r12
	nFrame[0x00F & ownId].mssg[2] = lightMSB;
80002c68:	f3 d7 c1 02 	bfextu	r9,r7,0x8,0x2
80002c6c:	b0 c9       	st.b	r8[0x4],r9
	nFrame[0x00F & ownId].mssg[3] = lightLSB;
80002c6e:	b0 d7       	st.b	r8[0x5],r7
	nFrame[0x00F & ownId].mssg[4] = 0;
80002c70:	f0 ca ff fc 	sub	r10,r8,-4
80002c74:	30 09       	mov	r9,0
80002c76:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[5] = 0;
80002c78:	f0 ca ff fb 	sub	r10,r8,-5
80002c7c:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[6] = 0;
80002c7e:	f0 ca ff fa 	sub	r10,r8,-6
80002c82:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[7] = 0;
80002c84:	2f 98       	sub	r8,-7
80002c86:	b0 a9       	st.b	r8[0x2],r9
}
80002c88:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	20 28       	sub	r8,2
80002c90:	00 00       	add	r0,r0
80002c92:	00 08       	add	r8,r0
80002c94:	00 00       	add	r0,r0
80002c96:	06 74       	tst	r4,r3

80002c98 <ownADC>:

void ownADC(void)
{
80002c98:	eb cd 40 e0 	pushm	r5-r7,lr
	UINT16 light = 0;
	UINT16 temper= 0;
	
	readADC();
80002c9c:	f0 1f 00 15 	mcall	80002cf0 <ownADC+0x58>

	// Read light, 2 MSB msg[2], 8 LSB msg[3]
	light = (((UINT16)nFrame[0x00F & ownId].mssg[2]) << 8 ) | nFrame[0x00F & ownId].mssg[3];
80002ca0:	49 58       	lddpc	r8,80002cf4 <ownADC+0x5c>
80002ca2:	90 88       	ld.uh	r8,r8[0x0]
80002ca4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002ca8:	49 49       	lddpc	r9,80002cf8 <ownADC+0x60>
80002caa:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002cae:	f2 08 00 1a 	add	r10,r9,r8<<0x1
80002cb2:	15 c6       	ld.ub	r6,r10[0x4]
80002cb4:	15 d9       	ld.ub	r9,r10[0x5]
80002cb6:	f3 e6 10 86 	or	r6,r9,r6<<0x8
	
	// Read temp, 2 MSB msg[0], 8 LSB msg[1]
	temper = (((UINT16)nFrame[0x00F & ownId].mssg[0]) << 8 ) | nFrame[0x00F & ownId].mssg[1];
80002cba:	15 a5       	ld.ub	r5,r10[0x2]
80002cbc:	15 b8       	ld.ub	r8,r10[0x3]
80002cbe:	f1 e5 10 85 	or	r5,r8,r5<<0x8
	
	dip204_set_cursor_position(6, 2);
80002cc2:	30 2b       	mov	r11,2
80002cc4:	30 6c       	mov	r12,6
80002cc6:	f0 1f 00 0e 	mcall	80002cfc <ownADC+0x64>
	dip204_printf_string("%d", light);
80002cca:	48 e7       	lddpc	r7,80002d00 <ownADC+0x68>
80002ccc:	5c 76       	castu.h	r6
80002cce:	1a d6       	st.w	--sp,r6
80002cd0:	0e 9c       	mov	r12,r7
80002cd2:	f0 1f 00 0d 	mcall	80002d04 <ownADC+0x6c>
	dip204_set_cursor_position(6, 3);
80002cd6:	30 3b       	mov	r11,3
80002cd8:	30 6c       	mov	r12,6
80002cda:	f0 1f 00 09 	mcall	80002cfc <ownADC+0x64>
	dip204_printf_string("%d", temper);
80002cde:	5c 75       	castu.h	r5
80002ce0:	1a d5       	st.w	--sp,r5
80002ce2:	0e 9c       	mov	r12,r7
80002ce4:	f0 1f 00 08 	mcall	80002d04 <ownADC+0x6c>
80002ce8:	2f ed       	sub	sp,-8

}
80002cea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002cee:	00 00       	add	r0,r0
80002cf0:	80 00       	ld.sh	r0,r0[0x0]
80002cf2:	2c 30       	sub	r0,-61
80002cf4:	00 00       	add	r0,r0
80002cf6:	00 08       	add	r8,r0
80002cf8:	00 00       	add	r0,r0
80002cfa:	06 74       	tst	r4,r3
80002cfc:	80 00       	ld.sh	r0,r0[0x0]
80002cfe:	30 64       	mov	r4,6
80002d00:	80 00       	ld.sh	r0,r0[0x0]
80002d02:	94 ac       	ld.uh	r12,r10[0x4]
80002d04:	80 00       	ld.sh	r0,r0[0x0]
80002d06:	2f cc       	sub	r12,-4

80002d08 <main>:
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) {
80002d08:	d4 31       	pushm	r0-r7,lr
80002d0a:	20 3d       	sub	sp,12
	
	initBoard();
80002d0c:	f0 1f 00 38 	mcall	80002dec <main+0xe4>

	UINT16 Mask = 0xFFF0; 
	UINT16 flt = 0x1200;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
80002d10:	e0 68 12 00 	mov	r8,4608
80002d14:	ba 08       	st.h	sp[0x0],r8
80002d16:	ba 18       	st.h	sp[0x2],r8
80002d18:	ba 28       	st.h	sp[0x4],r8
80002d1a:	ba 38       	st.h	sp[0x6],r8
80002d1c:	ba 48       	st.h	sp[0x8],r8
80002d1e:	ba 58       	st.h	sp[0xa],r8
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);
80002d20:	1a 99       	mov	r9,sp
80002d22:	e0 6a ff f0 	mov	r10,65520
80002d26:	30 7b       	mov	r11,7
80002d28:	30 0c       	mov	r12,0
80002d2a:	f0 1f 00 32 	mcall	80002df0 <main+0xe8>

	while(1){

		adc_start(&AVR32_ADC);
80002d2e:	fe 74 3c 00 	mov	r4,-50176

		//Clear memory contents
		ClearMessages(msg);
80002d32:	4b 16       	lddpc	r6,80002df4 <main+0xec>

		//Read any message available
		if(CANRxReady(0)){
80002d34:	30 07       	mov	r7,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002d36:	4b 11       	lddpc	r1,80002df8 <main+0xf0>
80002d38:	4b 13       	lddpc	r3,80002dfc <main+0xf4>
			{					
				nFrame[0x00F & Ident].ID = Ident;
80002d3a:	4b 22       	lddpc	r2,80002e00 <main+0xf8>
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) {
80002d3c:	ec c5 ff f8 	sub	r5,r6,-8
		}

		if(CANTxReady(0))
		{
			//readADC();
			CANSendMsg(0, ownId, nFrame[0x00F & ownId].mssg, 8, 0);
80002d40:	4b 10       	lddpc	r0,80002e04 <main+0xfc>
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);

	while(1){

		adc_start(&AVR32_ADC);
80002d42:	08 9c       	mov	r12,r4
80002d44:	f0 1f 00 31 	mcall	80002e08 <main+0x100>

		//Clear memory contents
		ClearMessages(msg);
80002d48:	0c 9c       	mov	r12,r6
80002d4a:	f0 1f 00 31 	mcall	80002e0c <main+0x104>

		//Read any message available
		if(CANRxReady(0)){
80002d4e:	0e 9c       	mov	r12,r7
80002d50:	f0 1f 00 30 	mcall	80002e10 <main+0x108>
80002d54:	c1 50       	breq	80002d7e <main+0x76>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002d56:	02 99       	mov	r9,r1
80002d58:	0c 9a       	mov	r10,r6
80002d5a:	06 9b       	mov	r11,r3
80002d5c:	0e 9c       	mov	r12,r7
80002d5e:	f0 1f 00 2e 	mcall	80002e14 <main+0x10c>
80002d62:	c0 e0       	breq	80002d7e <main+0x76>
			{					
				nFrame[0x00F & Ident].ID = Ident;
80002d64:	66 08       	ld.w	r8,r3[0x0]
80002d66:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80002d6a:	f2 09 00 29 	add	r9,r9,r9<<0x2
80002d6e:	e4 09 00 19 	add	r9,r2,r9<<0x1
80002d72:	12 b8       	st.h	r9++,r8
80002d74:	0c 98       	mov	r8,r6

				//Adding frame to the struct
				for(int i = 0; i < 8; ++i)
				{
					nFrame[0x00F & Ident].mssg[i] = msg[i];
80002d76:	11 3a       	ld.ub	r10,r8++
80002d78:	12 ca       	st.b	r9++,r10
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
			{					
				nFrame[0x00F & Ident].ID = Ident;

				//Adding frame to the struct
				for(int i = 0; i < 8; ++i)
80002d7a:	0a 38       	cp.w	r8,r5
80002d7c:	cf d1       	brne	80002d76 <main+0x6e>
					nFrame[0x00F & Ident].mssg[i] = msg[i];
				}
			}
		}

		if(CANTxReady(0))
80002d7e:	0e 9c       	mov	r12,r7
80002d80:	f0 1f 00 26 	mcall	80002e18 <main+0x110>
80002d84:	c2 60       	breq	80002dd0 <main+0xc8>
		{
			//readADC();
			CANSendMsg(0, ownId, nFrame[0x00F & ownId].mssg, 8, 0);
80002d86:	80 8b       	ld.uh	r11,r0[0x0]
80002d88:	f5 db c0 04 	bfextu	r10,r11,0x0,0x4
80002d8c:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80002d90:	e4 0a 00 1a 	add	r10,r2,r10<<0x1
80002d94:	0e 98       	mov	r8,r7
80002d96:	30 89       	mov	r9,8
80002d98:	2f ea       	sub	r10,-2
80002d9a:	0e 9c       	mov	r12,r7
80002d9c:	f0 1f 00 20 	mcall	80002e1c <main+0x114>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002da0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002da4:	e0 6a 1b 00 	mov	r10,6912
80002da8:	ea 1a 00 b7 	orh	r10,0xb7
80002dac:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002db0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002db4:	14 38       	cp.w	r8,r10
80002db6:	e0 88 00 08 	brls	80002dc6 <main+0xbe>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002dba:	12 38       	cp.w	r8,r9
80002dbc:	fe 98 ff fa 	brls	80002db0 <main+0xa8>
80002dc0:	12 3a       	cp.w	r10,r9
80002dc2:	c0 73       	brcs	80002dd0 <main+0xc8>
80002dc4:	cf 6b       	rjmp	80002db0 <main+0xa8>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc6:	12 38       	cp.w	r8,r9
80002dc8:	e0 8b 00 04 	brhi	80002dd0 <main+0xc8>
80002dcc:	12 3a       	cp.w	r10,r9
80002dce:	cf 12       	brcc	80002db0 <main+0xa8>
			delay_ms(1000);
		}
		
		dip204_clear_display();
80002dd0:	f0 1f 00 14 	mcall	80002e20 <main+0x118>
		printLCD();
80002dd4:	f0 1f 00 14 	mcall	80002e24 <main+0x11c>
		ownADC();
80002dd8:	f0 1f 00 14 	mcall	80002e28 <main+0x120>
		average();
80002ddc:	f0 1f 00 14 	mcall	80002e2c <main+0x124>
		nodeCount();
80002de0:	f0 1f 00 14 	mcall	80002e30 <main+0x128>
		dip204_hide_cursor();
80002de4:	f0 1f 00 14 	mcall	80002e34 <main+0x12c>
		
		
	}
80002de8:	ca db       	rjmp	80002d42 <main+0x3a>
80002dea:	00 00       	add	r0,r0
80002dec:	80 00       	ld.sh	r0,r0[0x0]
80002dee:	2a 68       	sub	r8,-90
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	27 08       	sub	r8,112
80002df4:	00 00       	add	r0,r0
80002df6:	06 64       	and	r4,r3
80002df8:	00 00       	add	r0,r0
80002dfa:	06 6c       	and	r12,r3
80002dfc:	00 00       	add	r0,r0
80002dfe:	06 70       	tst	r0,r3
80002e00:	00 00       	add	r0,r0
80002e02:	06 74       	tst	r4,r3
80002e04:	00 00       	add	r0,r0
80002e06:	00 08       	add	r8,r0
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	20 08       	sub	r8,0
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	21 6c       	sub	r12,22
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	22 f0       	sub	r0,47
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	28 98       	sub	r8,-119
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	23 04       	sub	r4,48
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	27 60       	sub	r0,118
80002e20:	80 00       	ld.sh	r0,r0[0x0]
80002e22:	30 f0       	mov	r0,15
80002e24:	80 00       	ld.sh	r0,r0[0x0]
80002e26:	2b 24       	sub	r4,-78
80002e28:	80 00       	ld.sh	r0,r0[0x0]
80002e2a:	2c 98       	sub	r8,-55
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	2b a8       	sub	r8,-70
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	2a 18       	sub	r8,-95
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	30 c0       	mov	r0,12

80002e38 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002e38:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002e3c:	49 18       	lddpc	r8,80002e80 <LED_On+0x48>
80002e3e:	70 09       	ld.w	r9,r8[0x0]
80002e40:	f9 e9 10 09 	or	r9,r12,r9
80002e44:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002e46:	58 0c       	cp.w	r12,0
80002e48:	5e 0c       	reteq	r12
80002e4a:	48 f8       	lddpc	r8,80002e84 <LED_On+0x4c>
80002e4c:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002e4e:	18 9a       	mov	r10,r12
80002e50:	5c 9a       	brev	r10
80002e52:	f4 0a 12 00 	clz	r10,r10
80002e56:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002e58:	f4 09 15 04 	lsl	r9,r10,0x4
80002e5c:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002e5e:	70 09       	ld.w	r9,r8[0x0]
80002e60:	a9 69       	lsl	r9,0x8
80002e62:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002e66:	70 1b       	ld.w	r11,r8[0x4]
80002e68:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002e6c:	70 1b       	ld.w	r11,r8[0x4]
80002e6e:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002e72:	70 1b       	ld.w	r11,r8[0x4]
80002e74:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002e76:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002e7a:	ce a1       	brne	80002e4e <LED_On+0x16>
80002e7c:	5e fc       	retal	r12
80002e7e:	00 00       	add	r0,r0
80002e80:	00 00       	add	r0,r0
80002e82:	00 0c       	add	r12,r0
80002e84:	80 00       	ld.sh	r0,r0[0x0]
80002e86:	94 b0       	ld.uh	r0,r10[0x6]

80002e88 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002e88:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002e8c:	49 28       	lddpc	r8,80002ed4 <LED_Off+0x4c>
80002e8e:	70 09       	ld.w	r9,r8[0x0]
80002e90:	f8 0a 11 ff 	rsub	r10,r12,-1
80002e94:	f5 e9 00 09 	and	r9,r10,r9
80002e98:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002e9a:	58 0c       	cp.w	r12,0
80002e9c:	5e 0c       	reteq	r12
80002e9e:	48 f8       	lddpc	r8,80002ed8 <LED_Off+0x50>
80002ea0:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002ea2:	18 9a       	mov	r10,r12
80002ea4:	5c 9a       	brev	r10
80002ea6:	f4 0a 12 00 	clz	r10,r10
80002eaa:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002eac:	f4 09 15 04 	lsl	r9,r10,0x4
80002eb0:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002eb2:	70 09       	ld.w	r9,r8[0x0]
80002eb4:	a9 69       	lsl	r9,0x8
80002eb6:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002eba:	70 1b       	ld.w	r11,r8[0x4]
80002ebc:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002ec0:	70 1b       	ld.w	r11,r8[0x4]
80002ec2:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002ec6:	70 1b       	ld.w	r11,r8[0x4]
80002ec8:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002eca:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002ece:	ce a1       	brne	80002ea2 <LED_Off+0x1a>
80002ed0:	5e fc       	retal	r12
80002ed2:	00 00       	add	r0,r0
80002ed4:	00 00       	add	r0,r0
80002ed6:	00 0c       	add	r12,r0
80002ed8:	80 00       	ld.sh	r0,r0[0x0]
80002eda:	94 b0       	ld.uh	r0,r10[0x6]

80002edc <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002edc:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002ede:	30 2b       	mov	r11,2
80002ee0:	fe 7c 28 00 	mov	r12,-55296
80002ee4:	f0 1f 00 02 	mcall	80002eec <dip204_select+0x10>
}
80002ee8:	d8 02       	popm	pc
80002eea:	00 00       	add	r0,r0
80002eec:	80 00       	ld.sh	r0,r0[0x0]
80002eee:	37 5e       	mov	lr,117

80002ef0 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002ef0:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002ef4:	f8 c8 ff f8 	sub	r8,r12,-8
80002ef8:	30 69       	mov	r9,6
80002efa:	f2 08 18 00 	cp.b	r8,r9
80002efe:	e0 8b 00 0f 	brhi	80002f1c <dip204_write_byte+0x2c>
80002f02:	30 19       	mov	r9,1
80002f04:	f2 08 09 48 	lsl	r8,r9,r8
80002f08:	e2 18 00 55 	andl	r8,0x55,COH
80002f0c:	c0 80       	breq	80002f1c <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002f0e:	18 9b       	mov	r11,r12
80002f10:	fe 7c 28 00 	mov	r12,-55296
80002f14:	f0 1f 00 0c 	mcall	80002f44 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002f18:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002f1c:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002f1e:	f8 07 16 18 	lsr	r7,r12,0x18
80002f22:	0e 9b       	mov	r11,r7
80002f24:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002f28:	fe 7c 28 00 	mov	r12,-55296
80002f2c:	f0 1f 00 06 	mcall	80002f44 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002f30:	ee 0b 15 04 	lsl	r11,r7,0x4
80002f34:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002f38:	fe 7c 28 00 	mov	r12,-55296
80002f3c:	f0 1f 00 02 	mcall	80002f44 <dip204_write_byte+0x54>
80002f40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	38 8e       	mov	lr,-120

80002f48 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002f48:	eb cd 40 c0 	pushm	r6-r7,lr
80002f4c:	20 1d       	sub	sp,4
80002f4e:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002f50:	fa c7 ff fc 	sub	r7,sp,-4
80002f54:	30 08       	mov	r8,0
80002f56:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002f58:	30 0b       	mov	r11,0
80002f5a:	fe 7c 28 00 	mov	r12,-55296
80002f5e:	f0 1f 00 08 	mcall	80002f7c <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002f62:	0e 9b       	mov	r11,r7
80002f64:	fe 7c 28 00 	mov	r12,-55296
80002f68:	f0 1f 00 06 	mcall	80002f80 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002f6c:	1b b8       	ld.ub	r8,sp[0x3]
80002f6e:	5c 98       	brev	r8
80002f70:	b9 88       	lsr	r8,0x18
80002f72:	ac 88       	st.b	r6[0x0],r8
}
80002f74:	2f fd       	sub	sp,-4
80002f76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002f7a:	00 00       	add	r0,r0
80002f7c:	80 00       	ld.sh	r0,r0[0x0]
80002f7e:	38 8e       	mov	lr,-120
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	38 b2       	mov	r2,-117

80002f84 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002f84:	eb cd 40 c0 	pushm	r6-r7,lr
80002f88:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002f8a:	fa c7 ff fc 	sub	r7,sp,-4
80002f8e:	30 08       	mov	r8,0
80002f90:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002f92:	e0 6c 00 fc 	mov	r12,252
80002f96:	f0 1f 00 07 	mcall	80002fb0 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002f9a:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002f9c:	0e 9c       	mov	r12,r7
80002f9e:	f0 1f 00 06 	mcall	80002fb4 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002fa2:	1b b8       	ld.ub	r8,sp[0x3]
80002fa4:	ec 08 18 00 	cp.b	r8,r6
80002fa8:	cf a5       	brlt	80002f9c <dip204_wait_busy+0x18>
}
80002faa:	2f fd       	sub	sp,-4
80002fac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	2e f0       	sub	r0,-17
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	2f 48       	sub	r8,-12

80002fb8 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002fb8:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002fba:	30 2b       	mov	r11,2
80002fbc:	fe 7c 28 00 	mov	r12,-55296
80002fc0:	f0 1f 00 02 	mcall	80002fc8 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002fc4:	d8 02       	popm	pc
80002fc6:	00 00       	add	r0,r0
80002fc8:	80 00       	ld.sh	r0,r0[0x0]
80002fca:	37 aa       	mov	r10,122

80002fcc <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002fcc:	d4 21       	pushm	r4-r7,lr
80002fce:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002fd0:	fa ca ff d4 	sub	r10,sp,-44
80002fd4:	18 9b       	mov	r11,r12
80002fd6:	1a 9c       	mov	r12,sp
80002fd8:	f0 1f 00 1e 	mcall	80003050 <dip204_printf_string+0x84>
80002fdc:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002fde:	31 38       	mov	r8,19
80002fe0:	f0 0c 18 00 	cp.b	r12,r8
80002fe4:	e0 8b 00 0e 	brhi	80003000 <dip204_printf_string+0x34>
80002fe8:	30 0a       	mov	r10,0
80002fea:	31 49       	mov	r9,20
80002fec:	fa c8 ff e8 	sub	r8,sp,-24
80002ff0:	18 08       	add	r8,r12
80002ff2:	f1 6a ff e8 	st.b	r8[-24],r10
80002ff6:	2f fc       	sub	r12,-1
80002ff8:	5c 5c       	castu.b	r12
80002ffa:	f2 0c 18 00 	cp.b	r12,r9
80002ffe:	cf 71       	brne	80002fec <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80003000:	f0 1f 00 15 	mcall	80003054 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003004:	30 08       	mov	r8,0
80003006:	1b 89       	ld.ub	r9,sp[0x0]
80003008:	f0 09 18 00 	cp.b	r9,r8
8000300c:	c1 e0       	breq	80003048 <dip204_printf_string+0x7c>
8000300e:	30 06       	mov	r6,0
80003010:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003012:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003016:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003018:	08 9c       	mov	r12,r4
8000301a:	f0 1f 00 10 	mcall	80003058 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000301e:	fa c8 ff e8 	sub	r8,sp,-24
80003022:	f0 06 00 06 	add	r6,r8,r6
80003026:	ed 3c ff e8 	ld.ub	r12,r6[-24]
8000302a:	f0 1f 00 0c 	mcall	80003058 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000302e:	2f f7       	sub	r7,-1
80003030:	5c 57       	castu.b	r7
    dip204_wait_busy();
80003032:	f0 1f 00 0b 	mcall	8000305c <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003036:	0e 96       	mov	r6,r7
80003038:	fa c8 ff e8 	sub	r8,sp,-24
8000303c:	0e 08       	add	r8,r7
8000303e:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80003042:	ea 08 18 00 	cp.b	r8,r5
80003046:	ce 91       	brne	80003018 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80003048:	f0 1f 00 06 	mcall	80003060 <dip204_printf_string+0x94>
}
8000304c:	2f ad       	sub	sp,-24
8000304e:	d8 22       	popm	r4-r7,pc
80003050:	80 00       	ld.sh	r0,r0[0x0]
80003052:	3a 88       	mov	r8,-88
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	2e dc       	sub	r12,-19
80003058:	80 00       	ld.sh	r0,r0[0x0]
8000305a:	2e f0       	sub	r0,-17
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	2f 84       	sub	r4,-8
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	2f b8       	sub	r8,-5

80003064 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80003064:	eb cd 40 c0 	pushm	r6-r7,lr
80003068:	18 96       	mov	r6,r12
8000306a:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
8000306c:	f0 1f 00 11 	mcall	800030b0 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80003070:	31 48       	mov	r8,20
80003072:	f0 06 18 00 	cp.b	r6,r8
80003076:	5f 89       	srls	r9
80003078:	30 48       	mov	r8,4
8000307a:	f0 07 18 00 	cp.b	r7,r8
8000307e:	5f 88       	srls	r8
80003080:	f3 e8 00 08 	and	r8,r9,r8
80003084:	c0 31       	brne	8000308a <dip204_set_cursor_position+0x26>
80003086:	30 06       	mov	r6,0
80003088:	c0 68       	rjmp	80003094 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
8000308a:	28 16       	sub	r6,-127
8000308c:	20 17       	sub	r7,1
8000308e:	a5 77       	lsl	r7,0x5
80003090:	0e 06       	add	r6,r7
80003092:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003094:	e0 6c 00 f8 	mov	r12,248
80003098:	f0 1f 00 07 	mcall	800030b4 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
8000309c:	0c 9c       	mov	r12,r6
8000309e:	f0 1f 00 06 	mcall	800030b4 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
800030a2:	f0 1f 00 06 	mcall	800030b8 <dip204_set_cursor_position+0x54>
  dip204_unselect();
800030a6:	f0 1f 00 06 	mcall	800030bc <dip204_set_cursor_position+0x58>
}
800030aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030ae:	00 00       	add	r0,r0
800030b0:	80 00       	ld.sh	r0,r0[0x0]
800030b2:	2e dc       	sub	r12,-19
800030b4:	80 00       	ld.sh	r0,r0[0x0]
800030b6:	2e f0       	sub	r0,-17
800030b8:	80 00       	ld.sh	r0,r0[0x0]
800030ba:	2f 84       	sub	r4,-8
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	2f b8       	sub	r8,-5

800030c0 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
800030c0:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
800030c2:	f0 1f 00 08 	mcall	800030e0 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800030c6:	e0 6c 00 f8 	mov	r12,248
800030ca:	f0 1f 00 07 	mcall	800030e4 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
800030ce:	30 cc       	mov	r12,12
800030d0:	f0 1f 00 05 	mcall	800030e4 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
800030d4:	f0 1f 00 05 	mcall	800030e8 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
800030d8:	f0 1f 00 05 	mcall	800030ec <dip204_hide_cursor+0x2c>
}
800030dc:	d8 02       	popm	pc
800030de:	00 00       	add	r0,r0
800030e0:	80 00       	ld.sh	r0,r0[0x0]
800030e2:	2e dc       	sub	r12,-19
800030e4:	80 00       	ld.sh	r0,r0[0x0]
800030e6:	2e f0       	sub	r0,-17
800030e8:	80 00       	ld.sh	r0,r0[0x0]
800030ea:	2f 84       	sub	r4,-8
800030ec:	80 00       	ld.sh	r0,r0[0x0]
800030ee:	2f b8       	sub	r8,-5

800030f0 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
800030f0:	d4 01       	pushm	lr
  dip204_select();
800030f2:	f0 1f 00 13 	mcall	8000313c <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800030f6:	e0 6c 00 f8 	mov	r12,248
800030fa:	f0 1f 00 12 	mcall	80003140 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
800030fe:	30 1c       	mov	r12,1
80003100:	f0 1f 00 10 	mcall	80003140 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003104:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003108:	e0 69 bb 80 	mov	r9,48000
8000310c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003110:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003114:	14 38       	cp.w	r8,r10
80003116:	e0 88 00 08 	brls	80003126 <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000311a:	12 38       	cp.w	r8,r9
8000311c:	fe 98 ff fa 	brls	80003110 <dip204_clear_display+0x20>
80003120:	12 3a       	cp.w	r10,r9
80003122:	c0 73       	brcs	80003130 <dip204_clear_display+0x40>
80003124:	cf 6b       	rjmp	80003110 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003126:	12 38       	cp.w	r8,r9
80003128:	e0 8b 00 04 	brhi	80003130 <dip204_clear_display+0x40>
8000312c:	12 3a       	cp.w	r10,r9
8000312e:	cf 12       	brcc	80003110 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80003130:	f0 1f 00 05 	mcall	80003144 <dip204_clear_display+0x54>
  dip204_unselect();
80003134:	f0 1f 00 05 	mcall	80003148 <dip204_clear_display+0x58>
}
80003138:	d8 02       	popm	pc
8000313a:	00 00       	add	r0,r0
8000313c:	80 00       	ld.sh	r0,r0[0x0]
8000313e:	2e dc       	sub	r12,-19
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	2e f0       	sub	r0,-17
80003144:	80 00       	ld.sh	r0,r0[0x0]
80003146:	2f 84       	sub	r4,-8
80003148:	80 00       	ld.sh	r0,r0[0x0]
8000314a:	2f b8       	sub	r8,-5

8000314c <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000314c:	eb cd 40 80 	pushm	r7,lr
80003150:	20 4d       	sub	sp,16
80003152:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80003154:	58 1c       	cp.w	r12,1
80003156:	c3 01       	brne	800031b6 <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80003158:	30 69       	mov	r9,6
8000315a:	4f a8       	lddpc	r8,80003340 <dip204_init+0x1f4>
8000315c:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000315e:	30 2b       	mov	r11,2
80003160:	33 2c       	mov	r12,50
80003162:	f0 1f 00 79 	mcall	80003344 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80003166:	30 08       	mov	r8,0
80003168:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
8000316a:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
8000316c:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
8000316e:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80003170:	1a 9c       	mov	r12,sp
80003172:	f0 1f 00 76 	mcall	80003348 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80003176:	58 07       	cp.w	r7,0
80003178:	f9 b7 01 31 	movne	r7,49
8000317c:	f9 b7 00 01 	moveq	r7,1
80003180:	4f 38       	lddpc	r8,8000334c <dip204_init+0x200>
80003182:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80003184:	4f 3b       	lddpc	r11,80003350 <dip204_init+0x204>
80003186:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80003188:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
8000318c:	ab a8       	sbr	r8,0xa
8000318e:	30 89       	mov	r9,8
80003190:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80003194:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80003196:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80003198:	33 28       	mov	r8,50
8000319a:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
8000319c:	30 08       	mov	r8,0
8000319e:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800031a0:	4e 87       	lddpc	r7,80003340 <dip204_init+0x1f4>
800031a2:	6e 0c       	ld.w	r12,r7[0x0]
800031a4:	f0 1f 00 6c 	mcall	80003354 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
800031a8:	6e 08       	ld.w	r8,r7[0x0]
800031aa:	30 1c       	mov	r12,1
800031ac:	f8 08 09 4c 	lsl	r12,r12,r8
800031b0:	f0 1f 00 6a 	mcall	80003358 <dip204_init+0x20c>
800031b4:	c0 a8       	rjmp	800031c8 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
800031b6:	58 0b       	cp.w	r11,0
800031b8:	c0 50       	breq	800031c2 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800031ba:	33 2c       	mov	r12,50
800031bc:	f0 1f 00 68 	mcall	8000335c <dip204_init+0x210>
800031c0:	c0 48       	rjmp	800031c8 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800031c2:	33 2c       	mov	r12,50
800031c4:	f0 1f 00 67 	mcall	80003360 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800031c8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800031cc:	e2 79 a9 80 	mov	r9,240000
800031d0:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031d4:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031d8:	14 38       	cp.w	r8,r10
800031da:	e0 88 00 08 	brls	800031ea <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800031de:	12 38       	cp.w	r8,r9
800031e0:	fe 98 ff fa 	brls	800031d4 <dip204_init+0x88>
800031e4:	12 3a       	cp.w	r10,r9
800031e6:	c6 e3       	brcs	800032c2 <dip204_init+0x176>
800031e8:	cf 6b       	rjmp	800031d4 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800031ea:	12 38       	cp.w	r8,r9
800031ec:	e0 8b 00 6b 	brhi	800032c2 <dip204_init+0x176>
800031f0:	12 3a       	cp.w	r10,r9
800031f2:	c6 83       	brcs	800032c2 <dip204_init+0x176>
800031f4:	cf 0b       	rjmp	800031d4 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800031f6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800031fa:	14 38       	cp.w	r8,r10
800031fc:	e0 88 00 08 	brls	8000320c <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003200:	12 38       	cp.w	r8,r9
80003202:	fe 98 ff fa 	brls	800031f6 <dip204_init+0xaa>
80003206:	12 3a       	cp.w	r10,r9
80003208:	c6 b3       	brcs	800032de <dip204_init+0x192>
8000320a:	cf 6b       	rjmp	800031f6 <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000320c:	12 38       	cp.w	r8,r9
8000320e:	e0 8b 00 68 	brhi	800032de <dip204_init+0x192>
80003212:	12 3a       	cp.w	r10,r9
80003214:	c6 53       	brcs	800032de <dip204_init+0x192>
80003216:	cf 0b       	rjmp	800031f6 <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003218:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000321c:	14 38       	cp.w	r8,r10
8000321e:	e0 88 00 08 	brls	8000322e <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003222:	12 38       	cp.w	r8,r9
80003224:	fe 98 ff fa 	brls	80003218 <dip204_init+0xcc>
80003228:	12 3a       	cp.w	r10,r9
8000322a:	c6 23       	brcs	800032ee <dip204_init+0x1a2>
8000322c:	cf 6b       	rjmp	80003218 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000322e:	12 38       	cp.w	r8,r9
80003230:	e0 8b 00 5f 	brhi	800032ee <dip204_init+0x1a2>
80003234:	12 3a       	cp.w	r10,r9
80003236:	c5 c3       	brcs	800032ee <dip204_init+0x1a2>
80003238:	cf 0b       	rjmp	80003218 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000323a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000323e:	14 38       	cp.w	r8,r10
80003240:	e0 88 00 08 	brls	80003250 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003244:	12 38       	cp.w	r8,r9
80003246:	fe 98 ff fa 	brls	8000323a <dip204_init+0xee>
8000324a:	12 3a       	cp.w	r10,r9
8000324c:	c5 93       	brcs	800032fe <dip204_init+0x1b2>
8000324e:	cf 6b       	rjmp	8000323a <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003250:	12 38       	cp.w	r8,r9
80003252:	e0 8b 00 56 	brhi	800032fe <dip204_init+0x1b2>
80003256:	12 3a       	cp.w	r10,r9
80003258:	c5 33       	brcs	800032fe <dip204_init+0x1b2>
8000325a:	cf 0b       	rjmp	8000323a <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000325c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003260:	14 38       	cp.w	r8,r10
80003262:	e0 88 00 08 	brls	80003272 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003266:	12 38       	cp.w	r8,r9
80003268:	fe 98 ff fa 	brls	8000325c <dip204_init+0x110>
8000326c:	12 3a       	cp.w	r10,r9
8000326e:	c5 03       	brcs	8000330e <dip204_init+0x1c2>
80003270:	cf 6b       	rjmp	8000325c <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003272:	12 38       	cp.w	r8,r9
80003274:	e0 8b 00 4d 	brhi	8000330e <dip204_init+0x1c2>
80003278:	12 3a       	cp.w	r10,r9
8000327a:	c4 a3       	brcs	8000330e <dip204_init+0x1c2>
8000327c:	cf 0b       	rjmp	8000325c <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000327e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003282:	14 38       	cp.w	r8,r10
80003284:	e0 88 00 08 	brls	80003294 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003288:	12 38       	cp.w	r8,r9
8000328a:	fe 98 ff fa 	brls	8000327e <dip204_init+0x132>
8000328e:	12 3a       	cp.w	r10,r9
80003290:	c4 93       	brcs	80003322 <dip204_init+0x1d6>
80003292:	cf 6b       	rjmp	8000327e <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003294:	12 38       	cp.w	r8,r9
80003296:	e0 8b 00 46 	brhi	80003322 <dip204_init+0x1d6>
8000329a:	12 3a       	cp.w	r10,r9
8000329c:	c4 33       	brcs	80003322 <dip204_init+0x1d6>
8000329e:	cf 0b       	rjmp	8000327e <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800032a0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800032a4:	14 38       	cp.w	r8,r10
800032a6:	e0 88 00 08 	brls	800032b6 <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800032aa:	12 38       	cp.w	r8,r9
800032ac:	fe 98 ff fa 	brls	800032a0 <dip204_init+0x154>
800032b0:	12 3a       	cp.w	r10,r9
800032b2:	c4 03       	brcs	80003332 <dip204_init+0x1e6>
800032b4:	cf 6b       	rjmp	800032a0 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800032b6:	12 38       	cp.w	r8,r9
800032b8:	e0 8b 00 3d 	brhi	80003332 <dip204_init+0x1e6>
800032bc:	12 3a       	cp.w	r10,r9
800032be:	c3 a3       	brcs	80003332 <dip204_init+0x1e6>
800032c0:	cf 0b       	rjmp	800032a0 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
800032c2:	f0 1f 00 29 	mcall	80003364 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
800032c6:	e0 6c 00 f8 	mov	r12,248
800032ca:	f0 1f 00 28 	mcall	80003368 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
800032ce:	33 4c       	mov	r12,52
800032d0:	f0 1f 00 26 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032d4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032d8:	f0 ca d1 20 	sub	r10,r8,-12000
800032dc:	c8 db       	rjmp	800031f6 <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800032de:	30 9c       	mov	r12,9
800032e0:	f0 1f 00 22 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032e4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032e8:	f0 ca d1 20 	sub	r10,r8,-12000
800032ec:	c9 6b       	rjmp	80003218 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
800032ee:	33 0c       	mov	r12,48
800032f0:	f0 1f 00 1e 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800032f4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800032f8:	f0 ca d1 20 	sub	r10,r8,-12000
800032fc:	c9 fb       	rjmp	8000323a <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800032fe:	30 fc       	mov	r12,15
80003300:	f0 1f 00 1a 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003304:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003308:	f0 ca d1 20 	sub	r10,r8,-12000
8000330c:	ca 8b       	rjmp	8000325c <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
8000330e:	30 1c       	mov	r12,1
80003310:	f0 1f 00 16 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003314:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003318:	e0 69 ea 60 	mov	r9,60000
8000331c:	f0 09 00 0a 	add	r10,r8,r9
80003320:	ca fb       	rjmp	8000327e <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80003322:	30 6c       	mov	r12,6
80003324:	f0 1f 00 11 	mcall	80003368 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003328:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000332c:	f0 ca d1 20 	sub	r10,r8,-12000
80003330:	cb 8b       	rjmp	800032a0 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80003332:	f0 1f 00 0f 	mcall	8000336c <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80003336:	f0 1f 00 0f 	mcall	80003370 <dip204_init+0x224>
}
8000333a:	2f cd       	sub	sp,-16
8000333c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003340:	00 00       	add	r0,r0
80003342:	00 10       	sub	r0,r0
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	33 74       	mov	r4,55
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	36 94       	mov	r4,105
8000334c:	00 00       	add	r0,r0
8000334e:	05 38       	ld.ub	r8,r2++
80003350:	00 00       	add	r0,r0
80003352:	05 18       	ld.sh	r8,r2++
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	36 4c       	mov	r12,100
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	36 82       	mov	r2,104
8000335c:	80 00       	ld.sh	r0,r0[0x0]
8000335e:	34 14       	mov	r4,65
80003360:	80 00       	ld.sh	r0,r0[0x0]
80003362:	33 f8       	mov	r8,63
80003364:	80 00       	ld.sh	r0,r0[0x0]
80003366:	2e dc       	sub	r12,-19
80003368:	80 00       	ld.sh	r0,r0[0x0]
8000336a:	2e f0       	sub	r0,-17
8000336c:	80 00       	ld.sh	r0,r0[0x0]
8000336e:	2f 84       	sub	r4,-8
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	2f b8       	sub	r8,-5

80003374 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003374:	f8 08 16 05 	lsr	r8,r12,0x5
80003378:	a9 68       	lsl	r8,0x8
8000337a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000337e:	58 1b       	cp.w	r11,1
80003380:	c0 d0       	breq	8000339a <gpio_enable_module_pin+0x26>
80003382:	c0 63       	brcs	8000338e <gpio_enable_module_pin+0x1a>
80003384:	58 2b       	cp.w	r11,2
80003386:	c1 00       	breq	800033a6 <gpio_enable_module_pin+0x32>
80003388:	58 3b       	cp.w	r11,3
8000338a:	c1 40       	breq	800033b2 <gpio_enable_module_pin+0x3e>
8000338c:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000338e:	30 19       	mov	r9,1
80003390:	f2 0c 09 49 	lsl	r9,r9,r12
80003394:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003396:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003398:	c1 28       	rjmp	800033bc <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000339a:	30 19       	mov	r9,1
8000339c:	f2 0c 09 49 	lsl	r9,r9,r12
800033a0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800033a2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800033a4:	c0 c8       	rjmp	800033bc <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800033a6:	30 19       	mov	r9,1
800033a8:	f2 0c 09 49 	lsl	r9,r9,r12
800033ac:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800033ae:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800033b0:	c0 68       	rjmp	800033bc <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800033b2:	30 19       	mov	r9,1
800033b4:	f2 0c 09 49 	lsl	r9,r9,r12
800033b8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800033ba:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800033bc:	30 19       	mov	r9,1
800033be:	f2 0c 09 4c 	lsl	r12,r9,r12
800033c2:	91 2c       	st.w	r8[0x8],r12
800033c4:	5e fd       	retal	0
800033c6:	d7 03       	nop

800033c8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800033c8:	d4 21       	pushm	r4-r7,lr
800033ca:	18 97       	mov	r7,r12
800033cc:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800033ce:	58 0b       	cp.w	r11,0
800033d0:	c0 31       	brne	800033d6 <gpio_enable_module+0xe>
800033d2:	30 05       	mov	r5,0
800033d4:	c0 d8       	rjmp	800033ee <gpio_enable_module+0x26>
800033d6:	30 06       	mov	r6,0
800033d8:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800033da:	6e 1b       	ld.w	r11,r7[0x4]
800033dc:	6e 0c       	ld.w	r12,r7[0x0]
800033de:	f0 1f 00 06 	mcall	800033f4 <gpio_enable_module+0x2c>
800033e2:	18 45       	or	r5,r12
		gpiomap++;
800033e4:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800033e6:	2f f6       	sub	r6,-1
800033e8:	0c 34       	cp.w	r4,r6
800033ea:	fe 9b ff f8 	brhi	800033da <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800033ee:	0a 9c       	mov	r12,r5
800033f0:	d8 22       	popm	r4-r7,pc
800033f2:	00 00       	add	r0,r0
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	33 74       	mov	r4,55

800033f8 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033f8:	f8 08 16 05 	lsr	r8,r12,0x5
800033fc:	a9 68       	lsl	r8,0x8
800033fe:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003402:	30 19       	mov	r9,1
80003404:	f2 0c 09 4c 	lsl	r12,r9,r12
80003408:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000340c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003410:	91 1c       	st.w	r8[0x4],r12
}
80003412:	5e fc       	retal	r12

80003414 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003414:	f8 08 16 05 	lsr	r8,r12,0x5
80003418:	a9 68       	lsl	r8,0x8
8000341a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000341e:	30 19       	mov	r9,1
80003420:	f2 0c 09 4c 	lsl	r12,r9,r12
80003424:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003428:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000342c:	91 1c       	st.w	r8[0x4],r12
}
8000342e:	5e fc       	retal	r12

80003430 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003430:	c0 08       	rjmp	80003430 <_unhandled_interrupt>
80003432:	d7 03       	nop

80003434 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003434:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003438:	49 99       	lddpc	r9,8000349c <INTC_register_interrupt+0x68>
8000343a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000343e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003442:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003444:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003448:	58 0a       	cp.w	r10,0
8000344a:	c0 91       	brne	8000345c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000344c:	49 59       	lddpc	r9,800034a0 <INTC_register_interrupt+0x6c>
8000344e:	49 6a       	lddpc	r10,800034a4 <INTC_register_interrupt+0x70>
80003450:	12 1a       	sub	r10,r9
80003452:	fe 79 08 00 	mov	r9,-63488
80003456:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000345a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
8000345c:	58 1a       	cp.w	r10,1
8000345e:	c0 a1       	brne	80003472 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003460:	49 09       	lddpc	r9,800034a0 <INTC_register_interrupt+0x6c>
80003462:	49 2a       	lddpc	r10,800034a8 <INTC_register_interrupt+0x74>
80003464:	12 1a       	sub	r10,r9
80003466:	bf aa       	sbr	r10,0x1e
80003468:	fe 79 08 00 	mov	r9,-63488
8000346c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003470:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003472:	58 2a       	cp.w	r10,2
80003474:	c0 a1       	brne	80003488 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003476:	48 b9       	lddpc	r9,800034a0 <INTC_register_interrupt+0x6c>
80003478:	48 da       	lddpc	r10,800034ac <INTC_register_interrupt+0x78>
8000347a:	12 1a       	sub	r10,r9
8000347c:	bf ba       	sbr	r10,0x1f
8000347e:	fe 79 08 00 	mov	r9,-63488
80003482:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003486:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003488:	48 69       	lddpc	r9,800034a0 <INTC_register_interrupt+0x6c>
8000348a:	48 aa       	lddpc	r10,800034b0 <INTC_register_interrupt+0x7c>
8000348c:	12 1a       	sub	r10,r9
8000348e:	ea 1a c0 00 	orh	r10,0xc000
80003492:	fe 79 08 00 	mov	r9,-63488
80003496:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000349a:	5e fc       	retal	r12
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	95 30       	st.w	r10[0xc],r0
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	92 00       	ld.sh	r0,r9[0x0]
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	93 04       	st.w	r9[0x0],r4
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	93 12       	st.w	r9[0x4],r2
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	93 20       	st.w	r9[0x8],r0
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	93 2e       	st.w	r9[0x8],lr

800034b4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800034b4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800034b6:	49 18       	lddpc	r8,800034f8 <INTC_init_interrupts+0x44>
800034b8:	e3 b8 00 01 	mtsr	0x4,r8
800034bc:	49 0e       	lddpc	lr,800034fc <INTC_init_interrupts+0x48>
800034be:	30 07       	mov	r7,0
800034c0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800034c2:	49 0c       	lddpc	r12,80003500 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800034c4:	49 05       	lddpc	r5,80003504 <INTC_init_interrupts+0x50>
800034c6:	10 15       	sub	r5,r8
800034c8:	fe 76 08 00 	mov	r6,-63488
800034cc:	c1 08       	rjmp	800034ec <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800034ce:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800034d0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800034d2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800034d4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800034d8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800034da:	10 3a       	cp.w	r10,r8
800034dc:	fe 9b ff fc 	brhi	800034d4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800034e0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800034e4:	2f f7       	sub	r7,-1
800034e6:	2f 8e       	sub	lr,-8
800034e8:	59 47       	cp.w	r7,20
800034ea:	c0 50       	breq	800034f4 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800034ec:	7c 08       	ld.w	r8,lr[0x0]
800034ee:	58 08       	cp.w	r8,0
800034f0:	ce f1       	brne	800034ce <INTC_init_interrupts+0x1a>
800034f2:	cf 7b       	rjmp	800034e0 <INTC_init_interrupts+0x2c>
800034f4:	d8 22       	popm	r4-r7,pc
800034f6:	00 00       	add	r0,r0
800034f8:	80 00       	ld.sh	r0,r0[0x0]
800034fa:	92 00       	ld.sh	r0,r9[0x0]
800034fc:	80 00       	ld.sh	r0,r0[0x0]
800034fe:	95 30       	st.w	r10[0xc],r0
80003500:	80 00       	ld.sh	r0,r0[0x0]
80003502:	34 30       	mov	r0,67
80003504:	80 00       	ld.sh	r0,r0[0x0]
80003506:	93 04       	st.w	r9[0x0],r4

80003508 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003508:	fe 78 08 00 	mov	r8,-63488
8000350c:	e0 69 00 83 	mov	r9,131
80003510:	f2 0c 01 0c 	sub	r12,r9,r12
80003514:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003518:	f2 ca ff c0 	sub	r10,r9,-64
8000351c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003520:	58 08       	cp.w	r8,0
80003522:	c0 21       	brne	80003526 <_get_interrupt_handler+0x1e>
80003524:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003526:	f0 08 12 00 	clz	r8,r8
8000352a:	48 5a       	lddpc	r10,8000353c <_get_interrupt_handler+0x34>
8000352c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003530:	f0 08 11 1f 	rsub	r8,r8,31
80003534:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003536:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000353a:	5e fc       	retal	r12
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	95 30       	st.w	r10[0xc],r0

80003540 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003540:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003542:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003546:	99 a8       	st.w	r12[0x28],r8
}
80003548:	5e fc       	retal	r12
8000354a:	d7 03       	nop

8000354c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000354c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000354e:	ec 5b bb 9f 	cp.w	r11,899999
80003552:	e0 8b 00 04 	brhi	8000355a <pm_enable_osc0_crystal+0xe>
80003556:	30 4b       	mov	r11,4
80003558:	c1 38       	rjmp	8000357e <pm_enable_osc0_crystal+0x32>
8000355a:	e0 68 c6 bf 	mov	r8,50879
8000355e:	ea 18 00 2d 	orh	r8,0x2d
80003562:	10 3b       	cp.w	r11,r8
80003564:	e0 8b 00 04 	brhi	8000356c <pm_enable_osc0_crystal+0x20>
80003568:	30 5b       	mov	r11,5
8000356a:	c0 a8       	rjmp	8000357e <pm_enable_osc0_crystal+0x32>
8000356c:	e0 68 12 00 	mov	r8,4608
80003570:	ea 18 00 7a 	orh	r8,0x7a
80003574:	10 3b       	cp.w	r11,r8
80003576:	f9 bb 03 06 	movlo	r11,6
8000357a:	f9 bb 02 07 	movhs	r11,7
8000357e:	f0 1f 00 02 	mcall	80003584 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003582:	d8 02       	popm	pc
80003584:	80 00       	ld.sh	r0,r0[0x0]
80003586:	35 40       	mov	r0,84

80003588 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003588:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000358a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000358e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003590:	78 08       	ld.w	r8,r12[0x0]
80003592:	a3 a8       	sbr	r8,0x2
80003594:	99 08       	st.w	r12[0x0],r8
}
80003596:	5e fc       	retal	r12

80003598 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80003598:	79 58       	ld.w	r8,r12[0x54]
8000359a:	e2 18 00 80 	andl	r8,0x80,COH
8000359e:	cf d0       	breq	80003598 <pm_wait_for_clk0_ready>
}
800035a0:	5e fc       	retal	r12
800035a2:	d7 03       	nop

800035a4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800035a4:	eb cd 40 80 	pushm	r7,lr
800035a8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800035aa:	f0 1f 00 04 	mcall	800035b8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800035ae:	0e 9c       	mov	r12,r7
800035b0:	f0 1f 00 03 	mcall	800035bc <pm_enable_clk0+0x18>
}
800035b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800035b8:	80 00       	ld.sh	r0,r0[0x0]
800035ba:	35 88       	mov	r8,88
800035bc:	80 00       	ld.sh	r0,r0[0x0]
800035be:	35 98       	mov	r8,89

800035c0 <pm_set_osc32_mode>:
 * \param mode 32-kHz oscillator mode (i.e. AVR32_PM_OSCCTRL32_MODE_x).
 */
static void pm_set_osc32_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
800035c0:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.mode = mode;
800035c2:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
800035c6:	99 c8       	st.w	r12[0x30],r8
}
800035c8:	5e fc       	retal	r12
800035ca:	d7 03       	nop

800035cc <pm_enable_osc32_crystal>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_EXT_CLOCK);
}


void pm_enable_osc32_crystal(volatile avr32_pm_t *pm)
{
800035cc:	d4 01       	pushm	lr
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
800035ce:	30 1b       	mov	r11,1
800035d0:	f0 1f 00 02 	mcall	800035d8 <pm_enable_osc32_crystal+0xc>
}
800035d4:	d8 02       	popm	pc
800035d6:	00 00       	add	r0,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	35 c0       	mov	r0,92

800035dc <pm_enable_clk32_no_wait>:


void pm_enable_clk32_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
800035dc:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.osc32en = 1;
800035de:	30 19       	mov	r9,1
800035e0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_pm_oscctrl32.OSCCTRL32.startup = startup;
800035e4:	f1 db d2 03 	bfins	r8,r11,0x10,0x3
  // Write back
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
800035e8:	99 c8       	st.w	r12[0x30],r8
}
800035ea:	5e fc       	retal	r12

800035ec <pm_wait_for_clk32_ready>:


void pm_wait_for_clk32_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC32RDY_MASK));
800035ec:	79 58       	ld.w	r8,r12[0x54]
800035ee:	e2 18 02 00 	andl	r8,0x200,COH
800035f2:	cf d0       	breq	800035ec <pm_wait_for_clk32_ready>
}
800035f4:	5e fc       	retal	r12
800035f6:	d7 03       	nop

800035f8 <pm_enable_clk32>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
}


void pm_enable_clk32(volatile avr32_pm_t *pm, unsigned int startup)
{
800035f8:	eb cd 40 80 	pushm	r7,lr
800035fc:	18 97       	mov	r7,r12
  pm_enable_clk32_no_wait(pm, startup);
800035fe:	f0 1f 00 04 	mcall	8000360c <pm_enable_clk32+0x14>
  pm_wait_for_clk32_ready(pm);
80003602:	0e 9c       	mov	r12,r7
80003604:	f0 1f 00 03 	mcall	80003610 <pm_enable_clk32+0x18>
}
80003608:	e3 cd 80 80 	ldm	sp++,r7,pc
8000360c:	80 00       	ld.sh	r0,r0[0x0]
8000360e:	35 dc       	mov	r12,93
80003610:	80 00       	ld.sh	r0,r0[0x0]
80003612:	35 ec       	mov	r12,94

80003614 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003614:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003616:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000361a:	99 08       	st.w	r12[0x0],r8
}
8000361c:	5e fc       	retal	r12
8000361e:	d7 03       	nop

80003620 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003620:	eb cd 40 c0 	pushm	r6-r7,lr
80003624:	18 97       	mov	r7,r12
80003626:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003628:	f0 1f 00 06 	mcall	80003640 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000362c:	0c 9b       	mov	r11,r6
8000362e:	0e 9c       	mov	r12,r7
80003630:	f0 1f 00 05 	mcall	80003644 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003634:	30 1b       	mov	r11,1
80003636:	0e 9c       	mov	r12,r7
80003638:	f0 1f 00 04 	mcall	80003648 <pm_switch_to_osc0+0x28>
}
8000363c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	35 4c       	mov	r12,84
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	35 a4       	mov	r4,90
80003648:	80 00       	ld.sh	r0,r0[0x0]
8000364a:	36 14       	mov	r4,97

8000364c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000364c:	58 0b       	cp.w	r11,0
8000364e:	c1 90       	breq	80003680 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003650:	58 6c       	cp.w	r12,6
80003652:	e0 8b 00 17 	brhi	80003680 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003656:	76 0a       	ld.w	r10,r11[0x0]
80003658:	fe 78 30 00 	mov	r8,-53248
8000365c:	f8 c9 ff f0 	sub	r9,r12,-16
80003660:	a5 79       	lsl	r9,0x5
80003662:	f0 09 00 09 	add	r9,r8,r9
80003666:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003668:	76 19       	ld.w	r9,r11[0x4]
8000366a:	a5 7c       	lsl	r12,0x5
8000366c:	f0 0c 00 0c 	add	r12,r8,r12
80003670:	f8 c8 fd fc 	sub	r8,r12,-516
80003674:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003676:	76 28       	ld.w	r8,r11[0x8]
80003678:	f8 cc fd f8 	sub	r12,r12,-520
8000367c:	99 08       	st.w	r12[0x0],r8
8000367e:	5e fd       	retal	0

  return PWM_SUCCESS;
80003680:	5e ff       	retal	1

80003682 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003682:	18 98       	mov	r8,r12
80003684:	e0 18 ff 80 	andl	r8,0xff80
80003688:	c0 20       	breq	8000368c <pwm_start_channels+0xa>
8000368a:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000368c:	fe 78 30 00 	mov	r8,-53248
80003690:	91 1c       	st.w	r8[0x4],r12
80003692:	5e fd       	retal	0

80003694 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003694:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80003698:	58 0c       	cp.w	r12,0
8000369a:	c0 21       	brne	8000369e <pwm_init+0xa>
8000369c:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000369e:	e6 18 00 01 	andh	r8,0x1,COH
800036a2:	c0 91       	brne	800036b4 <pwm_init+0x20>
800036a4:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800036a6:	fe 78 30 00 	mov	r8,-53248
800036aa:	37 f9       	mov	r9,127
800036ac:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800036ae:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800036b0:	d5 03       	csrf	0x10
800036b2:	c0 68       	rjmp	800036be <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800036b4:	fe 78 30 00 	mov	r8,-53248
800036b8:	37 f9       	mov	r9,127
800036ba:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800036bc:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800036be:	78 08       	ld.w	r8,r12[0x0]
800036c0:	78 39       	ld.w	r9,r12[0xc]
800036c2:	a9 69       	lsl	r9,0x8
800036c4:	f3 e8 11 09 	or	r9,r9,r8<<0x10
800036c8:	78 18       	ld.w	r8,r12[0x4]
800036ca:	10 49       	or	r9,r8
800036cc:	78 28       	ld.w	r8,r12[0x8]
800036ce:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800036d2:	fe 78 30 00 	mov	r8,-53248
800036d6:	91 09       	st.w	r8[0x0],r9
800036d8:	5e fd       	retal	0

800036da <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800036da:	f8 c8 00 01 	sub	r8,r12,1
800036de:	f0 0b 00 0b 	add	r11,r8,r11
800036e2:	f6 0c 0d 0a 	divu	r10,r11,r12
800036e6:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800036e8:	f4 c8 00 01 	sub	r8,r10,1
800036ec:	e0 48 00 fe 	cp.w	r8,254
800036f0:	e0 88 00 03 	brls	800036f6 <getBaudDiv+0x1c>
800036f4:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800036f6:	5c 8c       	casts.h	r12
}
800036f8:	5e fc       	retal	r12

800036fa <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800036fa:	f7 39 00 0d 	ld.ub	r9,r11[13]
800036fe:	30 18       	mov	r8,1
80003700:	f0 09 18 00 	cp.b	r9,r8
80003704:	e0 88 00 04 	brls	8000370c <spi_initMaster+0x12>
80003708:	30 2c       	mov	r12,2
8000370a:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000370c:	e0 68 00 80 	mov	r8,128
80003710:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003712:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003714:	30 19       	mov	r9,1
80003716:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000371a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000371e:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003722:	30 09       	mov	r9,0
80003724:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003728:	30 fa       	mov	r10,15
8000372a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000372e:	99 18       	st.w	r12[0x4],r8
80003730:	5e f9       	retal	r9

80003732 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003732:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003734:	30 18       	mov	r8,1
80003736:	f0 0b 18 00 	cp.b	r11,r8
8000373a:	5f be       	srhi	lr
8000373c:	f0 0a 18 00 	cp.b	r10,r8
80003740:	5f b8       	srhi	r8
80003742:	fd e8 10 08 	or	r8,lr,r8
80003746:	c0 30       	breq	8000374c <spi_selectionMode+0x1a>
80003748:	30 2c       	mov	r12,2
8000374a:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000374c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000374e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003752:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003756:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000375a:	99 18       	st.w	r12[0x4],r8
8000375c:	d8 0a       	popm	pc,r12=0

8000375e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000375e:	78 18       	ld.w	r8,r12[0x4]
80003760:	ea 18 00 0f 	orh	r8,0xf
80003764:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003766:	78 18       	ld.w	r8,r12[0x4]
80003768:	e2 18 00 04 	andl	r8,0x4,COH
8000376c:	c0 f0       	breq	8000378a <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000376e:	30 e8       	mov	r8,14
80003770:	f0 0b 18 00 	cp.b	r11,r8
80003774:	e0 8b 00 19 	brhi	800037a6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003778:	78 18       	ld.w	r8,r12[0x4]
8000377a:	b1 6b       	lsl	r11,0x10
8000377c:	ea 1b ff f0 	orh	r11,0xfff0
80003780:	e8 1b ff ff 	orl	r11,0xffff
80003784:	10 6b       	and	r11,r8
80003786:	99 1b       	st.w	r12[0x4],r11
80003788:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000378a:	30 38       	mov	r8,3
8000378c:	f0 0b 18 00 	cp.b	r11,r8
80003790:	e0 8b 00 0b 	brhi	800037a6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003794:	78 18       	ld.w	r8,r12[0x4]
80003796:	2f 0b       	sub	r11,-16
80003798:	30 19       	mov	r9,1
8000379a:	f2 0b 09 4b 	lsl	r11,r9,r11
8000379e:	5c db       	com	r11
800037a0:	10 6b       	and	r11,r8
800037a2:	99 1b       	st.w	r12[0x4],r11
800037a4:	5e fd       	retal	0
800037a6:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800037a8:	5e fc       	retal	r12

800037aa <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800037aa:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800037ae:	c0 58       	rjmp	800037b8 <spi_unselectChip+0xe>
		if (!timeout--) {
800037b0:	58 08       	cp.w	r8,0
800037b2:	c0 21       	brne	800037b6 <spi_unselectChip+0xc>
800037b4:	5e ff       	retal	1
800037b6:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800037b8:	78 49       	ld.w	r9,r12[0x10]
800037ba:	e2 19 02 00 	andl	r9,0x200,COH
800037be:	cf 90       	breq	800037b0 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800037c0:	78 18       	ld.w	r8,r12[0x4]
800037c2:	ea 18 00 0f 	orh	r8,0xf
800037c6:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800037c8:	fc 18 01 00 	movh	r8,0x100
800037cc:	99 08       	st.w	r12[0x0],r8
800037ce:	5e fd       	retal	0

800037d0 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800037d0:	eb cd 40 f8 	pushm	r3-r7,lr
800037d4:	18 95       	mov	r5,r12
800037d6:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800037d8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800037dc:	30 38       	mov	r8,3
800037de:	f0 06 18 00 	cp.b	r6,r8
800037e2:	e0 8b 00 4d 	brhi	8000387c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800037e6:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800037ea:	30 18       	mov	r8,1
800037ec:	f0 04 18 00 	cp.b	r4,r8
800037f0:	e0 8b 00 46 	brhi	8000387c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800037f4:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800037f8:	30 78       	mov	r8,7
800037fa:	f0 03 18 00 	cp.b	r3,r8
800037fe:	e0 88 00 3f 	brls	8000387c <spi_setupChipReg+0xac>
80003802:	31 08       	mov	r8,16
80003804:	f0 03 18 00 	cp.b	r3,r8
80003808:	e0 8b 00 3a 	brhi	8000387c <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000380c:	14 9b       	mov	r11,r10
8000380e:	6e 1c       	ld.w	r12,r7[0x4]
80003810:	f0 1f 00 1d 	mcall	80003884 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003814:	c3 45       	brlt	8000387c <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003816:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003818:	ec 09 16 01 	lsr	r9,r6,0x1
8000381c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003820:	ec 16 00 01 	eorl	r6,0x1
80003824:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003828:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000382c:	20 83       	sub	r3,8
8000382e:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003832:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003836:	ef 39 00 09 	ld.ub	r9,r7[9]
8000383a:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8000383e:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003842:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003846:	0f 89       	ld.ub	r9,r7[0x0]
80003848:	30 1a       	mov	r10,1
8000384a:	f4 09 18 00 	cp.b	r9,r10
8000384e:	c0 e0       	breq	8000386a <spi_setupChipReg+0x9a>
80003850:	c0 a3       	brcs	80003864 <spi_setupChipReg+0x94>
80003852:	30 2a       	mov	r10,2
80003854:	f4 09 18 00 	cp.b	r9,r10
80003858:	c0 c0       	breq	80003870 <spi_setupChipReg+0xa0>
8000385a:	30 3a       	mov	r10,3
8000385c:	f4 09 18 00 	cp.b	r9,r10
80003860:	c0 e1       	brne	8000387c <spi_setupChipReg+0xac>
80003862:	c0 a8       	rjmp	80003876 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003864:	8b c8       	st.w	r5[0x30],r8
80003866:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000386a:	8b d8       	st.w	r5[0x34],r8
8000386c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003870:	8b e8       	st.w	r5[0x38],r8
80003872:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003876:	8b f8       	st.w	r5[0x3c],r8
80003878:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
8000387c:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000387e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003882:	00 00       	add	r0,r0
80003884:	80 00       	ld.sh	r0,r0[0x0]
80003886:	36 da       	mov	r10,109

80003888 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003888:	30 18       	mov	r8,1
8000388a:	99 08       	st.w	r12[0x0],r8
}
8000388c:	5e fc       	retal	r12

8000388e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000388e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003892:	c0 58       	rjmp	8000389c <spi_write+0xe>
		if (!timeout--) {
80003894:	58 08       	cp.w	r8,0
80003896:	c0 21       	brne	8000389a <spi_write+0xc>
80003898:	5e ff       	retal	1
8000389a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000389c:	78 49       	ld.w	r9,r12[0x10]
8000389e:	e2 19 00 02 	andl	r9,0x2,COH
800038a2:	cf 90       	breq	80003894 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800038a4:	5c 7b       	castu.h	r11
800038a6:	99 3b       	st.w	r12[0xc],r11
800038a8:	5e fd       	retal	0

800038aa <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
800038aa:	78 4c       	ld.w	r12,r12[0x10]
}
800038ac:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800038b0:	5e fc       	retal	r12

800038b2 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800038b2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800038b6:	c0 58       	rjmp	800038c0 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800038b8:	58 08       	cp.w	r8,0
800038ba:	c0 21       	brne	800038be <spi_read+0xc>
800038bc:	5e ff       	retal	1
800038be:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800038c0:	78 49       	ld.w	r9,r12[0x10]
800038c2:	e2 19 02 01 	andl	r9,0x201,COH
800038c6:	e0 49 02 01 	cp.w	r9,513
800038ca:	cf 71       	brne	800038b8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800038cc:	78 28       	ld.w	r8,r12[0x8]
800038ce:	b6 08       	st.h	r11[0x0],r8
800038d0:	5e fd       	retal	0
800038d2:	d7 03       	nop

800038d4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800038d4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800038d8:	fe c0 a6 d8 	sub	r0,pc,-22824

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800038dc:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800038e0:	d5 53       	csrf	0x15
  cp      r0, r1
800038e2:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800038e4:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800038e8:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800038ea:	c0 72       	brcc	800038f8 <idata_load_loop_end>
  cp      r0, r1
800038ec:	fe c2 9d 94 	sub	r2,pc,-25196

800038f0 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800038f0:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800038f2:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800038f4:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800038f6:	cf d3       	brcs	800038f0 <idata_load_loop>

800038f8 <idata_load_loop_end>:
  mov     r2, 0
800038f8:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800038fc:	e0 61 07 10 	mov	r1,1808
  cp      r0, r1
  brlo    udata_clear_loop
80003900:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003902:	c0 62       	brcc	8000390e <udata_clear_loop_end>
80003904:	30 02       	mov	r2,0
80003906:	30 03       	mov	r3,0

80003908 <udata_clear_loop>:
80003908:	a1 22       	st.d	r0++,r2
8000390a:	02 30       	cp.w	r0,r1
8000390c:	cf e3       	brcs	80003908 <udata_clear_loop>

8000390e <udata_clear_loop_end>:
8000390e:	fe cf 0c 06 	sub	pc,pc,3078
80003912:	d7 03       	nop

80003914 <memcpy>:
80003914:	58 8a       	cp.w	r10,8
80003916:	c2 f5       	brlt	80003974 <memcpy+0x60>
80003918:	f9 eb 10 09 	or	r9,r12,r11
8000391c:	e2 19 00 03 	andl	r9,0x3,COH
80003920:	e0 81 00 97 	brne	80003a4e <memcpy+0x13a>
80003924:	e0 4a 00 20 	cp.w	r10,32
80003928:	c3 b4       	brge	8000399e <memcpy+0x8a>
8000392a:	f4 08 14 02 	asr	r8,r10,0x2
8000392e:	f0 09 11 08 	rsub	r9,r8,8
80003932:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003936:	76 69       	ld.w	r9,r11[0x18]
80003938:	99 69       	st.w	r12[0x18],r9
8000393a:	76 59       	ld.w	r9,r11[0x14]
8000393c:	99 59       	st.w	r12[0x14],r9
8000393e:	76 49       	ld.w	r9,r11[0x10]
80003940:	99 49       	st.w	r12[0x10],r9
80003942:	76 39       	ld.w	r9,r11[0xc]
80003944:	99 39       	st.w	r12[0xc],r9
80003946:	76 29       	ld.w	r9,r11[0x8]
80003948:	99 29       	st.w	r12[0x8],r9
8000394a:	76 19       	ld.w	r9,r11[0x4]
8000394c:	99 19       	st.w	r12[0x4],r9
8000394e:	76 09       	ld.w	r9,r11[0x0]
80003950:	99 09       	st.w	r12[0x0],r9
80003952:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003956:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000395a:	e0 1a 00 03 	andl	r10,0x3
8000395e:	f4 0a 11 04 	rsub	r10,r10,4
80003962:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003966:	17 a9       	ld.ub	r9,r11[0x2]
80003968:	b0 a9       	st.b	r8[0x2],r9
8000396a:	17 99       	ld.ub	r9,r11[0x1]
8000396c:	b0 99       	st.b	r8[0x1],r9
8000396e:	17 89       	ld.ub	r9,r11[0x0]
80003970:	b0 89       	st.b	r8[0x0],r9
80003972:	5e fc       	retal	r12
80003974:	f4 0a 11 09 	rsub	r10,r10,9
80003978:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000397c:	17 f9       	ld.ub	r9,r11[0x7]
8000397e:	b8 f9       	st.b	r12[0x7],r9
80003980:	17 e9       	ld.ub	r9,r11[0x6]
80003982:	b8 e9       	st.b	r12[0x6],r9
80003984:	17 d9       	ld.ub	r9,r11[0x5]
80003986:	b8 d9       	st.b	r12[0x5],r9
80003988:	17 c9       	ld.ub	r9,r11[0x4]
8000398a:	b8 c9       	st.b	r12[0x4],r9
8000398c:	17 b9       	ld.ub	r9,r11[0x3]
8000398e:	b8 b9       	st.b	r12[0x3],r9
80003990:	17 a9       	ld.ub	r9,r11[0x2]
80003992:	b8 a9       	st.b	r12[0x2],r9
80003994:	17 99       	ld.ub	r9,r11[0x1]
80003996:	b8 99       	st.b	r12[0x1],r9
80003998:	17 89       	ld.ub	r9,r11[0x0]
8000399a:	b8 89       	st.b	r12[0x0],r9
8000399c:	5e fc       	retal	r12
8000399e:	eb cd 40 c0 	pushm	r6-r7,lr
800039a2:	18 99       	mov	r9,r12
800039a4:	22 0a       	sub	r10,32
800039a6:	b7 07       	ld.d	r6,r11++
800039a8:	b3 26       	st.d	r9++,r6
800039aa:	b7 07       	ld.d	r6,r11++
800039ac:	b3 26       	st.d	r9++,r6
800039ae:	b7 07       	ld.d	r6,r11++
800039b0:	b3 26       	st.d	r9++,r6
800039b2:	b7 07       	ld.d	r6,r11++
800039b4:	b3 26       	st.d	r9++,r6
800039b6:	22 0a       	sub	r10,32
800039b8:	cf 74       	brge	800039a6 <memcpy+0x92>
800039ba:	2f 0a       	sub	r10,-16
800039bc:	c0 65       	brlt	800039c8 <memcpy+0xb4>
800039be:	b7 07       	ld.d	r6,r11++
800039c0:	b3 26       	st.d	r9++,r6
800039c2:	b7 07       	ld.d	r6,r11++
800039c4:	b3 26       	st.d	r9++,r6
800039c6:	21 0a       	sub	r10,16
800039c8:	5c 3a       	neg	r10
800039ca:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800039ce:	d7 03       	nop
800039d0:	d7 03       	nop
800039d2:	f7 36 00 0e 	ld.ub	r6,r11[14]
800039d6:	f3 66 00 0e 	st.b	r9[14],r6
800039da:	f7 36 00 0d 	ld.ub	r6,r11[13]
800039de:	f3 66 00 0d 	st.b	r9[13],r6
800039e2:	f7 36 00 0c 	ld.ub	r6,r11[12]
800039e6:	f3 66 00 0c 	st.b	r9[12],r6
800039ea:	f7 36 00 0b 	ld.ub	r6,r11[11]
800039ee:	f3 66 00 0b 	st.b	r9[11],r6
800039f2:	f7 36 00 0a 	ld.ub	r6,r11[10]
800039f6:	f3 66 00 0a 	st.b	r9[10],r6
800039fa:	f7 36 00 09 	ld.ub	r6,r11[9]
800039fe:	f3 66 00 09 	st.b	r9[9],r6
80003a02:	f7 36 00 08 	ld.ub	r6,r11[8]
80003a06:	f3 66 00 08 	st.b	r9[8],r6
80003a0a:	f7 36 00 07 	ld.ub	r6,r11[7]
80003a0e:	f3 66 00 07 	st.b	r9[7],r6
80003a12:	f7 36 00 06 	ld.ub	r6,r11[6]
80003a16:	f3 66 00 06 	st.b	r9[6],r6
80003a1a:	f7 36 00 05 	ld.ub	r6,r11[5]
80003a1e:	f3 66 00 05 	st.b	r9[5],r6
80003a22:	f7 36 00 04 	ld.ub	r6,r11[4]
80003a26:	f3 66 00 04 	st.b	r9[4],r6
80003a2a:	f7 36 00 03 	ld.ub	r6,r11[3]
80003a2e:	f3 66 00 03 	st.b	r9[3],r6
80003a32:	f7 36 00 02 	ld.ub	r6,r11[2]
80003a36:	f3 66 00 02 	st.b	r9[2],r6
80003a3a:	f7 36 00 01 	ld.ub	r6,r11[1]
80003a3e:	f3 66 00 01 	st.b	r9[1],r6
80003a42:	f7 36 00 00 	ld.ub	r6,r11[0]
80003a46:	f3 66 00 00 	st.b	r9[0],r6
80003a4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a4e:	20 1a       	sub	r10,1
80003a50:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003a54:	f8 0a 0b 09 	st.b	r12[r10],r9
80003a58:	cf b1       	brne	80003a4e <memcpy+0x13a>
80003a5a:	5e fc       	retal	r12

80003a5c <_vsprintf_r>:
80003a5c:	d4 01       	pushm	lr
80003a5e:	21 7d       	sub	sp,92
80003a60:	e0 68 ff ff 	mov	r8,65535
80003a64:	ea 18 7f ff 	orh	r8,0x7fff
80003a68:	50 58       	stdsp	sp[0x14],r8
80003a6a:	50 28       	stdsp	sp[0x8],r8
80003a6c:	e0 68 02 08 	mov	r8,520
80003a70:	ba 68       	st.h	sp[0xc],r8
80003a72:	3f f8       	mov	r8,-1
80003a74:	50 4b       	stdsp	sp[0x10],r11
80003a76:	50 0b       	stdsp	sp[0x0],r11
80003a78:	ba 78       	st.h	sp[0xe],r8
80003a7a:	1a 9b       	mov	r11,sp
80003a7c:	ca 8d       	rcall	80003dcc <_vfprintf_r>
80003a7e:	30 09       	mov	r9,0
80003a80:	40 08       	lddsp	r8,sp[0x0]
80003a82:	b0 89       	st.b	r8[0x0],r9
80003a84:	2e 9d       	sub	sp,-92
80003a86:	d8 02       	popm	pc

80003a88 <vsprintf>:
80003a88:	d4 01       	pushm	lr
80003a8a:	e0 68 01 04 	mov	r8,260
80003a8e:	14 99       	mov	r9,r10
80003a90:	16 9a       	mov	r10,r11
80003a92:	18 9b       	mov	r11,r12
80003a94:	70 0c       	ld.w	r12,r8[0x0]
80003a96:	ce 3f       	rcall	80003a5c <_vsprintf_r>
80003a98:	d8 02       	popm	pc
80003a9a:	d7 03       	nop

80003a9c <get_arg>:
80003a9c:	d4 31       	pushm	r0-r7,lr
80003a9e:	20 8d       	sub	sp,32
80003aa0:	fa c4 ff bc 	sub	r4,sp,-68
80003aa4:	50 4b       	stdsp	sp[0x10],r11
80003aa6:	68 2e       	ld.w	lr,r4[0x8]
80003aa8:	50 58       	stdsp	sp[0x14],r8
80003aaa:	12 96       	mov	r6,r9
80003aac:	7c 0b       	ld.w	r11,lr[0x0]
80003aae:	70 05       	ld.w	r5,r8[0x0]
80003ab0:	50 6e       	stdsp	sp[0x18],lr
80003ab2:	58 0b       	cp.w	r11,0
80003ab4:	f4 0b 17 00 	moveq	r11,r10
80003ab8:	68 03       	ld.w	r3,r4[0x0]
80003aba:	68 11       	ld.w	r1,r4[0x4]
80003abc:	40 49       	lddsp	r9,sp[0x10]
80003abe:	30 08       	mov	r8,0
80003ac0:	c2 89       	rjmp	80003d10 <get_arg+0x274>
80003ac2:	2f fb       	sub	r11,-1
80003ac4:	32 5c       	mov	r12,37
80003ac6:	17 8a       	ld.ub	r10,r11[0x0]
80003ac8:	f8 0a 18 00 	cp.b	r10,r12
80003acc:	5f 1e       	srne	lr
80003ace:	f0 0a 18 00 	cp.b	r10,r8
80003ad2:	5f 1c       	srne	r12
80003ad4:	fd ec 00 0c 	and	r12,lr,r12
80003ad8:	f0 0c 18 00 	cp.b	r12,r8
80003adc:	cf 31       	brne	80003ac2 <get_arg+0x26>
80003ade:	58 0a       	cp.w	r10,0
80003ae0:	e0 80 01 25 	breq	80003d2a <get_arg+0x28e>
80003ae4:	30 0c       	mov	r12,0
80003ae6:	3f fa       	mov	r10,-1
80003ae8:	18 90       	mov	r0,r12
80003aea:	50 3a       	stdsp	sp[0xc],r10
80003aec:	18 94       	mov	r4,r12
80003aee:	18 92       	mov	r2,r12
80003af0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003af4:	16 97       	mov	r7,r11
80003af6:	50 7c       	stdsp	sp[0x1c],r12
80003af8:	fe cc a2 4c 	sub	r12,pc,-23988
80003afc:	0f 3a       	ld.ub	r10,r7++
80003afe:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003b02:	40 7c       	lddsp	r12,sp[0x1c]
80003b04:	1c 0c       	add	r12,lr
80003b06:	fe ce a3 22 	sub	lr,pc,-23774
80003b0a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003b0e:	20 1e       	sub	lr,1
80003b10:	50 0e       	stdsp	sp[0x0],lr
80003b12:	fe ce a3 9a 	sub	lr,pc,-23654
80003b16:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003b1a:	50 7c       	stdsp	sp[0x1c],r12
80003b1c:	40 0c       	lddsp	r12,sp[0x0]
80003b1e:	58 7c       	cp.w	r12,7
80003b20:	e0 8b 00 f1 	brhi	80003d02 <get_arg+0x266>
80003b24:	fe ce a5 4c 	sub	lr,pc,-23220
80003b28:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003b2c:	36 8b       	mov	r11,104
80003b2e:	f6 0a 18 00 	cp.b	r10,r11
80003b32:	e0 80 00 e8 	breq	80003d02 <get_arg+0x266>
80003b36:	37 1b       	mov	r11,113
80003b38:	f6 0a 18 00 	cp.b	r10,r11
80003b3c:	c0 70       	breq	80003b4a <get_arg+0xae>
80003b3e:	34 cb       	mov	r11,76
80003b40:	f6 0a 18 00 	cp.b	r10,r11
80003b44:	c0 51       	brne	80003b4e <get_arg+0xb2>
80003b46:	a3 b4       	sbr	r4,0x3
80003b48:	cd d8       	rjmp	80003d02 <get_arg+0x266>
80003b4a:	a5 b4       	sbr	r4,0x5
80003b4c:	cd b8       	rjmp	80003d02 <get_arg+0x266>
80003b4e:	08 9a       	mov	r10,r4
80003b50:	0e 9b       	mov	r11,r7
80003b52:	a5 aa       	sbr	r10,0x4
80003b54:	17 3c       	ld.ub	r12,r11++
80003b56:	a5 b4       	sbr	r4,0x5
80003b58:	36 ce       	mov	lr,108
80003b5a:	fc 0c 18 00 	cp.b	r12,lr
80003b5e:	e0 80 00 d3 	breq	80003d04 <get_arg+0x268>
80003b62:	14 94       	mov	r4,r10
80003b64:	cc f8       	rjmp	80003d02 <get_arg+0x266>
80003b66:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003b6a:	36 7c       	mov	r12,103
80003b6c:	f8 0a 18 00 	cp.b	r10,r12
80003b70:	e0 8b 00 27 	brhi	80003bbe <get_arg+0x122>
80003b74:	36 5b       	mov	r11,101
80003b76:	f6 0a 18 00 	cp.b	r10,r11
80003b7a:	c4 82       	brcc	80003c0a <get_arg+0x16e>
80003b7c:	34 fb       	mov	r11,79
80003b7e:	f6 0a 18 00 	cp.b	r10,r11
80003b82:	c4 80       	breq	80003c12 <get_arg+0x176>
80003b84:	e0 8b 00 0c 	brhi	80003b9c <get_arg+0x100>
80003b88:	34 5b       	mov	r11,69
80003b8a:	f6 0a 18 00 	cp.b	r10,r11
80003b8e:	c3 e0       	breq	80003c0a <get_arg+0x16e>
80003b90:	34 7b       	mov	r11,71
80003b92:	f6 0a 18 00 	cp.b	r10,r11
80003b96:	c3 a0       	breq	80003c0a <get_arg+0x16e>
80003b98:	34 4b       	mov	r11,68
80003b9a:	c0 88       	rjmp	80003baa <get_arg+0x10e>
80003b9c:	35 8b       	mov	r11,88
80003b9e:	f6 0a 18 00 	cp.b	r10,r11
80003ba2:	c2 c0       	breq	80003bfa <get_arg+0x15e>
80003ba4:	e0 8b 00 07 	brhi	80003bb2 <get_arg+0x116>
80003ba8:	35 5b       	mov	r11,85
80003baa:	f6 0a 18 00 	cp.b	r10,r11
80003bae:	c3 51       	brne	80003c18 <get_arg+0x17c>
80003bb0:	c3 18       	rjmp	80003c12 <get_arg+0x176>
80003bb2:	36 3b       	mov	r11,99
80003bb4:	f6 0a 18 00 	cp.b	r10,r11
80003bb8:	c2 f0       	breq	80003c16 <get_arg+0x17a>
80003bba:	36 4b       	mov	r11,100
80003bbc:	c0 e8       	rjmp	80003bd8 <get_arg+0x13c>
80003bbe:	37 0b       	mov	r11,112
80003bc0:	f6 0a 18 00 	cp.b	r10,r11
80003bc4:	c2 50       	breq	80003c0e <get_arg+0x172>
80003bc6:	e0 8b 00 0d 	brhi	80003be0 <get_arg+0x144>
80003bca:	36 eb       	mov	r11,110
80003bcc:	f6 0a 18 00 	cp.b	r10,r11
80003bd0:	c1 f0       	breq	80003c0e <get_arg+0x172>
80003bd2:	e0 8b 00 14 	brhi	80003bfa <get_arg+0x15e>
80003bd6:	36 9b       	mov	r11,105
80003bd8:	f6 0a 18 00 	cp.b	r10,r11
80003bdc:	c1 e1       	brne	80003c18 <get_arg+0x17c>
80003bde:	c0 e8       	rjmp	80003bfa <get_arg+0x15e>
80003be0:	37 5b       	mov	r11,117
80003be2:	f6 0a 18 00 	cp.b	r10,r11
80003be6:	c0 a0       	breq	80003bfa <get_arg+0x15e>
80003be8:	37 8b       	mov	r11,120
80003bea:	f6 0a 18 00 	cp.b	r10,r11
80003bee:	c0 60       	breq	80003bfa <get_arg+0x15e>
80003bf0:	37 3b       	mov	r11,115
80003bf2:	f6 0a 18 00 	cp.b	r10,r11
80003bf6:	c1 11       	brne	80003c18 <get_arg+0x17c>
80003bf8:	c0 b8       	rjmp	80003c0e <get_arg+0x172>
80003bfa:	ed b4 00 04 	bld	r4,0x4
80003bfe:	c0 a0       	breq	80003c12 <get_arg+0x176>
80003c00:	ed b4 00 05 	bld	r4,0x5
80003c04:	c0 91       	brne	80003c16 <get_arg+0x17a>
80003c06:	30 20       	mov	r0,2
80003c08:	c0 88       	rjmp	80003c18 <get_arg+0x17c>
80003c0a:	30 40       	mov	r0,4
80003c0c:	c0 68       	rjmp	80003c18 <get_arg+0x17c>
80003c0e:	30 30       	mov	r0,3
80003c10:	c0 48       	rjmp	80003c18 <get_arg+0x17c>
80003c12:	30 10       	mov	r0,1
80003c14:	c0 28       	rjmp	80003c18 <get_arg+0x17c>
80003c16:	30 00       	mov	r0,0
80003c18:	40 3b       	lddsp	r11,sp[0xc]
80003c1a:	5b fb       	cp.w	r11,-1
80003c1c:	c0 40       	breq	80003c24 <get_arg+0x188>
80003c1e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003c22:	c7 08       	rjmp	80003d02 <get_arg+0x266>
80003c24:	58 60       	cp.w	r0,6
80003c26:	e0 8b 00 6e 	brhi	80003d02 <get_arg+0x266>
80003c2a:	6c 0a       	ld.w	r10,r6[0x0]
80003c2c:	ea cc ff ff 	sub	r12,r5,-1
80003c30:	fe ce a6 38 	sub	lr,pc,-22984
80003c34:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003c38:	f4 cb ff f8 	sub	r11,r10,-8
80003c3c:	8d 0b       	st.w	r6[0x0],r11
80003c3e:	f4 ea 00 00 	ld.d	r10,r10[0]
80003c42:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003c46:	c0 f8       	rjmp	80003c64 <get_arg+0x1c8>
80003c48:	f4 cb ff fc 	sub	r11,r10,-4
80003c4c:	8d 0b       	st.w	r6[0x0],r11
80003c4e:	74 0a       	ld.w	r10,r10[0x0]
80003c50:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003c54:	c0 88       	rjmp	80003c64 <get_arg+0x1c8>
80003c56:	f4 cb ff f8 	sub	r11,r10,-8
80003c5a:	8d 0b       	st.w	r6[0x0],r11
80003c5c:	f4 ea 00 00 	ld.d	r10,r10[0]
80003c60:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003c64:	0e 9b       	mov	r11,r7
80003c66:	18 95       	mov	r5,r12
80003c68:	c4 e8       	rjmp	80003d04 <get_arg+0x268>
80003c6a:	62 0a       	ld.w	r10,r1[0x0]
80003c6c:	5b fa       	cp.w	r10,-1
80003c6e:	c0 b1       	brne	80003c84 <get_arg+0x1e8>
80003c70:	50 19       	stdsp	sp[0x4],r9
80003c72:	50 28       	stdsp	sp[0x8],r8
80003c74:	e0 6a 00 80 	mov	r10,128
80003c78:	30 0b       	mov	r11,0
80003c7a:	02 9c       	mov	r12,r1
80003c7c:	e0 a0 1d 78 	rcall	8000776c <memset>
80003c80:	40 28       	lddsp	r8,sp[0x8]
80003c82:	40 19       	lddsp	r9,sp[0x4]
80003c84:	e4 cc 00 01 	sub	r12,r2,1
80003c88:	0e 9b       	mov	r11,r7
80003c8a:	50 3c       	stdsp	sp[0xc],r12
80003c8c:	f2 0c 0c 49 	max	r9,r9,r12
80003c90:	c3 a8       	rjmp	80003d04 <get_arg+0x268>
80003c92:	62 0a       	ld.w	r10,r1[0x0]
80003c94:	5b fa       	cp.w	r10,-1
80003c96:	c0 b1       	brne	80003cac <get_arg+0x210>
80003c98:	50 19       	stdsp	sp[0x4],r9
80003c9a:	50 28       	stdsp	sp[0x8],r8
80003c9c:	e0 6a 00 80 	mov	r10,128
80003ca0:	30 0b       	mov	r11,0
80003ca2:	02 9c       	mov	r12,r1
80003ca4:	e0 a0 1d 64 	rcall	8000776c <memset>
80003ca8:	40 28       	lddsp	r8,sp[0x8]
80003caa:	40 19       	lddsp	r9,sp[0x4]
80003cac:	20 12       	sub	r2,1
80003cae:	30 0a       	mov	r10,0
80003cb0:	0e 9b       	mov	r11,r7
80003cb2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003cb6:	f2 02 0c 49 	max	r9,r9,r2
80003cba:	c2 58       	rjmp	80003d04 <get_arg+0x268>
80003cbc:	16 97       	mov	r7,r11
80003cbe:	6c 0a       	ld.w	r10,r6[0x0]
80003cc0:	f4 cb ff fc 	sub	r11,r10,-4
80003cc4:	8d 0b       	st.w	r6[0x0],r11
80003cc6:	74 0a       	ld.w	r10,r10[0x0]
80003cc8:	0e 9b       	mov	r11,r7
80003cca:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003cce:	2f f5       	sub	r5,-1
80003cd0:	c1 a8       	rjmp	80003d04 <get_arg+0x268>
80003cd2:	f4 c2 00 30 	sub	r2,r10,48
80003cd6:	c0 68       	rjmp	80003ce2 <get_arg+0x246>
80003cd8:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003cdc:	2f f7       	sub	r7,-1
80003cde:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003ce2:	0f 8a       	ld.ub	r10,r7[0x0]
80003ce4:	58 0a       	cp.w	r10,0
80003ce6:	c0 e0       	breq	80003d02 <get_arg+0x266>
80003ce8:	23 0a       	sub	r10,48
80003cea:	58 9a       	cp.w	r10,9
80003cec:	fe 98 ff f6 	brls	80003cd8 <get_arg+0x23c>
80003cf0:	c0 98       	rjmp	80003d02 <get_arg+0x266>
80003cf2:	2f f7       	sub	r7,-1
80003cf4:	0f 8a       	ld.ub	r10,r7[0x0]
80003cf6:	58 0a       	cp.w	r10,0
80003cf8:	c0 50       	breq	80003d02 <get_arg+0x266>
80003cfa:	23 0a       	sub	r10,48
80003cfc:	58 9a       	cp.w	r10,9
80003cfe:	fe 98 ff fa 	brls	80003cf2 <get_arg+0x256>
80003d02:	0e 9b       	mov	r11,r7
80003d04:	40 7c       	lddsp	r12,sp[0x1c]
80003d06:	30 ba       	mov	r10,11
80003d08:	f4 0c 18 00 	cp.b	r12,r10
80003d0c:	fe 91 fe f2 	brne	80003af0 <get_arg+0x54>
80003d10:	40 42       	lddsp	r2,sp[0x10]
80003d12:	17 8c       	ld.ub	r12,r11[0x0]
80003d14:	0a 32       	cp.w	r2,r5
80003d16:	5f 4a       	srge	r10
80003d18:	f0 0c 18 00 	cp.b	r12,r8
80003d1c:	5f 1c       	srne	r12
80003d1e:	f9 ea 00 0a 	and	r10,r12,r10
80003d22:	f0 0a 18 00 	cp.b	r10,r8
80003d26:	fe 91 fe cf 	brne	80003ac4 <get_arg+0x28>
80003d2a:	30 08       	mov	r8,0
80003d2c:	40 4e       	lddsp	lr,sp[0x10]
80003d2e:	17 8a       	ld.ub	r10,r11[0x0]
80003d30:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003d34:	f0 0a 18 00 	cp.b	r10,r8
80003d38:	fc 09 17 10 	movne	r9,lr
80003d3c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003d40:	06 9e       	mov	lr,r3
80003d42:	c2 a8       	rjmp	80003d96 <get_arg+0x2fa>
80003d44:	62 0a       	ld.w	r10,r1[0x0]
80003d46:	58 3a       	cp.w	r10,3
80003d48:	c1 e0       	breq	80003d84 <get_arg+0x2e8>
80003d4a:	e0 89 00 07 	brgt	80003d58 <get_arg+0x2bc>
80003d4e:	58 1a       	cp.w	r10,1
80003d50:	c1 a0       	breq	80003d84 <get_arg+0x2e8>
80003d52:	58 2a       	cp.w	r10,2
80003d54:	c1 81       	brne	80003d84 <get_arg+0x2e8>
80003d56:	c0 58       	rjmp	80003d60 <get_arg+0x2c4>
80003d58:	58 5a       	cp.w	r10,5
80003d5a:	c0 c0       	breq	80003d72 <get_arg+0x2d6>
80003d5c:	c0 b5       	brlt	80003d72 <get_arg+0x2d6>
80003d5e:	c1 38       	rjmp	80003d84 <get_arg+0x2e8>
80003d60:	6c 0a       	ld.w	r10,r6[0x0]
80003d62:	f4 cc ff f8 	sub	r12,r10,-8
80003d66:	8d 0c       	st.w	r6[0x0],r12
80003d68:	f4 e2 00 00 	ld.d	r2,r10[0]
80003d6c:	f0 e3 00 00 	st.d	r8[0],r2
80003d70:	c1 08       	rjmp	80003d90 <get_arg+0x2f4>
80003d72:	6c 0a       	ld.w	r10,r6[0x0]
80003d74:	f4 cc ff f8 	sub	r12,r10,-8
80003d78:	8d 0c       	st.w	r6[0x0],r12
80003d7a:	f4 e2 00 00 	ld.d	r2,r10[0]
80003d7e:	f0 e3 00 00 	st.d	r8[0],r2
80003d82:	c0 78       	rjmp	80003d90 <get_arg+0x2f4>
80003d84:	6c 0a       	ld.w	r10,r6[0x0]
80003d86:	f4 cc ff fc 	sub	r12,r10,-4
80003d8a:	8d 0c       	st.w	r6[0x0],r12
80003d8c:	74 0a       	ld.w	r10,r10[0x0]
80003d8e:	91 0a       	st.w	r8[0x0],r10
80003d90:	2f f5       	sub	r5,-1
80003d92:	2f 88       	sub	r8,-8
80003d94:	2f c1       	sub	r1,-4
80003d96:	12 35       	cp.w	r5,r9
80003d98:	fe 9a ff d6 	brle	80003d44 <get_arg+0x2a8>
80003d9c:	1c 93       	mov	r3,lr
80003d9e:	40 52       	lddsp	r2,sp[0x14]
80003da0:	40 6e       	lddsp	lr,sp[0x18]
80003da2:	85 05       	st.w	r2[0x0],r5
80003da4:	9d 0b       	st.w	lr[0x0],r11
80003da6:	40 4b       	lddsp	r11,sp[0x10]
80003da8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003dac:	2f 8d       	sub	sp,-32
80003dae:	d8 32       	popm	r0-r7,pc

80003db0 <__sprint_r>:
80003db0:	d4 21       	pushm	r4-r7,lr
80003db2:	14 97       	mov	r7,r10
80003db4:	74 28       	ld.w	r8,r10[0x8]
80003db6:	58 08       	cp.w	r8,0
80003db8:	c0 41       	brne	80003dc0 <__sprint_r+0x10>
80003dba:	95 18       	st.w	r10[0x4],r8
80003dbc:	10 9c       	mov	r12,r8
80003dbe:	d8 22       	popm	r4-r7,pc
80003dc0:	e0 a0 18 b4 	rcall	80006f28 <__sfvwrite_r>
80003dc4:	30 08       	mov	r8,0
80003dc6:	8f 18       	st.w	r7[0x4],r8
80003dc8:	8f 28       	st.w	r7[0x8],r8
80003dca:	d8 22       	popm	r4-r7,pc

80003dcc <_vfprintf_r>:
80003dcc:	d4 31       	pushm	r0-r7,lr
80003dce:	fa cd 06 bc 	sub	sp,sp,1724
80003dd2:	51 09       	stdsp	sp[0x40],r9
80003dd4:	16 91       	mov	r1,r11
80003dd6:	14 97       	mov	r7,r10
80003dd8:	18 95       	mov	r5,r12
80003dda:	e0 a0 1a 1d 	rcall	80007214 <_localeconv_r>
80003dde:	78 0c       	ld.w	r12,r12[0x0]
80003de0:	50 cc       	stdsp	sp[0x30],r12
80003de2:	58 05       	cp.w	r5,0
80003de4:	c0 70       	breq	80003df2 <_vfprintf_r+0x26>
80003de6:	6a 68       	ld.w	r8,r5[0x18]
80003de8:	58 08       	cp.w	r8,0
80003dea:	c0 41       	brne	80003df2 <_vfprintf_r+0x26>
80003dec:	0a 9c       	mov	r12,r5
80003dee:	e0 a0 17 3d 	rcall	80006c68 <__sinit>
80003df2:	fe c8 a4 36 	sub	r8,pc,-23498
80003df6:	10 31       	cp.w	r1,r8
80003df8:	c0 31       	brne	80003dfe <_vfprintf_r+0x32>
80003dfa:	6a 01       	ld.w	r1,r5[0x0]
80003dfc:	c0 c8       	rjmp	80003e14 <_vfprintf_r+0x48>
80003dfe:	fe c8 a4 22 	sub	r8,pc,-23518
80003e02:	10 31       	cp.w	r1,r8
80003e04:	c0 31       	brne	80003e0a <_vfprintf_r+0x3e>
80003e06:	6a 11       	ld.w	r1,r5[0x4]
80003e08:	c0 68       	rjmp	80003e14 <_vfprintf_r+0x48>
80003e0a:	fe c8 a4 0e 	sub	r8,pc,-23538
80003e0e:	10 31       	cp.w	r1,r8
80003e10:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80003e14:	82 68       	ld.sh	r8,r1[0xc]
80003e16:	ed b8 00 03 	bld	r8,0x3
80003e1a:	c0 41       	brne	80003e22 <_vfprintf_r+0x56>
80003e1c:	62 48       	ld.w	r8,r1[0x10]
80003e1e:	58 08       	cp.w	r8,0
80003e20:	c0 71       	brne	80003e2e <_vfprintf_r+0x62>
80003e22:	02 9b       	mov	r11,r1
80003e24:	0a 9c       	mov	r12,r5
80003e26:	e0 a0 0f 5d 	rcall	80005ce0 <__swsetup_r>
80003e2a:	e0 81 0f 54 	brne	80005cd2 <_vfprintf_r+0x1f06>
80003e2e:	82 68       	ld.sh	r8,r1[0xc]
80003e30:	10 99       	mov	r9,r8
80003e32:	e2 19 00 1a 	andl	r9,0x1a,COH
80003e36:	58 a9       	cp.w	r9,10
80003e38:	c3 c1       	brne	80003eb0 <_vfprintf_r+0xe4>
80003e3a:	82 79       	ld.sh	r9,r1[0xe]
80003e3c:	30 0a       	mov	r10,0
80003e3e:	f4 09 19 00 	cp.h	r9,r10
80003e42:	c3 75       	brlt	80003eb0 <_vfprintf_r+0xe4>
80003e44:	a1 d8       	cbr	r8,0x1
80003e46:	fb 58 05 d0 	st.h	sp[1488],r8
80003e4a:	62 88       	ld.w	r8,r1[0x20]
80003e4c:	fb 48 05 e4 	st.w	sp[1508],r8
80003e50:	62 a8       	ld.w	r8,r1[0x28]
80003e52:	fb 48 05 ec 	st.w	sp[1516],r8
80003e56:	fa c8 ff bc 	sub	r8,sp,-68
80003e5a:	fb 48 05 d4 	st.w	sp[1492],r8
80003e5e:	fb 48 05 c4 	st.w	sp[1476],r8
80003e62:	e0 68 04 00 	mov	r8,1024
80003e66:	fb 48 05 d8 	st.w	sp[1496],r8
80003e6a:	fb 48 05 cc 	st.w	sp[1484],r8
80003e6e:	30 08       	mov	r8,0
80003e70:	fb 59 05 d2 	st.h	sp[1490],r9
80003e74:	0e 9a       	mov	r10,r7
80003e76:	41 09       	lddsp	r9,sp[0x40]
80003e78:	fa c7 fa 3c 	sub	r7,sp,-1476
80003e7c:	fb 48 05 dc 	st.w	sp[1500],r8
80003e80:	0a 9c       	mov	r12,r5
80003e82:	0e 9b       	mov	r11,r7
80003e84:	ca 4f       	rcall	80003dcc <_vfprintf_r>
80003e86:	50 bc       	stdsp	sp[0x2c],r12
80003e88:	c0 95       	brlt	80003e9a <_vfprintf_r+0xce>
80003e8a:	0e 9b       	mov	r11,r7
80003e8c:	0a 9c       	mov	r12,r5
80003e8e:	e0 a0 16 15 	rcall	80006ab8 <_fflush_r>
80003e92:	40 be       	lddsp	lr,sp[0x2c]
80003e94:	f9 be 01 ff 	movne	lr,-1
80003e98:	50 be       	stdsp	sp[0x2c],lr
80003e9a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003e9e:	ed b8 00 06 	bld	r8,0x6
80003ea2:	e0 81 0f 1a 	brne	80005cd6 <_vfprintf_r+0x1f0a>
80003ea6:	82 68       	ld.sh	r8,r1[0xc]
80003ea8:	a7 a8       	sbr	r8,0x6
80003eaa:	a2 68       	st.h	r1[0xc],r8
80003eac:	e0 8f 0f 15 	bral	80005cd6 <_vfprintf_r+0x1f0a>
80003eb0:	30 08       	mov	r8,0
80003eb2:	fb 48 06 b4 	st.w	sp[1716],r8
80003eb6:	fb 48 06 90 	st.w	sp[1680],r8
80003eba:	fb 48 06 8c 	st.w	sp[1676],r8
80003ebe:	fb 48 06 b0 	st.w	sp[1712],r8
80003ec2:	30 08       	mov	r8,0
80003ec4:	30 09       	mov	r9,0
80003ec6:	50 a7       	stdsp	sp[0x28],r7
80003ec8:	50 78       	stdsp	sp[0x1c],r8
80003eca:	fa c3 f9 e0 	sub	r3,sp,-1568
80003ece:	3f f8       	mov	r8,-1
80003ed0:	50 59       	stdsp	sp[0x14],r9
80003ed2:	fb 43 06 88 	st.w	sp[1672],r3
80003ed6:	fb 48 05 44 	st.w	sp[1348],r8
80003eda:	12 9c       	mov	r12,r9
80003edc:	50 69       	stdsp	sp[0x18],r9
80003ede:	50 d9       	stdsp	sp[0x34],r9
80003ee0:	50 e9       	stdsp	sp[0x38],r9
80003ee2:	50 b9       	stdsp	sp[0x2c],r9
80003ee4:	12 97       	mov	r7,r9
80003ee6:	0a 94       	mov	r4,r5
80003ee8:	40 a2       	lddsp	r2,sp[0x28]
80003eea:	32 5a       	mov	r10,37
80003eec:	30 08       	mov	r8,0
80003eee:	c0 28       	rjmp	80003ef2 <_vfprintf_r+0x126>
80003ef0:	2f f2       	sub	r2,-1
80003ef2:	05 89       	ld.ub	r9,r2[0x0]
80003ef4:	f0 09 18 00 	cp.b	r9,r8
80003ef8:	5f 1b       	srne	r11
80003efa:	f4 09 18 00 	cp.b	r9,r10
80003efe:	5f 19       	srne	r9
80003f00:	f3 eb 00 0b 	and	r11,r9,r11
80003f04:	f0 0b 18 00 	cp.b	r11,r8
80003f08:	cf 41       	brne	80003ef0 <_vfprintf_r+0x124>
80003f0a:	40 ab       	lddsp	r11,sp[0x28]
80003f0c:	e4 0b 01 06 	sub	r6,r2,r11
80003f10:	c1 e0       	breq	80003f4c <_vfprintf_r+0x180>
80003f12:	fa f8 06 90 	ld.w	r8,sp[1680]
80003f16:	0c 08       	add	r8,r6
80003f18:	87 0b       	st.w	r3[0x0],r11
80003f1a:	fb 48 06 90 	st.w	sp[1680],r8
80003f1e:	87 16       	st.w	r3[0x4],r6
80003f20:	fa f8 06 8c 	ld.w	r8,sp[1676]
80003f24:	2f f8       	sub	r8,-1
80003f26:	fb 48 06 8c 	st.w	sp[1676],r8
80003f2a:	58 78       	cp.w	r8,7
80003f2c:	e0 89 00 04 	brgt	80003f34 <_vfprintf_r+0x168>
80003f30:	2f 83       	sub	r3,-8
80003f32:	c0 a8       	rjmp	80003f46 <_vfprintf_r+0x17a>
80003f34:	fa ca f9 78 	sub	r10,sp,-1672
80003f38:	02 9b       	mov	r11,r1
80003f3a:	08 9c       	mov	r12,r4
80003f3c:	c3 af       	rcall	80003db0 <__sprint_r>
80003f3e:	e0 81 0e c6 	brne	80005cca <_vfprintf_r+0x1efe>
80003f42:	fa c3 f9 e0 	sub	r3,sp,-1568
80003f46:	40 ba       	lddsp	r10,sp[0x2c]
80003f48:	0c 0a       	add	r10,r6
80003f4a:	50 ba       	stdsp	sp[0x2c],r10
80003f4c:	05 89       	ld.ub	r9,r2[0x0]
80003f4e:	30 08       	mov	r8,0
80003f50:	f0 09 18 00 	cp.b	r9,r8
80003f54:	e0 80 0e aa 	breq	80005ca8 <_vfprintf_r+0x1edc>
80003f58:	30 09       	mov	r9,0
80003f5a:	fb 68 06 bb 	st.b	sp[1723],r8
80003f5e:	0e 96       	mov	r6,r7
80003f60:	e4 c8 ff ff 	sub	r8,r2,-1
80003f64:	3f fe       	mov	lr,-1
80003f66:	50 93       	stdsp	sp[0x24],r3
80003f68:	50 41       	stdsp	sp[0x10],r1
80003f6a:	0e 93       	mov	r3,r7
80003f6c:	04 91       	mov	r1,r2
80003f6e:	50 89       	stdsp	sp[0x20],r9
80003f70:	50 a8       	stdsp	sp[0x28],r8
80003f72:	50 2e       	stdsp	sp[0x8],lr
80003f74:	50 39       	stdsp	sp[0xc],r9
80003f76:	12 95       	mov	r5,r9
80003f78:	12 90       	mov	r0,r9
80003f7a:	10 97       	mov	r7,r8
80003f7c:	08 92       	mov	r2,r4
80003f7e:	c0 78       	rjmp	80003f8c <_vfprintf_r+0x1c0>
80003f80:	3f fc       	mov	r12,-1
80003f82:	08 97       	mov	r7,r4
80003f84:	50 2c       	stdsp	sp[0x8],r12
80003f86:	c0 38       	rjmp	80003f8c <_vfprintf_r+0x1c0>
80003f88:	30 0b       	mov	r11,0
80003f8a:	50 3b       	stdsp	sp[0xc],r11
80003f8c:	0f 38       	ld.ub	r8,r7++
80003f8e:	c0 28       	rjmp	80003f92 <_vfprintf_r+0x1c6>
80003f90:	12 90       	mov	r0,r9
80003f92:	f0 c9 00 20 	sub	r9,r8,32
80003f96:	e0 49 00 58 	cp.w	r9,88
80003f9a:	e0 8b 0a 30 	brhi	800053fa <_vfprintf_r+0x162e>
80003f9e:	fe ca a9 8a 	sub	r10,pc,-22134
80003fa2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80003fa6:	50 a7       	stdsp	sp[0x28],r7
80003fa8:	50 80       	stdsp	sp[0x20],r0
80003faa:	0c 97       	mov	r7,r6
80003fac:	04 94       	mov	r4,r2
80003fae:	06 96       	mov	r6,r3
80003fb0:	02 92       	mov	r2,r1
80003fb2:	fe c9 a7 62 	sub	r9,pc,-22686
80003fb6:	40 93       	lddsp	r3,sp[0x24]
80003fb8:	10 90       	mov	r0,r8
80003fba:	40 41       	lddsp	r1,sp[0x10]
80003fbc:	50 d9       	stdsp	sp[0x34],r9
80003fbe:	e0 8f 08 8e 	bral	800050da <_vfprintf_r+0x130e>
80003fc2:	30 08       	mov	r8,0
80003fc4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80003fc8:	f0 09 18 00 	cp.b	r9,r8
80003fcc:	ce 01       	brne	80003f8c <_vfprintf_r+0x1c0>
80003fce:	32 08       	mov	r8,32
80003fd0:	c6 e8       	rjmp	800040ac <_vfprintf_r+0x2e0>
80003fd2:	a1 a5       	sbr	r5,0x0
80003fd4:	cd cb       	rjmp	80003f8c <_vfprintf_r+0x1c0>
80003fd6:	0f 89       	ld.ub	r9,r7[0x0]
80003fd8:	f2 c8 00 30 	sub	r8,r9,48
80003fdc:	58 98       	cp.w	r8,9
80003fde:	e0 8b 00 1d 	brhi	80004018 <_vfprintf_r+0x24c>
80003fe2:	ee c8 ff ff 	sub	r8,r7,-1
80003fe6:	30 0b       	mov	r11,0
80003fe8:	23 09       	sub	r9,48
80003fea:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003fee:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80003ff2:	11 39       	ld.ub	r9,r8++
80003ff4:	f2 ca 00 30 	sub	r10,r9,48
80003ff8:	58 9a       	cp.w	r10,9
80003ffa:	fe 98 ff f7 	brls	80003fe8 <_vfprintf_r+0x21c>
80003ffe:	e0 49 00 24 	cp.w	r9,36
80004002:	cc 31       	brne	80003f88 <_vfprintf_r+0x1bc>
80004004:	e0 4b 00 20 	cp.w	r11,32
80004008:	e0 89 0e 60 	brgt	80005cc8 <_vfprintf_r+0x1efc>
8000400c:	20 1b       	sub	r11,1
8000400e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004012:	12 3b       	cp.w	r11,r9
80004014:	c0 95       	brlt	80004026 <_vfprintf_r+0x25a>
80004016:	c1 08       	rjmp	80004036 <_vfprintf_r+0x26a>
80004018:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000401c:	ec ca ff ff 	sub	r10,r6,-1
80004020:	12 36       	cp.w	r6,r9
80004022:	c1 f5       	brlt	80004060 <_vfprintf_r+0x294>
80004024:	c2 68       	rjmp	80004070 <_vfprintf_r+0x2a4>
80004026:	fa ce f9 44 	sub	lr,sp,-1724
8000402a:	10 97       	mov	r7,r8
8000402c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004030:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004034:	c3 58       	rjmp	8000409e <_vfprintf_r+0x2d2>
80004036:	10 97       	mov	r7,r8
80004038:	fa c8 f9 50 	sub	r8,sp,-1712
8000403c:	1a d8       	st.w	--sp,r8
8000403e:	fa c8 fa b8 	sub	r8,sp,-1352
80004042:	1a d8       	st.w	--sp,r8
80004044:	fa c8 fb b4 	sub	r8,sp,-1100
80004048:	02 9a       	mov	r10,r1
8000404a:	1a d8       	st.w	--sp,r8
8000404c:	04 9c       	mov	r12,r2
8000404e:	fa c8 f9 40 	sub	r8,sp,-1728
80004052:	fa c9 ff b4 	sub	r9,sp,-76
80004056:	fe b0 fd 23 	rcall	80003a9c <get_arg>
8000405a:	2f dd       	sub	sp,-12
8000405c:	78 00       	ld.w	r0,r12[0x0]
8000405e:	c2 08       	rjmp	8000409e <_vfprintf_r+0x2d2>
80004060:	fa cc f9 44 	sub	r12,sp,-1724
80004064:	14 96       	mov	r6,r10
80004066:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000406a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000406e:	c1 88       	rjmp	8000409e <_vfprintf_r+0x2d2>
80004070:	41 08       	lddsp	r8,sp[0x40]
80004072:	59 f9       	cp.w	r9,31
80004074:	e0 89 00 11 	brgt	80004096 <_vfprintf_r+0x2ca>
80004078:	f0 cb ff fc 	sub	r11,r8,-4
8000407c:	51 0b       	stdsp	sp[0x40],r11
8000407e:	70 00       	ld.w	r0,r8[0x0]
80004080:	fa cb f9 44 	sub	r11,sp,-1724
80004084:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004088:	f1 40 fd 88 	st.w	r8[-632],r0
8000408c:	2f f9       	sub	r9,-1
8000408e:	14 96       	mov	r6,r10
80004090:	fb 49 06 b4 	st.w	sp[1716],r9
80004094:	c0 58       	rjmp	8000409e <_vfprintf_r+0x2d2>
80004096:	70 00       	ld.w	r0,r8[0x0]
80004098:	14 96       	mov	r6,r10
8000409a:	2f c8       	sub	r8,-4
8000409c:	51 08       	stdsp	sp[0x40],r8
8000409e:	58 00       	cp.w	r0,0
800040a0:	fe 94 ff 76 	brge	80003f8c <_vfprintf_r+0x1c0>
800040a4:	5c 30       	neg	r0
800040a6:	a3 a5       	sbr	r5,0x2
800040a8:	c7 2b       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800040aa:	32 b8       	mov	r8,43
800040ac:	fb 68 06 bb 	st.b	sp[1723],r8
800040b0:	c6 eb       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800040b2:	0f 38       	ld.ub	r8,r7++
800040b4:	e0 48 00 2a 	cp.w	r8,42
800040b8:	c0 30       	breq	800040be <_vfprintf_r+0x2f2>
800040ba:	30 09       	mov	r9,0
800040bc:	c7 98       	rjmp	800041ae <_vfprintf_r+0x3e2>
800040be:	0f 88       	ld.ub	r8,r7[0x0]
800040c0:	f0 c9 00 30 	sub	r9,r8,48
800040c4:	58 99       	cp.w	r9,9
800040c6:	e0 8b 00 1f 	brhi	80004104 <_vfprintf_r+0x338>
800040ca:	ee c4 ff ff 	sub	r4,r7,-1
800040ce:	30 0b       	mov	r11,0
800040d0:	23 08       	sub	r8,48
800040d2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800040d6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800040da:	09 38       	ld.ub	r8,r4++
800040dc:	f0 c9 00 30 	sub	r9,r8,48
800040e0:	58 99       	cp.w	r9,9
800040e2:	fe 98 ff f7 	brls	800040d0 <_vfprintf_r+0x304>
800040e6:	e0 48 00 24 	cp.w	r8,36
800040ea:	fe 91 ff 4f 	brne	80003f88 <_vfprintf_r+0x1bc>
800040ee:	e0 4b 00 20 	cp.w	r11,32
800040f2:	e0 89 0d eb 	brgt	80005cc8 <_vfprintf_r+0x1efc>
800040f6:	20 1b       	sub	r11,1
800040f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800040fc:	10 3b       	cp.w	r11,r8
800040fe:	c0 a5       	brlt	80004112 <_vfprintf_r+0x346>
80004100:	c1 18       	rjmp	80004122 <_vfprintf_r+0x356>
80004102:	d7 03       	nop
80004104:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004108:	ec c9 ff ff 	sub	r9,r6,-1
8000410c:	14 36       	cp.w	r6,r10
8000410e:	c1 f5       	brlt	8000414c <_vfprintf_r+0x380>
80004110:	c2 88       	rjmp	80004160 <_vfprintf_r+0x394>
80004112:	fa ca f9 44 	sub	r10,sp,-1724
80004116:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000411a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000411e:	50 2b       	stdsp	sp[0x8],r11
80004120:	c3 c8       	rjmp	80004198 <_vfprintf_r+0x3cc>
80004122:	fa c8 f9 50 	sub	r8,sp,-1712
80004126:	1a d8       	st.w	--sp,r8
80004128:	fa c8 fa b8 	sub	r8,sp,-1352
8000412c:	1a d8       	st.w	--sp,r8
8000412e:	fa c8 fb b4 	sub	r8,sp,-1100
80004132:	02 9a       	mov	r10,r1
80004134:	1a d8       	st.w	--sp,r8
80004136:	04 9c       	mov	r12,r2
80004138:	fa c8 f9 40 	sub	r8,sp,-1728
8000413c:	fa c9 ff b4 	sub	r9,sp,-76
80004140:	fe b0 fc ae 	rcall	80003a9c <get_arg>
80004144:	2f dd       	sub	sp,-12
80004146:	78 0c       	ld.w	r12,r12[0x0]
80004148:	50 2c       	stdsp	sp[0x8],r12
8000414a:	c2 78       	rjmp	80004198 <_vfprintf_r+0x3cc>
8000414c:	12 96       	mov	r6,r9
8000414e:	0e 94       	mov	r4,r7
80004150:	fa c9 f9 44 	sub	r9,sp,-1724
80004154:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004158:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000415c:	50 28       	stdsp	sp[0x8],r8
8000415e:	c1 d8       	rjmp	80004198 <_vfprintf_r+0x3cc>
80004160:	41 08       	lddsp	r8,sp[0x40]
80004162:	59 fa       	cp.w	r10,31
80004164:	e0 89 00 14 	brgt	8000418c <_vfprintf_r+0x3c0>
80004168:	f0 cb ff fc 	sub	r11,r8,-4
8000416c:	70 08       	ld.w	r8,r8[0x0]
8000416e:	51 0b       	stdsp	sp[0x40],r11
80004170:	50 28       	stdsp	sp[0x8],r8
80004172:	fa c6 f9 44 	sub	r6,sp,-1724
80004176:	40 2e       	lddsp	lr,sp[0x8]
80004178:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000417c:	f1 4e fd 88 	st.w	r8[-632],lr
80004180:	2f fa       	sub	r10,-1
80004182:	0e 94       	mov	r4,r7
80004184:	fb 4a 06 b4 	st.w	sp[1716],r10
80004188:	12 96       	mov	r6,r9
8000418a:	c0 78       	rjmp	80004198 <_vfprintf_r+0x3cc>
8000418c:	70 0c       	ld.w	r12,r8[0x0]
8000418e:	0e 94       	mov	r4,r7
80004190:	2f c8       	sub	r8,-4
80004192:	50 2c       	stdsp	sp[0x8],r12
80004194:	12 96       	mov	r6,r9
80004196:	51 08       	stdsp	sp[0x40],r8
80004198:	40 2b       	lddsp	r11,sp[0x8]
8000419a:	58 0b       	cp.w	r11,0
8000419c:	fe 95 fe f2 	brlt	80003f80 <_vfprintf_r+0x1b4>
800041a0:	08 97       	mov	r7,r4
800041a2:	cf 5a       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800041a4:	f2 09 00 29 	add	r9,r9,r9<<0x2
800041a8:	0f 38       	ld.ub	r8,r7++
800041aa:	f4 09 00 19 	add	r9,r10,r9<<0x1
800041ae:	f0 ca 00 30 	sub	r10,r8,48
800041b2:	58 9a       	cp.w	r10,9
800041b4:	fe 98 ff f8 	brls	800041a4 <_vfprintf_r+0x3d8>
800041b8:	3f fa       	mov	r10,-1
800041ba:	f2 0a 0c 49 	max	r9,r9,r10
800041be:	50 29       	stdsp	sp[0x8],r9
800041c0:	ce 9a       	rjmp	80003f92 <_vfprintf_r+0x1c6>
800041c2:	a7 b5       	sbr	r5,0x7
800041c4:	ce 4a       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800041c6:	30 09       	mov	r9,0
800041c8:	23 08       	sub	r8,48
800041ca:	f2 09 00 29 	add	r9,r9,r9<<0x2
800041ce:	f0 09 00 19 	add	r9,r8,r9<<0x1
800041d2:	0f 38       	ld.ub	r8,r7++
800041d4:	f0 ca 00 30 	sub	r10,r8,48
800041d8:	58 9a       	cp.w	r10,9
800041da:	fe 98 ff f7 	brls	800041c8 <_vfprintf_r+0x3fc>
800041de:	e0 48 00 24 	cp.w	r8,36
800041e2:	fe 91 fe d7 	brne	80003f90 <_vfprintf_r+0x1c4>
800041e6:	e0 49 00 20 	cp.w	r9,32
800041ea:	e0 89 0d 6f 	brgt	80005cc8 <_vfprintf_r+0x1efc>
800041ee:	f2 c3 00 01 	sub	r3,r9,1
800041f2:	30 19       	mov	r9,1
800041f4:	50 39       	stdsp	sp[0xc],r9
800041f6:	cc ba       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800041f8:	a3 b5       	sbr	r5,0x3
800041fa:	cc 9a       	rjmp	80003f8c <_vfprintf_r+0x1c0>
800041fc:	a7 a5       	sbr	r5,0x6
800041fe:	cc 7a       	rjmp	80003f8c <_vfprintf_r+0x1c0>
80004200:	0a 98       	mov	r8,r5
80004202:	a5 b5       	sbr	r5,0x5
80004204:	a5 a8       	sbr	r8,0x4
80004206:	0f 89       	ld.ub	r9,r7[0x0]
80004208:	36 ce       	mov	lr,108
8000420a:	fc 09 18 00 	cp.b	r9,lr
8000420e:	f7 b7 00 ff 	subeq	r7,-1
80004212:	f0 05 17 10 	movne	r5,r8
80004216:	cb ba       	rjmp	80003f8c <_vfprintf_r+0x1c0>
80004218:	a5 b5       	sbr	r5,0x5
8000421a:	cb 9a       	rjmp	80003f8c <_vfprintf_r+0x1c0>
8000421c:	50 a7       	stdsp	sp[0x28],r7
8000421e:	50 80       	stdsp	sp[0x20],r0
80004220:	0c 97       	mov	r7,r6
80004222:	10 90       	mov	r0,r8
80004224:	06 96       	mov	r6,r3
80004226:	04 94       	mov	r4,r2
80004228:	40 93       	lddsp	r3,sp[0x24]
8000422a:	02 92       	mov	r2,r1
8000422c:	0e 99       	mov	r9,r7
8000422e:	40 41       	lddsp	r1,sp[0x10]
80004230:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004234:	40 3c       	lddsp	r12,sp[0xc]
80004236:	58 0c       	cp.w	r12,0
80004238:	c1 d0       	breq	80004272 <_vfprintf_r+0x4a6>
8000423a:	10 36       	cp.w	r6,r8
8000423c:	c0 64       	brge	80004248 <_vfprintf_r+0x47c>
8000423e:	fa cb f9 44 	sub	r11,sp,-1724
80004242:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004246:	c1 d8       	rjmp	80004280 <_vfprintf_r+0x4b4>
80004248:	fa c8 f9 50 	sub	r8,sp,-1712
8000424c:	1a d8       	st.w	--sp,r8
8000424e:	fa c8 fa b8 	sub	r8,sp,-1352
80004252:	1a d8       	st.w	--sp,r8
80004254:	fa c8 fb b4 	sub	r8,sp,-1100
80004258:	1a d8       	st.w	--sp,r8
8000425a:	fa c8 f9 40 	sub	r8,sp,-1728
8000425e:	fa c9 ff b4 	sub	r9,sp,-76
80004262:	04 9a       	mov	r10,r2
80004264:	0c 9b       	mov	r11,r6
80004266:	08 9c       	mov	r12,r4
80004268:	fe b0 fc 1a 	rcall	80003a9c <get_arg>
8000426c:	2f dd       	sub	sp,-12
8000426e:	19 b8       	ld.ub	r8,r12[0x3]
80004270:	c2 28       	rjmp	800042b4 <_vfprintf_r+0x4e8>
80004272:	2f f7       	sub	r7,-1
80004274:	10 39       	cp.w	r9,r8
80004276:	c0 84       	brge	80004286 <_vfprintf_r+0x4ba>
80004278:	fa ca f9 44 	sub	r10,sp,-1724
8000427c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004280:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004284:	c1 88       	rjmp	800042b4 <_vfprintf_r+0x4e8>
80004286:	41 09       	lddsp	r9,sp[0x40]
80004288:	59 f8       	cp.w	r8,31
8000428a:	e0 89 00 12 	brgt	800042ae <_vfprintf_r+0x4e2>
8000428e:	f2 ca ff fc 	sub	r10,r9,-4
80004292:	51 0a       	stdsp	sp[0x40],r10
80004294:	72 09       	ld.w	r9,r9[0x0]
80004296:	fa c6 f9 44 	sub	r6,sp,-1724
8000429a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000429e:	2f f8       	sub	r8,-1
800042a0:	f5 49 fd 88 	st.w	r10[-632],r9
800042a4:	fb 48 06 b4 	st.w	sp[1716],r8
800042a8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800042ac:	c0 48       	rjmp	800042b4 <_vfprintf_r+0x4e8>
800042ae:	13 b8       	ld.ub	r8,r9[0x3]
800042b0:	2f c9       	sub	r9,-4
800042b2:	51 09       	stdsp	sp[0x40],r9
800042b4:	fb 68 06 60 	st.b	sp[1632],r8
800042b8:	30 0e       	mov	lr,0
800042ba:	30 08       	mov	r8,0
800042bc:	30 12       	mov	r2,1
800042be:	fb 68 06 bb 	st.b	sp[1723],r8
800042c2:	50 2e       	stdsp	sp[0x8],lr
800042c4:	e0 8f 08 ad 	bral	8000541e <_vfprintf_r+0x1652>
800042c8:	50 a7       	stdsp	sp[0x28],r7
800042ca:	50 80       	stdsp	sp[0x20],r0
800042cc:	0c 97       	mov	r7,r6
800042ce:	04 94       	mov	r4,r2
800042d0:	06 96       	mov	r6,r3
800042d2:	02 92       	mov	r2,r1
800042d4:	40 93       	lddsp	r3,sp[0x24]
800042d6:	10 90       	mov	r0,r8
800042d8:	40 41       	lddsp	r1,sp[0x10]
800042da:	a5 a5       	sbr	r5,0x4
800042dc:	c0 a8       	rjmp	800042f0 <_vfprintf_r+0x524>
800042de:	50 a7       	stdsp	sp[0x28],r7
800042e0:	50 80       	stdsp	sp[0x20],r0
800042e2:	0c 97       	mov	r7,r6
800042e4:	04 94       	mov	r4,r2
800042e6:	06 96       	mov	r6,r3
800042e8:	02 92       	mov	r2,r1
800042ea:	40 93       	lddsp	r3,sp[0x24]
800042ec:	10 90       	mov	r0,r8
800042ee:	40 41       	lddsp	r1,sp[0x10]
800042f0:	ed b5 00 05 	bld	r5,0x5
800042f4:	c5 11       	brne	80004396 <_vfprintf_r+0x5ca>
800042f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800042fa:	40 3c       	lddsp	r12,sp[0xc]
800042fc:	58 0c       	cp.w	r12,0
800042fe:	c1 e0       	breq	8000433a <_vfprintf_r+0x56e>
80004300:	10 36       	cp.w	r6,r8
80004302:	c0 64       	brge	8000430e <_vfprintf_r+0x542>
80004304:	fa cb f9 44 	sub	r11,sp,-1724
80004308:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000430c:	c2 08       	rjmp	8000434c <_vfprintf_r+0x580>
8000430e:	fa c8 f9 50 	sub	r8,sp,-1712
80004312:	1a d8       	st.w	--sp,r8
80004314:	fa c8 fa b8 	sub	r8,sp,-1352
80004318:	0c 9b       	mov	r11,r6
8000431a:	1a d8       	st.w	--sp,r8
8000431c:	fa c8 fb b4 	sub	r8,sp,-1100
80004320:	1a d8       	st.w	--sp,r8
80004322:	fa c9 ff b4 	sub	r9,sp,-76
80004326:	fa c8 f9 40 	sub	r8,sp,-1728
8000432a:	04 9a       	mov	r10,r2
8000432c:	08 9c       	mov	r12,r4
8000432e:	fe b0 fb b7 	rcall	80003a9c <get_arg>
80004332:	2f dd       	sub	sp,-12
80004334:	78 1b       	ld.w	r11,r12[0x4]
80004336:	78 09       	ld.w	r9,r12[0x0]
80004338:	c2 b8       	rjmp	8000438e <_vfprintf_r+0x5c2>
8000433a:	ee ca ff ff 	sub	r10,r7,-1
8000433e:	10 37       	cp.w	r7,r8
80004340:	c0 b4       	brge	80004356 <_vfprintf_r+0x58a>
80004342:	fa c9 f9 44 	sub	r9,sp,-1724
80004346:	14 97       	mov	r7,r10
80004348:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000434c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004350:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004354:	c1 d8       	rjmp	8000438e <_vfprintf_r+0x5c2>
80004356:	41 09       	lddsp	r9,sp[0x40]
80004358:	59 f8       	cp.w	r8,31
8000435a:	e0 89 00 14 	brgt	80004382 <_vfprintf_r+0x5b6>
8000435e:	f2 cb ff f8 	sub	r11,r9,-8
80004362:	51 0b       	stdsp	sp[0x40],r11
80004364:	fa c6 f9 44 	sub	r6,sp,-1724
80004368:	72 1b       	ld.w	r11,r9[0x4]
8000436a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000436e:	72 09       	ld.w	r9,r9[0x0]
80004370:	f9 4b fd 8c 	st.w	r12[-628],r11
80004374:	f9 49 fd 88 	st.w	r12[-632],r9
80004378:	2f f8       	sub	r8,-1
8000437a:	14 97       	mov	r7,r10
8000437c:	fb 48 06 b4 	st.w	sp[1716],r8
80004380:	c0 78       	rjmp	8000438e <_vfprintf_r+0x5c2>
80004382:	f2 c8 ff f8 	sub	r8,r9,-8
80004386:	72 1b       	ld.w	r11,r9[0x4]
80004388:	14 97       	mov	r7,r10
8000438a:	51 08       	stdsp	sp[0x40],r8
8000438c:	72 09       	ld.w	r9,r9[0x0]
8000438e:	16 98       	mov	r8,r11
80004390:	fa e9 00 00 	st.d	sp[0],r8
80004394:	ca e8       	rjmp	800044f0 <_vfprintf_r+0x724>
80004396:	ed b5 00 04 	bld	r5,0x4
8000439a:	c1 71       	brne	800043c8 <_vfprintf_r+0x5fc>
8000439c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800043a0:	40 3e       	lddsp	lr,sp[0xc]
800043a2:	58 0e       	cp.w	lr,0
800043a4:	c0 80       	breq	800043b4 <_vfprintf_r+0x5e8>
800043a6:	10 36       	cp.w	r6,r8
800043a8:	c6 94       	brge	8000447a <_vfprintf_r+0x6ae>
800043aa:	fa cc f9 44 	sub	r12,sp,-1724
800043ae:	f8 06 00 36 	add	r6,r12,r6<<0x3
800043b2:	c8 28       	rjmp	800044b6 <_vfprintf_r+0x6ea>
800043b4:	ee ca ff ff 	sub	r10,r7,-1
800043b8:	10 37       	cp.w	r7,r8
800043ba:	e0 84 00 81 	brge	800044bc <_vfprintf_r+0x6f0>
800043be:	fa cb f9 44 	sub	r11,sp,-1724
800043c2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800043c6:	c7 78       	rjmp	800044b4 <_vfprintf_r+0x6e8>
800043c8:	ed b5 00 06 	bld	r5,0x6
800043cc:	c4 b1       	brne	80004462 <_vfprintf_r+0x696>
800043ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800043d2:	40 3c       	lddsp	r12,sp[0xc]
800043d4:	58 0c       	cp.w	r12,0
800043d6:	c1 d0       	breq	80004410 <_vfprintf_r+0x644>
800043d8:	10 36       	cp.w	r6,r8
800043da:	c0 64       	brge	800043e6 <_vfprintf_r+0x61a>
800043dc:	fa cb f9 44 	sub	r11,sp,-1724
800043e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800043e4:	c1 f8       	rjmp	80004422 <_vfprintf_r+0x656>
800043e6:	fa c8 f9 50 	sub	r8,sp,-1712
800043ea:	1a d8       	st.w	--sp,r8
800043ec:	fa c8 fa b8 	sub	r8,sp,-1352
800043f0:	1a d8       	st.w	--sp,r8
800043f2:	fa c8 fb b4 	sub	r8,sp,-1100
800043f6:	1a d8       	st.w	--sp,r8
800043f8:	fa c8 f9 40 	sub	r8,sp,-1728
800043fc:	fa c9 ff b4 	sub	r9,sp,-76
80004400:	04 9a       	mov	r10,r2
80004402:	0c 9b       	mov	r11,r6
80004404:	08 9c       	mov	r12,r4
80004406:	fe b0 fb 4b 	rcall	80003a9c <get_arg>
8000440a:	2f dd       	sub	sp,-12
8000440c:	98 18       	ld.sh	r8,r12[0x2]
8000440e:	c2 68       	rjmp	8000445a <_vfprintf_r+0x68e>
80004410:	ee ca ff ff 	sub	r10,r7,-1
80004414:	10 37       	cp.w	r7,r8
80004416:	c0 94       	brge	80004428 <_vfprintf_r+0x65c>
80004418:	fa c9 f9 44 	sub	r9,sp,-1724
8000441c:	14 97       	mov	r7,r10
8000441e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004422:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004426:	c1 a8       	rjmp	8000445a <_vfprintf_r+0x68e>
80004428:	41 09       	lddsp	r9,sp[0x40]
8000442a:	59 f8       	cp.w	r8,31
8000442c:	e0 89 00 13 	brgt	80004452 <_vfprintf_r+0x686>
80004430:	f2 cb ff fc 	sub	r11,r9,-4
80004434:	51 0b       	stdsp	sp[0x40],r11
80004436:	72 09       	ld.w	r9,r9[0x0]
80004438:	fa c6 f9 44 	sub	r6,sp,-1724
8000443c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004440:	2f f8       	sub	r8,-1
80004442:	f7 49 fd 88 	st.w	r11[-632],r9
80004446:	fb 48 06 b4 	st.w	sp[1716],r8
8000444a:	14 97       	mov	r7,r10
8000444c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004450:	c0 58       	rjmp	8000445a <_vfprintf_r+0x68e>
80004452:	92 18       	ld.sh	r8,r9[0x2]
80004454:	14 97       	mov	r7,r10
80004456:	2f c9       	sub	r9,-4
80004458:	51 09       	stdsp	sp[0x40],r9
8000445a:	50 18       	stdsp	sp[0x4],r8
8000445c:	bf 58       	asr	r8,0x1f
8000445e:	50 08       	stdsp	sp[0x0],r8
80004460:	c4 88       	rjmp	800044f0 <_vfprintf_r+0x724>
80004462:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004466:	40 3c       	lddsp	r12,sp[0xc]
80004468:	58 0c       	cp.w	r12,0
8000446a:	c1 d0       	breq	800044a4 <_vfprintf_r+0x6d8>
8000446c:	10 36       	cp.w	r6,r8
8000446e:	c0 64       	brge	8000447a <_vfprintf_r+0x6ae>
80004470:	fa cb f9 44 	sub	r11,sp,-1724
80004474:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004478:	c1 f8       	rjmp	800044b6 <_vfprintf_r+0x6ea>
8000447a:	fa c8 f9 50 	sub	r8,sp,-1712
8000447e:	1a d8       	st.w	--sp,r8
80004480:	fa c8 fa b8 	sub	r8,sp,-1352
80004484:	0c 9b       	mov	r11,r6
80004486:	1a d8       	st.w	--sp,r8
80004488:	fa c8 fb b4 	sub	r8,sp,-1100
8000448c:	04 9a       	mov	r10,r2
8000448e:	1a d8       	st.w	--sp,r8
80004490:	08 9c       	mov	r12,r4
80004492:	fa c8 f9 40 	sub	r8,sp,-1728
80004496:	fa c9 ff b4 	sub	r9,sp,-76
8000449a:	fe b0 fb 01 	rcall	80003a9c <get_arg>
8000449e:	2f dd       	sub	sp,-12
800044a0:	78 0b       	ld.w	r11,r12[0x0]
800044a2:	c2 48       	rjmp	800044ea <_vfprintf_r+0x71e>
800044a4:	ee ca ff ff 	sub	r10,r7,-1
800044a8:	10 37       	cp.w	r7,r8
800044aa:	c0 94       	brge	800044bc <_vfprintf_r+0x6f0>
800044ac:	fa c9 f9 44 	sub	r9,sp,-1724
800044b0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800044b4:	14 97       	mov	r7,r10
800044b6:	ec fb fd 88 	ld.w	r11,r6[-632]
800044ba:	c1 88       	rjmp	800044ea <_vfprintf_r+0x71e>
800044bc:	41 09       	lddsp	r9,sp[0x40]
800044be:	59 f8       	cp.w	r8,31
800044c0:	e0 89 00 11 	brgt	800044e2 <_vfprintf_r+0x716>
800044c4:	f2 cb ff fc 	sub	r11,r9,-4
800044c8:	51 0b       	stdsp	sp[0x40],r11
800044ca:	fa c6 f9 44 	sub	r6,sp,-1724
800044ce:	72 0b       	ld.w	r11,r9[0x0]
800044d0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800044d4:	f3 4b fd 88 	st.w	r9[-632],r11
800044d8:	2f f8       	sub	r8,-1
800044da:	14 97       	mov	r7,r10
800044dc:	fb 48 06 b4 	st.w	sp[1716],r8
800044e0:	c0 58       	rjmp	800044ea <_vfprintf_r+0x71e>
800044e2:	72 0b       	ld.w	r11,r9[0x0]
800044e4:	14 97       	mov	r7,r10
800044e6:	2f c9       	sub	r9,-4
800044e8:	51 09       	stdsp	sp[0x40],r9
800044ea:	50 1b       	stdsp	sp[0x4],r11
800044ec:	bf 5b       	asr	r11,0x1f
800044ee:	50 0b       	stdsp	sp[0x0],r11
800044f0:	fa ea 00 00 	ld.d	r10,sp[0]
800044f4:	58 0a       	cp.w	r10,0
800044f6:	5c 2b       	cpc	r11
800044f8:	c0 e4       	brge	80004514 <_vfprintf_r+0x748>
800044fa:	30 08       	mov	r8,0
800044fc:	fa ea 00 00 	ld.d	r10,sp[0]
80004500:	30 09       	mov	r9,0
80004502:	f0 0a 01 0a 	sub	r10,r8,r10
80004506:	f2 0b 01 4b 	sbc	r11,r9,r11
8000450a:	32 d8       	mov	r8,45
8000450c:	fa eb 00 00 	st.d	sp[0],r10
80004510:	fb 68 06 bb 	st.b	sp[1723],r8
80004514:	30 18       	mov	r8,1
80004516:	e0 8f 06 fa 	bral	8000530a <_vfprintf_r+0x153e>
8000451a:	50 a7       	stdsp	sp[0x28],r7
8000451c:	50 80       	stdsp	sp[0x20],r0
8000451e:	0c 97       	mov	r7,r6
80004520:	04 94       	mov	r4,r2
80004522:	06 96       	mov	r6,r3
80004524:	02 92       	mov	r2,r1
80004526:	40 93       	lddsp	r3,sp[0x24]
80004528:	10 90       	mov	r0,r8
8000452a:	40 41       	lddsp	r1,sp[0x10]
8000452c:	0e 99       	mov	r9,r7
8000452e:	ed b5 00 03 	bld	r5,0x3
80004532:	c4 11       	brne	800045b4 <_vfprintf_r+0x7e8>
80004534:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004538:	40 3a       	lddsp	r10,sp[0xc]
8000453a:	58 0a       	cp.w	r10,0
8000453c:	c1 90       	breq	8000456e <_vfprintf_r+0x7a2>
8000453e:	10 36       	cp.w	r6,r8
80004540:	c6 45       	brlt	80004608 <_vfprintf_r+0x83c>
80004542:	fa c8 f9 50 	sub	r8,sp,-1712
80004546:	1a d8       	st.w	--sp,r8
80004548:	fa c8 fa b8 	sub	r8,sp,-1352
8000454c:	1a d8       	st.w	--sp,r8
8000454e:	fa c8 fb b4 	sub	r8,sp,-1100
80004552:	0c 9b       	mov	r11,r6
80004554:	1a d8       	st.w	--sp,r8
80004556:	04 9a       	mov	r10,r2
80004558:	fa c8 f9 40 	sub	r8,sp,-1728
8000455c:	fa c9 ff b4 	sub	r9,sp,-76
80004560:	08 9c       	mov	r12,r4
80004562:	fe b0 fa 9d 	rcall	80003a9c <get_arg>
80004566:	2f dd       	sub	sp,-12
80004568:	78 16       	ld.w	r6,r12[0x4]
8000456a:	50 76       	stdsp	sp[0x1c],r6
8000456c:	c4 88       	rjmp	800045fc <_vfprintf_r+0x830>
8000456e:	2f f7       	sub	r7,-1
80004570:	10 39       	cp.w	r9,r8
80004572:	c0 c4       	brge	8000458a <_vfprintf_r+0x7be>
80004574:	fa ce f9 44 	sub	lr,sp,-1724
80004578:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000457c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004580:	50 7c       	stdsp	sp[0x1c],r12
80004582:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004586:	50 56       	stdsp	sp[0x14],r6
80004588:	c6 68       	rjmp	80004654 <_vfprintf_r+0x888>
8000458a:	41 09       	lddsp	r9,sp[0x40]
8000458c:	59 f8       	cp.w	r8,31
8000458e:	e0 89 00 10 	brgt	800045ae <_vfprintf_r+0x7e2>
80004592:	f2 ca ff f8 	sub	r10,r9,-8
80004596:	72 1b       	ld.w	r11,r9[0x4]
80004598:	51 0a       	stdsp	sp[0x40],r10
8000459a:	72 09       	ld.w	r9,r9[0x0]
8000459c:	fa ca f9 44 	sub	r10,sp,-1724
800045a0:	50 7b       	stdsp	sp[0x1c],r11
800045a2:	50 59       	stdsp	sp[0x14],r9
800045a4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800045a8:	40 5b       	lddsp	r11,sp[0x14]
800045aa:	40 7a       	lddsp	r10,sp[0x1c]
800045ac:	c4 78       	rjmp	8000463a <_vfprintf_r+0x86e>
800045ae:	72 18       	ld.w	r8,r9[0x4]
800045b0:	50 78       	stdsp	sp[0x1c],r8
800045b2:	c4 c8       	rjmp	8000464a <_vfprintf_r+0x87e>
800045b4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045b8:	40 3e       	lddsp	lr,sp[0xc]
800045ba:	58 0e       	cp.w	lr,0
800045bc:	c2 30       	breq	80004602 <_vfprintf_r+0x836>
800045be:	10 36       	cp.w	r6,r8
800045c0:	c0 94       	brge	800045d2 <_vfprintf_r+0x806>
800045c2:	fa cc f9 44 	sub	r12,sp,-1724
800045c6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800045ca:	ec fb fd 8c 	ld.w	r11,r6[-628]
800045ce:	50 7b       	stdsp	sp[0x1c],r11
800045d0:	cd 9b       	rjmp	80004582 <_vfprintf_r+0x7b6>
800045d2:	fa c8 f9 50 	sub	r8,sp,-1712
800045d6:	1a d8       	st.w	--sp,r8
800045d8:	fa c8 fa b8 	sub	r8,sp,-1352
800045dc:	04 9a       	mov	r10,r2
800045de:	1a d8       	st.w	--sp,r8
800045e0:	fa c8 fb b4 	sub	r8,sp,-1100
800045e4:	0c 9b       	mov	r11,r6
800045e6:	1a d8       	st.w	--sp,r8
800045e8:	08 9c       	mov	r12,r4
800045ea:	fa c8 f9 40 	sub	r8,sp,-1728
800045ee:	fa c9 ff b4 	sub	r9,sp,-76
800045f2:	fe b0 fa 55 	rcall	80003a9c <get_arg>
800045f6:	2f dd       	sub	sp,-12
800045f8:	78 1a       	ld.w	r10,r12[0x4]
800045fa:	50 7a       	stdsp	sp[0x1c],r10
800045fc:	78 0c       	ld.w	r12,r12[0x0]
800045fe:	50 5c       	stdsp	sp[0x14],r12
80004600:	c2 a8       	rjmp	80004654 <_vfprintf_r+0x888>
80004602:	2f f7       	sub	r7,-1
80004604:	10 39       	cp.w	r9,r8
80004606:	c0 94       	brge	80004618 <_vfprintf_r+0x84c>
80004608:	fa c9 f9 44 	sub	r9,sp,-1724
8000460c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004610:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004614:	50 78       	stdsp	sp[0x1c],r8
80004616:	cb 6b       	rjmp	80004582 <_vfprintf_r+0x7b6>
80004618:	41 09       	lddsp	r9,sp[0x40]
8000461a:	59 f8       	cp.w	r8,31
8000461c:	e0 89 00 15 	brgt	80004646 <_vfprintf_r+0x87a>
80004620:	f2 ca ff f8 	sub	r10,r9,-8
80004624:	72 16       	ld.w	r6,r9[0x4]
80004626:	72 09       	ld.w	r9,r9[0x0]
80004628:	51 0a       	stdsp	sp[0x40],r10
8000462a:	50 59       	stdsp	sp[0x14],r9
8000462c:	fa ce f9 44 	sub	lr,sp,-1724
80004630:	50 76       	stdsp	sp[0x1c],r6
80004632:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004636:	40 5b       	lddsp	r11,sp[0x14]
80004638:	0c 9a       	mov	r10,r6
8000463a:	f2 eb fd 88 	st.d	r9[-632],r10
8000463e:	2f f8       	sub	r8,-1
80004640:	fb 48 06 b4 	st.w	sp[1716],r8
80004644:	c0 88       	rjmp	80004654 <_vfprintf_r+0x888>
80004646:	72 1c       	ld.w	r12,r9[0x4]
80004648:	50 7c       	stdsp	sp[0x1c],r12
8000464a:	f2 c8 ff f8 	sub	r8,r9,-8
8000464e:	51 08       	stdsp	sp[0x40],r8
80004650:	72 09       	ld.w	r9,r9[0x0]
80004652:	50 59       	stdsp	sp[0x14],r9
80004654:	40 5b       	lddsp	r11,sp[0x14]
80004656:	40 7a       	lddsp	r10,sp[0x1c]
80004658:	e0 a0 1c de 	rcall	80008014 <__isinfd>
8000465c:	18 96       	mov	r6,r12
8000465e:	c1 70       	breq	8000468c <_vfprintf_r+0x8c0>
80004660:	30 08       	mov	r8,0
80004662:	30 09       	mov	r9,0
80004664:	40 5b       	lddsp	r11,sp[0x14]
80004666:	40 7a       	lddsp	r10,sp[0x1c]
80004668:	e0 a0 21 cc 	rcall	80008a00 <__avr32_f64_cmp_lt>
8000466c:	c0 40       	breq	80004674 <_vfprintf_r+0x8a8>
8000466e:	32 d8       	mov	r8,45
80004670:	fb 68 06 bb 	st.b	sp[1723],r8
80004674:	fe c8 ae 10 	sub	r8,pc,-20976
80004678:	fe c6 ae 10 	sub	r6,pc,-20976
8000467c:	a7 d5       	cbr	r5,0x7
8000467e:	e0 40 00 47 	cp.w	r0,71
80004682:	f0 06 17 a0 	movle	r6,r8
80004686:	30 32       	mov	r2,3
80004688:	e0 8f 06 ce 	bral	80005424 <_vfprintf_r+0x1658>
8000468c:	40 5b       	lddsp	r11,sp[0x14]
8000468e:	40 7a       	lddsp	r10,sp[0x1c]
80004690:	e0 a0 1c d7 	rcall	8000803e <__isnand>
80004694:	c0 e0       	breq	800046b0 <_vfprintf_r+0x8e4>
80004696:	50 26       	stdsp	sp[0x8],r6
80004698:	fe c8 ae 2c 	sub	r8,pc,-20948
8000469c:	fe c6 ae 2c 	sub	r6,pc,-20948
800046a0:	a7 d5       	cbr	r5,0x7
800046a2:	e0 40 00 47 	cp.w	r0,71
800046a6:	f0 06 17 a0 	movle	r6,r8
800046aa:	30 32       	mov	r2,3
800046ac:	e0 8f 06 c2 	bral	80005430 <_vfprintf_r+0x1664>
800046b0:	40 2a       	lddsp	r10,sp[0x8]
800046b2:	5b fa       	cp.w	r10,-1
800046b4:	c0 41       	brne	800046bc <_vfprintf_r+0x8f0>
800046b6:	30 69       	mov	r9,6
800046b8:	50 29       	stdsp	sp[0x8],r9
800046ba:	c1 18       	rjmp	800046dc <_vfprintf_r+0x910>
800046bc:	e0 40 00 47 	cp.w	r0,71
800046c0:	5f 09       	sreq	r9
800046c2:	e0 40 00 67 	cp.w	r0,103
800046c6:	5f 08       	sreq	r8
800046c8:	f3 e8 10 08 	or	r8,r9,r8
800046cc:	f8 08 18 00 	cp.b	r8,r12
800046d0:	c0 60       	breq	800046dc <_vfprintf_r+0x910>
800046d2:	40 28       	lddsp	r8,sp[0x8]
800046d4:	58 08       	cp.w	r8,0
800046d6:	f9 b8 00 01 	moveq	r8,1
800046da:	50 28       	stdsp	sp[0x8],r8
800046dc:	40 78       	lddsp	r8,sp[0x1c]
800046de:	40 59       	lddsp	r9,sp[0x14]
800046e0:	fa e9 06 94 	st.d	sp[1684],r8
800046e4:	a9 a5       	sbr	r5,0x8
800046e6:	fa f8 06 94 	ld.w	r8,sp[1684]
800046ea:	58 08       	cp.w	r8,0
800046ec:	c0 65       	brlt	800046f8 <_vfprintf_r+0x92c>
800046ee:	40 5e       	lddsp	lr,sp[0x14]
800046f0:	30 0c       	mov	r12,0
800046f2:	50 6e       	stdsp	sp[0x18],lr
800046f4:	50 9c       	stdsp	sp[0x24],r12
800046f6:	c0 78       	rjmp	80004704 <_vfprintf_r+0x938>
800046f8:	40 5b       	lddsp	r11,sp[0x14]
800046fa:	32 da       	mov	r10,45
800046fc:	ee 1b 80 00 	eorh	r11,0x8000
80004700:	50 9a       	stdsp	sp[0x24],r10
80004702:	50 6b       	stdsp	sp[0x18],r11
80004704:	e0 40 00 46 	cp.w	r0,70
80004708:	5f 09       	sreq	r9
8000470a:	e0 40 00 66 	cp.w	r0,102
8000470e:	5f 08       	sreq	r8
80004710:	f3 e8 10 08 	or	r8,r9,r8
80004714:	50 48       	stdsp	sp[0x10],r8
80004716:	c0 40       	breq	8000471e <_vfprintf_r+0x952>
80004718:	40 22       	lddsp	r2,sp[0x8]
8000471a:	30 39       	mov	r9,3
8000471c:	c1 08       	rjmp	8000473c <_vfprintf_r+0x970>
8000471e:	e0 40 00 45 	cp.w	r0,69
80004722:	5f 09       	sreq	r9
80004724:	e0 40 00 65 	cp.w	r0,101
80004728:	5f 08       	sreq	r8
8000472a:	40 22       	lddsp	r2,sp[0x8]
8000472c:	10 49       	or	r9,r8
8000472e:	2f f2       	sub	r2,-1
80004730:	40 46       	lddsp	r6,sp[0x10]
80004732:	ec 09 18 00 	cp.b	r9,r6
80004736:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000473a:	30 29       	mov	r9,2
8000473c:	fa c8 f9 5c 	sub	r8,sp,-1700
80004740:	1a d8       	st.w	--sp,r8
80004742:	fa c8 f9 54 	sub	r8,sp,-1708
80004746:	1a d8       	st.w	--sp,r8
80004748:	fa c8 f9 4c 	sub	r8,sp,-1716
8000474c:	08 9c       	mov	r12,r4
8000474e:	1a d8       	st.w	--sp,r8
80004750:	04 98       	mov	r8,r2
80004752:	40 9b       	lddsp	r11,sp[0x24]
80004754:	40 aa       	lddsp	r10,sp[0x28]
80004756:	e0 a0 0b c3 	rcall	80005edc <_dtoa_r>
8000475a:	e0 40 00 47 	cp.w	r0,71
8000475e:	5f 19       	srne	r9
80004760:	e0 40 00 67 	cp.w	r0,103
80004764:	5f 18       	srne	r8
80004766:	18 96       	mov	r6,r12
80004768:	2f dd       	sub	sp,-12
8000476a:	f3 e8 00 08 	and	r8,r9,r8
8000476e:	c0 41       	brne	80004776 <_vfprintf_r+0x9aa>
80004770:	ed b5 00 00 	bld	r5,0x0
80004774:	c3 01       	brne	800047d4 <_vfprintf_r+0xa08>
80004776:	ec 02 00 0e 	add	lr,r6,r2
8000477a:	50 3e       	stdsp	sp[0xc],lr
8000477c:	40 4c       	lddsp	r12,sp[0x10]
8000477e:	58 0c       	cp.w	r12,0
80004780:	c1 50       	breq	800047aa <_vfprintf_r+0x9de>
80004782:	0d 89       	ld.ub	r9,r6[0x0]
80004784:	33 08       	mov	r8,48
80004786:	f0 09 18 00 	cp.b	r9,r8
8000478a:	c0 b1       	brne	800047a0 <_vfprintf_r+0x9d4>
8000478c:	30 08       	mov	r8,0
8000478e:	30 09       	mov	r9,0
80004790:	40 6b       	lddsp	r11,sp[0x18]
80004792:	40 7a       	lddsp	r10,sp[0x1c]
80004794:	e0 a0 20 ef 	rcall	80008972 <__avr32_f64_cmp_eq>
80004798:	fb b2 00 01 	rsubeq	r2,1
8000479c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800047a0:	40 3b       	lddsp	r11,sp[0xc]
800047a2:	fa f8 06 ac 	ld.w	r8,sp[1708]
800047a6:	10 0b       	add	r11,r8
800047a8:	50 3b       	stdsp	sp[0xc],r11
800047aa:	40 6b       	lddsp	r11,sp[0x18]
800047ac:	30 08       	mov	r8,0
800047ae:	30 09       	mov	r9,0
800047b0:	40 7a       	lddsp	r10,sp[0x1c]
800047b2:	e0 a0 20 e0 	rcall	80008972 <__avr32_f64_cmp_eq>
800047b6:	c0 90       	breq	800047c8 <_vfprintf_r+0x9fc>
800047b8:	40 3a       	lddsp	r10,sp[0xc]
800047ba:	fb 4a 06 a4 	st.w	sp[1700],r10
800047be:	c0 58       	rjmp	800047c8 <_vfprintf_r+0x9fc>
800047c0:	10 c9       	st.b	r8++,r9
800047c2:	fb 48 06 a4 	st.w	sp[1700],r8
800047c6:	c0 28       	rjmp	800047ca <_vfprintf_r+0x9fe>
800047c8:	33 09       	mov	r9,48
800047ca:	fa f8 06 a4 	ld.w	r8,sp[1700]
800047ce:	40 3e       	lddsp	lr,sp[0xc]
800047d0:	1c 38       	cp.w	r8,lr
800047d2:	cf 73       	brcs	800047c0 <_vfprintf_r+0x9f4>
800047d4:	e0 40 00 47 	cp.w	r0,71
800047d8:	5f 09       	sreq	r9
800047da:	e0 40 00 67 	cp.w	r0,103
800047de:	5f 08       	sreq	r8
800047e0:	f3 e8 10 08 	or	r8,r9,r8
800047e4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800047e8:	0c 19       	sub	r9,r6
800047ea:	50 69       	stdsp	sp[0x18],r9
800047ec:	58 08       	cp.w	r8,0
800047ee:	c0 b0       	breq	80004804 <_vfprintf_r+0xa38>
800047f0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800047f4:	5b d8       	cp.w	r8,-3
800047f6:	c0 55       	brlt	80004800 <_vfprintf_r+0xa34>
800047f8:	40 2c       	lddsp	r12,sp[0x8]
800047fa:	18 38       	cp.w	r8,r12
800047fc:	e0 8a 00 6a 	brle	800048d0 <_vfprintf_r+0xb04>
80004800:	20 20       	sub	r0,2
80004802:	c0 58       	rjmp	8000480c <_vfprintf_r+0xa40>
80004804:	e0 40 00 65 	cp.w	r0,101
80004808:	e0 89 00 46 	brgt	80004894 <_vfprintf_r+0xac8>
8000480c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004810:	fb 60 06 9c 	st.b	sp[1692],r0
80004814:	20 1b       	sub	r11,1
80004816:	fb 4b 06 ac 	st.w	sp[1708],r11
8000481a:	c0 47       	brpl	80004822 <_vfprintf_r+0xa56>
8000481c:	5c 3b       	neg	r11
8000481e:	32 d8       	mov	r8,45
80004820:	c0 28       	rjmp	80004824 <_vfprintf_r+0xa58>
80004822:	32 b8       	mov	r8,43
80004824:	fb 68 06 9d 	st.b	sp[1693],r8
80004828:	58 9b       	cp.w	r11,9
8000482a:	e0 8a 00 1d 	brle	80004864 <_vfprintf_r+0xa98>
8000482e:	fa c9 fa 35 	sub	r9,sp,-1483
80004832:	30 aa       	mov	r10,10
80004834:	12 98       	mov	r8,r9
80004836:	0e 9c       	mov	r12,r7
80004838:	0c 92       	mov	r2,r6
8000483a:	f6 0a 0c 06 	divs	r6,r11,r10
8000483e:	0e 9b       	mov	r11,r7
80004840:	2d 0b       	sub	r11,-48
80004842:	10 fb       	st.b	--r8,r11
80004844:	0c 9b       	mov	r11,r6
80004846:	58 96       	cp.w	r6,9
80004848:	fe 99 ff f9 	brgt	8000483a <_vfprintf_r+0xa6e>
8000484c:	2d 0b       	sub	r11,-48
8000484e:	18 97       	mov	r7,r12
80004850:	04 96       	mov	r6,r2
80004852:	10 fb       	st.b	--r8,r11
80004854:	fa ca f9 62 	sub	r10,sp,-1694
80004858:	c0 38       	rjmp	8000485e <_vfprintf_r+0xa92>
8000485a:	11 3b       	ld.ub	r11,r8++
8000485c:	14 cb       	st.b	r10++,r11
8000485e:	12 38       	cp.w	r8,r9
80004860:	cf d3       	brcs	8000485a <_vfprintf_r+0xa8e>
80004862:	c0 98       	rjmp	80004874 <_vfprintf_r+0xaa8>
80004864:	2d 0b       	sub	r11,-48
80004866:	33 08       	mov	r8,48
80004868:	fb 6b 06 9f 	st.b	sp[1695],r11
8000486c:	fb 68 06 9e 	st.b	sp[1694],r8
80004870:	fa ca f9 60 	sub	r10,sp,-1696
80004874:	fa c8 f9 64 	sub	r8,sp,-1692
80004878:	f4 08 01 08 	sub	r8,r10,r8
8000487c:	50 e8       	stdsp	sp[0x38],r8
8000487e:	10 92       	mov	r2,r8
80004880:	40 6b       	lddsp	r11,sp[0x18]
80004882:	16 02       	add	r2,r11
80004884:	58 1b       	cp.w	r11,1
80004886:	e0 89 00 05 	brgt	80004890 <_vfprintf_r+0xac4>
8000488a:	ed b5 00 00 	bld	r5,0x0
8000488e:	c3 51       	brne	800048f8 <_vfprintf_r+0xb2c>
80004890:	2f f2       	sub	r2,-1
80004892:	c3 38       	rjmp	800048f8 <_vfprintf_r+0xb2c>
80004894:	e0 40 00 66 	cp.w	r0,102
80004898:	c1 c1       	brne	800048d0 <_vfprintf_r+0xb04>
8000489a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000489e:	58 02       	cp.w	r2,0
800048a0:	e0 8a 00 0c 	brle	800048b8 <_vfprintf_r+0xaec>
800048a4:	40 2a       	lddsp	r10,sp[0x8]
800048a6:	58 0a       	cp.w	r10,0
800048a8:	c0 41       	brne	800048b0 <_vfprintf_r+0xae4>
800048aa:	ed b5 00 00 	bld	r5,0x0
800048ae:	c2 51       	brne	800048f8 <_vfprintf_r+0xb2c>
800048b0:	2f f2       	sub	r2,-1
800048b2:	40 29       	lddsp	r9,sp[0x8]
800048b4:	12 02       	add	r2,r9
800048b6:	c0 b8       	rjmp	800048cc <_vfprintf_r+0xb00>
800048b8:	40 28       	lddsp	r8,sp[0x8]
800048ba:	58 08       	cp.w	r8,0
800048bc:	c0 61       	brne	800048c8 <_vfprintf_r+0xafc>
800048be:	ed b5 00 00 	bld	r5,0x0
800048c2:	c0 30       	breq	800048c8 <_vfprintf_r+0xafc>
800048c4:	30 12       	mov	r2,1
800048c6:	c1 98       	rjmp	800048f8 <_vfprintf_r+0xb2c>
800048c8:	40 22       	lddsp	r2,sp[0x8]
800048ca:	2f e2       	sub	r2,-2
800048cc:	36 60       	mov	r0,102
800048ce:	c1 58       	rjmp	800048f8 <_vfprintf_r+0xb2c>
800048d0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800048d4:	40 6e       	lddsp	lr,sp[0x18]
800048d6:	1c 32       	cp.w	r2,lr
800048d8:	c0 65       	brlt	800048e4 <_vfprintf_r+0xb18>
800048da:	ed b5 00 00 	bld	r5,0x0
800048de:	f7 b2 00 ff 	subeq	r2,-1
800048e2:	c0 a8       	rjmp	800048f6 <_vfprintf_r+0xb2a>
800048e4:	e4 08 11 02 	rsub	r8,r2,2
800048e8:	40 6c       	lddsp	r12,sp[0x18]
800048ea:	58 02       	cp.w	r2,0
800048ec:	f0 02 17 a0 	movle	r2,r8
800048f0:	f9 b2 09 01 	movgt	r2,1
800048f4:	18 02       	add	r2,r12
800048f6:	36 70       	mov	r0,103
800048f8:	40 9b       	lddsp	r11,sp[0x24]
800048fa:	58 0b       	cp.w	r11,0
800048fc:	e0 80 05 94 	breq	80005424 <_vfprintf_r+0x1658>
80004900:	32 d8       	mov	r8,45
80004902:	fb 68 06 bb 	st.b	sp[1723],r8
80004906:	e0 8f 05 93 	bral	8000542c <_vfprintf_r+0x1660>
8000490a:	50 a7       	stdsp	sp[0x28],r7
8000490c:	04 94       	mov	r4,r2
8000490e:	0c 97       	mov	r7,r6
80004910:	02 92       	mov	r2,r1
80004912:	06 96       	mov	r6,r3
80004914:	40 41       	lddsp	r1,sp[0x10]
80004916:	40 93       	lddsp	r3,sp[0x24]
80004918:	0e 99       	mov	r9,r7
8000491a:	ed b5 00 05 	bld	r5,0x5
8000491e:	c4 81       	brne	800049ae <_vfprintf_r+0xbe2>
80004920:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004924:	40 3e       	lddsp	lr,sp[0xc]
80004926:	58 0e       	cp.w	lr,0
80004928:	c1 d0       	breq	80004962 <_vfprintf_r+0xb96>
8000492a:	10 36       	cp.w	r6,r8
8000492c:	c0 64       	brge	80004938 <_vfprintf_r+0xb6c>
8000492e:	fa cc f9 44 	sub	r12,sp,-1724
80004932:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004936:	c1 d8       	rjmp	80004970 <_vfprintf_r+0xba4>
80004938:	fa c8 f9 50 	sub	r8,sp,-1712
8000493c:	1a d8       	st.w	--sp,r8
8000493e:	fa c8 fa b8 	sub	r8,sp,-1352
80004942:	04 9a       	mov	r10,r2
80004944:	1a d8       	st.w	--sp,r8
80004946:	fa c8 fb b4 	sub	r8,sp,-1100
8000494a:	0c 9b       	mov	r11,r6
8000494c:	1a d8       	st.w	--sp,r8
8000494e:	08 9c       	mov	r12,r4
80004950:	fa c8 f9 40 	sub	r8,sp,-1728
80004954:	fa c9 ff b4 	sub	r9,sp,-76
80004958:	fe b0 f8 a2 	rcall	80003a9c <get_arg>
8000495c:	2f dd       	sub	sp,-12
8000495e:	78 0a       	ld.w	r10,r12[0x0]
80004960:	c2 08       	rjmp	800049a0 <_vfprintf_r+0xbd4>
80004962:	2f f7       	sub	r7,-1
80004964:	10 39       	cp.w	r9,r8
80004966:	c0 84       	brge	80004976 <_vfprintf_r+0xbaa>
80004968:	fa cb f9 44 	sub	r11,sp,-1724
8000496c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004970:	ec fa fd 88 	ld.w	r10,r6[-632]
80004974:	c1 68       	rjmp	800049a0 <_vfprintf_r+0xbd4>
80004976:	41 09       	lddsp	r9,sp[0x40]
80004978:	59 f8       	cp.w	r8,31
8000497a:	e0 89 00 10 	brgt	8000499a <_vfprintf_r+0xbce>
8000497e:	f2 ca ff fc 	sub	r10,r9,-4
80004982:	51 0a       	stdsp	sp[0x40],r10
80004984:	fa c6 f9 44 	sub	r6,sp,-1724
80004988:	72 0a       	ld.w	r10,r9[0x0]
8000498a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000498e:	f3 4a fd 88 	st.w	r9[-632],r10
80004992:	2f f8       	sub	r8,-1
80004994:	fb 48 06 b4 	st.w	sp[1716],r8
80004998:	c0 48       	rjmp	800049a0 <_vfprintf_r+0xbd4>
8000499a:	72 0a       	ld.w	r10,r9[0x0]
8000499c:	2f c9       	sub	r9,-4
8000499e:	51 09       	stdsp	sp[0x40],r9
800049a0:	40 be       	lddsp	lr,sp[0x2c]
800049a2:	1c 98       	mov	r8,lr
800049a4:	95 1e       	st.w	r10[0x4],lr
800049a6:	bf 58       	asr	r8,0x1f
800049a8:	95 08       	st.w	r10[0x0],r8
800049aa:	fe 9f fa 9f 	bral	80003ee8 <_vfprintf_r+0x11c>
800049ae:	ed b5 00 04 	bld	r5,0x4
800049b2:	c4 80       	breq	80004a42 <_vfprintf_r+0xc76>
800049b4:	e2 15 00 40 	andl	r5,0x40,COH
800049b8:	c4 50       	breq	80004a42 <_vfprintf_r+0xc76>
800049ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800049be:	40 3c       	lddsp	r12,sp[0xc]
800049c0:	58 0c       	cp.w	r12,0
800049c2:	c1 d0       	breq	800049fc <_vfprintf_r+0xc30>
800049c4:	10 36       	cp.w	r6,r8
800049c6:	c0 64       	brge	800049d2 <_vfprintf_r+0xc06>
800049c8:	fa cb f9 44 	sub	r11,sp,-1724
800049cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800049d0:	c1 d8       	rjmp	80004a0a <_vfprintf_r+0xc3e>
800049d2:	fa c8 f9 50 	sub	r8,sp,-1712
800049d6:	1a d8       	st.w	--sp,r8
800049d8:	fa c8 fa b8 	sub	r8,sp,-1352
800049dc:	04 9a       	mov	r10,r2
800049de:	1a d8       	st.w	--sp,r8
800049e0:	fa c8 fb b4 	sub	r8,sp,-1100
800049e4:	0c 9b       	mov	r11,r6
800049e6:	1a d8       	st.w	--sp,r8
800049e8:	08 9c       	mov	r12,r4
800049ea:	fa c8 f9 40 	sub	r8,sp,-1728
800049ee:	fa c9 ff b4 	sub	r9,sp,-76
800049f2:	fe b0 f8 55 	rcall	80003a9c <get_arg>
800049f6:	2f dd       	sub	sp,-12
800049f8:	78 0a       	ld.w	r10,r12[0x0]
800049fa:	c2 08       	rjmp	80004a3a <_vfprintf_r+0xc6e>
800049fc:	2f f7       	sub	r7,-1
800049fe:	10 39       	cp.w	r9,r8
80004a00:	c0 84       	brge	80004a10 <_vfprintf_r+0xc44>
80004a02:	fa ca f9 44 	sub	r10,sp,-1724
80004a06:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a0a:	ec fa fd 88 	ld.w	r10,r6[-632]
80004a0e:	c1 68       	rjmp	80004a3a <_vfprintf_r+0xc6e>
80004a10:	41 09       	lddsp	r9,sp[0x40]
80004a12:	59 f8       	cp.w	r8,31
80004a14:	e0 89 00 10 	brgt	80004a34 <_vfprintf_r+0xc68>
80004a18:	f2 ca ff fc 	sub	r10,r9,-4
80004a1c:	51 0a       	stdsp	sp[0x40],r10
80004a1e:	fa c6 f9 44 	sub	r6,sp,-1724
80004a22:	72 0a       	ld.w	r10,r9[0x0]
80004a24:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a28:	f3 4a fd 88 	st.w	r9[-632],r10
80004a2c:	2f f8       	sub	r8,-1
80004a2e:	fb 48 06 b4 	st.w	sp[1716],r8
80004a32:	c0 48       	rjmp	80004a3a <_vfprintf_r+0xc6e>
80004a34:	72 0a       	ld.w	r10,r9[0x0]
80004a36:	2f c9       	sub	r9,-4
80004a38:	51 09       	stdsp	sp[0x40],r9
80004a3a:	40 be       	lddsp	lr,sp[0x2c]
80004a3c:	b4 0e       	st.h	r10[0x0],lr
80004a3e:	fe 9f fa 55 	bral	80003ee8 <_vfprintf_r+0x11c>
80004a42:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a46:	40 3c       	lddsp	r12,sp[0xc]
80004a48:	58 0c       	cp.w	r12,0
80004a4a:	c1 d0       	breq	80004a84 <_vfprintf_r+0xcb8>
80004a4c:	10 36       	cp.w	r6,r8
80004a4e:	c0 64       	brge	80004a5a <_vfprintf_r+0xc8e>
80004a50:	fa cb f9 44 	sub	r11,sp,-1724
80004a54:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a58:	c1 d8       	rjmp	80004a92 <_vfprintf_r+0xcc6>
80004a5a:	fa c8 f9 50 	sub	r8,sp,-1712
80004a5e:	1a d8       	st.w	--sp,r8
80004a60:	fa c8 fa b8 	sub	r8,sp,-1352
80004a64:	04 9a       	mov	r10,r2
80004a66:	1a d8       	st.w	--sp,r8
80004a68:	fa c8 fb b4 	sub	r8,sp,-1100
80004a6c:	0c 9b       	mov	r11,r6
80004a6e:	1a d8       	st.w	--sp,r8
80004a70:	08 9c       	mov	r12,r4
80004a72:	fa c8 f9 40 	sub	r8,sp,-1728
80004a76:	fa c9 ff b4 	sub	r9,sp,-76
80004a7a:	fe b0 f8 11 	rcall	80003a9c <get_arg>
80004a7e:	2f dd       	sub	sp,-12
80004a80:	78 0a       	ld.w	r10,r12[0x0]
80004a82:	c2 08       	rjmp	80004ac2 <_vfprintf_r+0xcf6>
80004a84:	2f f7       	sub	r7,-1
80004a86:	10 39       	cp.w	r9,r8
80004a88:	c0 84       	brge	80004a98 <_vfprintf_r+0xccc>
80004a8a:	fa ca f9 44 	sub	r10,sp,-1724
80004a8e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004a92:	ec fa fd 88 	ld.w	r10,r6[-632]
80004a96:	c1 68       	rjmp	80004ac2 <_vfprintf_r+0xcf6>
80004a98:	41 09       	lddsp	r9,sp[0x40]
80004a9a:	59 f8       	cp.w	r8,31
80004a9c:	e0 89 00 10 	brgt	80004abc <_vfprintf_r+0xcf0>
80004aa0:	f2 ca ff fc 	sub	r10,r9,-4
80004aa4:	51 0a       	stdsp	sp[0x40],r10
80004aa6:	fa c6 f9 44 	sub	r6,sp,-1724
80004aaa:	72 0a       	ld.w	r10,r9[0x0]
80004aac:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ab0:	f3 4a fd 88 	st.w	r9[-632],r10
80004ab4:	2f f8       	sub	r8,-1
80004ab6:	fb 48 06 b4 	st.w	sp[1716],r8
80004aba:	c0 48       	rjmp	80004ac2 <_vfprintf_r+0xcf6>
80004abc:	72 0a       	ld.w	r10,r9[0x0]
80004abe:	2f c9       	sub	r9,-4
80004ac0:	51 09       	stdsp	sp[0x40],r9
80004ac2:	40 be       	lddsp	lr,sp[0x2c]
80004ac4:	95 0e       	st.w	r10[0x0],lr
80004ac6:	fe 9f fa 11 	bral	80003ee8 <_vfprintf_r+0x11c>
80004aca:	50 a7       	stdsp	sp[0x28],r7
80004acc:	50 80       	stdsp	sp[0x20],r0
80004ace:	0c 97       	mov	r7,r6
80004ad0:	04 94       	mov	r4,r2
80004ad2:	06 96       	mov	r6,r3
80004ad4:	02 92       	mov	r2,r1
80004ad6:	40 93       	lddsp	r3,sp[0x24]
80004ad8:	10 90       	mov	r0,r8
80004ada:	40 41       	lddsp	r1,sp[0x10]
80004adc:	a5 a5       	sbr	r5,0x4
80004ade:	c0 a8       	rjmp	80004af2 <_vfprintf_r+0xd26>
80004ae0:	50 a7       	stdsp	sp[0x28],r7
80004ae2:	50 80       	stdsp	sp[0x20],r0
80004ae4:	0c 97       	mov	r7,r6
80004ae6:	04 94       	mov	r4,r2
80004ae8:	06 96       	mov	r6,r3
80004aea:	02 92       	mov	r2,r1
80004aec:	40 93       	lddsp	r3,sp[0x24]
80004aee:	10 90       	mov	r0,r8
80004af0:	40 41       	lddsp	r1,sp[0x10]
80004af2:	ed b5 00 05 	bld	r5,0x5
80004af6:	c5 d1       	brne	80004bb0 <_vfprintf_r+0xde4>
80004af8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004afc:	40 3c       	lddsp	r12,sp[0xc]
80004afe:	58 0c       	cp.w	r12,0
80004b00:	c2 60       	breq	80004b4c <_vfprintf_r+0xd80>
80004b02:	10 36       	cp.w	r6,r8
80004b04:	c0 a4       	brge	80004b18 <_vfprintf_r+0xd4c>
80004b06:	fa cb f9 44 	sub	r11,sp,-1724
80004b0a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b0e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004b12:	fa e9 00 00 	st.d	sp[0],r8
80004b16:	c1 88       	rjmp	80004b46 <_vfprintf_r+0xd7a>
80004b18:	fa c8 f9 50 	sub	r8,sp,-1712
80004b1c:	1a d8       	st.w	--sp,r8
80004b1e:	fa c8 fa b8 	sub	r8,sp,-1352
80004b22:	04 9a       	mov	r10,r2
80004b24:	1a d8       	st.w	--sp,r8
80004b26:	0c 9b       	mov	r11,r6
80004b28:	fa c8 fb b4 	sub	r8,sp,-1100
80004b2c:	08 9c       	mov	r12,r4
80004b2e:	1a d8       	st.w	--sp,r8
80004b30:	fa c8 f9 40 	sub	r8,sp,-1728
80004b34:	fa c9 ff b4 	sub	r9,sp,-76
80004b38:	fe b0 f7 b2 	rcall	80003a9c <get_arg>
80004b3c:	2f dd       	sub	sp,-12
80004b3e:	f8 ea 00 00 	ld.d	r10,r12[0]
80004b42:	fa eb 00 00 	st.d	sp[0],r10
80004b46:	30 08       	mov	r8,0
80004b48:	e0 8f 03 de 	bral	80005304 <_vfprintf_r+0x1538>
80004b4c:	ee ca ff ff 	sub	r10,r7,-1
80004b50:	10 37       	cp.w	r7,r8
80004b52:	c0 b4       	brge	80004b68 <_vfprintf_r+0xd9c>
80004b54:	fa c9 f9 44 	sub	r9,sp,-1724
80004b58:	14 97       	mov	r7,r10
80004b5a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b5e:	ec ea fd 88 	ld.d	r10,r6[-632]
80004b62:	fa eb 00 00 	st.d	sp[0],r10
80004b66:	c1 88       	rjmp	80004b96 <_vfprintf_r+0xdca>
80004b68:	41 09       	lddsp	r9,sp[0x40]
80004b6a:	59 f8       	cp.w	r8,31
80004b6c:	e0 89 00 18 	brgt	80004b9c <_vfprintf_r+0xdd0>
80004b70:	f2 e6 00 00 	ld.d	r6,r9[0]
80004b74:	f2 cb ff f8 	sub	r11,r9,-8
80004b78:	fa e7 00 00 	st.d	sp[0],r6
80004b7c:	51 0b       	stdsp	sp[0x40],r11
80004b7e:	fa c6 f9 44 	sub	r6,sp,-1724
80004b82:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b86:	fa e6 00 00 	ld.d	r6,sp[0]
80004b8a:	f2 e7 fd 88 	st.d	r9[-632],r6
80004b8e:	2f f8       	sub	r8,-1
80004b90:	14 97       	mov	r7,r10
80004b92:	fb 48 06 b4 	st.w	sp[1716],r8
80004b96:	40 38       	lddsp	r8,sp[0xc]
80004b98:	e0 8f 03 b6 	bral	80005304 <_vfprintf_r+0x1538>
80004b9c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004ba0:	40 38       	lddsp	r8,sp[0xc]
80004ba2:	fa e7 00 00 	st.d	sp[0],r6
80004ba6:	2f 89       	sub	r9,-8
80004ba8:	14 97       	mov	r7,r10
80004baa:	51 09       	stdsp	sp[0x40],r9
80004bac:	e0 8f 03 ac 	bral	80005304 <_vfprintf_r+0x1538>
80004bb0:	ed b5 00 04 	bld	r5,0x4
80004bb4:	c1 61       	brne	80004be0 <_vfprintf_r+0xe14>
80004bb6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bba:	40 3e       	lddsp	lr,sp[0xc]
80004bbc:	58 0e       	cp.w	lr,0
80004bbe:	c0 80       	breq	80004bce <_vfprintf_r+0xe02>
80004bc0:	10 36       	cp.w	r6,r8
80004bc2:	c6 74       	brge	80004c90 <_vfprintf_r+0xec4>
80004bc4:	fa cc f9 44 	sub	r12,sp,-1724
80004bc8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004bcc:	c8 08       	rjmp	80004ccc <_vfprintf_r+0xf00>
80004bce:	ee ca ff ff 	sub	r10,r7,-1
80004bd2:	10 37       	cp.w	r7,r8
80004bd4:	c7 f4       	brge	80004cd2 <_vfprintf_r+0xf06>
80004bd6:	fa cb f9 44 	sub	r11,sp,-1724
80004bda:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bde:	c7 68       	rjmp	80004cca <_vfprintf_r+0xefe>
80004be0:	ed b5 00 06 	bld	r5,0x6
80004be4:	c4 a1       	brne	80004c78 <_vfprintf_r+0xeac>
80004be6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bea:	40 3c       	lddsp	r12,sp[0xc]
80004bec:	58 0c       	cp.w	r12,0
80004bee:	c1 d0       	breq	80004c28 <_vfprintf_r+0xe5c>
80004bf0:	10 36       	cp.w	r6,r8
80004bf2:	c0 64       	brge	80004bfe <_vfprintf_r+0xe32>
80004bf4:	fa cb f9 44 	sub	r11,sp,-1724
80004bf8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bfc:	c1 f8       	rjmp	80004c3a <_vfprintf_r+0xe6e>
80004bfe:	fa c8 f9 50 	sub	r8,sp,-1712
80004c02:	1a d8       	st.w	--sp,r8
80004c04:	fa c8 fa b8 	sub	r8,sp,-1352
80004c08:	1a d8       	st.w	--sp,r8
80004c0a:	fa c8 fb b4 	sub	r8,sp,-1100
80004c0e:	1a d8       	st.w	--sp,r8
80004c10:	fa c8 f9 40 	sub	r8,sp,-1728
80004c14:	fa c9 ff b4 	sub	r9,sp,-76
80004c18:	04 9a       	mov	r10,r2
80004c1a:	0c 9b       	mov	r11,r6
80004c1c:	08 9c       	mov	r12,r4
80004c1e:	fe b0 f7 3f 	rcall	80003a9c <get_arg>
80004c22:	2f dd       	sub	sp,-12
80004c24:	98 18       	ld.sh	r8,r12[0x2]
80004c26:	c2 68       	rjmp	80004c72 <_vfprintf_r+0xea6>
80004c28:	ee ca ff ff 	sub	r10,r7,-1
80004c2c:	10 37       	cp.w	r7,r8
80004c2e:	c0 94       	brge	80004c40 <_vfprintf_r+0xe74>
80004c30:	fa c9 f9 44 	sub	r9,sp,-1724
80004c34:	14 97       	mov	r7,r10
80004c36:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c3a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004c3e:	c1 a8       	rjmp	80004c72 <_vfprintf_r+0xea6>
80004c40:	41 09       	lddsp	r9,sp[0x40]
80004c42:	59 f8       	cp.w	r8,31
80004c44:	e0 89 00 13 	brgt	80004c6a <_vfprintf_r+0xe9e>
80004c48:	f2 cb ff fc 	sub	r11,r9,-4
80004c4c:	51 0b       	stdsp	sp[0x40],r11
80004c4e:	72 09       	ld.w	r9,r9[0x0]
80004c50:	fa c6 f9 44 	sub	r6,sp,-1724
80004c54:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004c58:	2f f8       	sub	r8,-1
80004c5a:	f7 49 fd 88 	st.w	r11[-632],r9
80004c5e:	fb 48 06 b4 	st.w	sp[1716],r8
80004c62:	14 97       	mov	r7,r10
80004c64:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004c68:	c0 58       	rjmp	80004c72 <_vfprintf_r+0xea6>
80004c6a:	92 18       	ld.sh	r8,r9[0x2]
80004c6c:	14 97       	mov	r7,r10
80004c6e:	2f c9       	sub	r9,-4
80004c70:	51 09       	stdsp	sp[0x40],r9
80004c72:	5c 78       	castu.h	r8
80004c74:	50 18       	stdsp	sp[0x4],r8
80004c76:	c4 68       	rjmp	80004d02 <_vfprintf_r+0xf36>
80004c78:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c7c:	40 3c       	lddsp	r12,sp[0xc]
80004c7e:	58 0c       	cp.w	r12,0
80004c80:	c1 d0       	breq	80004cba <_vfprintf_r+0xeee>
80004c82:	10 36       	cp.w	r6,r8
80004c84:	c0 64       	brge	80004c90 <_vfprintf_r+0xec4>
80004c86:	fa cb f9 44 	sub	r11,sp,-1724
80004c8a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c8e:	c1 f8       	rjmp	80004ccc <_vfprintf_r+0xf00>
80004c90:	fa c8 f9 50 	sub	r8,sp,-1712
80004c94:	1a d8       	st.w	--sp,r8
80004c96:	fa c8 fa b8 	sub	r8,sp,-1352
80004c9a:	0c 9b       	mov	r11,r6
80004c9c:	1a d8       	st.w	--sp,r8
80004c9e:	fa c8 fb b4 	sub	r8,sp,-1100
80004ca2:	04 9a       	mov	r10,r2
80004ca4:	1a d8       	st.w	--sp,r8
80004ca6:	08 9c       	mov	r12,r4
80004ca8:	fa c8 f9 40 	sub	r8,sp,-1728
80004cac:	fa c9 ff b4 	sub	r9,sp,-76
80004cb0:	fe b0 f6 f6 	rcall	80003a9c <get_arg>
80004cb4:	2f dd       	sub	sp,-12
80004cb6:	78 0b       	ld.w	r11,r12[0x0]
80004cb8:	c2 48       	rjmp	80004d00 <_vfprintf_r+0xf34>
80004cba:	ee ca ff ff 	sub	r10,r7,-1
80004cbe:	10 37       	cp.w	r7,r8
80004cc0:	c0 94       	brge	80004cd2 <_vfprintf_r+0xf06>
80004cc2:	fa c9 f9 44 	sub	r9,sp,-1724
80004cc6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004cca:	14 97       	mov	r7,r10
80004ccc:	ec fb fd 88 	ld.w	r11,r6[-632]
80004cd0:	c1 88       	rjmp	80004d00 <_vfprintf_r+0xf34>
80004cd2:	41 09       	lddsp	r9,sp[0x40]
80004cd4:	59 f8       	cp.w	r8,31
80004cd6:	e0 89 00 11 	brgt	80004cf8 <_vfprintf_r+0xf2c>
80004cda:	f2 cb ff fc 	sub	r11,r9,-4
80004cde:	51 0b       	stdsp	sp[0x40],r11
80004ce0:	fa c6 f9 44 	sub	r6,sp,-1724
80004ce4:	72 0b       	ld.w	r11,r9[0x0]
80004ce6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004cea:	f3 4b fd 88 	st.w	r9[-632],r11
80004cee:	2f f8       	sub	r8,-1
80004cf0:	14 97       	mov	r7,r10
80004cf2:	fb 48 06 b4 	st.w	sp[1716],r8
80004cf6:	c0 58       	rjmp	80004d00 <_vfprintf_r+0xf34>
80004cf8:	72 0b       	ld.w	r11,r9[0x0]
80004cfa:	14 97       	mov	r7,r10
80004cfc:	2f c9       	sub	r9,-4
80004cfe:	51 09       	stdsp	sp[0x40],r9
80004d00:	50 1b       	stdsp	sp[0x4],r11
80004d02:	30 0e       	mov	lr,0
80004d04:	50 0e       	stdsp	sp[0x0],lr
80004d06:	1c 98       	mov	r8,lr
80004d08:	e0 8f 02 fe 	bral	80005304 <_vfprintf_r+0x1538>
80004d0c:	50 a7       	stdsp	sp[0x28],r7
80004d0e:	50 80       	stdsp	sp[0x20],r0
80004d10:	0c 97       	mov	r7,r6
80004d12:	04 94       	mov	r4,r2
80004d14:	06 96       	mov	r6,r3
80004d16:	02 92       	mov	r2,r1
80004d18:	40 93       	lddsp	r3,sp[0x24]
80004d1a:	40 41       	lddsp	r1,sp[0x10]
80004d1c:	0e 99       	mov	r9,r7
80004d1e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d22:	40 3c       	lddsp	r12,sp[0xc]
80004d24:	58 0c       	cp.w	r12,0
80004d26:	c1 d0       	breq	80004d60 <_vfprintf_r+0xf94>
80004d28:	10 36       	cp.w	r6,r8
80004d2a:	c0 64       	brge	80004d36 <_vfprintf_r+0xf6a>
80004d2c:	fa cb f9 44 	sub	r11,sp,-1724
80004d30:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d34:	c1 d8       	rjmp	80004d6e <_vfprintf_r+0xfa2>
80004d36:	fa c8 f9 50 	sub	r8,sp,-1712
80004d3a:	1a d8       	st.w	--sp,r8
80004d3c:	fa c8 fa b8 	sub	r8,sp,-1352
80004d40:	1a d8       	st.w	--sp,r8
80004d42:	fa c8 fb b4 	sub	r8,sp,-1100
80004d46:	1a d8       	st.w	--sp,r8
80004d48:	fa c9 ff b4 	sub	r9,sp,-76
80004d4c:	fa c8 f9 40 	sub	r8,sp,-1728
80004d50:	04 9a       	mov	r10,r2
80004d52:	0c 9b       	mov	r11,r6
80004d54:	08 9c       	mov	r12,r4
80004d56:	fe b0 f6 a3 	rcall	80003a9c <get_arg>
80004d5a:	2f dd       	sub	sp,-12
80004d5c:	78 09       	ld.w	r9,r12[0x0]
80004d5e:	c2 18       	rjmp	80004da0 <_vfprintf_r+0xfd4>
80004d60:	2f f7       	sub	r7,-1
80004d62:	10 39       	cp.w	r9,r8
80004d64:	c0 84       	brge	80004d74 <_vfprintf_r+0xfa8>
80004d66:	fa ca f9 44 	sub	r10,sp,-1724
80004d6a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004d6e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004d72:	c1 78       	rjmp	80004da0 <_vfprintf_r+0xfd4>
80004d74:	41 09       	lddsp	r9,sp[0x40]
80004d76:	59 f8       	cp.w	r8,31
80004d78:	e0 89 00 10 	brgt	80004d98 <_vfprintf_r+0xfcc>
80004d7c:	f2 ca ff fc 	sub	r10,r9,-4
80004d80:	51 0a       	stdsp	sp[0x40],r10
80004d82:	fa c6 f9 44 	sub	r6,sp,-1724
80004d86:	72 09       	ld.w	r9,r9[0x0]
80004d88:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004d8c:	f5 49 fd 88 	st.w	r10[-632],r9
80004d90:	2f f8       	sub	r8,-1
80004d92:	fb 48 06 b4 	st.w	sp[1716],r8
80004d96:	c0 58       	rjmp	80004da0 <_vfprintf_r+0xfd4>
80004d98:	f2 c8 ff fc 	sub	r8,r9,-4
80004d9c:	51 08       	stdsp	sp[0x40],r8
80004d9e:	72 09       	ld.w	r9,r9[0x0]
80004da0:	33 08       	mov	r8,48
80004da2:	fb 68 06 b8 	st.b	sp[1720],r8
80004da6:	37 88       	mov	r8,120
80004da8:	30 0e       	mov	lr,0
80004daa:	fb 68 06 b9 	st.b	sp[1721],r8
80004dae:	fe cc b5 3a 	sub	r12,pc,-19142
80004db2:	50 19       	stdsp	sp[0x4],r9
80004db4:	a1 b5       	sbr	r5,0x1
80004db6:	50 0e       	stdsp	sp[0x0],lr
80004db8:	50 dc       	stdsp	sp[0x34],r12
80004dba:	30 28       	mov	r8,2
80004dbc:	37 80       	mov	r0,120
80004dbe:	e0 8f 02 a3 	bral	80005304 <_vfprintf_r+0x1538>
80004dc2:	50 a7       	stdsp	sp[0x28],r7
80004dc4:	50 80       	stdsp	sp[0x20],r0
80004dc6:	10 90       	mov	r0,r8
80004dc8:	30 08       	mov	r8,0
80004dca:	fb 68 06 bb 	st.b	sp[1723],r8
80004dce:	0c 97       	mov	r7,r6
80004dd0:	04 94       	mov	r4,r2
80004dd2:	06 96       	mov	r6,r3
80004dd4:	02 92       	mov	r2,r1
80004dd6:	40 93       	lddsp	r3,sp[0x24]
80004dd8:	40 41       	lddsp	r1,sp[0x10]
80004dda:	0e 99       	mov	r9,r7
80004ddc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004de0:	40 3b       	lddsp	r11,sp[0xc]
80004de2:	58 0b       	cp.w	r11,0
80004de4:	c1 d0       	breq	80004e1e <_vfprintf_r+0x1052>
80004de6:	10 36       	cp.w	r6,r8
80004de8:	c0 64       	brge	80004df4 <_vfprintf_r+0x1028>
80004dea:	fa ca f9 44 	sub	r10,sp,-1724
80004dee:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004df2:	c1 d8       	rjmp	80004e2c <_vfprintf_r+0x1060>
80004df4:	fa c8 f9 50 	sub	r8,sp,-1712
80004df8:	1a d8       	st.w	--sp,r8
80004dfa:	fa c8 fa b8 	sub	r8,sp,-1352
80004dfe:	1a d8       	st.w	--sp,r8
80004e00:	fa c8 fb b4 	sub	r8,sp,-1100
80004e04:	0c 9b       	mov	r11,r6
80004e06:	1a d8       	st.w	--sp,r8
80004e08:	04 9a       	mov	r10,r2
80004e0a:	fa c8 f9 40 	sub	r8,sp,-1728
80004e0e:	fa c9 ff b4 	sub	r9,sp,-76
80004e12:	08 9c       	mov	r12,r4
80004e14:	fe b0 f6 44 	rcall	80003a9c <get_arg>
80004e18:	2f dd       	sub	sp,-12
80004e1a:	78 06       	ld.w	r6,r12[0x0]
80004e1c:	c2 08       	rjmp	80004e5c <_vfprintf_r+0x1090>
80004e1e:	2f f7       	sub	r7,-1
80004e20:	10 39       	cp.w	r9,r8
80004e22:	c0 84       	brge	80004e32 <_vfprintf_r+0x1066>
80004e24:	fa c9 f9 44 	sub	r9,sp,-1724
80004e28:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e2c:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004e30:	c1 68       	rjmp	80004e5c <_vfprintf_r+0x1090>
80004e32:	41 09       	lddsp	r9,sp[0x40]
80004e34:	59 f8       	cp.w	r8,31
80004e36:	e0 89 00 10 	brgt	80004e56 <_vfprintf_r+0x108a>
80004e3a:	f2 ca ff fc 	sub	r10,r9,-4
80004e3e:	51 0a       	stdsp	sp[0x40],r10
80004e40:	72 06       	ld.w	r6,r9[0x0]
80004e42:	fa ce f9 44 	sub	lr,sp,-1724
80004e46:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004e4a:	f3 46 fd 88 	st.w	r9[-632],r6
80004e4e:	2f f8       	sub	r8,-1
80004e50:	fb 48 06 b4 	st.w	sp[1716],r8
80004e54:	c0 48       	rjmp	80004e5c <_vfprintf_r+0x1090>
80004e56:	72 06       	ld.w	r6,r9[0x0]
80004e58:	2f c9       	sub	r9,-4
80004e5a:	51 09       	stdsp	sp[0x40],r9
80004e5c:	40 2c       	lddsp	r12,sp[0x8]
80004e5e:	58 0c       	cp.w	r12,0
80004e60:	c1 05       	brlt	80004e80 <_vfprintf_r+0x10b4>
80004e62:	18 9a       	mov	r10,r12
80004e64:	30 0b       	mov	r11,0
80004e66:	0c 9c       	mov	r12,r6
80004e68:	e0 a0 14 58 	rcall	80007718 <memchr>
80004e6c:	e0 80 02 df 	breq	8000542a <_vfprintf_r+0x165e>
80004e70:	f8 06 01 02 	sub	r2,r12,r6
80004e74:	40 2b       	lddsp	r11,sp[0x8]
80004e76:	16 32       	cp.w	r2,r11
80004e78:	e0 89 02 d9 	brgt	8000542a <_vfprintf_r+0x165e>
80004e7c:	e0 8f 02 d4 	bral	80005424 <_vfprintf_r+0x1658>
80004e80:	30 0a       	mov	r10,0
80004e82:	0c 9c       	mov	r12,r6
80004e84:	50 2a       	stdsp	sp[0x8],r10
80004e86:	e0 a0 19 33 	rcall	800080ec <strlen>
80004e8a:	18 92       	mov	r2,r12
80004e8c:	e0 8f 02 d2 	bral	80005430 <_vfprintf_r+0x1664>
80004e90:	50 a7       	stdsp	sp[0x28],r7
80004e92:	50 80       	stdsp	sp[0x20],r0
80004e94:	0c 97       	mov	r7,r6
80004e96:	04 94       	mov	r4,r2
80004e98:	06 96       	mov	r6,r3
80004e9a:	02 92       	mov	r2,r1
80004e9c:	40 93       	lddsp	r3,sp[0x24]
80004e9e:	10 90       	mov	r0,r8
80004ea0:	40 41       	lddsp	r1,sp[0x10]
80004ea2:	a5 a5       	sbr	r5,0x4
80004ea4:	c0 a8       	rjmp	80004eb8 <_vfprintf_r+0x10ec>
80004ea6:	50 a7       	stdsp	sp[0x28],r7
80004ea8:	50 80       	stdsp	sp[0x20],r0
80004eaa:	0c 97       	mov	r7,r6
80004eac:	04 94       	mov	r4,r2
80004eae:	06 96       	mov	r6,r3
80004eb0:	02 92       	mov	r2,r1
80004eb2:	40 93       	lddsp	r3,sp[0x24]
80004eb4:	10 90       	mov	r0,r8
80004eb6:	40 41       	lddsp	r1,sp[0x10]
80004eb8:	ed b5 00 05 	bld	r5,0x5
80004ebc:	c5 61       	brne	80004f68 <_vfprintf_r+0x119c>
80004ebe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ec2:	40 39       	lddsp	r9,sp[0xc]
80004ec4:	58 09       	cp.w	r9,0
80004ec6:	c2 10       	breq	80004f08 <_vfprintf_r+0x113c>
80004ec8:	10 36       	cp.w	r6,r8
80004eca:	c0 74       	brge	80004ed8 <_vfprintf_r+0x110c>
80004ecc:	fa c8 f9 44 	sub	r8,sp,-1724
80004ed0:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004ed4:	c2 38       	rjmp	80004f1a <_vfprintf_r+0x114e>
80004ed6:	d7 03       	nop
80004ed8:	fa c8 f9 50 	sub	r8,sp,-1712
80004edc:	1a d8       	st.w	--sp,r8
80004ede:	fa c8 fa b8 	sub	r8,sp,-1352
80004ee2:	1a d8       	st.w	--sp,r8
80004ee4:	fa c8 fb b4 	sub	r8,sp,-1100
80004ee8:	1a d8       	st.w	--sp,r8
80004eea:	fa c8 f9 40 	sub	r8,sp,-1728
80004eee:	fa c9 ff b4 	sub	r9,sp,-76
80004ef2:	04 9a       	mov	r10,r2
80004ef4:	0c 9b       	mov	r11,r6
80004ef6:	08 9c       	mov	r12,r4
80004ef8:	fe b0 f5 d2 	rcall	80003a9c <get_arg>
80004efc:	2f dd       	sub	sp,-12
80004efe:	f8 e8 00 00 	ld.d	r8,r12[0]
80004f02:	fa e9 00 00 	st.d	sp[0],r8
80004f06:	c2 e8       	rjmp	80004f62 <_vfprintf_r+0x1196>
80004f08:	ee ca ff ff 	sub	r10,r7,-1
80004f0c:	10 37       	cp.w	r7,r8
80004f0e:	c0 b4       	brge	80004f24 <_vfprintf_r+0x1158>
80004f10:	fa c8 f9 44 	sub	r8,sp,-1724
80004f14:	14 97       	mov	r7,r10
80004f16:	f0 06 00 36 	add	r6,r8,r6<<0x3
80004f1a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004f1e:	fa eb 00 00 	st.d	sp[0],r10
80004f22:	c2 08       	rjmp	80004f62 <_vfprintf_r+0x1196>
80004f24:	41 09       	lddsp	r9,sp[0x40]
80004f26:	59 f8       	cp.w	r8,31
80004f28:	e0 89 00 16 	brgt	80004f54 <_vfprintf_r+0x1188>
80004f2c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f30:	f2 cb ff f8 	sub	r11,r9,-8
80004f34:	fa e7 00 00 	st.d	sp[0],r6
80004f38:	51 0b       	stdsp	sp[0x40],r11
80004f3a:	fa c6 f9 44 	sub	r6,sp,-1724
80004f3e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f42:	fa e6 00 00 	ld.d	r6,sp[0]
80004f46:	f2 e7 fd 88 	st.d	r9[-632],r6
80004f4a:	2f f8       	sub	r8,-1
80004f4c:	14 97       	mov	r7,r10
80004f4e:	fb 48 06 b4 	st.w	sp[1716],r8
80004f52:	c0 88       	rjmp	80004f62 <_vfprintf_r+0x1196>
80004f54:	f2 e6 00 00 	ld.d	r6,r9[0]
80004f58:	2f 89       	sub	r9,-8
80004f5a:	fa e7 00 00 	st.d	sp[0],r6
80004f5e:	51 09       	stdsp	sp[0x40],r9
80004f60:	14 97       	mov	r7,r10
80004f62:	30 18       	mov	r8,1
80004f64:	e0 8f 01 d0 	bral	80005304 <_vfprintf_r+0x1538>
80004f68:	ed b5 00 04 	bld	r5,0x4
80004f6c:	c1 61       	brne	80004f98 <_vfprintf_r+0x11cc>
80004f6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f72:	40 3e       	lddsp	lr,sp[0xc]
80004f74:	58 0e       	cp.w	lr,0
80004f76:	c0 80       	breq	80004f86 <_vfprintf_r+0x11ba>
80004f78:	10 36       	cp.w	r6,r8
80004f7a:	c6 74       	brge	80005048 <_vfprintf_r+0x127c>
80004f7c:	fa cc f9 44 	sub	r12,sp,-1724
80004f80:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004f84:	c8 08       	rjmp	80005084 <_vfprintf_r+0x12b8>
80004f86:	ee ca ff ff 	sub	r10,r7,-1
80004f8a:	10 37       	cp.w	r7,r8
80004f8c:	c7 f4       	brge	8000508a <_vfprintf_r+0x12be>
80004f8e:	fa cb f9 44 	sub	r11,sp,-1724
80004f92:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f96:	c7 68       	rjmp	80005082 <_vfprintf_r+0x12b6>
80004f98:	ed b5 00 06 	bld	r5,0x6
80004f9c:	c4 a1       	brne	80005030 <_vfprintf_r+0x1264>
80004f9e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fa2:	40 3c       	lddsp	r12,sp[0xc]
80004fa4:	58 0c       	cp.w	r12,0
80004fa6:	c1 d0       	breq	80004fe0 <_vfprintf_r+0x1214>
80004fa8:	10 36       	cp.w	r6,r8
80004faa:	c0 64       	brge	80004fb6 <_vfprintf_r+0x11ea>
80004fac:	fa cb f9 44 	sub	r11,sp,-1724
80004fb0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004fb4:	c1 f8       	rjmp	80004ff2 <_vfprintf_r+0x1226>
80004fb6:	fa c8 f9 50 	sub	r8,sp,-1712
80004fba:	1a d8       	st.w	--sp,r8
80004fbc:	fa c8 fa b8 	sub	r8,sp,-1352
80004fc0:	1a d8       	st.w	--sp,r8
80004fc2:	fa c8 fb b4 	sub	r8,sp,-1100
80004fc6:	1a d8       	st.w	--sp,r8
80004fc8:	fa c8 f9 40 	sub	r8,sp,-1728
80004fcc:	fa c9 ff b4 	sub	r9,sp,-76
80004fd0:	04 9a       	mov	r10,r2
80004fd2:	0c 9b       	mov	r11,r6
80004fd4:	08 9c       	mov	r12,r4
80004fd6:	fe b0 f5 63 	rcall	80003a9c <get_arg>
80004fda:	2f dd       	sub	sp,-12
80004fdc:	98 18       	ld.sh	r8,r12[0x2]
80004fde:	c2 68       	rjmp	8000502a <_vfprintf_r+0x125e>
80004fe0:	ee ca ff ff 	sub	r10,r7,-1
80004fe4:	10 37       	cp.w	r7,r8
80004fe6:	c0 94       	brge	80004ff8 <_vfprintf_r+0x122c>
80004fe8:	fa c9 f9 44 	sub	r9,sp,-1724
80004fec:	14 97       	mov	r7,r10
80004fee:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ff2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004ff6:	c1 a8       	rjmp	8000502a <_vfprintf_r+0x125e>
80004ff8:	41 09       	lddsp	r9,sp[0x40]
80004ffa:	59 f8       	cp.w	r8,31
80004ffc:	e0 89 00 13 	brgt	80005022 <_vfprintf_r+0x1256>
80005000:	f2 cb ff fc 	sub	r11,r9,-4
80005004:	51 0b       	stdsp	sp[0x40],r11
80005006:	72 09       	ld.w	r9,r9[0x0]
80005008:	fa c6 f9 44 	sub	r6,sp,-1724
8000500c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005010:	2f f8       	sub	r8,-1
80005012:	f7 49 fd 88 	st.w	r11[-632],r9
80005016:	fb 48 06 b4 	st.w	sp[1716],r8
8000501a:	14 97       	mov	r7,r10
8000501c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005020:	c0 58       	rjmp	8000502a <_vfprintf_r+0x125e>
80005022:	92 18       	ld.sh	r8,r9[0x2]
80005024:	14 97       	mov	r7,r10
80005026:	2f c9       	sub	r9,-4
80005028:	51 09       	stdsp	sp[0x40],r9
8000502a:	5c 78       	castu.h	r8
8000502c:	50 18       	stdsp	sp[0x4],r8
8000502e:	c4 68       	rjmp	800050ba <_vfprintf_r+0x12ee>
80005030:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005034:	40 3c       	lddsp	r12,sp[0xc]
80005036:	58 0c       	cp.w	r12,0
80005038:	c1 d0       	breq	80005072 <_vfprintf_r+0x12a6>
8000503a:	10 36       	cp.w	r6,r8
8000503c:	c0 64       	brge	80005048 <_vfprintf_r+0x127c>
8000503e:	fa cb f9 44 	sub	r11,sp,-1724
80005042:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005046:	c1 f8       	rjmp	80005084 <_vfprintf_r+0x12b8>
80005048:	fa c8 f9 50 	sub	r8,sp,-1712
8000504c:	1a d8       	st.w	--sp,r8
8000504e:	fa c8 fa b8 	sub	r8,sp,-1352
80005052:	0c 9b       	mov	r11,r6
80005054:	1a d8       	st.w	--sp,r8
80005056:	fa c8 fb b4 	sub	r8,sp,-1100
8000505a:	04 9a       	mov	r10,r2
8000505c:	1a d8       	st.w	--sp,r8
8000505e:	08 9c       	mov	r12,r4
80005060:	fa c8 f9 40 	sub	r8,sp,-1728
80005064:	fa c9 ff b4 	sub	r9,sp,-76
80005068:	fe b0 f5 1a 	rcall	80003a9c <get_arg>
8000506c:	2f dd       	sub	sp,-12
8000506e:	78 0b       	ld.w	r11,r12[0x0]
80005070:	c2 48       	rjmp	800050b8 <_vfprintf_r+0x12ec>
80005072:	ee ca ff ff 	sub	r10,r7,-1
80005076:	10 37       	cp.w	r7,r8
80005078:	c0 94       	brge	8000508a <_vfprintf_r+0x12be>
8000507a:	fa c9 f9 44 	sub	r9,sp,-1724
8000507e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005082:	14 97       	mov	r7,r10
80005084:	ec fb fd 88 	ld.w	r11,r6[-632]
80005088:	c1 88       	rjmp	800050b8 <_vfprintf_r+0x12ec>
8000508a:	41 09       	lddsp	r9,sp[0x40]
8000508c:	59 f8       	cp.w	r8,31
8000508e:	e0 89 00 11 	brgt	800050b0 <_vfprintf_r+0x12e4>
80005092:	f2 cb ff fc 	sub	r11,r9,-4
80005096:	51 0b       	stdsp	sp[0x40],r11
80005098:	fa c6 f9 44 	sub	r6,sp,-1724
8000509c:	72 0b       	ld.w	r11,r9[0x0]
8000509e:	ec 08 00 39 	add	r9,r6,r8<<0x3
800050a2:	f3 4b fd 88 	st.w	r9[-632],r11
800050a6:	2f f8       	sub	r8,-1
800050a8:	14 97       	mov	r7,r10
800050aa:	fb 48 06 b4 	st.w	sp[1716],r8
800050ae:	c0 58       	rjmp	800050b8 <_vfprintf_r+0x12ec>
800050b0:	72 0b       	ld.w	r11,r9[0x0]
800050b2:	14 97       	mov	r7,r10
800050b4:	2f c9       	sub	r9,-4
800050b6:	51 09       	stdsp	sp[0x40],r9
800050b8:	50 1b       	stdsp	sp[0x4],r11
800050ba:	30 0e       	mov	lr,0
800050bc:	30 18       	mov	r8,1
800050be:	50 0e       	stdsp	sp[0x0],lr
800050c0:	c2 29       	rjmp	80005304 <_vfprintf_r+0x1538>
800050c2:	50 a7       	stdsp	sp[0x28],r7
800050c4:	50 80       	stdsp	sp[0x20],r0
800050c6:	0c 97       	mov	r7,r6
800050c8:	04 94       	mov	r4,r2
800050ca:	06 96       	mov	r6,r3
800050cc:	02 92       	mov	r2,r1
800050ce:	fe cc b8 5a 	sub	r12,pc,-18342
800050d2:	40 93       	lddsp	r3,sp[0x24]
800050d4:	10 90       	mov	r0,r8
800050d6:	40 41       	lddsp	r1,sp[0x10]
800050d8:	50 dc       	stdsp	sp[0x34],r12
800050da:	ed b5 00 05 	bld	r5,0x5
800050de:	c5 51       	brne	80005188 <_vfprintf_r+0x13bc>
800050e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050e4:	40 3b       	lddsp	r11,sp[0xc]
800050e6:	58 0b       	cp.w	r11,0
800050e8:	c2 20       	breq	8000512c <_vfprintf_r+0x1360>
800050ea:	10 36       	cp.w	r6,r8
800050ec:	c0 a4       	brge	80005100 <_vfprintf_r+0x1334>
800050ee:	fa ca f9 44 	sub	r10,sp,-1724
800050f2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800050f6:	ec e8 fd 88 	ld.d	r8,r6[-632]
800050fa:	fa e9 00 00 	st.d	sp[0],r8
800050fe:	cf 28       	rjmp	800052e2 <_vfprintf_r+0x1516>
80005100:	fa c8 f9 50 	sub	r8,sp,-1712
80005104:	1a d8       	st.w	--sp,r8
80005106:	fa c8 fa b8 	sub	r8,sp,-1352
8000510a:	04 9a       	mov	r10,r2
8000510c:	1a d8       	st.w	--sp,r8
8000510e:	0c 9b       	mov	r11,r6
80005110:	fa c8 fb b4 	sub	r8,sp,-1100
80005114:	08 9c       	mov	r12,r4
80005116:	1a d8       	st.w	--sp,r8
80005118:	fa c8 f9 40 	sub	r8,sp,-1728
8000511c:	fa c9 ff b4 	sub	r9,sp,-76
80005120:	fe b0 f4 be 	rcall	80003a9c <get_arg>
80005124:	2f dd       	sub	sp,-12
80005126:	f8 ea 00 00 	ld.d	r10,r12[0]
8000512a:	c0 c8       	rjmp	80005142 <_vfprintf_r+0x1376>
8000512c:	ee ca ff ff 	sub	r10,r7,-1
80005130:	10 37       	cp.w	r7,r8
80005132:	c0 b4       	brge	80005148 <_vfprintf_r+0x137c>
80005134:	fa c9 f9 44 	sub	r9,sp,-1724
80005138:	14 97       	mov	r7,r10
8000513a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000513e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005142:	fa eb 00 00 	st.d	sp[0],r10
80005146:	cc e8       	rjmp	800052e2 <_vfprintf_r+0x1516>
80005148:	41 09       	lddsp	r9,sp[0x40]
8000514a:	59 f8       	cp.w	r8,31
8000514c:	e0 89 00 16 	brgt	80005178 <_vfprintf_r+0x13ac>
80005150:	f2 e6 00 00 	ld.d	r6,r9[0]
80005154:	f2 cb ff f8 	sub	r11,r9,-8
80005158:	fa e7 00 00 	st.d	sp[0],r6
8000515c:	51 0b       	stdsp	sp[0x40],r11
8000515e:	fa c6 f9 44 	sub	r6,sp,-1724
80005162:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005166:	fa e6 00 00 	ld.d	r6,sp[0]
8000516a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000516e:	2f f8       	sub	r8,-1
80005170:	14 97       	mov	r7,r10
80005172:	fb 48 06 b4 	st.w	sp[1716],r8
80005176:	cb 68       	rjmp	800052e2 <_vfprintf_r+0x1516>
80005178:	f2 e6 00 00 	ld.d	r6,r9[0]
8000517c:	2f 89       	sub	r9,-8
8000517e:	fa e7 00 00 	st.d	sp[0],r6
80005182:	51 09       	stdsp	sp[0x40],r9
80005184:	14 97       	mov	r7,r10
80005186:	ca e8       	rjmp	800052e2 <_vfprintf_r+0x1516>
80005188:	ed b5 00 04 	bld	r5,0x4
8000518c:	c1 71       	brne	800051ba <_vfprintf_r+0x13ee>
8000518e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005192:	40 3e       	lddsp	lr,sp[0xc]
80005194:	58 0e       	cp.w	lr,0
80005196:	c0 80       	breq	800051a6 <_vfprintf_r+0x13da>
80005198:	10 36       	cp.w	r6,r8
8000519a:	c6 94       	brge	8000526c <_vfprintf_r+0x14a0>
8000519c:	fa cc f9 44 	sub	r12,sp,-1724
800051a0:	f8 06 00 36 	add	r6,r12,r6<<0x3
800051a4:	c8 28       	rjmp	800052a8 <_vfprintf_r+0x14dc>
800051a6:	ee ca ff ff 	sub	r10,r7,-1
800051aa:	10 37       	cp.w	r7,r8
800051ac:	e0 84 00 81 	brge	800052ae <_vfprintf_r+0x14e2>
800051b0:	fa cb f9 44 	sub	r11,sp,-1724
800051b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051b8:	c7 78       	rjmp	800052a6 <_vfprintf_r+0x14da>
800051ba:	ed b5 00 06 	bld	r5,0x6
800051be:	c4 b1       	brne	80005254 <_vfprintf_r+0x1488>
800051c0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051c4:	40 3c       	lddsp	r12,sp[0xc]
800051c6:	58 0c       	cp.w	r12,0
800051c8:	c1 d0       	breq	80005202 <_vfprintf_r+0x1436>
800051ca:	10 36       	cp.w	r6,r8
800051cc:	c0 64       	brge	800051d8 <_vfprintf_r+0x140c>
800051ce:	fa cb f9 44 	sub	r11,sp,-1724
800051d2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051d6:	c1 f8       	rjmp	80005214 <_vfprintf_r+0x1448>
800051d8:	fa c8 f9 50 	sub	r8,sp,-1712
800051dc:	1a d8       	st.w	--sp,r8
800051de:	fa c8 fa b8 	sub	r8,sp,-1352
800051e2:	1a d8       	st.w	--sp,r8
800051e4:	fa c8 fb b4 	sub	r8,sp,-1100
800051e8:	1a d8       	st.w	--sp,r8
800051ea:	fa c8 f9 40 	sub	r8,sp,-1728
800051ee:	fa c9 ff b4 	sub	r9,sp,-76
800051f2:	04 9a       	mov	r10,r2
800051f4:	0c 9b       	mov	r11,r6
800051f6:	08 9c       	mov	r12,r4
800051f8:	fe b0 f4 52 	rcall	80003a9c <get_arg>
800051fc:	2f dd       	sub	sp,-12
800051fe:	98 18       	ld.sh	r8,r12[0x2]
80005200:	c2 78       	rjmp	8000524e <_vfprintf_r+0x1482>
80005202:	ee ca ff ff 	sub	r10,r7,-1
80005206:	10 37       	cp.w	r7,r8
80005208:	c0 a4       	brge	8000521c <_vfprintf_r+0x1450>
8000520a:	fa c9 f9 44 	sub	r9,sp,-1724
8000520e:	14 97       	mov	r7,r10
80005210:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005214:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005218:	c1 b8       	rjmp	8000524e <_vfprintf_r+0x1482>
8000521a:	d7 03       	nop
8000521c:	41 09       	lddsp	r9,sp[0x40]
8000521e:	59 f8       	cp.w	r8,31
80005220:	e0 89 00 13 	brgt	80005246 <_vfprintf_r+0x147a>
80005224:	f2 cb ff fc 	sub	r11,r9,-4
80005228:	51 0b       	stdsp	sp[0x40],r11
8000522a:	72 09       	ld.w	r9,r9[0x0]
8000522c:	fa c6 f9 44 	sub	r6,sp,-1724
80005230:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005234:	2f f8       	sub	r8,-1
80005236:	f7 49 fd 88 	st.w	r11[-632],r9
8000523a:	fb 48 06 b4 	st.w	sp[1716],r8
8000523e:	14 97       	mov	r7,r10
80005240:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005244:	c0 58       	rjmp	8000524e <_vfprintf_r+0x1482>
80005246:	92 18       	ld.sh	r8,r9[0x2]
80005248:	14 97       	mov	r7,r10
8000524a:	2f c9       	sub	r9,-4
8000524c:	51 09       	stdsp	sp[0x40],r9
8000524e:	5c 78       	castu.h	r8
80005250:	50 18       	stdsp	sp[0x4],r8
80005252:	c4 68       	rjmp	800052de <_vfprintf_r+0x1512>
80005254:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005258:	40 3c       	lddsp	r12,sp[0xc]
8000525a:	58 0c       	cp.w	r12,0
8000525c:	c1 d0       	breq	80005296 <_vfprintf_r+0x14ca>
8000525e:	10 36       	cp.w	r6,r8
80005260:	c0 64       	brge	8000526c <_vfprintf_r+0x14a0>
80005262:	fa cb f9 44 	sub	r11,sp,-1724
80005266:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000526a:	c1 f8       	rjmp	800052a8 <_vfprintf_r+0x14dc>
8000526c:	fa c8 f9 50 	sub	r8,sp,-1712
80005270:	1a d8       	st.w	--sp,r8
80005272:	fa c8 fa b8 	sub	r8,sp,-1352
80005276:	0c 9b       	mov	r11,r6
80005278:	1a d8       	st.w	--sp,r8
8000527a:	fa c8 fb b4 	sub	r8,sp,-1100
8000527e:	04 9a       	mov	r10,r2
80005280:	1a d8       	st.w	--sp,r8
80005282:	08 9c       	mov	r12,r4
80005284:	fa c8 f9 40 	sub	r8,sp,-1728
80005288:	fa c9 ff b4 	sub	r9,sp,-76
8000528c:	fe b0 f4 08 	rcall	80003a9c <get_arg>
80005290:	2f dd       	sub	sp,-12
80005292:	78 0b       	ld.w	r11,r12[0x0]
80005294:	c2 48       	rjmp	800052dc <_vfprintf_r+0x1510>
80005296:	ee ca ff ff 	sub	r10,r7,-1
8000529a:	10 37       	cp.w	r7,r8
8000529c:	c0 94       	brge	800052ae <_vfprintf_r+0x14e2>
8000529e:	fa c9 f9 44 	sub	r9,sp,-1724
800052a2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052a6:	14 97       	mov	r7,r10
800052a8:	ec fb fd 88 	ld.w	r11,r6[-632]
800052ac:	c1 88       	rjmp	800052dc <_vfprintf_r+0x1510>
800052ae:	41 09       	lddsp	r9,sp[0x40]
800052b0:	59 f8       	cp.w	r8,31
800052b2:	e0 89 00 11 	brgt	800052d4 <_vfprintf_r+0x1508>
800052b6:	f2 cb ff fc 	sub	r11,r9,-4
800052ba:	51 0b       	stdsp	sp[0x40],r11
800052bc:	fa c6 f9 44 	sub	r6,sp,-1724
800052c0:	72 0b       	ld.w	r11,r9[0x0]
800052c2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052c6:	f3 4b fd 88 	st.w	r9[-632],r11
800052ca:	2f f8       	sub	r8,-1
800052cc:	14 97       	mov	r7,r10
800052ce:	fb 48 06 b4 	st.w	sp[1716],r8
800052d2:	c0 58       	rjmp	800052dc <_vfprintf_r+0x1510>
800052d4:	72 0b       	ld.w	r11,r9[0x0]
800052d6:	14 97       	mov	r7,r10
800052d8:	2f c9       	sub	r9,-4
800052da:	51 09       	stdsp	sp[0x40],r9
800052dc:	50 1b       	stdsp	sp[0x4],r11
800052de:	30 0e       	mov	lr,0
800052e0:	50 0e       	stdsp	sp[0x0],lr
800052e2:	40 08       	lddsp	r8,sp[0x0]
800052e4:	40 1c       	lddsp	r12,sp[0x4]
800052e6:	18 48       	or	r8,r12
800052e8:	5f 19       	srne	r9
800052ea:	0a 98       	mov	r8,r5
800052ec:	eb e9 00 09 	and	r9,r5,r9
800052f0:	a1 b8       	sbr	r8,0x1
800052f2:	58 09       	cp.w	r9,0
800052f4:	c0 70       	breq	80005302 <_vfprintf_r+0x1536>
800052f6:	10 95       	mov	r5,r8
800052f8:	fb 60 06 b9 	st.b	sp[1721],r0
800052fc:	33 08       	mov	r8,48
800052fe:	fb 68 06 b8 	st.b	sp[1720],r8
80005302:	30 28       	mov	r8,2
80005304:	30 09       	mov	r9,0
80005306:	fb 69 06 bb 	st.b	sp[1723],r9
8000530a:	0a 99       	mov	r9,r5
8000530c:	a7 d9       	cbr	r9,0x7
8000530e:	40 2b       	lddsp	r11,sp[0x8]
80005310:	40 16       	lddsp	r6,sp[0x4]
80005312:	58 0b       	cp.w	r11,0
80005314:	5f 1a       	srne	r10
80005316:	f2 05 17 40 	movge	r5,r9
8000531a:	fa c2 f9 78 	sub	r2,sp,-1672
8000531e:	40 09       	lddsp	r9,sp[0x0]
80005320:	0c 49       	or	r9,r6
80005322:	5f 19       	srne	r9
80005324:	f5 e9 10 09 	or	r9,r10,r9
80005328:	c5 c0       	breq	800053e0 <_vfprintf_r+0x1614>
8000532a:	30 19       	mov	r9,1
8000532c:	f2 08 18 00 	cp.b	r8,r9
80005330:	c0 60       	breq	8000533c <_vfprintf_r+0x1570>
80005332:	30 29       	mov	r9,2
80005334:	f2 08 18 00 	cp.b	r8,r9
80005338:	c0 41       	brne	80005340 <_vfprintf_r+0x1574>
8000533a:	c3 c8       	rjmp	800053b2 <_vfprintf_r+0x15e6>
8000533c:	04 96       	mov	r6,r2
8000533e:	c3 08       	rjmp	8000539e <_vfprintf_r+0x15d2>
80005340:	04 96       	mov	r6,r2
80005342:	fa e8 00 00 	ld.d	r8,sp[0]
80005346:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000534a:	2d 0a       	sub	r10,-48
8000534c:	0c fa       	st.b	--r6,r10
8000534e:	f0 0b 16 03 	lsr	r11,r8,0x3
80005352:	f2 0c 16 03 	lsr	r12,r9,0x3
80005356:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000535a:	18 99       	mov	r9,r12
8000535c:	16 98       	mov	r8,r11
8000535e:	58 08       	cp.w	r8,0
80005360:	5c 29       	cpc	r9
80005362:	cf 21       	brne	80005346 <_vfprintf_r+0x157a>
80005364:	fa e9 00 00 	st.d	sp[0],r8
80005368:	ed b5 00 00 	bld	r5,0x0
8000536c:	c4 51       	brne	800053f6 <_vfprintf_r+0x162a>
8000536e:	33 09       	mov	r9,48
80005370:	f2 0a 18 00 	cp.b	r10,r9
80005374:	c4 10       	breq	800053f6 <_vfprintf_r+0x162a>
80005376:	0c f9       	st.b	--r6,r9
80005378:	c3 f8       	rjmp	800053f6 <_vfprintf_r+0x162a>
8000537a:	fa ea 00 00 	ld.d	r10,sp[0]
8000537e:	30 a8       	mov	r8,10
80005380:	30 09       	mov	r9,0
80005382:	e0 a0 1e 31 	rcall	80008fe4 <__avr32_umod64>
80005386:	30 a8       	mov	r8,10
80005388:	2d 0a       	sub	r10,-48
8000538a:	30 09       	mov	r9,0
8000538c:	ac 8a       	st.b	r6[0x0],r10
8000538e:	fa ea 00 00 	ld.d	r10,sp[0]
80005392:	e0 a0 1c f7 	rcall	80008d80 <__avr32_udiv64>
80005396:	16 99       	mov	r9,r11
80005398:	14 98       	mov	r8,r10
8000539a:	fa e9 00 00 	st.d	sp[0],r8
8000539e:	20 16       	sub	r6,1
800053a0:	fa ea 00 00 	ld.d	r10,sp[0]
800053a4:	58 9a       	cp.w	r10,9
800053a6:	5c 2b       	cpc	r11
800053a8:	fe 9b ff e9 	brhi	8000537a <_vfprintf_r+0x15ae>
800053ac:	1b f8       	ld.ub	r8,sp[0x7]
800053ae:	2d 08       	sub	r8,-48
800053b0:	c2 08       	rjmp	800053f0 <_vfprintf_r+0x1624>
800053b2:	04 96       	mov	r6,r2
800053b4:	fa e8 00 00 	ld.d	r8,sp[0]
800053b8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
800053bc:	40 de       	lddsp	lr,sp[0x34]
800053be:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
800053c2:	0c fa       	st.b	--r6,r10
800053c4:	f2 0b 16 04 	lsr	r11,r9,0x4
800053c8:	f0 0a 16 04 	lsr	r10,r8,0x4
800053cc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800053d0:	16 99       	mov	r9,r11
800053d2:	14 98       	mov	r8,r10
800053d4:	58 08       	cp.w	r8,0
800053d6:	5c 29       	cpc	r9
800053d8:	cf 01       	brne	800053b8 <_vfprintf_r+0x15ec>
800053da:	fa e9 00 00 	st.d	sp[0],r8
800053de:	c0 c8       	rjmp	800053f6 <_vfprintf_r+0x162a>
800053e0:	58 08       	cp.w	r8,0
800053e2:	c0 91       	brne	800053f4 <_vfprintf_r+0x1628>
800053e4:	ed b5 00 00 	bld	r5,0x0
800053e8:	c0 61       	brne	800053f4 <_vfprintf_r+0x1628>
800053ea:	fa c6 f9 79 	sub	r6,sp,-1671
800053ee:	33 08       	mov	r8,48
800053f0:	ac 88       	st.b	r6[0x0],r8
800053f2:	c0 28       	rjmp	800053f6 <_vfprintf_r+0x162a>
800053f4:	04 96       	mov	r6,r2
800053f6:	0c 12       	sub	r2,r6
800053f8:	c1 c8       	rjmp	80005430 <_vfprintf_r+0x1664>
800053fa:	50 a7       	stdsp	sp[0x28],r7
800053fc:	50 80       	stdsp	sp[0x20],r0
800053fe:	40 93       	lddsp	r3,sp[0x24]
80005400:	0c 97       	mov	r7,r6
80005402:	10 90       	mov	r0,r8
80005404:	04 94       	mov	r4,r2
80005406:	40 41       	lddsp	r1,sp[0x10]
80005408:	58 08       	cp.w	r8,0
8000540a:	e0 80 04 4f 	breq	80005ca8 <_vfprintf_r+0x1edc>
8000540e:	fb 68 06 60 	st.b	sp[1632],r8
80005412:	30 0c       	mov	r12,0
80005414:	30 08       	mov	r8,0
80005416:	30 12       	mov	r2,1
80005418:	fb 68 06 bb 	st.b	sp[1723],r8
8000541c:	50 2c       	stdsp	sp[0x8],r12
8000541e:	fa c6 f9 a0 	sub	r6,sp,-1632
80005422:	c0 78       	rjmp	80005430 <_vfprintf_r+0x1664>
80005424:	30 0b       	mov	r11,0
80005426:	50 2b       	stdsp	sp[0x8],r11
80005428:	c0 48       	rjmp	80005430 <_vfprintf_r+0x1664>
8000542a:	40 22       	lddsp	r2,sp[0x8]
8000542c:	30 0a       	mov	r10,0
8000542e:	50 2a       	stdsp	sp[0x8],r10
80005430:	40 29       	lddsp	r9,sp[0x8]
80005432:	e4 09 0c 49 	max	r9,r2,r9
80005436:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000543a:	50 39       	stdsp	sp[0xc],r9
8000543c:	0a 9e       	mov	lr,r5
8000543e:	30 09       	mov	r9,0
80005440:	e2 1e 00 02 	andl	lr,0x2,COH
80005444:	f2 08 18 00 	cp.b	r8,r9
80005448:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000544c:	f7 b8 01 ff 	subne	r8,-1
80005450:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005454:	0a 9b       	mov	r11,r5
80005456:	58 0e       	cp.w	lr,0
80005458:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000545c:	f7 bc 01 fe 	subne	r12,-2
80005460:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005464:	e2 1b 00 84 	andl	r11,0x84,COH
80005468:	50 fe       	stdsp	sp[0x3c],lr
8000546a:	50 9b       	stdsp	sp[0x24],r11
8000546c:	c4 71       	brne	800054fa <_vfprintf_r+0x172e>
8000546e:	40 8a       	lddsp	r10,sp[0x20]
80005470:	40 39       	lddsp	r9,sp[0xc]
80005472:	12 1a       	sub	r10,r9
80005474:	50 4a       	stdsp	sp[0x10],r10
80005476:	58 0a       	cp.w	r10,0
80005478:	e0 89 00 20 	brgt	800054b8 <_vfprintf_r+0x16ec>
8000547c:	c3 f8       	rjmp	800054fa <_vfprintf_r+0x172e>
8000547e:	2f 09       	sub	r9,-16
80005480:	2f f8       	sub	r8,-1
80005482:	fe ce bb f6 	sub	lr,pc,-17418
80005486:	31 0c       	mov	r12,16
80005488:	fb 49 06 90 	st.w	sp[1680],r9
8000548c:	87 0e       	st.w	r3[0x0],lr
8000548e:	87 1c       	st.w	r3[0x4],r12
80005490:	fb 48 06 8c 	st.w	sp[1676],r8
80005494:	58 78       	cp.w	r8,7
80005496:	e0 89 00 04 	brgt	8000549e <_vfprintf_r+0x16d2>
8000549a:	2f 83       	sub	r3,-8
8000549c:	c0 b8       	rjmp	800054b2 <_vfprintf_r+0x16e6>
8000549e:	fa ca f9 78 	sub	r10,sp,-1672
800054a2:	02 9b       	mov	r11,r1
800054a4:	08 9c       	mov	r12,r4
800054a6:	fe b0 f4 85 	rcall	80003db0 <__sprint_r>
800054aa:	e0 81 04 10 	brne	80005cca <_vfprintf_r+0x1efe>
800054ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800054b2:	40 4b       	lddsp	r11,sp[0x10]
800054b4:	21 0b       	sub	r11,16
800054b6:	50 4b       	stdsp	sp[0x10],r11
800054b8:	fa f9 06 90 	ld.w	r9,sp[1680]
800054bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054c0:	fe ca bc 34 	sub	r10,pc,-17356
800054c4:	40 4e       	lddsp	lr,sp[0x10]
800054c6:	59 0e       	cp.w	lr,16
800054c8:	fe 99 ff db 	brgt	8000547e <_vfprintf_r+0x16b2>
800054cc:	1c 09       	add	r9,lr
800054ce:	2f f8       	sub	r8,-1
800054d0:	87 0a       	st.w	r3[0x0],r10
800054d2:	fb 49 06 90 	st.w	sp[1680],r9
800054d6:	87 1e       	st.w	r3[0x4],lr
800054d8:	fb 48 06 8c 	st.w	sp[1676],r8
800054dc:	58 78       	cp.w	r8,7
800054de:	e0 89 00 04 	brgt	800054e6 <_vfprintf_r+0x171a>
800054e2:	2f 83       	sub	r3,-8
800054e4:	c0 b8       	rjmp	800054fa <_vfprintf_r+0x172e>
800054e6:	fa ca f9 78 	sub	r10,sp,-1672
800054ea:	02 9b       	mov	r11,r1
800054ec:	08 9c       	mov	r12,r4
800054ee:	fe b0 f4 61 	rcall	80003db0 <__sprint_r>
800054f2:	e0 81 03 ec 	brne	80005cca <_vfprintf_r+0x1efe>
800054f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800054fa:	30 09       	mov	r9,0
800054fc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005500:	f2 08 18 00 	cp.b	r8,r9
80005504:	c1 f0       	breq	80005542 <_vfprintf_r+0x1776>
80005506:	fa f8 06 90 	ld.w	r8,sp[1680]
8000550a:	fa c9 f9 45 	sub	r9,sp,-1723
8000550e:	2f f8       	sub	r8,-1
80005510:	87 09       	st.w	r3[0x0],r9
80005512:	fb 48 06 90 	st.w	sp[1680],r8
80005516:	30 19       	mov	r9,1
80005518:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000551c:	87 19       	st.w	r3[0x4],r9
8000551e:	2f f8       	sub	r8,-1
80005520:	fb 48 06 8c 	st.w	sp[1676],r8
80005524:	58 78       	cp.w	r8,7
80005526:	e0 89 00 04 	brgt	8000552e <_vfprintf_r+0x1762>
8000552a:	2f 83       	sub	r3,-8
8000552c:	c0 b8       	rjmp	80005542 <_vfprintf_r+0x1776>
8000552e:	fa ca f9 78 	sub	r10,sp,-1672
80005532:	02 9b       	mov	r11,r1
80005534:	08 9c       	mov	r12,r4
80005536:	fe b0 f4 3d 	rcall	80003db0 <__sprint_r>
8000553a:	e0 81 03 c8 	brne	80005cca <_vfprintf_r+0x1efe>
8000553e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005542:	40 fc       	lddsp	r12,sp[0x3c]
80005544:	58 0c       	cp.w	r12,0
80005546:	c1 f0       	breq	80005584 <_vfprintf_r+0x17b8>
80005548:	fa f8 06 90 	ld.w	r8,sp[1680]
8000554c:	fa c9 f9 48 	sub	r9,sp,-1720
80005550:	2f e8       	sub	r8,-2
80005552:	87 09       	st.w	r3[0x0],r9
80005554:	fb 48 06 90 	st.w	sp[1680],r8
80005558:	30 29       	mov	r9,2
8000555a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000555e:	87 19       	st.w	r3[0x4],r9
80005560:	2f f8       	sub	r8,-1
80005562:	fb 48 06 8c 	st.w	sp[1676],r8
80005566:	58 78       	cp.w	r8,7
80005568:	e0 89 00 04 	brgt	80005570 <_vfprintf_r+0x17a4>
8000556c:	2f 83       	sub	r3,-8
8000556e:	c0 b8       	rjmp	80005584 <_vfprintf_r+0x17b8>
80005570:	fa ca f9 78 	sub	r10,sp,-1672
80005574:	02 9b       	mov	r11,r1
80005576:	08 9c       	mov	r12,r4
80005578:	fe b0 f4 1c 	rcall	80003db0 <__sprint_r>
8000557c:	e0 81 03 a7 	brne	80005cca <_vfprintf_r+0x1efe>
80005580:	fa c3 f9 e0 	sub	r3,sp,-1568
80005584:	40 9b       	lddsp	r11,sp[0x24]
80005586:	e0 4b 00 80 	cp.w	r11,128
8000558a:	c4 71       	brne	80005618 <_vfprintf_r+0x184c>
8000558c:	40 8a       	lddsp	r10,sp[0x20]
8000558e:	40 39       	lddsp	r9,sp[0xc]
80005590:	12 1a       	sub	r10,r9
80005592:	50 4a       	stdsp	sp[0x10],r10
80005594:	58 0a       	cp.w	r10,0
80005596:	e0 89 00 20 	brgt	800055d6 <_vfprintf_r+0x180a>
8000559a:	c3 f8       	rjmp	80005618 <_vfprintf_r+0x184c>
8000559c:	2f 09       	sub	r9,-16
8000559e:	2f f8       	sub	r8,-1
800055a0:	fe ce bd 04 	sub	lr,pc,-17148
800055a4:	31 0c       	mov	r12,16
800055a6:	fb 49 06 90 	st.w	sp[1680],r9
800055aa:	87 0e       	st.w	r3[0x0],lr
800055ac:	87 1c       	st.w	r3[0x4],r12
800055ae:	fb 48 06 8c 	st.w	sp[1676],r8
800055b2:	58 78       	cp.w	r8,7
800055b4:	e0 89 00 04 	brgt	800055bc <_vfprintf_r+0x17f0>
800055b8:	2f 83       	sub	r3,-8
800055ba:	c0 b8       	rjmp	800055d0 <_vfprintf_r+0x1804>
800055bc:	fa ca f9 78 	sub	r10,sp,-1672
800055c0:	02 9b       	mov	r11,r1
800055c2:	08 9c       	mov	r12,r4
800055c4:	fe b0 f3 f6 	rcall	80003db0 <__sprint_r>
800055c8:	e0 81 03 81 	brne	80005cca <_vfprintf_r+0x1efe>
800055cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800055d0:	40 4b       	lddsp	r11,sp[0x10]
800055d2:	21 0b       	sub	r11,16
800055d4:	50 4b       	stdsp	sp[0x10],r11
800055d6:	fa f9 06 90 	ld.w	r9,sp[1680]
800055da:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055de:	fe ca bd 42 	sub	r10,pc,-17086
800055e2:	40 4e       	lddsp	lr,sp[0x10]
800055e4:	59 0e       	cp.w	lr,16
800055e6:	fe 99 ff db 	brgt	8000559c <_vfprintf_r+0x17d0>
800055ea:	1c 09       	add	r9,lr
800055ec:	2f f8       	sub	r8,-1
800055ee:	87 0a       	st.w	r3[0x0],r10
800055f0:	fb 49 06 90 	st.w	sp[1680],r9
800055f4:	87 1e       	st.w	r3[0x4],lr
800055f6:	fb 48 06 8c 	st.w	sp[1676],r8
800055fa:	58 78       	cp.w	r8,7
800055fc:	e0 89 00 04 	brgt	80005604 <_vfprintf_r+0x1838>
80005600:	2f 83       	sub	r3,-8
80005602:	c0 b8       	rjmp	80005618 <_vfprintf_r+0x184c>
80005604:	fa ca f9 78 	sub	r10,sp,-1672
80005608:	02 9b       	mov	r11,r1
8000560a:	08 9c       	mov	r12,r4
8000560c:	fe b0 f3 d2 	rcall	80003db0 <__sprint_r>
80005610:	e0 81 03 5d 	brne	80005cca <_vfprintf_r+0x1efe>
80005614:	fa c3 f9 e0 	sub	r3,sp,-1568
80005618:	40 2c       	lddsp	r12,sp[0x8]
8000561a:	04 1c       	sub	r12,r2
8000561c:	50 2c       	stdsp	sp[0x8],r12
8000561e:	58 0c       	cp.w	r12,0
80005620:	e0 89 00 20 	brgt	80005660 <_vfprintf_r+0x1894>
80005624:	c3 f8       	rjmp	800056a2 <_vfprintf_r+0x18d6>
80005626:	2f 09       	sub	r9,-16
80005628:	2f f8       	sub	r8,-1
8000562a:	fe cb bd 8e 	sub	r11,pc,-17010
8000562e:	31 0a       	mov	r10,16
80005630:	fb 49 06 90 	st.w	sp[1680],r9
80005634:	87 0b       	st.w	r3[0x0],r11
80005636:	87 1a       	st.w	r3[0x4],r10
80005638:	fb 48 06 8c 	st.w	sp[1676],r8
8000563c:	58 78       	cp.w	r8,7
8000563e:	e0 89 00 04 	brgt	80005646 <_vfprintf_r+0x187a>
80005642:	2f 83       	sub	r3,-8
80005644:	c0 b8       	rjmp	8000565a <_vfprintf_r+0x188e>
80005646:	fa ca f9 78 	sub	r10,sp,-1672
8000564a:	02 9b       	mov	r11,r1
8000564c:	08 9c       	mov	r12,r4
8000564e:	fe b0 f3 b1 	rcall	80003db0 <__sprint_r>
80005652:	e0 81 03 3c 	brne	80005cca <_vfprintf_r+0x1efe>
80005656:	fa c3 f9 e0 	sub	r3,sp,-1568
8000565a:	40 29       	lddsp	r9,sp[0x8]
8000565c:	21 09       	sub	r9,16
8000565e:	50 29       	stdsp	sp[0x8],r9
80005660:	fa f9 06 90 	ld.w	r9,sp[1680]
80005664:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005668:	fe ca bd cc 	sub	r10,pc,-16948
8000566c:	40 2e       	lddsp	lr,sp[0x8]
8000566e:	59 0e       	cp.w	lr,16
80005670:	fe 99 ff db 	brgt	80005626 <_vfprintf_r+0x185a>
80005674:	1c 09       	add	r9,lr
80005676:	2f f8       	sub	r8,-1
80005678:	87 0a       	st.w	r3[0x0],r10
8000567a:	fb 49 06 90 	st.w	sp[1680],r9
8000567e:	87 1e       	st.w	r3[0x4],lr
80005680:	fb 48 06 8c 	st.w	sp[1676],r8
80005684:	58 78       	cp.w	r8,7
80005686:	e0 89 00 04 	brgt	8000568e <_vfprintf_r+0x18c2>
8000568a:	2f 83       	sub	r3,-8
8000568c:	c0 b8       	rjmp	800056a2 <_vfprintf_r+0x18d6>
8000568e:	fa ca f9 78 	sub	r10,sp,-1672
80005692:	02 9b       	mov	r11,r1
80005694:	08 9c       	mov	r12,r4
80005696:	fe b0 f3 8d 	rcall	80003db0 <__sprint_r>
8000569a:	e0 81 03 18 	brne	80005cca <_vfprintf_r+0x1efe>
8000569e:	fa c3 f9 e0 	sub	r3,sp,-1568
800056a2:	ed b5 00 08 	bld	r5,0x8
800056a6:	c0 b0       	breq	800056bc <_vfprintf_r+0x18f0>
800056a8:	fa f8 06 90 	ld.w	r8,sp[1680]
800056ac:	87 12       	st.w	r3[0x4],r2
800056ae:	87 06       	st.w	r3[0x0],r6
800056b0:	f0 02 00 02 	add	r2,r8,r2
800056b4:	fb 42 06 90 	st.w	sp[1680],r2
800056b8:	e0 8f 01 d4 	bral	80005a60 <_vfprintf_r+0x1c94>
800056bc:	e0 40 00 65 	cp.w	r0,101
800056c0:	e0 8a 01 d6 	brle	80005a6c <_vfprintf_r+0x1ca0>
800056c4:	30 08       	mov	r8,0
800056c6:	30 09       	mov	r9,0
800056c8:	40 5b       	lddsp	r11,sp[0x14]
800056ca:	40 7a       	lddsp	r10,sp[0x1c]
800056cc:	e0 a0 19 53 	rcall	80008972 <__avr32_f64_cmp_eq>
800056d0:	c7 90       	breq	800057c2 <_vfprintf_r+0x19f6>
800056d2:	fa f8 06 90 	ld.w	r8,sp[1680]
800056d6:	fe c9 be 4e 	sub	r9,pc,-16818
800056da:	2f f8       	sub	r8,-1
800056dc:	87 09       	st.w	r3[0x0],r9
800056de:	fb 48 06 90 	st.w	sp[1680],r8
800056e2:	30 19       	mov	r9,1
800056e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056e8:	87 19       	st.w	r3[0x4],r9
800056ea:	2f f8       	sub	r8,-1
800056ec:	fb 48 06 8c 	st.w	sp[1676],r8
800056f0:	58 78       	cp.w	r8,7
800056f2:	e0 89 00 05 	brgt	800056fc <_vfprintf_r+0x1930>
800056f6:	2f 83       	sub	r3,-8
800056f8:	c0 c8       	rjmp	80005710 <_vfprintf_r+0x1944>
800056fa:	d7 03       	nop
800056fc:	fa ca f9 78 	sub	r10,sp,-1672
80005700:	02 9b       	mov	r11,r1
80005702:	08 9c       	mov	r12,r4
80005704:	fe b0 f3 56 	rcall	80003db0 <__sprint_r>
80005708:	e0 81 02 e1 	brne	80005cca <_vfprintf_r+0x1efe>
8000570c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005710:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005714:	40 6c       	lddsp	r12,sp[0x18]
80005716:	18 38       	cp.w	r8,r12
80005718:	c0 55       	brlt	80005722 <_vfprintf_r+0x1956>
8000571a:	ed b5 00 00 	bld	r5,0x0
8000571e:	e0 81 02 6b 	brne	80005bf4 <_vfprintf_r+0x1e28>
80005722:	fa f8 06 90 	ld.w	r8,sp[1680]
80005726:	2f f8       	sub	r8,-1
80005728:	40 cb       	lddsp	r11,sp[0x30]
8000572a:	fb 48 06 90 	st.w	sp[1680],r8
8000572e:	30 19       	mov	r9,1
80005730:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005734:	87 0b       	st.w	r3[0x0],r11
80005736:	2f f8       	sub	r8,-1
80005738:	87 19       	st.w	r3[0x4],r9
8000573a:	fb 48 06 8c 	st.w	sp[1676],r8
8000573e:	58 78       	cp.w	r8,7
80005740:	e0 89 00 04 	brgt	80005748 <_vfprintf_r+0x197c>
80005744:	2f 83       	sub	r3,-8
80005746:	c0 b8       	rjmp	8000575c <_vfprintf_r+0x1990>
80005748:	fa ca f9 78 	sub	r10,sp,-1672
8000574c:	02 9b       	mov	r11,r1
8000574e:	08 9c       	mov	r12,r4
80005750:	fe b0 f3 30 	rcall	80003db0 <__sprint_r>
80005754:	e0 81 02 bb 	brne	80005cca <_vfprintf_r+0x1efe>
80005758:	fa c3 f9 e0 	sub	r3,sp,-1568
8000575c:	40 66       	lddsp	r6,sp[0x18]
8000575e:	20 16       	sub	r6,1
80005760:	58 06       	cp.w	r6,0
80005762:	e0 89 00 1d 	brgt	8000579c <_vfprintf_r+0x19d0>
80005766:	e0 8f 02 47 	bral	80005bf4 <_vfprintf_r+0x1e28>
8000576a:	2f 09       	sub	r9,-16
8000576c:	2f f8       	sub	r8,-1
8000576e:	fb 49 06 90 	st.w	sp[1680],r9
80005772:	87 02       	st.w	r3[0x0],r2
80005774:	87 10       	st.w	r3[0x4],r0
80005776:	fb 48 06 8c 	st.w	sp[1676],r8
8000577a:	58 78       	cp.w	r8,7
8000577c:	e0 89 00 04 	brgt	80005784 <_vfprintf_r+0x19b8>
80005780:	2f 83       	sub	r3,-8
80005782:	c0 b8       	rjmp	80005798 <_vfprintf_r+0x19cc>
80005784:	fa ca f9 78 	sub	r10,sp,-1672
80005788:	02 9b       	mov	r11,r1
8000578a:	08 9c       	mov	r12,r4
8000578c:	fe b0 f3 12 	rcall	80003db0 <__sprint_r>
80005790:	e0 81 02 9d 	brne	80005cca <_vfprintf_r+0x1efe>
80005794:	fa c3 f9 e0 	sub	r3,sp,-1568
80005798:	21 06       	sub	r6,16
8000579a:	c0 48       	rjmp	800057a2 <_vfprintf_r+0x19d6>
8000579c:	fe c2 bf 00 	sub	r2,pc,-16640
800057a0:	31 00       	mov	r0,16
800057a2:	fa f9 06 90 	ld.w	r9,sp[1680]
800057a6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057aa:	fe ca bf 0e 	sub	r10,pc,-16626
800057ae:	59 06       	cp.w	r6,16
800057b0:	fe 99 ff dd 	brgt	8000576a <_vfprintf_r+0x199e>
800057b4:	0c 09       	add	r9,r6
800057b6:	87 0a       	st.w	r3[0x0],r10
800057b8:	fb 49 06 90 	st.w	sp[1680],r9
800057bc:	2f f8       	sub	r8,-1
800057be:	87 16       	st.w	r3[0x4],r6
800057c0:	c5 39       	rjmp	80005a66 <_vfprintf_r+0x1c9a>
800057c2:	fa fa 06 ac 	ld.w	r10,sp[1708]
800057c6:	58 0a       	cp.w	r10,0
800057c8:	e0 89 00 92 	brgt	800058ec <_vfprintf_r+0x1b20>
800057cc:	fa f8 06 90 	ld.w	r8,sp[1680]
800057d0:	fe c9 bf 48 	sub	r9,pc,-16568
800057d4:	2f f8       	sub	r8,-1
800057d6:	87 09       	st.w	r3[0x0],r9
800057d8:	fb 48 06 90 	st.w	sp[1680],r8
800057dc:	30 19       	mov	r9,1
800057de:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057e2:	87 19       	st.w	r3[0x4],r9
800057e4:	2f f8       	sub	r8,-1
800057e6:	fb 48 06 8c 	st.w	sp[1676],r8
800057ea:	58 78       	cp.w	r8,7
800057ec:	e0 89 00 04 	brgt	800057f4 <_vfprintf_r+0x1a28>
800057f0:	2f 83       	sub	r3,-8
800057f2:	c0 b8       	rjmp	80005808 <_vfprintf_r+0x1a3c>
800057f4:	fa ca f9 78 	sub	r10,sp,-1672
800057f8:	02 9b       	mov	r11,r1
800057fa:	08 9c       	mov	r12,r4
800057fc:	fe b0 f2 da 	rcall	80003db0 <__sprint_r>
80005800:	e0 81 02 65 	brne	80005cca <_vfprintf_r+0x1efe>
80005804:	fa c3 f9 e0 	sub	r3,sp,-1568
80005808:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000580c:	58 08       	cp.w	r8,0
8000580e:	c0 81       	brne	8000581e <_vfprintf_r+0x1a52>
80005810:	40 6a       	lddsp	r10,sp[0x18]
80005812:	58 0a       	cp.w	r10,0
80005814:	c0 51       	brne	8000581e <_vfprintf_r+0x1a52>
80005816:	ed b5 00 00 	bld	r5,0x0
8000581a:	e0 81 01 ed 	brne	80005bf4 <_vfprintf_r+0x1e28>
8000581e:	40 c9       	lddsp	r9,sp[0x30]
80005820:	fa f8 06 90 	ld.w	r8,sp[1680]
80005824:	2f f8       	sub	r8,-1
80005826:	87 09       	st.w	r3[0x0],r9
80005828:	fb 48 06 90 	st.w	sp[1680],r8
8000582c:	30 19       	mov	r9,1
8000582e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005832:	87 19       	st.w	r3[0x4],r9
80005834:	2f f8       	sub	r8,-1
80005836:	fb 48 06 8c 	st.w	sp[1676],r8
8000583a:	58 78       	cp.w	r8,7
8000583c:	e0 89 00 04 	brgt	80005844 <_vfprintf_r+0x1a78>
80005840:	2f 83       	sub	r3,-8
80005842:	c0 b8       	rjmp	80005858 <_vfprintf_r+0x1a8c>
80005844:	fa ca f9 78 	sub	r10,sp,-1672
80005848:	02 9b       	mov	r11,r1
8000584a:	08 9c       	mov	r12,r4
8000584c:	fe b0 f2 b2 	rcall	80003db0 <__sprint_r>
80005850:	e0 81 02 3d 	brne	80005cca <_vfprintf_r+0x1efe>
80005854:	fa c3 f9 e0 	sub	r3,sp,-1568
80005858:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000585c:	5c 32       	neg	r2
8000585e:	58 02       	cp.w	r2,0
80005860:	e0 89 00 1d 	brgt	8000589a <_vfprintf_r+0x1ace>
80005864:	c3 d8       	rjmp	800058de <_vfprintf_r+0x1b12>
80005866:	2f 09       	sub	r9,-16
80005868:	2f f8       	sub	r8,-1
8000586a:	31 0e       	mov	lr,16
8000586c:	fb 49 06 90 	st.w	sp[1680],r9
80005870:	87 00       	st.w	r3[0x0],r0
80005872:	87 1e       	st.w	r3[0x4],lr
80005874:	fb 48 06 8c 	st.w	sp[1676],r8
80005878:	58 78       	cp.w	r8,7
8000587a:	e0 89 00 04 	brgt	80005882 <_vfprintf_r+0x1ab6>
8000587e:	2f 83       	sub	r3,-8
80005880:	c0 b8       	rjmp	80005896 <_vfprintf_r+0x1aca>
80005882:	fa ca f9 78 	sub	r10,sp,-1672
80005886:	02 9b       	mov	r11,r1
80005888:	08 9c       	mov	r12,r4
8000588a:	fe b0 f2 93 	rcall	80003db0 <__sprint_r>
8000588e:	e0 81 02 1e 	brne	80005cca <_vfprintf_r+0x1efe>
80005892:	fa c3 f9 e0 	sub	r3,sp,-1568
80005896:	21 02       	sub	r2,16
80005898:	c0 38       	rjmp	8000589e <_vfprintf_r+0x1ad2>
8000589a:	fe c0 bf fe 	sub	r0,pc,-16386
8000589e:	fa f9 06 90 	ld.w	r9,sp[1680]
800058a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058a6:	fe ca c0 0a 	sub	r10,pc,-16374
800058aa:	59 02       	cp.w	r2,16
800058ac:	fe 99 ff dd 	brgt	80005866 <_vfprintf_r+0x1a9a>
800058b0:	04 09       	add	r9,r2
800058b2:	2f f8       	sub	r8,-1
800058b4:	87 0a       	st.w	r3[0x0],r10
800058b6:	fb 49 06 90 	st.w	sp[1680],r9
800058ba:	87 12       	st.w	r3[0x4],r2
800058bc:	fb 48 06 8c 	st.w	sp[1676],r8
800058c0:	58 78       	cp.w	r8,7
800058c2:	e0 89 00 04 	brgt	800058ca <_vfprintf_r+0x1afe>
800058c6:	2f 83       	sub	r3,-8
800058c8:	c0 b8       	rjmp	800058de <_vfprintf_r+0x1b12>
800058ca:	fa ca f9 78 	sub	r10,sp,-1672
800058ce:	02 9b       	mov	r11,r1
800058d0:	08 9c       	mov	r12,r4
800058d2:	fe b0 f2 6f 	rcall	80003db0 <__sprint_r>
800058d6:	e0 81 01 fa 	brne	80005cca <_vfprintf_r+0x1efe>
800058da:	fa c3 f9 e0 	sub	r3,sp,-1568
800058de:	40 6c       	lddsp	r12,sp[0x18]
800058e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800058e4:	87 06       	st.w	r3[0x0],r6
800058e6:	87 1c       	st.w	r3[0x4],r12
800058e8:	18 08       	add	r8,r12
800058ea:	cb 98       	rjmp	80005a5c <_vfprintf_r+0x1c90>
800058ec:	fa f9 06 90 	ld.w	r9,sp[1680]
800058f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800058f4:	40 6b       	lddsp	r11,sp[0x18]
800058f6:	16 3a       	cp.w	r10,r11
800058f8:	c6 f5       	brlt	800059d6 <_vfprintf_r+0x1c0a>
800058fa:	16 09       	add	r9,r11
800058fc:	2f f8       	sub	r8,-1
800058fe:	87 06       	st.w	r3[0x0],r6
80005900:	fb 49 06 90 	st.w	sp[1680],r9
80005904:	87 1b       	st.w	r3[0x4],r11
80005906:	fb 48 06 8c 	st.w	sp[1676],r8
8000590a:	58 78       	cp.w	r8,7
8000590c:	e0 89 00 04 	brgt	80005914 <_vfprintf_r+0x1b48>
80005910:	2f 83       	sub	r3,-8
80005912:	c0 b8       	rjmp	80005928 <_vfprintf_r+0x1b5c>
80005914:	fa ca f9 78 	sub	r10,sp,-1672
80005918:	02 9b       	mov	r11,r1
8000591a:	08 9c       	mov	r12,r4
8000591c:	fe b0 f2 4a 	rcall	80003db0 <__sprint_r>
80005920:	e0 81 01 d5 	brne	80005cca <_vfprintf_r+0x1efe>
80005924:	fa c3 f9 e0 	sub	r3,sp,-1568
80005928:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000592c:	40 6a       	lddsp	r10,sp[0x18]
8000592e:	14 16       	sub	r6,r10
80005930:	58 06       	cp.w	r6,0
80005932:	e0 89 00 1c 	brgt	8000596a <_vfprintf_r+0x1b9e>
80005936:	c3 d8       	rjmp	800059b0 <_vfprintf_r+0x1be4>
80005938:	2f 09       	sub	r9,-16
8000593a:	2f f8       	sub	r8,-1
8000593c:	fb 49 06 90 	st.w	sp[1680],r9
80005940:	87 02       	st.w	r3[0x0],r2
80005942:	87 10       	st.w	r3[0x4],r0
80005944:	fb 48 06 8c 	st.w	sp[1676],r8
80005948:	58 78       	cp.w	r8,7
8000594a:	e0 89 00 04 	brgt	80005952 <_vfprintf_r+0x1b86>
8000594e:	2f 83       	sub	r3,-8
80005950:	c0 b8       	rjmp	80005966 <_vfprintf_r+0x1b9a>
80005952:	fa ca f9 78 	sub	r10,sp,-1672
80005956:	02 9b       	mov	r11,r1
80005958:	08 9c       	mov	r12,r4
8000595a:	fe b0 f2 2b 	rcall	80003db0 <__sprint_r>
8000595e:	e0 81 01 b6 	brne	80005cca <_vfprintf_r+0x1efe>
80005962:	fa c3 f9 e0 	sub	r3,sp,-1568
80005966:	21 06       	sub	r6,16
80005968:	c0 48       	rjmp	80005970 <_vfprintf_r+0x1ba4>
8000596a:	fe c2 c0 ce 	sub	r2,pc,-16178
8000596e:	31 00       	mov	r0,16
80005970:	fa f9 06 90 	ld.w	r9,sp[1680]
80005974:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005978:	fe ca c0 dc 	sub	r10,pc,-16164
8000597c:	59 06       	cp.w	r6,16
8000597e:	fe 99 ff dd 	brgt	80005938 <_vfprintf_r+0x1b6c>
80005982:	0c 09       	add	r9,r6
80005984:	2f f8       	sub	r8,-1
80005986:	87 0a       	st.w	r3[0x0],r10
80005988:	fb 49 06 90 	st.w	sp[1680],r9
8000598c:	87 16       	st.w	r3[0x4],r6
8000598e:	fb 48 06 8c 	st.w	sp[1676],r8
80005992:	58 78       	cp.w	r8,7
80005994:	e0 89 00 04 	brgt	8000599c <_vfprintf_r+0x1bd0>
80005998:	2f 83       	sub	r3,-8
8000599a:	c0 b8       	rjmp	800059b0 <_vfprintf_r+0x1be4>
8000599c:	fa ca f9 78 	sub	r10,sp,-1672
800059a0:	02 9b       	mov	r11,r1
800059a2:	08 9c       	mov	r12,r4
800059a4:	fe b0 f2 06 	rcall	80003db0 <__sprint_r>
800059a8:	e0 81 01 91 	brne	80005cca <_vfprintf_r+0x1efe>
800059ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800059b0:	ed b5 00 00 	bld	r5,0x0
800059b4:	e0 81 01 20 	brne	80005bf4 <_vfprintf_r+0x1e28>
800059b8:	40 c9       	lddsp	r9,sp[0x30]
800059ba:	fa f8 06 90 	ld.w	r8,sp[1680]
800059be:	2f f8       	sub	r8,-1
800059c0:	87 09       	st.w	r3[0x0],r9
800059c2:	fb 48 06 90 	st.w	sp[1680],r8
800059c6:	30 19       	mov	r9,1
800059c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059cc:	87 19       	st.w	r3[0x4],r9
800059ce:	2f f8       	sub	r8,-1
800059d0:	fb 48 06 8c 	st.w	sp[1676],r8
800059d4:	c0 29       	rjmp	80005bd8 <_vfprintf_r+0x1e0c>
800059d6:	14 09       	add	r9,r10
800059d8:	2f f8       	sub	r8,-1
800059da:	fb 49 06 90 	st.w	sp[1680],r9
800059de:	87 06       	st.w	r3[0x0],r6
800059e0:	87 1a       	st.w	r3[0x4],r10
800059e2:	fb 48 06 8c 	st.w	sp[1676],r8
800059e6:	58 78       	cp.w	r8,7
800059e8:	e0 89 00 04 	brgt	800059f0 <_vfprintf_r+0x1c24>
800059ec:	2f 83       	sub	r3,-8
800059ee:	c0 b8       	rjmp	80005a04 <_vfprintf_r+0x1c38>
800059f0:	fa ca f9 78 	sub	r10,sp,-1672
800059f4:	02 9b       	mov	r11,r1
800059f6:	08 9c       	mov	r12,r4
800059f8:	fe b0 f1 dc 	rcall	80003db0 <__sprint_r>
800059fc:	e0 81 01 67 	brne	80005cca <_vfprintf_r+0x1efe>
80005a00:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a04:	40 c8       	lddsp	r8,sp[0x30]
80005a06:	87 08       	st.w	r3[0x0],r8
80005a08:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a0c:	2f f8       	sub	r8,-1
80005a0e:	30 19       	mov	r9,1
80005a10:	fb 48 06 90 	st.w	sp[1680],r8
80005a14:	87 19       	st.w	r3[0x4],r9
80005a16:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a1a:	2f f8       	sub	r8,-1
80005a1c:	fb 48 06 8c 	st.w	sp[1676],r8
80005a20:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005a24:	58 78       	cp.w	r8,7
80005a26:	e0 89 00 04 	brgt	80005a2e <_vfprintf_r+0x1c62>
80005a2a:	2f 83       	sub	r3,-8
80005a2c:	c0 b8       	rjmp	80005a42 <_vfprintf_r+0x1c76>
80005a2e:	fa ca f9 78 	sub	r10,sp,-1672
80005a32:	02 9b       	mov	r11,r1
80005a34:	08 9c       	mov	r12,r4
80005a36:	fe b0 f1 bd 	rcall	80003db0 <__sprint_r>
80005a3a:	e0 81 01 48 	brne	80005cca <_vfprintf_r+0x1efe>
80005a3e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a42:	04 06       	add	r6,r2
80005a44:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005a48:	87 06       	st.w	r3[0x0],r6
80005a4a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a4e:	40 66       	lddsp	r6,sp[0x18]
80005a50:	40 6e       	lddsp	lr,sp[0x18]
80005a52:	10 16       	sub	r6,r8
80005a54:	f2 08 01 08 	sub	r8,r9,r8
80005a58:	87 16       	st.w	r3[0x4],r6
80005a5a:	1c 08       	add	r8,lr
80005a5c:	fb 48 06 90 	st.w	sp[1680],r8
80005a60:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a64:	2f f8       	sub	r8,-1
80005a66:	fb 48 06 8c 	st.w	sp[1676],r8
80005a6a:	cb 78       	rjmp	80005bd8 <_vfprintf_r+0x1e0c>
80005a6c:	40 6c       	lddsp	r12,sp[0x18]
80005a6e:	58 1c       	cp.w	r12,1
80005a70:	e0 89 00 06 	brgt	80005a7c <_vfprintf_r+0x1cb0>
80005a74:	ed b5 00 00 	bld	r5,0x0
80005a78:	e0 81 00 85 	brne	80005b82 <_vfprintf_r+0x1db6>
80005a7c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a80:	2f f8       	sub	r8,-1
80005a82:	30 19       	mov	r9,1
80005a84:	fb 48 06 90 	st.w	sp[1680],r8
80005a88:	87 06       	st.w	r3[0x0],r6
80005a8a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a8e:	87 19       	st.w	r3[0x4],r9
80005a90:	2f f8       	sub	r8,-1
80005a92:	fb 48 06 8c 	st.w	sp[1676],r8
80005a96:	58 78       	cp.w	r8,7
80005a98:	e0 89 00 04 	brgt	80005aa0 <_vfprintf_r+0x1cd4>
80005a9c:	2f 83       	sub	r3,-8
80005a9e:	c0 b8       	rjmp	80005ab4 <_vfprintf_r+0x1ce8>
80005aa0:	fa ca f9 78 	sub	r10,sp,-1672
80005aa4:	02 9b       	mov	r11,r1
80005aa6:	08 9c       	mov	r12,r4
80005aa8:	fe b0 f1 84 	rcall	80003db0 <__sprint_r>
80005aac:	e0 81 01 0f 	brne	80005cca <_vfprintf_r+0x1efe>
80005ab0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ab4:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ab8:	2f f8       	sub	r8,-1
80005aba:	40 cb       	lddsp	r11,sp[0x30]
80005abc:	fb 48 06 90 	st.w	sp[1680],r8
80005ac0:	30 19       	mov	r9,1
80005ac2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ac6:	87 0b       	st.w	r3[0x0],r11
80005ac8:	2f f8       	sub	r8,-1
80005aca:	87 19       	st.w	r3[0x4],r9
80005acc:	fb 48 06 8c 	st.w	sp[1676],r8
80005ad0:	58 78       	cp.w	r8,7
80005ad2:	e0 89 00 05 	brgt	80005adc <_vfprintf_r+0x1d10>
80005ad6:	2f 83       	sub	r3,-8
80005ad8:	c0 c8       	rjmp	80005af0 <_vfprintf_r+0x1d24>
80005ada:	d7 03       	nop
80005adc:	fa ca f9 78 	sub	r10,sp,-1672
80005ae0:	02 9b       	mov	r11,r1
80005ae2:	08 9c       	mov	r12,r4
80005ae4:	fe b0 f1 66 	rcall	80003db0 <__sprint_r>
80005ae8:	e0 81 00 f1 	brne	80005cca <_vfprintf_r+0x1efe>
80005aec:	fa c3 f9 e0 	sub	r3,sp,-1568
80005af0:	30 08       	mov	r8,0
80005af2:	30 09       	mov	r9,0
80005af4:	40 5b       	lddsp	r11,sp[0x14]
80005af6:	40 7a       	lddsp	r10,sp[0x1c]
80005af8:	e0 a0 17 3d 	rcall	80008972 <__avr32_f64_cmp_eq>
80005afc:	40 68       	lddsp	r8,sp[0x18]
80005afe:	20 18       	sub	r8,1
80005b00:	58 0c       	cp.w	r12,0
80005b02:	c0 d1       	brne	80005b1c <_vfprintf_r+0x1d50>
80005b04:	2f f6       	sub	r6,-1
80005b06:	87 18       	st.w	r3[0x4],r8
80005b08:	87 06       	st.w	r3[0x0],r6
80005b0a:	fa f6 06 90 	ld.w	r6,sp[1680]
80005b0e:	10 06       	add	r6,r8
80005b10:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b14:	fb 46 06 90 	st.w	sp[1680],r6
80005b18:	2f f8       	sub	r8,-1
80005b1a:	c3 18       	rjmp	80005b7c <_vfprintf_r+0x1db0>
80005b1c:	10 96       	mov	r6,r8
80005b1e:	58 08       	cp.w	r8,0
80005b20:	e0 89 00 1c 	brgt	80005b58 <_vfprintf_r+0x1d8c>
80005b24:	c4 b8       	rjmp	80005bba <_vfprintf_r+0x1dee>
80005b26:	2f 09       	sub	r9,-16
80005b28:	2f f8       	sub	r8,-1
80005b2a:	fb 49 06 90 	st.w	sp[1680],r9
80005b2e:	87 02       	st.w	r3[0x0],r2
80005b30:	87 10       	st.w	r3[0x4],r0
80005b32:	fb 48 06 8c 	st.w	sp[1676],r8
80005b36:	58 78       	cp.w	r8,7
80005b38:	e0 89 00 04 	brgt	80005b40 <_vfprintf_r+0x1d74>
80005b3c:	2f 83       	sub	r3,-8
80005b3e:	c0 b8       	rjmp	80005b54 <_vfprintf_r+0x1d88>
80005b40:	fa ca f9 78 	sub	r10,sp,-1672
80005b44:	02 9b       	mov	r11,r1
80005b46:	08 9c       	mov	r12,r4
80005b48:	fe b0 f1 34 	rcall	80003db0 <__sprint_r>
80005b4c:	e0 81 00 bf 	brne	80005cca <_vfprintf_r+0x1efe>
80005b50:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b54:	21 06       	sub	r6,16
80005b56:	c0 48       	rjmp	80005b5e <_vfprintf_r+0x1d92>
80005b58:	fe c2 c2 bc 	sub	r2,pc,-15684
80005b5c:	31 00       	mov	r0,16
80005b5e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b62:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b66:	fe ca c2 ca 	sub	r10,pc,-15670
80005b6a:	59 06       	cp.w	r6,16
80005b6c:	fe 99 ff dd 	brgt	80005b26 <_vfprintf_r+0x1d5a>
80005b70:	0c 09       	add	r9,r6
80005b72:	87 0a       	st.w	r3[0x0],r10
80005b74:	fb 49 06 90 	st.w	sp[1680],r9
80005b78:	2f f8       	sub	r8,-1
80005b7a:	87 16       	st.w	r3[0x4],r6
80005b7c:	fb 48 06 8c 	st.w	sp[1676],r8
80005b80:	c0 e8       	rjmp	80005b9c <_vfprintf_r+0x1dd0>
80005b82:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b86:	2f f8       	sub	r8,-1
80005b88:	30 19       	mov	r9,1
80005b8a:	fb 48 06 90 	st.w	sp[1680],r8
80005b8e:	87 06       	st.w	r3[0x0],r6
80005b90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b94:	87 19       	st.w	r3[0x4],r9
80005b96:	2f f8       	sub	r8,-1
80005b98:	fb 48 06 8c 	st.w	sp[1676],r8
80005b9c:	58 78       	cp.w	r8,7
80005b9e:	e0 89 00 04 	brgt	80005ba6 <_vfprintf_r+0x1dda>
80005ba2:	2f 83       	sub	r3,-8
80005ba4:	c0 b8       	rjmp	80005bba <_vfprintf_r+0x1dee>
80005ba6:	fa ca f9 78 	sub	r10,sp,-1672
80005baa:	02 9b       	mov	r11,r1
80005bac:	08 9c       	mov	r12,r4
80005bae:	fe b0 f1 01 	rcall	80003db0 <__sprint_r>
80005bb2:	e0 81 00 8c 	brne	80005cca <_vfprintf_r+0x1efe>
80005bb6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bba:	40 ea       	lddsp	r10,sp[0x38]
80005bbc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bc0:	14 08       	add	r8,r10
80005bc2:	fa c9 f9 64 	sub	r9,sp,-1692
80005bc6:	fb 48 06 90 	st.w	sp[1680],r8
80005bca:	87 1a       	st.w	r3[0x4],r10
80005bcc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005bd0:	87 09       	st.w	r3[0x0],r9
80005bd2:	2f f8       	sub	r8,-1
80005bd4:	fb 48 06 8c 	st.w	sp[1676],r8
80005bd8:	58 78       	cp.w	r8,7
80005bda:	e0 89 00 04 	brgt	80005be2 <_vfprintf_r+0x1e16>
80005bde:	2f 83       	sub	r3,-8
80005be0:	c0 a8       	rjmp	80005bf4 <_vfprintf_r+0x1e28>
80005be2:	fa ca f9 78 	sub	r10,sp,-1672
80005be6:	02 9b       	mov	r11,r1
80005be8:	08 9c       	mov	r12,r4
80005bea:	fe b0 f0 e3 	rcall	80003db0 <__sprint_r>
80005bee:	c6 e1       	brne	80005cca <_vfprintf_r+0x1efe>
80005bf0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bf4:	e2 15 00 04 	andl	r5,0x4,COH
80005bf8:	c3 f0       	breq	80005c76 <_vfprintf_r+0x1eaa>
80005bfa:	40 86       	lddsp	r6,sp[0x20]
80005bfc:	40 39       	lddsp	r9,sp[0xc]
80005bfe:	12 16       	sub	r6,r9
80005c00:	58 06       	cp.w	r6,0
80005c02:	e0 89 00 1a 	brgt	80005c36 <_vfprintf_r+0x1e6a>
80005c06:	c3 88       	rjmp	80005c76 <_vfprintf_r+0x1eaa>
80005c08:	2f 09       	sub	r9,-16
80005c0a:	2f f8       	sub	r8,-1
80005c0c:	fb 49 06 90 	st.w	sp[1680],r9
80005c10:	87 05       	st.w	r3[0x0],r5
80005c12:	87 12       	st.w	r3[0x4],r2
80005c14:	fb 48 06 8c 	st.w	sp[1676],r8
80005c18:	58 78       	cp.w	r8,7
80005c1a:	e0 89 00 04 	brgt	80005c22 <_vfprintf_r+0x1e56>
80005c1e:	2f 83       	sub	r3,-8
80005c20:	c0 98       	rjmp	80005c32 <_vfprintf_r+0x1e66>
80005c22:	00 9a       	mov	r10,r0
80005c24:	02 9b       	mov	r11,r1
80005c26:	08 9c       	mov	r12,r4
80005c28:	fe b0 f0 c4 	rcall	80003db0 <__sprint_r>
80005c2c:	c4 f1       	brne	80005cca <_vfprintf_r+0x1efe>
80005c2e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c32:	21 06       	sub	r6,16
80005c34:	c0 68       	rjmp	80005c40 <_vfprintf_r+0x1e74>
80005c36:	fe c5 c3 aa 	sub	r5,pc,-15446
80005c3a:	31 02       	mov	r2,16
80005c3c:	fa c0 f9 78 	sub	r0,sp,-1672
80005c40:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c44:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c48:	fe ca c3 bc 	sub	r10,pc,-15428
80005c4c:	59 06       	cp.w	r6,16
80005c4e:	fe 99 ff dd 	brgt	80005c08 <_vfprintf_r+0x1e3c>
80005c52:	0c 09       	add	r9,r6
80005c54:	2f f8       	sub	r8,-1
80005c56:	87 0a       	st.w	r3[0x0],r10
80005c58:	87 16       	st.w	r3[0x4],r6
80005c5a:	fb 49 06 90 	st.w	sp[1680],r9
80005c5e:	fb 48 06 8c 	st.w	sp[1676],r8
80005c62:	58 78       	cp.w	r8,7
80005c64:	e0 8a 00 09 	brle	80005c76 <_vfprintf_r+0x1eaa>
80005c68:	fa ca f9 78 	sub	r10,sp,-1672
80005c6c:	02 9b       	mov	r11,r1
80005c6e:	08 9c       	mov	r12,r4
80005c70:	fe b0 f0 a0 	rcall	80003db0 <__sprint_r>
80005c74:	c2 b1       	brne	80005cca <_vfprintf_r+0x1efe>
80005c76:	40 bc       	lddsp	r12,sp[0x2c]
80005c78:	40 36       	lddsp	r6,sp[0xc]
80005c7a:	40 8e       	lddsp	lr,sp[0x20]
80005c7c:	ec 0e 0c 48 	max	r8,r6,lr
80005c80:	10 0c       	add	r12,r8
80005c82:	50 bc       	stdsp	sp[0x2c],r12
80005c84:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c88:	58 08       	cp.w	r8,0
80005c8a:	c0 80       	breq	80005c9a <_vfprintf_r+0x1ece>
80005c8c:	fa ca f9 78 	sub	r10,sp,-1672
80005c90:	02 9b       	mov	r11,r1
80005c92:	08 9c       	mov	r12,r4
80005c94:	fe b0 f0 8e 	rcall	80003db0 <__sprint_r>
80005c98:	c1 91       	brne	80005cca <_vfprintf_r+0x1efe>
80005c9a:	30 0b       	mov	r11,0
80005c9c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ca0:	fb 4b 06 8c 	st.w	sp[1676],r11
80005ca4:	fe 9f f1 22 	bral	80003ee8 <_vfprintf_r+0x11c>
80005ca8:	08 95       	mov	r5,r4
80005caa:	fa f8 06 90 	ld.w	r8,sp[1680]
80005cae:	58 08       	cp.w	r8,0
80005cb0:	c0 80       	breq	80005cc0 <_vfprintf_r+0x1ef4>
80005cb2:	08 9c       	mov	r12,r4
80005cb4:	fa ca f9 78 	sub	r10,sp,-1672
80005cb8:	02 9b       	mov	r11,r1
80005cba:	fe b0 f0 7b 	rcall	80003db0 <__sprint_r>
80005cbe:	c0 61       	brne	80005cca <_vfprintf_r+0x1efe>
80005cc0:	30 08       	mov	r8,0
80005cc2:	fb 48 06 8c 	st.w	sp[1676],r8
80005cc6:	c0 28       	rjmp	80005cca <_vfprintf_r+0x1efe>
80005cc8:	40 41       	lddsp	r1,sp[0x10]
80005cca:	82 68       	ld.sh	r8,r1[0xc]
80005ccc:	ed b8 00 06 	bld	r8,0x6
80005cd0:	c0 31       	brne	80005cd6 <_vfprintf_r+0x1f0a>
80005cd2:	3f fa       	mov	r10,-1
80005cd4:	50 ba       	stdsp	sp[0x2c],r10
80005cd6:	40 bc       	lddsp	r12,sp[0x2c]
80005cd8:	fe 3d f9 44 	sub	sp,-1724
80005cdc:	d8 32       	popm	r0-r7,pc
80005cde:	d7 03       	nop

80005ce0 <__swsetup_r>:
80005ce0:	d4 21       	pushm	r4-r7,lr
80005ce2:	e0 68 01 04 	mov	r8,260
80005ce6:	18 96       	mov	r6,r12
80005ce8:	16 97       	mov	r7,r11
80005cea:	70 0c       	ld.w	r12,r8[0x0]
80005cec:	58 0c       	cp.w	r12,0
80005cee:	c0 60       	breq	80005cfa <__swsetup_r+0x1a>
80005cf0:	78 68       	ld.w	r8,r12[0x18]
80005cf2:	58 08       	cp.w	r8,0
80005cf4:	c0 31       	brne	80005cfa <__swsetup_r+0x1a>
80005cf6:	e0 a0 07 b9 	rcall	80006c68 <__sinit>
80005cfa:	fe c8 c3 3e 	sub	r8,pc,-15554
80005cfe:	10 37       	cp.w	r7,r8
80005d00:	c0 61       	brne	80005d0c <__swsetup_r+0x2c>
80005d02:	e0 68 01 04 	mov	r8,260
80005d06:	70 08       	ld.w	r8,r8[0x0]
80005d08:	70 07       	ld.w	r7,r8[0x0]
80005d0a:	c1 28       	rjmp	80005d2e <__swsetup_r+0x4e>
80005d0c:	fe c8 c3 30 	sub	r8,pc,-15568
80005d10:	10 37       	cp.w	r7,r8
80005d12:	c0 61       	brne	80005d1e <__swsetup_r+0x3e>
80005d14:	e0 68 01 04 	mov	r8,260
80005d18:	70 08       	ld.w	r8,r8[0x0]
80005d1a:	70 17       	ld.w	r7,r8[0x4]
80005d1c:	c0 98       	rjmp	80005d2e <__swsetup_r+0x4e>
80005d1e:	fe c8 c3 22 	sub	r8,pc,-15582
80005d22:	10 37       	cp.w	r7,r8
80005d24:	c0 51       	brne	80005d2e <__swsetup_r+0x4e>
80005d26:	e0 68 01 04 	mov	r8,260
80005d2a:	70 08       	ld.w	r8,r8[0x0]
80005d2c:	70 27       	ld.w	r7,r8[0x8]
80005d2e:	8e 68       	ld.sh	r8,r7[0xc]
80005d30:	ed b8 00 03 	bld	r8,0x3
80005d34:	c1 e0       	breq	80005d70 <__swsetup_r+0x90>
80005d36:	ed b8 00 04 	bld	r8,0x4
80005d3a:	c3 e1       	brne	80005db6 <__swsetup_r+0xd6>
80005d3c:	ed b8 00 02 	bld	r8,0x2
80005d40:	c1 51       	brne	80005d6a <__swsetup_r+0x8a>
80005d42:	6e db       	ld.w	r11,r7[0x34]
80005d44:	58 0b       	cp.w	r11,0
80005d46:	c0 a0       	breq	80005d5a <__swsetup_r+0x7a>
80005d48:	ee c8 ff bc 	sub	r8,r7,-68
80005d4c:	10 3b       	cp.w	r11,r8
80005d4e:	c0 40       	breq	80005d56 <__swsetup_r+0x76>
80005d50:	0c 9c       	mov	r12,r6
80005d52:	e0 a0 08 25 	rcall	80006d9c <_free_r>
80005d56:	30 08       	mov	r8,0
80005d58:	8f d8       	st.w	r7[0x34],r8
80005d5a:	8e 68       	ld.sh	r8,r7[0xc]
80005d5c:	e0 18 ff db 	andl	r8,0xffdb
80005d60:	ae 68       	st.h	r7[0xc],r8
80005d62:	30 08       	mov	r8,0
80005d64:	8f 18       	st.w	r7[0x4],r8
80005d66:	6e 48       	ld.w	r8,r7[0x10]
80005d68:	8f 08       	st.w	r7[0x0],r8
80005d6a:	8e 68       	ld.sh	r8,r7[0xc]
80005d6c:	a3 b8       	sbr	r8,0x3
80005d6e:	ae 68       	st.h	r7[0xc],r8
80005d70:	6e 48       	ld.w	r8,r7[0x10]
80005d72:	58 08       	cp.w	r8,0
80005d74:	c0 b1       	brne	80005d8a <__swsetup_r+0xaa>
80005d76:	8e 68       	ld.sh	r8,r7[0xc]
80005d78:	e2 18 02 80 	andl	r8,0x280,COH
80005d7c:	e0 48 02 00 	cp.w	r8,512
80005d80:	c0 50       	breq	80005d8a <__swsetup_r+0xaa>
80005d82:	0c 9c       	mov	r12,r6
80005d84:	0e 9b       	mov	r11,r7
80005d86:	e0 a0 0a 4b 	rcall	8000721c <__smakebuf_r>
80005d8a:	8e 69       	ld.sh	r9,r7[0xc]
80005d8c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005d90:	c0 70       	breq	80005d9e <__swsetup_r+0xbe>
80005d92:	30 08       	mov	r8,0
80005d94:	8f 28       	st.w	r7[0x8],r8
80005d96:	6e 58       	ld.w	r8,r7[0x14]
80005d98:	5c 38       	neg	r8
80005d9a:	8f 68       	st.w	r7[0x18],r8
80005d9c:	c0 68       	rjmp	80005da8 <__swsetup_r+0xc8>
80005d9e:	ed b9 00 01 	bld	r9,0x1
80005da2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005da6:	8f 28       	st.w	r7[0x8],r8
80005da8:	6e 48       	ld.w	r8,r7[0x10]
80005daa:	58 08       	cp.w	r8,0
80005dac:	c0 61       	brne	80005db8 <__swsetup_r+0xd8>
80005dae:	8e 68       	ld.sh	r8,r7[0xc]
80005db0:	ed b8 00 07 	bld	r8,0x7
80005db4:	c0 21       	brne	80005db8 <__swsetup_r+0xd8>
80005db6:	dc 2a       	popm	r4-r7,pc,r12=-1
80005db8:	d8 2a       	popm	r4-r7,pc,r12=0
80005dba:	d7 03       	nop

80005dbc <quorem>:
80005dbc:	d4 31       	pushm	r0-r7,lr
80005dbe:	20 2d       	sub	sp,8
80005dc0:	18 97       	mov	r7,r12
80005dc2:	78 48       	ld.w	r8,r12[0x10]
80005dc4:	76 46       	ld.w	r6,r11[0x10]
80005dc6:	0c 38       	cp.w	r8,r6
80005dc8:	c0 34       	brge	80005dce <quorem+0x12>
80005dca:	30 0c       	mov	r12,0
80005dcc:	c8 58       	rjmp	80005ed6 <quorem+0x11a>
80005dce:	ec c2 ff fc 	sub	r2,r6,-4
80005dd2:	f6 c3 ff ec 	sub	r3,r11,-20
80005dd6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005dda:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005dde:	2f f9       	sub	r9,-1
80005de0:	20 16       	sub	r6,1
80005de2:	f8 09 0d 08 	divu	r8,r12,r9
80005de6:	f6 02 00 22 	add	r2,r11,r2<<0x2
80005dea:	ee c4 ff ec 	sub	r4,r7,-20
80005dee:	10 95       	mov	r5,r8
80005df0:	58 08       	cp.w	r8,0
80005df2:	c4 10       	breq	80005e74 <quorem+0xb8>
80005df4:	30 09       	mov	r9,0
80005df6:	06 9a       	mov	r10,r3
80005df8:	08 98       	mov	r8,r4
80005dfa:	12 91       	mov	r1,r9
80005dfc:	50 0b       	stdsp	sp[0x0],r11
80005dfe:	70 0e       	ld.w	lr,r8[0x0]
80005e00:	b1 8e       	lsr	lr,0x10
80005e02:	50 1e       	stdsp	sp[0x4],lr
80005e04:	15 0e       	ld.w	lr,r10++
80005e06:	fc 00 16 10 	lsr	r0,lr,0x10
80005e0a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80005e0e:	ea 0e 03 41 	mac	r1,r5,lr
80005e12:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80005e16:	b1 81       	lsr	r1,0x10
80005e18:	40 1b       	lddsp	r11,sp[0x4]
80005e1a:	ea 00 02 40 	mul	r0,r5,r0
80005e1e:	e2 00 00 00 	add	r0,r1,r0
80005e22:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80005e26:	02 1b       	sub	r11,r1
80005e28:	50 1b       	stdsp	sp[0x4],r11
80005e2a:	70 0b       	ld.w	r11,r8[0x0]
80005e2c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005e30:	02 09       	add	r9,r1
80005e32:	f2 0e 01 0e 	sub	lr,r9,lr
80005e36:	b0 1e       	st.h	r8[0x2],lr
80005e38:	fc 09 14 10 	asr	r9,lr,0x10
80005e3c:	40 1e       	lddsp	lr,sp[0x4]
80005e3e:	fc 09 00 09 	add	r9,lr,r9
80005e42:	b0 09       	st.h	r8[0x0],r9
80005e44:	e0 01 16 10 	lsr	r1,r0,0x10
80005e48:	2f c8       	sub	r8,-4
80005e4a:	b1 49       	asr	r9,0x10
80005e4c:	04 3a       	cp.w	r10,r2
80005e4e:	fe 98 ff d8 	brls	80005dfe <quorem+0x42>
80005e52:	40 0b       	lddsp	r11,sp[0x0]
80005e54:	58 0c       	cp.w	r12,0
80005e56:	c0 f1       	brne	80005e74 <quorem+0xb8>
80005e58:	ec c8 ff fb 	sub	r8,r6,-5
80005e5c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005e60:	c0 28       	rjmp	80005e64 <quorem+0xa8>
80005e62:	20 16       	sub	r6,1
80005e64:	20 48       	sub	r8,4
80005e66:	08 38       	cp.w	r8,r4
80005e68:	e0 88 00 05 	brls	80005e72 <quorem+0xb6>
80005e6c:	70 09       	ld.w	r9,r8[0x0]
80005e6e:	58 09       	cp.w	r9,0
80005e70:	cf 90       	breq	80005e62 <quorem+0xa6>
80005e72:	8f 46       	st.w	r7[0x10],r6
80005e74:	0e 9c       	mov	r12,r7
80005e76:	e0 a0 0c fb 	rcall	8000786c <__mcmp>
80005e7a:	c2 d5       	brlt	80005ed4 <quorem+0x118>
80005e7c:	2f f5       	sub	r5,-1
80005e7e:	08 98       	mov	r8,r4
80005e80:	30 09       	mov	r9,0
80005e82:	07 0b       	ld.w	r11,r3++
80005e84:	f6 0a 16 10 	lsr	r10,r11,0x10
80005e88:	70 0c       	ld.w	r12,r8[0x0]
80005e8a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005e8e:	f8 0e 16 10 	lsr	lr,r12,0x10
80005e92:	14 1e       	sub	lr,r10
80005e94:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005e98:	16 1a       	sub	r10,r11
80005e9a:	12 0a       	add	r10,r9
80005e9c:	b0 1a       	st.h	r8[0x2],r10
80005e9e:	b1 4a       	asr	r10,0x10
80005ea0:	fc 0a 00 09 	add	r9,lr,r10
80005ea4:	b0 09       	st.h	r8[0x0],r9
80005ea6:	2f c8       	sub	r8,-4
80005ea8:	b1 49       	asr	r9,0x10
80005eaa:	04 33       	cp.w	r3,r2
80005eac:	fe 98 ff eb 	brls	80005e82 <quorem+0xc6>
80005eb0:	ec c8 ff fb 	sub	r8,r6,-5
80005eb4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80005eb8:	58 09       	cp.w	r9,0
80005eba:	c0 d1       	brne	80005ed4 <quorem+0x118>
80005ebc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005ec0:	c0 28       	rjmp	80005ec4 <quorem+0x108>
80005ec2:	20 16       	sub	r6,1
80005ec4:	20 48       	sub	r8,4
80005ec6:	08 38       	cp.w	r8,r4
80005ec8:	e0 88 00 05 	brls	80005ed2 <quorem+0x116>
80005ecc:	70 09       	ld.w	r9,r8[0x0]
80005ece:	58 09       	cp.w	r9,0
80005ed0:	cf 90       	breq	80005ec2 <quorem+0x106>
80005ed2:	8f 46       	st.w	r7[0x10],r6
80005ed4:	0a 9c       	mov	r12,r5
80005ed6:	2f ed       	sub	sp,-8
80005ed8:	d8 32       	popm	r0-r7,pc
80005eda:	d7 03       	nop

80005edc <_dtoa_r>:
80005edc:	d4 31       	pushm	r0-r7,lr
80005ede:	21 ad       	sub	sp,104
80005ee0:	fa c4 ff 74 	sub	r4,sp,-140
80005ee4:	18 97       	mov	r7,r12
80005ee6:	16 95       	mov	r5,r11
80005ee8:	68 2c       	ld.w	r12,r4[0x8]
80005eea:	50 c9       	stdsp	sp[0x30],r9
80005eec:	68 16       	ld.w	r6,r4[0x4]
80005eee:	68 09       	ld.w	r9,r4[0x0]
80005ef0:	50 e8       	stdsp	sp[0x38],r8
80005ef2:	14 94       	mov	r4,r10
80005ef4:	51 2c       	stdsp	sp[0x48],r12
80005ef6:	fa e5 00 08 	st.d	sp[8],r4
80005efa:	51 59       	stdsp	sp[0x54],r9
80005efc:	6e 95       	ld.w	r5,r7[0x24]
80005efe:	58 05       	cp.w	r5,0
80005f00:	c0 91       	brne	80005f12 <_dtoa_r+0x36>
80005f02:	31 0c       	mov	r12,16
80005f04:	e0 a0 09 ea 	rcall	800072d8 <malloc>
80005f08:	99 35       	st.w	r12[0xc],r5
80005f0a:	8f 9c       	st.w	r7[0x24],r12
80005f0c:	99 15       	st.w	r12[0x4],r5
80005f0e:	99 25       	st.w	r12[0x8],r5
80005f10:	99 05       	st.w	r12[0x0],r5
80005f12:	6e 99       	ld.w	r9,r7[0x24]
80005f14:	72 08       	ld.w	r8,r9[0x0]
80005f16:	58 08       	cp.w	r8,0
80005f18:	c0 f0       	breq	80005f36 <_dtoa_r+0x5a>
80005f1a:	72 1a       	ld.w	r10,r9[0x4]
80005f1c:	91 1a       	st.w	r8[0x4],r10
80005f1e:	30 1a       	mov	r10,1
80005f20:	72 19       	ld.w	r9,r9[0x4]
80005f22:	f4 09 09 49 	lsl	r9,r10,r9
80005f26:	10 9b       	mov	r11,r8
80005f28:	91 29       	st.w	r8[0x8],r9
80005f2a:	0e 9c       	mov	r12,r7
80005f2c:	e0 a0 0c ba 	rcall	800078a0 <_Bfree>
80005f30:	6e 98       	ld.w	r8,r7[0x24]
80005f32:	30 09       	mov	r9,0
80005f34:	91 09       	st.w	r8[0x0],r9
80005f36:	40 28       	lddsp	r8,sp[0x8]
80005f38:	10 94       	mov	r4,r8
80005f3a:	58 08       	cp.w	r8,0
80005f3c:	c0 64       	brge	80005f48 <_dtoa_r+0x6c>
80005f3e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005f42:	50 28       	stdsp	sp[0x8],r8
80005f44:	30 18       	mov	r8,1
80005f46:	c0 28       	rjmp	80005f4a <_dtoa_r+0x6e>
80005f48:	30 08       	mov	r8,0
80005f4a:	8d 08       	st.w	r6[0x0],r8
80005f4c:	fc 1c 7f f0 	movh	r12,0x7ff0
80005f50:	40 26       	lddsp	r6,sp[0x8]
80005f52:	0c 98       	mov	r8,r6
80005f54:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005f58:	18 38       	cp.w	r8,r12
80005f5a:	c2 01       	brne	80005f9a <_dtoa_r+0xbe>
80005f5c:	e0 68 27 0f 	mov	r8,9999
80005f60:	41 5b       	lddsp	r11,sp[0x54]
80005f62:	97 08       	st.w	r11[0x0],r8
80005f64:	40 3a       	lddsp	r10,sp[0xc]
80005f66:	58 0a       	cp.w	r10,0
80005f68:	c0 71       	brne	80005f76 <_dtoa_r+0x9a>
80005f6a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005f6e:	c0 41       	brne	80005f76 <_dtoa_r+0x9a>
80005f70:	fe cc c5 c4 	sub	r12,pc,-14908
80005f74:	c0 38       	rjmp	80005f7a <_dtoa_r+0x9e>
80005f76:	fe cc c5 be 	sub	r12,pc,-14914
80005f7a:	41 29       	lddsp	r9,sp[0x48]
80005f7c:	58 09       	cp.w	r9,0
80005f7e:	e0 80 05 9a 	breq	80006ab2 <_dtoa_r+0xbd6>
80005f82:	f8 c8 ff fd 	sub	r8,r12,-3
80005f86:	f8 c9 ff f8 	sub	r9,r12,-8
80005f8a:	11 8b       	ld.ub	r11,r8[0x0]
80005f8c:	30 0a       	mov	r10,0
80005f8e:	41 25       	lddsp	r5,sp[0x48]
80005f90:	f4 0b 18 00 	cp.b	r11,r10
80005f94:	f2 08 17 10 	movne	r8,r9
80005f98:	c1 68       	rjmp	80005fc4 <_dtoa_r+0xe8>
80005f9a:	fa ea 00 08 	ld.d	r10,sp[8]
80005f9e:	30 08       	mov	r8,0
80005fa0:	fa eb 00 3c 	st.d	sp[60],r10
80005fa4:	30 09       	mov	r9,0
80005fa6:	e0 a0 14 e6 	rcall	80008972 <__avr32_f64_cmp_eq>
80005faa:	c1 00       	breq	80005fca <_dtoa_r+0xee>
80005fac:	30 18       	mov	r8,1
80005fae:	41 5a       	lddsp	r10,sp[0x54]
80005fb0:	95 08       	st.w	r10[0x0],r8
80005fb2:	fe cc c7 2a 	sub	r12,pc,-14550
80005fb6:	41 29       	lddsp	r9,sp[0x48]
80005fb8:	f8 08 00 08 	add	r8,r12,r8
80005fbc:	58 09       	cp.w	r9,0
80005fbe:	e0 80 05 7a 	breq	80006ab2 <_dtoa_r+0xbd6>
80005fc2:	12 95       	mov	r5,r9
80005fc4:	8b 08       	st.w	r5[0x0],r8
80005fc6:	e0 8f 05 76 	bral	80006ab2 <_dtoa_r+0xbd6>
80005fca:	fa c8 ff 9c 	sub	r8,sp,-100
80005fce:	fa c9 ff a0 	sub	r9,sp,-96
80005fd2:	fa ea 00 3c 	ld.d	r10,sp[60]
80005fd6:	0e 9c       	mov	r12,r7
80005fd8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80005fdc:	e0 a0 0c b4 	rcall	80007944 <__d2b>
80005fe0:	18 93       	mov	r3,r12
80005fe2:	58 05       	cp.w	r5,0
80005fe4:	c0 d0       	breq	80005ffe <_dtoa_r+0x122>
80005fe6:	fa ea 00 3c 	ld.d	r10,sp[60]
80005fea:	30 04       	mov	r4,0
80005fec:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80005ff0:	ea c5 03 ff 	sub	r5,r5,1023
80005ff4:	10 9b       	mov	r11,r8
80005ff6:	51 74       	stdsp	sp[0x5c],r4
80005ff8:	ea 1b 3f f0 	orh	r11,0x3ff0
80005ffc:	c2 58       	rjmp	80006046 <_dtoa_r+0x16a>
80005ffe:	41 88       	lddsp	r8,sp[0x60]
80006000:	41 9c       	lddsp	r12,sp[0x64]
80006002:	10 0c       	add	r12,r8
80006004:	f8 c5 fb ce 	sub	r5,r12,-1074
80006008:	e0 45 00 20 	cp.w	r5,32
8000600c:	e0 8a 00 0e 	brle	80006028 <_dtoa_r+0x14c>
80006010:	f8 cc fb ee 	sub	r12,r12,-1042
80006014:	40 3b       	lddsp	r11,sp[0xc]
80006016:	ea 08 11 40 	rsub	r8,r5,64
8000601a:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000601e:	ec 08 09 46 	lsl	r6,r6,r8
80006022:	0c 4c       	or	r12,r6
80006024:	c0 78       	rjmp	80006032 <_dtoa_r+0x156>
80006026:	d7 03       	nop
80006028:	ea 0c 11 20 	rsub	r12,r5,32
8000602c:	40 3a       	lddsp	r10,sp[0xc]
8000602e:	f4 0c 09 4c 	lsl	r12,r10,r12
80006032:	e0 a0 14 2c 	rcall	8000888a <__avr32_u32_to_f64>
80006036:	fc 18 fe 10 	movh	r8,0xfe10
8000603a:	30 19       	mov	r9,1
8000603c:	ea c5 04 33 	sub	r5,r5,1075
80006040:	f0 0b 00 0b 	add	r11,r8,r11
80006044:	51 79       	stdsp	sp[0x5c],r9
80006046:	30 08       	mov	r8,0
80006048:	fc 19 3f f8 	movh	r9,0x3ff8
8000604c:	e0 a0 12 b4 	rcall	800085b4 <__avr32_f64_sub>
80006050:	e0 68 43 61 	mov	r8,17249
80006054:	ea 18 63 6f 	orh	r8,0x636f
80006058:	e0 69 87 a7 	mov	r9,34727
8000605c:	ea 19 3f d2 	orh	r9,0x3fd2
80006060:	e0 a0 11 be 	rcall	800083dc <__avr32_f64_mul>
80006064:	e0 68 c8 b3 	mov	r8,51379
80006068:	ea 18 8b 60 	orh	r8,0x8b60
8000606c:	e0 69 8a 28 	mov	r9,35368
80006070:	ea 19 3f c6 	orh	r9,0x3fc6
80006074:	e0 a0 13 6e 	rcall	80008750 <__avr32_f64_add>
80006078:	0a 9c       	mov	r12,r5
8000607a:	14 90       	mov	r0,r10
8000607c:	16 91       	mov	r1,r11
8000607e:	e0 a0 14 0a 	rcall	80008892 <__avr32_s32_to_f64>
80006082:	e0 68 79 fb 	mov	r8,31227
80006086:	ea 18 50 9f 	orh	r8,0x509f
8000608a:	e0 69 44 13 	mov	r9,17427
8000608e:	ea 19 3f d3 	orh	r9,0x3fd3
80006092:	e0 a0 11 a5 	rcall	800083dc <__avr32_f64_mul>
80006096:	14 98       	mov	r8,r10
80006098:	16 99       	mov	r9,r11
8000609a:	00 9a       	mov	r10,r0
8000609c:	02 9b       	mov	r11,r1
8000609e:	e0 a0 13 59 	rcall	80008750 <__avr32_f64_add>
800060a2:	14 90       	mov	r0,r10
800060a4:	16 91       	mov	r1,r11
800060a6:	e0 a0 13 df 	rcall	80008864 <__avr32_f64_to_s32>
800060aa:	30 08       	mov	r8,0
800060ac:	18 96       	mov	r6,r12
800060ae:	30 09       	mov	r9,0
800060b0:	00 9a       	mov	r10,r0
800060b2:	02 9b       	mov	r11,r1
800060b4:	e0 a0 14 a6 	rcall	80008a00 <__avr32_f64_cmp_lt>
800060b8:	c0 c0       	breq	800060d0 <_dtoa_r+0x1f4>
800060ba:	0c 9c       	mov	r12,r6
800060bc:	e0 a0 13 eb 	rcall	80008892 <__avr32_s32_to_f64>
800060c0:	14 98       	mov	r8,r10
800060c2:	16 99       	mov	r9,r11
800060c4:	00 9a       	mov	r10,r0
800060c6:	02 9b       	mov	r11,r1
800060c8:	e0 a0 14 55 	rcall	80008972 <__avr32_f64_cmp_eq>
800060cc:	f7 b6 00 01 	subeq	r6,1
800060d0:	59 66       	cp.w	r6,22
800060d2:	e0 88 00 05 	brls	800060dc <_dtoa_r+0x200>
800060d6:	30 18       	mov	r8,1
800060d8:	51 48       	stdsp	sp[0x50],r8
800060da:	c1 38       	rjmp	80006100 <_dtoa_r+0x224>
800060dc:	fe c8 c6 74 	sub	r8,pc,-14732
800060e0:	fa ea 00 3c 	ld.d	r10,sp[60]
800060e4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
800060e8:	e0 a0 14 8c 	rcall	80008a00 <__avr32_f64_cmp_lt>
800060ec:	f9 b4 00 00 	moveq	r4,0
800060f0:	fb f4 0a 14 	st.weq	sp[0x50],r4
800060f4:	f7 b6 01 01 	subne	r6,1
800060f8:	f9 bc 01 00 	movne	r12,0
800060fc:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006100:	41 90       	lddsp	r0,sp[0x64]
80006102:	20 10       	sub	r0,1
80006104:	0a 10       	sub	r0,r5
80006106:	c0 46       	brmi	8000610e <_dtoa_r+0x232>
80006108:	50 40       	stdsp	sp[0x10],r0
8000610a:	30 00       	mov	r0,0
8000610c:	c0 48       	rjmp	80006114 <_dtoa_r+0x238>
8000610e:	30 0b       	mov	r11,0
80006110:	5c 30       	neg	r0
80006112:	50 4b       	stdsp	sp[0x10],r11
80006114:	ec 02 11 00 	rsub	r2,r6,0
80006118:	58 06       	cp.w	r6,0
8000611a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000611e:	f5 d6 e4 0a 	addge	r10,r10,r6
80006122:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006126:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000612a:	f9 b2 04 00 	movge	r2,0
8000612e:	e1 d6 e5 10 	sublt	r0,r0,r6
80006132:	f9 b9 05 00 	movlt	r9,0
80006136:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000613a:	40 c8       	lddsp	r8,sp[0x30]
8000613c:	58 98       	cp.w	r8,9
8000613e:	e0 8b 00 20 	brhi	8000617e <_dtoa_r+0x2a2>
80006142:	58 58       	cp.w	r8,5
80006144:	f9 b4 0a 01 	movle	r4,1
80006148:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000614c:	f7 b5 09 04 	subgt	r5,4
80006150:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006154:	f9 b4 09 00 	movgt	r4,0
80006158:	40 cc       	lddsp	r12,sp[0x30]
8000615a:	58 3c       	cp.w	r12,3
8000615c:	c2 d0       	breq	800061b6 <_dtoa_r+0x2da>
8000615e:	e0 89 00 05 	brgt	80006168 <_dtoa_r+0x28c>
80006162:	58 2c       	cp.w	r12,2
80006164:	c1 01       	brne	80006184 <_dtoa_r+0x2a8>
80006166:	c1 88       	rjmp	80006196 <_dtoa_r+0x2ba>
80006168:	40 cb       	lddsp	r11,sp[0x30]
8000616a:	58 4b       	cp.w	r11,4
8000616c:	c0 60       	breq	80006178 <_dtoa_r+0x29c>
8000616e:	58 5b       	cp.w	r11,5
80006170:	c0 a1       	brne	80006184 <_dtoa_r+0x2a8>
80006172:	30 1a       	mov	r10,1
80006174:	50 da       	stdsp	sp[0x34],r10
80006176:	c2 28       	rjmp	800061ba <_dtoa_r+0x2de>
80006178:	30 19       	mov	r9,1
8000617a:	50 d9       	stdsp	sp[0x34],r9
8000617c:	c0 f8       	rjmp	8000619a <_dtoa_r+0x2be>
8000617e:	30 08       	mov	r8,0
80006180:	30 14       	mov	r4,1
80006182:	50 c8       	stdsp	sp[0x30],r8
80006184:	3f f5       	mov	r5,-1
80006186:	30 1c       	mov	r12,1
80006188:	30 0b       	mov	r11,0
8000618a:	50 95       	stdsp	sp[0x24],r5
8000618c:	50 dc       	stdsp	sp[0x34],r12
8000618e:	0a 91       	mov	r1,r5
80006190:	31 28       	mov	r8,18
80006192:	50 eb       	stdsp	sp[0x38],r11
80006194:	c2 08       	rjmp	800061d4 <_dtoa_r+0x2f8>
80006196:	30 0a       	mov	r10,0
80006198:	50 da       	stdsp	sp[0x34],r10
8000619a:	40 e9       	lddsp	r9,sp[0x38]
8000619c:	58 09       	cp.w	r9,0
8000619e:	e0 89 00 07 	brgt	800061ac <_dtoa_r+0x2d0>
800061a2:	30 18       	mov	r8,1
800061a4:	50 98       	stdsp	sp[0x24],r8
800061a6:	10 91       	mov	r1,r8
800061a8:	50 e8       	stdsp	sp[0x38],r8
800061aa:	c1 58       	rjmp	800061d4 <_dtoa_r+0x2f8>
800061ac:	40 e5       	lddsp	r5,sp[0x38]
800061ae:	50 95       	stdsp	sp[0x24],r5
800061b0:	0a 91       	mov	r1,r5
800061b2:	0a 98       	mov	r8,r5
800061b4:	c1 08       	rjmp	800061d4 <_dtoa_r+0x2f8>
800061b6:	30 0c       	mov	r12,0
800061b8:	50 dc       	stdsp	sp[0x34],r12
800061ba:	40 eb       	lddsp	r11,sp[0x38]
800061bc:	ec 0b 00 0b 	add	r11,r6,r11
800061c0:	50 9b       	stdsp	sp[0x24],r11
800061c2:	16 98       	mov	r8,r11
800061c4:	2f f8       	sub	r8,-1
800061c6:	58 08       	cp.w	r8,0
800061c8:	e0 89 00 05 	brgt	800061d2 <_dtoa_r+0x2f6>
800061cc:	10 91       	mov	r1,r8
800061ce:	30 18       	mov	r8,1
800061d0:	c0 28       	rjmp	800061d4 <_dtoa_r+0x2f8>
800061d2:	10 91       	mov	r1,r8
800061d4:	30 09       	mov	r9,0
800061d6:	6e 9a       	ld.w	r10,r7[0x24]
800061d8:	95 19       	st.w	r10[0x4],r9
800061da:	30 49       	mov	r9,4
800061dc:	c0 68       	rjmp	800061e8 <_dtoa_r+0x30c>
800061de:	d7 03       	nop
800061e0:	6a 1a       	ld.w	r10,r5[0x4]
800061e2:	a1 79       	lsl	r9,0x1
800061e4:	2f fa       	sub	r10,-1
800061e6:	8b 1a       	st.w	r5[0x4],r10
800061e8:	6e 95       	ld.w	r5,r7[0x24]
800061ea:	f2 ca ff ec 	sub	r10,r9,-20
800061ee:	10 3a       	cp.w	r10,r8
800061f0:	fe 98 ff f8 	brls	800061e0 <_dtoa_r+0x304>
800061f4:	6a 1b       	ld.w	r11,r5[0x4]
800061f6:	0e 9c       	mov	r12,r7
800061f8:	e0 a0 0b 6e 	rcall	800078d4 <_Balloc>
800061fc:	58 e1       	cp.w	r1,14
800061fe:	5f 88       	srls	r8
80006200:	8b 0c       	st.w	r5[0x0],r12
80006202:	f1 e4 00 04 	and	r4,r8,r4
80006206:	6e 98       	ld.w	r8,r7[0x24]
80006208:	70 08       	ld.w	r8,r8[0x0]
8000620a:	50 88       	stdsp	sp[0x20],r8
8000620c:	e0 80 01 82 	breq	80006510 <_dtoa_r+0x634>
80006210:	58 06       	cp.w	r6,0
80006212:	e0 8a 00 43 	brle	80006298 <_dtoa_r+0x3bc>
80006216:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000621a:	fe c8 c7 b2 	sub	r8,pc,-14414
8000621e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006222:	fa e5 00 18 	st.d	sp[24],r4
80006226:	ec 04 14 04 	asr	r4,r6,0x4
8000622a:	ed b4 00 04 	bld	r4,0x4
8000622e:	c0 30       	breq	80006234 <_dtoa_r+0x358>
80006230:	30 25       	mov	r5,2
80006232:	c1 08       	rjmp	80006252 <_dtoa_r+0x376>
80006234:	fe c8 c7 04 	sub	r8,pc,-14588
80006238:	f0 e8 00 20 	ld.d	r8,r8[32]
8000623c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006240:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006244:	e0 a0 14 12 	rcall	80008a68 <__avr32_f64_div>
80006248:	30 35       	mov	r5,3
8000624a:	14 98       	mov	r8,r10
8000624c:	16 99       	mov	r9,r11
8000624e:	fa e9 00 08 	st.d	sp[8],r8
80006252:	fe cc c7 22 	sub	r12,pc,-14558
80006256:	50 a3       	stdsp	sp[0x28],r3
80006258:	0c 93       	mov	r3,r6
8000625a:	18 96       	mov	r6,r12
8000625c:	c0 f8       	rjmp	8000627a <_dtoa_r+0x39e>
8000625e:	fa ea 00 18 	ld.d	r10,sp[24]
80006262:	ed b4 00 00 	bld	r4,0x0
80006266:	c0 81       	brne	80006276 <_dtoa_r+0x39a>
80006268:	ec e8 00 00 	ld.d	r8,r6[0]
8000626c:	2f f5       	sub	r5,-1
8000626e:	e0 a0 10 b7 	rcall	800083dc <__avr32_f64_mul>
80006272:	fa eb 00 18 	st.d	sp[24],r10
80006276:	a1 54       	asr	r4,0x1
80006278:	2f 86       	sub	r6,-8
8000627a:	58 04       	cp.w	r4,0
8000627c:	cf 11       	brne	8000625e <_dtoa_r+0x382>
8000627e:	fa e8 00 18 	ld.d	r8,sp[24]
80006282:	fa ea 00 08 	ld.d	r10,sp[8]
80006286:	06 96       	mov	r6,r3
80006288:	e0 a0 13 f0 	rcall	80008a68 <__avr32_f64_div>
8000628c:	40 a3       	lddsp	r3,sp[0x28]
8000628e:	14 98       	mov	r8,r10
80006290:	16 99       	mov	r9,r11
80006292:	fa e9 00 08 	st.d	sp[8],r8
80006296:	c2 f8       	rjmp	800062f4 <_dtoa_r+0x418>
80006298:	ec 08 11 00 	rsub	r8,r6,0
8000629c:	c0 31       	brne	800062a2 <_dtoa_r+0x3c6>
8000629e:	30 25       	mov	r5,2
800062a0:	c2 a8       	rjmp	800062f4 <_dtoa_r+0x418>
800062a2:	fe cc c7 72 	sub	r12,pc,-14478
800062a6:	f0 04 14 04 	asr	r4,r8,0x4
800062aa:	50 1c       	stdsp	sp[0x4],r12
800062ac:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800062b0:	fe c9 c8 48 	sub	r9,pc,-14264
800062b4:	fa ea 00 3c 	ld.d	r10,sp[60]
800062b8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800062bc:	e0 a0 10 90 	rcall	800083dc <__avr32_f64_mul>
800062c0:	40 1c       	lddsp	r12,sp[0x4]
800062c2:	50 63       	stdsp	sp[0x18],r3
800062c4:	30 25       	mov	r5,2
800062c6:	0c 93       	mov	r3,r6
800062c8:	fa eb 00 08 	st.d	sp[8],r10
800062cc:	18 96       	mov	r6,r12
800062ce:	c0 f8       	rjmp	800062ec <_dtoa_r+0x410>
800062d0:	fa ea 00 08 	ld.d	r10,sp[8]
800062d4:	ed b4 00 00 	bld	r4,0x0
800062d8:	c0 81       	brne	800062e8 <_dtoa_r+0x40c>
800062da:	ec e8 00 00 	ld.d	r8,r6[0]
800062de:	2f f5       	sub	r5,-1
800062e0:	e0 a0 10 7e 	rcall	800083dc <__avr32_f64_mul>
800062e4:	fa eb 00 08 	st.d	sp[8],r10
800062e8:	a1 54       	asr	r4,0x1
800062ea:	2f 86       	sub	r6,-8
800062ec:	58 04       	cp.w	r4,0
800062ee:	cf 11       	brne	800062d0 <_dtoa_r+0x3f4>
800062f0:	06 96       	mov	r6,r3
800062f2:	40 63       	lddsp	r3,sp[0x18]
800062f4:	41 4a       	lddsp	r10,sp[0x50]
800062f6:	58 0a       	cp.w	r10,0
800062f8:	c2 a0       	breq	8000634c <_dtoa_r+0x470>
800062fa:	fa e8 00 08 	ld.d	r8,sp[8]
800062fe:	58 01       	cp.w	r1,0
80006300:	5f 94       	srgt	r4
80006302:	fa e9 00 18 	st.d	sp[24],r8
80006306:	30 08       	mov	r8,0
80006308:	fc 19 3f f0 	movh	r9,0x3ff0
8000630c:	fa ea 00 18 	ld.d	r10,sp[24]
80006310:	e0 a0 13 78 	rcall	80008a00 <__avr32_f64_cmp_lt>
80006314:	f9 bc 00 00 	moveq	r12,0
80006318:	f9 bc 01 01 	movne	r12,1
8000631c:	e9 ec 00 0c 	and	r12,r4,r12
80006320:	c1 60       	breq	8000634c <_dtoa_r+0x470>
80006322:	40 98       	lddsp	r8,sp[0x24]
80006324:	58 08       	cp.w	r8,0
80006326:	e0 8a 00 f1 	brle	80006508 <_dtoa_r+0x62c>
8000632a:	30 08       	mov	r8,0
8000632c:	fc 19 40 24 	movh	r9,0x4024
80006330:	ec c4 00 01 	sub	r4,r6,1
80006334:	fa ea 00 18 	ld.d	r10,sp[24]
80006338:	2f f5       	sub	r5,-1
8000633a:	50 64       	stdsp	sp[0x18],r4
8000633c:	e0 a0 10 50 	rcall	800083dc <__avr32_f64_mul>
80006340:	40 94       	lddsp	r4,sp[0x24]
80006342:	14 98       	mov	r8,r10
80006344:	16 99       	mov	r9,r11
80006346:	fa e9 00 08 	st.d	sp[8],r8
8000634a:	c0 38       	rjmp	80006350 <_dtoa_r+0x474>
8000634c:	50 66       	stdsp	sp[0x18],r6
8000634e:	02 94       	mov	r4,r1
80006350:	0a 9c       	mov	r12,r5
80006352:	e0 a0 12 a0 	rcall	80008892 <__avr32_s32_to_f64>
80006356:	fa e8 00 08 	ld.d	r8,sp[8]
8000635a:	e0 a0 10 41 	rcall	800083dc <__avr32_f64_mul>
8000635e:	30 08       	mov	r8,0
80006360:	fc 19 40 1c 	movh	r9,0x401c
80006364:	e0 a0 11 f6 	rcall	80008750 <__avr32_f64_add>
80006368:	14 98       	mov	r8,r10
8000636a:	16 99       	mov	r9,r11
8000636c:	fa e9 00 28 	st.d	sp[40],r8
80006370:	fc 18 fc c0 	movh	r8,0xfcc0
80006374:	40 a5       	lddsp	r5,sp[0x28]
80006376:	10 05       	add	r5,r8
80006378:	50 a5       	stdsp	sp[0x28],r5
8000637a:	58 04       	cp.w	r4,0
8000637c:	c2 11       	brne	800063be <_dtoa_r+0x4e2>
8000637e:	fa ea 00 08 	ld.d	r10,sp[8]
80006382:	30 08       	mov	r8,0
80006384:	fc 19 40 14 	movh	r9,0x4014
80006388:	e0 a0 11 16 	rcall	800085b4 <__avr32_f64_sub>
8000638c:	40 bc       	lddsp	r12,sp[0x2c]
8000638e:	fa eb 00 08 	st.d	sp[8],r10
80006392:	14 98       	mov	r8,r10
80006394:	16 99       	mov	r9,r11
80006396:	18 9a       	mov	r10,r12
80006398:	0a 9b       	mov	r11,r5
8000639a:	e0 a0 13 33 	rcall	80008a00 <__avr32_f64_cmp_lt>
8000639e:	e0 81 02 54 	brne	80006846 <_dtoa_r+0x96a>
800063a2:	0a 98       	mov	r8,r5
800063a4:	40 b9       	lddsp	r9,sp[0x2c]
800063a6:	ee 18 80 00 	eorh	r8,0x8000
800063aa:	fa ea 00 08 	ld.d	r10,sp[8]
800063ae:	10 95       	mov	r5,r8
800063b0:	12 98       	mov	r8,r9
800063b2:	0a 99       	mov	r9,r5
800063b4:	e0 a0 13 26 	rcall	80008a00 <__avr32_f64_cmp_lt>
800063b8:	e0 81 02 3e 	brne	80006834 <_dtoa_r+0x958>
800063bc:	ca 68       	rjmp	80006508 <_dtoa_r+0x62c>
800063be:	fe c9 c9 56 	sub	r9,pc,-13994
800063c2:	e8 c8 00 01 	sub	r8,r4,1
800063c6:	40 d5       	lddsp	r5,sp[0x34]
800063c8:	58 05       	cp.w	r5,0
800063ca:	c4 f0       	breq	80006468 <_dtoa_r+0x58c>
800063cc:	30 0c       	mov	r12,0
800063ce:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800063d2:	51 3c       	stdsp	sp[0x4c],r12
800063d4:	30 0a       	mov	r10,0
800063d6:	fc 1b 3f e0 	movh	r11,0x3fe0
800063da:	e0 a0 13 47 	rcall	80008a68 <__avr32_f64_div>
800063de:	fa e8 00 28 	ld.d	r8,sp[40]
800063e2:	40 85       	lddsp	r5,sp[0x20]
800063e4:	e0 a0 10 e8 	rcall	800085b4 <__avr32_f64_sub>
800063e8:	fa eb 00 28 	st.d	sp[40],r10
800063ec:	fa ea 00 08 	ld.d	r10,sp[8]
800063f0:	e0 a0 12 3a 	rcall	80008864 <__avr32_f64_to_s32>
800063f4:	51 6c       	stdsp	sp[0x58],r12
800063f6:	e0 a0 12 4e 	rcall	80008892 <__avr32_s32_to_f64>
800063fa:	14 98       	mov	r8,r10
800063fc:	16 99       	mov	r9,r11
800063fe:	fa ea 00 08 	ld.d	r10,sp[8]
80006402:	e0 a0 10 d9 	rcall	800085b4 <__avr32_f64_sub>
80006406:	fa eb 00 08 	st.d	sp[8],r10
8000640a:	41 68       	lddsp	r8,sp[0x58]
8000640c:	2d 08       	sub	r8,-48
8000640e:	0a c8       	st.b	r5++,r8
80006410:	41 39       	lddsp	r9,sp[0x4c]
80006412:	2f f9       	sub	r9,-1
80006414:	51 39       	stdsp	sp[0x4c],r9
80006416:	fa e8 00 28 	ld.d	r8,sp[40]
8000641a:	e0 a0 12 f3 	rcall	80008a00 <__avr32_f64_cmp_lt>
8000641e:	e0 81 03 39 	brne	80006a90 <_dtoa_r+0xbb4>
80006422:	fa e8 00 08 	ld.d	r8,sp[8]
80006426:	30 0a       	mov	r10,0
80006428:	fc 1b 3f f0 	movh	r11,0x3ff0
8000642c:	e0 a0 10 c4 	rcall	800085b4 <__avr32_f64_sub>
80006430:	fa e8 00 28 	ld.d	r8,sp[40]
80006434:	e0 a0 12 e6 	rcall	80008a00 <__avr32_f64_cmp_lt>
80006438:	fa ea 00 28 	ld.d	r10,sp[40]
8000643c:	30 08       	mov	r8,0
8000643e:	fc 19 40 24 	movh	r9,0x4024
80006442:	e0 81 00 da 	brne	800065f6 <_dtoa_r+0x71a>
80006446:	41 3c       	lddsp	r12,sp[0x4c]
80006448:	08 3c       	cp.w	r12,r4
8000644a:	c5 f4       	brge	80006508 <_dtoa_r+0x62c>
8000644c:	e0 a0 0f c8 	rcall	800083dc <__avr32_f64_mul>
80006450:	30 08       	mov	r8,0
80006452:	fa eb 00 28 	st.d	sp[40],r10
80006456:	fc 19 40 24 	movh	r9,0x4024
8000645a:	fa ea 00 08 	ld.d	r10,sp[8]
8000645e:	e0 a0 0f bf 	rcall	800083dc <__avr32_f64_mul>
80006462:	fa eb 00 08 	st.d	sp[8],r10
80006466:	cc 3b       	rjmp	800063ec <_dtoa_r+0x510>
80006468:	40 85       	lddsp	r5,sp[0x20]
8000646a:	08 05       	add	r5,r4
8000646c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006470:	51 35       	stdsp	sp[0x4c],r5
80006472:	fa e8 00 28 	ld.d	r8,sp[40]
80006476:	40 85       	lddsp	r5,sp[0x20]
80006478:	e0 a0 0f b2 	rcall	800083dc <__avr32_f64_mul>
8000647c:	fa eb 00 28 	st.d	sp[40],r10
80006480:	fa ea 00 08 	ld.d	r10,sp[8]
80006484:	e0 a0 11 f0 	rcall	80008864 <__avr32_f64_to_s32>
80006488:	51 6c       	stdsp	sp[0x58],r12
8000648a:	e0 a0 12 04 	rcall	80008892 <__avr32_s32_to_f64>
8000648e:	14 98       	mov	r8,r10
80006490:	16 99       	mov	r9,r11
80006492:	fa ea 00 08 	ld.d	r10,sp[8]
80006496:	e0 a0 10 8f 	rcall	800085b4 <__avr32_f64_sub>
8000649a:	fa eb 00 08 	st.d	sp[8],r10
8000649e:	41 68       	lddsp	r8,sp[0x58]
800064a0:	2d 08       	sub	r8,-48
800064a2:	0a c8       	st.b	r5++,r8
800064a4:	41 3c       	lddsp	r12,sp[0x4c]
800064a6:	18 35       	cp.w	r5,r12
800064a8:	c2 81       	brne	800064f8 <_dtoa_r+0x61c>
800064aa:	30 08       	mov	r8,0
800064ac:	fc 19 3f e0 	movh	r9,0x3fe0
800064b0:	fa ea 00 28 	ld.d	r10,sp[40]
800064b4:	e0 a0 11 4e 	rcall	80008750 <__avr32_f64_add>
800064b8:	40 85       	lddsp	r5,sp[0x20]
800064ba:	fa e8 00 08 	ld.d	r8,sp[8]
800064be:	08 05       	add	r5,r4
800064c0:	e0 a0 12 a0 	rcall	80008a00 <__avr32_f64_cmp_lt>
800064c4:	e0 81 00 99 	brne	800065f6 <_dtoa_r+0x71a>
800064c8:	fa e8 00 28 	ld.d	r8,sp[40]
800064cc:	30 0a       	mov	r10,0
800064ce:	fc 1b 3f e0 	movh	r11,0x3fe0
800064d2:	e0 a0 10 71 	rcall	800085b4 <__avr32_f64_sub>
800064d6:	14 98       	mov	r8,r10
800064d8:	16 99       	mov	r9,r11
800064da:	fa ea 00 08 	ld.d	r10,sp[8]
800064de:	e0 a0 12 91 	rcall	80008a00 <__avr32_f64_cmp_lt>
800064e2:	c1 30       	breq	80006508 <_dtoa_r+0x62c>
800064e4:	33 09       	mov	r9,48
800064e6:	0a 98       	mov	r8,r5
800064e8:	11 7a       	ld.ub	r10,--r8
800064ea:	f2 0a 18 00 	cp.b	r10,r9
800064ee:	e0 81 02 d1 	brne	80006a90 <_dtoa_r+0xbb4>
800064f2:	10 95       	mov	r5,r8
800064f4:	cf 9b       	rjmp	800064e6 <_dtoa_r+0x60a>
800064f6:	d7 03       	nop
800064f8:	30 08       	mov	r8,0
800064fa:	fc 19 40 24 	movh	r9,0x4024
800064fe:	e0 a0 0f 6f 	rcall	800083dc <__avr32_f64_mul>
80006502:	fa eb 00 08 	st.d	sp[8],r10
80006506:	cb db       	rjmp	80006480 <_dtoa_r+0x5a4>
80006508:	fa ea 00 3c 	ld.d	r10,sp[60]
8000650c:	fa eb 00 08 	st.d	sp[8],r10
80006510:	58 e6       	cp.w	r6,14
80006512:	5f ab       	srle	r11
80006514:	41 8a       	lddsp	r10,sp[0x60]
80006516:	30 08       	mov	r8,0
80006518:	f4 09 11 ff 	rsub	r9,r10,-1
8000651c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006520:	f0 09 18 00 	cp.b	r9,r8
80006524:	e0 80 00 82 	breq	80006628 <_dtoa_r+0x74c>
80006528:	40 ea       	lddsp	r10,sp[0x38]
8000652a:	58 01       	cp.w	r1,0
8000652c:	5f a9       	srle	r9
8000652e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006532:	fe ca ca ca 	sub	r10,pc,-13622
80006536:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000653a:	fa e5 00 10 	st.d	sp[16],r4
8000653e:	f0 09 18 00 	cp.b	r9,r8
80006542:	c1 40       	breq	8000656a <_dtoa_r+0x68e>
80006544:	58 01       	cp.w	r1,0
80006546:	e0 81 01 77 	brne	80006834 <_dtoa_r+0x958>
8000654a:	30 08       	mov	r8,0
8000654c:	fc 19 40 14 	movh	r9,0x4014
80006550:	08 9a       	mov	r10,r4
80006552:	0a 9b       	mov	r11,r5
80006554:	e0 a0 0f 44 	rcall	800083dc <__avr32_f64_mul>
80006558:	fa e8 00 08 	ld.d	r8,sp[8]
8000655c:	e0 a0 12 1e 	rcall	80008998 <__avr32_f64_cmp_ge>
80006560:	e0 81 01 6a 	brne	80006834 <_dtoa_r+0x958>
80006564:	02 92       	mov	r2,r1
80006566:	e0 8f 01 72 	bral	8000684a <_dtoa_r+0x96e>
8000656a:	40 85       	lddsp	r5,sp[0x20]
8000656c:	30 14       	mov	r4,1
8000656e:	fa e8 00 10 	ld.d	r8,sp[16]
80006572:	fa ea 00 08 	ld.d	r10,sp[8]
80006576:	e0 a0 12 79 	rcall	80008a68 <__avr32_f64_div>
8000657a:	e0 a0 11 75 	rcall	80008864 <__avr32_f64_to_s32>
8000657e:	18 92       	mov	r2,r12
80006580:	e0 a0 11 89 	rcall	80008892 <__avr32_s32_to_f64>
80006584:	fa e8 00 10 	ld.d	r8,sp[16]
80006588:	e0 a0 0f 2a 	rcall	800083dc <__avr32_f64_mul>
8000658c:	14 98       	mov	r8,r10
8000658e:	16 99       	mov	r9,r11
80006590:	fa ea 00 08 	ld.d	r10,sp[8]
80006594:	e0 a0 10 10 	rcall	800085b4 <__avr32_f64_sub>
80006598:	fa eb 00 08 	st.d	sp[8],r10
8000659c:	e4 c8 ff d0 	sub	r8,r2,-48
800065a0:	0a c8       	st.b	r5++,r8
800065a2:	fc 19 40 24 	movh	r9,0x4024
800065a6:	30 08       	mov	r8,0
800065a8:	02 34       	cp.w	r4,r1
800065aa:	c3 31       	brne	80006610 <_dtoa_r+0x734>
800065ac:	fa e8 00 08 	ld.d	r8,sp[8]
800065b0:	e0 a0 10 d0 	rcall	80008750 <__avr32_f64_add>
800065b4:	16 91       	mov	r1,r11
800065b6:	14 90       	mov	r0,r10
800065b8:	14 98       	mov	r8,r10
800065ba:	02 99       	mov	r9,r1
800065bc:	fa ea 00 10 	ld.d	r10,sp[16]
800065c0:	e0 a0 12 20 	rcall	80008a00 <__avr32_f64_cmp_lt>
800065c4:	c1 a1       	brne	800065f8 <_dtoa_r+0x71c>
800065c6:	fa e8 00 10 	ld.d	r8,sp[16]
800065ca:	00 9a       	mov	r10,r0
800065cc:	02 9b       	mov	r11,r1
800065ce:	e0 a0 11 d2 	rcall	80008972 <__avr32_f64_cmp_eq>
800065d2:	e0 80 02 5e 	breq	80006a8e <_dtoa_r+0xbb2>
800065d6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800065da:	c0 f1       	brne	800065f8 <_dtoa_r+0x71c>
800065dc:	e0 8f 02 59 	bral	80006a8e <_dtoa_r+0xbb2>
800065e0:	40 8a       	lddsp	r10,sp[0x20]
800065e2:	14 38       	cp.w	r8,r10
800065e4:	c0 30       	breq	800065ea <_dtoa_r+0x70e>
800065e6:	10 95       	mov	r5,r8
800065e8:	c0 98       	rjmp	800065fa <_dtoa_r+0x71e>
800065ea:	33 08       	mov	r8,48
800065ec:	40 89       	lddsp	r9,sp[0x20]
800065ee:	2f f6       	sub	r6,-1
800065f0:	b2 88       	st.b	r9[0x0],r8
800065f2:	40 88       	lddsp	r8,sp[0x20]
800065f4:	c0 88       	rjmp	80006604 <_dtoa_r+0x728>
800065f6:	40 66       	lddsp	r6,sp[0x18]
800065f8:	33 99       	mov	r9,57
800065fa:	0a 98       	mov	r8,r5
800065fc:	11 7a       	ld.ub	r10,--r8
800065fe:	f2 0a 18 00 	cp.b	r10,r9
80006602:	ce f0       	breq	800065e0 <_dtoa_r+0x704>
80006604:	50 66       	stdsp	sp[0x18],r6
80006606:	11 89       	ld.ub	r9,r8[0x0]
80006608:	2f f9       	sub	r9,-1
8000660a:	b0 89       	st.b	r8[0x0],r9
8000660c:	e0 8f 02 42 	bral	80006a90 <_dtoa_r+0xbb4>
80006610:	e0 a0 0e e6 	rcall	800083dc <__avr32_f64_mul>
80006614:	2f f4       	sub	r4,-1
80006616:	fa eb 00 08 	st.d	sp[8],r10
8000661a:	30 08       	mov	r8,0
8000661c:	30 09       	mov	r9,0
8000661e:	e0 a0 11 aa 	rcall	80008972 <__avr32_f64_cmp_eq>
80006622:	ca 60       	breq	8000656e <_dtoa_r+0x692>
80006624:	e0 8f 02 35 	bral	80006a8e <_dtoa_r+0xbb2>
80006628:	40 d8       	lddsp	r8,sp[0x34]
8000662a:	58 08       	cp.w	r8,0
8000662c:	c0 51       	brne	80006636 <_dtoa_r+0x75a>
8000662e:	04 98       	mov	r8,r2
80006630:	00 95       	mov	r5,r0
80006632:	40 d4       	lddsp	r4,sp[0x34]
80006634:	c3 78       	rjmp	800066a2 <_dtoa_r+0x7c6>
80006636:	40 c5       	lddsp	r5,sp[0x30]
80006638:	58 15       	cp.w	r5,1
8000663a:	e0 89 00 0f 	brgt	80006658 <_dtoa_r+0x77c>
8000663e:	41 74       	lddsp	r4,sp[0x5c]
80006640:	58 04       	cp.w	r4,0
80006642:	c0 40       	breq	8000664a <_dtoa_r+0x76e>
80006644:	f4 c9 fb cd 	sub	r9,r10,-1075
80006648:	c0 48       	rjmp	80006650 <_dtoa_r+0x774>
8000664a:	41 99       	lddsp	r9,sp[0x64]
8000664c:	f2 09 11 36 	rsub	r9,r9,54
80006650:	04 98       	mov	r8,r2
80006652:	00 95       	mov	r5,r0
80006654:	c1 c8       	rjmp	8000668c <_dtoa_r+0x7b0>
80006656:	d7 03       	nop
80006658:	e2 c8 00 01 	sub	r8,r1,1
8000665c:	58 01       	cp.w	r1,0
8000665e:	e0 05 17 40 	movge	r5,r0
80006662:	e2 09 17 40 	movge	r9,r1
80006666:	e1 d1 e5 15 	sublt	r5,r0,r1
8000666a:	f9 b9 05 00 	movlt	r9,0
8000666e:	10 32       	cp.w	r2,r8
80006670:	e5 d8 e4 18 	subge	r8,r2,r8
80006674:	f1 d2 e5 18 	sublt	r8,r8,r2
80006678:	e5 d8 e5 02 	addlt	r2,r2,r8
8000667c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006680:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006684:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006688:	f9 b8 05 00 	movlt	r8,0
8000668c:	40 4b       	lddsp	r11,sp[0x10]
8000668e:	12 0b       	add	r11,r9
80006690:	50 08       	stdsp	sp[0x0],r8
80006692:	50 4b       	stdsp	sp[0x10],r11
80006694:	12 00       	add	r0,r9
80006696:	30 1b       	mov	r11,1
80006698:	0e 9c       	mov	r12,r7
8000669a:	e0 a0 0a d1 	rcall	80007c3c <__i2b>
8000669e:	40 08       	lddsp	r8,sp[0x0]
800066a0:	18 94       	mov	r4,r12
800066a2:	40 4a       	lddsp	r10,sp[0x10]
800066a4:	58 05       	cp.w	r5,0
800066a6:	5f 99       	srgt	r9
800066a8:	58 0a       	cp.w	r10,0
800066aa:	5f 9a       	srgt	r10
800066ac:	f5 e9 00 09 	and	r9,r10,r9
800066b0:	c0 80       	breq	800066c0 <_dtoa_r+0x7e4>
800066b2:	40 4c       	lddsp	r12,sp[0x10]
800066b4:	f8 05 0d 49 	min	r9,r12,r5
800066b8:	12 1c       	sub	r12,r9
800066ba:	12 10       	sub	r0,r9
800066bc:	50 4c       	stdsp	sp[0x10],r12
800066be:	12 15       	sub	r5,r9
800066c0:	58 02       	cp.w	r2,0
800066c2:	e0 8a 00 27 	brle	80006710 <_dtoa_r+0x834>
800066c6:	40 db       	lddsp	r11,sp[0x34]
800066c8:	58 0b       	cp.w	r11,0
800066ca:	c1 d0       	breq	80006704 <_dtoa_r+0x828>
800066cc:	58 08       	cp.w	r8,0
800066ce:	e0 8a 00 17 	brle	800066fc <_dtoa_r+0x820>
800066d2:	10 9a       	mov	r10,r8
800066d4:	50 08       	stdsp	sp[0x0],r8
800066d6:	08 9b       	mov	r11,r4
800066d8:	0e 9c       	mov	r12,r7
800066da:	e0 a0 0a f7 	rcall	80007cc8 <__pow5mult>
800066de:	06 9a       	mov	r10,r3
800066e0:	18 9b       	mov	r11,r12
800066e2:	18 94       	mov	r4,r12
800066e4:	0e 9c       	mov	r12,r7
800066e6:	e0 a0 0a 2b 	rcall	80007b3c <__multiply>
800066ea:	18 99       	mov	r9,r12
800066ec:	06 9b       	mov	r11,r3
800066ee:	50 19       	stdsp	sp[0x4],r9
800066f0:	0e 9c       	mov	r12,r7
800066f2:	e0 a0 08 d7 	rcall	800078a0 <_Bfree>
800066f6:	40 19       	lddsp	r9,sp[0x4]
800066f8:	40 08       	lddsp	r8,sp[0x0]
800066fa:	12 93       	mov	r3,r9
800066fc:	e4 08 01 0a 	sub	r10,r2,r8
80006700:	c0 80       	breq	80006710 <_dtoa_r+0x834>
80006702:	c0 28       	rjmp	80006706 <_dtoa_r+0x82a>
80006704:	04 9a       	mov	r10,r2
80006706:	06 9b       	mov	r11,r3
80006708:	0e 9c       	mov	r12,r7
8000670a:	e0 a0 0a df 	rcall	80007cc8 <__pow5mult>
8000670e:	18 93       	mov	r3,r12
80006710:	30 1b       	mov	r11,1
80006712:	0e 9c       	mov	r12,r7
80006714:	e0 a0 0a 94 	rcall	80007c3c <__i2b>
80006718:	41 1a       	lddsp	r10,sp[0x44]
8000671a:	18 92       	mov	r2,r12
8000671c:	58 0a       	cp.w	r10,0
8000671e:	e0 8a 00 07 	brle	8000672c <_dtoa_r+0x850>
80006722:	18 9b       	mov	r11,r12
80006724:	0e 9c       	mov	r12,r7
80006726:	e0 a0 0a d1 	rcall	80007cc8 <__pow5mult>
8000672a:	18 92       	mov	r2,r12
8000672c:	40 c9       	lddsp	r9,sp[0x30]
8000672e:	58 19       	cp.w	r9,1
80006730:	e0 89 00 14 	brgt	80006758 <_dtoa_r+0x87c>
80006734:	40 38       	lddsp	r8,sp[0xc]
80006736:	58 08       	cp.w	r8,0
80006738:	c1 01       	brne	80006758 <_dtoa_r+0x87c>
8000673a:	40 29       	lddsp	r9,sp[0x8]
8000673c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006740:	c0 c1       	brne	80006758 <_dtoa_r+0x87c>
80006742:	12 98       	mov	r8,r9
80006744:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006748:	c0 80       	breq	80006758 <_dtoa_r+0x87c>
8000674a:	40 4c       	lddsp	r12,sp[0x10]
8000674c:	30 1b       	mov	r11,1
8000674e:	2f fc       	sub	r12,-1
80006750:	2f f0       	sub	r0,-1
80006752:	50 4c       	stdsp	sp[0x10],r12
80006754:	50 6b       	stdsp	sp[0x18],r11
80006756:	c0 38       	rjmp	8000675c <_dtoa_r+0x880>
80006758:	30 0a       	mov	r10,0
8000675a:	50 6a       	stdsp	sp[0x18],r10
8000675c:	41 19       	lddsp	r9,sp[0x44]
8000675e:	58 09       	cp.w	r9,0
80006760:	c0 31       	brne	80006766 <_dtoa_r+0x88a>
80006762:	30 1c       	mov	r12,1
80006764:	c0 98       	rjmp	80006776 <_dtoa_r+0x89a>
80006766:	64 48       	ld.w	r8,r2[0x10]
80006768:	2f c8       	sub	r8,-4
8000676a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000676e:	e0 a0 08 08 	rcall	8000777e <__hi0bits>
80006772:	f8 0c 11 20 	rsub	r12,r12,32
80006776:	40 4b       	lddsp	r11,sp[0x10]
80006778:	f8 0b 00 08 	add	r8,r12,r11
8000677c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006780:	c0 c0       	breq	80006798 <_dtoa_r+0x8bc>
80006782:	f0 08 11 20 	rsub	r8,r8,32
80006786:	58 48       	cp.w	r8,4
80006788:	e0 8a 00 06 	brle	80006794 <_dtoa_r+0x8b8>
8000678c:	20 48       	sub	r8,4
8000678e:	10 0b       	add	r11,r8
80006790:	50 4b       	stdsp	sp[0x10],r11
80006792:	c0 78       	rjmp	800067a0 <_dtoa_r+0x8c4>
80006794:	58 48       	cp.w	r8,4
80006796:	c0 70       	breq	800067a4 <_dtoa_r+0x8c8>
80006798:	40 4a       	lddsp	r10,sp[0x10]
8000679a:	2e 48       	sub	r8,-28
8000679c:	10 0a       	add	r10,r8
8000679e:	50 4a       	stdsp	sp[0x10],r10
800067a0:	10 00       	add	r0,r8
800067a2:	10 05       	add	r5,r8
800067a4:	58 00       	cp.w	r0,0
800067a6:	e0 8a 00 08 	brle	800067b6 <_dtoa_r+0x8da>
800067aa:	06 9b       	mov	r11,r3
800067ac:	00 9a       	mov	r10,r0
800067ae:	0e 9c       	mov	r12,r7
800067b0:	e0 a0 09 82 	rcall	80007ab4 <__lshift>
800067b4:	18 93       	mov	r3,r12
800067b6:	40 49       	lddsp	r9,sp[0x10]
800067b8:	58 09       	cp.w	r9,0
800067ba:	e0 8a 00 08 	brle	800067ca <_dtoa_r+0x8ee>
800067be:	04 9b       	mov	r11,r2
800067c0:	12 9a       	mov	r10,r9
800067c2:	0e 9c       	mov	r12,r7
800067c4:	e0 a0 09 78 	rcall	80007ab4 <__lshift>
800067c8:	18 92       	mov	r2,r12
800067ca:	41 48       	lddsp	r8,sp[0x50]
800067cc:	58 08       	cp.w	r8,0
800067ce:	c1 b0       	breq	80006804 <_dtoa_r+0x928>
800067d0:	04 9b       	mov	r11,r2
800067d2:	06 9c       	mov	r12,r3
800067d4:	e0 a0 08 4c 	rcall	8000786c <__mcmp>
800067d8:	c1 64       	brge	80006804 <_dtoa_r+0x928>
800067da:	06 9b       	mov	r11,r3
800067dc:	30 09       	mov	r9,0
800067de:	30 aa       	mov	r10,10
800067e0:	0e 9c       	mov	r12,r7
800067e2:	e0 a0 0a 35 	rcall	80007c4c <__multadd>
800067e6:	20 16       	sub	r6,1
800067e8:	18 93       	mov	r3,r12
800067ea:	40 dc       	lddsp	r12,sp[0x34]
800067ec:	58 0c       	cp.w	r12,0
800067ee:	c0 31       	brne	800067f4 <_dtoa_r+0x918>
800067f0:	40 91       	lddsp	r1,sp[0x24]
800067f2:	c0 98       	rjmp	80006804 <_dtoa_r+0x928>
800067f4:	08 9b       	mov	r11,r4
800067f6:	40 91       	lddsp	r1,sp[0x24]
800067f8:	30 09       	mov	r9,0
800067fa:	30 aa       	mov	r10,10
800067fc:	0e 9c       	mov	r12,r7
800067fe:	e0 a0 0a 27 	rcall	80007c4c <__multadd>
80006802:	18 94       	mov	r4,r12
80006804:	58 01       	cp.w	r1,0
80006806:	5f a9       	srle	r9
80006808:	40 cb       	lddsp	r11,sp[0x30]
8000680a:	58 2b       	cp.w	r11,2
8000680c:	5f 98       	srgt	r8
8000680e:	f3 e8 00 08 	and	r8,r9,r8
80006812:	c2 50       	breq	8000685c <_dtoa_r+0x980>
80006814:	58 01       	cp.w	r1,0
80006816:	c1 11       	brne	80006838 <_dtoa_r+0x95c>
80006818:	04 9b       	mov	r11,r2
8000681a:	02 99       	mov	r9,r1
8000681c:	30 5a       	mov	r10,5
8000681e:	0e 9c       	mov	r12,r7
80006820:	e0 a0 0a 16 	rcall	80007c4c <__multadd>
80006824:	18 92       	mov	r2,r12
80006826:	18 9b       	mov	r11,r12
80006828:	06 9c       	mov	r12,r3
8000682a:	e0 a0 08 21 	rcall	8000786c <__mcmp>
8000682e:	e0 89 00 0f 	brgt	8000684c <_dtoa_r+0x970>
80006832:	c0 38       	rjmp	80006838 <_dtoa_r+0x95c>
80006834:	30 02       	mov	r2,0
80006836:	04 94       	mov	r4,r2
80006838:	40 ea       	lddsp	r10,sp[0x38]
8000683a:	30 09       	mov	r9,0
8000683c:	5c da       	com	r10
8000683e:	40 85       	lddsp	r5,sp[0x20]
80006840:	50 6a       	stdsp	sp[0x18],r10
80006842:	50 49       	stdsp	sp[0x10],r9
80006844:	c0 f9       	rjmp	80006a62 <_dtoa_r+0xb86>
80006846:	08 92       	mov	r2,r4
80006848:	40 66       	lddsp	r6,sp[0x18]
8000684a:	04 94       	mov	r4,r2
8000684c:	2f f6       	sub	r6,-1
8000684e:	50 66       	stdsp	sp[0x18],r6
80006850:	33 18       	mov	r8,49
80006852:	40 85       	lddsp	r5,sp[0x20]
80006854:	0a c8       	st.b	r5++,r8
80006856:	30 08       	mov	r8,0
80006858:	50 48       	stdsp	sp[0x10],r8
8000685a:	c0 49       	rjmp	80006a62 <_dtoa_r+0xb86>
8000685c:	40 dc       	lddsp	r12,sp[0x34]
8000685e:	58 0c       	cp.w	r12,0
80006860:	e0 80 00 b5 	breq	800069ca <_dtoa_r+0xaee>
80006864:	58 05       	cp.w	r5,0
80006866:	e0 8a 00 08 	brle	80006876 <_dtoa_r+0x99a>
8000686a:	08 9b       	mov	r11,r4
8000686c:	0a 9a       	mov	r10,r5
8000686e:	0e 9c       	mov	r12,r7
80006870:	e0 a0 09 22 	rcall	80007ab4 <__lshift>
80006874:	18 94       	mov	r4,r12
80006876:	40 6b       	lddsp	r11,sp[0x18]
80006878:	58 0b       	cp.w	r11,0
8000687a:	c0 31       	brne	80006880 <_dtoa_r+0x9a4>
8000687c:	08 9c       	mov	r12,r4
8000687e:	c1 38       	rjmp	800068a4 <_dtoa_r+0x9c8>
80006880:	68 1b       	ld.w	r11,r4[0x4]
80006882:	0e 9c       	mov	r12,r7
80006884:	e0 a0 08 28 	rcall	800078d4 <_Balloc>
80006888:	68 4a       	ld.w	r10,r4[0x10]
8000688a:	18 95       	mov	r5,r12
8000688c:	e8 cb ff f4 	sub	r11,r4,-12
80006890:	2f ea       	sub	r10,-2
80006892:	2f 4c       	sub	r12,-12
80006894:	a3 6a       	lsl	r10,0x2
80006896:	fe b0 e8 3f 	rcall	80003914 <memcpy>
8000689a:	0a 9b       	mov	r11,r5
8000689c:	30 1a       	mov	r10,1
8000689e:	0e 9c       	mov	r12,r7
800068a0:	e0 a0 09 0a 	rcall	80007ab4 <__lshift>
800068a4:	50 44       	stdsp	sp[0x10],r4
800068a6:	40 3a       	lddsp	r10,sp[0xc]
800068a8:	30 19       	mov	r9,1
800068aa:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800068ae:	18 94       	mov	r4,r12
800068b0:	50 da       	stdsp	sp[0x34],r10
800068b2:	40 85       	lddsp	r5,sp[0x20]
800068b4:	50 99       	stdsp	sp[0x24],r9
800068b6:	50 26       	stdsp	sp[0x8],r6
800068b8:	50 e1       	stdsp	sp[0x38],r1
800068ba:	04 9b       	mov	r11,r2
800068bc:	06 9c       	mov	r12,r3
800068be:	fe b0 fa 7f 	rcall	80005dbc <quorem>
800068c2:	40 4b       	lddsp	r11,sp[0x10]
800068c4:	f8 c0 ff d0 	sub	r0,r12,-48
800068c8:	06 9c       	mov	r12,r3
800068ca:	e0 a0 07 d1 	rcall	8000786c <__mcmp>
800068ce:	08 9a       	mov	r10,r4
800068d0:	50 6c       	stdsp	sp[0x18],r12
800068d2:	04 9b       	mov	r11,r2
800068d4:	0e 9c       	mov	r12,r7
800068d6:	e0 a0 08 87 	rcall	800079e4 <__mdiff>
800068da:	18 91       	mov	r1,r12
800068dc:	78 38       	ld.w	r8,r12[0xc]
800068de:	58 08       	cp.w	r8,0
800068e0:	c0 30       	breq	800068e6 <_dtoa_r+0xa0a>
800068e2:	30 16       	mov	r6,1
800068e4:	c0 68       	rjmp	800068f0 <_dtoa_r+0xa14>
800068e6:	18 9b       	mov	r11,r12
800068e8:	06 9c       	mov	r12,r3
800068ea:	e0 a0 07 c1 	rcall	8000786c <__mcmp>
800068ee:	18 96       	mov	r6,r12
800068f0:	0e 9c       	mov	r12,r7
800068f2:	02 9b       	mov	r11,r1
800068f4:	e0 a0 07 d6 	rcall	800078a0 <_Bfree>
800068f8:	40 cc       	lddsp	r12,sp[0x30]
800068fa:	ed ec 10 08 	or	r8,r6,r12
800068fe:	c0 d1       	brne	80006918 <_dtoa_r+0xa3c>
80006900:	40 db       	lddsp	r11,sp[0x34]
80006902:	58 0b       	cp.w	r11,0
80006904:	c0 a1       	brne	80006918 <_dtoa_r+0xa3c>
80006906:	40 26       	lddsp	r6,sp[0x8]
80006908:	e0 40 00 39 	cp.w	r0,57
8000690c:	c3 00       	breq	8000696c <_dtoa_r+0xa90>
8000690e:	40 6a       	lddsp	r10,sp[0x18]
80006910:	58 0a       	cp.w	r10,0
80006912:	e0 89 00 24 	brgt	8000695a <_dtoa_r+0xa7e>
80006916:	c2 f8       	rjmp	80006974 <_dtoa_r+0xa98>
80006918:	40 69       	lddsp	r9,sp[0x18]
8000691a:	58 09       	cp.w	r9,0
8000691c:	c0 85       	brlt	8000692c <_dtoa_r+0xa50>
8000691e:	12 98       	mov	r8,r9
80006920:	40 cc       	lddsp	r12,sp[0x30]
80006922:	18 48       	or	r8,r12
80006924:	c1 d1       	brne	8000695e <_dtoa_r+0xa82>
80006926:	40 db       	lddsp	r11,sp[0x34]
80006928:	58 0b       	cp.w	r11,0
8000692a:	c1 a1       	brne	8000695e <_dtoa_r+0xa82>
8000692c:	0c 99       	mov	r9,r6
8000692e:	40 26       	lddsp	r6,sp[0x8]
80006930:	58 09       	cp.w	r9,0
80006932:	e0 8a 00 21 	brle	80006974 <_dtoa_r+0xa98>
80006936:	06 9b       	mov	r11,r3
80006938:	30 1a       	mov	r10,1
8000693a:	0e 9c       	mov	r12,r7
8000693c:	e0 a0 08 bc 	rcall	80007ab4 <__lshift>
80006940:	04 9b       	mov	r11,r2
80006942:	18 93       	mov	r3,r12
80006944:	e0 a0 07 94 	rcall	8000786c <__mcmp>
80006948:	e0 89 00 06 	brgt	80006954 <_dtoa_r+0xa78>
8000694c:	c1 41       	brne	80006974 <_dtoa_r+0xa98>
8000694e:	ed b0 00 00 	bld	r0,0x0
80006952:	c1 11       	brne	80006974 <_dtoa_r+0xa98>
80006954:	e0 40 00 39 	cp.w	r0,57
80006958:	c0 a0       	breq	8000696c <_dtoa_r+0xa90>
8000695a:	2f f0       	sub	r0,-1
8000695c:	c0 c8       	rjmp	80006974 <_dtoa_r+0xa98>
8000695e:	58 06       	cp.w	r6,0
80006960:	e0 8a 00 0c 	brle	80006978 <_dtoa_r+0xa9c>
80006964:	40 26       	lddsp	r6,sp[0x8]
80006966:	e0 40 00 39 	cp.w	r0,57
8000696a:	c0 41       	brne	80006972 <_dtoa_r+0xa96>
8000696c:	33 98       	mov	r8,57
8000696e:	0a c8       	st.b	r5++,r8
80006970:	c6 78       	rjmp	80006a3e <_dtoa_r+0xb62>
80006972:	2f f0       	sub	r0,-1
80006974:	0a c0       	st.b	r5++,r0
80006976:	c7 58       	rjmp	80006a60 <_dtoa_r+0xb84>
80006978:	0a c0       	st.b	r5++,r0
8000697a:	40 9a       	lddsp	r10,sp[0x24]
8000697c:	40 e9       	lddsp	r9,sp[0x38]
8000697e:	12 3a       	cp.w	r10,r9
80006980:	c4 30       	breq	80006a06 <_dtoa_r+0xb2a>
80006982:	06 9b       	mov	r11,r3
80006984:	30 09       	mov	r9,0
80006986:	30 aa       	mov	r10,10
80006988:	0e 9c       	mov	r12,r7
8000698a:	e0 a0 09 61 	rcall	80007c4c <__multadd>
8000698e:	40 48       	lddsp	r8,sp[0x10]
80006990:	18 93       	mov	r3,r12
80006992:	08 38       	cp.w	r8,r4
80006994:	c0 91       	brne	800069a6 <_dtoa_r+0xaca>
80006996:	10 9b       	mov	r11,r8
80006998:	30 09       	mov	r9,0
8000699a:	30 aa       	mov	r10,10
8000699c:	0e 9c       	mov	r12,r7
8000699e:	e0 a0 09 57 	rcall	80007c4c <__multadd>
800069a2:	50 4c       	stdsp	sp[0x10],r12
800069a4:	c0 e8       	rjmp	800069c0 <_dtoa_r+0xae4>
800069a6:	40 4b       	lddsp	r11,sp[0x10]
800069a8:	30 09       	mov	r9,0
800069aa:	30 aa       	mov	r10,10
800069ac:	0e 9c       	mov	r12,r7
800069ae:	e0 a0 09 4f 	rcall	80007c4c <__multadd>
800069b2:	08 9b       	mov	r11,r4
800069b4:	50 4c       	stdsp	sp[0x10],r12
800069b6:	30 09       	mov	r9,0
800069b8:	30 aa       	mov	r10,10
800069ba:	0e 9c       	mov	r12,r7
800069bc:	e0 a0 09 48 	rcall	80007c4c <__multadd>
800069c0:	18 94       	mov	r4,r12
800069c2:	40 9c       	lddsp	r12,sp[0x24]
800069c4:	2f fc       	sub	r12,-1
800069c6:	50 9c       	stdsp	sp[0x24],r12
800069c8:	c7 9b       	rjmp	800068ba <_dtoa_r+0x9de>
800069ca:	30 18       	mov	r8,1
800069cc:	06 90       	mov	r0,r3
800069ce:	40 85       	lddsp	r5,sp[0x20]
800069d0:	08 93       	mov	r3,r4
800069d2:	0c 94       	mov	r4,r6
800069d4:	10 96       	mov	r6,r8
800069d6:	04 9b       	mov	r11,r2
800069d8:	00 9c       	mov	r12,r0
800069da:	fe b0 f9 f1 	rcall	80005dbc <quorem>
800069de:	2d 0c       	sub	r12,-48
800069e0:	0a cc       	st.b	r5++,r12
800069e2:	02 36       	cp.w	r6,r1
800069e4:	c0 a4       	brge	800069f8 <_dtoa_r+0xb1c>
800069e6:	00 9b       	mov	r11,r0
800069e8:	30 09       	mov	r9,0
800069ea:	30 aa       	mov	r10,10
800069ec:	0e 9c       	mov	r12,r7
800069ee:	2f f6       	sub	r6,-1
800069f0:	e0 a0 09 2e 	rcall	80007c4c <__multadd>
800069f4:	18 90       	mov	r0,r12
800069f6:	cf 0b       	rjmp	800069d6 <_dtoa_r+0xafa>
800069f8:	08 96       	mov	r6,r4
800069fa:	30 0b       	mov	r11,0
800069fc:	06 94       	mov	r4,r3
800069fe:	50 4b       	stdsp	sp[0x10],r11
80006a00:	00 93       	mov	r3,r0
80006a02:	18 90       	mov	r0,r12
80006a04:	c0 28       	rjmp	80006a08 <_dtoa_r+0xb2c>
80006a06:	40 26       	lddsp	r6,sp[0x8]
80006a08:	06 9b       	mov	r11,r3
80006a0a:	30 1a       	mov	r10,1
80006a0c:	0e 9c       	mov	r12,r7
80006a0e:	e0 a0 08 53 	rcall	80007ab4 <__lshift>
80006a12:	04 9b       	mov	r11,r2
80006a14:	18 93       	mov	r3,r12
80006a16:	e0 a0 07 2b 	rcall	8000786c <__mcmp>
80006a1a:	e0 89 00 12 	brgt	80006a3e <_dtoa_r+0xb62>
80006a1e:	c1 b1       	brne	80006a54 <_dtoa_r+0xb78>
80006a20:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006a24:	c0 d1       	brne	80006a3e <_dtoa_r+0xb62>
80006a26:	c1 78       	rjmp	80006a54 <_dtoa_r+0xb78>
80006a28:	40 89       	lddsp	r9,sp[0x20]
80006a2a:	12 38       	cp.w	r8,r9
80006a2c:	c0 30       	breq	80006a32 <_dtoa_r+0xb56>
80006a2e:	10 95       	mov	r5,r8
80006a30:	c0 88       	rjmp	80006a40 <_dtoa_r+0xb64>
80006a32:	2f f6       	sub	r6,-1
80006a34:	50 66       	stdsp	sp[0x18],r6
80006a36:	33 18       	mov	r8,49
80006a38:	40 8c       	lddsp	r12,sp[0x20]
80006a3a:	b8 88       	st.b	r12[0x0],r8
80006a3c:	c1 38       	rjmp	80006a62 <_dtoa_r+0xb86>
80006a3e:	33 9a       	mov	r10,57
80006a40:	0a 98       	mov	r8,r5
80006a42:	11 79       	ld.ub	r9,--r8
80006a44:	f4 09 18 00 	cp.b	r9,r10
80006a48:	cf 00       	breq	80006a28 <_dtoa_r+0xb4c>
80006a4a:	2f f9       	sub	r9,-1
80006a4c:	b0 89       	st.b	r8[0x0],r9
80006a4e:	c0 98       	rjmp	80006a60 <_dtoa_r+0xb84>
80006a50:	10 95       	mov	r5,r8
80006a52:	c0 28       	rjmp	80006a56 <_dtoa_r+0xb7a>
80006a54:	33 09       	mov	r9,48
80006a56:	0a 98       	mov	r8,r5
80006a58:	11 7a       	ld.ub	r10,--r8
80006a5a:	f2 0a 18 00 	cp.b	r10,r9
80006a5e:	cf 90       	breq	80006a50 <_dtoa_r+0xb74>
80006a60:	50 66       	stdsp	sp[0x18],r6
80006a62:	04 9b       	mov	r11,r2
80006a64:	0e 9c       	mov	r12,r7
80006a66:	e0 a0 07 1d 	rcall	800078a0 <_Bfree>
80006a6a:	58 04       	cp.w	r4,0
80006a6c:	c1 20       	breq	80006a90 <_dtoa_r+0xbb4>
80006a6e:	40 4b       	lddsp	r11,sp[0x10]
80006a70:	08 3b       	cp.w	r11,r4
80006a72:	5f 19       	srne	r9
80006a74:	58 0b       	cp.w	r11,0
80006a76:	5f 18       	srne	r8
80006a78:	f3 e8 00 08 	and	r8,r9,r8
80006a7c:	c0 40       	breq	80006a84 <_dtoa_r+0xba8>
80006a7e:	0e 9c       	mov	r12,r7
80006a80:	e0 a0 07 10 	rcall	800078a0 <_Bfree>
80006a84:	08 9b       	mov	r11,r4
80006a86:	0e 9c       	mov	r12,r7
80006a88:	e0 a0 07 0c 	rcall	800078a0 <_Bfree>
80006a8c:	c0 28       	rjmp	80006a90 <_dtoa_r+0xbb4>
80006a8e:	50 66       	stdsp	sp[0x18],r6
80006a90:	0e 9c       	mov	r12,r7
80006a92:	06 9b       	mov	r11,r3
80006a94:	e0 a0 07 06 	rcall	800078a0 <_Bfree>
80006a98:	30 08       	mov	r8,0
80006a9a:	aa 88       	st.b	r5[0x0],r8
80006a9c:	40 68       	lddsp	r8,sp[0x18]
80006a9e:	41 5a       	lddsp	r10,sp[0x54]
80006aa0:	2f f8       	sub	r8,-1
80006aa2:	41 29       	lddsp	r9,sp[0x48]
80006aa4:	95 08       	st.w	r10[0x0],r8
80006aa6:	40 8c       	lddsp	r12,sp[0x20]
80006aa8:	58 09       	cp.w	r9,0
80006aaa:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006aae:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006ab2:	2e 6d       	sub	sp,-104
80006ab4:	d8 32       	popm	r0-r7,pc
80006ab6:	d7 03       	nop

80006ab8 <_fflush_r>:
80006ab8:	d4 21       	pushm	r4-r7,lr
80006aba:	16 97       	mov	r7,r11
80006abc:	18 96       	mov	r6,r12
80006abe:	76 48       	ld.w	r8,r11[0x10]
80006ac0:	58 08       	cp.w	r8,0
80006ac2:	c7 f0       	breq	80006bc0 <_fflush_r+0x108>
80006ac4:	58 0c       	cp.w	r12,0
80006ac6:	c0 50       	breq	80006ad0 <_fflush_r+0x18>
80006ac8:	78 68       	ld.w	r8,r12[0x18]
80006aca:	58 08       	cp.w	r8,0
80006acc:	c0 21       	brne	80006ad0 <_fflush_r+0x18>
80006ace:	cc dc       	rcall	80006c68 <__sinit>
80006ad0:	fe c8 d1 14 	sub	r8,pc,-12012
80006ad4:	10 37       	cp.w	r7,r8
80006ad6:	c0 31       	brne	80006adc <_fflush_r+0x24>
80006ad8:	6c 07       	ld.w	r7,r6[0x0]
80006ada:	c0 c8       	rjmp	80006af2 <_fflush_r+0x3a>
80006adc:	fe c8 d1 00 	sub	r8,pc,-12032
80006ae0:	10 37       	cp.w	r7,r8
80006ae2:	c0 31       	brne	80006ae8 <_fflush_r+0x30>
80006ae4:	6c 17       	ld.w	r7,r6[0x4]
80006ae6:	c0 68       	rjmp	80006af2 <_fflush_r+0x3a>
80006ae8:	fe c8 d0 ec 	sub	r8,pc,-12052
80006aec:	10 37       	cp.w	r7,r8
80006aee:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006af2:	8e 6a       	ld.sh	r10,r7[0xc]
80006af4:	14 98       	mov	r8,r10
80006af6:	ed ba 00 03 	bld	r10,0x3
80006afa:	c4 20       	breq	80006b7e <_fflush_r+0xc6>
80006afc:	ab ba       	sbr	r10,0xb
80006afe:	ae 6a       	st.h	r7[0xc],r10
80006b00:	6e 18       	ld.w	r8,r7[0x4]
80006b02:	58 08       	cp.w	r8,0
80006b04:	e0 89 00 06 	brgt	80006b10 <_fflush_r+0x58>
80006b08:	6f 08       	ld.w	r8,r7[0x40]
80006b0a:	58 08       	cp.w	r8,0
80006b0c:	e0 8a 00 5a 	brle	80006bc0 <_fflush_r+0x108>
80006b10:	6e b8       	ld.w	r8,r7[0x2c]
80006b12:	58 08       	cp.w	r8,0
80006b14:	c5 60       	breq	80006bc0 <_fflush_r+0x108>
80006b16:	e2 1a 10 00 	andl	r10,0x1000,COH
80006b1a:	c0 30       	breq	80006b20 <_fflush_r+0x68>
80006b1c:	6f 55       	ld.w	r5,r7[0x54]
80006b1e:	c0 f8       	rjmp	80006b3c <_fflush_r+0x84>
80006b20:	30 19       	mov	r9,1
80006b22:	6e 8b       	ld.w	r11,r7[0x20]
80006b24:	0c 9c       	mov	r12,r6
80006b26:	5d 18       	icall	r8
80006b28:	18 95       	mov	r5,r12
80006b2a:	5b fc       	cp.w	r12,-1
80006b2c:	c0 81       	brne	80006b3c <_fflush_r+0x84>
80006b2e:	6c 38       	ld.w	r8,r6[0xc]
80006b30:	59 d8       	cp.w	r8,29
80006b32:	c4 70       	breq	80006bc0 <_fflush_r+0x108>
80006b34:	8e 68       	ld.sh	r8,r7[0xc]
80006b36:	a7 a8       	sbr	r8,0x6
80006b38:	ae 68       	st.h	r7[0xc],r8
80006b3a:	d8 22       	popm	r4-r7,pc
80006b3c:	8e 68       	ld.sh	r8,r7[0xc]
80006b3e:	ed b8 00 02 	bld	r8,0x2
80006b42:	c0 91       	brne	80006b54 <_fflush_r+0x9c>
80006b44:	6e 18       	ld.w	r8,r7[0x4]
80006b46:	10 15       	sub	r5,r8
80006b48:	6e d8       	ld.w	r8,r7[0x34]
80006b4a:	58 08       	cp.w	r8,0
80006b4c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006b50:	eb d8 e1 15 	subne	r5,r5,r8
80006b54:	6e b8       	ld.w	r8,r7[0x2c]
80006b56:	0c 9c       	mov	r12,r6
80006b58:	30 09       	mov	r9,0
80006b5a:	0a 9a       	mov	r10,r5
80006b5c:	6e 8b       	ld.w	r11,r7[0x20]
80006b5e:	5d 18       	icall	r8
80006b60:	8e 68       	ld.sh	r8,r7[0xc]
80006b62:	0a 3c       	cp.w	r12,r5
80006b64:	c2 61       	brne	80006bb0 <_fflush_r+0xf8>
80006b66:	ab d8       	cbr	r8,0xb
80006b68:	30 0c       	mov	r12,0
80006b6a:	6e 49       	ld.w	r9,r7[0x10]
80006b6c:	ae 68       	st.h	r7[0xc],r8
80006b6e:	8f 1c       	st.w	r7[0x4],r12
80006b70:	8f 09       	st.w	r7[0x0],r9
80006b72:	ed b8 00 0c 	bld	r8,0xc
80006b76:	c2 51       	brne	80006bc0 <_fflush_r+0x108>
80006b78:	ef 45 00 54 	st.w	r7[84],r5
80006b7c:	d8 22       	popm	r4-r7,pc
80006b7e:	6e 45       	ld.w	r5,r7[0x10]
80006b80:	58 05       	cp.w	r5,0
80006b82:	c1 f0       	breq	80006bc0 <_fflush_r+0x108>
80006b84:	6e 04       	ld.w	r4,r7[0x0]
80006b86:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006b8a:	8f 05       	st.w	r7[0x0],r5
80006b8c:	f9 b8 01 00 	movne	r8,0
80006b90:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006b94:	0a 14       	sub	r4,r5
80006b96:	8f 28       	st.w	r7[0x8],r8
80006b98:	c1 18       	rjmp	80006bba <_fflush_r+0x102>
80006b9a:	08 99       	mov	r9,r4
80006b9c:	0a 9a       	mov	r10,r5
80006b9e:	6e a8       	ld.w	r8,r7[0x28]
80006ba0:	6e 8b       	ld.w	r11,r7[0x20]
80006ba2:	0c 9c       	mov	r12,r6
80006ba4:	5d 18       	icall	r8
80006ba6:	18 14       	sub	r4,r12
80006ba8:	58 0c       	cp.w	r12,0
80006baa:	e0 89 00 07 	brgt	80006bb8 <_fflush_r+0x100>
80006bae:	8e 68       	ld.sh	r8,r7[0xc]
80006bb0:	a7 a8       	sbr	r8,0x6
80006bb2:	3f fc       	mov	r12,-1
80006bb4:	ae 68       	st.h	r7[0xc],r8
80006bb6:	d8 22       	popm	r4-r7,pc
80006bb8:	18 05       	add	r5,r12
80006bba:	58 04       	cp.w	r4,0
80006bbc:	fe 99 ff ef 	brgt	80006b9a <_fflush_r+0xe2>
80006bc0:	d8 2a       	popm	r4-r7,pc,r12=0
80006bc2:	d7 03       	nop

80006bc4 <__sfp_lock_acquire>:
80006bc4:	5e fc       	retal	r12

80006bc6 <__sfp_lock_release>:
80006bc6:	5e fc       	retal	r12

80006bc8 <_cleanup_r>:
80006bc8:	d4 01       	pushm	lr
80006bca:	fe cb e8 6a 	sub	r11,pc,-6038
80006bce:	e0 a0 02 fd 	rcall	800071c8 <_fwalk>
80006bd2:	d8 02       	popm	pc

80006bd4 <__sfmoreglue>:
80006bd4:	d4 21       	pushm	r4-r7,lr
80006bd6:	16 95       	mov	r5,r11
80006bd8:	f6 06 10 5c 	mul	r6,r11,92
80006bdc:	ec cb ff f4 	sub	r11,r6,-12
80006be0:	e0 a0 03 84 	rcall	800072e8 <_malloc_r>
80006be4:	18 97       	mov	r7,r12
80006be6:	c0 90       	breq	80006bf8 <__sfmoreglue+0x24>
80006be8:	99 15       	st.w	r12[0x4],r5
80006bea:	30 0b       	mov	r11,0
80006bec:	2f 4c       	sub	r12,-12
80006bee:	0c 9a       	mov	r10,r6
80006bf0:	8f 2c       	st.w	r7[0x8],r12
80006bf2:	8f 0b       	st.w	r7[0x0],r11
80006bf4:	e0 a0 05 bc 	rcall	8000776c <memset>
80006bf8:	0e 9c       	mov	r12,r7
80006bfa:	d8 22       	popm	r4-r7,pc

80006bfc <__sfp>:
80006bfc:	d4 21       	pushm	r4-r7,lr
80006bfe:	fe c8 d6 2a 	sub	r8,pc,-10710
80006c02:	18 96       	mov	r6,r12
80006c04:	70 07       	ld.w	r7,r8[0x0]
80006c06:	6e 68       	ld.w	r8,r7[0x18]
80006c08:	58 08       	cp.w	r8,0
80006c0a:	c0 31       	brne	80006c10 <__sfp+0x14>
80006c0c:	0e 9c       	mov	r12,r7
80006c0e:	c2 dc       	rcall	80006c68 <__sinit>
80006c10:	ee c7 ff 28 	sub	r7,r7,-216
80006c14:	30 05       	mov	r5,0
80006c16:	6e 2c       	ld.w	r12,r7[0x8]
80006c18:	6e 18       	ld.w	r8,r7[0x4]
80006c1a:	c0 68       	rjmp	80006c26 <__sfp+0x2a>
80006c1c:	98 69       	ld.sh	r9,r12[0xc]
80006c1e:	ea 09 19 00 	cp.h	r9,r5
80006c22:	c1 10       	breq	80006c44 <__sfp+0x48>
80006c24:	2a 4c       	sub	r12,-92
80006c26:	20 18       	sub	r8,1
80006c28:	cf a7       	brpl	80006c1c <__sfp+0x20>
80006c2a:	6e 08       	ld.w	r8,r7[0x0]
80006c2c:	58 08       	cp.w	r8,0
80006c2e:	c0 61       	brne	80006c3a <__sfp+0x3e>
80006c30:	30 4b       	mov	r11,4
80006c32:	0c 9c       	mov	r12,r6
80006c34:	cd 0f       	rcall	80006bd4 <__sfmoreglue>
80006c36:	8f 0c       	st.w	r7[0x0],r12
80006c38:	c0 30       	breq	80006c3e <__sfp+0x42>
80006c3a:	6e 07       	ld.w	r7,r7[0x0]
80006c3c:	ce db       	rjmp	80006c16 <__sfp+0x1a>
80006c3e:	30 c8       	mov	r8,12
80006c40:	8d 38       	st.w	r6[0xc],r8
80006c42:	d8 22       	popm	r4-r7,pc
80006c44:	30 08       	mov	r8,0
80006c46:	f9 48 00 4c 	st.w	r12[76],r8
80006c4a:	99 08       	st.w	r12[0x0],r8
80006c4c:	99 28       	st.w	r12[0x8],r8
80006c4e:	99 18       	st.w	r12[0x4],r8
80006c50:	99 48       	st.w	r12[0x10],r8
80006c52:	99 58       	st.w	r12[0x14],r8
80006c54:	99 68       	st.w	r12[0x18],r8
80006c56:	99 d8       	st.w	r12[0x34],r8
80006c58:	99 e8       	st.w	r12[0x38],r8
80006c5a:	f9 48 00 48 	st.w	r12[72],r8
80006c5e:	3f f8       	mov	r8,-1
80006c60:	b8 78       	st.h	r12[0xe],r8
80006c62:	30 18       	mov	r8,1
80006c64:	b8 68       	st.h	r12[0xc],r8
80006c66:	d8 22       	popm	r4-r7,pc

80006c68 <__sinit>:
80006c68:	d4 21       	pushm	r4-r7,lr
80006c6a:	18 96       	mov	r6,r12
80006c6c:	78 67       	ld.w	r7,r12[0x18]
80006c6e:	58 07       	cp.w	r7,0
80006c70:	c4 91       	brne	80006d02 <__sinit+0x9a>
80006c72:	fe c8 00 aa 	sub	r8,pc,170
80006c76:	30 15       	mov	r5,1
80006c78:	99 a8       	st.w	r12[0x28],r8
80006c7a:	f9 47 00 d8 	st.w	r12[216],r7
80006c7e:	f9 47 00 dc 	st.w	r12[220],r7
80006c82:	f9 47 00 e0 	st.w	r12[224],r7
80006c86:	99 65       	st.w	r12[0x18],r5
80006c88:	cb af       	rcall	80006bfc <__sfp>
80006c8a:	8d 0c       	st.w	r6[0x0],r12
80006c8c:	0c 9c       	mov	r12,r6
80006c8e:	cb 7f       	rcall	80006bfc <__sfp>
80006c90:	8d 1c       	st.w	r6[0x4],r12
80006c92:	0c 9c       	mov	r12,r6
80006c94:	cb 4f       	rcall	80006bfc <__sfp>
80006c96:	6c 09       	ld.w	r9,r6[0x0]
80006c98:	30 48       	mov	r8,4
80006c9a:	93 07       	st.w	r9[0x0],r7
80006c9c:	b2 68       	st.h	r9[0xc],r8
80006c9e:	93 17       	st.w	r9[0x4],r7
80006ca0:	93 27       	st.w	r9[0x8],r7
80006ca2:	6c 18       	ld.w	r8,r6[0x4]
80006ca4:	b2 77       	st.h	r9[0xe],r7
80006ca6:	93 47       	st.w	r9[0x10],r7
80006ca8:	93 57       	st.w	r9[0x14],r7
80006caa:	93 67       	st.w	r9[0x18],r7
80006cac:	93 89       	st.w	r9[0x20],r9
80006cae:	91 07       	st.w	r8[0x0],r7
80006cb0:	91 17       	st.w	r8[0x4],r7
80006cb2:	91 27       	st.w	r8[0x8],r7
80006cb4:	fe ce eb e4 	sub	lr,pc,-5148
80006cb8:	fe cb ec 14 	sub	r11,pc,-5100
80006cbc:	93 9e       	st.w	r9[0x24],lr
80006cbe:	93 ab       	st.w	r9[0x28],r11
80006cc0:	fe ca ec 3c 	sub	r10,pc,-5060
80006cc4:	fe c4 ec 48 	sub	r4,pc,-5048
80006cc8:	93 ba       	st.w	r9[0x2c],r10
80006cca:	93 c4       	st.w	r9[0x30],r4
80006ccc:	30 99       	mov	r9,9
80006cce:	b0 69       	st.h	r8[0xc],r9
80006cd0:	b0 75       	st.h	r8[0xe],r5
80006cd2:	91 c4       	st.w	r8[0x30],r4
80006cd4:	91 47       	st.w	r8[0x10],r7
80006cd6:	91 57       	st.w	r8[0x14],r7
80006cd8:	91 67       	st.w	r8[0x18],r7
80006cda:	91 88       	st.w	r8[0x20],r8
80006cdc:	91 9e       	st.w	r8[0x24],lr
80006cde:	91 ab       	st.w	r8[0x28],r11
80006ce0:	91 ba       	st.w	r8[0x2c],r10
80006ce2:	8d 2c       	st.w	r6[0x8],r12
80006ce4:	31 28       	mov	r8,18
80006ce6:	99 07       	st.w	r12[0x0],r7
80006ce8:	b8 68       	st.h	r12[0xc],r8
80006cea:	99 17       	st.w	r12[0x4],r7
80006cec:	99 27       	st.w	r12[0x8],r7
80006cee:	30 28       	mov	r8,2
80006cf0:	b8 78       	st.h	r12[0xe],r8
80006cf2:	99 c4       	st.w	r12[0x30],r4
80006cf4:	99 67       	st.w	r12[0x18],r7
80006cf6:	99 9e       	st.w	r12[0x24],lr
80006cf8:	99 ab       	st.w	r12[0x28],r11
80006cfa:	99 ba       	st.w	r12[0x2c],r10
80006cfc:	99 47       	st.w	r12[0x10],r7
80006cfe:	99 57       	st.w	r12[0x14],r7
80006d00:	99 8c       	st.w	r12[0x20],r12
80006d02:	d8 22       	popm	r4-r7,pc

80006d04 <_malloc_trim_r>:
80006d04:	d4 21       	pushm	r4-r7,lr
80006d06:	16 95       	mov	r5,r11
80006d08:	18 97       	mov	r7,r12
80006d0a:	e0 a0 05 38 	rcall	8000777a <__malloc_lock>
80006d0e:	e0 64 01 08 	mov	r4,264
80006d12:	68 28       	ld.w	r8,r4[0x8]
80006d14:	70 16       	ld.w	r6,r8[0x4]
80006d16:	e0 16 ff fc 	andl	r6,0xfffc
80006d1a:	ec c8 ff 91 	sub	r8,r6,-111
80006d1e:	f0 05 01 05 	sub	r5,r8,r5
80006d22:	e0 15 ff 80 	andl	r5,0xff80
80006d26:	ea c5 00 80 	sub	r5,r5,128
80006d2a:	e0 45 00 7f 	cp.w	r5,127
80006d2e:	e0 8a 00 25 	brle	80006d78 <_malloc_trim_r+0x74>
80006d32:	30 0b       	mov	r11,0
80006d34:	0e 9c       	mov	r12,r7
80006d36:	e0 a0 09 93 	rcall	8000805c <_sbrk_r>
80006d3a:	68 28       	ld.w	r8,r4[0x8]
80006d3c:	0c 08       	add	r8,r6
80006d3e:	10 3c       	cp.w	r12,r8
80006d40:	c1 c1       	brne	80006d78 <_malloc_trim_r+0x74>
80006d42:	ea 0b 11 00 	rsub	r11,r5,0
80006d46:	0e 9c       	mov	r12,r7
80006d48:	e0 a0 09 8a 	rcall	8000805c <_sbrk_r>
80006d4c:	5b fc       	cp.w	r12,-1
80006d4e:	c1 91       	brne	80006d80 <_malloc_trim_r+0x7c>
80006d50:	30 0b       	mov	r11,0
80006d52:	0e 9c       	mov	r12,r7
80006d54:	e0 a0 09 84 	rcall	8000805c <_sbrk_r>
80006d58:	68 28       	ld.w	r8,r4[0x8]
80006d5a:	f8 08 01 09 	sub	r9,r12,r8
80006d5e:	58 f9       	cp.w	r9,15
80006d60:	e0 8a 00 0c 	brle	80006d78 <_malloc_trim_r+0x74>
80006d64:	a1 a9       	sbr	r9,0x0
80006d66:	91 19       	st.w	r8[0x4],r9
80006d68:	e0 68 05 14 	mov	r8,1300
80006d6c:	70 09       	ld.w	r9,r8[0x0]
80006d6e:	e0 68 06 34 	mov	r8,1588
80006d72:	f8 09 01 09 	sub	r9,r12,r9
80006d76:	91 09       	st.w	r8[0x0],r9
80006d78:	0e 9c       	mov	r12,r7
80006d7a:	e0 a0 05 01 	rcall	8000777c <__malloc_unlock>
80006d7e:	d8 2a       	popm	r4-r7,pc,r12=0
80006d80:	68 28       	ld.w	r8,r4[0x8]
80006d82:	0a 16       	sub	r6,r5
80006d84:	a1 a6       	sbr	r6,0x0
80006d86:	91 16       	st.w	r8[0x4],r6
80006d88:	e0 68 06 34 	mov	r8,1588
80006d8c:	70 09       	ld.w	r9,r8[0x0]
80006d8e:	0a 19       	sub	r9,r5
80006d90:	0e 9c       	mov	r12,r7
80006d92:	91 09       	st.w	r8[0x0],r9
80006d94:	e0 a0 04 f4 	rcall	8000777c <__malloc_unlock>
80006d98:	da 2a       	popm	r4-r7,pc,r12=1
80006d9a:	d7 03       	nop

80006d9c <_free_r>:
80006d9c:	d4 21       	pushm	r4-r7,lr
80006d9e:	16 96       	mov	r6,r11
80006da0:	18 97       	mov	r7,r12
80006da2:	58 0b       	cp.w	r11,0
80006da4:	e0 80 00 c0 	breq	80006f24 <_free_r+0x188>
80006da8:	e0 a0 04 e9 	rcall	8000777a <__malloc_lock>
80006dac:	20 86       	sub	r6,8
80006dae:	e0 6a 01 08 	mov	r10,264
80006db2:	6c 18       	ld.w	r8,r6[0x4]
80006db4:	74 2e       	ld.w	lr,r10[0x8]
80006db6:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006dba:	a1 c8       	cbr	r8,0x0
80006dbc:	ec 08 00 09 	add	r9,r6,r8
80006dc0:	72 1b       	ld.w	r11,r9[0x4]
80006dc2:	e0 1b ff fc 	andl	r11,0xfffc
80006dc6:	1c 39       	cp.w	r9,lr
80006dc8:	c1 e1       	brne	80006e04 <_free_r+0x68>
80006dca:	f6 08 00 08 	add	r8,r11,r8
80006dce:	58 0c       	cp.w	r12,0
80006dd0:	c0 81       	brne	80006de0 <_free_r+0x44>
80006dd2:	6c 09       	ld.w	r9,r6[0x0]
80006dd4:	12 16       	sub	r6,r9
80006dd6:	12 08       	add	r8,r9
80006dd8:	6c 3b       	ld.w	r11,r6[0xc]
80006dda:	6c 29       	ld.w	r9,r6[0x8]
80006ddc:	97 29       	st.w	r11[0x8],r9
80006dde:	93 3b       	st.w	r9[0xc],r11
80006de0:	10 99       	mov	r9,r8
80006de2:	95 26       	st.w	r10[0x8],r6
80006de4:	a1 a9       	sbr	r9,0x0
80006de6:	8d 19       	st.w	r6[0x4],r9
80006de8:	e0 69 05 10 	mov	r9,1296
80006dec:	72 09       	ld.w	r9,r9[0x0]
80006dee:	12 38       	cp.w	r8,r9
80006df0:	c0 63       	brcs	80006dfc <_free_r+0x60>
80006df2:	e0 68 06 30 	mov	r8,1584
80006df6:	0e 9c       	mov	r12,r7
80006df8:	70 0b       	ld.w	r11,r8[0x0]
80006dfa:	c8 5f       	rcall	80006d04 <_malloc_trim_r>
80006dfc:	0e 9c       	mov	r12,r7
80006dfe:	e0 a0 04 bf 	rcall	8000777c <__malloc_unlock>
80006e02:	d8 22       	popm	r4-r7,pc
80006e04:	93 1b       	st.w	r9[0x4],r11
80006e06:	58 0c       	cp.w	r12,0
80006e08:	c0 30       	breq	80006e0e <_free_r+0x72>
80006e0a:	30 0c       	mov	r12,0
80006e0c:	c1 08       	rjmp	80006e2c <_free_r+0x90>
80006e0e:	6c 0e       	ld.w	lr,r6[0x0]
80006e10:	f4 c5 ff f8 	sub	r5,r10,-8
80006e14:	1c 16       	sub	r6,lr
80006e16:	1c 08       	add	r8,lr
80006e18:	6c 2e       	ld.w	lr,r6[0x8]
80006e1a:	0a 3e       	cp.w	lr,r5
80006e1c:	f9 bc 00 01 	moveq	r12,1
80006e20:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80006e24:	eb fe 1a 02 	st.wne	r5[0x8],lr
80006e28:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006e2c:	f2 0b 00 0e 	add	lr,r9,r11
80006e30:	7c 1e       	ld.w	lr,lr[0x4]
80006e32:	ed be 00 00 	bld	lr,0x0
80006e36:	c1 40       	breq	80006e5e <_free_r+0xc2>
80006e38:	16 08       	add	r8,r11
80006e3a:	58 0c       	cp.w	r12,0
80006e3c:	c0 d1       	brne	80006e56 <_free_r+0xba>
80006e3e:	e0 6e 01 08 	mov	lr,264
80006e42:	72 2b       	ld.w	r11,r9[0x8]
80006e44:	2f 8e       	sub	lr,-8
80006e46:	1c 3b       	cp.w	r11,lr
80006e48:	c0 71       	brne	80006e56 <_free_r+0xba>
80006e4a:	97 36       	st.w	r11[0xc],r6
80006e4c:	97 26       	st.w	r11[0x8],r6
80006e4e:	8d 2b       	st.w	r6[0x8],r11
80006e50:	8d 3b       	st.w	r6[0xc],r11
80006e52:	30 1c       	mov	r12,1
80006e54:	c0 58       	rjmp	80006e5e <_free_r+0xc2>
80006e56:	72 2b       	ld.w	r11,r9[0x8]
80006e58:	72 39       	ld.w	r9,r9[0xc]
80006e5a:	93 2b       	st.w	r9[0x8],r11
80006e5c:	97 39       	st.w	r11[0xc],r9
80006e5e:	10 99       	mov	r9,r8
80006e60:	ec 08 09 08 	st.w	r6[r8],r8
80006e64:	a1 a9       	sbr	r9,0x0
80006e66:	8d 19       	st.w	r6[0x4],r9
80006e68:	58 0c       	cp.w	r12,0
80006e6a:	c5 a1       	brne	80006f1e <_free_r+0x182>
80006e6c:	e0 48 01 ff 	cp.w	r8,511
80006e70:	e0 8b 00 13 	brhi	80006e96 <_free_r+0xfa>
80006e74:	a3 98       	lsr	r8,0x3
80006e76:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006e7a:	72 2b       	ld.w	r11,r9[0x8]
80006e7c:	8d 39       	st.w	r6[0xc],r9
80006e7e:	8d 2b       	st.w	r6[0x8],r11
80006e80:	97 36       	st.w	r11[0xc],r6
80006e82:	93 26       	st.w	r9[0x8],r6
80006e84:	a3 48       	asr	r8,0x2
80006e86:	74 19       	ld.w	r9,r10[0x4]
80006e88:	30 1b       	mov	r11,1
80006e8a:	f6 08 09 48 	lsl	r8,r11,r8
80006e8e:	f3 e8 10 08 	or	r8,r9,r8
80006e92:	95 18       	st.w	r10[0x4],r8
80006e94:	c4 58       	rjmp	80006f1e <_free_r+0x182>
80006e96:	f0 0b 16 09 	lsr	r11,r8,0x9
80006e9a:	58 4b       	cp.w	r11,4
80006e9c:	e0 8b 00 06 	brhi	80006ea8 <_free_r+0x10c>
80006ea0:	f0 0b 16 06 	lsr	r11,r8,0x6
80006ea4:	2c 8b       	sub	r11,-56
80006ea6:	c2 08       	rjmp	80006ee6 <_free_r+0x14a>
80006ea8:	59 4b       	cp.w	r11,20
80006eaa:	e0 8b 00 04 	brhi	80006eb2 <_free_r+0x116>
80006eae:	2a 5b       	sub	r11,-91
80006eb0:	c1 b8       	rjmp	80006ee6 <_free_r+0x14a>
80006eb2:	e0 4b 00 54 	cp.w	r11,84
80006eb6:	e0 8b 00 06 	brhi	80006ec2 <_free_r+0x126>
80006eba:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006ebe:	29 2b       	sub	r11,-110
80006ec0:	c1 38       	rjmp	80006ee6 <_free_r+0x14a>
80006ec2:	e0 4b 01 54 	cp.w	r11,340
80006ec6:	e0 8b 00 06 	brhi	80006ed2 <_free_r+0x136>
80006eca:	f0 0b 16 0f 	lsr	r11,r8,0xf
80006ece:	28 9b       	sub	r11,-119
80006ed0:	c0 b8       	rjmp	80006ee6 <_free_r+0x14a>
80006ed2:	e0 4b 05 54 	cp.w	r11,1364
80006ed6:	e0 88 00 05 	brls	80006ee0 <_free_r+0x144>
80006eda:	37 eb       	mov	r11,126
80006edc:	c0 58       	rjmp	80006ee6 <_free_r+0x14a>
80006ede:	d7 03       	nop
80006ee0:	f0 0b 16 12 	lsr	r11,r8,0x12
80006ee4:	28 4b       	sub	r11,-124
80006ee6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80006eea:	78 29       	ld.w	r9,r12[0x8]
80006eec:	18 39       	cp.w	r9,r12
80006eee:	c0 e1       	brne	80006f0a <_free_r+0x16e>
80006ef0:	74 18       	ld.w	r8,r10[0x4]
80006ef2:	a3 4b       	asr	r11,0x2
80006ef4:	30 1c       	mov	r12,1
80006ef6:	f8 0b 09 4b 	lsl	r11,r12,r11
80006efa:	f1 eb 10 0b 	or	r11,r8,r11
80006efe:	12 98       	mov	r8,r9
80006f00:	95 1b       	st.w	r10[0x4],r11
80006f02:	c0 a8       	rjmp	80006f16 <_free_r+0x17a>
80006f04:	72 29       	ld.w	r9,r9[0x8]
80006f06:	18 39       	cp.w	r9,r12
80006f08:	c0 60       	breq	80006f14 <_free_r+0x178>
80006f0a:	72 1a       	ld.w	r10,r9[0x4]
80006f0c:	e0 1a ff fc 	andl	r10,0xfffc
80006f10:	14 38       	cp.w	r8,r10
80006f12:	cf 93       	brcs	80006f04 <_free_r+0x168>
80006f14:	72 38       	ld.w	r8,r9[0xc]
80006f16:	8d 38       	st.w	r6[0xc],r8
80006f18:	8d 29       	st.w	r6[0x8],r9
80006f1a:	93 36       	st.w	r9[0xc],r6
80006f1c:	91 26       	st.w	r8[0x8],r6
80006f1e:	0e 9c       	mov	r12,r7
80006f20:	e0 a0 04 2e 	rcall	8000777c <__malloc_unlock>
80006f24:	d8 22       	popm	r4-r7,pc
80006f26:	d7 03       	nop

80006f28 <__sfvwrite_r>:
80006f28:	d4 31       	pushm	r0-r7,lr
80006f2a:	20 3d       	sub	sp,12
80006f2c:	14 94       	mov	r4,r10
80006f2e:	18 95       	mov	r5,r12
80006f30:	16 97       	mov	r7,r11
80006f32:	74 28       	ld.w	r8,r10[0x8]
80006f34:	58 08       	cp.w	r8,0
80006f36:	e0 80 01 45 	breq	800071c0 <__sfvwrite_r+0x298>
80006f3a:	96 68       	ld.sh	r8,r11[0xc]
80006f3c:	ed b8 00 03 	bld	r8,0x3
80006f40:	c0 41       	brne	80006f48 <__sfvwrite_r+0x20>
80006f42:	76 48       	ld.w	r8,r11[0x10]
80006f44:	58 08       	cp.w	r8,0
80006f46:	c0 c1       	brne	80006f5e <__sfvwrite_r+0x36>
80006f48:	0e 9b       	mov	r11,r7
80006f4a:	0a 9c       	mov	r12,r5
80006f4c:	fe b0 f6 ca 	rcall	80005ce0 <__swsetup_r>
80006f50:	c0 70       	breq	80006f5e <__sfvwrite_r+0x36>
80006f52:	8e 68       	ld.sh	r8,r7[0xc]
80006f54:	a7 a8       	sbr	r8,0x6
80006f56:	ae 68       	st.h	r7[0xc],r8
80006f58:	30 98       	mov	r8,9
80006f5a:	8b 38       	st.w	r5[0xc],r8
80006f5c:	c3 09       	rjmp	800071bc <__sfvwrite_r+0x294>
80006f5e:	8e 63       	ld.sh	r3,r7[0xc]
80006f60:	68 00       	ld.w	r0,r4[0x0]
80006f62:	06 96       	mov	r6,r3
80006f64:	e2 16 00 02 	andl	r6,0x2,COH
80006f68:	c2 10       	breq	80006faa <__sfvwrite_r+0x82>
80006f6a:	30 03       	mov	r3,0
80006f6c:	e0 62 04 00 	mov	r2,1024
80006f70:	06 96       	mov	r6,r3
80006f72:	c0 48       	rjmp	80006f7a <__sfvwrite_r+0x52>
80006f74:	60 03       	ld.w	r3,r0[0x0]
80006f76:	60 16       	ld.w	r6,r0[0x4]
80006f78:	2f 80       	sub	r0,-8
80006f7a:	58 06       	cp.w	r6,0
80006f7c:	cf c0       	breq	80006f74 <__sfvwrite_r+0x4c>
80006f7e:	e0 46 04 00 	cp.w	r6,1024
80006f82:	ec 09 17 80 	movls	r9,r6
80006f86:	e4 09 17 b0 	movhi	r9,r2
80006f8a:	06 9a       	mov	r10,r3
80006f8c:	6e a8       	ld.w	r8,r7[0x28]
80006f8e:	6e 8b       	ld.w	r11,r7[0x20]
80006f90:	0a 9c       	mov	r12,r5
80006f92:	5d 18       	icall	r8
80006f94:	18 16       	sub	r6,r12
80006f96:	58 0c       	cp.w	r12,0
80006f98:	e0 8a 01 0f 	brle	800071b6 <__sfvwrite_r+0x28e>
80006f9c:	68 28       	ld.w	r8,r4[0x8]
80006f9e:	18 18       	sub	r8,r12
80006fa0:	89 28       	st.w	r4[0x8],r8
80006fa2:	e0 80 01 0f 	breq	800071c0 <__sfvwrite_r+0x298>
80006fa6:	18 03       	add	r3,r12
80006fa8:	ce 9b       	rjmp	80006f7a <__sfvwrite_r+0x52>
80006faa:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006fae:	c0 70       	breq	80006fbc <__sfvwrite_r+0x94>
80006fb0:	50 06       	stdsp	sp[0x0],r6
80006fb2:	0c 93       	mov	r3,r6
80006fb4:	0c 91       	mov	r1,r6
80006fb6:	50 15       	stdsp	sp[0x4],r5
80006fb8:	08 92       	mov	r2,r4
80006fba:	c9 e8       	rjmp	800070f6 <__sfvwrite_r+0x1ce>
80006fbc:	06 96       	mov	r6,r3
80006fbe:	08 91       	mov	r1,r4
80006fc0:	c0 48       	rjmp	80006fc8 <__sfvwrite_r+0xa0>
80006fc2:	60 03       	ld.w	r3,r0[0x0]
80006fc4:	60 16       	ld.w	r6,r0[0x4]
80006fc6:	2f 80       	sub	r0,-8
80006fc8:	58 06       	cp.w	r6,0
80006fca:	cf c0       	breq	80006fc2 <__sfvwrite_r+0x9a>
80006fcc:	8e 68       	ld.sh	r8,r7[0xc]
80006fce:	6e 24       	ld.w	r4,r7[0x8]
80006fd0:	10 99       	mov	r9,r8
80006fd2:	e2 19 02 00 	andl	r9,0x200,COH
80006fd6:	c5 50       	breq	80007080 <__sfvwrite_r+0x158>
80006fd8:	08 36       	cp.w	r6,r4
80006fda:	c4 33       	brcs	80007060 <__sfvwrite_r+0x138>
80006fdc:	10 99       	mov	r9,r8
80006fde:	e2 19 04 80 	andl	r9,0x480,COH
80006fe2:	c3 f0       	breq	80007060 <__sfvwrite_r+0x138>
80006fe4:	6e 4b       	ld.w	r11,r7[0x10]
80006fe6:	6e 09       	ld.w	r9,r7[0x0]
80006fe8:	16 19       	sub	r9,r11
80006fea:	50 09       	stdsp	sp[0x0],r9
80006fec:	6e 59       	ld.w	r9,r7[0x14]
80006fee:	10 9c       	mov	r12,r8
80006ff0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80006ff4:	30 28       	mov	r8,2
80006ff6:	f4 08 0c 08 	divs	r8,r10,r8
80006ffa:	fa e9 00 04 	st.d	sp[4],r8
80006ffe:	10 94       	mov	r4,r8
80007000:	40 09       	lddsp	r9,sp[0x0]
80007002:	e2 1c 04 00 	andl	r12,0x400,COH
80007006:	2f f9       	sub	r9,-1
80007008:	0c 09       	add	r9,r6
8000700a:	12 38       	cp.w	r8,r9
8000700c:	f2 04 17 30 	movlo	r4,r9
80007010:	58 0c       	cp.w	r12,0
80007012:	c1 00       	breq	80007032 <__sfvwrite_r+0x10a>
80007014:	08 9b       	mov	r11,r4
80007016:	0a 9c       	mov	r12,r5
80007018:	c6 8d       	rcall	800072e8 <_malloc_r>
8000701a:	18 92       	mov	r2,r12
8000701c:	c1 40       	breq	80007044 <__sfvwrite_r+0x11c>
8000701e:	40 0a       	lddsp	r10,sp[0x0]
80007020:	6e 4b       	ld.w	r11,r7[0x10]
80007022:	fe b0 e4 79 	rcall	80003914 <memcpy>
80007026:	8e 68       	ld.sh	r8,r7[0xc]
80007028:	e0 18 fb 7f 	andl	r8,0xfb7f
8000702c:	a7 b8       	sbr	r8,0x7
8000702e:	ae 68       	st.h	r7[0xc],r8
80007030:	c0 d8       	rjmp	8000704a <__sfvwrite_r+0x122>
80007032:	08 9a       	mov	r10,r4
80007034:	0a 9c       	mov	r12,r5
80007036:	e0 a0 06 8f 	rcall	80007d54 <_realloc_r>
8000703a:	18 92       	mov	r2,r12
8000703c:	c0 71       	brne	8000704a <__sfvwrite_r+0x122>
8000703e:	6e 4b       	ld.w	r11,r7[0x10]
80007040:	0a 9c       	mov	r12,r5
80007042:	ca de       	rcall	80006d9c <_free_r>
80007044:	30 c8       	mov	r8,12
80007046:	8b 38       	st.w	r5[0xc],r8
80007048:	cb 78       	rjmp	800071b6 <__sfvwrite_r+0x28e>
8000704a:	40 0a       	lddsp	r10,sp[0x0]
8000704c:	40 09       	lddsp	r9,sp[0x0]
8000704e:	e8 0a 01 0a 	sub	r10,r4,r10
80007052:	e4 09 00 08 	add	r8,r2,r9
80007056:	8f 54       	st.w	r7[0x14],r4
80007058:	8f 2a       	st.w	r7[0x8],r10
8000705a:	8f 08       	st.w	r7[0x0],r8
8000705c:	8f 42       	st.w	r7[0x10],r2
8000705e:	0c 94       	mov	r4,r6
80007060:	08 36       	cp.w	r6,r4
80007062:	ec 04 17 30 	movlo	r4,r6
80007066:	06 9b       	mov	r11,r3
80007068:	08 9a       	mov	r10,r4
8000706a:	6e 0c       	ld.w	r12,r7[0x0]
8000706c:	e0 a0 03 61 	rcall	8000772e <memmove>
80007070:	6e 08       	ld.w	r8,r7[0x0]
80007072:	08 08       	add	r8,r4
80007074:	8f 08       	st.w	r7[0x0],r8
80007076:	6e 28       	ld.w	r8,r7[0x8]
80007078:	08 18       	sub	r8,r4
8000707a:	0c 94       	mov	r4,r6
8000707c:	8f 28       	st.w	r7[0x8],r8
8000707e:	c3 08       	rjmp	800070de <__sfvwrite_r+0x1b6>
80007080:	08 36       	cp.w	r6,r4
80007082:	5f ba       	srhi	r10
80007084:	6e 0c       	ld.w	r12,r7[0x0]
80007086:	6e 48       	ld.w	r8,r7[0x10]
80007088:	10 3c       	cp.w	r12,r8
8000708a:	5f b8       	srhi	r8
8000708c:	f5 e8 00 08 	and	r8,r10,r8
80007090:	f2 08 18 00 	cp.b	r8,r9
80007094:	c0 e0       	breq	800070b0 <__sfvwrite_r+0x188>
80007096:	06 9b       	mov	r11,r3
80007098:	08 9a       	mov	r10,r4
8000709a:	e0 a0 03 4a 	rcall	8000772e <memmove>
8000709e:	6e 08       	ld.w	r8,r7[0x0]
800070a0:	08 08       	add	r8,r4
800070a2:	0e 9b       	mov	r11,r7
800070a4:	8f 08       	st.w	r7[0x0],r8
800070a6:	0a 9c       	mov	r12,r5
800070a8:	fe b0 fd 08 	rcall	80006ab8 <_fflush_r>
800070ac:	c1 90       	breq	800070de <__sfvwrite_r+0x1b6>
800070ae:	c8 48       	rjmp	800071b6 <__sfvwrite_r+0x28e>
800070b0:	6e 59       	ld.w	r9,r7[0x14]
800070b2:	12 36       	cp.w	r6,r9
800070b4:	c0 a3       	brcs	800070c8 <__sfvwrite_r+0x1a0>
800070b6:	6e a8       	ld.w	r8,r7[0x28]
800070b8:	06 9a       	mov	r10,r3
800070ba:	6e 8b       	ld.w	r11,r7[0x20]
800070bc:	0a 9c       	mov	r12,r5
800070be:	5d 18       	icall	r8
800070c0:	18 94       	mov	r4,r12
800070c2:	e0 89 00 0e 	brgt	800070de <__sfvwrite_r+0x1b6>
800070c6:	c7 88       	rjmp	800071b6 <__sfvwrite_r+0x28e>
800070c8:	0c 9a       	mov	r10,r6
800070ca:	06 9b       	mov	r11,r3
800070cc:	e0 a0 03 31 	rcall	8000772e <memmove>
800070d0:	6e 08       	ld.w	r8,r7[0x0]
800070d2:	0c 08       	add	r8,r6
800070d4:	0c 94       	mov	r4,r6
800070d6:	8f 08       	st.w	r7[0x0],r8
800070d8:	6e 28       	ld.w	r8,r7[0x8]
800070da:	0c 18       	sub	r8,r6
800070dc:	8f 28       	st.w	r7[0x8],r8
800070de:	62 28       	ld.w	r8,r1[0x8]
800070e0:	08 18       	sub	r8,r4
800070e2:	83 28       	st.w	r1[0x8],r8
800070e4:	c6 e0       	breq	800071c0 <__sfvwrite_r+0x298>
800070e6:	08 16       	sub	r6,r4
800070e8:	08 03       	add	r3,r4
800070ea:	c6 fb       	rjmp	80006fc8 <__sfvwrite_r+0xa0>
800070ec:	60 03       	ld.w	r3,r0[0x0]
800070ee:	60 11       	ld.w	r1,r0[0x4]
800070f0:	30 08       	mov	r8,0
800070f2:	2f 80       	sub	r0,-8
800070f4:	50 08       	stdsp	sp[0x0],r8
800070f6:	58 01       	cp.w	r1,0
800070f8:	cf a0       	breq	800070ec <__sfvwrite_r+0x1c4>
800070fa:	40 0a       	lddsp	r10,sp[0x0]
800070fc:	58 0a       	cp.w	r10,0
800070fe:	c1 51       	brne	80007128 <__sfvwrite_r+0x200>
80007100:	e2 c6 ff ff 	sub	r6,r1,-1
80007104:	02 9a       	mov	r10,r1
80007106:	30 ab       	mov	r11,10
80007108:	06 9c       	mov	r12,r3
8000710a:	e0 a0 03 07 	rcall	80007718 <memchr>
8000710e:	f8 c8 ff ff 	sub	r8,r12,-1
80007112:	58 0c       	cp.w	r12,0
80007114:	f1 d3 e1 16 	subne	r6,r8,r3
80007118:	f9 b9 01 01 	movne	r9,1
8000711c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007120:	f9 b8 00 01 	moveq	r8,1
80007124:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007128:	02 36       	cp.w	r6,r1
8000712a:	ec 04 17 80 	movls	r4,r6
8000712e:	e2 04 17 b0 	movhi	r4,r1
80007132:	6e 59       	ld.w	r9,r7[0x14]
80007134:	6e 25       	ld.w	r5,r7[0x8]
80007136:	f2 05 00 05 	add	r5,r9,r5
8000713a:	0a 34       	cp.w	r4,r5
8000713c:	5f 9a       	srgt	r10
8000713e:	6e 0c       	ld.w	r12,r7[0x0]
80007140:	6e 48       	ld.w	r8,r7[0x10]
80007142:	10 3c       	cp.w	r12,r8
80007144:	5f b8       	srhi	r8
80007146:	f5 e8 00 08 	and	r8,r10,r8
8000714a:	30 0a       	mov	r10,0
8000714c:	f4 08 18 00 	cp.b	r8,r10
80007150:	c0 e0       	breq	8000716c <__sfvwrite_r+0x244>
80007152:	06 9b       	mov	r11,r3
80007154:	0a 9a       	mov	r10,r5
80007156:	e0 a0 02 ec 	rcall	8000772e <memmove>
8000715a:	6e 08       	ld.w	r8,r7[0x0]
8000715c:	0a 08       	add	r8,r5
8000715e:	0e 9b       	mov	r11,r7
80007160:	8f 08       	st.w	r7[0x0],r8
80007162:	40 1c       	lddsp	r12,sp[0x4]
80007164:	fe b0 fc aa 	rcall	80006ab8 <_fflush_r>
80007168:	c1 80       	breq	80007198 <__sfvwrite_r+0x270>
8000716a:	c2 68       	rjmp	800071b6 <__sfvwrite_r+0x28e>
8000716c:	12 34       	cp.w	r4,r9
8000716e:	c0 a5       	brlt	80007182 <__sfvwrite_r+0x25a>
80007170:	6e a8       	ld.w	r8,r7[0x28]
80007172:	06 9a       	mov	r10,r3
80007174:	6e 8b       	ld.w	r11,r7[0x20]
80007176:	40 1c       	lddsp	r12,sp[0x4]
80007178:	5d 18       	icall	r8
8000717a:	18 95       	mov	r5,r12
8000717c:	e0 89 00 0e 	brgt	80007198 <__sfvwrite_r+0x270>
80007180:	c1 b8       	rjmp	800071b6 <__sfvwrite_r+0x28e>
80007182:	08 9a       	mov	r10,r4
80007184:	06 9b       	mov	r11,r3
80007186:	e0 a0 02 d4 	rcall	8000772e <memmove>
8000718a:	6e 08       	ld.w	r8,r7[0x0]
8000718c:	08 08       	add	r8,r4
8000718e:	08 95       	mov	r5,r4
80007190:	8f 08       	st.w	r7[0x0],r8
80007192:	6e 28       	ld.w	r8,r7[0x8]
80007194:	08 18       	sub	r8,r4
80007196:	8f 28       	st.w	r7[0x8],r8
80007198:	0a 16       	sub	r6,r5
8000719a:	c0 71       	brne	800071a8 <__sfvwrite_r+0x280>
8000719c:	0e 9b       	mov	r11,r7
8000719e:	40 1c       	lddsp	r12,sp[0x4]
800071a0:	fe b0 fc 8c 	rcall	80006ab8 <_fflush_r>
800071a4:	c0 91       	brne	800071b6 <__sfvwrite_r+0x28e>
800071a6:	50 06       	stdsp	sp[0x0],r6
800071a8:	64 28       	ld.w	r8,r2[0x8]
800071aa:	0a 18       	sub	r8,r5
800071ac:	85 28       	st.w	r2[0x8],r8
800071ae:	c0 90       	breq	800071c0 <__sfvwrite_r+0x298>
800071b0:	0a 11       	sub	r1,r5
800071b2:	0a 03       	add	r3,r5
800071b4:	ca 1b       	rjmp	800070f6 <__sfvwrite_r+0x1ce>
800071b6:	8e 68       	ld.sh	r8,r7[0xc]
800071b8:	a7 a8       	sbr	r8,0x6
800071ba:	ae 68       	st.h	r7[0xc],r8
800071bc:	3f fc       	mov	r12,-1
800071be:	c0 28       	rjmp	800071c2 <__sfvwrite_r+0x29a>
800071c0:	30 0c       	mov	r12,0
800071c2:	2f dd       	sub	sp,-12
800071c4:	d8 32       	popm	r0-r7,pc
800071c6:	d7 03       	nop

800071c8 <_fwalk>:
800071c8:	d4 31       	pushm	r0-r7,lr
800071ca:	30 05       	mov	r5,0
800071cc:	16 91       	mov	r1,r11
800071ce:	f8 c7 ff 28 	sub	r7,r12,-216
800071d2:	0a 92       	mov	r2,r5
800071d4:	fe b0 fc f8 	rcall	80006bc4 <__sfp_lock_acquire>
800071d8:	3f f3       	mov	r3,-1
800071da:	c1 68       	rjmp	80007206 <_fwalk+0x3e>
800071dc:	6e 26       	ld.w	r6,r7[0x8]
800071de:	6e 14       	ld.w	r4,r7[0x4]
800071e0:	2f 46       	sub	r6,-12
800071e2:	c0 c8       	rjmp	800071fa <_fwalk+0x32>
800071e4:	8c 08       	ld.sh	r8,r6[0x0]
800071e6:	e4 08 19 00 	cp.h	r8,r2
800071ea:	c0 70       	breq	800071f8 <_fwalk+0x30>
800071ec:	8c 18       	ld.sh	r8,r6[0x2]
800071ee:	e6 08 19 00 	cp.h	r8,r3
800071f2:	c0 30       	breq	800071f8 <_fwalk+0x30>
800071f4:	5d 11       	icall	r1
800071f6:	18 45       	or	r5,r12
800071f8:	2a 46       	sub	r6,-92
800071fa:	20 14       	sub	r4,1
800071fc:	ec cc 00 0c 	sub	r12,r6,12
80007200:	58 04       	cp.w	r4,0
80007202:	cf 14       	brge	800071e4 <_fwalk+0x1c>
80007204:	6e 07       	ld.w	r7,r7[0x0]
80007206:	58 07       	cp.w	r7,0
80007208:	ce a1       	brne	800071dc <_fwalk+0x14>
8000720a:	fe b0 fc de 	rcall	80006bc6 <__sfp_lock_release>
8000720e:	0a 9c       	mov	r12,r5
80007210:	d8 32       	popm	r0-r7,pc
80007212:	d7 03       	nop

80007214 <_localeconv_r>:
80007214:	fe cc d7 f8 	sub	r12,pc,-10248
80007218:	5e fc       	retal	r12
8000721a:	d7 03       	nop

8000721c <__smakebuf_r>:
8000721c:	d4 21       	pushm	r4-r7,lr
8000721e:	20 fd       	sub	sp,60
80007220:	96 68       	ld.sh	r8,r11[0xc]
80007222:	16 97       	mov	r7,r11
80007224:	18 96       	mov	r6,r12
80007226:	e2 18 00 02 	andl	r8,0x2,COH
8000722a:	c3 c1       	brne	800072a2 <__smakebuf_r+0x86>
8000722c:	96 7b       	ld.sh	r11,r11[0xe]
8000722e:	f0 0b 19 00 	cp.h	r11,r8
80007232:	c0 55       	brlt	8000723c <__smakebuf_r+0x20>
80007234:	1a 9a       	mov	r10,sp
80007236:	e0 a0 08 9d 	rcall	80008370 <_fstat_r>
8000723a:	c0 f4       	brge	80007258 <__smakebuf_r+0x3c>
8000723c:	8e 65       	ld.sh	r5,r7[0xc]
8000723e:	0a 98       	mov	r8,r5
80007240:	ab b8       	sbr	r8,0xb
80007242:	e2 15 00 80 	andl	r5,0x80,COH
80007246:	ae 68       	st.h	r7[0xc],r8
80007248:	30 04       	mov	r4,0
8000724a:	e0 68 04 00 	mov	r8,1024
8000724e:	f9 b5 01 40 	movne	r5,64
80007252:	f0 05 17 00 	moveq	r5,r8
80007256:	c1 c8       	rjmp	8000728e <__smakebuf_r+0x72>
80007258:	40 18       	lddsp	r8,sp[0x4]
8000725a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000725e:	e0 48 20 00 	cp.w	r8,8192
80007262:	5f 04       	sreq	r4
80007264:	e0 48 80 00 	cp.w	r8,32768
80007268:	c0 e1       	brne	80007284 <__smakebuf_r+0x68>
8000726a:	6e b9       	ld.w	r9,r7[0x2c]
8000726c:	fe c8 f1 e8 	sub	r8,pc,-3608
80007270:	10 39       	cp.w	r9,r8
80007272:	c0 91       	brne	80007284 <__smakebuf_r+0x68>
80007274:	8e 68       	ld.sh	r8,r7[0xc]
80007276:	e0 65 04 00 	mov	r5,1024
8000727a:	ab a8       	sbr	r8,0xa
8000727c:	ef 45 00 50 	st.w	r7[80],r5
80007280:	ae 68       	st.h	r7[0xc],r8
80007282:	c0 68       	rjmp	8000728e <__smakebuf_r+0x72>
80007284:	8e 68       	ld.sh	r8,r7[0xc]
80007286:	e0 65 04 00 	mov	r5,1024
8000728a:	ab b8       	sbr	r8,0xb
8000728c:	ae 68       	st.h	r7[0xc],r8
8000728e:	0a 9b       	mov	r11,r5
80007290:	0c 9c       	mov	r12,r6
80007292:	c2 bc       	rcall	800072e8 <_malloc_r>
80007294:	8e 68       	ld.sh	r8,r7[0xc]
80007296:	c0 d1       	brne	800072b0 <__smakebuf_r+0x94>
80007298:	ed b8 00 09 	bld	r8,0x9
8000729c:	c1 b0       	breq	800072d2 <__smakebuf_r+0xb6>
8000729e:	a1 b8       	sbr	r8,0x1
800072a0:	ae 68       	st.h	r7[0xc],r8
800072a2:	ee c8 ff b9 	sub	r8,r7,-71
800072a6:	8f 48       	st.w	r7[0x10],r8
800072a8:	8f 08       	st.w	r7[0x0],r8
800072aa:	30 18       	mov	r8,1
800072ac:	8f 58       	st.w	r7[0x14],r8
800072ae:	c1 28       	rjmp	800072d2 <__smakebuf_r+0xb6>
800072b0:	a7 b8       	sbr	r8,0x7
800072b2:	8f 4c       	st.w	r7[0x10],r12
800072b4:	ae 68       	st.h	r7[0xc],r8
800072b6:	8f 55       	st.w	r7[0x14],r5
800072b8:	fe c8 06 f0 	sub	r8,pc,1776
800072bc:	8f 0c       	st.w	r7[0x0],r12
800072be:	8d a8       	st.w	r6[0x28],r8
800072c0:	58 04       	cp.w	r4,0
800072c2:	c0 80       	breq	800072d2 <__smakebuf_r+0xb6>
800072c4:	8e 7c       	ld.sh	r12,r7[0xe]
800072c6:	e0 a0 07 47 	rcall	80008154 <isatty>
800072ca:	c0 40       	breq	800072d2 <__smakebuf_r+0xb6>
800072cc:	8e 68       	ld.sh	r8,r7[0xc]
800072ce:	a1 a8       	sbr	r8,0x0
800072d0:	ae 68       	st.h	r7[0xc],r8
800072d2:	2f 1d       	sub	sp,-60
800072d4:	d8 22       	popm	r4-r7,pc
800072d6:	d7 03       	nop

800072d8 <malloc>:
800072d8:	d4 01       	pushm	lr
800072da:	e0 68 01 04 	mov	r8,260
800072de:	18 9b       	mov	r11,r12
800072e0:	70 0c       	ld.w	r12,r8[0x0]
800072e2:	c0 3c       	rcall	800072e8 <_malloc_r>
800072e4:	d8 02       	popm	pc
800072e6:	d7 03       	nop

800072e8 <_malloc_r>:
800072e8:	d4 31       	pushm	r0-r7,lr
800072ea:	f6 c8 ff f5 	sub	r8,r11,-11
800072ee:	18 95       	mov	r5,r12
800072f0:	10 97       	mov	r7,r8
800072f2:	e0 17 ff f8 	andl	r7,0xfff8
800072f6:	59 68       	cp.w	r8,22
800072f8:	f9 b7 08 10 	movls	r7,16
800072fc:	16 37       	cp.w	r7,r11
800072fe:	5f 38       	srlo	r8
80007300:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007304:	c0 50       	breq	8000730e <_malloc_r+0x26>
80007306:	30 c8       	mov	r8,12
80007308:	99 38       	st.w	r12[0xc],r8
8000730a:	e0 8f 01 f7 	bral	800076f8 <_malloc_r+0x410>
8000730e:	e0 a0 02 36 	rcall	8000777a <__malloc_lock>
80007312:	e0 47 01 f7 	cp.w	r7,503
80007316:	e0 8b 00 1d 	brhi	80007350 <_malloc_r+0x68>
8000731a:	ee 03 16 03 	lsr	r3,r7,0x3
8000731e:	e0 68 01 08 	mov	r8,264
80007322:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007326:	70 36       	ld.w	r6,r8[0xc]
80007328:	10 36       	cp.w	r6,r8
8000732a:	c0 61       	brne	80007336 <_malloc_r+0x4e>
8000732c:	ec c8 ff f8 	sub	r8,r6,-8
80007330:	70 36       	ld.w	r6,r8[0xc]
80007332:	10 36       	cp.w	r6,r8
80007334:	c0 c0       	breq	8000734c <_malloc_r+0x64>
80007336:	6c 18       	ld.w	r8,r6[0x4]
80007338:	e0 18 ff fc 	andl	r8,0xfffc
8000733c:	6c 3a       	ld.w	r10,r6[0xc]
8000733e:	ec 08 00 09 	add	r9,r6,r8
80007342:	0a 9c       	mov	r12,r5
80007344:	6c 28       	ld.w	r8,r6[0x8]
80007346:	95 28       	st.w	r10[0x8],r8
80007348:	91 3a       	st.w	r8[0xc],r10
8000734a:	c4 78       	rjmp	800073d8 <_malloc_r+0xf0>
8000734c:	2f e3       	sub	r3,-2
8000734e:	c4 d8       	rjmp	800073e8 <_malloc_r+0x100>
80007350:	ee 03 16 09 	lsr	r3,r7,0x9
80007354:	c0 41       	brne	8000735c <_malloc_r+0x74>
80007356:	ee 03 16 03 	lsr	r3,r7,0x3
8000735a:	c2 68       	rjmp	800073a6 <_malloc_r+0xbe>
8000735c:	58 43       	cp.w	r3,4
8000735e:	e0 8b 00 06 	brhi	8000736a <_malloc_r+0x82>
80007362:	ee 03 16 06 	lsr	r3,r7,0x6
80007366:	2c 83       	sub	r3,-56
80007368:	c1 f8       	rjmp	800073a6 <_malloc_r+0xbe>
8000736a:	59 43       	cp.w	r3,20
8000736c:	e0 8b 00 04 	brhi	80007374 <_malloc_r+0x8c>
80007370:	2a 53       	sub	r3,-91
80007372:	c1 a8       	rjmp	800073a6 <_malloc_r+0xbe>
80007374:	e0 43 00 54 	cp.w	r3,84
80007378:	e0 8b 00 06 	brhi	80007384 <_malloc_r+0x9c>
8000737c:	ee 03 16 0c 	lsr	r3,r7,0xc
80007380:	29 23       	sub	r3,-110
80007382:	c1 28       	rjmp	800073a6 <_malloc_r+0xbe>
80007384:	e0 43 01 54 	cp.w	r3,340
80007388:	e0 8b 00 06 	brhi	80007394 <_malloc_r+0xac>
8000738c:	ee 03 16 0f 	lsr	r3,r7,0xf
80007390:	28 93       	sub	r3,-119
80007392:	c0 a8       	rjmp	800073a6 <_malloc_r+0xbe>
80007394:	e0 43 05 54 	cp.w	r3,1364
80007398:	e0 88 00 04 	brls	800073a0 <_malloc_r+0xb8>
8000739c:	37 e3       	mov	r3,126
8000739e:	c0 48       	rjmp	800073a6 <_malloc_r+0xbe>
800073a0:	ee 03 16 12 	lsr	r3,r7,0x12
800073a4:	28 43       	sub	r3,-124
800073a6:	e0 6a 01 08 	mov	r10,264
800073aa:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800073ae:	74 36       	ld.w	r6,r10[0xc]
800073b0:	c1 98       	rjmp	800073e2 <_malloc_r+0xfa>
800073b2:	6c 19       	ld.w	r9,r6[0x4]
800073b4:	e0 19 ff fc 	andl	r9,0xfffc
800073b8:	f2 07 01 0b 	sub	r11,r9,r7
800073bc:	58 fb       	cp.w	r11,15
800073be:	e0 8a 00 04 	brle	800073c6 <_malloc_r+0xde>
800073c2:	20 13       	sub	r3,1
800073c4:	c1 18       	rjmp	800073e6 <_malloc_r+0xfe>
800073c6:	6c 38       	ld.w	r8,r6[0xc]
800073c8:	58 0b       	cp.w	r11,0
800073ca:	c0 b5       	brlt	800073e0 <_malloc_r+0xf8>
800073cc:	6c 2a       	ld.w	r10,r6[0x8]
800073ce:	ec 09 00 09 	add	r9,r6,r9
800073d2:	0a 9c       	mov	r12,r5
800073d4:	91 2a       	st.w	r8[0x8],r10
800073d6:	95 38       	st.w	r10[0xc],r8
800073d8:	72 18       	ld.w	r8,r9[0x4]
800073da:	a1 a8       	sbr	r8,0x0
800073dc:	93 18       	st.w	r9[0x4],r8
800073de:	cb c8       	rjmp	80007556 <_malloc_r+0x26e>
800073e0:	10 96       	mov	r6,r8
800073e2:	14 36       	cp.w	r6,r10
800073e4:	ce 71       	brne	800073b2 <_malloc_r+0xca>
800073e6:	2f f3       	sub	r3,-1
800073e8:	e0 6a 01 08 	mov	r10,264
800073ec:	f4 cc ff f8 	sub	r12,r10,-8
800073f0:	78 26       	ld.w	r6,r12[0x8]
800073f2:	18 36       	cp.w	r6,r12
800073f4:	c6 c0       	breq	800074cc <_malloc_r+0x1e4>
800073f6:	6c 19       	ld.w	r9,r6[0x4]
800073f8:	e0 19 ff fc 	andl	r9,0xfffc
800073fc:	f2 07 01 08 	sub	r8,r9,r7
80007400:	58 f8       	cp.w	r8,15
80007402:	e0 89 00 8f 	brgt	80007520 <_malloc_r+0x238>
80007406:	99 3c       	st.w	r12[0xc],r12
80007408:	99 2c       	st.w	r12[0x8],r12
8000740a:	58 08       	cp.w	r8,0
8000740c:	c0 55       	brlt	80007416 <_malloc_r+0x12e>
8000740e:	ec 09 00 09 	add	r9,r6,r9
80007412:	0a 9c       	mov	r12,r5
80007414:	ce 2b       	rjmp	800073d8 <_malloc_r+0xf0>
80007416:	e0 49 01 ff 	cp.w	r9,511
8000741a:	e0 8b 00 13 	brhi	80007440 <_malloc_r+0x158>
8000741e:	a3 99       	lsr	r9,0x3
80007420:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007424:	70 2b       	ld.w	r11,r8[0x8]
80007426:	8d 38       	st.w	r6[0xc],r8
80007428:	8d 2b       	st.w	r6[0x8],r11
8000742a:	97 36       	st.w	r11[0xc],r6
8000742c:	91 26       	st.w	r8[0x8],r6
8000742e:	a3 49       	asr	r9,0x2
80007430:	74 18       	ld.w	r8,r10[0x4]
80007432:	30 1b       	mov	r11,1
80007434:	f6 09 09 49 	lsl	r9,r11,r9
80007438:	f1 e9 10 09 	or	r9,r8,r9
8000743c:	95 19       	st.w	r10[0x4],r9
8000743e:	c4 78       	rjmp	800074cc <_malloc_r+0x1e4>
80007440:	f2 0a 16 09 	lsr	r10,r9,0x9
80007444:	58 4a       	cp.w	r10,4
80007446:	e0 8b 00 07 	brhi	80007454 <_malloc_r+0x16c>
8000744a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000744e:	2c 8a       	sub	r10,-56
80007450:	c2 08       	rjmp	80007490 <_malloc_r+0x1a8>
80007452:	d7 03       	nop
80007454:	59 4a       	cp.w	r10,20
80007456:	e0 8b 00 04 	brhi	8000745e <_malloc_r+0x176>
8000745a:	2a 5a       	sub	r10,-91
8000745c:	c1 a8       	rjmp	80007490 <_malloc_r+0x1a8>
8000745e:	e0 4a 00 54 	cp.w	r10,84
80007462:	e0 8b 00 06 	brhi	8000746e <_malloc_r+0x186>
80007466:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000746a:	29 2a       	sub	r10,-110
8000746c:	c1 28       	rjmp	80007490 <_malloc_r+0x1a8>
8000746e:	e0 4a 01 54 	cp.w	r10,340
80007472:	e0 8b 00 06 	brhi	8000747e <_malloc_r+0x196>
80007476:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000747a:	28 9a       	sub	r10,-119
8000747c:	c0 a8       	rjmp	80007490 <_malloc_r+0x1a8>
8000747e:	e0 4a 05 54 	cp.w	r10,1364
80007482:	e0 88 00 04 	brls	8000748a <_malloc_r+0x1a2>
80007486:	37 ea       	mov	r10,126
80007488:	c0 48       	rjmp	80007490 <_malloc_r+0x1a8>
8000748a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000748e:	28 4a       	sub	r10,-124
80007490:	e0 6b 01 08 	mov	r11,264
80007494:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007498:	68 28       	ld.w	r8,r4[0x8]
8000749a:	08 38       	cp.w	r8,r4
8000749c:	c0 e1       	brne	800074b8 <_malloc_r+0x1d0>
8000749e:	76 19       	ld.w	r9,r11[0x4]
800074a0:	a3 4a       	asr	r10,0x2
800074a2:	30 1e       	mov	lr,1
800074a4:	fc 0a 09 4a 	lsl	r10,lr,r10
800074a8:	f3 ea 10 0a 	or	r10,r9,r10
800074ac:	10 99       	mov	r9,r8
800074ae:	97 1a       	st.w	r11[0x4],r10
800074b0:	c0 a8       	rjmp	800074c4 <_malloc_r+0x1dc>
800074b2:	70 28       	ld.w	r8,r8[0x8]
800074b4:	08 38       	cp.w	r8,r4
800074b6:	c0 60       	breq	800074c2 <_malloc_r+0x1da>
800074b8:	70 1a       	ld.w	r10,r8[0x4]
800074ba:	e0 1a ff fc 	andl	r10,0xfffc
800074be:	14 39       	cp.w	r9,r10
800074c0:	cf 93       	brcs	800074b2 <_malloc_r+0x1ca>
800074c2:	70 39       	ld.w	r9,r8[0xc]
800074c4:	8d 39       	st.w	r6[0xc],r9
800074c6:	8d 28       	st.w	r6[0x8],r8
800074c8:	91 36       	st.w	r8[0xc],r6
800074ca:	93 26       	st.w	r9[0x8],r6
800074cc:	e6 08 14 02 	asr	r8,r3,0x2
800074d0:	30 1b       	mov	r11,1
800074d2:	e0 64 01 08 	mov	r4,264
800074d6:	f6 08 09 4b 	lsl	r11,r11,r8
800074da:	68 18       	ld.w	r8,r4[0x4]
800074dc:	10 3b       	cp.w	r11,r8
800074de:	e0 8b 00 69 	brhi	800075b0 <_malloc_r+0x2c8>
800074e2:	f7 e8 00 09 	and	r9,r11,r8
800074e6:	c0 b1       	brne	800074fc <_malloc_r+0x214>
800074e8:	e0 13 ff fc 	andl	r3,0xfffc
800074ec:	a1 7b       	lsl	r11,0x1
800074ee:	2f c3       	sub	r3,-4
800074f0:	c0 38       	rjmp	800074f6 <_malloc_r+0x20e>
800074f2:	2f c3       	sub	r3,-4
800074f4:	a1 7b       	lsl	r11,0x1
800074f6:	f7 e8 00 09 	and	r9,r11,r8
800074fa:	cf c0       	breq	800074f2 <_malloc_r+0x20a>
800074fc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007500:	06 92       	mov	r2,r3
80007502:	1c 91       	mov	r1,lr
80007504:	62 36       	ld.w	r6,r1[0xc]
80007506:	c2 d8       	rjmp	80007560 <_malloc_r+0x278>
80007508:	6c 1a       	ld.w	r10,r6[0x4]
8000750a:	e0 1a ff fc 	andl	r10,0xfffc
8000750e:	f4 07 01 08 	sub	r8,r10,r7
80007512:	58 f8       	cp.w	r8,15
80007514:	e0 8a 00 15 	brle	8000753e <_malloc_r+0x256>
80007518:	6c 3a       	ld.w	r10,r6[0xc]
8000751a:	6c 29       	ld.w	r9,r6[0x8]
8000751c:	95 29       	st.w	r10[0x8],r9
8000751e:	93 3a       	st.w	r9[0xc],r10
80007520:	0e 99       	mov	r9,r7
80007522:	ec 07 00 07 	add	r7,r6,r7
80007526:	a1 a9       	sbr	r9,0x0
80007528:	99 37       	st.w	r12[0xc],r7
8000752a:	99 27       	st.w	r12[0x8],r7
8000752c:	8d 19       	st.w	r6[0x4],r9
8000752e:	ee 08 09 08 	st.w	r7[r8],r8
80007532:	8f 2c       	st.w	r7[0x8],r12
80007534:	8f 3c       	st.w	r7[0xc],r12
80007536:	a1 a8       	sbr	r8,0x0
80007538:	0a 9c       	mov	r12,r5
8000753a:	8f 18       	st.w	r7[0x4],r8
8000753c:	c0 d8       	rjmp	80007556 <_malloc_r+0x26e>
8000753e:	6c 39       	ld.w	r9,r6[0xc]
80007540:	58 08       	cp.w	r8,0
80007542:	c0 e5       	brlt	8000755e <_malloc_r+0x276>
80007544:	ec 0a 00 0a 	add	r10,r6,r10
80007548:	74 18       	ld.w	r8,r10[0x4]
8000754a:	a1 a8       	sbr	r8,0x0
8000754c:	0a 9c       	mov	r12,r5
8000754e:	95 18       	st.w	r10[0x4],r8
80007550:	6c 28       	ld.w	r8,r6[0x8]
80007552:	93 28       	st.w	r9[0x8],r8
80007554:	91 39       	st.w	r8[0xc],r9
80007556:	c1 3d       	rcall	8000777c <__malloc_unlock>
80007558:	ec cc ff f8 	sub	r12,r6,-8
8000755c:	d8 32       	popm	r0-r7,pc
8000755e:	12 96       	mov	r6,r9
80007560:	02 36       	cp.w	r6,r1
80007562:	cd 31       	brne	80007508 <_malloc_r+0x220>
80007564:	2f f2       	sub	r2,-1
80007566:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000756a:	c0 30       	breq	80007570 <_malloc_r+0x288>
8000756c:	2f 81       	sub	r1,-8
8000756e:	cc bb       	rjmp	80007504 <_malloc_r+0x21c>
80007570:	1c 98       	mov	r8,lr
80007572:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007576:	c0 81       	brne	80007586 <_malloc_r+0x29e>
80007578:	68 19       	ld.w	r9,r4[0x4]
8000757a:	f6 08 11 ff 	rsub	r8,r11,-1
8000757e:	f3 e8 00 08 	and	r8,r9,r8
80007582:	89 18       	st.w	r4[0x4],r8
80007584:	c0 78       	rjmp	80007592 <_malloc_r+0x2aa>
80007586:	f0 c9 00 08 	sub	r9,r8,8
8000758a:	20 13       	sub	r3,1
8000758c:	70 08       	ld.w	r8,r8[0x0]
8000758e:	12 38       	cp.w	r8,r9
80007590:	cf 10       	breq	80007572 <_malloc_r+0x28a>
80007592:	a1 7b       	lsl	r11,0x1
80007594:	68 18       	ld.w	r8,r4[0x4]
80007596:	10 3b       	cp.w	r11,r8
80007598:	e0 8b 00 0c 	brhi	800075b0 <_malloc_r+0x2c8>
8000759c:	58 0b       	cp.w	r11,0
8000759e:	c0 90       	breq	800075b0 <_malloc_r+0x2c8>
800075a0:	04 93       	mov	r3,r2
800075a2:	c0 38       	rjmp	800075a8 <_malloc_r+0x2c0>
800075a4:	2f c3       	sub	r3,-4
800075a6:	a1 7b       	lsl	r11,0x1
800075a8:	f7 e8 00 09 	and	r9,r11,r8
800075ac:	ca 81       	brne	800074fc <_malloc_r+0x214>
800075ae:	cf bb       	rjmp	800075a4 <_malloc_r+0x2bc>
800075b0:	68 23       	ld.w	r3,r4[0x8]
800075b2:	66 12       	ld.w	r2,r3[0x4]
800075b4:	e0 12 ff fc 	andl	r2,0xfffc
800075b8:	0e 32       	cp.w	r2,r7
800075ba:	5f 39       	srlo	r9
800075bc:	e4 07 01 08 	sub	r8,r2,r7
800075c0:	58 f8       	cp.w	r8,15
800075c2:	5f aa       	srle	r10
800075c4:	f5 e9 10 09 	or	r9,r10,r9
800075c8:	e0 80 00 9a 	breq	800076fc <_malloc_r+0x414>
800075cc:	e0 68 06 30 	mov	r8,1584
800075d0:	70 01       	ld.w	r1,r8[0x0]
800075d2:	e0 68 05 14 	mov	r8,1300
800075d6:	2f 01       	sub	r1,-16
800075d8:	70 08       	ld.w	r8,r8[0x0]
800075da:	0e 01       	add	r1,r7
800075dc:	5b f8       	cp.w	r8,-1
800075de:	c0 40       	breq	800075e6 <_malloc_r+0x2fe>
800075e0:	28 11       	sub	r1,-127
800075e2:	e0 11 ff 80 	andl	r1,0xff80
800075e6:	02 9b       	mov	r11,r1
800075e8:	0a 9c       	mov	r12,r5
800075ea:	e0 a0 05 39 	rcall	8000805c <_sbrk_r>
800075ee:	18 96       	mov	r6,r12
800075f0:	5b fc       	cp.w	r12,-1
800075f2:	c7 50       	breq	800076dc <_malloc_r+0x3f4>
800075f4:	e6 02 00 08 	add	r8,r3,r2
800075f8:	10 3c       	cp.w	r12,r8
800075fa:	c0 32       	brcc	80007600 <_malloc_r+0x318>
800075fc:	08 33       	cp.w	r3,r4
800075fe:	c6 f1       	brne	800076dc <_malloc_r+0x3f4>
80007600:	e0 6a 06 34 	mov	r10,1588
80007604:	74 09       	ld.w	r9,r10[0x0]
80007606:	e2 09 00 09 	add	r9,r1,r9
8000760a:	95 09       	st.w	r10[0x0],r9
8000760c:	10 36       	cp.w	r6,r8
8000760e:	c0 a1       	brne	80007622 <_malloc_r+0x33a>
80007610:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007614:	c0 71       	brne	80007622 <_malloc_r+0x33a>
80007616:	e2 02 00 02 	add	r2,r1,r2
8000761a:	68 28       	ld.w	r8,r4[0x8]
8000761c:	a1 a2       	sbr	r2,0x0
8000761e:	91 12       	st.w	r8[0x4],r2
80007620:	c4 f8       	rjmp	800076be <_malloc_r+0x3d6>
80007622:	e0 6a 05 14 	mov	r10,1300
80007626:	74 0b       	ld.w	r11,r10[0x0]
80007628:	5b fb       	cp.w	r11,-1
8000762a:	c0 31       	brne	80007630 <_malloc_r+0x348>
8000762c:	95 06       	st.w	r10[0x0],r6
8000762e:	c0 78       	rjmp	8000763c <_malloc_r+0x354>
80007630:	ec 09 00 09 	add	r9,r6,r9
80007634:	e0 6a 06 34 	mov	r10,1588
80007638:	10 19       	sub	r9,r8
8000763a:	95 09       	st.w	r10[0x0],r9
8000763c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007640:	f0 09 11 08 	rsub	r9,r8,8
80007644:	58 08       	cp.w	r8,0
80007646:	f2 08 17 10 	movne	r8,r9
8000764a:	ed d8 e1 06 	addne	r6,r6,r8
8000764e:	28 08       	sub	r8,-128
80007650:	ec 01 00 01 	add	r1,r6,r1
80007654:	0a 9c       	mov	r12,r5
80007656:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000765a:	f0 01 01 01 	sub	r1,r8,r1
8000765e:	02 9b       	mov	r11,r1
80007660:	e0 a0 04 fe 	rcall	8000805c <_sbrk_r>
80007664:	e0 68 06 34 	mov	r8,1588
80007668:	5b fc       	cp.w	r12,-1
8000766a:	ec 0c 17 00 	moveq	r12,r6
8000766e:	f9 b1 00 00 	moveq	r1,0
80007672:	70 09       	ld.w	r9,r8[0x0]
80007674:	0c 1c       	sub	r12,r6
80007676:	89 26       	st.w	r4[0x8],r6
80007678:	02 0c       	add	r12,r1
8000767a:	12 01       	add	r1,r9
8000767c:	a1 ac       	sbr	r12,0x0
8000767e:	91 01       	st.w	r8[0x0],r1
80007680:	8d 1c       	st.w	r6[0x4],r12
80007682:	08 33       	cp.w	r3,r4
80007684:	c1 d0       	breq	800076be <_malloc_r+0x3d6>
80007686:	58 f2       	cp.w	r2,15
80007688:	e0 8b 00 05 	brhi	80007692 <_malloc_r+0x3aa>
8000768c:	30 18       	mov	r8,1
8000768e:	8d 18       	st.w	r6[0x4],r8
80007690:	c2 68       	rjmp	800076dc <_malloc_r+0x3f4>
80007692:	30 59       	mov	r9,5
80007694:	20 c2       	sub	r2,12
80007696:	e0 12 ff f8 	andl	r2,0xfff8
8000769a:	e6 02 00 08 	add	r8,r3,r2
8000769e:	91 29       	st.w	r8[0x8],r9
800076a0:	91 19       	st.w	r8[0x4],r9
800076a2:	66 18       	ld.w	r8,r3[0x4]
800076a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800076a8:	e5 e8 10 08 	or	r8,r2,r8
800076ac:	87 18       	st.w	r3[0x4],r8
800076ae:	58 f2       	cp.w	r2,15
800076b0:	e0 88 00 07 	brls	800076be <_malloc_r+0x3d6>
800076b4:	e6 cb ff f8 	sub	r11,r3,-8
800076b8:	0a 9c       	mov	r12,r5
800076ba:	fe b0 fb 71 	rcall	80006d9c <_free_r>
800076be:	e0 69 06 2c 	mov	r9,1580
800076c2:	72 0a       	ld.w	r10,r9[0x0]
800076c4:	e0 68 06 34 	mov	r8,1588
800076c8:	70 08       	ld.w	r8,r8[0x0]
800076ca:	14 38       	cp.w	r8,r10
800076cc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800076d0:	e0 69 06 28 	mov	r9,1576
800076d4:	72 0a       	ld.w	r10,r9[0x0]
800076d6:	14 38       	cp.w	r8,r10
800076d8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800076dc:	68 28       	ld.w	r8,r4[0x8]
800076de:	70 18       	ld.w	r8,r8[0x4]
800076e0:	e0 18 ff fc 	andl	r8,0xfffc
800076e4:	0e 38       	cp.w	r8,r7
800076e6:	5f 39       	srlo	r9
800076e8:	0e 18       	sub	r8,r7
800076ea:	58 f8       	cp.w	r8,15
800076ec:	5f aa       	srle	r10
800076ee:	f5 e9 10 09 	or	r9,r10,r9
800076f2:	c0 50       	breq	800076fc <_malloc_r+0x414>
800076f4:	0a 9c       	mov	r12,r5
800076f6:	c4 3c       	rcall	8000777c <__malloc_unlock>
800076f8:	d8 3a       	popm	r0-r7,pc,r12=0
800076fa:	d7 03       	nop
800076fc:	68 26       	ld.w	r6,r4[0x8]
800076fe:	a1 a8       	sbr	r8,0x0
80007700:	0e 99       	mov	r9,r7
80007702:	a1 a9       	sbr	r9,0x0
80007704:	8d 19       	st.w	r6[0x4],r9
80007706:	ec 07 00 07 	add	r7,r6,r7
8000770a:	0a 9c       	mov	r12,r5
8000770c:	89 27       	st.w	r4[0x8],r7
8000770e:	8f 18       	st.w	r7[0x4],r8
80007710:	c3 6c       	rcall	8000777c <__malloc_unlock>
80007712:	ec cc ff f8 	sub	r12,r6,-8
80007716:	d8 32       	popm	r0-r7,pc

80007718 <memchr>:
80007718:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000771c:	c0 68       	rjmp	80007728 <memchr+0x10>
8000771e:	20 1a       	sub	r10,1
80007720:	19 88       	ld.ub	r8,r12[0x0]
80007722:	16 38       	cp.w	r8,r11
80007724:	5e 0c       	reteq	r12
80007726:	2f fc       	sub	r12,-1
80007728:	58 0a       	cp.w	r10,0
8000772a:	cf a1       	brne	8000771e <memchr+0x6>
8000772c:	5e fa       	retal	r10

8000772e <memmove>:
8000772e:	d4 01       	pushm	lr
80007730:	18 3b       	cp.w	r11,r12
80007732:	c1 92       	brcc	80007764 <memmove+0x36>
80007734:	f6 0a 00 09 	add	r9,r11,r10
80007738:	12 3c       	cp.w	r12,r9
8000773a:	c1 52       	brcc	80007764 <memmove+0x36>
8000773c:	f8 0a 00 0b 	add	r11,r12,r10
80007740:	30 08       	mov	r8,0
80007742:	c0 68       	rjmp	8000774e <memmove+0x20>
80007744:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007748:	20 1a       	sub	r10,1
8000774a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000774e:	20 18       	sub	r8,1
80007750:	58 0a       	cp.w	r10,0
80007752:	cf 91       	brne	80007744 <memmove+0x16>
80007754:	d8 02       	popm	pc
80007756:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000775a:	20 1a       	sub	r10,1
8000775c:	f8 08 0b 09 	st.b	r12[r8],r9
80007760:	2f f8       	sub	r8,-1
80007762:	c0 28       	rjmp	80007766 <memmove+0x38>
80007764:	30 08       	mov	r8,0
80007766:	58 0a       	cp.w	r10,0
80007768:	cf 71       	brne	80007756 <memmove+0x28>
8000776a:	d8 02       	popm	pc

8000776c <memset>:
8000776c:	18 98       	mov	r8,r12
8000776e:	c0 38       	rjmp	80007774 <memset+0x8>
80007770:	10 cb       	st.b	r8++,r11
80007772:	20 1a       	sub	r10,1
80007774:	58 0a       	cp.w	r10,0
80007776:	cf d1       	brne	80007770 <memset+0x4>
80007778:	5e fc       	retal	r12

8000777a <__malloc_lock>:
8000777a:	5e fc       	retal	r12

8000777c <__malloc_unlock>:
8000777c:	5e fc       	retal	r12

8000777e <__hi0bits>:
8000777e:	18 98       	mov	r8,r12
80007780:	e0 1c 00 00 	andl	r12,0x0
80007784:	f0 09 15 10 	lsl	r9,r8,0x10
80007788:	58 0c       	cp.w	r12,0
8000778a:	f2 08 17 00 	moveq	r8,r9
8000778e:	f9 bc 00 10 	moveq	r12,16
80007792:	f9 bc 01 00 	movne	r12,0
80007796:	10 9a       	mov	r10,r8
80007798:	f0 09 15 08 	lsl	r9,r8,0x8
8000779c:	e6 1a ff 00 	andh	r10,0xff00,COH
800077a0:	f7 bc 00 f8 	subeq	r12,-8
800077a4:	f2 08 17 00 	moveq	r8,r9
800077a8:	10 9a       	mov	r10,r8
800077aa:	f0 09 15 04 	lsl	r9,r8,0x4
800077ae:	e6 1a f0 00 	andh	r10,0xf000,COH
800077b2:	f7 bc 00 fc 	subeq	r12,-4
800077b6:	f2 08 17 00 	moveq	r8,r9
800077ba:	10 9a       	mov	r10,r8
800077bc:	f0 09 15 02 	lsl	r9,r8,0x2
800077c0:	e6 1a c0 00 	andh	r10,0xc000,COH
800077c4:	f7 bc 00 fe 	subeq	r12,-2
800077c8:	f2 08 17 00 	moveq	r8,r9
800077cc:	58 08       	cp.w	r8,0
800077ce:	5e 5c       	retlt	r12
800077d0:	ed b8 00 1e 	bld	r8,0x1e
800077d4:	f9 bc 01 20 	movne	r12,32
800077d8:	f7 bc 00 ff 	subeq	r12,-1
800077dc:	5e fc       	retal	r12

800077de <__lo0bits>:
800077de:	18 99       	mov	r9,r12
800077e0:	78 08       	ld.w	r8,r12[0x0]
800077e2:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800077e6:	c1 50       	breq	80007810 <__lo0bits+0x32>
800077e8:	ed b8 00 00 	bld	r8,0x0
800077ec:	c0 21       	brne	800077f0 <__lo0bits+0x12>
800077ee:	5e fd       	retal	0
800077f0:	10 9b       	mov	r11,r8
800077f2:	f0 0a 16 01 	lsr	r10,r8,0x1
800077f6:	e2 1b 00 02 	andl	r11,0x2,COH
800077fa:	a3 88       	lsr	r8,0x2
800077fc:	58 0b       	cp.w	r11,0
800077fe:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007802:	f9 bc 01 01 	movne	r12,1
80007806:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000780a:	f9 bc 00 02 	moveq	r12,2
8000780e:	5e fc       	retal	r12
80007810:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007814:	f0 0b 16 10 	lsr	r11,r8,0x10
80007818:	58 0a       	cp.w	r10,0
8000781a:	f6 08 17 00 	moveq	r8,r11
8000781e:	f9 bc 00 10 	moveq	r12,16
80007822:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007826:	f0 0a 16 08 	lsr	r10,r8,0x8
8000782a:	58 0b       	cp.w	r11,0
8000782c:	f7 bc 00 f8 	subeq	r12,-8
80007830:	f4 08 17 00 	moveq	r8,r10
80007834:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007838:	f0 0a 16 04 	lsr	r10,r8,0x4
8000783c:	58 0b       	cp.w	r11,0
8000783e:	f7 bc 00 fc 	subeq	r12,-4
80007842:	f4 08 17 00 	moveq	r8,r10
80007846:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000784a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000784e:	58 0b       	cp.w	r11,0
80007850:	f7 bc 00 fe 	subeq	r12,-2
80007854:	f4 08 17 00 	moveq	r8,r10
80007858:	ed b8 00 00 	bld	r8,0x0
8000785c:	c0 60       	breq	80007868 <__lo0bits+0x8a>
8000785e:	a1 98       	lsr	r8,0x1
80007860:	c0 31       	brne	80007866 <__lo0bits+0x88>
80007862:	32 0c       	mov	r12,32
80007864:	5e fc       	retal	r12
80007866:	2f fc       	sub	r12,-1
80007868:	93 08       	st.w	r9[0x0],r8
8000786a:	5e fc       	retal	r12

8000786c <__mcmp>:
8000786c:	d4 01       	pushm	lr
8000786e:	18 98       	mov	r8,r12
80007870:	76 49       	ld.w	r9,r11[0x10]
80007872:	78 4c       	ld.w	r12,r12[0x10]
80007874:	12 1c       	sub	r12,r9
80007876:	c1 31       	brne	8000789c <__mcmp+0x30>
80007878:	2f b9       	sub	r9,-5
8000787a:	a3 69       	lsl	r9,0x2
8000787c:	12 0b       	add	r11,r9
8000787e:	f0 09 00 09 	add	r9,r8,r9
80007882:	2e c8       	sub	r8,-20
80007884:	13 4e       	ld.w	lr,--r9
80007886:	17 4a       	ld.w	r10,--r11
80007888:	14 3e       	cp.w	lr,r10
8000788a:	c0 60       	breq	80007896 <__mcmp+0x2a>
8000788c:	f9 bc 03 ff 	movlo	r12,-1
80007890:	f9 bc 02 01 	movhs	r12,1
80007894:	d8 02       	popm	pc
80007896:	10 39       	cp.w	r9,r8
80007898:	fe 9b ff f6 	brhi	80007884 <__mcmp+0x18>
8000789c:	d8 02       	popm	pc
8000789e:	d7 03       	nop

800078a0 <_Bfree>:
800078a0:	d4 21       	pushm	r4-r7,lr
800078a2:	18 97       	mov	r7,r12
800078a4:	16 95       	mov	r5,r11
800078a6:	78 96       	ld.w	r6,r12[0x24]
800078a8:	58 06       	cp.w	r6,0
800078aa:	c0 91       	brne	800078bc <_Bfree+0x1c>
800078ac:	31 0c       	mov	r12,16
800078ae:	fe b0 fd 15 	rcall	800072d8 <malloc>
800078b2:	99 36       	st.w	r12[0xc],r6
800078b4:	8f 9c       	st.w	r7[0x24],r12
800078b6:	99 16       	st.w	r12[0x4],r6
800078b8:	99 26       	st.w	r12[0x8],r6
800078ba:	99 06       	st.w	r12[0x0],r6
800078bc:	58 05       	cp.w	r5,0
800078be:	c0 90       	breq	800078d0 <_Bfree+0x30>
800078c0:	6a 19       	ld.w	r9,r5[0x4]
800078c2:	6e 98       	ld.w	r8,r7[0x24]
800078c4:	70 38       	ld.w	r8,r8[0xc]
800078c6:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800078ca:	8b 0a       	st.w	r5[0x0],r10
800078cc:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800078d0:	d8 22       	popm	r4-r7,pc
800078d2:	d7 03       	nop

800078d4 <_Balloc>:
800078d4:	d4 21       	pushm	r4-r7,lr
800078d6:	18 97       	mov	r7,r12
800078d8:	16 96       	mov	r6,r11
800078da:	78 95       	ld.w	r5,r12[0x24]
800078dc:	58 05       	cp.w	r5,0
800078de:	c0 91       	brne	800078f0 <_Balloc+0x1c>
800078e0:	31 0c       	mov	r12,16
800078e2:	fe b0 fc fb 	rcall	800072d8 <malloc>
800078e6:	99 35       	st.w	r12[0xc],r5
800078e8:	8f 9c       	st.w	r7[0x24],r12
800078ea:	99 15       	st.w	r12[0x4],r5
800078ec:	99 25       	st.w	r12[0x8],r5
800078ee:	99 05       	st.w	r12[0x0],r5
800078f0:	6e 95       	ld.w	r5,r7[0x24]
800078f2:	6a 38       	ld.w	r8,r5[0xc]
800078f4:	58 08       	cp.w	r8,0
800078f6:	c0 b1       	brne	8000790c <_Balloc+0x38>
800078f8:	31 0a       	mov	r10,16
800078fa:	30 4b       	mov	r11,4
800078fc:	0e 9c       	mov	r12,r7
800078fe:	e0 a0 04 93 	rcall	80008224 <_calloc_r>
80007902:	8b 3c       	st.w	r5[0xc],r12
80007904:	6e 98       	ld.w	r8,r7[0x24]
80007906:	70 3c       	ld.w	r12,r8[0xc]
80007908:	58 0c       	cp.w	r12,0
8000790a:	c1 b0       	breq	80007940 <_Balloc+0x6c>
8000790c:	6e 98       	ld.w	r8,r7[0x24]
8000790e:	70 38       	ld.w	r8,r8[0xc]
80007910:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007914:	70 0c       	ld.w	r12,r8[0x0]
80007916:	58 0c       	cp.w	r12,0
80007918:	c0 40       	breq	80007920 <_Balloc+0x4c>
8000791a:	78 09       	ld.w	r9,r12[0x0]
8000791c:	91 09       	st.w	r8[0x0],r9
8000791e:	c0 e8       	rjmp	8000793a <_Balloc+0x66>
80007920:	0e 9c       	mov	r12,r7
80007922:	30 17       	mov	r7,1
80007924:	0e 9b       	mov	r11,r7
80007926:	ee 06 09 47 	lsl	r7,r7,r6
8000792a:	ee ca ff fb 	sub	r10,r7,-5
8000792e:	a3 6a       	lsl	r10,0x2
80007930:	e0 a0 04 7a 	rcall	80008224 <_calloc_r>
80007934:	c0 60       	breq	80007940 <_Balloc+0x6c>
80007936:	99 16       	st.w	r12[0x4],r6
80007938:	99 27       	st.w	r12[0x8],r7
8000793a:	30 08       	mov	r8,0
8000793c:	99 38       	st.w	r12[0xc],r8
8000793e:	99 48       	st.w	r12[0x10],r8
80007940:	d8 22       	popm	r4-r7,pc
80007942:	d7 03       	nop

80007944 <__d2b>:
80007944:	d4 31       	pushm	r0-r7,lr
80007946:	20 2d       	sub	sp,8
80007948:	16 93       	mov	r3,r11
8000794a:	12 96       	mov	r6,r9
8000794c:	10 95       	mov	r5,r8
8000794e:	14 92       	mov	r2,r10
80007950:	30 1b       	mov	r11,1
80007952:	cc 1f       	rcall	800078d4 <_Balloc>
80007954:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007958:	50 09       	stdsp	sp[0x0],r9
8000795a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000795e:	b5 a9       	sbr	r9,0x14
80007960:	f0 01 16 14 	lsr	r1,r8,0x14
80007964:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007968:	18 94       	mov	r4,r12
8000796a:	58 02       	cp.w	r2,0
8000796c:	c1 d0       	breq	800079a6 <__d2b+0x62>
8000796e:	fa cc ff f8 	sub	r12,sp,-8
80007972:	18 d2       	st.w	--r12,r2
80007974:	c3 5f       	rcall	800077de <__lo0bits>
80007976:	40 18       	lddsp	r8,sp[0x4]
80007978:	c0 d0       	breq	80007992 <__d2b+0x4e>
8000797a:	40 09       	lddsp	r9,sp[0x0]
8000797c:	f8 0a 11 20 	rsub	r10,r12,32
80007980:	f2 0a 09 4a 	lsl	r10,r9,r10
80007984:	f5 e8 10 08 	or	r8,r10,r8
80007988:	89 58       	st.w	r4[0x14],r8
8000798a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000798e:	50 09       	stdsp	sp[0x0],r9
80007990:	c0 28       	rjmp	80007994 <__d2b+0x50>
80007992:	89 58       	st.w	r4[0x14],r8
80007994:	40 08       	lddsp	r8,sp[0x0]
80007996:	58 08       	cp.w	r8,0
80007998:	f9 b3 01 02 	movne	r3,2
8000799c:	f9 b3 00 01 	moveq	r3,1
800079a0:	89 68       	st.w	r4[0x18],r8
800079a2:	89 43       	st.w	r4[0x10],r3
800079a4:	c0 88       	rjmp	800079b4 <__d2b+0x70>
800079a6:	1a 9c       	mov	r12,sp
800079a8:	c1 bf       	rcall	800077de <__lo0bits>
800079aa:	30 13       	mov	r3,1
800079ac:	40 08       	lddsp	r8,sp[0x0]
800079ae:	2e 0c       	sub	r12,-32
800079b0:	89 43       	st.w	r4[0x10],r3
800079b2:	89 58       	st.w	r4[0x14],r8
800079b4:	58 01       	cp.w	r1,0
800079b6:	c0 90       	breq	800079c8 <__d2b+0x84>
800079b8:	e2 c1 04 33 	sub	r1,r1,1075
800079bc:	18 01       	add	r1,r12
800079be:	8d 01       	st.w	r6[0x0],r1
800079c0:	f8 0c 11 35 	rsub	r12,r12,53
800079c4:	8b 0c       	st.w	r5[0x0],r12
800079c6:	c0 c8       	rjmp	800079de <__d2b+0x9a>
800079c8:	e6 c8 ff fc 	sub	r8,r3,-4
800079cc:	f8 cc 04 32 	sub	r12,r12,1074
800079d0:	a5 73       	lsl	r3,0x5
800079d2:	8d 0c       	st.w	r6[0x0],r12
800079d4:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800079d8:	cd 3e       	rcall	8000777e <__hi0bits>
800079da:	18 13       	sub	r3,r12
800079dc:	8b 03       	st.w	r5[0x0],r3
800079de:	08 9c       	mov	r12,r4
800079e0:	2f ed       	sub	sp,-8
800079e2:	d8 32       	popm	r0-r7,pc

800079e4 <__mdiff>:
800079e4:	d4 31       	pushm	r0-r7,lr
800079e6:	74 48       	ld.w	r8,r10[0x10]
800079e8:	76 45       	ld.w	r5,r11[0x10]
800079ea:	16 97       	mov	r7,r11
800079ec:	14 96       	mov	r6,r10
800079ee:	10 15       	sub	r5,r8
800079f0:	c1 31       	brne	80007a16 <__mdiff+0x32>
800079f2:	2f b8       	sub	r8,-5
800079f4:	ee ce ff ec 	sub	lr,r7,-20
800079f8:	a3 68       	lsl	r8,0x2
800079fa:	f4 08 00 0b 	add	r11,r10,r8
800079fe:	ee 08 00 08 	add	r8,r7,r8
80007a02:	11 4a       	ld.w	r10,--r8
80007a04:	17 49       	ld.w	r9,--r11
80007a06:	12 3a       	cp.w	r10,r9
80007a08:	c0 30       	breq	80007a0e <__mdiff+0x2a>
80007a0a:	c0 e2       	brcc	80007a26 <__mdiff+0x42>
80007a0c:	c0 78       	rjmp	80007a1a <__mdiff+0x36>
80007a0e:	1c 38       	cp.w	r8,lr
80007a10:	fe 9b ff f9 	brhi	80007a02 <__mdiff+0x1e>
80007a14:	c4 98       	rjmp	80007aa6 <__mdiff+0xc2>
80007a16:	58 05       	cp.w	r5,0
80007a18:	c0 64       	brge	80007a24 <__mdiff+0x40>
80007a1a:	0e 98       	mov	r8,r7
80007a1c:	30 15       	mov	r5,1
80007a1e:	0c 97       	mov	r7,r6
80007a20:	10 96       	mov	r6,r8
80007a22:	c0 28       	rjmp	80007a26 <__mdiff+0x42>
80007a24:	30 05       	mov	r5,0
80007a26:	6e 1b       	ld.w	r11,r7[0x4]
80007a28:	c5 6f       	rcall	800078d4 <_Balloc>
80007a2a:	6e 49       	ld.w	r9,r7[0x10]
80007a2c:	6c 44       	ld.w	r4,r6[0x10]
80007a2e:	99 35       	st.w	r12[0xc],r5
80007a30:	2f b4       	sub	r4,-5
80007a32:	f2 c5 ff fb 	sub	r5,r9,-5
80007a36:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007a3a:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007a3e:	2e c6       	sub	r6,-20
80007a40:	2e c7       	sub	r7,-20
80007a42:	f8 c8 ff ec 	sub	r8,r12,-20
80007a46:	30 0a       	mov	r10,0
80007a48:	0f 0e       	ld.w	lr,r7++
80007a4a:	0d 0b       	ld.w	r11,r6++
80007a4c:	fc 02 16 10 	lsr	r2,lr,0x10
80007a50:	f6 03 16 10 	lsr	r3,r11,0x10
80007a54:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007a58:	e4 03 01 03 	sub	r3,r2,r3
80007a5c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a60:	fc 0b 01 0b 	sub	r11,lr,r11
80007a64:	f6 0a 00 0a 	add	r10,r11,r10
80007a68:	b0 1a       	st.h	r8[0x2],r10
80007a6a:	b1 4a       	asr	r10,0x10
80007a6c:	e6 0a 00 0a 	add	r10,r3,r10
80007a70:	b0 0a       	st.h	r8[0x0],r10
80007a72:	2f c8       	sub	r8,-4
80007a74:	b1 4a       	asr	r10,0x10
80007a76:	08 36       	cp.w	r6,r4
80007a78:	ce 83       	brcs	80007a48 <__mdiff+0x64>
80007a7a:	c0 d8       	rjmp	80007a94 <__mdiff+0xb0>
80007a7c:	0f 0b       	ld.w	r11,r7++
80007a7e:	f6 0e 16 10 	lsr	lr,r11,0x10
80007a82:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a86:	16 0a       	add	r10,r11
80007a88:	b0 1a       	st.h	r8[0x2],r10
80007a8a:	b1 4a       	asr	r10,0x10
80007a8c:	1c 0a       	add	r10,lr
80007a8e:	b0 0a       	st.h	r8[0x0],r10
80007a90:	2f c8       	sub	r8,-4
80007a92:	b1 4a       	asr	r10,0x10
80007a94:	0a 37       	cp.w	r7,r5
80007a96:	cf 33       	brcs	80007a7c <__mdiff+0x98>
80007a98:	c0 28       	rjmp	80007a9c <__mdiff+0xb8>
80007a9a:	20 19       	sub	r9,1
80007a9c:	11 4a       	ld.w	r10,--r8
80007a9e:	58 0a       	cp.w	r10,0
80007aa0:	cf d0       	breq	80007a9a <__mdiff+0xb6>
80007aa2:	99 49       	st.w	r12[0x10],r9
80007aa4:	d8 32       	popm	r0-r7,pc
80007aa6:	30 0b       	mov	r11,0
80007aa8:	c1 6f       	rcall	800078d4 <_Balloc>
80007aaa:	30 18       	mov	r8,1
80007aac:	99 48       	st.w	r12[0x10],r8
80007aae:	30 08       	mov	r8,0
80007ab0:	99 58       	st.w	r12[0x14],r8
80007ab2:	d8 32       	popm	r0-r7,pc

80007ab4 <__lshift>:
80007ab4:	d4 31       	pushm	r0-r7,lr
80007ab6:	16 97       	mov	r7,r11
80007ab8:	76 46       	ld.w	r6,r11[0x10]
80007aba:	f4 02 14 05 	asr	r2,r10,0x5
80007abe:	2f f6       	sub	r6,-1
80007ac0:	14 93       	mov	r3,r10
80007ac2:	18 94       	mov	r4,r12
80007ac4:	04 06       	add	r6,r2
80007ac6:	76 1b       	ld.w	r11,r11[0x4]
80007ac8:	6e 28       	ld.w	r8,r7[0x8]
80007aca:	c0 38       	rjmp	80007ad0 <__lshift+0x1c>
80007acc:	2f fb       	sub	r11,-1
80007ace:	a1 78       	lsl	r8,0x1
80007ad0:	10 36       	cp.w	r6,r8
80007ad2:	fe 99 ff fd 	brgt	80007acc <__lshift+0x18>
80007ad6:	08 9c       	mov	r12,r4
80007ad8:	cf ee       	rcall	800078d4 <_Balloc>
80007ada:	30 09       	mov	r9,0
80007adc:	18 95       	mov	r5,r12
80007ade:	f8 c8 ff ec 	sub	r8,r12,-20
80007ae2:	12 9a       	mov	r10,r9
80007ae4:	c0 38       	rjmp	80007aea <__lshift+0x36>
80007ae6:	10 aa       	st.w	r8++,r10
80007ae8:	2f f9       	sub	r9,-1
80007aea:	04 39       	cp.w	r9,r2
80007aec:	cf d5       	brlt	80007ae6 <__lshift+0x32>
80007aee:	6e 4b       	ld.w	r11,r7[0x10]
80007af0:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007af4:	2f bb       	sub	r11,-5
80007af6:	ee c9 ff ec 	sub	r9,r7,-20
80007afa:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007afe:	58 03       	cp.w	r3,0
80007b00:	c1 30       	breq	80007b26 <__lshift+0x72>
80007b02:	e6 0c 11 20 	rsub	r12,r3,32
80007b06:	30 0a       	mov	r10,0
80007b08:	72 02       	ld.w	r2,r9[0x0]
80007b0a:	e4 03 09 42 	lsl	r2,r2,r3
80007b0e:	04 4a       	or	r10,r2
80007b10:	10 aa       	st.w	r8++,r10
80007b12:	13 0a       	ld.w	r10,r9++
80007b14:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007b18:	16 39       	cp.w	r9,r11
80007b1a:	cf 73       	brcs	80007b08 <__lshift+0x54>
80007b1c:	91 0a       	st.w	r8[0x0],r10
80007b1e:	58 0a       	cp.w	r10,0
80007b20:	c0 70       	breq	80007b2e <__lshift+0x7a>
80007b22:	2f f6       	sub	r6,-1
80007b24:	c0 58       	rjmp	80007b2e <__lshift+0x7a>
80007b26:	13 0a       	ld.w	r10,r9++
80007b28:	10 aa       	st.w	r8++,r10
80007b2a:	16 39       	cp.w	r9,r11
80007b2c:	cf d3       	brcs	80007b26 <__lshift+0x72>
80007b2e:	08 9c       	mov	r12,r4
80007b30:	20 16       	sub	r6,1
80007b32:	0e 9b       	mov	r11,r7
80007b34:	8b 46       	st.w	r5[0x10],r6
80007b36:	cb 5e       	rcall	800078a0 <_Bfree>
80007b38:	0a 9c       	mov	r12,r5
80007b3a:	d8 32       	popm	r0-r7,pc

80007b3c <__multiply>:
80007b3c:	d4 31       	pushm	r0-r7,lr
80007b3e:	20 2d       	sub	sp,8
80007b40:	76 49       	ld.w	r9,r11[0x10]
80007b42:	74 48       	ld.w	r8,r10[0x10]
80007b44:	16 96       	mov	r6,r11
80007b46:	14 95       	mov	r5,r10
80007b48:	10 39       	cp.w	r9,r8
80007b4a:	ec 08 17 50 	movlt	r8,r6
80007b4e:	ea 06 17 50 	movlt	r6,r5
80007b52:	f0 05 17 50 	movlt	r5,r8
80007b56:	6c 28       	ld.w	r8,r6[0x8]
80007b58:	76 43       	ld.w	r3,r11[0x10]
80007b5a:	74 42       	ld.w	r2,r10[0x10]
80007b5c:	76 1b       	ld.w	r11,r11[0x4]
80007b5e:	e4 03 00 07 	add	r7,r2,r3
80007b62:	10 37       	cp.w	r7,r8
80007b64:	f7 bb 09 ff 	subgt	r11,-1
80007b68:	cb 6e       	rcall	800078d4 <_Balloc>
80007b6a:	ee c4 ff fb 	sub	r4,r7,-5
80007b6e:	f8 c9 ff ec 	sub	r9,r12,-20
80007b72:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007b76:	30 0a       	mov	r10,0
80007b78:	12 98       	mov	r8,r9
80007b7a:	c0 28       	rjmp	80007b7e <__multiply+0x42>
80007b7c:	10 aa       	st.w	r8++,r10
80007b7e:	08 38       	cp.w	r8,r4
80007b80:	cf e3       	brcs	80007b7c <__multiply+0x40>
80007b82:	2f b3       	sub	r3,-5
80007b84:	2f b2       	sub	r2,-5
80007b86:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007b8a:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007b8e:	ec cb ff ec 	sub	r11,r6,-20
80007b92:	50 12       	stdsp	sp[0x4],r2
80007b94:	ea ca ff ec 	sub	r10,r5,-20
80007b98:	c4 48       	rjmp	80007c20 <__multiply+0xe4>
80007b9a:	94 95       	ld.uh	r5,r10[0x2]
80007b9c:	58 05       	cp.w	r5,0
80007b9e:	c2 00       	breq	80007bde <__multiply+0xa2>
80007ba0:	12 98       	mov	r8,r9
80007ba2:	16 96       	mov	r6,r11
80007ba4:	30 0e       	mov	lr,0
80007ba6:	50 09       	stdsp	sp[0x0],r9
80007ba8:	0d 02       	ld.w	r2,r6++
80007baa:	e4 00 16 10 	lsr	r0,r2,0x10
80007bae:	70 01       	ld.w	r1,r8[0x0]
80007bb0:	70 09       	ld.w	r9,r8[0x0]
80007bb2:	b1 81       	lsr	r1,0x10
80007bb4:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007bb8:	e0 05 03 41 	mac	r1,r0,r5
80007bbc:	ab 32       	mul	r2,r5
80007bbe:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007bc2:	00 02       	add	r2,r0
80007bc4:	e4 0e 00 0e 	add	lr,r2,lr
80007bc8:	b0 1e       	st.h	r8[0x2],lr
80007bca:	b1 8e       	lsr	lr,0x10
80007bcc:	1c 01       	add	r1,lr
80007bce:	b0 01       	st.h	r8[0x0],r1
80007bd0:	e2 0e 16 10 	lsr	lr,r1,0x10
80007bd4:	2f c8       	sub	r8,-4
80007bd6:	06 36       	cp.w	r6,r3
80007bd8:	ce 83       	brcs	80007ba8 <__multiply+0x6c>
80007bda:	40 09       	lddsp	r9,sp[0x0]
80007bdc:	91 0e       	st.w	r8[0x0],lr
80007bde:	94 86       	ld.uh	r6,r10[0x0]
80007be0:	58 06       	cp.w	r6,0
80007be2:	c1 d0       	breq	80007c1c <__multiply+0xe0>
80007be4:	72 02       	ld.w	r2,r9[0x0]
80007be6:	12 98       	mov	r8,r9
80007be8:	16 9e       	mov	lr,r11
80007bea:	30 05       	mov	r5,0
80007bec:	b0 12       	st.h	r8[0x2],r2
80007bee:	1d 01       	ld.w	r1,lr++
80007bf0:	90 82       	ld.uh	r2,r8[0x0]
80007bf2:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007bf6:	ad 30       	mul	r0,r6
80007bf8:	e0 02 00 02 	add	r2,r0,r2
80007bfc:	e4 05 00 05 	add	r5,r2,r5
80007c00:	b0 05       	st.h	r8[0x0],r5
80007c02:	b1 85       	lsr	r5,0x10
80007c04:	b1 81       	lsr	r1,0x10
80007c06:	2f c8       	sub	r8,-4
80007c08:	ad 31       	mul	r1,r6
80007c0a:	90 92       	ld.uh	r2,r8[0x2]
80007c0c:	e2 02 00 02 	add	r2,r1,r2
80007c10:	0a 02       	add	r2,r5
80007c12:	e4 05 16 10 	lsr	r5,r2,0x10
80007c16:	06 3e       	cp.w	lr,r3
80007c18:	ce a3       	brcs	80007bec <__multiply+0xb0>
80007c1a:	91 02       	st.w	r8[0x0],r2
80007c1c:	2f ca       	sub	r10,-4
80007c1e:	2f c9       	sub	r9,-4
80007c20:	40 18       	lddsp	r8,sp[0x4]
80007c22:	10 3a       	cp.w	r10,r8
80007c24:	cb b3       	brcs	80007b9a <__multiply+0x5e>
80007c26:	c0 28       	rjmp	80007c2a <__multiply+0xee>
80007c28:	20 17       	sub	r7,1
80007c2a:	58 07       	cp.w	r7,0
80007c2c:	e0 8a 00 05 	brle	80007c36 <__multiply+0xfa>
80007c30:	09 48       	ld.w	r8,--r4
80007c32:	58 08       	cp.w	r8,0
80007c34:	cf a0       	breq	80007c28 <__multiply+0xec>
80007c36:	99 47       	st.w	r12[0x10],r7
80007c38:	2f ed       	sub	sp,-8
80007c3a:	d8 32       	popm	r0-r7,pc

80007c3c <__i2b>:
80007c3c:	d4 21       	pushm	r4-r7,lr
80007c3e:	16 97       	mov	r7,r11
80007c40:	30 1b       	mov	r11,1
80007c42:	c4 9e       	rcall	800078d4 <_Balloc>
80007c44:	30 19       	mov	r9,1
80007c46:	99 57       	st.w	r12[0x14],r7
80007c48:	99 49       	st.w	r12[0x10],r9
80007c4a:	d8 22       	popm	r4-r7,pc

80007c4c <__multadd>:
80007c4c:	d4 31       	pushm	r0-r7,lr
80007c4e:	30 08       	mov	r8,0
80007c50:	12 95       	mov	r5,r9
80007c52:	16 97       	mov	r7,r11
80007c54:	18 96       	mov	r6,r12
80007c56:	76 44       	ld.w	r4,r11[0x10]
80007c58:	f6 c9 ff ec 	sub	r9,r11,-20
80007c5c:	72 0b       	ld.w	r11,r9[0x0]
80007c5e:	f6 0c 16 10 	lsr	r12,r11,0x10
80007c62:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c66:	f4 0c 02 4c 	mul	r12,r10,r12
80007c6a:	f4 0b 03 45 	mac	r5,r10,r11
80007c6e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007c72:	b1 85       	lsr	r5,0x10
80007c74:	18 05       	add	r5,r12
80007c76:	ea 0c 15 10 	lsl	r12,r5,0x10
80007c7a:	f8 0b 00 0b 	add	r11,r12,r11
80007c7e:	12 ab       	st.w	r9++,r11
80007c80:	2f f8       	sub	r8,-1
80007c82:	b1 85       	lsr	r5,0x10
80007c84:	08 38       	cp.w	r8,r4
80007c86:	ce b5       	brlt	80007c5c <__multadd+0x10>
80007c88:	58 05       	cp.w	r5,0
80007c8a:	c1 c0       	breq	80007cc2 <__multadd+0x76>
80007c8c:	6e 28       	ld.w	r8,r7[0x8]
80007c8e:	10 34       	cp.w	r4,r8
80007c90:	c1 35       	brlt	80007cb6 <__multadd+0x6a>
80007c92:	6e 1b       	ld.w	r11,r7[0x4]
80007c94:	0c 9c       	mov	r12,r6
80007c96:	2f fb       	sub	r11,-1
80007c98:	c1 ee       	rcall	800078d4 <_Balloc>
80007c9a:	6e 4a       	ld.w	r10,r7[0x10]
80007c9c:	ee cb ff f4 	sub	r11,r7,-12
80007ca0:	18 93       	mov	r3,r12
80007ca2:	2f ea       	sub	r10,-2
80007ca4:	2f 4c       	sub	r12,-12
80007ca6:	a3 6a       	lsl	r10,0x2
80007ca8:	fe b0 de 36 	rcall	80003914 <memcpy>
80007cac:	0e 9b       	mov	r11,r7
80007cae:	0c 9c       	mov	r12,r6
80007cb0:	fe b0 fd f8 	rcall	800078a0 <_Bfree>
80007cb4:	06 97       	mov	r7,r3
80007cb6:	e8 c8 ff ff 	sub	r8,r4,-1
80007cba:	2f b4       	sub	r4,-5
80007cbc:	8f 48       	st.w	r7[0x10],r8
80007cbe:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007cc2:	0e 9c       	mov	r12,r7
80007cc4:	d8 32       	popm	r0-r7,pc
80007cc6:	d7 03       	nop

80007cc8 <__pow5mult>:
80007cc8:	d4 31       	pushm	r0-r7,lr
80007cca:	14 96       	mov	r6,r10
80007ccc:	18 97       	mov	r7,r12
80007cce:	16 94       	mov	r4,r11
80007cd0:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007cd4:	c0 90       	breq	80007ce6 <__pow5mult+0x1e>
80007cd6:	20 18       	sub	r8,1
80007cd8:	fe c9 e2 7c 	sub	r9,pc,-7556
80007cdc:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007ce0:	30 09       	mov	r9,0
80007ce2:	cb 5f       	rcall	80007c4c <__multadd>
80007ce4:	18 94       	mov	r4,r12
80007ce6:	a3 46       	asr	r6,0x2
80007ce8:	c3 40       	breq	80007d50 <__pow5mult+0x88>
80007cea:	6e 95       	ld.w	r5,r7[0x24]
80007cec:	58 05       	cp.w	r5,0
80007cee:	c0 91       	brne	80007d00 <__pow5mult+0x38>
80007cf0:	31 0c       	mov	r12,16
80007cf2:	fe b0 fa f3 	rcall	800072d8 <malloc>
80007cf6:	99 35       	st.w	r12[0xc],r5
80007cf8:	8f 9c       	st.w	r7[0x24],r12
80007cfa:	99 15       	st.w	r12[0x4],r5
80007cfc:	99 25       	st.w	r12[0x8],r5
80007cfe:	99 05       	st.w	r12[0x0],r5
80007d00:	6e 93       	ld.w	r3,r7[0x24]
80007d02:	66 25       	ld.w	r5,r3[0x8]
80007d04:	58 05       	cp.w	r5,0
80007d06:	c0 c1       	brne	80007d1e <__pow5mult+0x56>
80007d08:	e0 6b 02 71 	mov	r11,625
80007d0c:	0e 9c       	mov	r12,r7
80007d0e:	c9 7f       	rcall	80007c3c <__i2b>
80007d10:	87 2c       	st.w	r3[0x8],r12
80007d12:	30 08       	mov	r8,0
80007d14:	18 95       	mov	r5,r12
80007d16:	99 08       	st.w	r12[0x0],r8
80007d18:	c0 38       	rjmp	80007d1e <__pow5mult+0x56>
80007d1a:	06 9c       	mov	r12,r3
80007d1c:	18 95       	mov	r5,r12
80007d1e:	ed b6 00 00 	bld	r6,0x0
80007d22:	c0 b1       	brne	80007d38 <__pow5mult+0x70>
80007d24:	08 9b       	mov	r11,r4
80007d26:	0a 9a       	mov	r10,r5
80007d28:	0e 9c       	mov	r12,r7
80007d2a:	c0 9f       	rcall	80007b3c <__multiply>
80007d2c:	08 9b       	mov	r11,r4
80007d2e:	18 93       	mov	r3,r12
80007d30:	0e 9c       	mov	r12,r7
80007d32:	06 94       	mov	r4,r3
80007d34:	fe b0 fd b6 	rcall	800078a0 <_Bfree>
80007d38:	a1 56       	asr	r6,0x1
80007d3a:	c0 b0       	breq	80007d50 <__pow5mult+0x88>
80007d3c:	6a 03       	ld.w	r3,r5[0x0]
80007d3e:	58 03       	cp.w	r3,0
80007d40:	ce d1       	brne	80007d1a <__pow5mult+0x52>
80007d42:	0a 9a       	mov	r10,r5
80007d44:	0a 9b       	mov	r11,r5
80007d46:	0e 9c       	mov	r12,r7
80007d48:	cf ae       	rcall	80007b3c <__multiply>
80007d4a:	8b 0c       	st.w	r5[0x0],r12
80007d4c:	99 03       	st.w	r12[0x0],r3
80007d4e:	ce 7b       	rjmp	80007d1c <__pow5mult+0x54>
80007d50:	08 9c       	mov	r12,r4
80007d52:	d8 32       	popm	r0-r7,pc

80007d54 <_realloc_r>:
80007d54:	d4 31       	pushm	r0-r7,lr
80007d56:	20 1d       	sub	sp,4
80007d58:	16 94       	mov	r4,r11
80007d5a:	18 92       	mov	r2,r12
80007d5c:	14 9b       	mov	r11,r10
80007d5e:	58 04       	cp.w	r4,0
80007d60:	c0 51       	brne	80007d6a <_realloc_r+0x16>
80007d62:	fe b0 fa c3 	rcall	800072e8 <_malloc_r>
80007d66:	18 95       	mov	r5,r12
80007d68:	c5 39       	rjmp	8000800e <_realloc_r+0x2ba>
80007d6a:	50 0a       	stdsp	sp[0x0],r10
80007d6c:	fe b0 fd 07 	rcall	8000777a <__malloc_lock>
80007d70:	40 0b       	lddsp	r11,sp[0x0]
80007d72:	f6 c8 ff f5 	sub	r8,r11,-11
80007d76:	e8 c1 00 08 	sub	r1,r4,8
80007d7a:	10 96       	mov	r6,r8
80007d7c:	62 1c       	ld.w	r12,r1[0x4]
80007d7e:	e0 16 ff f8 	andl	r6,0xfff8
80007d82:	59 68       	cp.w	r8,22
80007d84:	f9 b6 08 10 	movls	r6,16
80007d88:	16 36       	cp.w	r6,r11
80007d8a:	5f 38       	srlo	r8
80007d8c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007d90:	c0 50       	breq	80007d9a <_realloc_r+0x46>
80007d92:	30 c8       	mov	r8,12
80007d94:	30 05       	mov	r5,0
80007d96:	85 38       	st.w	r2[0xc],r8
80007d98:	c3 b9       	rjmp	8000800e <_realloc_r+0x2ba>
80007d9a:	18 90       	mov	r0,r12
80007d9c:	e0 10 ff fc 	andl	r0,0xfffc
80007da0:	0c 30       	cp.w	r0,r6
80007da2:	e0 84 01 0b 	brge	80007fb8 <_realloc_r+0x264>
80007da6:	e0 68 01 08 	mov	r8,264
80007daa:	e2 00 00 09 	add	r9,r1,r0
80007dae:	70 25       	ld.w	r5,r8[0x8]
80007db0:	0a 39       	cp.w	r9,r5
80007db2:	c0 90       	breq	80007dc4 <_realloc_r+0x70>
80007db4:	72 1a       	ld.w	r10,r9[0x4]
80007db6:	a1 ca       	cbr	r10,0x0
80007db8:	f2 0a 00 0a 	add	r10,r9,r10
80007dbc:	74 1a       	ld.w	r10,r10[0x4]
80007dbe:	ed ba 00 00 	bld	r10,0x0
80007dc2:	c2 20       	breq	80007e06 <_realloc_r+0xb2>
80007dc4:	72 1a       	ld.w	r10,r9[0x4]
80007dc6:	e0 1a ff fc 	andl	r10,0xfffc
80007dca:	f4 00 00 03 	add	r3,r10,r0
80007dce:	0a 39       	cp.w	r9,r5
80007dd0:	c1 31       	brne	80007df6 <_realloc_r+0xa2>
80007dd2:	ec c7 ff f0 	sub	r7,r6,-16
80007dd6:	0e 33       	cp.w	r3,r7
80007dd8:	c1 95       	brlt	80007e0a <_realloc_r+0xb6>
80007dda:	e2 06 00 09 	add	r9,r1,r6
80007dde:	0c 13       	sub	r3,r6
80007de0:	a1 a3       	sbr	r3,0x0
80007de2:	93 13       	st.w	r9[0x4],r3
80007de4:	91 29       	st.w	r8[0x8],r9
80007de6:	04 9c       	mov	r12,r2
80007de8:	62 18       	ld.w	r8,r1[0x4]
80007dea:	08 95       	mov	r5,r4
80007dec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007df0:	10 46       	or	r6,r8
80007df2:	83 16       	st.w	r1[0x4],r6
80007df4:	c0 b9       	rjmp	8000800a <_realloc_r+0x2b6>
80007df6:	0c 33       	cp.w	r3,r6
80007df8:	c0 95       	brlt	80007e0a <_realloc_r+0xb6>
80007dfa:	72 28       	ld.w	r8,r9[0x8]
80007dfc:	02 97       	mov	r7,r1
80007dfe:	72 39       	ld.w	r9,r9[0xc]
80007e00:	93 28       	st.w	r9[0x8],r8
80007e02:	91 39       	st.w	r8[0xc],r9
80007e04:	cd c8       	rjmp	80007fbc <_realloc_r+0x268>
80007e06:	30 0a       	mov	r10,0
80007e08:	14 99       	mov	r9,r10
80007e0a:	ed bc 00 00 	bld	r12,0x0
80007e0e:	e0 80 00 95 	breq	80007f38 <_realloc_r+0x1e4>
80007e12:	62 07       	ld.w	r7,r1[0x0]
80007e14:	e2 07 01 07 	sub	r7,r1,r7
80007e18:	6e 1c       	ld.w	r12,r7[0x4]
80007e1a:	e0 1c ff fc 	andl	r12,0xfffc
80007e1e:	58 09       	cp.w	r9,0
80007e20:	c5 60       	breq	80007ecc <_realloc_r+0x178>
80007e22:	f8 00 00 03 	add	r3,r12,r0
80007e26:	0a 39       	cp.w	r9,r5
80007e28:	c4 81       	brne	80007eb8 <_realloc_r+0x164>
80007e2a:	14 03       	add	r3,r10
80007e2c:	ec c9 ff f0 	sub	r9,r6,-16
80007e30:	12 33       	cp.w	r3,r9
80007e32:	c4 d5       	brlt	80007ecc <_realloc_r+0x178>
80007e34:	6e 3a       	ld.w	r10,r7[0xc]
80007e36:	6e 29       	ld.w	r9,r7[0x8]
80007e38:	95 29       	st.w	r10[0x8],r9
80007e3a:	93 3a       	st.w	r9[0xc],r10
80007e3c:	ee c5 ff f8 	sub	r5,r7,-8
80007e40:	e0 ca 00 04 	sub	r10,r0,4
80007e44:	e0 4a 00 24 	cp.w	r10,36
80007e48:	e0 8b 00 25 	brhi	80007e92 <_realloc_r+0x13e>
80007e4c:	0a 99       	mov	r9,r5
80007e4e:	59 3a       	cp.w	r10,19
80007e50:	e0 88 00 1a 	brls	80007e84 <_realloc_r+0x130>
80007e54:	09 09       	ld.w	r9,r4++
80007e56:	8b 09       	st.w	r5[0x0],r9
80007e58:	09 09       	ld.w	r9,r4++
80007e5a:	8f 39       	st.w	r7[0xc],r9
80007e5c:	ee c9 ff f0 	sub	r9,r7,-16
80007e60:	59 ba       	cp.w	r10,27
80007e62:	e0 88 00 11 	brls	80007e84 <_realloc_r+0x130>
80007e66:	09 0b       	ld.w	r11,r4++
80007e68:	93 0b       	st.w	r9[0x0],r11
80007e6a:	09 09       	ld.w	r9,r4++
80007e6c:	8f 59       	st.w	r7[0x14],r9
80007e6e:	ee c9 ff e8 	sub	r9,r7,-24
80007e72:	e0 4a 00 24 	cp.w	r10,36
80007e76:	c0 71       	brne	80007e84 <_realloc_r+0x130>
80007e78:	09 0a       	ld.w	r10,r4++
80007e7a:	93 0a       	st.w	r9[0x0],r10
80007e7c:	ee c9 ff e0 	sub	r9,r7,-32
80007e80:	09 0a       	ld.w	r10,r4++
80007e82:	8f 7a       	st.w	r7[0x1c],r10
80007e84:	09 0a       	ld.w	r10,r4++
80007e86:	12 aa       	st.w	r9++,r10
80007e88:	68 0a       	ld.w	r10,r4[0x0]
80007e8a:	93 0a       	st.w	r9[0x0],r10
80007e8c:	68 1a       	ld.w	r10,r4[0x4]
80007e8e:	93 1a       	st.w	r9[0x4],r10
80007e90:	c0 78       	rjmp	80007e9e <_realloc_r+0x14a>
80007e92:	50 08       	stdsp	sp[0x0],r8
80007e94:	08 9b       	mov	r11,r4
80007e96:	0a 9c       	mov	r12,r5
80007e98:	fe b0 fc 4b 	rcall	8000772e <memmove>
80007e9c:	40 08       	lddsp	r8,sp[0x0]
80007e9e:	ee 06 00 09 	add	r9,r7,r6
80007ea2:	0c 13       	sub	r3,r6
80007ea4:	a1 a3       	sbr	r3,0x0
80007ea6:	93 13       	st.w	r9[0x4],r3
80007ea8:	91 29       	st.w	r8[0x8],r9
80007eaa:	04 9c       	mov	r12,r2
80007eac:	6e 18       	ld.w	r8,r7[0x4]
80007eae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007eb2:	10 46       	or	r6,r8
80007eb4:	8f 16       	st.w	r7[0x4],r6
80007eb6:	ca a8       	rjmp	8000800a <_realloc_r+0x2b6>
80007eb8:	14 03       	add	r3,r10
80007eba:	0c 33       	cp.w	r3,r6
80007ebc:	c0 85       	brlt	80007ecc <_realloc_r+0x178>
80007ebe:	72 28       	ld.w	r8,r9[0x8]
80007ec0:	72 39       	ld.w	r9,r9[0xc]
80007ec2:	93 28       	st.w	r9[0x8],r8
80007ec4:	91 39       	st.w	r8[0xc],r9
80007ec6:	6e 28       	ld.w	r8,r7[0x8]
80007ec8:	6e 39       	ld.w	r9,r7[0xc]
80007eca:	c0 78       	rjmp	80007ed8 <_realloc_r+0x184>
80007ecc:	f8 00 00 03 	add	r3,r12,r0
80007ed0:	0c 33       	cp.w	r3,r6
80007ed2:	c3 35       	brlt	80007f38 <_realloc_r+0x1e4>
80007ed4:	6e 39       	ld.w	r9,r7[0xc]
80007ed6:	6e 28       	ld.w	r8,r7[0x8]
80007ed8:	93 28       	st.w	r9[0x8],r8
80007eda:	91 39       	st.w	r8[0xc],r9
80007edc:	e0 ca 00 04 	sub	r10,r0,4
80007ee0:	ee cc ff f8 	sub	r12,r7,-8
80007ee4:	e0 4a 00 24 	cp.w	r10,36
80007ee8:	e0 8b 00 24 	brhi	80007f30 <_realloc_r+0x1dc>
80007eec:	59 3a       	cp.w	r10,19
80007eee:	e0 88 00 1a 	brls	80007f22 <_realloc_r+0x1ce>
80007ef2:	09 08       	ld.w	r8,r4++
80007ef4:	99 08       	st.w	r12[0x0],r8
80007ef6:	09 08       	ld.w	r8,r4++
80007ef8:	8f 38       	st.w	r7[0xc],r8
80007efa:	ee cc ff f0 	sub	r12,r7,-16
80007efe:	59 ba       	cp.w	r10,27
80007f00:	e0 88 00 11 	brls	80007f22 <_realloc_r+0x1ce>
80007f04:	09 08       	ld.w	r8,r4++
80007f06:	99 08       	st.w	r12[0x0],r8
80007f08:	09 08       	ld.w	r8,r4++
80007f0a:	8f 58       	st.w	r7[0x14],r8
80007f0c:	ee cc ff e8 	sub	r12,r7,-24
80007f10:	e0 4a 00 24 	cp.w	r10,36
80007f14:	c0 71       	brne	80007f22 <_realloc_r+0x1ce>
80007f16:	09 08       	ld.w	r8,r4++
80007f18:	99 08       	st.w	r12[0x0],r8
80007f1a:	ee cc ff e0 	sub	r12,r7,-32
80007f1e:	09 08       	ld.w	r8,r4++
80007f20:	8f 78       	st.w	r7[0x1c],r8
80007f22:	09 08       	ld.w	r8,r4++
80007f24:	18 a8       	st.w	r12++,r8
80007f26:	68 08       	ld.w	r8,r4[0x0]
80007f28:	99 08       	st.w	r12[0x0],r8
80007f2a:	68 18       	ld.w	r8,r4[0x4]
80007f2c:	99 18       	st.w	r12[0x4],r8
80007f2e:	c4 78       	rjmp	80007fbc <_realloc_r+0x268>
80007f30:	08 9b       	mov	r11,r4
80007f32:	fe b0 fb fe 	rcall	8000772e <memmove>
80007f36:	c4 38       	rjmp	80007fbc <_realloc_r+0x268>
80007f38:	04 9c       	mov	r12,r2
80007f3a:	fe b0 f9 d7 	rcall	800072e8 <_malloc_r>
80007f3e:	18 95       	mov	r5,r12
80007f40:	c3 a0       	breq	80007fb4 <_realloc_r+0x260>
80007f42:	62 18       	ld.w	r8,r1[0x4]
80007f44:	f8 c9 00 08 	sub	r9,r12,8
80007f48:	a1 c8       	cbr	r8,0x0
80007f4a:	e2 08 00 08 	add	r8,r1,r8
80007f4e:	10 39       	cp.w	r9,r8
80007f50:	c0 71       	brne	80007f5e <_realloc_r+0x20a>
80007f52:	72 13       	ld.w	r3,r9[0x4]
80007f54:	02 97       	mov	r7,r1
80007f56:	e0 13 ff fc 	andl	r3,0xfffc
80007f5a:	00 03       	add	r3,r0
80007f5c:	c3 08       	rjmp	80007fbc <_realloc_r+0x268>
80007f5e:	e0 ca 00 04 	sub	r10,r0,4
80007f62:	e0 4a 00 24 	cp.w	r10,36
80007f66:	e0 8b 00 20 	brhi	80007fa6 <_realloc_r+0x252>
80007f6a:	08 99       	mov	r9,r4
80007f6c:	18 98       	mov	r8,r12
80007f6e:	59 3a       	cp.w	r10,19
80007f70:	e0 88 00 14 	brls	80007f98 <_realloc_r+0x244>
80007f74:	13 0b       	ld.w	r11,r9++
80007f76:	10 ab       	st.w	r8++,r11
80007f78:	13 0b       	ld.w	r11,r9++
80007f7a:	10 ab       	st.w	r8++,r11
80007f7c:	59 ba       	cp.w	r10,27
80007f7e:	e0 88 00 0d 	brls	80007f98 <_realloc_r+0x244>
80007f82:	13 0b       	ld.w	r11,r9++
80007f84:	10 ab       	st.w	r8++,r11
80007f86:	13 0b       	ld.w	r11,r9++
80007f88:	10 ab       	st.w	r8++,r11
80007f8a:	e0 4a 00 24 	cp.w	r10,36
80007f8e:	c0 51       	brne	80007f98 <_realloc_r+0x244>
80007f90:	13 0a       	ld.w	r10,r9++
80007f92:	10 aa       	st.w	r8++,r10
80007f94:	13 0a       	ld.w	r10,r9++
80007f96:	10 aa       	st.w	r8++,r10
80007f98:	13 0a       	ld.w	r10,r9++
80007f9a:	10 aa       	st.w	r8++,r10
80007f9c:	72 0a       	ld.w	r10,r9[0x0]
80007f9e:	91 0a       	st.w	r8[0x0],r10
80007fa0:	72 19       	ld.w	r9,r9[0x4]
80007fa2:	91 19       	st.w	r8[0x4],r9
80007fa4:	c0 48       	rjmp	80007fac <_realloc_r+0x258>
80007fa6:	08 9b       	mov	r11,r4
80007fa8:	fe b0 fb c3 	rcall	8000772e <memmove>
80007fac:	08 9b       	mov	r11,r4
80007fae:	04 9c       	mov	r12,r2
80007fb0:	fe b0 f6 f6 	rcall	80006d9c <_free_r>
80007fb4:	04 9c       	mov	r12,r2
80007fb6:	c2 a8       	rjmp	8000800a <_realloc_r+0x2b6>
80007fb8:	00 93       	mov	r3,r0
80007fba:	02 97       	mov	r7,r1
80007fbc:	e6 06 01 09 	sub	r9,r3,r6
80007fc0:	6e 18       	ld.w	r8,r7[0x4]
80007fc2:	58 f9       	cp.w	r9,15
80007fc4:	e0 88 00 16 	brls	80007ff0 <_realloc_r+0x29c>
80007fc8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007fcc:	ed e8 10 08 	or	r8,r6,r8
80007fd0:	8f 18       	st.w	r7[0x4],r8
80007fd2:	12 98       	mov	r8,r9
80007fd4:	a1 a8       	sbr	r8,0x0
80007fd6:	ee 06 00 0b 	add	r11,r7,r6
80007fda:	f6 09 00 09 	add	r9,r11,r9
80007fde:	97 18       	st.w	r11[0x4],r8
80007fe0:	72 18       	ld.w	r8,r9[0x4]
80007fe2:	a1 a8       	sbr	r8,0x0
80007fe4:	2f 8b       	sub	r11,-8
80007fe6:	93 18       	st.w	r9[0x4],r8
80007fe8:	04 9c       	mov	r12,r2
80007fea:	fe b0 f6 d9 	rcall	80006d9c <_free_r>
80007fee:	c0 b8       	rjmp	80008004 <_realloc_r+0x2b0>
80007ff0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007ff4:	e7 e8 10 08 	or	r8,r3,r8
80007ff8:	8f 18       	st.w	r7[0x4],r8
80007ffa:	ee 03 00 03 	add	r3,r7,r3
80007ffe:	66 18       	ld.w	r8,r3[0x4]
80008000:	a1 a8       	sbr	r8,0x0
80008002:	87 18       	st.w	r3[0x4],r8
80008004:	04 9c       	mov	r12,r2
80008006:	ee c5 ff f8 	sub	r5,r7,-8
8000800a:	fe b0 fb b9 	rcall	8000777c <__malloc_unlock>
8000800e:	0a 9c       	mov	r12,r5
80008010:	2f fd       	sub	sp,-4
80008012:	d8 32       	popm	r0-r7,pc

80008014 <__isinfd>:
80008014:	14 98       	mov	r8,r10
80008016:	fc 19 7f f0 	movh	r9,0x7ff0
8000801a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000801e:	f0 0b 11 00 	rsub	r11,r8,0
80008022:	f7 e8 10 08 	or	r8,r11,r8
80008026:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000802a:	f2 08 01 08 	sub	r8,r9,r8
8000802e:	f0 0c 11 00 	rsub	r12,r8,0
80008032:	f9 e8 10 08 	or	r8,r12,r8
80008036:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000803a:	2f fc       	sub	r12,-1
8000803c:	5e fc       	retal	r12

8000803e <__isnand>:
8000803e:	14 98       	mov	r8,r10
80008040:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008044:	f0 0c 11 00 	rsub	r12,r8,0
80008048:	10 4c       	or	r12,r8
8000804a:	fc 18 7f f0 	movh	r8,0x7ff0
8000804e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008052:	f0 0c 01 0c 	sub	r12,r8,r12
80008056:	bf 9c       	lsr	r12,0x1f
80008058:	5e fc       	retal	r12
8000805a:	d7 03       	nop

8000805c <_sbrk_r>:
8000805c:	d4 21       	pushm	r4-r7,lr
8000805e:	30 08       	mov	r8,0
80008060:	18 97       	mov	r7,r12
80008062:	e0 66 07 0c 	mov	r6,1804
80008066:	16 9c       	mov	r12,r11
80008068:	8d 08       	st.w	r6[0x0],r8
8000806a:	ca fc       	rcall	800081c8 <_sbrk>
8000806c:	5b fc       	cp.w	r12,-1
8000806e:	c0 51       	brne	80008078 <_sbrk_r+0x1c>
80008070:	6c 08       	ld.w	r8,r6[0x0]
80008072:	58 08       	cp.w	r8,0
80008074:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008078:	d8 22       	popm	r4-r7,pc
8000807a:	d7 03       	nop

8000807c <__sclose>:
8000807c:	d4 01       	pushm	lr
8000807e:	96 7b       	ld.sh	r11,r11[0xe]
80008080:	cf ec       	rcall	8000827c <_close_r>
80008082:	d8 02       	popm	pc

80008084 <__sseek>:
80008084:	d4 21       	pushm	r4-r7,lr
80008086:	16 97       	mov	r7,r11
80008088:	96 7b       	ld.sh	r11,r11[0xe]
8000808a:	c8 5d       	rcall	80008394 <_lseek_r>
8000808c:	8e 68       	ld.sh	r8,r7[0xc]
8000808e:	10 99       	mov	r9,r8
80008090:	ad c8       	cbr	r8,0xc
80008092:	ad a9       	sbr	r9,0xc
80008094:	5b fc       	cp.w	r12,-1
80008096:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000809a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000809e:	ef fc 1a 15 	st.wne	r7[0x54],r12
800080a2:	d8 22       	popm	r4-r7,pc

800080a4 <__swrite>:
800080a4:	d4 21       	pushm	r4-r7,lr
800080a6:	96 68       	ld.sh	r8,r11[0xc]
800080a8:	16 97       	mov	r7,r11
800080aa:	14 95       	mov	r5,r10
800080ac:	12 94       	mov	r4,r9
800080ae:	e2 18 01 00 	andl	r8,0x100,COH
800080b2:	18 96       	mov	r6,r12
800080b4:	c0 50       	breq	800080be <__swrite+0x1a>
800080b6:	30 29       	mov	r9,2
800080b8:	30 0a       	mov	r10,0
800080ba:	96 7b       	ld.sh	r11,r11[0xe]
800080bc:	c6 cd       	rcall	80008394 <_lseek_r>
800080be:	8e 68       	ld.sh	r8,r7[0xc]
800080c0:	ad c8       	cbr	r8,0xc
800080c2:	08 99       	mov	r9,r4
800080c4:	0a 9a       	mov	r10,r5
800080c6:	8e 7b       	ld.sh	r11,r7[0xe]
800080c8:	0c 9c       	mov	r12,r6
800080ca:	ae 68       	st.h	r7[0xc],r8
800080cc:	c9 ac       	rcall	80008200 <_write_r>
800080ce:	d8 22       	popm	r4-r7,pc

800080d0 <__sread>:
800080d0:	d4 21       	pushm	r4-r7,lr
800080d2:	16 97       	mov	r7,r11
800080d4:	96 7b       	ld.sh	r11,r11[0xe]
800080d6:	c7 1d       	rcall	800083b8 <_read_r>
800080d8:	c0 65       	brlt	800080e4 <__sread+0x14>
800080da:	6f 58       	ld.w	r8,r7[0x54]
800080dc:	18 08       	add	r8,r12
800080de:	ef 48 00 54 	st.w	r7[84],r8
800080e2:	d8 22       	popm	r4-r7,pc
800080e4:	8e 68       	ld.sh	r8,r7[0xc]
800080e6:	ad c8       	cbr	r8,0xc
800080e8:	ae 68       	st.h	r7[0xc],r8
800080ea:	d8 22       	popm	r4-r7,pc

800080ec <strlen>:
800080ec:	30 09       	mov	r9,0
800080ee:	18 98       	mov	r8,r12
800080f0:	c0 28       	rjmp	800080f4 <strlen+0x8>
800080f2:	2f f8       	sub	r8,-1
800080f4:	11 8a       	ld.ub	r10,r8[0x0]
800080f6:	f2 0a 18 00 	cp.b	r10,r9
800080fa:	cf c1       	brne	800080f2 <strlen+0x6>
800080fc:	f0 0c 01 0c 	sub	r12,r8,r12
80008100:	5e fc       	retal	r12
80008102:	d7 03       	nop

80008104 <_close>:
80008104:	30 28       	mov	r8,2
80008106:	d6 73       	breakpoint
80008108:	3f fc       	mov	r12,-1
8000810a:	35 8b       	mov	r11,88
8000810c:	58 0c       	cp.w	r12,0
8000810e:	5e 4c       	retge	r12
80008110:	e0 6a 07 0c 	mov	r10,1804
80008114:	95 0b       	st.w	r10[0x0],r11
80008116:	5e fc       	retal	r12

80008118 <_lseek>:
80008118:	30 58       	mov	r8,5
8000811a:	d6 73       	breakpoint
8000811c:	3f fc       	mov	r12,-1
8000811e:	35 8b       	mov	r11,88
80008120:	58 0c       	cp.w	r12,0
80008122:	5e 4c       	retge	r12
80008124:	e0 6a 07 0c 	mov	r10,1804
80008128:	95 0b       	st.w	r10[0x0],r11
8000812a:	5e fc       	retal	r12

8000812c <_read>:
8000812c:	30 38       	mov	r8,3
8000812e:	d6 73       	breakpoint
80008130:	3f fc       	mov	r12,-1
80008132:	35 8b       	mov	r11,88
80008134:	58 0c       	cp.w	r12,0
80008136:	5e 4c       	retge	r12
80008138:	e0 6a 07 0c 	mov	r10,1804
8000813c:	95 0b       	st.w	r10[0x0],r11
8000813e:	5e fc       	retal	r12

80008140 <_write>:
80008140:	30 48       	mov	r8,4
80008142:	d6 73       	breakpoint
80008144:	3f fc       	mov	r12,-1
80008146:	35 8b       	mov	r11,88
80008148:	58 0c       	cp.w	r12,0
8000814a:	5e 4c       	retge	r12
8000814c:	e0 6a 07 0c 	mov	r10,1804
80008150:	95 0b       	st.w	r10[0x0],r11
80008152:	5e fc       	retal	r12

80008154 <isatty>:
80008154:	30 b8       	mov	r8,11
80008156:	d6 73       	breakpoint
80008158:	3f fc       	mov	r12,-1
8000815a:	35 8b       	mov	r11,88
8000815c:	58 0c       	cp.w	r12,0
8000815e:	5e 4c       	retge	r12
80008160:	e0 6a 07 0c 	mov	r10,1804
80008164:	95 0b       	st.w	r10[0x0],r11
80008166:	5e fc       	retal	r12

80008168 <_fstat_host>:
80008168:	30 98       	mov	r8,9
8000816a:	d6 73       	breakpoint
8000816c:	3f fc       	mov	r12,-1
8000816e:	35 8b       	mov	r11,88
80008170:	58 0c       	cp.w	r12,0
80008172:	5e 4c       	retge	r12
80008174:	e0 6a 07 0c 	mov	r10,1804
80008178:	95 0b       	st.w	r10[0x0],r11
8000817a:	5e fc       	retal	r12

8000817c <_fstat>:
8000817c:	d4 21       	pushm	r4-r7,lr
8000817e:	21 0d       	sub	sp,64
80008180:	16 97       	mov	r7,r11
80008182:	1a 9b       	mov	r11,sp
80008184:	cf 2f       	rcall	80008168 <_fstat_host>
80008186:	c0 34       	brge	8000818c <_fstat+0x10>
80008188:	3f fc       	mov	r12,-1
8000818a:	c1 c8       	rjmp	800081c2 <_fstat+0x46>
8000818c:	40 08       	lddsp	r8,sp[0x0]
8000818e:	ae 08       	st.h	r7[0x0],r8
80008190:	40 18       	lddsp	r8,sp[0x4]
80008192:	ae 18       	st.h	r7[0x2],r8
80008194:	40 28       	lddsp	r8,sp[0x8]
80008196:	8f 18       	st.w	r7[0x4],r8
80008198:	40 38       	lddsp	r8,sp[0xc]
8000819a:	ae 48       	st.h	r7[0x8],r8
8000819c:	40 48       	lddsp	r8,sp[0x10]
8000819e:	ae 58       	st.h	r7[0xa],r8
800081a0:	40 58       	lddsp	r8,sp[0x14]
800081a2:	ae 68       	st.h	r7[0xc],r8
800081a4:	40 68       	lddsp	r8,sp[0x18]
800081a6:	ae 78       	st.h	r7[0xe],r8
800081a8:	40 88       	lddsp	r8,sp[0x20]
800081aa:	8f 48       	st.w	r7[0x10],r8
800081ac:	40 a8       	lddsp	r8,sp[0x28]
800081ae:	8f b8       	st.w	r7[0x2c],r8
800081b0:	40 c8       	lddsp	r8,sp[0x30]
800081b2:	8f c8       	st.w	r7[0x30],r8
800081b4:	40 d8       	lddsp	r8,sp[0x34]
800081b6:	8f 58       	st.w	r7[0x14],r8
800081b8:	40 e8       	lddsp	r8,sp[0x38]
800081ba:	30 0c       	mov	r12,0
800081bc:	8f 78       	st.w	r7[0x1c],r8
800081be:	40 f8       	lddsp	r8,sp[0x3c]
800081c0:	8f 98       	st.w	r7[0x24],r8
800081c2:	2f 0d       	sub	sp,-64
800081c4:	d8 22       	popm	r4-r7,pc
800081c6:	d7 03       	nop

800081c8 <_sbrk>:
800081c8:	d4 01       	pushm	lr
800081ca:	e0 68 06 5c 	mov	r8,1628
800081ce:	70 09       	ld.w	r9,r8[0x0]
800081d0:	58 09       	cp.w	r9,0
800081d2:	c0 41       	brne	800081da <_sbrk+0x12>
800081d4:	e0 69 07 10 	mov	r9,1808
800081d8:	91 09       	st.w	r8[0x0],r9
800081da:	e0 69 06 5c 	mov	r9,1628
800081de:	e0 6a f0 00 	mov	r10,61440
800081e2:	72 08       	ld.w	r8,r9[0x0]
800081e4:	f0 0c 00 0c 	add	r12,r8,r12
800081e8:	14 3c       	cp.w	r12,r10
800081ea:	e0 8b 00 04 	brhi	800081f2 <_sbrk+0x2a>
800081ee:	93 0c       	st.w	r9[0x0],r12
800081f0:	c0 58       	rjmp	800081fa <_sbrk+0x32>
800081f2:	c5 5c       	rcall	8000829c <__errno>
800081f4:	30 c8       	mov	r8,12
800081f6:	99 08       	st.w	r12[0x0],r8
800081f8:	3f f8       	mov	r8,-1
800081fa:	10 9c       	mov	r12,r8
800081fc:	d8 02       	popm	pc
800081fe:	d7 03       	nop

80008200 <_write_r>:
80008200:	d4 21       	pushm	r4-r7,lr
80008202:	16 98       	mov	r8,r11
80008204:	18 97       	mov	r7,r12
80008206:	10 9c       	mov	r12,r8
80008208:	30 08       	mov	r8,0
8000820a:	14 9b       	mov	r11,r10
8000820c:	e0 66 07 0c 	mov	r6,1804
80008210:	12 9a       	mov	r10,r9
80008212:	8d 08       	st.w	r6[0x0],r8
80008214:	c9 6f       	rcall	80008140 <_write>
80008216:	5b fc       	cp.w	r12,-1
80008218:	c0 51       	brne	80008222 <_write_r+0x22>
8000821a:	6c 08       	ld.w	r8,r6[0x0]
8000821c:	58 08       	cp.w	r8,0
8000821e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008222:	d8 22       	popm	r4-r7,pc

80008224 <_calloc_r>:
80008224:	d4 21       	pushm	r4-r7,lr
80008226:	f4 0b 02 4b 	mul	r11,r10,r11
8000822a:	fe b0 f8 5f 	rcall	800072e8 <_malloc_r>
8000822e:	18 97       	mov	r7,r12
80008230:	c2 30       	breq	80008276 <_calloc_r+0x52>
80008232:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008236:	e0 1a ff fc 	andl	r10,0xfffc
8000823a:	20 4a       	sub	r10,4
8000823c:	e0 4a 00 24 	cp.w	r10,36
80008240:	e0 8b 00 18 	brhi	80008270 <_calloc_r+0x4c>
80008244:	18 98       	mov	r8,r12
80008246:	59 3a       	cp.w	r10,19
80008248:	e0 88 00 0f 	brls	80008266 <_calloc_r+0x42>
8000824c:	30 09       	mov	r9,0
8000824e:	10 a9       	st.w	r8++,r9
80008250:	10 a9       	st.w	r8++,r9
80008252:	59 ba       	cp.w	r10,27
80008254:	e0 88 00 09 	brls	80008266 <_calloc_r+0x42>
80008258:	10 a9       	st.w	r8++,r9
8000825a:	10 a9       	st.w	r8++,r9
8000825c:	e0 4a 00 24 	cp.w	r10,36
80008260:	c0 31       	brne	80008266 <_calloc_r+0x42>
80008262:	10 a9       	st.w	r8++,r9
80008264:	10 a9       	st.w	r8++,r9
80008266:	30 09       	mov	r9,0
80008268:	10 a9       	st.w	r8++,r9
8000826a:	91 19       	st.w	r8[0x4],r9
8000826c:	91 09       	st.w	r8[0x0],r9
8000826e:	c0 48       	rjmp	80008276 <_calloc_r+0x52>
80008270:	30 0b       	mov	r11,0
80008272:	fe b0 fa 7d 	rcall	8000776c <memset>
80008276:	0e 9c       	mov	r12,r7
80008278:	d8 22       	popm	r4-r7,pc
8000827a:	d7 03       	nop

8000827c <_close_r>:
8000827c:	d4 21       	pushm	r4-r7,lr
8000827e:	30 08       	mov	r8,0
80008280:	18 97       	mov	r7,r12
80008282:	e0 66 07 0c 	mov	r6,1804
80008286:	16 9c       	mov	r12,r11
80008288:	8d 08       	st.w	r6[0x0],r8
8000828a:	c3 df       	rcall	80008104 <_close>
8000828c:	5b fc       	cp.w	r12,-1
8000828e:	c0 51       	brne	80008298 <_close_r+0x1c>
80008290:	6c 08       	ld.w	r8,r6[0x0]
80008292:	58 08       	cp.w	r8,0
80008294:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008298:	d8 22       	popm	r4-r7,pc
8000829a:	d7 03       	nop

8000829c <__errno>:
8000829c:	e0 68 01 04 	mov	r8,260
800082a0:	70 0c       	ld.w	r12,r8[0x0]
800082a2:	2f 4c       	sub	r12,-12
800082a4:	5e fc       	retal	r12
800082a6:	d7 03       	nop

800082a8 <_fclose_r>:
800082a8:	d4 21       	pushm	r4-r7,lr
800082aa:	18 96       	mov	r6,r12
800082ac:	16 97       	mov	r7,r11
800082ae:	58 0b       	cp.w	r11,0
800082b0:	c0 31       	brne	800082b6 <_fclose_r+0xe>
800082b2:	16 95       	mov	r5,r11
800082b4:	c5 38       	rjmp	8000835a <_fclose_r+0xb2>
800082b6:	fe b0 f4 87 	rcall	80006bc4 <__sfp_lock_acquire>
800082ba:	58 06       	cp.w	r6,0
800082bc:	c0 70       	breq	800082ca <_fclose_r+0x22>
800082be:	6c 68       	ld.w	r8,r6[0x18]
800082c0:	58 08       	cp.w	r8,0
800082c2:	c0 41       	brne	800082ca <_fclose_r+0x22>
800082c4:	0c 9c       	mov	r12,r6
800082c6:	fe b0 f4 d1 	rcall	80006c68 <__sinit>
800082ca:	fe c8 e9 0e 	sub	r8,pc,-5874
800082ce:	10 37       	cp.w	r7,r8
800082d0:	c0 31       	brne	800082d6 <_fclose_r+0x2e>
800082d2:	6c 07       	ld.w	r7,r6[0x0]
800082d4:	c0 c8       	rjmp	800082ec <_fclose_r+0x44>
800082d6:	fe c8 e8 fa 	sub	r8,pc,-5894
800082da:	10 37       	cp.w	r7,r8
800082dc:	c0 31       	brne	800082e2 <_fclose_r+0x3a>
800082de:	6c 17       	ld.w	r7,r6[0x4]
800082e0:	c0 68       	rjmp	800082ec <_fclose_r+0x44>
800082e2:	fe c8 e8 e6 	sub	r8,pc,-5914
800082e6:	10 37       	cp.w	r7,r8
800082e8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800082ec:	8e 69       	ld.sh	r9,r7[0xc]
800082ee:	30 08       	mov	r8,0
800082f0:	f0 09 19 00 	cp.h	r9,r8
800082f4:	c0 51       	brne	800082fe <_fclose_r+0x56>
800082f6:	fe b0 f4 68 	rcall	80006bc6 <__sfp_lock_release>
800082fa:	30 05       	mov	r5,0
800082fc:	c2 f8       	rjmp	8000835a <_fclose_r+0xb2>
800082fe:	0e 9b       	mov	r11,r7
80008300:	0c 9c       	mov	r12,r6
80008302:	fe b0 f3 db 	rcall	80006ab8 <_fflush_r>
80008306:	6e c8       	ld.w	r8,r7[0x30]
80008308:	18 95       	mov	r5,r12
8000830a:	58 08       	cp.w	r8,0
8000830c:	c0 60       	breq	80008318 <_fclose_r+0x70>
8000830e:	6e 8b       	ld.w	r11,r7[0x20]
80008310:	0c 9c       	mov	r12,r6
80008312:	5d 18       	icall	r8
80008314:	f9 b5 05 ff 	movlt	r5,-1
80008318:	8e 68       	ld.sh	r8,r7[0xc]
8000831a:	ed b8 00 07 	bld	r8,0x7
8000831e:	c0 51       	brne	80008328 <_fclose_r+0x80>
80008320:	6e 4b       	ld.w	r11,r7[0x10]
80008322:	0c 9c       	mov	r12,r6
80008324:	fe b0 f5 3c 	rcall	80006d9c <_free_r>
80008328:	6e db       	ld.w	r11,r7[0x34]
8000832a:	58 0b       	cp.w	r11,0
8000832c:	c0 a0       	breq	80008340 <_fclose_r+0x98>
8000832e:	ee c8 ff bc 	sub	r8,r7,-68
80008332:	10 3b       	cp.w	r11,r8
80008334:	c0 40       	breq	8000833c <_fclose_r+0x94>
80008336:	0c 9c       	mov	r12,r6
80008338:	fe b0 f5 32 	rcall	80006d9c <_free_r>
8000833c:	30 08       	mov	r8,0
8000833e:	8f d8       	st.w	r7[0x34],r8
80008340:	6f 2b       	ld.w	r11,r7[0x48]
80008342:	58 0b       	cp.w	r11,0
80008344:	c0 70       	breq	80008352 <_fclose_r+0xaa>
80008346:	0c 9c       	mov	r12,r6
80008348:	fe b0 f5 2a 	rcall	80006d9c <_free_r>
8000834c:	30 08       	mov	r8,0
8000834e:	ef 48 00 48 	st.w	r7[72],r8
80008352:	30 08       	mov	r8,0
80008354:	ae 68       	st.h	r7[0xc],r8
80008356:	fe b0 f4 38 	rcall	80006bc6 <__sfp_lock_release>
8000835a:	0a 9c       	mov	r12,r5
8000835c:	d8 22       	popm	r4-r7,pc
8000835e:	d7 03       	nop

80008360 <fclose>:
80008360:	d4 01       	pushm	lr
80008362:	e0 68 01 04 	mov	r8,260
80008366:	18 9b       	mov	r11,r12
80008368:	70 0c       	ld.w	r12,r8[0x0]
8000836a:	c9 ff       	rcall	800082a8 <_fclose_r>
8000836c:	d8 02       	popm	pc
8000836e:	d7 03       	nop

80008370 <_fstat_r>:
80008370:	d4 21       	pushm	r4-r7,lr
80008372:	16 98       	mov	r8,r11
80008374:	18 97       	mov	r7,r12
80008376:	10 9c       	mov	r12,r8
80008378:	30 08       	mov	r8,0
8000837a:	e0 66 07 0c 	mov	r6,1804
8000837e:	14 9b       	mov	r11,r10
80008380:	8d 08       	st.w	r6[0x0],r8
80008382:	cf de       	rcall	8000817c <_fstat>
80008384:	5b fc       	cp.w	r12,-1
80008386:	c0 51       	brne	80008390 <_fstat_r+0x20>
80008388:	6c 08       	ld.w	r8,r6[0x0]
8000838a:	58 08       	cp.w	r8,0
8000838c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008390:	d8 22       	popm	r4-r7,pc
80008392:	d7 03       	nop

80008394 <_lseek_r>:
80008394:	d4 21       	pushm	r4-r7,lr
80008396:	16 98       	mov	r8,r11
80008398:	18 97       	mov	r7,r12
8000839a:	10 9c       	mov	r12,r8
8000839c:	30 08       	mov	r8,0
8000839e:	14 9b       	mov	r11,r10
800083a0:	e0 66 07 0c 	mov	r6,1804
800083a4:	12 9a       	mov	r10,r9
800083a6:	8d 08       	st.w	r6[0x0],r8
800083a8:	cb 8e       	rcall	80008118 <_lseek>
800083aa:	5b fc       	cp.w	r12,-1
800083ac:	c0 51       	brne	800083b6 <_lseek_r+0x22>
800083ae:	6c 08       	ld.w	r8,r6[0x0]
800083b0:	58 08       	cp.w	r8,0
800083b2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800083b6:	d8 22       	popm	r4-r7,pc

800083b8 <_read_r>:
800083b8:	d4 21       	pushm	r4-r7,lr
800083ba:	16 98       	mov	r8,r11
800083bc:	18 97       	mov	r7,r12
800083be:	10 9c       	mov	r12,r8
800083c0:	30 08       	mov	r8,0
800083c2:	14 9b       	mov	r11,r10
800083c4:	e0 66 07 0c 	mov	r6,1804
800083c8:	12 9a       	mov	r10,r9
800083ca:	8d 08       	st.w	r6[0x0],r8
800083cc:	cb 0e       	rcall	8000812c <_read>
800083ce:	5b fc       	cp.w	r12,-1
800083d0:	c0 51       	brne	800083da <_read_r+0x22>
800083d2:	6c 08       	ld.w	r8,r6[0x0]
800083d4:	58 08       	cp.w	r8,0
800083d6:	ef f8 1a 03 	st.wne	r7[0xc],r8
800083da:	d8 22       	popm	r4-r7,pc

800083dc <__avr32_f64_mul>:
800083dc:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800083e0:	e0 80 00 dc 	breq	80008598 <__avr32_f64_mul_op1_zero>
800083e4:	d4 21       	pushm	r4-r7,lr
800083e6:	f7 e9 20 0e 	eor	lr,r11,r9
800083ea:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800083ee:	30 15       	mov	r5,1
800083f0:	c4 30       	breq	80008476 <__avr32_f64_mul_op1_subnormal>
800083f2:	ab 6b       	lsl	r11,0xa
800083f4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800083f8:	ab 6a       	lsl	r10,0xa
800083fa:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800083fe:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008402:	c5 c0       	breq	800084ba <__avr32_f64_mul_op2_subnormal>
80008404:	a1 78       	lsl	r8,0x1
80008406:	5c f9       	rol	r9
80008408:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000840c:	e0 47 07 ff 	cp.w	r7,2047
80008410:	c7 70       	breq	800084fe <__avr32_f64_mul_op_nan_or_inf>
80008412:	e0 46 07 ff 	cp.w	r6,2047
80008416:	c7 40       	breq	800084fe <__avr32_f64_mul_op_nan_or_inf>
80008418:	ee 06 00 0c 	add	r12,r7,r6
8000841c:	e0 2c 03 fe 	sub	r12,1022
80008420:	f6 08 06 44 	mulu.d	r4,r11,r8
80008424:	f4 09 07 44 	macu.d	r4,r10,r9
80008428:	f4 08 06 46 	mulu.d	r6,r10,r8
8000842c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008430:	08 07       	add	r7,r4
80008432:	f4 05 00 4a 	adc	r10,r10,r5
80008436:	5c 0b       	acr	r11
80008438:	ed bb 00 14 	bld	r11,0x14
8000843c:	c0 50       	breq	80008446 <__avr32_f64_mul+0x6a>
8000843e:	a1 77       	lsl	r7,0x1
80008440:	5c fa       	rol	r10
80008442:	5c fb       	rol	r11
80008444:	20 1c       	sub	r12,1
80008446:	58 0c       	cp.w	r12,0
80008448:	e0 8a 00 6f 	brle	80008526 <__avr32_f64_mul_res_subnormal>
8000844c:	e0 4c 07 ff 	cp.w	r12,2047
80008450:	e0 84 00 9c 	brge	80008588 <__avr32_f64_mul_res_inf>
80008454:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008458:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000845c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008460:	ee 17 80 00 	eorh	r7,0x8000
80008464:	f1 b7 04 20 	satu	r7,0x1
80008468:	0e 0a       	add	r10,r7
8000846a:	5c 0b       	acr	r11
8000846c:	ed be 00 1f 	bld	lr,0x1f
80008470:	ef bb 00 1f 	bst	r11,0x1f
80008474:	d8 22       	popm	r4-r7,pc

80008476 <__avr32_f64_mul_op1_subnormal>:
80008476:	e4 1b 00 0f 	andh	r11,0xf
8000847a:	f4 0c 12 00 	clz	r12,r10
8000847e:	f6 06 12 00 	clz	r6,r11
80008482:	f7 bc 03 e1 	sublo	r12,-31
80008486:	f8 06 17 30 	movlo	r6,r12
8000848a:	f7 b6 02 01 	subhs	r6,1
8000848e:	e0 46 00 20 	cp.w	r6,32
80008492:	c0 d4       	brge	800084ac <__avr32_f64_mul_op1_subnormal+0x36>
80008494:	ec 0c 11 20 	rsub	r12,r6,32
80008498:	f6 06 09 4b 	lsl	r11,r11,r6
8000849c:	f4 0c 0a 4c 	lsr	r12,r10,r12
800084a0:	18 4b       	or	r11,r12
800084a2:	f4 06 09 4a 	lsl	r10,r10,r6
800084a6:	20 b6       	sub	r6,11
800084a8:	0c 17       	sub	r7,r6
800084aa:	ca ab       	rjmp	800083fe <__avr32_f64_mul+0x22>
800084ac:	f4 06 09 4b 	lsl	r11,r10,r6
800084b0:	c6 40       	breq	80008578 <__avr32_f64_mul_res_zero>
800084b2:	30 0a       	mov	r10,0
800084b4:	20 b6       	sub	r6,11
800084b6:	0c 17       	sub	r7,r6
800084b8:	ca 3b       	rjmp	800083fe <__avr32_f64_mul+0x22>

800084ba <__avr32_f64_mul_op2_subnormal>:
800084ba:	e4 19 00 0f 	andh	r9,0xf
800084be:	f0 0c 12 00 	clz	r12,r8
800084c2:	f2 05 12 00 	clz	r5,r9
800084c6:	f7 bc 03 ea 	sublo	r12,-22
800084ca:	f8 05 17 30 	movlo	r5,r12
800084ce:	f7 b5 02 0a 	subhs	r5,10
800084d2:	e0 45 00 20 	cp.w	r5,32
800084d6:	c0 d4       	brge	800084f0 <__avr32_f64_mul_op2_subnormal+0x36>
800084d8:	ea 0c 11 20 	rsub	r12,r5,32
800084dc:	f2 05 09 49 	lsl	r9,r9,r5
800084e0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800084e4:	18 49       	or	r9,r12
800084e6:	f0 05 09 48 	lsl	r8,r8,r5
800084ea:	20 25       	sub	r5,2
800084ec:	0a 16       	sub	r6,r5
800084ee:	c8 fb       	rjmp	8000840c <__avr32_f64_mul+0x30>
800084f0:	f0 05 09 49 	lsl	r9,r8,r5
800084f4:	c4 20       	breq	80008578 <__avr32_f64_mul_res_zero>
800084f6:	30 08       	mov	r8,0
800084f8:	20 25       	sub	r5,2
800084fa:	0a 16       	sub	r6,r5
800084fc:	c8 8b       	rjmp	8000840c <__avr32_f64_mul+0x30>

800084fe <__avr32_f64_mul_op_nan_or_inf>:
800084fe:	e4 19 00 0f 	andh	r9,0xf
80008502:	e4 1b 00 0f 	andh	r11,0xf
80008506:	14 4b       	or	r11,r10
80008508:	10 49       	or	r9,r8
8000850a:	e0 47 07 ff 	cp.w	r7,2047
8000850e:	c0 91       	brne	80008520 <__avr32_f64_mul_op1_not_naninf>
80008510:	58 0b       	cp.w	r11,0
80008512:	c3 81       	brne	80008582 <__avr32_f64_mul_res_nan>
80008514:	e0 46 07 ff 	cp.w	r6,2047
80008518:	c3 81       	brne	80008588 <__avr32_f64_mul_res_inf>
8000851a:	58 09       	cp.w	r9,0
8000851c:	c3 60       	breq	80008588 <__avr32_f64_mul_res_inf>
8000851e:	c3 28       	rjmp	80008582 <__avr32_f64_mul_res_nan>

80008520 <__avr32_f64_mul_op1_not_naninf>:
80008520:	58 09       	cp.w	r9,0
80008522:	c3 30       	breq	80008588 <__avr32_f64_mul_res_inf>
80008524:	c2 f8       	rjmp	80008582 <__avr32_f64_mul_res_nan>

80008526 <__avr32_f64_mul_res_subnormal>:
80008526:	5c 3c       	neg	r12
80008528:	2f fc       	sub	r12,-1
8000852a:	f1 bc 04 c0 	satu	r12,0x6
8000852e:	e0 4c 00 20 	cp.w	r12,32
80008532:	c1 14       	brge	80008554 <__avr32_f64_mul_res_subnormal+0x2e>
80008534:	f8 08 11 20 	rsub	r8,r12,32
80008538:	0e 46       	or	r6,r7
8000853a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000853e:	f4 08 09 49 	lsl	r9,r10,r8
80008542:	12 47       	or	r7,r9
80008544:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008548:	f6 08 09 49 	lsl	r9,r11,r8
8000854c:	12 4a       	or	r10,r9
8000854e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008552:	c8 3b       	rjmp	80008458 <__avr32_f64_mul+0x7c>
80008554:	f8 08 11 20 	rsub	r8,r12,32
80008558:	f9 b9 00 00 	moveq	r9,0
8000855c:	c0 30       	breq	80008562 <__avr32_f64_mul_res_subnormal+0x3c>
8000855e:	f6 08 09 49 	lsl	r9,r11,r8
80008562:	0e 46       	or	r6,r7
80008564:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008568:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000856c:	f3 ea 10 07 	or	r7,r9,r10
80008570:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008574:	30 0b       	mov	r11,0
80008576:	c7 1b       	rjmp	80008458 <__avr32_f64_mul+0x7c>

80008578 <__avr32_f64_mul_res_zero>:
80008578:	1c 9b       	mov	r11,lr
8000857a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000857e:	30 0a       	mov	r10,0
80008580:	d8 22       	popm	r4-r7,pc

80008582 <__avr32_f64_mul_res_nan>:
80008582:	3f fb       	mov	r11,-1
80008584:	3f fa       	mov	r10,-1
80008586:	d8 22       	popm	r4-r7,pc

80008588 <__avr32_f64_mul_res_inf>:
80008588:	f0 6b 00 00 	mov	r11,-1048576
8000858c:	ed be 00 1f 	bld	lr,0x1f
80008590:	ef bb 00 1f 	bst	r11,0x1f
80008594:	30 0a       	mov	r10,0
80008596:	d8 22       	popm	r4-r7,pc

80008598 <__avr32_f64_mul_op1_zero>:
80008598:	f7 e9 20 0b 	eor	r11,r11,r9
8000859c:	e6 1b 80 00 	andh	r11,0x8000,COH
800085a0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800085a4:	e0 4c 07 ff 	cp.w	r12,2047
800085a8:	5e 1c       	retne	r12
800085aa:	3f fa       	mov	r10,-1
800085ac:	3f fb       	mov	r11,-1
800085ae:	5e fc       	retal	r12

800085b0 <__avr32_f64_sub_from_add>:
800085b0:	ee 19 80 00 	eorh	r9,0x8000

800085b4 <__avr32_f64_sub>:
800085b4:	f7 e9 20 0c 	eor	r12,r11,r9
800085b8:	e0 86 00 ca 	brmi	8000874c <__avr32_f64_add_from_sub>
800085bc:	eb cd 40 e0 	pushm	r5-r7,lr
800085c0:	16 9c       	mov	r12,r11
800085c2:	e6 1c 80 00 	andh	r12,0x8000,COH
800085c6:	bf db       	cbr	r11,0x1f
800085c8:	bf d9       	cbr	r9,0x1f
800085ca:	10 3a       	cp.w	r10,r8
800085cc:	f2 0b 13 00 	cpc	r11,r9
800085d0:	c0 92       	brcc	800085e2 <__avr32_f64_sub+0x2e>
800085d2:	16 97       	mov	r7,r11
800085d4:	12 9b       	mov	r11,r9
800085d6:	0e 99       	mov	r9,r7
800085d8:	14 97       	mov	r7,r10
800085da:	10 9a       	mov	r10,r8
800085dc:	0e 98       	mov	r8,r7
800085de:	ee 1c 80 00 	eorh	r12,0x8000
800085e2:	f6 07 16 14 	lsr	r7,r11,0x14
800085e6:	ab 7b       	lsl	r11,0xb
800085e8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800085ec:	ab 7a       	lsl	r10,0xb
800085ee:	bf bb       	sbr	r11,0x1f
800085f0:	f2 06 16 14 	lsr	r6,r9,0x14
800085f4:	c4 40       	breq	8000867c <__avr32_f64_sub_opL_subnormal>
800085f6:	ab 79       	lsl	r9,0xb
800085f8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800085fc:	ab 78       	lsl	r8,0xb
800085fe:	bf b9       	sbr	r9,0x1f

80008600 <__avr32_f64_sub_opL_subnormal_done>:
80008600:	e0 47 07 ff 	cp.w	r7,2047
80008604:	c4 f0       	breq	800086a2 <__avr32_f64_sub_opH_nan_or_inf>
80008606:	0e 26       	rsub	r6,r7
80008608:	c1 20       	breq	8000862c <__avr32_f64_sub_shift_done>
8000860a:	ec 05 11 20 	rsub	r5,r6,32
8000860e:	e0 46 00 20 	cp.w	r6,32
80008612:	c7 c2       	brcc	8000870a <__avr32_f64_sub_longshift>
80008614:	f0 05 09 4e 	lsl	lr,r8,r5
80008618:	f2 05 09 45 	lsl	r5,r9,r5
8000861c:	f0 06 0a 48 	lsr	r8,r8,r6
80008620:	f2 06 0a 49 	lsr	r9,r9,r6
80008624:	0a 48       	or	r8,r5
80008626:	58 0e       	cp.w	lr,0
80008628:	5f 1e       	srne	lr
8000862a:	1c 48       	or	r8,lr

8000862c <__avr32_f64_sub_shift_done>:
8000862c:	10 1a       	sub	r10,r8
8000862e:	f6 09 01 4b 	sbc	r11,r11,r9
80008632:	f6 06 12 00 	clz	r6,r11
80008636:	c0 e0       	breq	80008652 <__avr32_f64_sub_longnormalize_done>
80008638:	c7 83       	brcs	80008728 <__avr32_f64_sub_longnormalize>
8000863a:	ec 0e 11 20 	rsub	lr,r6,32
8000863e:	f6 06 09 4b 	lsl	r11,r11,r6
80008642:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008646:	1c 4b       	or	r11,lr
80008648:	f4 06 09 4a 	lsl	r10,r10,r6
8000864c:	0c 17       	sub	r7,r6
8000864e:	e0 8a 00 39 	brle	800086c0 <__avr32_f64_sub_subnormal_result>

80008652 <__avr32_f64_sub_longnormalize_done>:
80008652:	f4 09 15 15 	lsl	r9,r10,0x15
80008656:	ab 9a       	lsr	r10,0xb
80008658:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000865c:	ab 9b       	lsr	r11,0xb
8000865e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008662:	18 4b       	or	r11,r12

80008664 <__avr32_f64_sub_round>:
80008664:	fc 17 80 00 	movh	r7,0x8000
80008668:	ed ba 00 00 	bld	r10,0x0
8000866c:	f7 b7 01 ff 	subne	r7,-1
80008670:	0e 39       	cp.w	r9,r7
80008672:	5f 29       	srhs	r9
80008674:	12 0a       	add	r10,r9
80008676:	5c 0b       	acr	r11
80008678:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000867c <__avr32_f64_sub_opL_subnormal>:
8000867c:	ab 79       	lsl	r9,0xb
8000867e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008682:	ab 78       	lsl	r8,0xb
80008684:	f3 e8 10 0e 	or	lr,r9,r8
80008688:	f9 b6 01 01 	movne	r6,1
8000868c:	ee 0e 11 00 	rsub	lr,r7,0
80008690:	f9 b7 00 01 	moveq	r7,1
80008694:	ef bb 00 1f 	bst	r11,0x1f
80008698:	f7 ea 10 0e 	or	lr,r11,r10
8000869c:	f9 b7 00 00 	moveq	r7,0
800086a0:	cb 0b       	rjmp	80008600 <__avr32_f64_sub_opL_subnormal_done>

800086a2 <__avr32_f64_sub_opH_nan_or_inf>:
800086a2:	bf db       	cbr	r11,0x1f
800086a4:	f7 ea 10 0e 	or	lr,r11,r10
800086a8:	c0 81       	brne	800086b8 <__avr32_f64_sub_return_nan>
800086aa:	e0 46 07 ff 	cp.w	r6,2047
800086ae:	c0 50       	breq	800086b8 <__avr32_f64_sub_return_nan>
800086b0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800086b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086b8 <__avr32_f64_sub_return_nan>:
800086b8:	3f fa       	mov	r10,-1
800086ba:	3f fb       	mov	r11,-1
800086bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086c0 <__avr32_f64_sub_subnormal_result>:
800086c0:	5c 37       	neg	r7
800086c2:	2f f7       	sub	r7,-1
800086c4:	f1 b7 04 c0 	satu	r7,0x6
800086c8:	e0 47 00 20 	cp.w	r7,32
800086cc:	c1 14       	brge	800086ee <__avr32_f64_sub_subnormal_result+0x2e>
800086ce:	ee 08 11 20 	rsub	r8,r7,32
800086d2:	f4 08 09 49 	lsl	r9,r10,r8
800086d6:	5f 16       	srne	r6
800086d8:	f4 07 0a 4a 	lsr	r10,r10,r7
800086dc:	0c 4a       	or	r10,r6
800086de:	f6 08 09 49 	lsl	r9,r11,r8
800086e2:	f5 e9 10 0a 	or	r10,r10,r9
800086e6:	f4 07 0a 4b 	lsr	r11,r10,r7
800086ea:	30 07       	mov	r7,0
800086ec:	cb 3b       	rjmp	80008652 <__avr32_f64_sub_longnormalize_done>
800086ee:	ee 08 11 40 	rsub	r8,r7,64
800086f2:	f6 08 09 49 	lsl	r9,r11,r8
800086f6:	14 49       	or	r9,r10
800086f8:	5f 16       	srne	r6
800086fa:	f6 07 0a 4a 	lsr	r10,r11,r7
800086fe:	0c 4a       	or	r10,r6
80008700:	30 0b       	mov	r11,0
80008702:	30 07       	mov	r7,0
80008704:	ca 7b       	rjmp	80008652 <__avr32_f64_sub_longnormalize_done>
80008706:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000870a <__avr32_f64_sub_longshift>:
8000870a:	f1 b6 04 c0 	satu	r6,0x6
8000870e:	f0 0e 17 00 	moveq	lr,r8
80008712:	c0 40       	breq	8000871a <__avr32_f64_sub_longshift+0x10>
80008714:	f2 05 09 4e 	lsl	lr,r9,r5
80008718:	10 4e       	or	lr,r8
8000871a:	f2 06 0a 48 	lsr	r8,r9,r6
8000871e:	30 09       	mov	r9,0
80008720:	58 0e       	cp.w	lr,0
80008722:	5f 1e       	srne	lr
80008724:	1c 48       	or	r8,lr
80008726:	c8 3b       	rjmp	8000862c <__avr32_f64_sub_shift_done>

80008728 <__avr32_f64_sub_longnormalize>:
80008728:	f4 06 12 00 	clz	r6,r10
8000872c:	f9 b7 03 00 	movlo	r7,0
80008730:	f9 b6 03 00 	movlo	r6,0
80008734:	f9 bc 03 00 	movlo	r12,0
80008738:	f7 b6 02 e0 	subhs	r6,-32
8000873c:	f4 06 09 4b 	lsl	r11,r10,r6
80008740:	30 0a       	mov	r10,0
80008742:	0c 17       	sub	r7,r6
80008744:	fe 9a ff be 	brle	800086c0 <__avr32_f64_sub_subnormal_result>
80008748:	c8 5b       	rjmp	80008652 <__avr32_f64_sub_longnormalize_done>
8000874a:	d7 03       	nop

8000874c <__avr32_f64_add_from_sub>:
8000874c:	ee 19 80 00 	eorh	r9,0x8000

80008750 <__avr32_f64_add>:
80008750:	f7 e9 20 0c 	eor	r12,r11,r9
80008754:	fe 96 ff 2e 	brmi	800085b0 <__avr32_f64_sub_from_add>
80008758:	eb cd 40 e0 	pushm	r5-r7,lr
8000875c:	16 9c       	mov	r12,r11
8000875e:	e6 1c 80 00 	andh	r12,0x8000,COH
80008762:	bf db       	cbr	r11,0x1f
80008764:	bf d9       	cbr	r9,0x1f
80008766:	12 3b       	cp.w	r11,r9
80008768:	c0 72       	brcc	80008776 <__avr32_f64_add+0x26>
8000876a:	16 97       	mov	r7,r11
8000876c:	12 9b       	mov	r11,r9
8000876e:	0e 99       	mov	r9,r7
80008770:	14 97       	mov	r7,r10
80008772:	10 9a       	mov	r10,r8
80008774:	0e 98       	mov	r8,r7
80008776:	30 0e       	mov	lr,0
80008778:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000877c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008780:	b5 ab       	sbr	r11,0x14
80008782:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008786:	c6 20       	breq	8000884a <__avr32_f64_add_op2_subnormal>
80008788:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000878c:	b5 a9       	sbr	r9,0x14
8000878e:	e0 47 07 ff 	cp.w	r7,2047
80008792:	c2 80       	breq	800087e2 <__avr32_f64_add_opH_nan_or_inf>
80008794:	0e 26       	rsub	r6,r7
80008796:	c1 20       	breq	800087ba <__avr32_f64_add_shift_done>
80008798:	e0 46 00 36 	cp.w	r6,54
8000879c:	c1 52       	brcc	800087c6 <__avr32_f64_add_res_of_done>
8000879e:	ec 05 11 20 	rsub	r5,r6,32
800087a2:	e0 46 00 20 	cp.w	r6,32
800087a6:	c3 52       	brcc	80008810 <__avr32_f64_add_longshift>
800087a8:	f0 05 09 4e 	lsl	lr,r8,r5
800087ac:	f2 05 09 45 	lsl	r5,r9,r5
800087b0:	f0 06 0a 48 	lsr	r8,r8,r6
800087b4:	f2 06 0a 49 	lsr	r9,r9,r6
800087b8:	0a 48       	or	r8,r5

800087ba <__avr32_f64_add_shift_done>:
800087ba:	10 0a       	add	r10,r8
800087bc:	f6 09 00 4b 	adc	r11,r11,r9
800087c0:	ed bb 00 15 	bld	r11,0x15
800087c4:	c3 40       	breq	8000882c <__avr32_f64_add_res_of>

800087c6 <__avr32_f64_add_res_of_done>:
800087c6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800087ca:	18 4b       	or	r11,r12

800087cc <__avr32_f64_add_round>:
800087cc:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800087d0:	18 4e       	or	lr,r12
800087d2:	ee 1e 80 00 	eorh	lr,0x8000
800087d6:	f1 be 04 20 	satu	lr,0x1
800087da:	1c 0a       	add	r10,lr
800087dc:	5c 0b       	acr	r11
800087de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800087e2 <__avr32_f64_add_opH_nan_or_inf>:
800087e2:	b5 cb       	cbr	r11,0x14
800087e4:	f7 ea 10 0e 	or	lr,r11,r10
800087e8:	c1 01       	brne	80008808 <__avr32_f64_add_return_nan>
800087ea:	e0 46 07 ff 	cp.w	r6,2047
800087ee:	c0 30       	breq	800087f4 <__avr32_f64_add_opL_nan_or_inf>
800087f0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800087f4 <__avr32_f64_add_opL_nan_or_inf>:
800087f4:	b5 c9       	cbr	r9,0x14
800087f6:	f3 e8 10 0e 	or	lr,r9,r8
800087fa:	c0 71       	brne	80008808 <__avr32_f64_add_return_nan>
800087fc:	30 0a       	mov	r10,0
800087fe:	fc 1b 7f f0 	movh	r11,0x7ff0
80008802:	18 4b       	or	r11,r12
80008804:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008808 <__avr32_f64_add_return_nan>:
80008808:	3f fa       	mov	r10,-1
8000880a:	3f fb       	mov	r11,-1
8000880c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008810 <__avr32_f64_add_longshift>:
80008810:	f1 b6 04 c0 	satu	r6,0x6
80008814:	f0 0e 17 00 	moveq	lr,r8
80008818:	c0 60       	breq	80008824 <__avr32_f64_add_longshift+0x14>
8000881a:	f2 05 09 4e 	lsl	lr,r9,r5
8000881e:	58 08       	cp.w	r8,0
80008820:	5f 18       	srne	r8
80008822:	10 4e       	or	lr,r8
80008824:	f2 06 0a 48 	lsr	r8,r9,r6
80008828:	30 09       	mov	r9,0
8000882a:	cc 8b       	rjmp	800087ba <__avr32_f64_add_shift_done>

8000882c <__avr32_f64_add_res_of>:
8000882c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008830:	a1 9b       	lsr	r11,0x1
80008832:	5d 0a       	ror	r10
80008834:	5d 0e       	ror	lr
80008836:	2f f7       	sub	r7,-1
80008838:	e0 47 07 ff 	cp.w	r7,2047
8000883c:	f9 ba 00 00 	moveq	r10,0
80008840:	f9 bb 00 00 	moveq	r11,0
80008844:	f9 be 00 00 	moveq	lr,0
80008848:	cb fb       	rjmp	800087c6 <__avr32_f64_add_res_of_done>

8000884a <__avr32_f64_add_op2_subnormal>:
8000884a:	30 16       	mov	r6,1
8000884c:	58 07       	cp.w	r7,0
8000884e:	ca 01       	brne	8000878e <__avr32_f64_add+0x3e>
80008850:	b5 cb       	cbr	r11,0x14
80008852:	10 0a       	add	r10,r8
80008854:	f6 09 00 4b 	adc	r11,r11,r9
80008858:	18 4b       	or	r11,r12
8000885a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000885e:	d7 03       	nop

80008860 <__avr32_f64_to_u32>:
80008860:	58 0b       	cp.w	r11,0
80008862:	5e 6d       	retmi	0

80008864 <__avr32_f64_to_s32>:
80008864:	f6 0c 15 01 	lsl	r12,r11,0x1
80008868:	b5 9c       	lsr	r12,0x15
8000886a:	e0 2c 03 ff 	sub	r12,1023
8000886e:	5e 3d       	retlo	0
80008870:	f8 0c 11 1f 	rsub	r12,r12,31
80008874:	16 99       	mov	r9,r11
80008876:	ab 7b       	lsl	r11,0xb
80008878:	bf bb       	sbr	r11,0x1f
8000887a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000887e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008882:	a1 79       	lsl	r9,0x1
80008884:	5e 2b       	reths	r11
80008886:	5c 3b       	neg	r11
80008888:	5e fb       	retal	r11

8000888a <__avr32_u32_to_f64>:
8000888a:	f8 cb 00 00 	sub	r11,r12,0
8000888e:	30 0c       	mov	r12,0
80008890:	c0 38       	rjmp	80008896 <__avr32_s32_to_f64+0x4>

80008892 <__avr32_s32_to_f64>:
80008892:	18 9b       	mov	r11,r12
80008894:	5c 4b       	abs	r11
80008896:	30 0a       	mov	r10,0
80008898:	5e 0b       	reteq	r11
8000889a:	d4 01       	pushm	lr
8000889c:	e0 69 04 1e 	mov	r9,1054
800088a0:	f6 08 12 00 	clz	r8,r11
800088a4:	c1 70       	breq	800088d2 <__avr32_s32_to_f64+0x40>
800088a6:	c0 c3       	brcs	800088be <__avr32_s32_to_f64+0x2c>
800088a8:	f0 0e 11 20 	rsub	lr,r8,32
800088ac:	f6 08 09 4b 	lsl	r11,r11,r8
800088b0:	f4 0e 0a 4e 	lsr	lr,r10,lr
800088b4:	1c 4b       	or	r11,lr
800088b6:	f4 08 09 4a 	lsl	r10,r10,r8
800088ba:	10 19       	sub	r9,r8
800088bc:	c0 b8       	rjmp	800088d2 <__avr32_s32_to_f64+0x40>
800088be:	f4 08 12 00 	clz	r8,r10
800088c2:	f9 b8 03 00 	movlo	r8,0
800088c6:	f7 b8 02 e0 	subhs	r8,-32
800088ca:	f4 08 09 4b 	lsl	r11,r10,r8
800088ce:	30 0a       	mov	r10,0
800088d0:	10 19       	sub	r9,r8
800088d2:	58 09       	cp.w	r9,0
800088d4:	e0 89 00 30 	brgt	80008934 <__avr32_s32_to_f64+0xa2>
800088d8:	5c 39       	neg	r9
800088da:	2f f9       	sub	r9,-1
800088dc:	e0 49 00 36 	cp.w	r9,54
800088e0:	c0 43       	brcs	800088e8 <__avr32_s32_to_f64+0x56>
800088e2:	30 0b       	mov	r11,0
800088e4:	30 0a       	mov	r10,0
800088e6:	c2 68       	rjmp	80008932 <__avr32_s32_to_f64+0xa0>
800088e8:	2f 69       	sub	r9,-10
800088ea:	f2 08 11 20 	rsub	r8,r9,32
800088ee:	e0 49 00 20 	cp.w	r9,32
800088f2:	c0 b2       	brcc	80008908 <__avr32_s32_to_f64+0x76>
800088f4:	f4 08 09 4e 	lsl	lr,r10,r8
800088f8:	f6 08 09 48 	lsl	r8,r11,r8
800088fc:	f4 09 0a 4a 	lsr	r10,r10,r9
80008900:	f6 09 0a 4b 	lsr	r11,r11,r9
80008904:	10 4b       	or	r11,r8
80008906:	c0 88       	rjmp	80008916 <__avr32_s32_to_f64+0x84>
80008908:	f6 08 09 4e 	lsl	lr,r11,r8
8000890c:	14 4e       	or	lr,r10
8000890e:	16 9a       	mov	r10,r11
80008910:	30 0b       	mov	r11,0
80008912:	f4 09 0a 4a 	lsr	r10,r10,r9
80008916:	ed ba 00 00 	bld	r10,0x0
8000891a:	c0 92       	brcc	8000892c <__avr32_s32_to_f64+0x9a>
8000891c:	1c 7e       	tst	lr,lr
8000891e:	c0 41       	brne	80008926 <__avr32_s32_to_f64+0x94>
80008920:	ed ba 00 01 	bld	r10,0x1
80008924:	c0 42       	brcc	8000892c <__avr32_s32_to_f64+0x9a>
80008926:	2f fa       	sub	r10,-1
80008928:	f7 bb 02 ff 	subhs	r11,-1
8000892c:	5c fc       	rol	r12
8000892e:	5d 0b       	ror	r11
80008930:	5d 0a       	ror	r10
80008932:	d8 02       	popm	pc
80008934:	e0 68 03 ff 	mov	r8,1023
80008938:	ed ba 00 0b 	bld	r10,0xb
8000893c:	f7 b8 00 ff 	subeq	r8,-1
80008940:	10 0a       	add	r10,r8
80008942:	5c 0b       	acr	r11
80008944:	f7 b9 03 fe 	sublo	r9,-2
80008948:	e0 49 07 ff 	cp.w	r9,2047
8000894c:	c0 55       	brlt	80008956 <__avr32_s32_to_f64+0xc4>
8000894e:	30 0a       	mov	r10,0
80008950:	fc 1b ff e0 	movh	r11,0xffe0
80008954:	c0 c8       	rjmp	8000896c <__floatsidf_return_op1>
80008956:	ed bb 00 1f 	bld	r11,0x1f
8000895a:	f7 b9 01 01 	subne	r9,1
8000895e:	ab 9a       	lsr	r10,0xb
80008960:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008964:	a1 7b       	lsl	r11,0x1
80008966:	ab 9b       	lsr	r11,0xb
80008968:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000896c <__floatsidf_return_op1>:
8000896c:	a1 7c       	lsl	r12,0x1
8000896e:	5d 0b       	ror	r11
80008970:	d8 02       	popm	pc

80008972 <__avr32_f64_cmp_eq>:
80008972:	10 3a       	cp.w	r10,r8
80008974:	f2 0b 13 00 	cpc	r11,r9
80008978:	c0 80       	breq	80008988 <__avr32_f64_cmp_eq+0x16>
8000897a:	a1 7b       	lsl	r11,0x1
8000897c:	a1 79       	lsl	r9,0x1
8000897e:	14 4b       	or	r11,r10
80008980:	12 4b       	or	r11,r9
80008982:	10 4b       	or	r11,r8
80008984:	5e 0f       	reteq	1
80008986:	5e fd       	retal	0
80008988:	a1 7b       	lsl	r11,0x1
8000898a:	fc 1c ff e0 	movh	r12,0xffe0
8000898e:	58 0a       	cp.w	r10,0
80008990:	f8 0b 13 00 	cpc	r11,r12
80008994:	5e 8f       	retls	1
80008996:	5e fd       	retal	0

80008998 <__avr32_f64_cmp_ge>:
80008998:	1a de       	st.w	--sp,lr
8000899a:	1a d7       	st.w	--sp,r7
8000899c:	a1 7b       	lsl	r11,0x1
8000899e:	5f 3c       	srlo	r12
800089a0:	a1 79       	lsl	r9,0x1
800089a2:	5f 37       	srlo	r7
800089a4:	5c fc       	rol	r12
800089a6:	fc 1e ff e0 	movh	lr,0xffe0
800089aa:	58 0a       	cp.w	r10,0
800089ac:	fc 0b 13 00 	cpc	r11,lr
800089b0:	e0 8b 00 1d 	brhi	800089ea <__avr32_f64_cmp_ge+0x52>
800089b4:	58 08       	cp.w	r8,0
800089b6:	fc 09 13 00 	cpc	r9,lr
800089ba:	e0 8b 00 18 	brhi	800089ea <__avr32_f64_cmp_ge+0x52>
800089be:	58 0b       	cp.w	r11,0
800089c0:	f5 ba 00 00 	subfeq	r10,0
800089c4:	c1 50       	breq	800089ee <__avr32_f64_cmp_ge+0x56>
800089c6:	1b 07       	ld.w	r7,sp++
800089c8:	1b 0e       	ld.w	lr,sp++
800089ca:	58 3c       	cp.w	r12,3
800089cc:	c0 a0       	breq	800089e0 <__avr32_f64_cmp_ge+0x48>
800089ce:	58 1c       	cp.w	r12,1
800089d0:	c0 33       	brcs	800089d6 <__avr32_f64_cmp_ge+0x3e>
800089d2:	5e 0f       	reteq	1
800089d4:	5e 1d       	retne	0
800089d6:	10 3a       	cp.w	r10,r8
800089d8:	f2 0b 13 00 	cpc	r11,r9
800089dc:	5e 2f       	reths	1
800089de:	5e 3d       	retlo	0
800089e0:	14 38       	cp.w	r8,r10
800089e2:	f6 09 13 00 	cpc	r9,r11
800089e6:	5e 2f       	reths	1
800089e8:	5e 3d       	retlo	0
800089ea:	1b 07       	ld.w	r7,sp++
800089ec:	d8 0a       	popm	pc,r12=0
800089ee:	58 17       	cp.w	r7,1
800089f0:	5f 0c       	sreq	r12
800089f2:	58 09       	cp.w	r9,0
800089f4:	f5 b8 00 00 	subfeq	r8,0
800089f8:	1b 07       	ld.w	r7,sp++
800089fa:	1b 0e       	ld.w	lr,sp++
800089fc:	5e 0f       	reteq	1
800089fe:	5e fc       	retal	r12

80008a00 <__avr32_f64_cmp_lt>:
80008a00:	1a de       	st.w	--sp,lr
80008a02:	1a d7       	st.w	--sp,r7
80008a04:	a1 7b       	lsl	r11,0x1
80008a06:	5f 3c       	srlo	r12
80008a08:	a1 79       	lsl	r9,0x1
80008a0a:	5f 37       	srlo	r7
80008a0c:	5c fc       	rol	r12
80008a0e:	fc 1e ff e0 	movh	lr,0xffe0
80008a12:	58 0a       	cp.w	r10,0
80008a14:	fc 0b 13 00 	cpc	r11,lr
80008a18:	e0 8b 00 1d 	brhi	80008a52 <__avr32_f64_cmp_lt+0x52>
80008a1c:	58 08       	cp.w	r8,0
80008a1e:	fc 09 13 00 	cpc	r9,lr
80008a22:	e0 8b 00 18 	brhi	80008a52 <__avr32_f64_cmp_lt+0x52>
80008a26:	58 0b       	cp.w	r11,0
80008a28:	f5 ba 00 00 	subfeq	r10,0
80008a2c:	c1 50       	breq	80008a56 <__avr32_f64_cmp_lt+0x56>
80008a2e:	1b 07       	ld.w	r7,sp++
80008a30:	1b 0e       	ld.w	lr,sp++
80008a32:	58 3c       	cp.w	r12,3
80008a34:	c0 a0       	breq	80008a48 <__avr32_f64_cmp_lt+0x48>
80008a36:	58 1c       	cp.w	r12,1
80008a38:	c0 33       	brcs	80008a3e <__avr32_f64_cmp_lt+0x3e>
80008a3a:	5e 0d       	reteq	0
80008a3c:	5e 1f       	retne	1
80008a3e:	10 3a       	cp.w	r10,r8
80008a40:	f2 0b 13 00 	cpc	r11,r9
80008a44:	5e 2d       	reths	0
80008a46:	5e 3f       	retlo	1
80008a48:	14 38       	cp.w	r8,r10
80008a4a:	f6 09 13 00 	cpc	r9,r11
80008a4e:	5e 2d       	reths	0
80008a50:	5e 3f       	retlo	1
80008a52:	1b 07       	ld.w	r7,sp++
80008a54:	d8 0a       	popm	pc,r12=0
80008a56:	58 17       	cp.w	r7,1
80008a58:	5f 1c       	srne	r12
80008a5a:	58 09       	cp.w	r9,0
80008a5c:	f5 b8 00 00 	subfeq	r8,0
80008a60:	1b 07       	ld.w	r7,sp++
80008a62:	1b 0e       	ld.w	lr,sp++
80008a64:	5e 0d       	reteq	0
80008a66:	5e fc       	retal	r12

80008a68 <__avr32_f64_div>:
80008a68:	eb cd 40 ff 	pushm	r0-r7,lr
80008a6c:	f7 e9 20 0e 	eor	lr,r11,r9
80008a70:	f6 07 16 14 	lsr	r7,r11,0x14
80008a74:	a9 7b       	lsl	r11,0x9
80008a76:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008a7a:	a9 7a       	lsl	r10,0x9
80008a7c:	bd bb       	sbr	r11,0x1d
80008a7e:	e4 1b 3f ff 	andh	r11,0x3fff
80008a82:	ab d7       	cbr	r7,0xb
80008a84:	e0 80 00 cc 	breq	80008c1c <__avr32_f64_div_round_subnormal+0x54>
80008a88:	e0 47 07 ff 	cp.w	r7,2047
80008a8c:	e0 84 00 b5 	brge	80008bf6 <__avr32_f64_div_round_subnormal+0x2e>
80008a90:	f2 06 16 14 	lsr	r6,r9,0x14
80008a94:	a9 79       	lsl	r9,0x9
80008a96:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008a9a:	a9 78       	lsl	r8,0x9
80008a9c:	bd b9       	sbr	r9,0x1d
80008a9e:	e4 19 3f ff 	andh	r9,0x3fff
80008aa2:	ab d6       	cbr	r6,0xb
80008aa4:	e0 80 00 e2 	breq	80008c68 <__avr32_f64_div_round_subnormal+0xa0>
80008aa8:	e0 46 07 ff 	cp.w	r6,2047
80008aac:	e0 84 00 b2 	brge	80008c10 <__avr32_f64_div_round_subnormal+0x48>
80008ab0:	0c 17       	sub	r7,r6
80008ab2:	fe 37 fc 01 	sub	r7,-1023
80008ab6:	fc 1c 80 00 	movh	r12,0x8000
80008aba:	f8 03 16 01 	lsr	r3,r12,0x1
80008abe:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008ac2:	5c d4       	com	r4
80008ac4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008ac8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008acc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008ad0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008ad4:	ea 03 15 02 	lsl	r3,r5,0x2
80008ad8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008adc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008ae0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008ae4:	ea 03 15 02 	lsl	r3,r5,0x2
80008ae8:	e6 09 06 44 	mulu.d	r4,r3,r9
80008aec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008af0:	e6 05 06 44 	mulu.d	r4,r3,r5
80008af4:	ea 03 15 02 	lsl	r3,r5,0x2
80008af8:	e6 08 06 40 	mulu.d	r0,r3,r8
80008afc:	e4 09 07 40 	macu.d	r0,r2,r9
80008b00:	e6 09 06 44 	mulu.d	r4,r3,r9
80008b04:	02 04       	add	r4,r1
80008b06:	5c 05       	acr	r5
80008b08:	a3 65       	lsl	r5,0x2
80008b0a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008b0e:	a3 64       	lsl	r4,0x2
80008b10:	5c 34       	neg	r4
80008b12:	f8 05 01 45 	sbc	r5,r12,r5
80008b16:	e6 04 06 40 	mulu.d	r0,r3,r4
80008b1a:	e4 05 07 40 	macu.d	r0,r2,r5
80008b1e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008b22:	02 04       	add	r4,r1
80008b24:	5c 05       	acr	r5
80008b26:	ea 03 15 02 	lsl	r3,r5,0x2
80008b2a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008b2e:	e8 02 15 02 	lsl	r2,r4,0x2
80008b32:	e6 08 06 40 	mulu.d	r0,r3,r8
80008b36:	e4 09 07 40 	macu.d	r0,r2,r9
80008b3a:	e6 09 06 44 	mulu.d	r4,r3,r9
80008b3e:	02 04       	add	r4,r1
80008b40:	5c 05       	acr	r5
80008b42:	a3 65       	lsl	r5,0x2
80008b44:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008b48:	a3 64       	lsl	r4,0x2
80008b4a:	5c 34       	neg	r4
80008b4c:	f8 05 01 45 	sbc	r5,r12,r5
80008b50:	e6 04 06 40 	mulu.d	r0,r3,r4
80008b54:	e4 05 07 40 	macu.d	r0,r2,r5
80008b58:	e6 05 06 44 	mulu.d	r4,r3,r5
80008b5c:	02 04       	add	r4,r1
80008b5e:	5c 05       	acr	r5
80008b60:	ea 03 15 02 	lsl	r3,r5,0x2
80008b64:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008b68:	e8 02 15 02 	lsl	r2,r4,0x2
80008b6c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008b70:	e4 0b 07 40 	macu.d	r0,r2,r11
80008b74:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008b78:	02 02       	add	r2,r1
80008b7a:	5c 03       	acr	r3
80008b7c:	ed b3 00 1c 	bld	r3,0x1c
80008b80:	c0 90       	breq	80008b92 <__avr32_f64_div+0x12a>
80008b82:	a1 72       	lsl	r2,0x1
80008b84:	5c f3       	rol	r3
80008b86:	20 17       	sub	r7,1
80008b88:	a3 9a       	lsr	r10,0x3
80008b8a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008b8e:	a3 9b       	lsr	r11,0x3
80008b90:	c0 58       	rjmp	80008b9a <__avr32_f64_div+0x132>
80008b92:	a5 8a       	lsr	r10,0x4
80008b94:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008b98:	a5 8b       	lsr	r11,0x4
80008b9a:	58 07       	cp.w	r7,0
80008b9c:	e0 8a 00 8b 	brle	80008cb2 <__avr32_f64_div_res_subnormal>
80008ba0:	e0 12 ff 00 	andl	r2,0xff00
80008ba4:	e8 12 00 80 	orl	r2,0x80
80008ba8:	e6 08 06 40 	mulu.d	r0,r3,r8
80008bac:	e4 09 07 40 	macu.d	r0,r2,r9
80008bb0:	e4 08 06 44 	mulu.d	r4,r2,r8
80008bb4:	e6 09 06 48 	mulu.d	r8,r3,r9
80008bb8:	00 05       	add	r5,r0
80008bba:	f0 01 00 48 	adc	r8,r8,r1
80008bbe:	5c 09       	acr	r9
80008bc0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008bc4:	58 04       	cp.w	r4,0
80008bc6:	5c 25       	cpc	r5

80008bc8 <__avr32_f64_div_round_subnormal>:
80008bc8:	f4 08 13 00 	cpc	r8,r10
80008bcc:	f6 09 13 00 	cpc	r9,r11
80008bd0:	5f 36       	srlo	r6
80008bd2:	f8 06 17 00 	moveq	r6,r12
80008bd6:	e4 0a 16 08 	lsr	r10,r2,0x8
80008bda:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008bde:	e6 0b 16 08 	lsr	r11,r3,0x8
80008be2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008be6:	ed be 00 1f 	bld	lr,0x1f
80008bea:	ef bb 00 1f 	bst	r11,0x1f
80008bee:	0c 0a       	add	r10,r6
80008bf0:	5c 0b       	acr	r11
80008bf2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008bf6:	e4 1b 00 0f 	andh	r11,0xf
80008bfa:	14 4b       	or	r11,r10
80008bfc:	e0 81 00 a7 	brne	80008d4a <__avr32_f64_div_res_subnormal+0x98>
80008c00:	f2 06 16 14 	lsr	r6,r9,0x14
80008c04:	ab d6       	cbr	r6,0xb
80008c06:	e0 46 07 ff 	cp.w	r6,2047
80008c0a:	e0 81 00 a4 	brne	80008d52 <__avr32_f64_div_res_subnormal+0xa0>
80008c0e:	c9 e8       	rjmp	80008d4a <__avr32_f64_div_res_subnormal+0x98>
80008c10:	e4 19 00 0f 	andh	r9,0xf
80008c14:	10 49       	or	r9,r8
80008c16:	e0 81 00 9a 	brne	80008d4a <__avr32_f64_div_res_subnormal+0x98>
80008c1a:	c9 28       	rjmp	80008d3e <__avr32_f64_div_res_subnormal+0x8c>
80008c1c:	a3 7b       	lsl	r11,0x3
80008c1e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008c22:	a3 7a       	lsl	r10,0x3
80008c24:	f5 eb 10 04 	or	r4,r10,r11
80008c28:	e0 80 00 a0 	breq	80008d68 <__avr32_f64_div_op1_zero>
80008c2c:	f6 04 12 00 	clz	r4,r11
80008c30:	c1 70       	breq	80008c5e <__avr32_f64_div_round_subnormal+0x96>
80008c32:	c0 c3       	brcs	80008c4a <__avr32_f64_div_round_subnormal+0x82>
80008c34:	e8 05 11 20 	rsub	r5,r4,32
80008c38:	f6 04 09 4b 	lsl	r11,r11,r4
80008c3c:	f4 05 0a 45 	lsr	r5,r10,r5
80008c40:	0a 4b       	or	r11,r5
80008c42:	f4 04 09 4a 	lsl	r10,r10,r4
80008c46:	08 17       	sub	r7,r4
80008c48:	c0 b8       	rjmp	80008c5e <__avr32_f64_div_round_subnormal+0x96>
80008c4a:	f4 04 12 00 	clz	r4,r10
80008c4e:	f9 b4 03 00 	movlo	r4,0
80008c52:	f7 b4 02 e0 	subhs	r4,-32
80008c56:	f4 04 09 4b 	lsl	r11,r10,r4
80008c5a:	30 0a       	mov	r10,0
80008c5c:	08 17       	sub	r7,r4
80008c5e:	a3 8a       	lsr	r10,0x2
80008c60:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008c64:	a3 8b       	lsr	r11,0x2
80008c66:	c1 1b       	rjmp	80008a88 <__avr32_f64_div+0x20>
80008c68:	a3 79       	lsl	r9,0x3
80008c6a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008c6e:	a3 78       	lsl	r8,0x3
80008c70:	f3 e8 10 04 	or	r4,r9,r8
80008c74:	c6 f0       	breq	80008d52 <__avr32_f64_div_res_subnormal+0xa0>
80008c76:	f2 04 12 00 	clz	r4,r9
80008c7a:	c1 70       	breq	80008ca8 <__avr32_f64_div_round_subnormal+0xe0>
80008c7c:	c0 c3       	brcs	80008c94 <__avr32_f64_div_round_subnormal+0xcc>
80008c7e:	e8 05 11 20 	rsub	r5,r4,32
80008c82:	f2 04 09 49 	lsl	r9,r9,r4
80008c86:	f0 05 0a 45 	lsr	r5,r8,r5
80008c8a:	0a 49       	or	r9,r5
80008c8c:	f0 04 09 48 	lsl	r8,r8,r4
80008c90:	08 16       	sub	r6,r4
80008c92:	c0 b8       	rjmp	80008ca8 <__avr32_f64_div_round_subnormal+0xe0>
80008c94:	f0 04 12 00 	clz	r4,r8
80008c98:	f9 b4 03 00 	movlo	r4,0
80008c9c:	f7 b4 02 e0 	subhs	r4,-32
80008ca0:	f0 04 09 49 	lsl	r9,r8,r4
80008ca4:	30 08       	mov	r8,0
80008ca6:	08 16       	sub	r6,r4
80008ca8:	a3 88       	lsr	r8,0x2
80008caa:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008cae:	a3 89       	lsr	r9,0x2
80008cb0:	cf ca       	rjmp	80008aa8 <__avr32_f64_div+0x40>

80008cb2 <__avr32_f64_div_res_subnormal>:
80008cb2:	5c 37       	neg	r7
80008cb4:	2f f7       	sub	r7,-1
80008cb6:	f1 b7 04 c0 	satu	r7,0x6
80008cba:	e0 47 00 20 	cp.w	r7,32
80008cbe:	c1 54       	brge	80008ce8 <__avr32_f64_div_res_subnormal+0x36>
80008cc0:	ee 06 11 20 	rsub	r6,r7,32
80008cc4:	e4 07 0a 42 	lsr	r2,r2,r7
80008cc8:	e6 06 09 4c 	lsl	r12,r3,r6
80008ccc:	18 42       	or	r2,r12
80008cce:	e6 07 0a 43 	lsr	r3,r3,r7
80008cd2:	f4 06 09 41 	lsl	r1,r10,r6
80008cd6:	f4 07 0a 4a 	lsr	r10,r10,r7
80008cda:	f6 06 09 4c 	lsl	r12,r11,r6
80008cde:	18 4a       	or	r10,r12
80008ce0:	f6 07 0a 4b 	lsr	r11,r11,r7
80008ce4:	30 00       	mov	r0,0
80008ce6:	c1 58       	rjmp	80008d10 <__avr32_f64_div_res_subnormal+0x5e>
80008ce8:	ee 06 11 20 	rsub	r6,r7,32
80008cec:	f9 b0 00 00 	moveq	r0,0
80008cf0:	f9 bc 00 00 	moveq	r12,0
80008cf4:	c0 50       	breq	80008cfe <__avr32_f64_div_res_subnormal+0x4c>
80008cf6:	f4 06 09 40 	lsl	r0,r10,r6
80008cfa:	f6 06 09 4c 	lsl	r12,r11,r6
80008cfe:	e6 07 0a 42 	lsr	r2,r3,r7
80008d02:	30 03       	mov	r3,0
80008d04:	f4 07 0a 41 	lsr	r1,r10,r7
80008d08:	18 41       	or	r1,r12
80008d0a:	f6 07 0a 4a 	lsr	r10,r11,r7
80008d0e:	30 0b       	mov	r11,0
80008d10:	e0 12 ff 00 	andl	r2,0xff00
80008d14:	e8 12 00 80 	orl	r2,0x80
80008d18:	e6 08 06 46 	mulu.d	r6,r3,r8
80008d1c:	e4 09 07 46 	macu.d	r6,r2,r9
80008d20:	e4 08 06 44 	mulu.d	r4,r2,r8
80008d24:	e6 09 06 48 	mulu.d	r8,r3,r9
80008d28:	0c 05       	add	r5,r6
80008d2a:	f0 07 00 48 	adc	r8,r8,r7
80008d2e:	5c 09       	acr	r9
80008d30:	30 07       	mov	r7,0
80008d32:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008d36:	00 34       	cp.w	r4,r0
80008d38:	e2 05 13 00 	cpc	r5,r1
80008d3c:	c4 6b       	rjmp	80008bc8 <__avr32_f64_div_round_subnormal>
80008d3e:	1c 9b       	mov	r11,lr
80008d40:	e6 1b 80 00 	andh	r11,0x8000,COH
80008d44:	30 0a       	mov	r10,0
80008d46:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008d4a:	3f fb       	mov	r11,-1
80008d4c:	30 0a       	mov	r10,0
80008d4e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008d52:	f5 eb 10 04 	or	r4,r10,r11
80008d56:	c0 90       	breq	80008d68 <__avr32_f64_div_op1_zero>
80008d58:	1c 9b       	mov	r11,lr
80008d5a:	e6 1b 80 00 	andh	r11,0x8000,COH
80008d5e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008d62:	30 0a       	mov	r10,0
80008d64:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008d68 <__avr32_f64_div_op1_zero>:
80008d68:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008d6c:	ce f0       	breq	80008d4a <__avr32_f64_div_res_subnormal+0x98>
80008d6e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008d72:	e0 44 07 ff 	cp.w	r4,2047
80008d76:	ce 41       	brne	80008d3e <__avr32_f64_div_res_subnormal+0x8c>
80008d78:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008d7c:	ce 10       	breq	80008d3e <__avr32_f64_div_res_subnormal+0x8c>
80008d7e:	ce 6b       	rjmp	80008d4a <__avr32_f64_div_res_subnormal+0x98>

80008d80 <__avr32_udiv64>:
80008d80:	d4 31       	pushm	r0-r7,lr
80008d82:	1a 97       	mov	r7,sp
80008d84:	20 3d       	sub	sp,12
80008d86:	10 9c       	mov	r12,r8
80008d88:	12 9e       	mov	lr,r9
80008d8a:	14 93       	mov	r3,r10
80008d8c:	58 09       	cp.w	r9,0
80008d8e:	e0 81 00 bd 	brne	80008f08 <__avr32_udiv64+0x188>
80008d92:	16 38       	cp.w	r8,r11
80008d94:	e0 88 00 40 	brls	80008e14 <__avr32_udiv64+0x94>
80008d98:	f0 08 12 00 	clz	r8,r8
80008d9c:	c0 d0       	breq	80008db6 <__avr32_udiv64+0x36>
80008d9e:	f6 08 09 4b 	lsl	r11,r11,r8
80008da2:	f0 09 11 20 	rsub	r9,r8,32
80008da6:	f8 08 09 4c 	lsl	r12,r12,r8
80008daa:	f4 09 0a 49 	lsr	r9,r10,r9
80008dae:	f4 08 09 43 	lsl	r3,r10,r8
80008db2:	f3 eb 10 0b 	or	r11,r9,r11
80008db6:	f8 0e 16 10 	lsr	lr,r12,0x10
80008dba:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008dbe:	f6 0e 0d 00 	divu	r0,r11,lr
80008dc2:	e6 0b 16 10 	lsr	r11,r3,0x10
80008dc6:	00 99       	mov	r9,r0
80008dc8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008dcc:	e0 0a 02 48 	mul	r8,r0,r10
80008dd0:	10 3b       	cp.w	r11,r8
80008dd2:	c0 a2       	brcc	80008de6 <__avr32_udiv64+0x66>
80008dd4:	20 19       	sub	r9,1
80008dd6:	18 0b       	add	r11,r12
80008dd8:	18 3b       	cp.w	r11,r12
80008dda:	c0 63       	brcs	80008de6 <__avr32_udiv64+0x66>
80008ddc:	10 3b       	cp.w	r11,r8
80008dde:	f7 b9 03 01 	sublo	r9,1
80008de2:	f7 dc e3 0b 	addcs	r11,r11,r12
80008de6:	f6 08 01 01 	sub	r1,r11,r8
80008dea:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008dee:	e2 0e 0d 00 	divu	r0,r1,lr
80008df2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008df6:	00 98       	mov	r8,r0
80008df8:	e0 0a 02 4a 	mul	r10,r0,r10
80008dfc:	14 33       	cp.w	r3,r10
80008dfe:	c0 82       	brcc	80008e0e <__avr32_udiv64+0x8e>
80008e00:	20 18       	sub	r8,1
80008e02:	18 03       	add	r3,r12
80008e04:	18 33       	cp.w	r3,r12
80008e06:	c0 43       	brcs	80008e0e <__avr32_udiv64+0x8e>
80008e08:	14 33       	cp.w	r3,r10
80008e0a:	f7 b8 03 01 	sublo	r8,1
80008e0e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008e12:	cd f8       	rjmp	80008fd0 <__avr32_udiv64+0x250>
80008e14:	58 08       	cp.w	r8,0
80008e16:	c0 51       	brne	80008e20 <__avr32_udiv64+0xa0>
80008e18:	30 19       	mov	r9,1
80008e1a:	f2 08 0d 08 	divu	r8,r9,r8
80008e1e:	10 9c       	mov	r12,r8
80008e20:	f8 06 12 00 	clz	r6,r12
80008e24:	c0 41       	brne	80008e2c <__avr32_udiv64+0xac>
80008e26:	18 1b       	sub	r11,r12
80008e28:	30 19       	mov	r9,1
80008e2a:	c4 08       	rjmp	80008eaa <__avr32_udiv64+0x12a>
80008e2c:	ec 01 11 20 	rsub	r1,r6,32
80008e30:	f4 01 0a 49 	lsr	r9,r10,r1
80008e34:	f8 06 09 4c 	lsl	r12,r12,r6
80008e38:	f6 06 09 48 	lsl	r8,r11,r6
80008e3c:	f6 01 0a 41 	lsr	r1,r11,r1
80008e40:	f3 e8 10 08 	or	r8,r9,r8
80008e44:	f8 03 16 10 	lsr	r3,r12,0x10
80008e48:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008e4c:	e2 03 0d 00 	divu	r0,r1,r3
80008e50:	f0 0b 16 10 	lsr	r11,r8,0x10
80008e54:	00 9e       	mov	lr,r0
80008e56:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008e5a:	e0 05 02 49 	mul	r9,r0,r5
80008e5e:	12 3b       	cp.w	r11,r9
80008e60:	c0 a2       	brcc	80008e74 <__avr32_udiv64+0xf4>
80008e62:	20 1e       	sub	lr,1
80008e64:	18 0b       	add	r11,r12
80008e66:	18 3b       	cp.w	r11,r12
80008e68:	c0 63       	brcs	80008e74 <__avr32_udiv64+0xf4>
80008e6a:	12 3b       	cp.w	r11,r9
80008e6c:	f7 be 03 01 	sublo	lr,1
80008e70:	f7 dc e3 0b 	addcs	r11,r11,r12
80008e74:	12 1b       	sub	r11,r9
80008e76:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008e7a:	f6 03 0d 02 	divu	r2,r11,r3
80008e7e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008e82:	04 99       	mov	r9,r2
80008e84:	e4 05 02 4b 	mul	r11,r2,r5
80008e88:	16 38       	cp.w	r8,r11
80008e8a:	c0 a2       	brcc	80008e9e <__avr32_udiv64+0x11e>
80008e8c:	20 19       	sub	r9,1
80008e8e:	18 08       	add	r8,r12
80008e90:	18 38       	cp.w	r8,r12
80008e92:	c0 63       	brcs	80008e9e <__avr32_udiv64+0x11e>
80008e94:	16 38       	cp.w	r8,r11
80008e96:	f7 b9 03 01 	sublo	r9,1
80008e9a:	f1 dc e3 08 	addcs	r8,r8,r12
80008e9e:	f4 06 09 43 	lsl	r3,r10,r6
80008ea2:	f0 0b 01 0b 	sub	r11,r8,r11
80008ea6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008eaa:	f8 06 16 10 	lsr	r6,r12,0x10
80008eae:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008eb2:	f6 06 0d 00 	divu	r0,r11,r6
80008eb6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008eba:	00 9a       	mov	r10,r0
80008ebc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008ec0:	e0 0e 02 48 	mul	r8,r0,lr
80008ec4:	10 3b       	cp.w	r11,r8
80008ec6:	c0 a2       	brcc	80008eda <__avr32_udiv64+0x15a>
80008ec8:	20 1a       	sub	r10,1
80008eca:	18 0b       	add	r11,r12
80008ecc:	18 3b       	cp.w	r11,r12
80008ece:	c0 63       	brcs	80008eda <__avr32_udiv64+0x15a>
80008ed0:	10 3b       	cp.w	r11,r8
80008ed2:	f7 ba 03 01 	sublo	r10,1
80008ed6:	f7 dc e3 0b 	addcs	r11,r11,r12
80008eda:	f6 08 01 01 	sub	r1,r11,r8
80008ede:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008ee2:	e2 06 0d 00 	divu	r0,r1,r6
80008ee6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008eea:	00 98       	mov	r8,r0
80008eec:	e0 0e 02 4b 	mul	r11,r0,lr
80008ef0:	16 33       	cp.w	r3,r11
80008ef2:	c0 82       	brcc	80008f02 <__avr32_udiv64+0x182>
80008ef4:	20 18       	sub	r8,1
80008ef6:	18 03       	add	r3,r12
80008ef8:	18 33       	cp.w	r3,r12
80008efa:	c0 43       	brcs	80008f02 <__avr32_udiv64+0x182>
80008efc:	16 33       	cp.w	r3,r11
80008efe:	f7 b8 03 01 	sublo	r8,1
80008f02:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008f06:	c6 98       	rjmp	80008fd8 <__avr32_udiv64+0x258>
80008f08:	16 39       	cp.w	r9,r11
80008f0a:	e0 8b 00 65 	brhi	80008fd4 <__avr32_udiv64+0x254>
80008f0e:	f2 09 12 00 	clz	r9,r9
80008f12:	c0 b1       	brne	80008f28 <__avr32_udiv64+0x1a8>
80008f14:	10 3a       	cp.w	r10,r8
80008f16:	5f 2a       	srhs	r10
80008f18:	1c 3b       	cp.w	r11,lr
80008f1a:	5f b8       	srhi	r8
80008f1c:	10 4a       	or	r10,r8
80008f1e:	f2 0a 18 00 	cp.b	r10,r9
80008f22:	c5 90       	breq	80008fd4 <__avr32_udiv64+0x254>
80008f24:	30 18       	mov	r8,1
80008f26:	c5 98       	rjmp	80008fd8 <__avr32_udiv64+0x258>
80008f28:	f0 09 09 46 	lsl	r6,r8,r9
80008f2c:	f2 03 11 20 	rsub	r3,r9,32
80008f30:	fc 09 09 4e 	lsl	lr,lr,r9
80008f34:	f0 03 0a 48 	lsr	r8,r8,r3
80008f38:	f6 09 09 4c 	lsl	r12,r11,r9
80008f3c:	f4 03 0a 42 	lsr	r2,r10,r3
80008f40:	ef 46 ff f4 	st.w	r7[-12],r6
80008f44:	f6 03 0a 43 	lsr	r3,r11,r3
80008f48:	18 42       	or	r2,r12
80008f4a:	f1 ee 10 0c 	or	r12,r8,lr
80008f4e:	f8 01 16 10 	lsr	r1,r12,0x10
80008f52:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008f56:	e6 01 0d 04 	divu	r4,r3,r1
80008f5a:	e4 03 16 10 	lsr	r3,r2,0x10
80008f5e:	08 9e       	mov	lr,r4
80008f60:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008f64:	e8 06 02 48 	mul	r8,r4,r6
80008f68:	10 33       	cp.w	r3,r8
80008f6a:	c0 a2       	brcc	80008f7e <__avr32_udiv64+0x1fe>
80008f6c:	20 1e       	sub	lr,1
80008f6e:	18 03       	add	r3,r12
80008f70:	18 33       	cp.w	r3,r12
80008f72:	c0 63       	brcs	80008f7e <__avr32_udiv64+0x1fe>
80008f74:	10 33       	cp.w	r3,r8
80008f76:	f7 be 03 01 	sublo	lr,1
80008f7a:	e7 dc e3 03 	addcs	r3,r3,r12
80008f7e:	10 13       	sub	r3,r8
80008f80:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008f84:	e6 01 0d 00 	divu	r0,r3,r1
80008f88:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f8c:	00 98       	mov	r8,r0
80008f8e:	e0 06 02 46 	mul	r6,r0,r6
80008f92:	0c 3b       	cp.w	r11,r6
80008f94:	c0 a2       	brcc	80008fa8 <__avr32_udiv64+0x228>
80008f96:	20 18       	sub	r8,1
80008f98:	18 0b       	add	r11,r12
80008f9a:	18 3b       	cp.w	r11,r12
80008f9c:	c0 63       	brcs	80008fa8 <__avr32_udiv64+0x228>
80008f9e:	0c 3b       	cp.w	r11,r6
80008fa0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008fa4:	f7 b8 03 01 	sublo	r8,1
80008fa8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008fac:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008fb0:	0c 1b       	sub	r11,r6
80008fb2:	f0 04 06 42 	mulu.d	r2,r8,r4
80008fb6:	06 95       	mov	r5,r3
80008fb8:	16 35       	cp.w	r5,r11
80008fba:	e0 8b 00 0a 	brhi	80008fce <__avr32_udiv64+0x24e>
80008fbe:	5f 0b       	sreq	r11
80008fc0:	f4 09 09 49 	lsl	r9,r10,r9
80008fc4:	12 32       	cp.w	r2,r9
80008fc6:	5f b9       	srhi	r9
80008fc8:	f7 e9 00 09 	and	r9,r11,r9
80008fcc:	c0 60       	breq	80008fd8 <__avr32_udiv64+0x258>
80008fce:	20 18       	sub	r8,1
80008fd0:	30 09       	mov	r9,0
80008fd2:	c0 38       	rjmp	80008fd8 <__avr32_udiv64+0x258>
80008fd4:	30 09       	mov	r9,0
80008fd6:	12 98       	mov	r8,r9
80008fd8:	10 9a       	mov	r10,r8
80008fda:	12 93       	mov	r3,r9
80008fdc:	10 92       	mov	r2,r8
80008fde:	12 9b       	mov	r11,r9
80008fe0:	2f dd       	sub	sp,-12
80008fe2:	d8 32       	popm	r0-r7,pc

80008fe4 <__avr32_umod64>:
80008fe4:	d4 31       	pushm	r0-r7,lr
80008fe6:	1a 97       	mov	r7,sp
80008fe8:	20 3d       	sub	sp,12
80008fea:	10 9c       	mov	r12,r8
80008fec:	12 95       	mov	r5,r9
80008fee:	14 9e       	mov	lr,r10
80008ff0:	16 91       	mov	r1,r11
80008ff2:	16 96       	mov	r6,r11
80008ff4:	58 09       	cp.w	r9,0
80008ff6:	e0 81 00 81 	brne	800090f8 <__avr32_umod64+0x114>
80008ffa:	16 38       	cp.w	r8,r11
80008ffc:	e0 88 00 12 	brls	80009020 <__avr32_umod64+0x3c>
80009000:	f0 08 12 00 	clz	r8,r8
80009004:	c4 e0       	breq	800090a0 <__avr32_umod64+0xbc>
80009006:	f6 08 09 46 	lsl	r6,r11,r8
8000900a:	f8 08 09 4c 	lsl	r12,r12,r8
8000900e:	f0 0b 11 20 	rsub	r11,r8,32
80009012:	f4 08 09 4e 	lsl	lr,r10,r8
80009016:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000901a:	f7 e6 10 06 	or	r6,r11,r6
8000901e:	c4 18       	rjmp	800090a0 <__avr32_umod64+0xbc>
80009020:	58 08       	cp.w	r8,0
80009022:	c0 51       	brne	8000902c <__avr32_umod64+0x48>
80009024:	30 19       	mov	r9,1
80009026:	f2 08 0d 08 	divu	r8,r9,r8
8000902a:	10 9c       	mov	r12,r8
8000902c:	f8 08 12 00 	clz	r8,r12
80009030:	c0 31       	brne	80009036 <__avr32_umod64+0x52>
80009032:	18 16       	sub	r6,r12
80009034:	c3 68       	rjmp	800090a0 <__avr32_umod64+0xbc>
80009036:	f0 03 11 20 	rsub	r3,r8,32
8000903a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000903e:	f8 08 09 4c 	lsl	r12,r12,r8
80009042:	ec 08 09 49 	lsl	r9,r6,r8
80009046:	ec 03 0a 43 	lsr	r3,r6,r3
8000904a:	f7 e9 10 09 	or	r9,r11,r9
8000904e:	f8 05 16 10 	lsr	r5,r12,0x10
80009052:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009056:	e6 05 0d 02 	divu	r2,r3,r5
8000905a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000905e:	ec 02 02 4b 	mul	r11,r6,r2
80009062:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009066:	16 3e       	cp.w	lr,r11
80009068:	c0 72       	brcc	80009076 <__avr32_umod64+0x92>
8000906a:	18 0e       	add	lr,r12
8000906c:	18 3e       	cp.w	lr,r12
8000906e:	c0 43       	brcs	80009076 <__avr32_umod64+0x92>
80009070:	16 3e       	cp.w	lr,r11
80009072:	fd dc e3 0e 	addcs	lr,lr,r12
80009076:	fc 0b 01 03 	sub	r3,lr,r11
8000907a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000907e:	e6 05 0d 02 	divu	r2,r3,r5
80009082:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009086:	a5 36       	mul	r6,r2
80009088:	0c 39       	cp.w	r9,r6
8000908a:	c0 72       	brcc	80009098 <__avr32_umod64+0xb4>
8000908c:	18 09       	add	r9,r12
8000908e:	18 39       	cp.w	r9,r12
80009090:	c0 43       	brcs	80009098 <__avr32_umod64+0xb4>
80009092:	0c 39       	cp.w	r9,r6
80009094:	f3 dc e3 09 	addcs	r9,r9,r12
80009098:	f2 06 01 06 	sub	r6,r9,r6
8000909c:	f4 08 09 4e 	lsl	lr,r10,r8
800090a0:	f8 0a 16 10 	lsr	r10,r12,0x10
800090a4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800090a8:	ec 0a 0d 02 	divu	r2,r6,r10
800090ac:	fc 09 16 10 	lsr	r9,lr,0x10
800090b0:	ea 02 02 4b 	mul	r11,r5,r2
800090b4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800090b8:	16 39       	cp.w	r9,r11
800090ba:	c0 72       	brcc	800090c8 <__avr32_umod64+0xe4>
800090bc:	18 09       	add	r9,r12
800090be:	18 39       	cp.w	r9,r12
800090c0:	c0 43       	brcs	800090c8 <__avr32_umod64+0xe4>
800090c2:	16 39       	cp.w	r9,r11
800090c4:	f3 dc e3 09 	addcs	r9,r9,r12
800090c8:	f2 0b 01 0b 	sub	r11,r9,r11
800090cc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800090d0:	f6 0a 0d 0a 	divu	r10,r11,r10
800090d4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800090d8:	ea 0a 02 4a 	mul	r10,r5,r10
800090dc:	14 3e       	cp.w	lr,r10
800090de:	c0 72       	brcc	800090ec <__avr32_umod64+0x108>
800090e0:	18 0e       	add	lr,r12
800090e2:	18 3e       	cp.w	lr,r12
800090e4:	c0 43       	brcs	800090ec <__avr32_umod64+0x108>
800090e6:	14 3e       	cp.w	lr,r10
800090e8:	fd dc e3 0e 	addcs	lr,lr,r12
800090ec:	fc 0a 01 0a 	sub	r10,lr,r10
800090f0:	30 0b       	mov	r11,0
800090f2:	f4 08 0a 4a 	lsr	r10,r10,r8
800090f6:	c7 b8       	rjmp	800091ec <__avr32_umod64+0x208>
800090f8:	16 39       	cp.w	r9,r11
800090fa:	e0 8b 00 79 	brhi	800091ec <__avr32_umod64+0x208>
800090fe:	f2 09 12 00 	clz	r9,r9
80009102:	c1 21       	brne	80009126 <__avr32_umod64+0x142>
80009104:	10 3a       	cp.w	r10,r8
80009106:	5f 2b       	srhs	r11
80009108:	0a 31       	cp.w	r1,r5
8000910a:	5f ba       	srhi	r10
8000910c:	f7 ea 10 0a 	or	r10,r11,r10
80009110:	f2 0a 18 00 	cp.b	r10,r9
80009114:	c0 60       	breq	80009120 <__avr32_umod64+0x13c>
80009116:	fc 08 01 0c 	sub	r12,lr,r8
8000911a:	e2 05 01 46 	sbc	r6,r1,r5
8000911e:	18 9e       	mov	lr,r12
80009120:	0c 9b       	mov	r11,r6
80009122:	1c 9a       	mov	r10,lr
80009124:	c6 48       	rjmp	800091ec <__avr32_umod64+0x208>
80009126:	ea 09 09 4c 	lsl	r12,r5,r9
8000912a:	f2 06 11 20 	rsub	r6,r9,32
8000912e:	f6 09 09 4b 	lsl	r11,r11,r9
80009132:	f0 09 09 42 	lsl	r2,r8,r9
80009136:	ef 46 ff f4 	st.w	r7[-12],r6
8000913a:	f0 06 0a 48 	lsr	r8,r8,r6
8000913e:	18 48       	or	r8,r12
80009140:	e2 06 0a 4c 	lsr	r12,r1,r6
80009144:	f4 09 09 43 	lsl	r3,r10,r9
80009148:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000914c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009150:	16 4a       	or	r10,r11
80009152:	f0 0b 16 10 	lsr	r11,r8,0x10
80009156:	f8 0b 0d 04 	divu	r4,r12,r11
8000915a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000915e:	08 91       	mov	r1,r4
80009160:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009164:	e8 0e 02 46 	mul	r6,r4,lr
80009168:	0c 3c       	cp.w	r12,r6
8000916a:	c0 a2       	brcc	8000917e <__avr32_umod64+0x19a>
8000916c:	20 11       	sub	r1,1
8000916e:	10 0c       	add	r12,r8
80009170:	10 3c       	cp.w	r12,r8
80009172:	c0 63       	brcs	8000917e <__avr32_umod64+0x19a>
80009174:	0c 3c       	cp.w	r12,r6
80009176:	f7 b1 03 01 	sublo	r1,1
8000917a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000917e:	0c 1c       	sub	r12,r6
80009180:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009184:	f8 0b 0d 04 	divu	r4,r12,r11
80009188:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000918c:	08 96       	mov	r6,r4
8000918e:	e8 0e 02 4e 	mul	lr,r4,lr
80009192:	1c 3b       	cp.w	r11,lr
80009194:	c0 a2       	brcc	800091a8 <__avr32_umod64+0x1c4>
80009196:	20 16       	sub	r6,1
80009198:	10 0b       	add	r11,r8
8000919a:	10 3b       	cp.w	r11,r8
8000919c:	c0 63       	brcs	800091a8 <__avr32_umod64+0x1c4>
8000919e:	1c 3b       	cp.w	r11,lr
800091a0:	f7 b6 03 01 	sublo	r6,1
800091a4:	f7 d8 e3 0b 	addcs	r11,r11,r8
800091a8:	ed e1 11 01 	or	r1,r6,r1<<0x10
800091ac:	1c 1b       	sub	r11,lr
800091ae:	e2 02 06 40 	mulu.d	r0,r1,r2
800091b2:	00 9e       	mov	lr,r0
800091b4:	02 9c       	mov	r12,r1
800091b6:	16 3c       	cp.w	r12,r11
800091b8:	e0 8b 00 08 	brhi	800091c8 <__avr32_umod64+0x1e4>
800091bc:	5f 06       	sreq	r6
800091be:	06 30       	cp.w	r0,r3
800091c0:	5f ba       	srhi	r10
800091c2:	ed ea 00 0a 	and	r10,r6,r10
800091c6:	c0 60       	breq	800091d2 <__avr32_umod64+0x1ee>
800091c8:	fc 02 01 04 	sub	r4,lr,r2
800091cc:	f8 08 01 4c 	sbc	r12,r12,r8
800091d0:	08 9e       	mov	lr,r4
800091d2:	e6 0e 01 0a 	sub	r10,r3,lr
800091d6:	f6 0c 01 4c 	sbc	r12,r11,r12
800091da:	ee f1 ff f4 	ld.w	r1,r7[-12]
800091de:	f8 09 0a 4b 	lsr	r11,r12,r9
800091e2:	f4 09 0a 4a 	lsr	r10,r10,r9
800091e6:	f8 01 09 4c 	lsl	r12,r12,r1
800091ea:	18 4a       	or	r10,r12
800091ec:	2f dd       	sub	sp,-12
800091ee:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009200:	c0 08       	rjmp	80009200 <_evba>
	...

80009204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009204:	c0 08       	rjmp	80009204 <_handle_TLB_Multiple_Hit>
	...

80009208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009208:	c0 08       	rjmp	80009208 <_handle_Bus_Error_Data_Fetch>
	...

8000920c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000920c:	c0 08       	rjmp	8000920c <_handle_Bus_Error_Instruction_Fetch>
	...

80009210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009210:	c0 08       	rjmp	80009210 <_handle_NMI>
	...

80009214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009214:	c0 08       	rjmp	80009214 <_handle_Instruction_Address>
	...

80009218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009218:	c0 08       	rjmp	80009218 <_handle_ITLB_Protection>
	...

8000921c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000921c:	c0 08       	rjmp	8000921c <_handle_Breakpoint>
	...

80009220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009220:	c0 08       	rjmp	80009220 <_handle_Illegal_Opcode>
	...

80009224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009224:	c0 08       	rjmp	80009224 <_handle_Unimplemented_Instruction>
	...

80009228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009228:	c0 08       	rjmp	80009228 <_handle_Privilege_Violation>
	...

8000922c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000922c:	c0 08       	rjmp	8000922c <_handle_Floating_Point>
	...

80009230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009230:	c0 08       	rjmp	80009230 <_handle_Coprocessor_Absent>
	...

80009234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009234:	c0 08       	rjmp	80009234 <_handle_Data_Address_Read>
	...

80009238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009238:	c0 08       	rjmp	80009238 <_handle_Data_Address_Write>
	...

8000923c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000923c:	c0 08       	rjmp	8000923c <_handle_DTLB_Protection_Read>
	...

80009240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009240:	c0 08       	rjmp	80009240 <_handle_DTLB_Protection_Write>
	...

80009244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009244:	c0 08       	rjmp	80009244 <_handle_DTLB_Modified>
	...

80009250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009250:	c0 08       	rjmp	80009250 <_handle_ITLB_Miss>
	...

80009260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009260:	c0 08       	rjmp	80009260 <_handle_DTLB_Miss_Read>
	...

80009270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009270:	c0 08       	rjmp	80009270 <_handle_DTLB_Miss_Write>
	...

80009300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009300:	c0 08       	rjmp	80009300 <_handle_Supervisor_Call>
80009302:	d7 03       	nop

80009304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009304:	30 0c       	mov	r12,0
80009306:	fe b0 d1 01 	rcall	80003508 <_get_interrupt_handler>
8000930a:	58 0c       	cp.w	r12,0
8000930c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009310:	d6 03       	rete

80009312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009312:	30 1c       	mov	r12,1
80009314:	fe b0 d0 fa 	rcall	80003508 <_get_interrupt_handler>
80009318:	58 0c       	cp.w	r12,0
8000931a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000931e:	d6 03       	rete

80009320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009320:	30 2c       	mov	r12,2
80009322:	fe b0 d0 f3 	rcall	80003508 <_get_interrupt_handler>
80009326:	58 0c       	cp.w	r12,0
80009328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000932c:	d6 03       	rete

8000932e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000932e:	30 3c       	mov	r12,3
80009330:	fe b0 d0 ec 	rcall	80003508 <_get_interrupt_handler>
80009334:	58 0c       	cp.w	r12,0
80009336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000933a:	d6 03       	rete
8000933c:	d7 03       	nop
8000933e:	d7 03       	nop
80009340:	d7 03       	nop
80009342:	d7 03       	nop
80009344:	d7 03       	nop
80009346:	d7 03       	nop
80009348:	d7 03       	nop
8000934a:	d7 03       	nop
8000934c:	d7 03       	nop
8000934e:	d7 03       	nop
80009350:	d7 03       	nop
80009352:	d7 03       	nop
80009354:	d7 03       	nop
80009356:	d7 03       	nop
80009358:	d7 03       	nop
8000935a:	d7 03       	nop
8000935c:	d7 03       	nop
8000935e:	d7 03       	nop
80009360:	d7 03       	nop
80009362:	d7 03       	nop
80009364:	d7 03       	nop
80009366:	d7 03       	nop
80009368:	d7 03       	nop
8000936a:	d7 03       	nop
8000936c:	d7 03       	nop
8000936e:	d7 03       	nop
80009370:	d7 03       	nop
80009372:	d7 03       	nop
80009374:	d7 03       	nop
80009376:	d7 03       	nop
80009378:	d7 03       	nop
8000937a:	d7 03       	nop
8000937c:	d7 03       	nop
8000937e:	d7 03       	nop
80009380:	d7 03       	nop
80009382:	d7 03       	nop
80009384:	d7 03       	nop
80009386:	d7 03       	nop
80009388:	d7 03       	nop
8000938a:	d7 03       	nop
8000938c:	d7 03       	nop
8000938e:	d7 03       	nop
80009390:	d7 03       	nop
80009392:	d7 03       	nop
80009394:	d7 03       	nop
80009396:	d7 03       	nop
80009398:	d7 03       	nop
8000939a:	d7 03       	nop
8000939c:	d7 03       	nop
8000939e:	d7 03       	nop
800093a0:	d7 03       	nop
800093a2:	d7 03       	nop
800093a4:	d7 03       	nop
800093a6:	d7 03       	nop
800093a8:	d7 03       	nop
800093aa:	d7 03       	nop
800093ac:	d7 03       	nop
800093ae:	d7 03       	nop
800093b0:	d7 03       	nop
800093b2:	d7 03       	nop
800093b4:	d7 03       	nop
800093b6:	d7 03       	nop
800093b8:	d7 03       	nop
800093ba:	d7 03       	nop
800093bc:	d7 03       	nop
800093be:	d7 03       	nop
800093c0:	d7 03       	nop
800093c2:	d7 03       	nop
800093c4:	d7 03       	nop
800093c6:	d7 03       	nop
800093c8:	d7 03       	nop
800093ca:	d7 03       	nop
800093cc:	d7 03       	nop
800093ce:	d7 03       	nop
800093d0:	d7 03       	nop
800093d2:	d7 03       	nop
800093d4:	d7 03       	nop
800093d6:	d7 03       	nop
800093d8:	d7 03       	nop
800093da:	d7 03       	nop
800093dc:	d7 03       	nop
800093de:	d7 03       	nop
800093e0:	d7 03       	nop
800093e2:	d7 03       	nop
800093e4:	d7 03       	nop
800093e6:	d7 03       	nop
800093e8:	d7 03       	nop
800093ea:	d7 03       	nop
800093ec:	d7 03       	nop
800093ee:	d7 03       	nop
800093f0:	d7 03       	nop
800093f2:	d7 03       	nop
800093f4:	d7 03       	nop
800093f6:	d7 03       	nop
800093f8:	d7 03       	nop
800093fa:	d7 03       	nop
800093fc:	d7 03       	nop
800093fe:	d7 03       	nop
