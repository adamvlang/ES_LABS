
CAN_LAB4.3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007328  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009400  80009400  00009800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000075c  80009600  80009600  00009a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009d5c  80009d5c  0000a15c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  80009d60  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000001f8  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e8f0  00000710  00000710  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a918  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000e28  00000000  00000000  0000a948  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000019de  00000000  00000000  0000b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00020f33  00000000  00000000  0000d14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000055e5  00000000  00000000  0002e081  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e69d  00000000  00000000  00033666  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002180  00000000  00000000  00041d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000042f3  00000000  00000000  00043e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a224  00000000  00000000  00048177  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00a2150e  00000000  00000000  0005239b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001050  00000000  00000000  00a738b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c5 ec 	sub	pc,pc,-14868

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e5 f0 	sub	pc,pc,-6672

Disassembly of section .text:

80002008 <adc_start>:
80002008:	30 28       	mov	r8,2
8000200a:	99 08       	st.w	r12[0x0],r8
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
}
8000200c:	5e fc       	retal	r12

8000200e <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000200e:	30 18       	mov	r8,1
80002010:	f0 0b 09 48 	lsl	r8,r8,r11
80002014:	99 48       	st.w	r12[0x10],r8
}
80002016:	5e fc       	retal	r12

80002018 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002018:	78 78       	ld.w	r8,r12[0x1c]
8000201a:	30 19       	mov	r9,1
8000201c:	f2 0b 09 49 	lsl	r9,r9,r11
80002020:	f3 e8 00 08 	and	r8,r9,r8
}
80002024:	5f 1c       	srne	r12
80002026:	5e fc       	retal	r12

80002028 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002028:	eb cd 40 e0 	pushm	r5-r7,lr
8000202c:	18 97       	mov	r7,r12
8000202e:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002030:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002034:	0c 9b       	mov	r11,r6
80002036:	0e 9c       	mov	r12,r7
80002038:	f0 1f 00 05 	mcall	8000204c <adc_get_value+0x24>
8000203c:	cf c0       	breq	80002034 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000203e:	2d 07       	sub	r7,-48
80002040:	5c 75       	castu.h	r5
}
80002042:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 18       	sub	r8,1

80002050 <rtc_is_busy>:
#include "rtc.h"


int rtc_is_busy(volatile avr32_rtc_t *rtc)
{
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
80002050:	78 0c       	ld.w	r12,r12[0x0]
}
80002052:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002056:	5e fc       	retal	r12

80002058 <rtc_set_value>:
  return 1;
}


void rtc_set_value(volatile avr32_rtc_t *rtc, unsigned long val)
{
80002058:	eb cd 40 c0 	pushm	r6-r7,lr
8000205c:	18 97       	mov	r7,r12
8000205e:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
80002060:	0e 9c       	mov	r12,r7
80002062:	f0 1f 00 06 	mcall	80002078 <rtc_set_value+0x20>
80002066:	cf d1       	brne	80002060 <rtc_set_value+0x8>
  // Set the new val value
  rtc->val = val;
80002068:	8f 16       	st.w	r7[0x4],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
8000206a:	0e 9c       	mov	r12,r7
8000206c:	f0 1f 00 03 	mcall	80002078 <rtc_set_value+0x20>
80002070:	cf d1       	brne	8000206a <rtc_set_value+0x12>
}
80002072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	20 50       	sub	r0,5

8000207c <rtc_enable>:
  while (rtc_is_busy(rtc));
}


void rtc_enable(volatile avr32_rtc_t *rtc)
{
8000207c:	eb cd 40 80 	pushm	r7,lr
80002080:	18 97       	mov	r7,r12
  // Wait until the rtc CTRL register is up-to-date
  while (rtc_is_busy(rtc));
80002082:	0e 9c       	mov	r12,r7
80002084:	f0 1f 00 06 	mcall	8000209c <rtc_enable+0x20>
80002088:	cf d1       	brne	80002082 <rtc_enable+0x6>
  // Enable the RTC
  rtc->ctrl |= AVR32_RTC_CTRL_EN_MASK;
8000208a:	6e 08       	ld.w	r8,r7[0x0]
8000208c:	a1 a8       	sbr	r8,0x0
8000208e:	8f 08       	st.w	r7[0x0],r8
  // Wait until write is done
  while (rtc_is_busy(rtc));
80002090:	0e 9c       	mov	r12,r7
80002092:	f0 1f 00 03 	mcall	8000209c <rtc_enable+0x20>
80002096:	cf d1       	brne	80002090 <rtc_enable+0x14>
}
80002098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	20 50       	sub	r0,5

800020a0 <rtc_enable_interrupt>:
}


void rtc_enable_interrupt(volatile avr32_rtc_t *rtc)
{
  rtc->ier = AVR32_RTC_IER_TOPI_MASK;
800020a0:	30 18       	mov	r8,1
800020a2:	99 48       	st.w	r12[0x10],r8
}
800020a4:	5e fc       	retal	r12
800020a6:	d7 03       	nop

800020a8 <rtc_set_top_value>:
  if (global_interrupt_enabled) cpu_irq_enable();
}


void rtc_set_top_value(volatile avr32_rtc_t *rtc, unsigned long top)
{
800020a8:	eb cd 40 c0 	pushm	r6-r7,lr
800020ac:	18 97       	mov	r7,r12
800020ae:	16 96       	mov	r6,r11
  // Wait until we can write into the VAL register
  while (rtc_is_busy(rtc));
800020b0:	0e 9c       	mov	r12,r7
800020b2:	f0 1f 00 06 	mcall	800020c8 <rtc_set_top_value+0x20>
800020b6:	cf d1       	brne	800020b0 <rtc_set_top_value+0x8>
  // Set the new val value
  rtc->top = top;
800020b8:	8f 26       	st.w	r7[0x8],r6
  // Wait until write is done
  while (rtc_is_busy(rtc));
800020ba:	0e 9c       	mov	r12,r7
800020bc:	f0 1f 00 03 	mcall	800020c8 <rtc_set_top_value+0x20>
800020c0:	cf d1       	brne	800020ba <rtc_set_top_value+0x12>
}
800020c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020c6:	00 00       	add	r0,r0
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	20 50       	sub	r0,5

800020cc <rtc_clear_interrupt>:
}


void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800020cc:	e1 b8 00 00 	mfsr	r8,0x0

  if (global_interrupt_enabled) cpu_irq_disable();
800020d0:	e6 18 00 01 	andh	r8,0x1,COH
800020d4:	c0 71       	brne	800020e2 <rtc_clear_interrupt+0x16>
800020d6:	d3 03       	ssrf	0x10
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020d8:	30 18       	mov	r8,1
800020da:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020dc:	78 78       	ld.w	r8,r12[0x1c]
  if (global_interrupt_enabled) cpu_irq_enable();
800020de:	d5 03       	csrf	0x10
800020e0:	5e fc       	retal	r12
void rtc_clear_interrupt(volatile avr32_rtc_t *rtc)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  if (global_interrupt_enabled) cpu_irq_disable();
  rtc->icr = AVR32_RTC_ICR_TOPI_MASK;
800020e2:	30 18       	mov	r8,1
800020e4:	99 88       	st.w	r12[0x20],r8
  rtc->isr;
800020e6:	78 78       	ld.w	r8,r12[0x1c]
800020e8:	5e fc       	retal	r12
800020ea:	d7 03       	nop

800020ec <rtc_init>:
  return (rtc->ctrl & AVR32_RTC_CTRL_BUSY_MASK) != 0;
}


int rtc_init(volatile avr32_rtc_t *rtc, unsigned char osc_type, unsigned char psel)
{
800020ec:	eb cd 40 e0 	pushm	r5-r7,lr
800020f0:	18 97       	mov	r7,r12
800020f2:	16 96       	mov	r6,r11
800020f4:	14 95       	mov	r5,r10
  // If exit, it means that the configuration has not been set correctly
  if (osc_type > (1 << AVR32_RTC_CTRL_CLK32_SIZE) - 1 ||
800020f6:	30 18       	mov	r8,1
800020f8:	f0 0b 18 00 	cp.b	r11,r8
800020fc:	5f b9       	srhi	r9
800020fe:	30 f8       	mov	r8,15
80002100:	f0 0a 18 00 	cp.b	r10,r8
80002104:	5f b8       	srhi	r8
80002106:	f3 e8 10 08 	or	r8,r9,r8
8000210a:	c0 30       	breq	80002110 <rtc_init+0x24>
8000210c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
      psel > (1 << AVR32_RTC_CTRL_PSEL_SIZE) - 1)
    return 0;

  // If we use the 32-kHz oscillator, we have to enable it first
  if (osc_type == RTC_OSC_32KHZ)
80002110:	30 18       	mov	r8,1
80002112:	f0 0b 18 00 	cp.b	r11,r8
80002116:	c0 a1       	brne	8000212a <rtc_init+0x3e>
  {
    // Select the 32-kHz oscillator crystal
    pm_enable_osc32_crystal(&AVR32_PM);
80002118:	fe 7c 0c 00 	mov	r12,-62464
8000211c:	f0 1f 00 0f 	mcall	80002158 <rtc_init+0x6c>
    // Enable the 32-kHz clock and wait until the osc32 clock is ready.
    pm_enable_clk32(&AVR32_PM, AVR32_PM_OSCCTRL32_STARTUP_0_RCOSC);
80002120:	30 0b       	mov	r11,0
80002122:	fe 7c 0c 00 	mov	r12,-62464
80002126:	f0 1f 00 0e 	mcall	8000215c <rtc_init+0x70>
  }

  // Wait until the rtc accepts writes to the CTRL register
  while (rtc_is_busy(rtc));
8000212a:	0e 9c       	mov	r12,r7
8000212c:	f0 1f 00 0d 	mcall	80002160 <rtc_init+0x74>
80002130:	cf d1       	brne	8000212a <rtc_init+0x3e>

  // Set the new RTC configuration
  rtc->ctrl = osc_type << AVR32_RTC_CTRL_CLK32_OFFSET |
80002132:	a3 76       	lsl	r6,0x3
80002134:	b1 a6       	sbr	r6,0x10
80002136:	ed e5 10 85 	or	r5,r6,r5<<0x8
8000213a:	8f 05       	st.w	r7[0x0],r5
              psel << AVR32_RTC_CTRL_PSEL_OFFSET |
              AVR32_RTC_CTRL_CLKEN_MASK;

  // Wait until write is done
  while (rtc_is_busy(rtc));
8000213c:	0e 9c       	mov	r12,r7
8000213e:	f0 1f 00 09 	mcall	80002160 <rtc_init+0x74>
80002142:	cf d1       	brne	8000213c <rtc_init+0x50>

  // Set the counter value to 0
  rtc_set_value(rtc, 0x00000000);
80002144:	30 0b       	mov	r11,0
80002146:	0e 9c       	mov	r12,r7
80002148:	f0 1f 00 07 	mcall	80002164 <rtc_init+0x78>
  // Set the top value to 0xFFFFFFFF
  rtc_set_top_value(rtc, 0xFFFFFFFF);
8000214c:	3f fb       	mov	r11,-1
8000214e:	0e 9c       	mov	r12,r7
80002150:	f0 1f 00 06 	mcall	80002168 <rtc_init+0x7c>
80002154:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	37 0c       	mov	r12,112
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	37 38       	mov	r8,115
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	20 50       	sub	r0,5
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	20 58       	sub	r8,5
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	20 a8       	sub	r8,10

8000216c <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
8000216c:	30 08       	mov	r8,0
8000216e:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002170:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002172:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002174:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002176:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002178:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000217a:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
8000217c:	b8 f8       	st.b	r12[0x7],r8
}
8000217e:	5e fc       	retal	r12

80002180 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002180:	eb cd 40 80 	pushm	r7,lr
80002184:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002186:	49 68       	lddpc	r8,800021dc <config_dpi204+0x5c>
80002188:	1a 97       	mov	r7,sp
8000218a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000218e:	fa eb 00 00 	st.d	sp[0],r10
80002192:	f0 e8 00 08 	ld.d	r8,r8[8]
80002196:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000219a:	30 4b       	mov	r11,4
8000219c:	49 1c       	lddpc	r12,800021e0 <config_dpi204+0x60>
8000219e:	f0 1f 00 12 	mcall	800021e4 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
800021a2:	1a 9b       	mov	r11,sp
800021a4:	fe 7c 28 00 	mov	r12,-55296
800021a8:	f0 1f 00 10 	mcall	800021e8 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800021ac:	30 09       	mov	r9,0
800021ae:	12 9a       	mov	r10,r9
800021b0:	12 9b       	mov	r11,r9
800021b2:	fe 7c 28 00 	mov	r12,-55296
800021b6:	f0 1f 00 0e 	mcall	800021ec <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
800021ba:	fe 7c 28 00 	mov	r12,-55296
800021be:	f0 1f 00 0d 	mcall	800021f0 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800021c2:	e0 6a 1b 00 	mov	r10,6912
800021c6:	ea 1a 00 b7 	orh	r10,0xb7
800021ca:	1a 9b       	mov	r11,sp
800021cc:	fe 7c 28 00 	mov	r12,-55296
800021d0:	f0 1f 00 09 	mcall	800021f4 <config_dpi204+0x74>
}
800021d4:	2f cd       	sub	sp,-16
800021d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	96 30       	ld.sh	r0,r11[0x6]
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	96 40       	ld.sh	r0,r11[0x8]
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	35 08       	mov	r8,80
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	38 3a       	mov	r10,-125
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	38 72       	mov	r2,-121
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	39 c8       	mov	r8,-100
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	39 10       	mov	r0,-111

800021f8 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800021f8:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800021fa:	18 9b       	mov	r11,r12
800021fc:	fe 7c 24 00 	mov	r12,-56320
80002200:	f0 1f 00 02 	mcall	80002208 <mASSERT_CS+0x10>
}
80002204:	d8 02       	popm	pc
80002206:	00 00       	add	r0,r0
80002208:	80 00       	ld.sh	r0,r0[0x0]
8000220a:	38 9e       	mov	lr,-119

8000220c <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
80002212:	49 88       	lddpc	r8,80002270 <config_SPI_SPARE+0x64>
80002214:	1a 97       	mov	r7,sp
80002216:	f0 ea 00 00 	ld.d	r10,r8[0]
8000221a:	fa eb 00 00 	st.d	sp[0],r10
8000221e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002222:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
80002226:	30 4b       	mov	r11,4
80002228:	49 3c       	lddpc	r12,80002274 <config_SPI_SPARE+0x68>
8000222a:	f0 1f 00 14 	mcall	80002278 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
8000222e:	1a 9b       	mov	r11,sp
80002230:	fe 7c 24 00 	mov	r12,-56320
80002234:	f0 1f 00 12 	mcall	8000227c <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
80002238:	30 09       	mov	r9,0
8000223a:	12 9a       	mov	r10,r9
8000223c:	12 9b       	mov	r11,r9
8000223e:	fe 7c 24 00 	mov	r12,-56320
80002242:	f0 1f 00 10 	mcall	80002280 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
80002246:	30 0b       	mov	r11,0
80002248:	fe 7c 24 00 	mov	r12,-56320
8000224c:	f0 1f 00 0e 	mcall	80002284 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002250:	e0 6a 1b 00 	mov	r10,6912
80002254:	ea 1a 00 b7 	orh	r10,0xb7
80002258:	1a 9b       	mov	r11,sp
8000225a:	fe 7c 24 00 	mov	r12,-56320
8000225e:	f0 1f 00 0b 	mcall	80002288 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002262:	fe 7c 24 00 	mov	r12,-56320
80002266:	f0 1f 00 0a 	mcall	8000228c <config_SPI_SPARE+0x80>
}
8000226a:	2f cd       	sub	sp,-16
8000226c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	96 20       	ld.sh	r0,r11[0x4]
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	96 00       	ld.sh	r0,r11[0x0]
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	35 08       	mov	r8,80
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	38 3a       	mov	r10,-125
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	38 72       	mov	r2,-121
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	38 9e       	mov	lr,-119
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	39 10       	mov	r0,-111
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	39 c8       	mov	r8,-100

80002290 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002290:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002292:	fe 7c 24 00 	mov	r12,-56320
80002296:	f0 1f 00 02 	mcall	8000229c <XferSPI_send+0xc>
	return 0;
}
8000229a:	d8 0a       	popm	pc,r12=0
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	39 ce       	mov	lr,-100

800022a0 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
800022a0:	d4 01       	pushm	lr
800022a2:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
800022a4:	30 0b       	mov	r11,0
800022a6:	fe 7c 24 00 	mov	r12,-56320
800022aa:	f0 1f 00 0e 	mcall	800022e0 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
800022ae:	e0 6b 00 a0 	mov	r11,160
800022b2:	fe 7c 24 00 	mov	r12,-56320
800022b6:	f0 1f 00 0c 	mcall	800022e4 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
800022ba:	30 0b       	mov	r11,0
800022bc:	fe 7c 24 00 	mov	r12,-56320
800022c0:	f0 1f 00 09 	mcall	800022e4 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800022c4:	fa cb ff fe 	sub	r11,sp,-2
800022c8:	fe 7c 24 00 	mov	r12,-56320
800022cc:	f0 1f 00 07 	mcall	800022e8 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800022d0:	30 0b       	mov	r11,0
800022d2:	fe 7c 24 00 	mov	r12,-56320
800022d6:	f0 1f 00 06 	mcall	800022ec <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800022da:	1b bc       	ld.ub	r12,sp[0x3]
800022dc:	2f fd       	sub	sp,-4
800022de:	d8 02       	popm	pc
800022e0:	80 00       	ld.sh	r0,r0[0x0]
800022e2:	38 9e       	mov	lr,-119
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	39 ce       	mov	lr,-100
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	39 f2       	mov	r2,-97
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	38 ea       	mov	r10,-114

800022f0 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800022f0:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800022f2:	f0 1f 00 04 	mcall	80002300 <CANRxReady+0x10>
800022f6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800022fa:	5f 1c       	srne	r12
800022fc:	d8 02       	popm	pc
800022fe:	00 00       	add	r0,r0
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	22 a0       	sub	r0,42

80002304 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
80002304:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
80002306:	f0 1f 00 04 	mcall	80002314 <CANTxReady+0x10>
8000230a:	ec 1c 00 04 	eorl	r12,0x4
}
8000230e:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
80002312:	d8 02       	popm	pc
80002314:	80 00       	ld.sh	r0,r0[0x0]
80002316:	22 a0       	sub	r0,42

80002318 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
80002318:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
8000231a:	18 9b       	mov	r11,r12
8000231c:	fe 7c 24 00 	mov	r12,-56320
80002320:	f0 1f 00 02 	mcall	80002328 <mDEASSERT_CS+0x10>
}
80002324:	d8 02       	popm	pc
80002326:	00 00       	add	r0,r0
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	38 ea       	mov	r10,-114

8000232c <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
8000232c:	d4 21       	pushm	r4-r7,lr
8000232e:	18 97       	mov	r7,r12
80002330:	16 95       	mov	r5,r11
80002332:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002334:	18 96       	mov	r6,r12
80002336:	5c 56       	castu.b	r6
80002338:	0c 9c       	mov	r12,r6
8000233a:	f0 1f 00 0a 	mcall	80002360 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
8000233e:	30 2b       	mov	r11,2
80002340:	0e 9c       	mov	r12,r7
80002342:	f0 1f 00 09 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
80002346:	0a 9b       	mov	r11,r5
80002348:	0e 9c       	mov	r12,r7
8000234a:	f0 1f 00 07 	mcall	80002364 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
8000234e:	08 9b       	mov	r11,r4
80002350:	0e 9c       	mov	r12,r7
80002352:	f0 1f 00 05 	mcall	80002364 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
80002356:	0c 9c       	mov	r12,r6
80002358:	f0 1f 00 04 	mcall	80002368 <CAN2515ByteWrite+0x3c>
}
8000235c:	d8 22       	popm	r4-r7,pc
8000235e:	00 00       	add	r0,r0
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	21 f8       	sub	r8,31
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	22 90       	sub	r0,41
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	23 18       	sub	r8,49

8000236c <CAN2515SetRXB1FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB1FiltersEx(int Channel, UINT32 Mask1, UINT32* pFlt2_5)
{ 
8000236c:	eb cd 40 e0 	pushm	r5-r7,lr
80002370:	18 97       	mov	r7,r12
80002372:	16 96       	mov	r6,r11
80002374:	14 95       	mov	r5,r10
	    //Set the mask associated with RXB1
	    CAN2515ByteWrite(Channel, RXM1EID0, Mask1);
80002376:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
8000237a:	32 7b       	mov	r11,39
8000237c:	f0 1f 00 50 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1EID8, Mask1 >> 8);
80002380:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
80002384:	32 6b       	mov	r11,38
80002386:	0e 9c       	mov	r12,r7
80002388:	f0 1f 00 4d 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDL, ((Mask1 >> 13) & 0b11100000) | ((Mask1 >> 16) & 0b00000011));
8000238c:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
80002390:	ec 0a 16 0d 	lsr	r10,r6,0xd
80002394:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002398:	10 4a       	or	r10,r8
8000239a:	32 5b       	mov	r11,37
8000239c:	0e 9c       	mov	r12,r7
8000239e:	f0 1f 00 48 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 21);
800023a2:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800023a6:	32 4b       	mov	r11,36
800023a8:	0e 9c       	mov	r12,r7
800023aa:	f0 1f 00 45 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    //Set the 4 filters associated with RXB1
	    CAN2515ByteWrite(Channel, RXF2EID0, *pFlt2_5);
800023ae:	0b ba       	ld.ub	r10,r5[0x3]
800023b0:	30 bb       	mov	r11,11
800023b2:	0e 9c       	mov	r12,r7
800023b4:	f0 1f 00 42 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2EID8, *pFlt2_5 >> 8);
800023b8:	0b aa       	ld.ub	r10,r5[0x2]
800023ba:	30 ab       	mov	r11,10
800023bc:	0e 9c       	mov	r12,r7
800023be:	f0 1f 00 40 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
800023c2:	6a 08       	ld.w	r8,r5[0x0]
800023c4:	f0 0a 16 0d 	lsr	r10,r8,0xd
800023c8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800023cc:	e2 1a 00 e0 	andl	r10,0xe0,COH
800023d0:	f1 ea 10 0a 	or	r10,r8,r10
800023d4:	a3 ba       	sbr	r10,0x3
800023d6:	e2 1a 00 eb 	andl	r10,0xeb,COH
800023da:	30 9b       	mov	r11,9
800023dc:	0e 9c       	mov	r12,r7
800023de:	f0 1f 00 38 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 21);
800023e2:	0b 0a       	ld.w	r10,r5++
800023e4:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800023e8:	30 8b       	mov	r11,8
800023ea:	0e 9c       	mov	r12,r7
800023ec:	f0 1f 00 34 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF3EID0, *pFlt2_5);
800023f0:	0b ba       	ld.ub	r10,r5[0x3]
800023f2:	31 3b       	mov	r11,19
800023f4:	0e 9c       	mov	r12,r7
800023f6:	f0 1f 00 32 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3EID8, *pFlt2_5 >> 8);
800023fa:	0b aa       	ld.ub	r10,r5[0x2]
800023fc:	31 2b       	mov	r11,18
800023fe:	0e 9c       	mov	r12,r7
80002400:	f0 1f 00 2f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002404:	6a 08       	ld.w	r8,r5[0x0]
80002406:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000240a:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000240e:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002412:	f1 ea 10 0a 	or	r10,r8,r10
80002416:	a3 ba       	sbr	r10,0x3
80002418:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000241c:	31 1b       	mov	r11,17
8000241e:	0e 9c       	mov	r12,r7
80002420:	f0 1f 00 27 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 21);
80002424:	0b 0a       	ld.w	r10,r5++
80002426:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000242a:	31 0b       	mov	r11,16
8000242c:	0e 9c       	mov	r12,r7
8000242e:	f0 1f 00 24 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF4EID0, *pFlt2_5);
80002432:	0b ba       	ld.ub	r10,r5[0x3]
80002434:	31 7b       	mov	r11,23
80002436:	0e 9c       	mov	r12,r7
80002438:	f0 1f 00 21 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4EID8, *pFlt2_5 >> 8);
8000243c:	0b aa       	ld.ub	r10,r5[0x2]
8000243e:	31 6b       	mov	r11,22
80002440:	0e 9c       	mov	r12,r7
80002442:	f0 1f 00 1f 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002446:	6a 08       	ld.w	r8,r5[0x0]
80002448:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000244c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002450:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002454:	f1 ea 10 0a 	or	r10,r8,r10
80002458:	a3 ba       	sbr	r10,0x3
8000245a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000245e:	31 5b       	mov	r11,21
80002460:	0e 9c       	mov	r12,r7
80002462:	f0 1f 00 17 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 21);
80002466:	0b 0a       	ld.w	r10,r5++
80002468:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000246c:	31 4b       	mov	r11,20
8000246e:	0e 9c       	mov	r12,r7
80002470:	f0 1f 00 13 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    
	    pFlt2_5++;
	    CAN2515ByteWrite(Channel, RXF5EID0, *pFlt2_5);
80002474:	0b ba       	ld.ub	r10,r5[0x3]
80002476:	31 bb       	mov	r11,27
80002478:	0e 9c       	mov	r12,r7
8000247a:	f0 1f 00 11 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5EID8, *pFlt2_5 >> 8);
8000247e:	0b aa       	ld.ub	r10,r5[0x2]
80002480:	31 ab       	mov	r11,26
80002482:	0e 9c       	mov	r12,r7
80002484:	f0 1f 00 0e 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDL, ((*pFlt2_5 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt2_5 >> 16) & 0b00000011));
80002488:	6a 08       	ld.w	r8,r5[0x0]
8000248a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000248e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002492:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002496:	f1 ea 10 0a 	or	r10,r8,r10
8000249a:	a3 ba       	sbr	r10,0x3
8000249c:	e2 1a 00 eb 	andl	r10,0xeb,COH
800024a0:	31 9b       	mov	r11,25
800024a2:	0e 9c       	mov	r12,r7
800024a4:	f0 1f 00 06 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
	    CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 21);
800024a8:	6a 0a       	ld.w	r10,r5[0x0]
800024aa:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
800024ae:	31 8b       	mov	r11,24
800024b0:	0e 9c       	mov	r12,r7
800024b2:	f0 1f 00 03 	mcall	800024bc <CAN2515SetRXB1FiltersEx+0x150>
}
800024b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800024ba:	00 00       	add	r0,r0
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	23 2c       	sub	r12,50

800024c0 <CAN2515SetRXB0FiltersEx>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0FiltersEx(int Channel, UINT32 Mask0, UINT32* pFlt0_1)
{	
800024c0:	eb cd 40 e0 	pushm	r5-r7,lr
800024c4:	18 97       	mov	r7,r12
800024c6:	16 96       	mov	r6,r11
800024c8:	14 95       	mov	r5,r10
	//Set the mask associated with RXB0
	CAN2515ByteWrite(Channel, RXM0EID0, Mask0);
800024ca:	f5 db c0 08 	bfextu	r10,r11,0x0,0x8
800024ce:	32 3b       	mov	r11,35
800024d0:	f0 1f 00 2f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0EID8, Mask0 >> 8);
800024d4:	f5 d6 c1 08 	bfextu	r10,r6,0x8,0x8
800024d8:	32 2b       	mov	r11,34
800024da:	0e 9c       	mov	r12,r7
800024dc:	f0 1f 00 2c 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDL, ((Mask0 >> 13) & 0b11100000) | ((Mask0 >> 16) & 0b00000011));
800024e0:	f1 d6 c2 02 	bfextu	r8,r6,0x10,0x2
800024e4:	ec 0a 16 0d 	lsr	r10,r6,0xd
800024e8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800024ec:	10 4a       	or	r10,r8
800024ee:	32 1b       	mov	r11,33
800024f0:	0e 9c       	mov	r12,r7
800024f2:	f0 1f 00 27 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 21);
800024f6:	f5 d6 c2 a8 	bfextu	r10,r6,0x15,0x8
800024fa:	32 0b       	mov	r11,32
800024fc:	0e 9c       	mov	r12,r7
800024fe:	f0 1f 00 24 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	//Set the two filters associated with RXB0
	CAN2515ByteWrite(Channel, RXF0EID0, *pFlt0_1);
80002502:	0b ba       	ld.ub	r10,r5[0x3]
80002504:	30 3b       	mov	r11,3
80002506:	0e 9c       	mov	r12,r7
80002508:	f0 1f 00 21 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0EID8, *pFlt0_1 >> 8);
8000250c:	0b aa       	ld.ub	r10,r5[0x2]
8000250e:	30 2b       	mov	r11,2
80002510:	0e 9c       	mov	r12,r7
80002512:	f0 1f 00 1f 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002516:	6a 08       	ld.w	r8,r5[0x0]
80002518:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000251c:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002520:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002524:	f1 ea 10 0a 	or	r10,r8,r10
80002528:	a3 ba       	sbr	r10,0x3
8000252a:	e2 1a 00 eb 	andl	r10,0xeb,COH
8000252e:	30 1b       	mov	r11,1
80002530:	0e 9c       	mov	r12,r7
80002532:	f0 1f 00 17 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 21);
80002536:	0b 0a       	ld.w	r10,r5++
80002538:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000253c:	30 0b       	mov	r11,0
8000253e:	0e 9c       	mov	r12,r7
80002540:	f0 1f 00 13 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	    
	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1EID0, *pFlt0_1);
80002544:	0b ba       	ld.ub	r10,r5[0x3]
80002546:	30 7b       	mov	r11,7
80002548:	0e 9c       	mov	r12,r7
8000254a:	f0 1f 00 11 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1EID8, *pFlt0_1 >> 8);
8000254e:	0b aa       	ld.ub	r10,r5[0x2]
80002550:	30 6b       	mov	r11,6
80002552:	0e 9c       	mov	r12,r7
80002554:	f0 1f 00 0e 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDL, ((*pFlt0_1 >> 13) & 0b11100000) | 0b00001000 | ((*pFlt0_1 >> 16) & 0b00000011));
80002558:	6a 08       	ld.w	r8,r5[0x0]
8000255a:	f0 0a 16 0d 	lsr	r10,r8,0xd
8000255e:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80002562:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002566:	f1 ea 10 0a 	or	r10,r8,r10
8000256a:	a3 ba       	sbr	r10,0x3
8000256c:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002570:	30 5b       	mov	r11,5
80002572:	0e 9c       	mov	r12,r7
80002574:	f0 1f 00 06 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 21);
80002578:	6a 0a       	ld.w	r10,r5[0x0]
8000257a:	f5 da c2 a8 	bfextu	r10,r10,0x15,0x8
8000257e:	30 4b       	mov	r11,4
80002580:	0e 9c       	mov	r12,r7
80002582:	f0 1f 00 03 	mcall	8000258c <CAN2515SetRXB0FiltersEx+0xcc>
}
80002586:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	23 2c       	sub	r12,50

80002590 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002590:	eb cd 40 c0 	pushm	r6-r7,lr
80002594:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
80002596:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000259a:	0e 9c       	mov	r12,r7
8000259c:	f0 1f 00 06 	mcall	800025b4 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
800025a0:	e0 6b 00 c0 	mov	r11,192
800025a4:	0c 9c       	mov	r12,r6
800025a6:	f0 1f 00 05 	mcall	800025b8 <CANReset+0x28>
	mDEASSERT_CS(Channel);
800025aa:	0e 9c       	mov	r12,r7
800025ac:	f0 1f 00 04 	mcall	800025bc <CANReset+0x2c>
}
800025b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	21 f8       	sub	r8,31
800025b8:	80 00       	ld.sh	r0,r0[0x0]
800025ba:	22 90       	sub	r0,41
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	23 18       	sub	r8,49

800025c0 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
800025c0:	eb cd 40 e0 	pushm	r5-r7,lr
800025c4:	20 1d       	sub	sp,4
800025c6:	18 97       	mov	r7,r12
800025c8:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
800025ca:	18 96       	mov	r6,r12
800025cc:	5c 56       	castu.b	r6
800025ce:	0c 9c       	mov	r12,r6
800025d0:	f0 1f 00 13 	mcall	8000261c <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800025d4:	30 3b       	mov	r11,3
800025d6:	0e 9c       	mov	r12,r7
800025d8:	f0 1f 00 12 	mcall	80002620 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800025dc:	0a 9b       	mov	r11,r5
800025de:	0e 9c       	mov	r12,r7
800025e0:	f0 1f 00 10 	mcall	80002620 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800025e4:	30 0b       	mov	r11,0
800025e6:	fe 7c 24 00 	mov	r12,-56320
800025ea:	f0 1f 00 0f 	mcall	80002624 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025ee:	fe 77 24 00 	mov	r7,-56320
800025f2:	c0 28       	rjmp	800025f6 <CAN2515ByteRead+0x36>
		asm("NOP;");
800025f4:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800025f6:	0e 9c       	mov	r12,r7
800025f8:	f0 1f 00 0c 	mcall	80002628 <CAN2515ByteRead+0x68>
800025fc:	cf c0       	breq	800025f4 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800025fe:	fa cb ff fe 	sub	r11,sp,-2
80002602:	fe 7c 24 00 	mov	r12,-56320
80002606:	f0 1f 00 0a 	mcall	8000262c <CAN2515ByteRead+0x6c>
	return spidataread_temp;
8000260a:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
8000260c:	0c 9c       	mov	r12,r6
8000260e:	f0 1f 00 09 	mcall	80002630 <CAN2515ByteRead+0x70>

	return tempdata;
}
80002612:	0e 9c       	mov	r12,r7
80002614:	2f fd       	sub	sp,-4
80002616:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000261a:	00 00       	add	r0,r0
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	21 f8       	sub	r8,31
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	22 90       	sub	r0,41
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	39 ce       	mov	lr,-100
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	39 ea       	mov	r10,-98
8000262c:	80 00       	ld.sh	r0,r0[0x0]
8000262e:	39 f2       	mov	r2,-97
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	23 18       	sub	r8,49

80002634 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002634:	eb cd 40 80 	pushm	r7,lr
80002638:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
8000263a:	58 ab       	cp.w	r11,10
8000263c:	c1 11       	brne	8000265e <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
8000263e:	30 3a       	mov	r10,3
80002640:	32 ab       	mov	r11,42
80002642:	f0 1f 00 30 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002646:	e0 6a 00 ac 	mov	r10,172
8000264a:	32 9b       	mov	r11,41
8000264c:	0e 9c       	mov	r12,r7
8000264e:	f0 1f 00 2d 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002652:	30 7a       	mov	r10,7
80002654:	32 8b       	mov	r11,40
80002656:	0e 9c       	mov	r12,r7
80002658:	f0 1f 00 2a 	mcall	80002700 <CANEnable+0xcc>
8000265c:	c3 68       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
8000265e:	58 7b       	cp.w	r11,7
80002660:	c1 11       	brne	80002682 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002662:	30 1a       	mov	r10,1
80002664:	32 ab       	mov	r11,42
80002666:	f0 1f 00 27 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000266a:	e0 6a 00 ac 	mov	r10,172
8000266e:	32 9b       	mov	r11,41
80002670:	0e 9c       	mov	r12,r7
80002672:	f0 1f 00 24 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002676:	30 7a       	mov	r10,7
80002678:	32 8b       	mov	r11,40
8000267a:	0e 9c       	mov	r12,r7
8000267c:	f0 1f 00 21 	mcall	80002700 <CANEnable+0xcc>
80002680:	c2 48       	rjmp	800026c8 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002682:	58 5b       	cp.w	r11,5
80002684:	c1 11       	brne	800026a6 <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002686:	30 0a       	mov	r10,0
80002688:	32 ab       	mov	r11,42
8000268a:	f0 1f 00 1e 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000268e:	e0 6a 00 ac 	mov	r10,172
80002692:	32 9b       	mov	r11,41
80002694:	0e 9c       	mov	r12,r7
80002696:	f0 1f 00 1b 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000269a:	30 7a       	mov	r10,7
8000269c:	32 8b       	mov	r11,40
8000269e:	0e 9c       	mov	r12,r7
800026a0:	f0 1f 00 18 	mcall	80002700 <CANEnable+0xcc>
800026a4:	c1 28       	rjmp	800026c8 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
800026a6:	58 1b       	cp.w	r11,1
800026a8:	c1 01       	brne	800026c8 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
800026aa:	30 0a       	mov	r10,0
800026ac:	32 ab       	mov	r11,42
800026ae:	f0 1f 00 15 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
800026b2:	e0 6a 00 91 	mov	r10,145
800026b6:	32 9b       	mov	r11,41
800026b8:	0e 9c       	mov	r12,r7
800026ba:	f0 1f 00 12 	mcall	80002700 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
800026be:	30 3a       	mov	r10,3
800026c0:	32 8b       	mov	r11,40
800026c2:	0e 9c       	mov	r12,r7
800026c4:	f0 1f 00 0f 	mcall	80002700 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
800026c8:	30 3a       	mov	r10,3
800026ca:	32 bb       	mov	r11,43
800026cc:	0e 9c       	mov	r12,r7
800026ce:	f0 1f 00 0d 	mcall	80002700 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800026d2:	30 4a       	mov	r10,4
800026d4:	30 fb       	mov	r11,15
800026d6:	0e 9c       	mov	r12,r7
800026d8:	f0 1f 00 0a 	mcall	80002700 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800026dc:	30 eb       	mov	r11,14
800026de:	0e 9c       	mov	r12,r7
800026e0:	f0 1f 00 09 	mcall	80002704 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800026e4:	30 eb       	mov	r11,14
800026e6:	0e 9c       	mov	r12,r7
800026e8:	f0 1f 00 07 	mcall	80002704 <CANEnable+0xd0>
800026ec:	e2 1c 00 e0 	andl	r12,0xe0,COH
800026f0:	c0 60       	breq	800026fc <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800026f2:	30 4a       	mov	r10,4
800026f4:	30 fb       	mov	r11,15
800026f6:	0e 9c       	mov	r12,r7
800026f8:	f0 1f 00 02 	mcall	80002700 <CANEnable+0xcc>
800026fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002700:	80 00       	ld.sh	r0,r0[0x0]
80002702:	23 2c       	sub	r12,50
80002704:	80 00       	ld.sh	r0,r0[0x0]
80002706:	25 c0       	sub	r0,92

80002708 <InitializeCANExtended>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps, 0, 0) (no filter)
 ********************************************************************/
void InitializeCANExtended( int Channel , int BusSpeed, UINT32 Mask, UINT32 Flt[6])
{
80002708:	d4 21       	pushm	r4-r7,lr
8000270a:	18 97       	mov	r7,r12
8000270c:	16 94       	mov	r4,r11
8000270e:	14 95       	mov	r5,r10
80002710:	12 96       	mov	r6,r9
	CANReset(Channel);
80002712:	f0 1f 00 0f 	mcall	8000274c <InitializeCANExtended+0x44>
	CAN2515ByteWrite(Channel, RXB0CTRL, 0x02<<5); //Receive only extended id messages to buffer 0
80002716:	34 0a       	mov	r10,64
80002718:	36 0b       	mov	r11,96
8000271a:	0e 9c       	mov	r12,r7
8000271c:	f0 1f 00 0d 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515ByteWrite(Channel, RXB1CTRL, 0x02<<5); //Receive only extended id messages to buffer 1
80002720:	34 0a       	mov	r10,64
80002722:	37 0b       	mov	r11,112
80002724:	0e 9c       	mov	r12,r7
80002726:	f0 1f 00 0b 	mcall	80002750 <InitializeCANExtended+0x48>
	CAN2515SetRXB0FiltersEx(Channel, Mask, Flt);
8000272a:	0c 9a       	mov	r10,r6
8000272c:	0a 9b       	mov	r11,r5
8000272e:	0e 9c       	mov	r12,r7
80002730:	f0 1f 00 09 	mcall	80002754 <InitializeCANExtended+0x4c>
	CAN2515SetRXB1FiltersEx(Channel, Mask, &Flt[2]);
80002734:	ec ca ff f8 	sub	r10,r6,-8
80002738:	0a 9b       	mov	r11,r5
8000273a:	0e 9c       	mov	r12,r7
8000273c:	f0 1f 00 07 	mcall	80002758 <InitializeCANExtended+0x50>
	CANEnable(Channel, BusSpeed);
80002740:	08 9b       	mov	r11,r4
80002742:	0e 9c       	mov	r12,r7
80002744:	f0 1f 00 06 	mcall	8000275c <InitializeCANExtended+0x54>
}
80002748:	d8 22       	popm	r4-r7,pc
8000274a:	00 00       	add	r0,r0
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	25 90       	sub	r0,89
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	23 2c       	sub	r12,50
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	24 c0       	sub	r0,76
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	23 6c       	sub	r12,54
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	26 34       	sub	r4,99

80002760 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002760:	eb cd 40 fe 	pushm	r1-r7,lr
80002764:	18 96       	mov	r6,r12
80002766:	16 93       	mov	r3,r11
80002768:	14 94       	mov	r4,r10
8000276a:	12 92       	mov	r2,r9
8000276c:	10 91       	mov	r1,r8
8000276e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002770:	33 05       	mov	r5,48
80002772:	c1 78       	rjmp	800027a0 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002774:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002778:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000277c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002780:	14 38       	cp.w	r8,r10
80002782:	e0 88 00 08 	brls	80002792 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002786:	12 38       	cp.w	r8,r9
80002788:	fe 98 ff fa 	brls	8000277c <CANSendMsg+0x1c>
8000278c:	12 3a       	cp.w	r10,r9
8000278e:	c7 63       	brcs	8000287a <CANSendMsg+0x11a>
80002790:	cf 6b       	rjmp	8000277c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002792:	12 38       	cp.w	r8,r9
80002794:	e0 8b 00 73 	brhi	8000287a <CANSendMsg+0x11a>
80002798:	12 3a       	cp.w	r10,r9
8000279a:	c7 03       	brcs	8000287a <CANSendMsg+0x11a>
8000279c:	cf 0b       	rjmp	8000277c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000279e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
800027a0:	0a 9b       	mov	r11,r5
800027a2:	0c 9c       	mov	r12,r6
800027a4:	f0 1f 00 38 	mcall	80002884 <CANSendMsg+0x124>
800027a8:	e2 1c 00 08 	andl	r12,0x8,COH
800027ac:	ce 41       	brne	80002774 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
800027ae:	e6 08 16 0b 	lsr	r8,r3,0xb
800027b2:	c1 01       	brne	800027d2 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
800027b4:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
800027b8:	33 1b       	mov	r11,49
800027ba:	0c 9c       	mov	r12,r6
800027bc:	f0 1f 00 33 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
800027c0:	e6 0a 15 05 	lsl	r10,r3,0x5
800027c4:	e2 1a 00 e0 	andl	r10,0xe0,COH
800027c8:	33 2b       	mov	r11,50
800027ca:	0c 9c       	mov	r12,r6
800027cc:	f0 1f 00 2f 	mcall	80002888 <CANSendMsg+0x128>
800027d0:	c2 18       	rjmp	80002812 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
800027d2:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
800027d6:	33 1b       	mov	r11,49
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 2c 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
800027de:	e6 08 16 0d 	lsr	r8,r3,0xd
800027e2:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
800027e6:	e2 18 00 e0 	andl	r8,0xe0,COH
800027ea:	10 4a       	or	r10,r8
800027ec:	a3 ba       	sbr	r10,0x3
800027ee:	e2 1a 00 eb 	andl	r10,0xeb,COH
800027f2:	33 2b       	mov	r11,50
800027f4:	0c 9c       	mov	r12,r6
800027f6:	f0 1f 00 25 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800027fa:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800027fe:	33 3b       	mov	r11,51
80002800:	0c 9c       	mov	r12,r6
80002802:	f0 1f 00 22 	mcall	80002888 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002806:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
8000280a:	33 4b       	mov	r11,52
8000280c:	0c 9c       	mov	r12,r6
8000280e:	f0 1f 00 1f 	mcall	80002888 <CANSendMsg+0x128>
80002812:	30 85       	mov	r5,8
80002814:	ea 02 18 00 	cp.b	r2,r5
80002818:	e4 05 17 80 	movls	r5,r2
8000281c:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002820:	e0 41 00 52 	cp.w	r1,82
80002824:	c1 01       	brne	80002844 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
80002826:	a7 a5       	sbr	r5,0x6
80002828:	5c 55       	castu.b	r5
8000282a:	0a 9a       	mov	r10,r5
8000282c:	33 5b       	mov	r11,53
8000282e:	0c 9c       	mov	r12,r6
80002830:	f0 1f 00 16 	mcall	80002888 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002834:	30 4b       	mov	r11,4
80002836:	31 1c       	mov	r12,17
80002838:	f0 1f 00 15 	mcall	8000288c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
8000283c:	49 5c       	lddpc	r12,80002890 <CANSendMsg+0x130>
8000283e:	f0 1f 00 16 	mcall	80002894 <CANSendMsg+0x134>
80002842:	c0 68       	rjmp	8000284e <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
80002844:	0a 9a       	mov	r10,r5
80002846:	33 5b       	mov	r11,53
80002848:	0c 9c       	mov	r12,r6
8000284a:	f0 1f 00 10 	mcall	80002888 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
8000284e:	58 05       	cp.w	r5,0
80002850:	e0 8a 00 0e 	brle	8000286c <CANSendMsg+0x10c>
80002854:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002856:	0e 9b       	mov	r11,r7
80002858:	2c ab       	sub	r11,-54
8000285a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
8000285e:	5c 5b       	castu.b	r11
80002860:	0c 9c       	mov	r12,r6
80002862:	f0 1f 00 0a 	mcall	80002888 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002866:	2f f7       	sub	r7,-1
80002868:	0a 37       	cp.w	r7,r5
8000286a:	cf 65       	brlt	80002856 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
8000286c:	30 8a       	mov	r10,8
8000286e:	33 0b       	mov	r11,48
80002870:	0c 9c       	mov	r12,r6
80002872:	f0 1f 00 06 	mcall	80002888 <CANSendMsg+0x128>
80002876:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000287a:	e0 47 00 64 	cp.w	r7,100
8000287e:	c9 01       	brne	8000279e <CANSendMsg+0x3e>
80002880:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	25 c0       	sub	r0,92
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	23 2c       	sub	r12,50
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	31 a4       	mov	r4,26
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	96 74       	ld.sh	r4,r11[0xe]
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	31 0c       	mov	r12,16

80002898 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002898:	d4 31       	pushm	r0-r7,lr
8000289a:	18 95       	mov	r5,r12
8000289c:	16 92       	mov	r2,r11
8000289e:	14 93       	mov	r3,r10
800028a0:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
800028a2:	f0 1f 00 4c 	mcall	800029d0 <CANGetMsg+0x138>

        if( (temp & 3) == 0 )
800028a6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800028aa:	e0 80 00 91 	breq	800029cc <CANGetMsg+0x134>
            return FALSE;
        temp&=0x03;
        if(temp==1){
800028ae:	58 1c       	cp.w	r12,1
800028b0:	c0 31       	brne	800028b6 <CANGetMsg+0x1e>
800028b2:	36 16       	mov	r6,97
800028b4:	c0 58       	rjmp	800028be <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
800028b6:	58 2c       	cp.w	r12,2
800028b8:	e0 81 00 8a 	brne	800029cc <CANGetMsg+0x134>
800028bc:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
800028be:	0c 9b       	mov	r11,r6
800028c0:	0a 9c       	mov	r12,r5
800028c2:	f0 1f 00 45 	mcall	800029d4 <CANGetMsg+0x13c>
800028c6:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
800028c8:	ec cb ff ff 	sub	r11,r6,-1
800028cc:	5c 5b       	castu.b	r11
800028ce:	0a 9c       	mov	r12,r5
800028d0:	f0 1f 00 41 	mcall	800029d4 <CANGetMsg+0x13c>
800028d4:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
800028d6:	ec cb ff fe 	sub	r11,r6,-2
800028da:	5c 5b       	castu.b	r11
800028dc:	0a 9c       	mov	r12,r5
800028de:	f0 1f 00 3e 	mcall	800029d4 <CANGetMsg+0x13c>
800028e2:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
800028e4:	ec cb ff fd 	sub	r11,r6,-3
800028e8:	5c 5b       	castu.b	r11
800028ea:	0a 9c       	mov	r12,r5
800028ec:	f0 1f 00 3a 	mcall	800029d4 <CANGetMsg+0x13c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800028f0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800028f4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800028f8:	c0 71       	brne	80002906 <CANGetMsg+0x6e>
        {
            *pIdentifier = S1<<3 | S2>>5;
800028fa:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800028fe:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002902:	85 01       	st.w	r2[0x0],r1
80002904:	c0 e8       	rjmp	80002920 <CANGetMsg+0x88>

        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002906:	a9 60       	lsl	r0,0x8
80002908:	e1 e1 11 51 	or	r1,r0,r1<<0x15
8000290c:	e3 ec 10 0c 	or	r12,r1,r12
80002910:	e2 18 00 1c 	andl	r8,0x1c,COH
80002914:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002918:	0e 48       	or	r8,r7
8000291a:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000291e:	85 0c       	st.w	r2[0x0],r12
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002920:	ec cb ff fc 	sub	r11,r6,-4
80002924:	5c 5b       	castu.b	r11
80002926:	0a 9c       	mov	r12,r5
80002928:	f0 1f 00 2b 	mcall	800029d4 <CANGetMsg+0x13c>
8000292c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002930:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
80002932:	30 88       	mov	r8,8
80002934:	f0 0c 18 00 	cp.b	r12,r8
80002938:	e0 88 00 07 	brls	80002946 <CANGetMsg+0xae>
            *pMsgSize = 8;
8000293c:	a8 88       	st.b	r4[0x0],r8
8000293e:	2f b6       	sub	r6,-5
80002940:	5c 56       	castu.b	r6
80002942:	30 07       	mov	r7,0
80002944:	c0 58       	rjmp	8000294e <CANGetMsg+0xb6>

        for( temp = 0; temp < *pMsgSize; temp++ ){
80002946:	58 0c       	cp.w	r12,0
80002948:	fe 99 ff fb 	brgt	8000293e <CANGetMsg+0xa6>
8000294c:	c0 e8       	rjmp	80002968 <CANGetMsg+0xd0>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
8000294e:	0c 9b       	mov	r11,r6
80002950:	0a 9c       	mov	r12,r5
80002952:	f0 1f 00 21 	mcall	800029d4 <CANGetMsg+0x13c>
80002956:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000295a:	2f f7       	sub	r7,-1
8000295c:	2f f6       	sub	r6,-1
8000295e:	5c 56       	castu.b	r6
80002960:	09 88       	ld.ub	r8,r4[0x0]
80002962:	0e 38       	cp.w	r8,r7
80002964:	fe 99 ff f5 	brgt	8000294e <CANGetMsg+0xb6>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002968:	36 0b       	mov	r11,96
8000296a:	0a 9c       	mov	r12,r5
8000296c:	f0 1f 00 1a 	mcall	800029d4 <CANGetMsg+0x13c>
80002970:	e2 1c 00 08 	andl	r12,0x8,COH
80002974:	c0 81       	brne	80002984 <CANGetMsg+0xec>
80002976:	37 0b       	mov	r11,112
80002978:	0a 9c       	mov	r12,r5
8000297a:	f0 1f 00 17 	mcall	800029d4 <CANGetMsg+0x13c>
8000297e:	e2 1c 00 08 	andl	r12,0x8,COH
80002982:	c1 a0       	breq	800029b6 <CANGetMsg+0x11e>
80002984:	64 08       	ld.w	r8,r2[0x0]
80002986:	58 18       	cp.w	r8,1
80002988:	c1 71       	brne	800029b6 <CANGetMsg+0x11e>
                    {
                    Msg[0] = 0;
8000298a:	30 08       	mov	r8,0
8000298c:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
8000298e:	30 18       	mov	r8,1
80002990:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002992:	30 28       	mov	r8,2
80002994:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002996:	30 38       	mov	r8,3
80002998:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
8000299a:	30 08       	mov	r8,0
8000299c:	30 49       	mov	r9,4
8000299e:	06 9a       	mov	r10,r3
800029a0:	64 0b       	ld.w	r11,r2[0x0]
800029a2:	0a 9c       	mov	r12,r5
800029a4:	f0 1f 00 0d 	mcall	800029d8 <CANGetMsg+0x140>
                    dip204_set_cursor_position(17,4);
800029a8:	30 4b       	mov	r11,4
800029aa:	31 1c       	mov	r12,17
800029ac:	f0 1f 00 0c 	mcall	800029dc <CANGetMsg+0x144>
                    dip204_printf_string("Re F");
800029b0:	48 cc       	lddpc	r12,800029e0 <CANGetMsg+0x148>
800029b2:	f0 1f 00 0d 	mcall	800029e4 <CANGetMsg+0x14c>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800029b6:	30 0a       	mov	r10,0
800029b8:	32 cb       	mov	r11,44
800029ba:	14 9c       	mov	r12,r10
800029bc:	f0 1f 00 0b 	mcall	800029e8 <CANGetMsg+0x150>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800029c0:	30 0a       	mov	r10,0
800029c2:	32 cb       	mov	r11,44
800029c4:	14 9c       	mov	r12,r10
800029c6:	f0 1f 00 09 	mcall	800029e8 <CANGetMsg+0x150>
800029ca:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800029cc:	d8 3a       	popm	r0-r7,pc,r12=0
800029ce:	00 00       	add	r0,r0
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	22 a0       	sub	r0,42
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	25 c0       	sub	r0,92
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	27 60       	sub	r0,118
800029dc:	80 00       	ld.sh	r0,r0[0x0]
800029de:	31 a4       	mov	r4,26
800029e0:	80 00       	ld.sh	r0,r0[0x0]
800029e2:	96 74       	ld.sh	r4,r11[0xe]
800029e4:	80 00       	ld.sh	r0,r0[0x0]
800029e6:	31 0c       	mov	r12,16
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	23 2c       	sub	r12,50

800029ec <nodeCount>:
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
{
800029ec:	48 78       	lddpc	r8,80002a08 <nodeCount+0x1c>
	dip204_set_cursor_position(6, 3);
	dip204_printf_string("%d", temper);

}

UINT8 nodeCount(void)
800029ee:	f0 ca ff 60 	sub	r10,r8,-160
{
	UINT8 l;
	
	for(int j = 0; j < 16 ; ++j)
	{
		ids = nFrame[j].ID;
800029f2:	90 09       	ld.sh	r9,r8[0x0]
		
		//If there was a node found at the j'th bit 1 is added to l
		if(ids != 0)
800029f4:	58 09       	cp.w	r9,0
800029f6:	c0 30       	breq	800029fc <nodeCount+0x10>
		{
			++l;
800029f8:	2f fc       	sub	r12,-1
800029fa:	5c 5c       	castu.b	r12
800029fc:	2f 68       	sub	r8,-10

UINT8 nodeCount(void)
{
	UINT8 l;
	
	for(int j = 0; j < 16 ; ++j)
800029fe:	14 38       	cp.w	r8,r10
80002a00:	cf 91       	brne	800029f2 <nodeCount+0x6>
80002a02:	48 38       	lddpc	r8,80002a0c <nodeCount+0x20>
80002a04:	b0 09       	st.h	r8[0x0],r9
// 	{
// 		--l;
// 	}
	return l;
	
}
80002a06:	5e fc       	retal	r12
80002a08:	00 00       	add	r0,r0
80002a0a:	06 74       	tst	r4,r3
80002a0c:	00 00       	add	r0,r0
80002a0e:	06 60       	and	r0,r3

80002a10 <initBoard>:
	dip204_printf_string("A L:");
	dip204_set_cursor_position(15, 1);
	dip204_printf_string("%d", nodeCount());
}
void initBoard(void)
{
80002a10:	d4 01       	pushm	lr
	//Enable ADC channels
	adc_enable( &AVR32_ADC, ADC_TEMPERATURE_CHANNEL );
80002a12:	30 0b       	mov	r11,0
80002a14:	fe 7c 3c 00 	mov	r12,-50176
80002a18:	f0 1f 00 1c 	mcall	80002a88 <initBoard+0x78>
	adc_enable( &AVR32_ADC, ADC_LIGHT_CHANNEL );
80002a1c:	30 2b       	mov	r11,2
80002a1e:	fe 7c 3c 00 	mov	r12,-50176
80002a22:	f0 1f 00 1a 	mcall	80002a88 <initBoard+0x78>

	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
80002a26:	30 3a       	mov	r10,3
80002a28:	e0 6b 1b 00 	mov	r11,6912
80002a2c:	ea 1b 00 b7 	orh	r11,0xb7
80002a30:	fe 7c 0c 00 	mov	r12,-62464
80002a34:	f0 1f 00 16 	mcall	80002a8c <initBoard+0x7c>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
80002a38:	f0 1f 00 16 	mcall	80002a90 <initBoard+0x80>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002a3c:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002a3e:	f0 1f 00 16 	mcall	80002a94 <initBoard+0x84>
	Enable_global_interrupt();
80002a42:	d5 03       	csrf	0x10

	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&interrupt, AVR32_RTC_IRQ, AVR32_INTC_INT0);
80002a44:	30 0a       	mov	r10,0
80002a46:	32 8b       	mov	r11,40
80002a48:	49 4c       	lddpc	r12,80002a98 <initBoard+0x88>
80002a4a:	f0 1f 00 15 	mcall	80002a9c <initBoard+0x8c>
	rtc_init(&AVR32_RTC, RTC_OSC_32KHZ, 14);
80002a4e:	30 ea       	mov	r10,14
80002a50:	30 1b       	mov	r11,1
80002a52:	fe 7c 0d 00 	mov	r12,-62208
80002a56:	f0 1f 00 13 	mcall	80002aa0 <initBoard+0x90>
	// Set top value to 0 to generate an interrupt every seconds */
	rtc_set_top_value(&AVR32_RTC, 0);
80002a5a:	30 0b       	mov	r11,0
80002a5c:	fe 7c 0d 00 	mov	r12,-62208
80002a60:	f0 1f 00 11 	mcall	80002aa4 <initBoard+0x94>
	// Enable the interrupts
	rtc_enable_interrupt(&AVR32_RTC);
80002a64:	fe 7c 0d 00 	mov	r12,-62208
80002a68:	f0 1f 00 10 	mcall	80002aa8 <initBoard+0x98>
	// Enable the RTC
	rtc_enable(&AVR32_RTC);
80002a6c:	fe 7c 0d 00 	mov	r12,-62208
80002a70:	f0 1f 00 0f 	mcall	80002aac <initBoard+0x9c>
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
80002a74:	f0 1f 00 0f 	mcall	80002ab0 <initBoard+0xa0>
	dip204_init(100,1);
80002a78:	30 1b       	mov	r11,1
80002a7a:	36 4c       	mov	r12,100
80002a7c:	f0 1f 00 0e 	mcall	80002ab4 <initBoard+0xa4>
	dip204_clear_display();
80002a80:	f0 1f 00 0e 	mcall	80002ab8 <initBoard+0xa8>
}
80002a84:	d8 02       	popm	pc
80002a86:	00 00       	add	r0,r0
80002a88:	80 00       	ld.sh	r0,r0[0x0]
80002a8a:	20 0e       	sub	lr,0
80002a8c:	80 00       	ld.sh	r0,r0[0x0]
80002a8e:	37 60       	mov	r0,118
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	22 0c       	sub	r12,32
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	35 f4       	mov	r4,95
80002a98:	80 00       	ld.sh	r0,r0[0x0]
80002a9a:	2a bc       	sub	r12,-85
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	35 74       	mov	r4,87
80002aa0:	80 00       	ld.sh	r0,r0[0x0]
80002aa2:	20 ec       	sub	r12,14
80002aa4:	80 00       	ld.sh	r0,r0[0x0]
80002aa6:	20 a8       	sub	r8,10
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	20 a0       	sub	r0,10
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	20 7c       	sub	r12,7
80002ab0:	80 00       	ld.sh	r0,r0[0x0]
80002ab2:	21 80       	sub	r0,24
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	32 8c       	mov	r12,40
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	32 30       	mov	r0,35

80002abc <interrupt>:
	return l;
	
}

__attribute__((__interrupt__)) static void interrupt(void)
{	
80002abc:	d4 01       	pushm	lr
	//Send message
	if(CANTxReady(0))
80002abe:	30 0c       	mov	r12,0
80002ac0:	f0 1f 00 0c 	mcall	80002af0 <interrupt+0x34>
80002ac4:	c1 00       	breq	80002ae4 <interrupt+0x28>
	{
		CANSendMsg(0, ownId, nFrame[0x00F & ownId].mssg, 8, 0);
80002ac6:	48 c8       	lddpc	r8,80002af4 <interrupt+0x38>
80002ac8:	90 8b       	ld.uh	r11,r8[0x0]
80002aca:	f5 db c0 04 	bfextu	r10,r11,0x0,0x4
80002ace:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80002ad2:	48 a8       	lddpc	r8,80002af8 <interrupt+0x3c>
80002ad4:	f0 0a 00 1a 	add	r10,r8,r10<<0x1
80002ad8:	30 08       	mov	r8,0
80002ada:	30 89       	mov	r9,8
80002adc:	2f ea       	sub	r10,-2
80002ade:	10 9c       	mov	r12,r8
80002ae0:	f0 1f 00 07 	mcall	80002afc <interrupt+0x40>
	}
	
	rtc_clear_interrupt(&AVR32_RTC);
80002ae4:	fe 7c 0d 00 	mov	r12,-62208
80002ae8:	f0 1f 00 06 	mcall	80002b00 <interrupt+0x44>
}
80002aec:	d4 02       	popm	lr
80002aee:	d6 03       	rete
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	23 04       	sub	r4,48
80002af4:	00 00       	add	r0,r0
80002af6:	00 08       	add	r8,r0
80002af8:	00 00       	add	r0,r0
80002afa:	06 74       	tst	r4,r3
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	27 60       	sub	r0,118
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	20 cc       	sub	r12,12

80002b04 <printLCD>:
	dip204_printf_string("%d",  cold);
}


void printLCD(void)
{					
80002b04:	d4 01       	pushm	lr
	dip204_set_cursor_position(1, 1);
80002b06:	30 1b       	mov	r11,1
80002b08:	16 9c       	mov	r12,r11
80002b0a:	f0 1f 00 1b 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("Active nodes:");
80002b0e:	49 bc       	lddpc	r12,80002b78 <printLCD+0x74>
80002b10:	f0 1f 00 1b 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(1, 3);
80002b14:	30 3b       	mov	r11,3
80002b16:	30 1c       	mov	r12,1
80002b18:	f0 1f 00 17 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("O T:");
80002b1c:	49 9c       	lddpc	r12,80002b80 <printLCD+0x7c>
80002b1e:	f0 1f 00 18 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(1, 4);
80002b22:	30 4b       	mov	r11,4
80002b24:	30 1c       	mov	r12,1
80002b26:	f0 1f 00 14 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("N:");
80002b2a:	49 7c       	lddpc	r12,80002b84 <printLCD+0x80>
80002b2c:	f0 1f 00 14 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(10, 3);
80002b30:	30 3b       	mov	r11,3
80002b32:	30 ac       	mov	r12,10
80002b34:	f0 1f 00 10 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("A T:");
80002b38:	49 4c       	lddpc	r12,80002b88 <printLCD+0x84>
80002b3a:	f0 1f 00 11 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(1, 2);
80002b3e:	30 2b       	mov	r11,2
80002b40:	30 1c       	mov	r12,1
80002b42:	f0 1f 00 0d 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("O L:");
80002b46:	49 2c       	lddpc	r12,80002b8c <printLCD+0x88>
80002b48:	f0 1f 00 0d 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(10, 2);
80002b4c:	30 2b       	mov	r11,2
80002b4e:	30 ac       	mov	r12,10
80002b50:	f0 1f 00 09 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("A L:");
80002b54:	48 fc       	lddpc	r12,80002b90 <printLCD+0x8c>
80002b56:	f0 1f 00 0a 	mcall	80002b7c <printLCD+0x78>
	dip204_set_cursor_position(15, 1);
80002b5a:	30 1b       	mov	r11,1
80002b5c:	30 fc       	mov	r12,15
80002b5e:	f0 1f 00 06 	mcall	80002b74 <printLCD+0x70>
	dip204_printf_string("%d", nodeCount());
80002b62:	f0 1f 00 0d 	mcall	80002b94 <printLCD+0x90>
80002b66:	1a dc       	st.w	--sp,r12
80002b68:	48 cc       	lddpc	r12,80002b98 <printLCD+0x94>
80002b6a:	f0 1f 00 05 	mcall	80002b7c <printLCD+0x78>
80002b6e:	2f fd       	sub	sp,-4
}
80002b70:	d8 02       	popm	pc
80002b72:	00 00       	add	r0,r0
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	31 a4       	mov	r4,26
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	96 7c       	ld.sh	r12,r11[0xe]
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	31 0c       	mov	r12,16
80002b80:	80 00       	ld.sh	r0,r0[0x0]
80002b82:	96 8c       	ld.uh	r12,r11[0x0]
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	96 94       	ld.uh	r4,r11[0x2]
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	96 98       	ld.uh	r8,r11[0x2]
80002b8c:	80 00       	ld.sh	r0,r0[0x0]
80002b8e:	96 a0       	ld.uh	r0,r11[0x4]
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	96 a8       	ld.uh	r8,r11[0x4]
80002b94:	80 00       	ld.sh	r0,r0[0x0]
80002b96:	29 ec       	sub	r12,-98
80002b98:	80 00       	ld.sh	r0,r0[0x0]
80002b9a:	96 b0       	ld.uh	r0,r11[0x6]

80002b9c <average>:
// 	}
// 
// 	gpio_clear_pin_interrupt_flag(Switch1);
// }
void average(void)
{
80002b9c:	d4 31       	pushm	r0-r7,lr
80002b9e:	20 5d       	sub	sp,20
	UINT16 night = 0;
	UINT16 warm = 0;	
	UINT16 cold = 0;
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
80002ba0:	f0 1f 00 5b 	mcall	80002d0c <average+0x170>
80002ba4:	4d b4       	lddpc	r4,80002d10 <average+0x174>
80002ba6:	e8 c7 ff fc 	sub	r7,r4,-4
// 		x = 1;
// 	}
// 
// 	gpio_clear_pin_interrupt_flag(Switch1);
// }
void average(void)
80002baa:	e8 c4 ff 5c 	sub	r4,r4,-164
80002bae:	0e 98       	mov	r8,r7
80002bb0:	30 09       	mov	r9,0
80002bb2:	12 9a       	mov	r10,r9
	UINT16 actNodes = nodeCount();
	
	//Calculating total light and temp received
	for(int i = 0; i < 16; ++i)
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
80002bb4:	11 86       	ld.ub	r6,r8[0x0]
80002bb6:	11 9b       	ld.ub	r11,r8[0x1]
80002bb8:	f7 e6 10 8b 	or	r11,r11,r6<<0x8
80002bbc:	16 0a       	add	r10,r11
80002bbe:	5c 8a       	casts.h	r10
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
80002bc0:	f1 36 ff fe 	ld.ub	r6,r8[-2]
80002bc4:	f1 3b ff ff 	ld.ub	r11,r8[-1]
80002bc8:	f7 e6 10 8b 	or	r11,r11,r6<<0x8
80002bcc:	16 09       	add	r9,r11
80002bce:	5c 89       	casts.h	r9
80002bd0:	2f 68       	sub	r8,-10
	UINT16 lighttot= 0; 
	UINT16 tempertot = 0;
	UINT16 actNodes = nodeCount();
	
	//Calculating total light and temp received
	for(int i = 0; i < 16; ++i)
80002bd2:	08 38       	cp.w	r8,r4
80002bd4:	cf 01       	brne	80002bb4 <average+0x18>
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 16; ++i)
	{
		if(((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) < ((lighttot/actNodes)/2) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002bd6:	f7 da c0 10 	bfextu	r11,r10,0x0,0x10
80002bda:	5c 7c       	castu.h	r12
80002bdc:	f6 0c 0d 0a 	divu	r10,r11,r12
80002be0:	f1 da b0 10 	bfexts	r8,r10,0x0,0x10
80002be4:	50 48       	stdsp	sp[0x10],r8
80002be6:	e5 d8 c0 2f 	bfextu	r2,r8,0x1,0xf
		{
			++night;
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) > ((tempertot/actNodes)*1.15))
80002bea:	5c 79       	castu.h	r9
80002bec:	f2 0c 0d 08 	divu	r8,r9,r12
80002bf0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002bf4:	50 3a       	stdsp	sp[0xc],r10
80002bf6:	14 9c       	mov	r12,r10
80002bf8:	f0 1f 00 47 	mcall	80002d14 <average+0x178>
80002bfc:	e0 68 66 66 	mov	r8,26214
80002c00:	ea 18 66 66 	orh	r8,0x6666
80002c04:	e0 69 66 66 	mov	r9,26214
80002c08:	ea 19 3f f2 	orh	r9,0x3ff2
80002c0c:	f0 1f 00 43 	mcall	80002d18 <average+0x17c>
80002c10:	fa eb 00 00 	st.d	sp[0],r10
		{
			++warm;
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) < ((tempertot/actNodes)/3) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002c14:	e0 61 aa ab 	mov	r1,43691
80002c18:	ea 11 aa aa 	orh	r1,0xaaaa
80002c1c:	40 39       	lddsp	r9,sp[0xc]
80002c1e:	f2 01 06 40 	mulu.d	r0,r9,r1
80002c22:	e3 d1 c0 30 	bfextu	r1,r1,0x1,0x10
80002c26:	30 00       	mov	r0,0
80002c28:	00 93       	mov	r3,r0
80002c2a:	50 20       	stdsp	sp[0x8],r0
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 16; ++i)
	{
		if(((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) < ((lighttot/actNodes)/2) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002c2c:	0f 85       	ld.ub	r5,r7[0x0]
80002c2e:	0f 98       	ld.ub	r8,r7[0x1]
80002c30:	f1 e5 10 85 	or	r5,r8,r5<<0x8
80002c34:	04 35       	cp.w	r5,r2
80002c36:	c0 74       	brge	80002c44 <average+0xa8>
80002c38:	58 05       	cp.w	r5,0
80002c3a:	c0 50       	breq	80002c44 <average+0xa8>
		{
			++night;
80002c3c:	40 28       	lddsp	r8,sp[0x8]
80002c3e:	2f f8       	sub	r8,-1
80002c40:	5c 88       	casts.h	r8
80002c42:	50 28       	stdsp	sp[0x8],r8
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) > ((tempertot/actNodes)*1.15))
80002c44:	ef 36 ff fe 	ld.ub	r6,r7[-2]
80002c48:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002c4c:	f1 e6 10 86 	or	r6,r8,r6<<0x8
80002c50:	0c 9c       	mov	r12,r6
80002c52:	f0 1f 00 31 	mcall	80002d14 <average+0x178>
80002c56:	14 98       	mov	r8,r10
80002c58:	16 99       	mov	r9,r11
80002c5a:	fa ea 00 00 	ld.d	r10,sp[0]
80002c5e:	f0 1f 00 30 	mcall	80002d1c <average+0x180>
80002c62:	c0 30       	breq	80002c68 <average+0xcc>
		{
			++warm;
80002c64:	2f f3       	sub	r3,-1
80002c66:	5c 83       	casts.h	r3
		}
		if(((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]) < ((tempertot/actNodes)/3) && ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]) != 0)
80002c68:	02 36       	cp.w	r6,r1
80002c6a:	c0 54       	brge	80002c74 <average+0xd8>
80002c6c:	58 05       	cp.w	r5,0
80002c6e:	c0 30       	breq	80002c74 <average+0xd8>
		{
			++cold;
80002c70:	2f f0       	sub	r0,-1
80002c72:	5c 80       	casts.h	r0
80002c74:	2f 67       	sub	r7,-10
	{
		lighttot += ((((UINT16)nFrame[i].mssg[2]) << 8 ) | nFrame[i].mssg[3]);
		tempertot += ((((UINT16)nFrame[i].mssg[0]) << 8 ) | nFrame[i].mssg[1]);
	}
	
	for(int i = 0; i < 16; ++i)
80002c76:	0e 34       	cp.w	r4,r7
80002c78:	cd a1       	brne	80002c2c <average+0x90>
		{
			++cold;
		}
	}

		if (night == 0 && cold == 0)
80002c7a:	40 29       	lddsp	r9,sp[0x8]
80002c7c:	00 49       	or	r9,r0
80002c7e:	30 08       	mov	r8,0
80002c80:	f0 09 19 00 	cp.h	r9,r8
80002c84:	c0 51       	brne	80002c8e <average+0xf2>
		{
			LED_Display(1);
80002c86:	30 1c       	mov	r12,1
80002c88:	f0 1f 00 26 	mcall	80002d20 <average+0x184>
80002c8c:	c0 d8       	rjmp	80002ca6 <average+0x10a>
		}

		else if(night == 1)
80002c8e:	30 18       	mov	r8,1
80002c90:	40 2a       	lddsp	r10,sp[0x8]
80002c92:	f0 0a 19 00 	cp.h	r10,r8
80002c96:	c0 51       	brne	80002ca0 <average+0x104>
		{
			LED_On(5);
80002c98:	30 5c       	mov	r12,5
80002c9a:	f0 1f 00 23 	mcall	80002d24 <average+0x188>
80002c9e:	c0 48       	rjmp	80002ca6 <average+0x10a>
		}
		else
		{
			LED_On(6);
80002ca0:	30 6c       	mov	r12,6
80002ca2:	f0 1f 00 21 	mcall	80002d24 <average+0x188>
		}
	
	
	//Printing values to display
	dip204_set_cursor_position(15, 3);
80002ca6:	30 3b       	mov	r11,3
80002ca8:	30 fc       	mov	r12,15
80002caa:	f0 1f 00 20 	mcall	80002d28 <average+0x18c>
	dip204_printf_string("%d",  (tempertot/actNodes));
80002cae:	4a 07       	lddpc	r7,80002d2c <average+0x190>
80002cb0:	40 39       	lddsp	r9,sp[0xc]
80002cb2:	1a d9       	st.w	--sp,r9
80002cb4:	0e 9c       	mov	r12,r7
80002cb6:	f0 1f 00 1f 	mcall	80002d30 <average+0x194>
	dip204_set_cursor_position(15, 2);
80002cba:	30 2b       	mov	r11,2
80002cbc:	30 fc       	mov	r12,15
80002cbe:	f0 1f 00 1b 	mcall	80002d28 <average+0x18c>
	dip204_printf_string("%d",  (lighttot/actNodes));
80002cc2:	fb 18 00 16 	ld.uh	r8,sp[22]
80002cc6:	1a d8       	st.w	--sp,r8
80002cc8:	0e 9c       	mov	r12,r7
80002cca:	f0 1f 00 1a 	mcall	80002d30 <average+0x194>
	dip204_set_cursor_position(4, 4);
80002cce:	30 4b       	mov	r11,4
80002cd0:	16 9c       	mov	r12,r11
80002cd2:	f0 1f 00 16 	mcall	80002d28 <average+0x18c>
	dip204_printf_string("%d",  night);
80002cd6:	fb 18 00 12 	ld.uh	r8,sp[18]
80002cda:	1a d8       	st.w	--sp,r8
80002cdc:	0e 9c       	mov	r12,r7
80002cde:	f0 1f 00 15 	mcall	80002d30 <average+0x194>
	dip204_set_cursor_position(6, 4);
80002ce2:	30 4b       	mov	r11,4
80002ce4:	30 6c       	mov	r12,6
80002ce6:	f0 1f 00 11 	mcall	80002d28 <average+0x18c>
	dip204_printf_string("%d",  warm);
80002cea:	5c 73       	castu.h	r3
80002cec:	1a d3       	st.w	--sp,r3
80002cee:	0e 9c       	mov	r12,r7
80002cf0:	f0 1f 00 10 	mcall	80002d30 <average+0x194>
	dip204_set_cursor_position(8, 4);
80002cf4:	30 4b       	mov	r11,4
80002cf6:	30 8c       	mov	r12,8
80002cf8:	f0 1f 00 0c 	mcall	80002d28 <average+0x18c>
	dip204_printf_string("%d",  cold);
80002cfc:	5c 70       	castu.h	r0
80002cfe:	1a d0       	st.w	--sp,r0
80002d00:	0e 9c       	mov	r12,r7
80002d02:	f0 1f 00 0c 	mcall	80002d30 <average+0x194>
80002d06:	2f bd       	sub	sp,-20
}
80002d08:	2f bd       	sub	sp,-20
80002d0a:	d8 32       	popm	r0-r7,pc
80002d0c:	80 00       	ld.sh	r0,r0[0x0]
80002d0e:	29 ec       	sub	r12,-98
80002d10:	00 00       	add	r0,r0
80002d12:	06 74       	tst	r4,r3
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	3c 30       	mov	r0,-61
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	3a 54       	mov	r4,-91
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	3d 10       	mov	r0,-47
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2f 78       	sub	r8,-9
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	2f cc       	sub	r12,-4
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	31 a4       	mov	r4,26
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	96 b0       	ld.uh	r0,r11[0x6]
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	31 0c       	mov	r12,16

80002d34 <readADC>:
	UINT8 mssg[8];

}nFrame[15];

void readADC(void)
{
80002d34:	eb cd 40 80 	pushm	r7,lr
	UINT32 readPot, readLight, readTemp;
	UINT16 potMSB, potLSB, lightMSB, lightLSB, tempMSB, tempLSB;

		
	//Reading ADC channels
	readLight = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80002d38:	30 2b       	mov	r11,2
80002d3a:	fe 7c 3c 00 	mov	r12,-50176
80002d3e:	f0 1f 00 15 	mcall	80002d90 <readADC+0x5c>
80002d42:	18 97       	mov	r7,r12
	readTemp = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80002d44:	30 0b       	mov	r11,0
80002d46:	fe 7c 3c 00 	mov	r12,-50176
80002d4a:	f0 1f 00 12 	mcall	80002d90 <readADC+0x5c>

	tempMSB = (readTemp >> 8) & 0x00000003;
	tempLSB = readTemp & 0x000000FF;
	
	//Adding measurements to struct
	nFrame[0x00F & ownId].mssg[0] = tempMSB;
80002d4e:	49 28       	lddpc	r8,80002d94 <readADC+0x60>
80002d50:	90 89       	ld.uh	r9,r8[0x0]
80002d52:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80002d56:	49 1a       	lddpc	r10,80002d98 <readADC+0x64>
80002d58:	f2 0b 15 02 	lsl	r11,r9,0x2
80002d5c:	f6 09 00 08 	add	r8,r11,r9
80002d60:	f4 08 00 18 	add	r8,r10,r8<<0x1
80002d64:	fd dc c1 02 	bfextu	lr,r12,0x8,0x2
80002d68:	b0 ae       	st.b	r8[0x2],lr
	nFrame[0x00F & ownId].mssg[1] = tempLSB;
80002d6a:	b0 bc       	st.b	r8[0x3],r12
	nFrame[0x00F & ownId].mssg[2] = lightMSB;
80002d6c:	f3 d7 c1 02 	bfextu	r9,r7,0x8,0x2
80002d70:	b0 c9       	st.b	r8[0x4],r9
	nFrame[0x00F & ownId].mssg[3] = lightLSB;
80002d72:	b0 d7       	st.b	r8[0x5],r7
	nFrame[0x00F & ownId].mssg[4] = 0;
80002d74:	f0 ca ff fc 	sub	r10,r8,-4
80002d78:	30 09       	mov	r9,0
80002d7a:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[5] = 0;
80002d7c:	f0 ca ff fb 	sub	r10,r8,-5
80002d80:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[6] = 0;
80002d82:	f0 ca ff fa 	sub	r10,r8,-6
80002d86:	b4 a9       	st.b	r10[0x2],r9
	nFrame[0x00F & ownId].mssg[7] = 0;
80002d88:	2f 98       	sub	r8,-7
80002d8a:	b0 a9       	st.b	r8[0x2],r9
}
80002d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	20 28       	sub	r8,2
80002d94:	00 00       	add	r0,r0
80002d96:	00 08       	add	r8,r0
80002d98:	00 00       	add	r0,r0
80002d9a:	06 74       	tst	r4,r3

80002d9c <ownADC>:

void ownADC(void)
{
80002d9c:	eb cd 40 e0 	pushm	r5-r7,lr
	UINT16 light = 0;
	UINT16 temper= 0;
	
	readADC();
80002da0:	f0 1f 00 15 	mcall	80002df4 <ownADC+0x58>

	// Read light, 2 MSB msg[2], 8 LSB msg[3]
	light = (((UINT16)nFrame[0x00F & ownId].mssg[2]) << 8 ) | nFrame[0x00F & ownId].mssg[3];
80002da4:	49 58       	lddpc	r8,80002df8 <ownADC+0x5c>
80002da6:	90 88       	ld.uh	r8,r8[0x0]
80002da8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002dac:	49 49       	lddpc	r9,80002dfc <ownADC+0x60>
80002dae:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002db2:	f2 08 00 1a 	add	r10,r9,r8<<0x1
80002db6:	15 c6       	ld.ub	r6,r10[0x4]
80002db8:	15 d9       	ld.ub	r9,r10[0x5]
80002dba:	f3 e6 10 86 	or	r6,r9,r6<<0x8
	
	// Read temp, 2 MSB msg[0], 8 LSB msg[1]
	temper = (((UINT16)nFrame[0x00F & ownId].mssg[0]) << 8 ) | nFrame[0x00F & ownId].mssg[1];
80002dbe:	15 a5       	ld.ub	r5,r10[0x2]
80002dc0:	15 b8       	ld.ub	r8,r10[0x3]
80002dc2:	f1 e5 10 85 	or	r5,r8,r5<<0x8
	
	dip204_set_cursor_position(6, 2);
80002dc6:	30 2b       	mov	r11,2
80002dc8:	30 6c       	mov	r12,6
80002dca:	f0 1f 00 0e 	mcall	80002e00 <ownADC+0x64>
	dip204_printf_string("%d", light);
80002dce:	48 e7       	lddpc	r7,80002e04 <ownADC+0x68>
80002dd0:	5c 76       	castu.h	r6
80002dd2:	1a d6       	st.w	--sp,r6
80002dd4:	0e 9c       	mov	r12,r7
80002dd6:	f0 1f 00 0d 	mcall	80002e08 <ownADC+0x6c>
	dip204_set_cursor_position(6, 3);
80002dda:	30 3b       	mov	r11,3
80002ddc:	30 6c       	mov	r12,6
80002dde:	f0 1f 00 09 	mcall	80002e00 <ownADC+0x64>
	dip204_printf_string("%d", temper);
80002de2:	5c 75       	castu.h	r5
80002de4:	1a d5       	st.w	--sp,r5
80002de6:	0e 9c       	mov	r12,r7
80002de8:	f0 1f 00 08 	mcall	80002e08 <ownADC+0x6c>
80002dec:	2f ed       	sub	sp,-8

}
80002dee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002df2:	00 00       	add	r0,r0
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2d 34       	sub	r4,-45
80002df8:	00 00       	add	r0,r0
80002dfa:	00 08       	add	r8,r0
80002dfc:	00 00       	add	r0,r0
80002dfe:	06 74       	tst	r4,r3
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	31 a4       	mov	r4,26
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	96 b0       	ld.uh	r0,r11[0x6]
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	31 0c       	mov	r12,16

80002e0c <main>:
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) 
{
80002e0c:	d4 31       	pushm	r0-r7,lr
80002e0e:	20 3d       	sub	sp,12
	initBoard();
80002e10:	f0 1f 00 49 	mcall	80002f34 <main+0x128>

	//Filtering incoming messages
	UINT16 Mask = 0xFFF0; 
	UINT16 flt = 0x1200;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
80002e14:	e0 68 12 00 	mov	r8,4608
80002e18:	ba 08       	st.h	sp[0x0],r8
80002e1a:	ba 18       	st.h	sp[0x2],r8
80002e1c:	ba 28       	st.h	sp[0x4],r8
80002e1e:	ba 38       	st.h	sp[0x6],r8
80002e20:	ba 48       	st.h	sp[0x8],r8
80002e22:	ba 58       	st.h	sp[0xa],r8
		
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);
80002e24:	1a 99       	mov	r9,sp
80002e26:	e0 6a ff f0 	mov	r10,65520
80002e2a:	30 7b       	mov	r11,7
80002e2c:	30 0c       	mov	r12,0
80002e2e:	f0 1f 00 43 	mcall	80002f38 <main+0x12c>

	while(1)
	{

		adc_start(&AVR32_ADC);
80002e32:	fe 72 3c 00 	mov	r2,-50176

		//Clear memory contents
		ClearMessages(msg);
80002e36:	4c 24       	lddpc	r4,80002f3c <main+0x130>
		
		//If the dongle is connected to a bus
		if(CANRxReady(0) || CANTxReady(0))
80002e38:	30 05       	mov	r5,0
		{
			//Write to display and read ADC
			dip204_clear_display();
			printLCD();
			ownADC();
			dip204_hide_cursor();
80002e3a:	4c 23       	lddpc	r3,80002f40 <main+0x134>
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) 
80002e3c:	e6 c6 ff 60 	sub	r6,r3,-160
			printLCD();
			ownADC();
			dip204_hide_cursor();
			for(int j = 0; j < 16 ; ++j)
			{
				nFrame[j].ID = 0;
80002e40:	30 07       	mov	r7,0
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e42:	e0 61 1b 00 	mov	r1,6912
80002e46:	ea 11 00 b7 	orh	r1,0xb7
	config_dpi204();
	dip204_init(100,1);
	dip204_clear_display();
}

int main(void) 
80002e4a:	e8 c0 ff f8 	sub	r0,r4,-8
	InitializeCANExtended(0, CAN_250kbps, Mask, Flt);

	while(1)
	{

		adc_start(&AVR32_ADC);
80002e4e:	04 9c       	mov	r12,r2
80002e50:	f0 1f 00 3d 	mcall	80002f44 <main+0x138>

		//Clear memory contents
		ClearMessages(msg);
80002e54:	08 9c       	mov	r12,r4
80002e56:	f0 1f 00 3d 	mcall	80002f48 <main+0x13c>
		
		//If the dongle is connected to a bus
		if(CANRxReady(0) || CANTxReady(0))
80002e5a:	0a 9c       	mov	r12,r5
80002e5c:	f0 1f 00 3c 	mcall	80002f4c <main+0x140>
80002e60:	c0 51       	brne	80002e6a <main+0x5e>
80002e62:	0a 9c       	mov	r12,r5
80002e64:	f0 1f 00 3b 	mcall	80002f50 <main+0x144>
80002e68:	c4 30       	breq	80002eee <main+0xe2>
		{
			// Setting own id.
			nFrame[0x00F & ownId].ID = 0x1202;
80002e6a:	4b b8       	lddpc	r8,80002f54 <main+0x148>
80002e6c:	90 88       	ld.uh	r8,r8[0x0]
80002e6e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002e72:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002e76:	e0 69 12 02 	mov	r9,4610
80002e7a:	e6 08 0a 19 	st.h	r3[r8<<0x1],r9

			//Write to display and read ADC
			dip204_clear_display();
80002e7e:	f0 1f 00 37 	mcall	80002f58 <main+0x14c>
			printLCD();
80002e82:	f0 1f 00 37 	mcall	80002f5c <main+0x150>
			ownADC();
80002e86:	f0 1f 00 37 	mcall	80002f60 <main+0x154>
			average();
80002e8a:	f0 1f 00 37 	mcall	80002f64 <main+0x158>
			dip204_hide_cursor();
80002e8e:	f0 1f 00 37 	mcall	80002f68 <main+0x15c>

			//Read any message available
			if(CANRxReady(0))
80002e92:	0a 9c       	mov	r12,r5
80002e94:	f0 1f 00 2e 	mcall	80002f4c <main+0x140>
80002e98:	c1 60       	breq	80002ec4 <main+0xb8>
			{
				if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
80002e9a:	4b 59       	lddpc	r9,80002f6c <main+0x160>
80002e9c:	08 9a       	mov	r10,r4
80002e9e:	4b 5b       	lddpc	r11,80002f70 <main+0x164>
80002ea0:	0a 9c       	mov	r12,r5
80002ea2:	f0 1f 00 35 	mcall	80002f74 <main+0x168>
80002ea6:	c0 f0       	breq	80002ec4 <main+0xb8>
				{					
					//Adding received ID to struct
					nFrame[0x00F & Ident].ID = Ident;
80002ea8:	4b 28       	lddpc	r8,80002f70 <main+0x164>
80002eaa:	70 08       	ld.w	r8,r8[0x0]
80002eac:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80002eb0:	f2 09 00 29 	add	r9,r9,r9<<0x2
80002eb4:	e6 09 00 19 	add	r9,r3,r9<<0x1
80002eb8:	12 b8       	st.h	r9++,r8
80002eba:	08 98       	mov	r8,r4

					//Adding frame to the struct
					for(int i = 0; i < 8; ++i)
					{
						//Adding received message to struct
						nFrame[0x00F & Ident].mssg[i] = msg[i];
80002ebc:	11 3a       	ld.ub	r10,r8++
80002ebe:	12 ca       	st.b	r9++,r10
				{					
					//Adding received ID to struct
					nFrame[0x00F & Ident].ID = Ident;

					//Adding frame to the struct
					for(int i = 0; i < 8; ++i)
80002ec0:	00 38       	cp.w	r8,r0
80002ec2:	cf d1       	brne	80002ebc <main+0xb0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ec4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ec8:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ecc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ed0:	14 38       	cp.w	r8,r10
80002ed2:	e0 88 00 08 	brls	80002ee2 <main+0xd6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ed6:	12 38       	cp.w	r8,r9
80002ed8:	fe 98 ff fa 	brls	80002ecc <main+0xc0>
80002edc:	12 3a       	cp.w	r10,r9
80002ede:	cb 83       	brcs	80002e4e <main+0x42>
80002ee0:	cf 6b       	rjmp	80002ecc <main+0xc0>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ee2:	12 38       	cp.w	r8,r9
80002ee4:	fe 9b ff b5 	brhi	80002e4e <main+0x42>
80002ee8:	12 3a       	cp.w	r10,r9
80002eea:	cb 23       	brcs	80002e4e <main+0x42>
80002eec:	cf 0b       	rjmp	80002ecc <main+0xc0>
		}
		// If the dongle isn't connected
		else
		{
			//Write to display and read ADC
			dip204_clear_display();
80002eee:	f0 1f 00 1b 	mcall	80002f58 <main+0x14c>
			printLCD();
80002ef2:	f0 1f 00 1b 	mcall	80002f5c <main+0x150>
			ownADC();
80002ef6:	f0 1f 00 1b 	mcall	80002f60 <main+0x154>
			dip204_hide_cursor();
80002efa:	f0 1f 00 1c 	mcall	80002f68 <main+0x15c>
80002efe:	06 98       	mov	r8,r3
			for(int j = 0; j < 16 ; ++j)
			{
				nFrame[j].ID = 0;
80002f00:	b0 07       	st.h	r8[0x0],r7
80002f02:	2f 68       	sub	r8,-10
			//Write to display and read ADC
			dip204_clear_display();
			printLCD();
			ownADC();
			dip204_hide_cursor();
			for(int j = 0; j < 16 ; ++j)
80002f04:	0c 38       	cp.w	r8,r6
80002f06:	cf d1       	brne	80002f00 <main+0xf4>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f08:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f0c:	f0 01 00 0a 	add	r10,r8,r1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f10:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f14:	14 38       	cp.w	r8,r10
80002f16:	e0 88 00 08 	brls	80002f26 <main+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f1a:	12 38       	cp.w	r8,r9
80002f1c:	fe 98 ff fa 	brls	80002f10 <main+0x104>
80002f20:	12 3a       	cp.w	r10,r9
80002f22:	c9 63       	brcs	80002e4e <main+0x42>
80002f24:	cf 6b       	rjmp	80002f10 <main+0x104>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f26:	12 38       	cp.w	r8,r9
80002f28:	fe 9b ff 93 	brhi	80002e4e <main+0x42>
80002f2c:	12 3a       	cp.w	r10,r9
80002f2e:	c9 03       	brcs	80002e4e <main+0x42>
80002f30:	cf 0b       	rjmp	80002f10 <main+0x104>
80002f32:	00 00       	add	r0,r0
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2a 10       	sub	r0,-95
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	27 08       	sub	r8,112
80002f3c:	00 00       	add	r0,r0
80002f3e:	06 64       	and	r4,r3
80002f40:	00 00       	add	r0,r0
80002f42:	06 74       	tst	r4,r3
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	20 08       	sub	r8,0
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	21 6c       	sub	r12,22
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	22 f0       	sub	r0,47
80002f50:	80 00       	ld.sh	r0,r0[0x0]
80002f52:	23 04       	sub	r4,48
80002f54:	00 00       	add	r0,r0
80002f56:	00 08       	add	r8,r0
80002f58:	80 00       	ld.sh	r0,r0[0x0]
80002f5a:	32 30       	mov	r0,35
80002f5c:	80 00       	ld.sh	r0,r0[0x0]
80002f5e:	2b 04       	sub	r4,-80
80002f60:	80 00       	ld.sh	r0,r0[0x0]
80002f62:	2d 9c       	sub	r12,-39
80002f64:	80 00       	ld.sh	r0,r0[0x0]
80002f66:	2b 9c       	sub	r12,-71
80002f68:	80 00       	ld.sh	r0,r0[0x0]
80002f6a:	32 00       	mov	r0,32
80002f6c:	00 00       	add	r0,r0
80002f6e:	06 6c       	and	r12,r3
80002f70:	00 00       	add	r0,r0
80002f72:	06 70       	tst	r0,r3
80002f74:	80 00       	ld.sh	r0,r0[0x0]
80002f76:	28 98       	sub	r8,-119

80002f78 <LED_Display>:
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002f78:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80002f7c:	49 28       	lddpc	r8,80002fc4 <LED_Display+0x4c>
80002f7e:	91 0c       	st.w	r8[0x0],r12

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80002f80:	49 28       	lddpc	r8,80002fc8 <LED_Display+0x50>
80002f82:	f0 c9 ff 80 	sub	r9,r8,-128
80002f86:	12 38       	cp.w	r8,r9
80002f88:	5e 2c       	reths	r12
80002f8a:	10 9b       	mov	r11,r8
80002f8c:	2f c8       	sub	r8,-4
{
  return LED_State;
}


void LED_Display(U32 leds)
80002f8e:	f6 cb ff 7c 	sub	r11,r11,-132
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002f92:	f0 f9 ff fc 	ld.w	r9,r8[-4]
80002f96:	a9 69       	lsl	r9,0x8
80002f98:	e0 29 f0 00 	sub	r9,61440
    if (leds & 1)
80002f9c:	f5 dc c0 01 	bfextu	r10,r12,0x0,0x1
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002fa0:	f1 fa 10 00 	ld.wne	r10,r8[0x0]
80002fa4:	f3 fa 1a 16 	st.wne	r9[0x58],r10
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002fa8:	f1 fa 00 00 	ld.weq	r10,r8[0x0]
80002fac:	f3 fa 0a 15 	st.weq	r9[0x54],r10
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002fb0:	70 0a       	ld.w	r10,r8[0x0]
80002fb2:	f3 4a 00 44 	st.w	r9[68],r10
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002fb6:	70 0a       	ld.w	r10,r8[0x0]
80002fb8:	93 1a       	st.w	r9[0x4],r10
80002fba:	2f 08       	sub	r8,-16

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80002fbc:	16 38       	cp.w	r8,r11
80002fbe:	5e 0c       	reteq	r12
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
80002fc0:	a1 9c       	lsr	r12,0x1
80002fc2:	ce 8b       	rjmp	80002f92 <LED_Display+0x1a>
80002fc4:	00 00       	add	r0,r0
80002fc6:	00 0c       	add	r12,r0
80002fc8:	80 00       	ld.sh	r0,r0[0x0]
80002fca:	96 b4       	ld.uh	r4,r11[0x6]

80002fcc <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002fcc:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002fd0:	49 18       	lddpc	r8,80003014 <LED_On+0x48>
80002fd2:	70 09       	ld.w	r9,r8[0x0]
80002fd4:	f9 e9 10 09 	or	r9,r12,r9
80002fd8:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002fda:	58 0c       	cp.w	r12,0
80002fdc:	5e 0c       	reteq	r12
80002fde:	48 f8       	lddpc	r8,80003018 <LED_On+0x4c>
80002fe0:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002fe2:	18 9a       	mov	r10,r12
80002fe4:	5c 9a       	brev	r10
80002fe6:	f4 0a 12 00 	clz	r10,r10
80002fea:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002fec:	f4 09 15 04 	lsl	r9,r10,0x4
80002ff0:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002ff2:	70 09       	ld.w	r9,r8[0x0]
80002ff4:	a9 69       	lsl	r9,0x8
80002ff6:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002ffa:	70 1b       	ld.w	r11,r8[0x4]
80002ffc:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80003000:	70 1b       	ld.w	r11,r8[0x4]
80003002:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80003006:	70 1b       	ld.w	r11,r8[0x4]
80003008:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000300a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000300e:	ce a1       	brne	80002fe2 <LED_On+0x16>
80003010:	5e fc       	retal	r12
80003012:	00 00       	add	r0,r0
80003014:	00 00       	add	r0,r0
80003016:	00 0c       	add	r12,r0
80003018:	80 00       	ld.sh	r0,r0[0x0]
8000301a:	96 b4       	ld.uh	r4,r11[0x6]

8000301c <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
8000301c:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
8000301e:	30 2b       	mov	r11,2
80003020:	fe 7c 28 00 	mov	r12,-55296
80003024:	f0 1f 00 02 	mcall	8000302c <dip204_select+0x10>
}
80003028:	d8 02       	popm	pc
8000302a:	00 00       	add	r0,r0
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	38 9e       	mov	lr,-119

80003030 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80003030:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80003034:	f8 c8 ff f8 	sub	r8,r12,-8
80003038:	30 69       	mov	r9,6
8000303a:	f2 08 18 00 	cp.b	r8,r9
8000303e:	e0 8b 00 0f 	brhi	8000305c <dip204_write_byte+0x2c>
80003042:	30 19       	mov	r9,1
80003044:	f2 08 09 48 	lsl	r8,r9,r8
80003048:	e2 18 00 55 	andl	r8,0x55,COH
8000304c:	c0 80       	breq	8000305c <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
8000304e:	18 9b       	mov	r11,r12
80003050:	fe 7c 28 00 	mov	r12,-55296
80003054:	f0 1f 00 0c 	mcall	80003084 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80003058:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
8000305c:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
8000305e:	f8 07 16 18 	lsr	r7,r12,0x18
80003062:	0e 9b       	mov	r11,r7
80003064:	e2 1b 00 f0 	andl	r11,0xf0,COH
80003068:	fe 7c 28 00 	mov	r12,-55296
8000306c:	f0 1f 00 06 	mcall	80003084 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80003070:	ee 0b 15 04 	lsl	r11,r7,0x4
80003074:	e2 1b 00 f0 	andl	r11,0xf0,COH
80003078:	fe 7c 28 00 	mov	r12,-55296
8000307c:	f0 1f 00 02 	mcall	80003084 <dip204_write_byte+0x54>
80003080:	e3 cd 80 80 	ldm	sp++,r7,pc
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	39 ce       	mov	lr,-100

80003088 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80003088:	eb cd 40 c0 	pushm	r6-r7,lr
8000308c:	20 1d       	sub	sp,4
8000308e:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80003090:	fa c7 ff fc 	sub	r7,sp,-4
80003094:	30 08       	mov	r8,0
80003096:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80003098:	30 0b       	mov	r11,0
8000309a:	fe 7c 28 00 	mov	r12,-55296
8000309e:	f0 1f 00 08 	mcall	800030bc <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
800030a2:	0e 9b       	mov	r11,r7
800030a4:	fe 7c 28 00 	mov	r12,-55296
800030a8:	f0 1f 00 06 	mcall	800030c0 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
800030ac:	1b b8       	ld.ub	r8,sp[0x3]
800030ae:	5c 98       	brev	r8
800030b0:	b9 88       	lsr	r8,0x18
800030b2:	ac 88       	st.b	r6[0x0],r8
}
800030b4:	2f fd       	sub	sp,-4
800030b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030ba:	00 00       	add	r0,r0
800030bc:	80 00       	ld.sh	r0,r0[0x0]
800030be:	39 ce       	mov	lr,-100
800030c0:	80 00       	ld.sh	r0,r0[0x0]
800030c2:	39 f2       	mov	r2,-97

800030c4 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
800030c4:	eb cd 40 c0 	pushm	r6-r7,lr
800030c8:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
800030ca:	fa c7 ff fc 	sub	r7,sp,-4
800030ce:	30 08       	mov	r8,0
800030d0:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
800030d2:	e0 6c 00 fc 	mov	r12,252
800030d6:	f0 1f 00 07 	mcall	800030f0 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
800030da:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
800030dc:	0e 9c       	mov	r12,r7
800030de:	f0 1f 00 06 	mcall	800030f4 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
800030e2:	1b b8       	ld.ub	r8,sp[0x3]
800030e4:	ec 08 18 00 	cp.b	r8,r6
800030e8:	cf a5       	brlt	800030dc <dip204_wait_busy+0x18>
}
800030ea:	2f fd       	sub	sp,-4
800030ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	30 30       	mov	r0,3
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	30 88       	mov	r8,8

800030f8 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
800030f8:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
800030fa:	30 2b       	mov	r11,2
800030fc:	fe 7c 28 00 	mov	r12,-55296
80003100:	f0 1f 00 02 	mcall	80003108 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80003104:	d8 02       	popm	pc
80003106:	00 00       	add	r0,r0
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	38 ea       	mov	r10,-114

8000310c <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
8000310c:	d4 21       	pushm	r4-r7,lr
8000310e:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80003110:	fa ca ff d4 	sub	r10,sp,-44
80003114:	18 9b       	mov	r11,r12
80003116:	1a 9c       	mov	r12,sp
80003118:	f0 1f 00 1e 	mcall	80003190 <dip204_printf_string+0x84>
8000311c:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
8000311e:	31 38       	mov	r8,19
80003120:	f0 0c 18 00 	cp.b	r12,r8
80003124:	e0 8b 00 0e 	brhi	80003140 <dip204_printf_string+0x34>
80003128:	30 0a       	mov	r10,0
8000312a:	31 49       	mov	r9,20
8000312c:	fa c8 ff e8 	sub	r8,sp,-24
80003130:	18 08       	add	r8,r12
80003132:	f1 6a ff e8 	st.b	r8[-24],r10
80003136:	2f fc       	sub	r12,-1
80003138:	5c 5c       	castu.b	r12
8000313a:	f2 0c 18 00 	cp.b	r12,r9
8000313e:	cf 71       	brne	8000312c <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80003140:	f0 1f 00 15 	mcall	80003194 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003144:	30 08       	mov	r8,0
80003146:	1b 89       	ld.ub	r9,sp[0x0]
80003148:	f0 09 18 00 	cp.b	r9,r8
8000314c:	c1 e0       	breq	80003188 <dip204_printf_string+0x7c>
8000314e:	30 06       	mov	r6,0
80003150:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003152:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003156:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80003158:	08 9c       	mov	r12,r4
8000315a:	f0 1f 00 10 	mcall	80003198 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
8000315e:	fa c8 ff e8 	sub	r8,sp,-24
80003162:	f0 06 00 06 	add	r6,r8,r6
80003166:	ed 3c ff e8 	ld.ub	r12,r6[-24]
8000316a:	f0 1f 00 0c 	mcall	80003198 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
8000316e:	2f f7       	sub	r7,-1
80003170:	5c 57       	castu.b	r7
    dip204_wait_busy();
80003172:	f0 1f 00 0b 	mcall	8000319c <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80003176:	0e 96       	mov	r6,r7
80003178:	fa c8 ff e8 	sub	r8,sp,-24
8000317c:	0e 08       	add	r8,r7
8000317e:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80003182:	ea 08 18 00 	cp.b	r8,r5
80003186:	ce 91       	brne	80003158 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80003188:	f0 1f 00 06 	mcall	800031a0 <dip204_printf_string+0x94>
}
8000318c:	2f ad       	sub	sp,-24
8000318e:	d8 22       	popm	r4-r7,pc
80003190:	80 00       	ld.sh	r0,r0[0x0]
80003192:	3e ec       	mov	r12,-18
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	30 1c       	mov	r12,1
80003198:	80 00       	ld.sh	r0,r0[0x0]
8000319a:	30 30       	mov	r0,3
8000319c:	80 00       	ld.sh	r0,r0[0x0]
8000319e:	30 c4       	mov	r4,12
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	30 f8       	mov	r8,15

800031a4 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
800031a4:	eb cd 40 c0 	pushm	r6-r7,lr
800031a8:	18 96       	mov	r6,r12
800031aa:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
800031ac:	f0 1f 00 11 	mcall	800031f0 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
800031b0:	31 48       	mov	r8,20
800031b2:	f0 06 18 00 	cp.b	r6,r8
800031b6:	5f 89       	srls	r9
800031b8:	30 48       	mov	r8,4
800031ba:	f0 07 18 00 	cp.b	r7,r8
800031be:	5f 88       	srls	r8
800031c0:	f3 e8 00 08 	and	r8,r9,r8
800031c4:	c0 31       	brne	800031ca <dip204_set_cursor_position+0x26>
800031c6:	30 06       	mov	r6,0
800031c8:	c0 68       	rjmp	800031d4 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
800031ca:	28 16       	sub	r6,-127
800031cc:	20 17       	sub	r7,1
800031ce:	a5 77       	lsl	r7,0x5
800031d0:	0e 06       	add	r6,r7
800031d2:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
800031d4:	e0 6c 00 f8 	mov	r12,248
800031d8:	f0 1f 00 07 	mcall	800031f4 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
800031dc:	0c 9c       	mov	r12,r6
800031de:	f0 1f 00 06 	mcall	800031f4 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
800031e2:	f0 1f 00 06 	mcall	800031f8 <dip204_set_cursor_position+0x54>
  dip204_unselect();
800031e6:	f0 1f 00 06 	mcall	800031fc <dip204_set_cursor_position+0x58>
}
800031ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031ee:	00 00       	add	r0,r0
800031f0:	80 00       	ld.sh	r0,r0[0x0]
800031f2:	30 1c       	mov	r12,1
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	30 30       	mov	r0,3
800031f8:	80 00       	ld.sh	r0,r0[0x0]
800031fa:	30 c4       	mov	r4,12
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	30 f8       	mov	r8,15

80003200 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80003200:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80003202:	f0 1f 00 08 	mcall	80003220 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003206:	e0 6c 00 f8 	mov	r12,248
8000320a:	f0 1f 00 07 	mcall	80003224 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
8000320e:	30 cc       	mov	r12,12
80003210:	f0 1f 00 05 	mcall	80003224 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80003214:	f0 1f 00 05 	mcall	80003228 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80003218:	f0 1f 00 05 	mcall	8000322c <dip204_hide_cursor+0x2c>
}
8000321c:	d8 02       	popm	pc
8000321e:	00 00       	add	r0,r0
80003220:	80 00       	ld.sh	r0,r0[0x0]
80003222:	30 1c       	mov	r12,1
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	30 30       	mov	r0,3
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	30 c4       	mov	r4,12
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	30 f8       	mov	r8,15

80003230 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80003230:	d4 01       	pushm	lr
  dip204_select();
80003232:	f0 1f 00 13 	mcall	8000327c <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003236:	e0 6c 00 f8 	mov	r12,248
8000323a:	f0 1f 00 12 	mcall	80003280 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
8000323e:	30 1c       	mov	r12,1
80003240:	f0 1f 00 10 	mcall	80003280 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003244:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003248:	e0 69 bb 80 	mov	r9,48000
8000324c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003250:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003254:	14 38       	cp.w	r8,r10
80003256:	e0 88 00 08 	brls	80003266 <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000325a:	12 38       	cp.w	r8,r9
8000325c:	fe 98 ff fa 	brls	80003250 <dip204_clear_display+0x20>
80003260:	12 3a       	cp.w	r10,r9
80003262:	c0 73       	brcs	80003270 <dip204_clear_display+0x40>
80003264:	cf 6b       	rjmp	80003250 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003266:	12 38       	cp.w	r8,r9
80003268:	e0 8b 00 04 	brhi	80003270 <dip204_clear_display+0x40>
8000326c:	12 3a       	cp.w	r10,r9
8000326e:	cf 12       	brcc	80003250 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80003270:	f0 1f 00 05 	mcall	80003284 <dip204_clear_display+0x54>
  dip204_unselect();
80003274:	f0 1f 00 05 	mcall	80003288 <dip204_clear_display+0x58>
}
80003278:	d8 02       	popm	pc
8000327a:	00 00       	add	r0,r0
8000327c:	80 00       	ld.sh	r0,r0[0x0]
8000327e:	30 1c       	mov	r12,1
80003280:	80 00       	ld.sh	r0,r0[0x0]
80003282:	30 30       	mov	r0,3
80003284:	80 00       	ld.sh	r0,r0[0x0]
80003286:	30 c4       	mov	r4,12
80003288:	80 00       	ld.sh	r0,r0[0x0]
8000328a:	30 f8       	mov	r8,15

8000328c <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000328c:	eb cd 40 80 	pushm	r7,lr
80003290:	20 4d       	sub	sp,16
80003292:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80003294:	58 1c       	cp.w	r12,1
80003296:	c3 01       	brne	800032f6 <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80003298:	30 69       	mov	r9,6
8000329a:	4f a8       	lddpc	r8,80003480 <dip204_init+0x1f4>
8000329c:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000329e:	30 2b       	mov	r11,2
800032a0:	33 2c       	mov	r12,50
800032a2:	f0 1f 00 79 	mcall	80003484 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
800032a6:	30 08       	mov	r8,0
800032a8:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
800032aa:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
800032ac:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
800032ae:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
800032b0:	1a 9c       	mov	r12,sp
800032b2:	f0 1f 00 76 	mcall	80003488 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800032b6:	58 07       	cp.w	r7,0
800032b8:	f9 b7 01 31 	movne	r7,49
800032bc:	f9 b7 00 01 	moveq	r7,1
800032c0:	4f 38       	lddpc	r8,8000348c <dip204_init+0x200>
800032c2:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
800032c4:	4f 3b       	lddpc	r11,80003490 <dip204_init+0x204>
800032c6:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800032c8:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800032cc:	ab a8       	sbr	r8,0xa
800032ce:	30 89       	mov	r9,8
800032d0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800032d4:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800032d6:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800032d8:	33 28       	mov	r8,50
800032da:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800032dc:	30 08       	mov	r8,0
800032de:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800032e0:	4e 87       	lddpc	r7,80003480 <dip204_init+0x1f4>
800032e2:	6e 0c       	ld.w	r12,r7[0x0]
800032e4:	f0 1f 00 6c 	mcall	80003494 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
800032e8:	6e 08       	ld.w	r8,r7[0x0]
800032ea:	30 1c       	mov	r12,1
800032ec:	f8 08 09 4c 	lsl	r12,r12,r8
800032f0:	f0 1f 00 6a 	mcall	80003498 <dip204_init+0x20c>
800032f4:	c0 a8       	rjmp	80003308 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
800032f6:	58 0b       	cp.w	r11,0
800032f8:	c0 50       	breq	80003302 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800032fa:	33 2c       	mov	r12,50
800032fc:	f0 1f 00 68 	mcall	8000349c <dip204_init+0x210>
80003300:	c0 48       	rjmp	80003308 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80003302:	33 2c       	mov	r12,50
80003304:	f0 1f 00 67 	mcall	800034a0 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003308:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000330c:	e2 79 a9 80 	mov	r9,240000
80003310:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003314:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003318:	14 38       	cp.w	r8,r10
8000331a:	e0 88 00 08 	brls	8000332a <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000331e:	12 38       	cp.w	r8,r9
80003320:	fe 98 ff fa 	brls	80003314 <dip204_init+0x88>
80003324:	12 3a       	cp.w	r10,r9
80003326:	c6 e3       	brcs	80003402 <dip204_init+0x176>
80003328:	cf 6b       	rjmp	80003314 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000332a:	12 38       	cp.w	r8,r9
8000332c:	e0 8b 00 6b 	brhi	80003402 <dip204_init+0x176>
80003330:	12 3a       	cp.w	r10,r9
80003332:	c6 83       	brcs	80003402 <dip204_init+0x176>
80003334:	cf 0b       	rjmp	80003314 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003336:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000333a:	14 38       	cp.w	r8,r10
8000333c:	e0 88 00 08 	brls	8000334c <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003340:	12 38       	cp.w	r8,r9
80003342:	fe 98 ff fa 	brls	80003336 <dip204_init+0xaa>
80003346:	12 3a       	cp.w	r10,r9
80003348:	c6 b3       	brcs	8000341e <dip204_init+0x192>
8000334a:	cf 6b       	rjmp	80003336 <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000334c:	12 38       	cp.w	r8,r9
8000334e:	e0 8b 00 68 	brhi	8000341e <dip204_init+0x192>
80003352:	12 3a       	cp.w	r10,r9
80003354:	c6 53       	brcs	8000341e <dip204_init+0x192>
80003356:	cf 0b       	rjmp	80003336 <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003358:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000335c:	14 38       	cp.w	r8,r10
8000335e:	e0 88 00 08 	brls	8000336e <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003362:	12 38       	cp.w	r8,r9
80003364:	fe 98 ff fa 	brls	80003358 <dip204_init+0xcc>
80003368:	12 3a       	cp.w	r10,r9
8000336a:	c6 23       	brcs	8000342e <dip204_init+0x1a2>
8000336c:	cf 6b       	rjmp	80003358 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000336e:	12 38       	cp.w	r8,r9
80003370:	e0 8b 00 5f 	brhi	8000342e <dip204_init+0x1a2>
80003374:	12 3a       	cp.w	r10,r9
80003376:	c5 c3       	brcs	8000342e <dip204_init+0x1a2>
80003378:	cf 0b       	rjmp	80003358 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000337a:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000337e:	14 38       	cp.w	r8,r10
80003380:	e0 88 00 08 	brls	80003390 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003384:	12 38       	cp.w	r8,r9
80003386:	fe 98 ff fa 	brls	8000337a <dip204_init+0xee>
8000338a:	12 3a       	cp.w	r10,r9
8000338c:	c5 93       	brcs	8000343e <dip204_init+0x1b2>
8000338e:	cf 6b       	rjmp	8000337a <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003390:	12 38       	cp.w	r8,r9
80003392:	e0 8b 00 56 	brhi	8000343e <dip204_init+0x1b2>
80003396:	12 3a       	cp.w	r10,r9
80003398:	c5 33       	brcs	8000343e <dip204_init+0x1b2>
8000339a:	cf 0b       	rjmp	8000337a <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000339c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033a0:	14 38       	cp.w	r8,r10
800033a2:	e0 88 00 08 	brls	800033b2 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033a6:	12 38       	cp.w	r8,r9
800033a8:	fe 98 ff fa 	brls	8000339c <dip204_init+0x110>
800033ac:	12 3a       	cp.w	r10,r9
800033ae:	c5 03       	brcs	8000344e <dip204_init+0x1c2>
800033b0:	cf 6b       	rjmp	8000339c <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033b2:	12 38       	cp.w	r8,r9
800033b4:	e0 8b 00 4d 	brhi	8000344e <dip204_init+0x1c2>
800033b8:	12 3a       	cp.w	r10,r9
800033ba:	c4 a3       	brcs	8000344e <dip204_init+0x1c2>
800033bc:	cf 0b       	rjmp	8000339c <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033be:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033c2:	14 38       	cp.w	r8,r10
800033c4:	e0 88 00 08 	brls	800033d4 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033c8:	12 38       	cp.w	r8,r9
800033ca:	fe 98 ff fa 	brls	800033be <dip204_init+0x132>
800033ce:	12 3a       	cp.w	r10,r9
800033d0:	c4 93       	brcs	80003462 <dip204_init+0x1d6>
800033d2:	cf 6b       	rjmp	800033be <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033d4:	12 38       	cp.w	r8,r9
800033d6:	e0 8b 00 46 	brhi	80003462 <dip204_init+0x1d6>
800033da:	12 3a       	cp.w	r10,r9
800033dc:	c4 33       	brcs	80003462 <dip204_init+0x1d6>
800033de:	cf 0b       	rjmp	800033be <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800033e0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800033e4:	14 38       	cp.w	r8,r10
800033e6:	e0 88 00 08 	brls	800033f6 <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800033ea:	12 38       	cp.w	r8,r9
800033ec:	fe 98 ff fa 	brls	800033e0 <dip204_init+0x154>
800033f0:	12 3a       	cp.w	r10,r9
800033f2:	c4 03       	brcs	80003472 <dip204_init+0x1e6>
800033f4:	cf 6b       	rjmp	800033e0 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800033f6:	12 38       	cp.w	r8,r9
800033f8:	e0 8b 00 3d 	brhi	80003472 <dip204_init+0x1e6>
800033fc:	12 3a       	cp.w	r10,r9
800033fe:	c3 a3       	brcs	80003472 <dip204_init+0x1e6>
80003400:	cf 0b       	rjmp	800033e0 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80003402:	f0 1f 00 29 	mcall	800034a4 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80003406:	e0 6c 00 f8 	mov	r12,248
8000340a:	f0 1f 00 28 	mcall	800034a8 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000340e:	33 4c       	mov	r12,52
80003410:	f0 1f 00 26 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003414:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003418:	f0 ca d1 20 	sub	r10,r8,-12000
8000341c:	c8 db       	rjmp	80003336 <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000341e:	30 9c       	mov	r12,9
80003420:	f0 1f 00 22 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003424:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003428:	f0 ca d1 20 	sub	r10,r8,-12000
8000342c:	c9 6b       	rjmp	80003358 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000342e:	33 0c       	mov	r12,48
80003430:	f0 1f 00 1e 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003434:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003438:	f0 ca d1 20 	sub	r10,r8,-12000
8000343c:	c9 fb       	rjmp	8000337a <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000343e:	30 fc       	mov	r12,15
80003440:	f0 1f 00 1a 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003444:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003448:	f0 ca d1 20 	sub	r10,r8,-12000
8000344c:	ca 8b       	rjmp	8000339c <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
8000344e:	30 1c       	mov	r12,1
80003450:	f0 1f 00 16 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003454:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003458:	e0 69 ea 60 	mov	r9,60000
8000345c:	f0 09 00 0a 	add	r10,r8,r9
80003460:	ca fb       	rjmp	800033be <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80003462:	30 6c       	mov	r12,6
80003464:	f0 1f 00 11 	mcall	800034a8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003468:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000346c:	f0 ca d1 20 	sub	r10,r8,-12000
80003470:	cb 8b       	rjmp	800033e0 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80003472:	f0 1f 00 0f 	mcall	800034ac <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80003476:	f0 1f 00 0f 	mcall	800034b0 <dip204_init+0x224>
}
8000347a:	2f cd       	sub	sp,-16
8000347c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003480:	00 00       	add	r0,r0
80003482:	00 10       	sub	r0,r0
80003484:	80 00       	ld.sh	r0,r0[0x0]
80003486:	34 b4       	mov	r4,75
80003488:	80 00       	ld.sh	r0,r0[0x0]
8000348a:	37 d4       	mov	r4,125
8000348c:	00 00       	add	r0,r0
8000348e:	05 38       	ld.ub	r8,r2++
80003490:	00 00       	add	r0,r0
80003492:	05 18       	ld.sh	r8,r2++
80003494:	80 00       	ld.sh	r0,r0[0x0]
80003496:	37 8c       	mov	r12,120
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	37 c2       	mov	r2,124
8000349c:	80 00       	ld.sh	r0,r0[0x0]
8000349e:	35 54       	mov	r4,85
800034a0:	80 00       	ld.sh	r0,r0[0x0]
800034a2:	35 38       	mov	r8,83
800034a4:	80 00       	ld.sh	r0,r0[0x0]
800034a6:	30 1c       	mov	r12,1
800034a8:	80 00       	ld.sh	r0,r0[0x0]
800034aa:	30 30       	mov	r0,3
800034ac:	80 00       	ld.sh	r0,r0[0x0]
800034ae:	30 c4       	mov	r4,12
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	30 f8       	mov	r8,15

800034b4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800034b4:	f8 08 16 05 	lsr	r8,r12,0x5
800034b8:	a9 68       	lsl	r8,0x8
800034ba:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800034be:	58 1b       	cp.w	r11,1
800034c0:	c0 d0       	breq	800034da <gpio_enable_module_pin+0x26>
800034c2:	c0 63       	brcs	800034ce <gpio_enable_module_pin+0x1a>
800034c4:	58 2b       	cp.w	r11,2
800034c6:	c1 00       	breq	800034e6 <gpio_enable_module_pin+0x32>
800034c8:	58 3b       	cp.w	r11,3
800034ca:	c1 40       	breq	800034f2 <gpio_enable_module_pin+0x3e>
800034cc:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800034ce:	30 19       	mov	r9,1
800034d0:	f2 0c 09 49 	lsl	r9,r9,r12
800034d4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800034d6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800034d8:	c1 28       	rjmp	800034fc <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800034da:	30 19       	mov	r9,1
800034dc:	f2 0c 09 49 	lsl	r9,r9,r12
800034e0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800034e2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800034e4:	c0 c8       	rjmp	800034fc <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800034e6:	30 19       	mov	r9,1
800034e8:	f2 0c 09 49 	lsl	r9,r9,r12
800034ec:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800034ee:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800034f0:	c0 68       	rjmp	800034fc <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800034f2:	30 19       	mov	r9,1
800034f4:	f2 0c 09 49 	lsl	r9,r9,r12
800034f8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800034fa:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800034fc:	30 19       	mov	r9,1
800034fe:	f2 0c 09 4c 	lsl	r12,r9,r12
80003502:	91 2c       	st.w	r8[0x8],r12
80003504:	5e fd       	retal	0
80003506:	d7 03       	nop

80003508 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003508:	d4 21       	pushm	r4-r7,lr
8000350a:	18 97       	mov	r7,r12
8000350c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000350e:	58 0b       	cp.w	r11,0
80003510:	c0 31       	brne	80003516 <gpio_enable_module+0xe>
80003512:	30 05       	mov	r5,0
80003514:	c0 d8       	rjmp	8000352e <gpio_enable_module+0x26>
80003516:	30 06       	mov	r6,0
80003518:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000351a:	6e 1b       	ld.w	r11,r7[0x4]
8000351c:	6e 0c       	ld.w	r12,r7[0x0]
8000351e:	f0 1f 00 06 	mcall	80003534 <gpio_enable_module+0x2c>
80003522:	18 45       	or	r5,r12
		gpiomap++;
80003524:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003526:	2f f6       	sub	r6,-1
80003528:	0c 34       	cp.w	r4,r6
8000352a:	fe 9b ff f8 	brhi	8000351a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000352e:	0a 9c       	mov	r12,r5
80003530:	d8 22       	popm	r4-r7,pc
80003532:	00 00       	add	r0,r0
80003534:	80 00       	ld.sh	r0,r0[0x0]
80003536:	34 b4       	mov	r4,75

80003538 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003538:	f8 08 16 05 	lsr	r8,r12,0x5
8000353c:	a9 68       	lsl	r8,0x8
8000353e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003542:	30 19       	mov	r9,1
80003544:	f2 0c 09 4c 	lsl	r12,r9,r12
80003548:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000354c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003550:	91 1c       	st.w	r8[0x4],r12
}
80003552:	5e fc       	retal	r12

80003554 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003554:	f8 08 16 05 	lsr	r8,r12,0x5
80003558:	a9 68       	lsl	r8,0x8
8000355a:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000355e:	30 19       	mov	r9,1
80003560:	f2 0c 09 4c 	lsl	r12,r9,r12
80003564:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003568:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000356c:	91 1c       	st.w	r8[0x4],r12
}
8000356e:	5e fc       	retal	r12

80003570 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003570:	c0 08       	rjmp	80003570 <_unhandled_interrupt>
80003572:	d7 03       	nop

80003574 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003574:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003578:	49 99       	lddpc	r9,800035dc <INTC_register_interrupt+0x68>
8000357a:	f2 08 00 39 	add	r9,r9,r8<<0x3
8000357e:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003582:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003584:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003588:	58 0a       	cp.w	r10,0
8000358a:	c0 91       	brne	8000359c <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000358c:	49 59       	lddpc	r9,800035e0 <INTC_register_interrupt+0x6c>
8000358e:	49 6a       	lddpc	r10,800035e4 <INTC_register_interrupt+0x70>
80003590:	12 1a       	sub	r10,r9
80003592:	fe 79 08 00 	mov	r9,-63488
80003596:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000359a:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
8000359c:	58 1a       	cp.w	r10,1
8000359e:	c0 a1       	brne	800035b2 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800035a0:	49 09       	lddpc	r9,800035e0 <INTC_register_interrupt+0x6c>
800035a2:	49 2a       	lddpc	r10,800035e8 <INTC_register_interrupt+0x74>
800035a4:	12 1a       	sub	r10,r9
800035a6:	bf aa       	sbr	r10,0x1e
800035a8:	fe 79 08 00 	mov	r9,-63488
800035ac:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800035b0:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800035b2:	58 2a       	cp.w	r10,2
800035b4:	c0 a1       	brne	800035c8 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800035b6:	48 b9       	lddpc	r9,800035e0 <INTC_register_interrupt+0x6c>
800035b8:	48 da       	lddpc	r10,800035ec <INTC_register_interrupt+0x78>
800035ba:	12 1a       	sub	r10,r9
800035bc:	bf ba       	sbr	r10,0x1f
800035be:	fe 79 08 00 	mov	r9,-63488
800035c2:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800035c6:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800035c8:	48 69       	lddpc	r9,800035e0 <INTC_register_interrupt+0x6c>
800035ca:	48 aa       	lddpc	r10,800035f0 <INTC_register_interrupt+0x7c>
800035cc:	12 1a       	sub	r10,r9
800035ce:	ea 1a c0 00 	orh	r10,0xc000
800035d2:	fe 79 08 00 	mov	r9,-63488
800035d6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800035da:	5e fc       	retal	r12
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	97 34       	st.w	r11[0xc],r4
800035e0:	80 00       	ld.sh	r0,r0[0x0]
800035e2:	94 00       	ld.sh	r0,r10[0x0]
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	95 04       	st.w	r10[0x0],r4
800035e8:	80 00       	ld.sh	r0,r0[0x0]
800035ea:	95 12       	st.w	r10[0x4],r2
800035ec:	80 00       	ld.sh	r0,r0[0x0]
800035ee:	95 20       	st.w	r10[0x8],r0
800035f0:	80 00       	ld.sh	r0,r0[0x0]
800035f2:	95 2e       	st.w	r10[0x8],lr

800035f4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800035f4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800035f6:	49 18       	lddpc	r8,80003638 <INTC_init_interrupts+0x44>
800035f8:	e3 b8 00 01 	mtsr	0x4,r8
800035fc:	49 0e       	lddpc	lr,8000363c <INTC_init_interrupts+0x48>
800035fe:	30 07       	mov	r7,0
80003600:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003602:	49 0c       	lddpc	r12,80003640 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003604:	49 05       	lddpc	r5,80003644 <INTC_init_interrupts+0x50>
80003606:	10 15       	sub	r5,r8
80003608:	fe 76 08 00 	mov	r6,-63488
8000360c:	c1 08       	rjmp	8000362c <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000360e:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003610:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003612:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003614:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003618:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000361a:	10 3a       	cp.w	r10,r8
8000361c:	fe 9b ff fc 	brhi	80003614 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003620:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003624:	2f f7       	sub	r7,-1
80003626:	2f 8e       	sub	lr,-8
80003628:	59 47       	cp.w	r7,20
8000362a:	c0 50       	breq	80003634 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000362c:	7c 08       	ld.w	r8,lr[0x0]
8000362e:	58 08       	cp.w	r8,0
80003630:	ce f1       	brne	8000360e <INTC_init_interrupts+0x1a>
80003632:	cf 7b       	rjmp	80003620 <INTC_init_interrupts+0x2c>
80003634:	d8 22       	popm	r4-r7,pc
80003636:	00 00       	add	r0,r0
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	94 00       	ld.sh	r0,r10[0x0]
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	97 34       	st.w	r11[0xc],r4
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	35 70       	mov	r0,87
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	95 04       	st.w	r10[0x0],r4

80003648 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003648:	fe 78 08 00 	mov	r8,-63488
8000364c:	e0 69 00 83 	mov	r9,131
80003650:	f2 0c 01 0c 	sub	r12,r9,r12
80003654:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003658:	f2 ca ff c0 	sub	r10,r9,-64
8000365c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003660:	58 08       	cp.w	r8,0
80003662:	c0 21       	brne	80003666 <_get_interrupt_handler+0x1e>
80003664:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003666:	f0 08 12 00 	clz	r8,r8
8000366a:	48 5a       	lddpc	r10,8000367c <_get_interrupt_handler+0x34>
8000366c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003670:	f0 08 11 1f 	rsub	r8,r8,31
80003674:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003676:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000367a:	5e fc       	retal	r12
8000367c:	80 00       	ld.sh	r0,r0[0x0]
8000367e:	97 34       	st.w	r11[0xc],r4

80003680 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003680:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003682:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003686:	99 a8       	st.w	r12[0x28],r8
}
80003688:	5e fc       	retal	r12
8000368a:	d7 03       	nop

8000368c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000368c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000368e:	ec 5b bb 9f 	cp.w	r11,899999
80003692:	e0 8b 00 04 	brhi	8000369a <pm_enable_osc0_crystal+0xe>
80003696:	30 4b       	mov	r11,4
80003698:	c1 38       	rjmp	800036be <pm_enable_osc0_crystal+0x32>
8000369a:	e0 68 c6 bf 	mov	r8,50879
8000369e:	ea 18 00 2d 	orh	r8,0x2d
800036a2:	10 3b       	cp.w	r11,r8
800036a4:	e0 8b 00 04 	brhi	800036ac <pm_enable_osc0_crystal+0x20>
800036a8:	30 5b       	mov	r11,5
800036aa:	c0 a8       	rjmp	800036be <pm_enable_osc0_crystal+0x32>
800036ac:	e0 68 12 00 	mov	r8,4608
800036b0:	ea 18 00 7a 	orh	r8,0x7a
800036b4:	10 3b       	cp.w	r11,r8
800036b6:	f9 bb 03 06 	movlo	r11,6
800036ba:	f9 bb 02 07 	movhs	r11,7
800036be:	f0 1f 00 02 	mcall	800036c4 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800036c2:	d8 02       	popm	pc
800036c4:	80 00       	ld.sh	r0,r0[0x0]
800036c6:	36 80       	mov	r0,104

800036c8 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800036c8:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800036ca:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800036ce:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800036d0:	78 08       	ld.w	r8,r12[0x0]
800036d2:	a3 a8       	sbr	r8,0x2
800036d4:	99 08       	st.w	r12[0x0],r8
}
800036d6:	5e fc       	retal	r12

800036d8 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800036d8:	79 58       	ld.w	r8,r12[0x54]
800036da:	e2 18 00 80 	andl	r8,0x80,COH
800036de:	cf d0       	breq	800036d8 <pm_wait_for_clk0_ready>
}
800036e0:	5e fc       	retal	r12
800036e2:	d7 03       	nop

800036e4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800036e4:	eb cd 40 80 	pushm	r7,lr
800036e8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800036ea:	f0 1f 00 04 	mcall	800036f8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800036ee:	0e 9c       	mov	r12,r7
800036f0:	f0 1f 00 03 	mcall	800036fc <pm_enable_clk0+0x18>
}
800036f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	36 c8       	mov	r8,108
800036fc:	80 00       	ld.sh	r0,r0[0x0]
800036fe:	36 d8       	mov	r8,109

80003700 <pm_set_osc32_mode>:
 * \param mode 32-kHz oscillator mode (i.e. AVR32_PM_OSCCTRL32_MODE_x).
 */
static void pm_set_osc32_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
80003700:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.mode = mode;
80003702:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
80003706:	99 c8       	st.w	r12[0x30],r8
}
80003708:	5e fc       	retal	r12
8000370a:	d7 03       	nop

8000370c <pm_enable_osc32_crystal>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_EXT_CLOCK);
}


void pm_enable_osc32_crystal(volatile avr32_pm_t *pm)
{
8000370c:	d4 01       	pushm	lr
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
8000370e:	30 1b       	mov	r11,1
80003710:	f0 1f 00 02 	mcall	80003718 <pm_enable_osc32_crystal+0xc>
}
80003714:	d8 02       	popm	pc
80003716:	00 00       	add	r0,r0
80003718:	80 00       	ld.sh	r0,r0[0x0]
8000371a:	37 00       	mov	r0,112

8000371c <pm_enable_clk32_no_wait>:


void pm_enable_clk32_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl32_t u_avr32_pm_oscctrl32 = {pm->oscctrl32};
8000371c:	78 c8       	ld.w	r8,r12[0x30]
  // Modify
  u_avr32_pm_oscctrl32.OSCCTRL32.osc32en = 1;
8000371e:	30 19       	mov	r9,1
80003720:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_pm_oscctrl32.OSCCTRL32.startup = startup;
80003724:	f1 db d2 03 	bfins	r8,r11,0x10,0x3
  // Write back
  pm->oscctrl32 = u_avr32_pm_oscctrl32.oscctrl32;
80003728:	99 c8       	st.w	r12[0x30],r8
}
8000372a:	5e fc       	retal	r12

8000372c <pm_wait_for_clk32_ready>:


void pm_wait_for_clk32_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC32RDY_MASK));
8000372c:	79 58       	ld.w	r8,r12[0x54]
8000372e:	e2 18 02 00 	andl	r8,0x200,COH
80003732:	cf d0       	breq	8000372c <pm_wait_for_clk32_ready>
}
80003734:	5e fc       	retal	r12
80003736:	d7 03       	nop

80003738 <pm_enable_clk32>:
  pm_set_osc32_mode(pm, AVR32_PM_OSCCTRL32_MODE_CRYSTAL);
}


void pm_enable_clk32(volatile avr32_pm_t *pm, unsigned int startup)
{
80003738:	eb cd 40 80 	pushm	r7,lr
8000373c:	18 97       	mov	r7,r12
  pm_enable_clk32_no_wait(pm, startup);
8000373e:	f0 1f 00 04 	mcall	8000374c <pm_enable_clk32+0x14>
  pm_wait_for_clk32_ready(pm);
80003742:	0e 9c       	mov	r12,r7
80003744:	f0 1f 00 03 	mcall	80003750 <pm_enable_clk32+0x18>
}
80003748:	e3 cd 80 80 	ldm	sp++,r7,pc
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	37 1c       	mov	r12,113
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	37 2c       	mov	r12,114

80003754 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003754:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003756:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000375a:	99 08       	st.w	r12[0x0],r8
}
8000375c:	5e fc       	retal	r12
8000375e:	d7 03       	nop

80003760 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003760:	eb cd 40 c0 	pushm	r6-r7,lr
80003764:	18 97       	mov	r7,r12
80003766:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003768:	f0 1f 00 06 	mcall	80003780 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000376c:	0c 9b       	mov	r11,r6
8000376e:	0e 9c       	mov	r12,r7
80003770:	f0 1f 00 05 	mcall	80003784 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003774:	30 1b       	mov	r11,1
80003776:	0e 9c       	mov	r12,r7
80003778:	f0 1f 00 04 	mcall	80003788 <pm_switch_to_osc0+0x28>
}
8000377c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003780:	80 00       	ld.sh	r0,r0[0x0]
80003782:	36 8c       	mov	r12,104
80003784:	80 00       	ld.sh	r0,r0[0x0]
80003786:	36 e4       	mov	r4,110
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	37 54       	mov	r4,117

8000378c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000378c:	58 0b       	cp.w	r11,0
8000378e:	c1 90       	breq	800037c0 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003790:	58 6c       	cp.w	r12,6
80003792:	e0 8b 00 17 	brhi	800037c0 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003796:	76 0a       	ld.w	r10,r11[0x0]
80003798:	fe 78 30 00 	mov	r8,-53248
8000379c:	f8 c9 ff f0 	sub	r9,r12,-16
800037a0:	a5 79       	lsl	r9,0x5
800037a2:	f0 09 00 09 	add	r9,r8,r9
800037a6:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800037a8:	76 19       	ld.w	r9,r11[0x4]
800037aa:	a5 7c       	lsl	r12,0x5
800037ac:	f0 0c 00 0c 	add	r12,r8,r12
800037b0:	f8 c8 fd fc 	sub	r8,r12,-516
800037b4:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800037b6:	76 28       	ld.w	r8,r11[0x8]
800037b8:	f8 cc fd f8 	sub	r12,r12,-520
800037bc:	99 08       	st.w	r12[0x0],r8
800037be:	5e fd       	retal	0

  return PWM_SUCCESS;
800037c0:	5e ff       	retal	1

800037c2 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800037c2:	18 98       	mov	r8,r12
800037c4:	e0 18 ff 80 	andl	r8,0xff80
800037c8:	c0 20       	breq	800037cc <pwm_start_channels+0xa>
800037ca:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800037cc:	fe 78 30 00 	mov	r8,-53248
800037d0:	91 1c       	st.w	r8[0x4],r12
800037d2:	5e fd       	retal	0

800037d4 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800037d4:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
800037d8:	58 0c       	cp.w	r12,0
800037da:	c0 21       	brne	800037de <pwm_init+0xa>
800037dc:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800037de:	e6 18 00 01 	andh	r8,0x1,COH
800037e2:	c0 91       	brne	800037f4 <pwm_init+0x20>
800037e4:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800037e6:	fe 78 30 00 	mov	r8,-53248
800037ea:	37 f9       	mov	r9,127
800037ec:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800037ee:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800037f0:	d5 03       	csrf	0x10
800037f2:	c0 68       	rjmp	800037fe <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800037f4:	fe 78 30 00 	mov	r8,-53248
800037f8:	37 f9       	mov	r9,127
800037fa:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800037fc:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800037fe:	78 08       	ld.w	r8,r12[0x0]
80003800:	78 39       	ld.w	r9,r12[0xc]
80003802:	a9 69       	lsl	r9,0x8
80003804:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003808:	78 18       	ld.w	r8,r12[0x4]
8000380a:	10 49       	or	r9,r8
8000380c:	78 28       	ld.w	r8,r12[0x8]
8000380e:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80003812:	fe 78 30 00 	mov	r8,-53248
80003816:	91 09       	st.w	r8[0x0],r9
80003818:	5e fd       	retal	0

8000381a <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000381a:	f8 c8 00 01 	sub	r8,r12,1
8000381e:	f0 0b 00 0b 	add	r11,r8,r11
80003822:	f6 0c 0d 0a 	divu	r10,r11,r12
80003826:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80003828:	f4 c8 00 01 	sub	r8,r10,1
8000382c:	e0 48 00 fe 	cp.w	r8,254
80003830:	e0 88 00 03 	brls	80003836 <getBaudDiv+0x1c>
80003834:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80003836:	5c 8c       	casts.h	r12
}
80003838:	5e fc       	retal	r12

8000383a <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000383a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000383e:	30 18       	mov	r8,1
80003840:	f0 09 18 00 	cp.b	r9,r8
80003844:	e0 88 00 04 	brls	8000384c <spi_initMaster+0x12>
80003848:	30 2c       	mov	r12,2
8000384a:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000384c:	e0 68 00 80 	mov	r8,128
80003850:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003852:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80003854:	30 19       	mov	r9,1
80003856:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000385a:	f7 39 00 0d 	ld.ub	r9,r11[13]
8000385e:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80003862:	30 09       	mov	r9,0
80003864:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003868:	30 fa       	mov	r10,15
8000386a:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
8000386e:	99 18       	st.w	r12[0x4],r8
80003870:	5e f9       	retal	r9

80003872 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003872:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003874:	30 18       	mov	r8,1
80003876:	f0 0b 18 00 	cp.b	r11,r8
8000387a:	5f be       	srhi	lr
8000387c:	f0 0a 18 00 	cp.b	r10,r8
80003880:	5f b8       	srhi	r8
80003882:	fd e8 10 08 	or	r8,lr,r8
80003886:	c0 30       	breq	8000388c <spi_selectionMode+0x1a>
80003888:	30 2c       	mov	r12,2
8000388a:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
8000388c:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000388e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003892:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003896:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000389a:	99 18       	st.w	r12[0x4],r8
8000389c:	d8 0a       	popm	pc,r12=0

8000389e <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000389e:	78 18       	ld.w	r8,r12[0x4]
800038a0:	ea 18 00 0f 	orh	r8,0xf
800038a4:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800038a6:	78 18       	ld.w	r8,r12[0x4]
800038a8:	e2 18 00 04 	andl	r8,0x4,COH
800038ac:	c0 f0       	breq	800038ca <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800038ae:	30 e8       	mov	r8,14
800038b0:	f0 0b 18 00 	cp.b	r11,r8
800038b4:	e0 8b 00 19 	brhi	800038e6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800038b8:	78 18       	ld.w	r8,r12[0x4]
800038ba:	b1 6b       	lsl	r11,0x10
800038bc:	ea 1b ff f0 	orh	r11,0xfff0
800038c0:	e8 1b ff ff 	orl	r11,0xffff
800038c4:	10 6b       	and	r11,r8
800038c6:	99 1b       	st.w	r12[0x4],r11
800038c8:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800038ca:	30 38       	mov	r8,3
800038cc:	f0 0b 18 00 	cp.b	r11,r8
800038d0:	e0 8b 00 0b 	brhi	800038e6 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800038d4:	78 18       	ld.w	r8,r12[0x4]
800038d6:	2f 0b       	sub	r11,-16
800038d8:	30 19       	mov	r9,1
800038da:	f2 0b 09 4b 	lsl	r11,r9,r11
800038de:	5c db       	com	r11
800038e0:	10 6b       	and	r11,r8
800038e2:	99 1b       	st.w	r12[0x4],r11
800038e4:	5e fd       	retal	0
800038e6:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
800038e8:	5e fc       	retal	r12

800038ea <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800038ea:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800038ee:	c0 58       	rjmp	800038f8 <spi_unselectChip+0xe>
		if (!timeout--) {
800038f0:	58 08       	cp.w	r8,0
800038f2:	c0 21       	brne	800038f6 <spi_unselectChip+0xc>
800038f4:	5e ff       	retal	1
800038f6:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800038f8:	78 49       	ld.w	r9,r12[0x10]
800038fa:	e2 19 02 00 	andl	r9,0x200,COH
800038fe:	cf 90       	breq	800038f0 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003900:	78 18       	ld.w	r8,r12[0x4]
80003902:	ea 18 00 0f 	orh	r8,0xf
80003906:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003908:	fc 18 01 00 	movh	r8,0x100
8000390c:	99 08       	st.w	r12[0x0],r8
8000390e:	5e fd       	retal	0

80003910 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003910:	eb cd 40 f8 	pushm	r3-r7,lr
80003914:	18 95       	mov	r5,r12
80003916:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003918:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000391c:	30 38       	mov	r8,3
8000391e:	f0 06 18 00 	cp.b	r6,r8
80003922:	e0 8b 00 4d 	brhi	800039bc <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
80003926:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000392a:	30 18       	mov	r8,1
8000392c:	f0 04 18 00 	cp.b	r4,r8
80003930:	e0 8b 00 46 	brhi	800039bc <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003934:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003938:	30 78       	mov	r8,7
8000393a:	f0 03 18 00 	cp.b	r3,r8
8000393e:	e0 88 00 3f 	brls	800039bc <spi_setupChipReg+0xac>
80003942:	31 08       	mov	r8,16
80003944:	f0 03 18 00 	cp.b	r3,r8
80003948:	e0 8b 00 3a 	brhi	800039bc <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000394c:	14 9b       	mov	r11,r10
8000394e:	6e 1c       	ld.w	r12,r7[0x4]
80003950:	f0 1f 00 1d 	mcall	800039c4 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80003954:	c3 45       	brlt	800039bc <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003956:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003958:	ec 09 16 01 	lsr	r9,r6,0x1
8000395c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003960:	ec 16 00 01 	eorl	r6,0x1
80003964:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003968:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000396c:	20 83       	sub	r3,8
8000396e:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003972:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003976:	ef 39 00 09 	ld.ub	r9,r7[9]
8000397a:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8000397e:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003982:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003986:	0f 89       	ld.ub	r9,r7[0x0]
80003988:	30 1a       	mov	r10,1
8000398a:	f4 09 18 00 	cp.b	r9,r10
8000398e:	c0 e0       	breq	800039aa <spi_setupChipReg+0x9a>
80003990:	c0 a3       	brcs	800039a4 <spi_setupChipReg+0x94>
80003992:	30 2a       	mov	r10,2
80003994:	f4 09 18 00 	cp.b	r9,r10
80003998:	c0 c0       	breq	800039b0 <spi_setupChipReg+0xa0>
8000399a:	30 3a       	mov	r10,3
8000399c:	f4 09 18 00 	cp.b	r9,r10
800039a0:	c0 e1       	brne	800039bc <spi_setupChipReg+0xac>
800039a2:	c0 a8       	rjmp	800039b6 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800039a4:	8b c8       	st.w	r5[0x30],r8
800039a6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800039aa:	8b d8       	st.w	r5[0x34],r8
800039ac:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800039b0:	8b e8       	st.w	r5[0x38],r8
800039b2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800039b6:	8b f8       	st.w	r5[0x3c],r8
800039b8:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800039bc:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800039be:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800039c2:	00 00       	add	r0,r0
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	38 1a       	mov	r10,-127

800039c8 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800039c8:	30 18       	mov	r8,1
800039ca:	99 08       	st.w	r12[0x0],r8
}
800039cc:	5e fc       	retal	r12

800039ce <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800039ce:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800039d2:	c0 58       	rjmp	800039dc <spi_write+0xe>
		if (!timeout--) {
800039d4:	58 08       	cp.w	r8,0
800039d6:	c0 21       	brne	800039da <spi_write+0xc>
800039d8:	5e ff       	retal	1
800039da:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800039dc:	78 49       	ld.w	r9,r12[0x10]
800039de:	e2 19 00 02 	andl	r9,0x2,COH
800039e2:	cf 90       	breq	800039d4 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800039e4:	5c 7b       	castu.h	r11
800039e6:	99 3b       	st.w	r12[0xc],r11
800039e8:	5e fd       	retal	0

800039ea <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
800039ea:	78 4c       	ld.w	r12,r12[0x10]
}
800039ec:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800039f0:	5e fc       	retal	r12

800039f2 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800039f2:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800039f6:	c0 58       	rjmp	80003a00 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800039f8:	58 08       	cp.w	r8,0
800039fa:	c0 21       	brne	800039fe <spi_read+0xc>
800039fc:	5e ff       	retal	1
800039fe:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003a00:	78 49       	ld.w	r9,r12[0x10]
80003a02:	e2 19 02 01 	andl	r9,0x201,COH
80003a06:	e0 49 02 01 	cp.w	r9,513
80003a0a:	cf 71       	brne	800039f8 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003a0c:	78 28       	ld.w	r8,r12[0x8]
80003a0e:	b6 08       	st.h	r11[0x0],r8
80003a10:	5e fd       	retal	0
80003a12:	d7 03       	nop

80003a14 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003a14:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003a18:	fe c0 a6 18 	sub	r0,pc,-23016

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003a1c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003a20:	d5 53       	csrf	0x15
  cp      r0, r1
80003a22:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003a24:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003a28:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003a2a:	c0 72       	brcc	80003a38 <idata_load_loop_end>
  cp      r0, r1
80003a2c:	fe c2 9c cc 	sub	r2,pc,-25396

80003a30 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003a30:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003a32:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003a34:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003a36:	cf d3       	brcs	80003a30 <idata_load_loop>

80003a38 <idata_load_loop_end>:
  mov     r2, 0
80003a38:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003a3c:	e0 61 07 10 	mov	r1,1808
  cp      r0, r1
  brlo    udata_clear_loop
80003a40:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003a42:	c0 62       	brcc	80003a4e <udata_clear_loop_end>
80003a44:	30 02       	mov	r2,0
80003a46:	30 03       	mov	r3,0

80003a48 <udata_clear_loop>:
80003a48:	a1 22       	st.d	r0++,r2
80003a4a:	02 30       	cp.w	r0,r1
80003a4c:	cf e3       	brcs	80003a48 <udata_clear_loop>

80003a4e <udata_clear_loop_end>:
80003a4e:	fe cf 0c 42 	sub	pc,pc,3138
80003a52:	d7 03       	nop

80003a54 <__avr32_f64_mul>:
80003a54:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80003a58:	e0 80 00 dc 	breq	80003c10 <__avr32_f64_mul_op1_zero>
80003a5c:	d4 21       	pushm	r4-r7,lr
80003a5e:	f7 e9 20 0e 	eor	lr,r11,r9
80003a62:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80003a66:	30 15       	mov	r5,1
80003a68:	c4 30       	breq	80003aee <__avr32_f64_mul_op1_subnormal>
80003a6a:	ab 6b       	lsl	r11,0xa
80003a6c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80003a70:	ab 6a       	lsl	r10,0xa
80003a72:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80003a76:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80003a7a:	c5 c0       	breq	80003b32 <__avr32_f64_mul_op2_subnormal>
80003a7c:	a1 78       	lsl	r8,0x1
80003a7e:	5c f9       	rol	r9
80003a80:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003a84:	e0 47 07 ff 	cp.w	r7,2047
80003a88:	c7 70       	breq	80003b76 <__avr32_f64_mul_op_nan_or_inf>
80003a8a:	e0 46 07 ff 	cp.w	r6,2047
80003a8e:	c7 40       	breq	80003b76 <__avr32_f64_mul_op_nan_or_inf>
80003a90:	ee 06 00 0c 	add	r12,r7,r6
80003a94:	e0 2c 03 fe 	sub	r12,1022
80003a98:	f6 08 06 44 	mulu.d	r4,r11,r8
80003a9c:	f4 09 07 44 	macu.d	r4,r10,r9
80003aa0:	f4 08 06 46 	mulu.d	r6,r10,r8
80003aa4:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003aa8:	08 07       	add	r7,r4
80003aaa:	f4 05 00 4a 	adc	r10,r10,r5
80003aae:	5c 0b       	acr	r11
80003ab0:	ed bb 00 14 	bld	r11,0x14
80003ab4:	c0 50       	breq	80003abe <__avr32_f64_mul+0x6a>
80003ab6:	a1 77       	lsl	r7,0x1
80003ab8:	5c fa       	rol	r10
80003aba:	5c fb       	rol	r11
80003abc:	20 1c       	sub	r12,1
80003abe:	58 0c       	cp.w	r12,0
80003ac0:	e0 8a 00 6f 	brle	80003b9e <__avr32_f64_mul_res_subnormal>
80003ac4:	e0 4c 07 ff 	cp.w	r12,2047
80003ac8:	e0 84 00 9c 	brge	80003c00 <__avr32_f64_mul_res_inf>
80003acc:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80003ad0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003ad4:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003ad8:	ee 17 80 00 	eorh	r7,0x8000
80003adc:	f1 b7 04 20 	satu	r7,0x1
80003ae0:	0e 0a       	add	r10,r7
80003ae2:	5c 0b       	acr	r11
80003ae4:	ed be 00 1f 	bld	lr,0x1f
80003ae8:	ef bb 00 1f 	bst	r11,0x1f
80003aec:	d8 22       	popm	r4-r7,pc

80003aee <__avr32_f64_mul_op1_subnormal>:
80003aee:	e4 1b 00 0f 	andh	r11,0xf
80003af2:	f4 0c 12 00 	clz	r12,r10
80003af6:	f6 06 12 00 	clz	r6,r11
80003afa:	f7 bc 03 e1 	sublo	r12,-31
80003afe:	f8 06 17 30 	movlo	r6,r12
80003b02:	f7 b6 02 01 	subhs	r6,1
80003b06:	e0 46 00 20 	cp.w	r6,32
80003b0a:	c0 d4       	brge	80003b24 <__avr32_f64_mul_op1_subnormal+0x36>
80003b0c:	ec 0c 11 20 	rsub	r12,r6,32
80003b10:	f6 06 09 4b 	lsl	r11,r11,r6
80003b14:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003b18:	18 4b       	or	r11,r12
80003b1a:	f4 06 09 4a 	lsl	r10,r10,r6
80003b1e:	20 b6       	sub	r6,11
80003b20:	0c 17       	sub	r7,r6
80003b22:	ca ab       	rjmp	80003a76 <__avr32_f64_mul+0x22>
80003b24:	f4 06 09 4b 	lsl	r11,r10,r6
80003b28:	c6 40       	breq	80003bf0 <__avr32_f64_mul_res_zero>
80003b2a:	30 0a       	mov	r10,0
80003b2c:	20 b6       	sub	r6,11
80003b2e:	0c 17       	sub	r7,r6
80003b30:	ca 3b       	rjmp	80003a76 <__avr32_f64_mul+0x22>

80003b32 <__avr32_f64_mul_op2_subnormal>:
80003b32:	e4 19 00 0f 	andh	r9,0xf
80003b36:	f0 0c 12 00 	clz	r12,r8
80003b3a:	f2 05 12 00 	clz	r5,r9
80003b3e:	f7 bc 03 ea 	sublo	r12,-22
80003b42:	f8 05 17 30 	movlo	r5,r12
80003b46:	f7 b5 02 0a 	subhs	r5,10
80003b4a:	e0 45 00 20 	cp.w	r5,32
80003b4e:	c0 d4       	brge	80003b68 <__avr32_f64_mul_op2_subnormal+0x36>
80003b50:	ea 0c 11 20 	rsub	r12,r5,32
80003b54:	f2 05 09 49 	lsl	r9,r9,r5
80003b58:	f0 0c 0a 4c 	lsr	r12,r8,r12
80003b5c:	18 49       	or	r9,r12
80003b5e:	f0 05 09 48 	lsl	r8,r8,r5
80003b62:	20 25       	sub	r5,2
80003b64:	0a 16       	sub	r6,r5
80003b66:	c8 fb       	rjmp	80003a84 <__avr32_f64_mul+0x30>
80003b68:	f0 05 09 49 	lsl	r9,r8,r5
80003b6c:	c4 20       	breq	80003bf0 <__avr32_f64_mul_res_zero>
80003b6e:	30 08       	mov	r8,0
80003b70:	20 25       	sub	r5,2
80003b72:	0a 16       	sub	r6,r5
80003b74:	c8 8b       	rjmp	80003a84 <__avr32_f64_mul+0x30>

80003b76 <__avr32_f64_mul_op_nan_or_inf>:
80003b76:	e4 19 00 0f 	andh	r9,0xf
80003b7a:	e4 1b 00 0f 	andh	r11,0xf
80003b7e:	14 4b       	or	r11,r10
80003b80:	10 49       	or	r9,r8
80003b82:	e0 47 07 ff 	cp.w	r7,2047
80003b86:	c0 91       	brne	80003b98 <__avr32_f64_mul_op1_not_naninf>
80003b88:	58 0b       	cp.w	r11,0
80003b8a:	c3 81       	brne	80003bfa <__avr32_f64_mul_res_nan>
80003b8c:	e0 46 07 ff 	cp.w	r6,2047
80003b90:	c3 81       	brne	80003c00 <__avr32_f64_mul_res_inf>
80003b92:	58 09       	cp.w	r9,0
80003b94:	c3 60       	breq	80003c00 <__avr32_f64_mul_res_inf>
80003b96:	c3 28       	rjmp	80003bfa <__avr32_f64_mul_res_nan>

80003b98 <__avr32_f64_mul_op1_not_naninf>:
80003b98:	58 09       	cp.w	r9,0
80003b9a:	c3 30       	breq	80003c00 <__avr32_f64_mul_res_inf>
80003b9c:	c2 f8       	rjmp	80003bfa <__avr32_f64_mul_res_nan>

80003b9e <__avr32_f64_mul_res_subnormal>:
80003b9e:	5c 3c       	neg	r12
80003ba0:	2f fc       	sub	r12,-1
80003ba2:	f1 bc 04 c0 	satu	r12,0x6
80003ba6:	e0 4c 00 20 	cp.w	r12,32
80003baa:	c1 14       	brge	80003bcc <__avr32_f64_mul_res_subnormal+0x2e>
80003bac:	f8 08 11 20 	rsub	r8,r12,32
80003bb0:	0e 46       	or	r6,r7
80003bb2:	ee 0c 0a 47 	lsr	r7,r7,r12
80003bb6:	f4 08 09 49 	lsl	r9,r10,r8
80003bba:	12 47       	or	r7,r9
80003bbc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003bc0:	f6 08 09 49 	lsl	r9,r11,r8
80003bc4:	12 4a       	or	r10,r9
80003bc6:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003bca:	c8 3b       	rjmp	80003ad0 <__avr32_f64_mul+0x7c>
80003bcc:	f8 08 11 20 	rsub	r8,r12,32
80003bd0:	f9 b9 00 00 	moveq	r9,0
80003bd4:	c0 30       	breq	80003bda <__avr32_f64_mul_res_subnormal+0x3c>
80003bd6:	f6 08 09 49 	lsl	r9,r11,r8
80003bda:	0e 46       	or	r6,r7
80003bdc:	ed ea 10 16 	or	r6,r6,r10<<0x1
80003be0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003be4:	f3 ea 10 07 	or	r7,r9,r10
80003be8:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003bec:	30 0b       	mov	r11,0
80003bee:	c7 1b       	rjmp	80003ad0 <__avr32_f64_mul+0x7c>

80003bf0 <__avr32_f64_mul_res_zero>:
80003bf0:	1c 9b       	mov	r11,lr
80003bf2:	e6 1b 80 00 	andh	r11,0x8000,COH
80003bf6:	30 0a       	mov	r10,0
80003bf8:	d8 22       	popm	r4-r7,pc

80003bfa <__avr32_f64_mul_res_nan>:
80003bfa:	3f fb       	mov	r11,-1
80003bfc:	3f fa       	mov	r10,-1
80003bfe:	d8 22       	popm	r4-r7,pc

80003c00 <__avr32_f64_mul_res_inf>:
80003c00:	f0 6b 00 00 	mov	r11,-1048576
80003c04:	ed be 00 1f 	bld	lr,0x1f
80003c08:	ef bb 00 1f 	bst	r11,0x1f
80003c0c:	30 0a       	mov	r10,0
80003c0e:	d8 22       	popm	r4-r7,pc

80003c10 <__avr32_f64_mul_op1_zero>:
80003c10:	f7 e9 20 0b 	eor	r11,r11,r9
80003c14:	e6 1b 80 00 	andh	r11,0x8000,COH
80003c18:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003c1c:	e0 4c 07 ff 	cp.w	r12,2047
80003c20:	5e 1c       	retne	r12
80003c22:	3f fa       	mov	r10,-1
80003c24:	3f fb       	mov	r11,-1
80003c26:	5e fc       	retal	r12

80003c28 <__avr32_u32_to_f64>:
80003c28:	f8 cb 00 00 	sub	r11,r12,0
80003c2c:	30 0c       	mov	r12,0
80003c2e:	c0 38       	rjmp	80003c34 <__avr32_s32_to_f64+0x4>

80003c30 <__avr32_s32_to_f64>:
80003c30:	18 9b       	mov	r11,r12
80003c32:	5c 4b       	abs	r11
80003c34:	30 0a       	mov	r10,0
80003c36:	5e 0b       	reteq	r11
80003c38:	d4 01       	pushm	lr
80003c3a:	e0 69 04 1e 	mov	r9,1054
80003c3e:	f6 08 12 00 	clz	r8,r11
80003c42:	c1 70       	breq	80003c70 <__avr32_s32_to_f64+0x40>
80003c44:	c0 c3       	brcs	80003c5c <__avr32_s32_to_f64+0x2c>
80003c46:	f0 0e 11 20 	rsub	lr,r8,32
80003c4a:	f6 08 09 4b 	lsl	r11,r11,r8
80003c4e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80003c52:	1c 4b       	or	r11,lr
80003c54:	f4 08 09 4a 	lsl	r10,r10,r8
80003c58:	10 19       	sub	r9,r8
80003c5a:	c0 b8       	rjmp	80003c70 <__avr32_s32_to_f64+0x40>
80003c5c:	f4 08 12 00 	clz	r8,r10
80003c60:	f9 b8 03 00 	movlo	r8,0
80003c64:	f7 b8 02 e0 	subhs	r8,-32
80003c68:	f4 08 09 4b 	lsl	r11,r10,r8
80003c6c:	30 0a       	mov	r10,0
80003c6e:	10 19       	sub	r9,r8
80003c70:	58 09       	cp.w	r9,0
80003c72:	e0 89 00 30 	brgt	80003cd2 <__avr32_s32_to_f64+0xa2>
80003c76:	5c 39       	neg	r9
80003c78:	2f f9       	sub	r9,-1
80003c7a:	e0 49 00 36 	cp.w	r9,54
80003c7e:	c0 43       	brcs	80003c86 <__avr32_s32_to_f64+0x56>
80003c80:	30 0b       	mov	r11,0
80003c82:	30 0a       	mov	r10,0
80003c84:	c2 68       	rjmp	80003cd0 <__avr32_s32_to_f64+0xa0>
80003c86:	2f 69       	sub	r9,-10
80003c88:	f2 08 11 20 	rsub	r8,r9,32
80003c8c:	e0 49 00 20 	cp.w	r9,32
80003c90:	c0 b2       	brcc	80003ca6 <__avr32_s32_to_f64+0x76>
80003c92:	f4 08 09 4e 	lsl	lr,r10,r8
80003c96:	f6 08 09 48 	lsl	r8,r11,r8
80003c9a:	f4 09 0a 4a 	lsr	r10,r10,r9
80003c9e:	f6 09 0a 4b 	lsr	r11,r11,r9
80003ca2:	10 4b       	or	r11,r8
80003ca4:	c0 88       	rjmp	80003cb4 <__avr32_s32_to_f64+0x84>
80003ca6:	f6 08 09 4e 	lsl	lr,r11,r8
80003caa:	14 4e       	or	lr,r10
80003cac:	16 9a       	mov	r10,r11
80003cae:	30 0b       	mov	r11,0
80003cb0:	f4 09 0a 4a 	lsr	r10,r10,r9
80003cb4:	ed ba 00 00 	bld	r10,0x0
80003cb8:	c0 92       	brcc	80003cca <__avr32_s32_to_f64+0x9a>
80003cba:	1c 7e       	tst	lr,lr
80003cbc:	c0 41       	brne	80003cc4 <__avr32_s32_to_f64+0x94>
80003cbe:	ed ba 00 01 	bld	r10,0x1
80003cc2:	c0 42       	brcc	80003cca <__avr32_s32_to_f64+0x9a>
80003cc4:	2f fa       	sub	r10,-1
80003cc6:	f7 bb 02 ff 	subhs	r11,-1
80003cca:	5c fc       	rol	r12
80003ccc:	5d 0b       	ror	r11
80003cce:	5d 0a       	ror	r10
80003cd0:	d8 02       	popm	pc
80003cd2:	e0 68 03 ff 	mov	r8,1023
80003cd6:	ed ba 00 0b 	bld	r10,0xb
80003cda:	f7 b8 00 ff 	subeq	r8,-1
80003cde:	10 0a       	add	r10,r8
80003ce0:	5c 0b       	acr	r11
80003ce2:	f7 b9 03 fe 	sublo	r9,-2
80003ce6:	e0 49 07 ff 	cp.w	r9,2047
80003cea:	c0 55       	brlt	80003cf4 <__avr32_s32_to_f64+0xc4>
80003cec:	30 0a       	mov	r10,0
80003cee:	fc 1b ff e0 	movh	r11,0xffe0
80003cf2:	c0 c8       	rjmp	80003d0a <__floatsidf_return_op1>
80003cf4:	ed bb 00 1f 	bld	r11,0x1f
80003cf8:	f7 b9 01 01 	subne	r9,1
80003cfc:	ab 9a       	lsr	r10,0xb
80003cfe:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003d02:	a1 7b       	lsl	r11,0x1
80003d04:	ab 9b       	lsr	r11,0xb
80003d06:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003d0a <__floatsidf_return_op1>:
80003d0a:	a1 7c       	lsl	r12,0x1
80003d0c:	5d 0b       	ror	r11
80003d0e:	d8 02       	popm	pc

80003d10 <__avr32_f64_cmp_lt>:
80003d10:	1a de       	st.w	--sp,lr
80003d12:	1a d7       	st.w	--sp,r7
80003d14:	a1 7b       	lsl	r11,0x1
80003d16:	5f 3c       	srlo	r12
80003d18:	a1 79       	lsl	r9,0x1
80003d1a:	5f 37       	srlo	r7
80003d1c:	5c fc       	rol	r12
80003d1e:	fc 1e ff e0 	movh	lr,0xffe0
80003d22:	58 0a       	cp.w	r10,0
80003d24:	fc 0b 13 00 	cpc	r11,lr
80003d28:	e0 8b 00 1d 	brhi	80003d62 <__avr32_f64_cmp_lt+0x52>
80003d2c:	58 08       	cp.w	r8,0
80003d2e:	fc 09 13 00 	cpc	r9,lr
80003d32:	e0 8b 00 18 	brhi	80003d62 <__avr32_f64_cmp_lt+0x52>
80003d36:	58 0b       	cp.w	r11,0
80003d38:	f5 ba 00 00 	subfeq	r10,0
80003d3c:	c1 50       	breq	80003d66 <__avr32_f64_cmp_lt+0x56>
80003d3e:	1b 07       	ld.w	r7,sp++
80003d40:	1b 0e       	ld.w	lr,sp++
80003d42:	58 3c       	cp.w	r12,3
80003d44:	c0 a0       	breq	80003d58 <__avr32_f64_cmp_lt+0x48>
80003d46:	58 1c       	cp.w	r12,1
80003d48:	c0 33       	brcs	80003d4e <__avr32_f64_cmp_lt+0x3e>
80003d4a:	5e 0d       	reteq	0
80003d4c:	5e 1f       	retne	1
80003d4e:	10 3a       	cp.w	r10,r8
80003d50:	f2 0b 13 00 	cpc	r11,r9
80003d54:	5e 2d       	reths	0
80003d56:	5e 3f       	retlo	1
80003d58:	14 38       	cp.w	r8,r10
80003d5a:	f6 09 13 00 	cpc	r9,r11
80003d5e:	5e 2d       	reths	0
80003d60:	5e 3f       	retlo	1
80003d62:	1b 07       	ld.w	r7,sp++
80003d64:	d8 0a       	popm	pc,r12=0
80003d66:	58 17       	cp.w	r7,1
80003d68:	5f 1c       	srne	r12
80003d6a:	58 09       	cp.w	r9,0
80003d6c:	f5 b8 00 00 	subfeq	r8,0
80003d70:	1b 07       	ld.w	r7,sp++
80003d72:	1b 0e       	ld.w	lr,sp++
80003d74:	5e 0d       	reteq	0
80003d76:	5e fc       	retal	r12

80003d78 <memcpy>:
80003d78:	58 8a       	cp.w	r10,8
80003d7a:	c2 f5       	brlt	80003dd8 <memcpy+0x60>
80003d7c:	f9 eb 10 09 	or	r9,r12,r11
80003d80:	e2 19 00 03 	andl	r9,0x3,COH
80003d84:	e0 81 00 97 	brne	80003eb2 <memcpy+0x13a>
80003d88:	e0 4a 00 20 	cp.w	r10,32
80003d8c:	c3 b4       	brge	80003e02 <memcpy+0x8a>
80003d8e:	f4 08 14 02 	asr	r8,r10,0x2
80003d92:	f0 09 11 08 	rsub	r9,r8,8
80003d96:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003d9a:	76 69       	ld.w	r9,r11[0x18]
80003d9c:	99 69       	st.w	r12[0x18],r9
80003d9e:	76 59       	ld.w	r9,r11[0x14]
80003da0:	99 59       	st.w	r12[0x14],r9
80003da2:	76 49       	ld.w	r9,r11[0x10]
80003da4:	99 49       	st.w	r12[0x10],r9
80003da6:	76 39       	ld.w	r9,r11[0xc]
80003da8:	99 39       	st.w	r12[0xc],r9
80003daa:	76 29       	ld.w	r9,r11[0x8]
80003dac:	99 29       	st.w	r12[0x8],r9
80003dae:	76 19       	ld.w	r9,r11[0x4]
80003db0:	99 19       	st.w	r12[0x4],r9
80003db2:	76 09       	ld.w	r9,r11[0x0]
80003db4:	99 09       	st.w	r12[0x0],r9
80003db6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003dba:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003dbe:	e0 1a 00 03 	andl	r10,0x3
80003dc2:	f4 0a 11 04 	rsub	r10,r10,4
80003dc6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003dca:	17 a9       	ld.ub	r9,r11[0x2]
80003dcc:	b0 a9       	st.b	r8[0x2],r9
80003dce:	17 99       	ld.ub	r9,r11[0x1]
80003dd0:	b0 99       	st.b	r8[0x1],r9
80003dd2:	17 89       	ld.ub	r9,r11[0x0]
80003dd4:	b0 89       	st.b	r8[0x0],r9
80003dd6:	5e fc       	retal	r12
80003dd8:	f4 0a 11 09 	rsub	r10,r10,9
80003ddc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003de0:	17 f9       	ld.ub	r9,r11[0x7]
80003de2:	b8 f9       	st.b	r12[0x7],r9
80003de4:	17 e9       	ld.ub	r9,r11[0x6]
80003de6:	b8 e9       	st.b	r12[0x6],r9
80003de8:	17 d9       	ld.ub	r9,r11[0x5]
80003dea:	b8 d9       	st.b	r12[0x5],r9
80003dec:	17 c9       	ld.ub	r9,r11[0x4]
80003dee:	b8 c9       	st.b	r12[0x4],r9
80003df0:	17 b9       	ld.ub	r9,r11[0x3]
80003df2:	b8 b9       	st.b	r12[0x3],r9
80003df4:	17 a9       	ld.ub	r9,r11[0x2]
80003df6:	b8 a9       	st.b	r12[0x2],r9
80003df8:	17 99       	ld.ub	r9,r11[0x1]
80003dfa:	b8 99       	st.b	r12[0x1],r9
80003dfc:	17 89       	ld.ub	r9,r11[0x0]
80003dfe:	b8 89       	st.b	r12[0x0],r9
80003e00:	5e fc       	retal	r12
80003e02:	eb cd 40 c0 	pushm	r6-r7,lr
80003e06:	18 99       	mov	r9,r12
80003e08:	22 0a       	sub	r10,32
80003e0a:	b7 07       	ld.d	r6,r11++
80003e0c:	b3 26       	st.d	r9++,r6
80003e0e:	b7 07       	ld.d	r6,r11++
80003e10:	b3 26       	st.d	r9++,r6
80003e12:	b7 07       	ld.d	r6,r11++
80003e14:	b3 26       	st.d	r9++,r6
80003e16:	b7 07       	ld.d	r6,r11++
80003e18:	b3 26       	st.d	r9++,r6
80003e1a:	22 0a       	sub	r10,32
80003e1c:	cf 74       	brge	80003e0a <memcpy+0x92>
80003e1e:	2f 0a       	sub	r10,-16
80003e20:	c0 65       	brlt	80003e2c <memcpy+0xb4>
80003e22:	b7 07       	ld.d	r6,r11++
80003e24:	b3 26       	st.d	r9++,r6
80003e26:	b7 07       	ld.d	r6,r11++
80003e28:	b3 26       	st.d	r9++,r6
80003e2a:	21 0a       	sub	r10,16
80003e2c:	5c 3a       	neg	r10
80003e2e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003e32:	d7 03       	nop
80003e34:	d7 03       	nop
80003e36:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003e3a:	f3 66 00 0e 	st.b	r9[14],r6
80003e3e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003e42:	f3 66 00 0d 	st.b	r9[13],r6
80003e46:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003e4a:	f3 66 00 0c 	st.b	r9[12],r6
80003e4e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003e52:	f3 66 00 0b 	st.b	r9[11],r6
80003e56:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003e5a:	f3 66 00 0a 	st.b	r9[10],r6
80003e5e:	f7 36 00 09 	ld.ub	r6,r11[9]
80003e62:	f3 66 00 09 	st.b	r9[9],r6
80003e66:	f7 36 00 08 	ld.ub	r6,r11[8]
80003e6a:	f3 66 00 08 	st.b	r9[8],r6
80003e6e:	f7 36 00 07 	ld.ub	r6,r11[7]
80003e72:	f3 66 00 07 	st.b	r9[7],r6
80003e76:	f7 36 00 06 	ld.ub	r6,r11[6]
80003e7a:	f3 66 00 06 	st.b	r9[6],r6
80003e7e:	f7 36 00 05 	ld.ub	r6,r11[5]
80003e82:	f3 66 00 05 	st.b	r9[5],r6
80003e86:	f7 36 00 04 	ld.ub	r6,r11[4]
80003e8a:	f3 66 00 04 	st.b	r9[4],r6
80003e8e:	f7 36 00 03 	ld.ub	r6,r11[3]
80003e92:	f3 66 00 03 	st.b	r9[3],r6
80003e96:	f7 36 00 02 	ld.ub	r6,r11[2]
80003e9a:	f3 66 00 02 	st.b	r9[2],r6
80003e9e:	f7 36 00 01 	ld.ub	r6,r11[1]
80003ea2:	f3 66 00 01 	st.b	r9[1],r6
80003ea6:	f7 36 00 00 	ld.ub	r6,r11[0]
80003eaa:	f3 66 00 00 	st.b	r9[0],r6
80003eae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003eb2:	20 1a       	sub	r10,1
80003eb4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003eb8:	f8 0a 0b 09 	st.b	r12[r10],r9
80003ebc:	cf b1       	brne	80003eb2 <memcpy+0x13a>
80003ebe:	5e fc       	retal	r12

80003ec0 <_vsprintf_r>:
80003ec0:	d4 01       	pushm	lr
80003ec2:	21 7d       	sub	sp,92
80003ec4:	e0 68 ff ff 	mov	r8,65535
80003ec8:	ea 18 7f ff 	orh	r8,0x7fff
80003ecc:	50 58       	stdsp	sp[0x14],r8
80003ece:	50 28       	stdsp	sp[0x8],r8
80003ed0:	e0 68 02 08 	mov	r8,520
80003ed4:	ba 68       	st.h	sp[0xc],r8
80003ed6:	3f f8       	mov	r8,-1
80003ed8:	50 4b       	stdsp	sp[0x10],r11
80003eda:	50 0b       	stdsp	sp[0x0],r11
80003edc:	ba 78       	st.h	sp[0xe],r8
80003ede:	1a 9b       	mov	r11,sp
80003ee0:	ca 8d       	rcall	80004230 <_vfprintf_r>
80003ee2:	30 09       	mov	r9,0
80003ee4:	40 08       	lddsp	r8,sp[0x0]
80003ee6:	b0 89       	st.b	r8[0x0],r9
80003ee8:	2e 9d       	sub	sp,-92
80003eea:	d8 02       	popm	pc

80003eec <vsprintf>:
80003eec:	d4 01       	pushm	lr
80003eee:	e0 68 01 04 	mov	r8,260
80003ef2:	14 99       	mov	r9,r10
80003ef4:	16 9a       	mov	r10,r11
80003ef6:	18 9b       	mov	r11,r12
80003ef8:	70 0c       	ld.w	r12,r8[0x0]
80003efa:	ce 3f       	rcall	80003ec0 <_vsprintf_r>
80003efc:	d8 02       	popm	pc
80003efe:	d7 03       	nop

80003f00 <get_arg>:
80003f00:	d4 31       	pushm	r0-r7,lr
80003f02:	20 8d       	sub	sp,32
80003f04:	fa c4 ff bc 	sub	r4,sp,-68
80003f08:	50 4b       	stdsp	sp[0x10],r11
80003f0a:	68 2e       	ld.w	lr,r4[0x8]
80003f0c:	50 58       	stdsp	sp[0x14],r8
80003f0e:	12 96       	mov	r6,r9
80003f10:	7c 0b       	ld.w	r11,lr[0x0]
80003f12:	70 05       	ld.w	r5,r8[0x0]
80003f14:	50 6e       	stdsp	sp[0x18],lr
80003f16:	58 0b       	cp.w	r11,0
80003f18:	f4 0b 17 00 	moveq	r11,r10
80003f1c:	68 03       	ld.w	r3,r4[0x0]
80003f1e:	68 11       	ld.w	r1,r4[0x4]
80003f20:	40 49       	lddsp	r9,sp[0x10]
80003f22:	30 08       	mov	r8,0
80003f24:	c2 89       	rjmp	80004174 <get_arg+0x274>
80003f26:	2f fb       	sub	r11,-1
80003f28:	32 5c       	mov	r12,37
80003f2a:	17 8a       	ld.ub	r10,r11[0x0]
80003f2c:	f8 0a 18 00 	cp.b	r10,r12
80003f30:	5f 1e       	srne	lr
80003f32:	f0 0a 18 00 	cp.b	r10,r8
80003f36:	5f 1c       	srne	r12
80003f38:	fd ec 00 0c 	and	r12,lr,r12
80003f3c:	f0 0c 18 00 	cp.b	r12,r8
80003f40:	cf 31       	brne	80003f26 <get_arg+0x26>
80003f42:	58 0a       	cp.w	r10,0
80003f44:	e0 80 01 25 	breq	8000418e <get_arg+0x28e>
80003f48:	30 0c       	mov	r12,0
80003f4a:	3f fa       	mov	r10,-1
80003f4c:	18 90       	mov	r0,r12
80003f4e:	50 3a       	stdsp	sp[0xc],r10
80003f50:	18 94       	mov	r4,r12
80003f52:	18 92       	mov	r2,r12
80003f54:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003f58:	16 97       	mov	r7,r11
80003f5a:	50 7c       	stdsp	sp[0x1c],r12
80003f5c:	fe cc a4 ac 	sub	r12,pc,-23380
80003f60:	0f 3a       	ld.ub	r10,r7++
80003f62:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003f66:	40 7c       	lddsp	r12,sp[0x1c]
80003f68:	1c 0c       	add	r12,lr
80003f6a:	fe ce a5 82 	sub	lr,pc,-23166
80003f6e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003f72:	20 1e       	sub	lr,1
80003f74:	50 0e       	stdsp	sp[0x0],lr
80003f76:	fe ce a5 fa 	sub	lr,pc,-23046
80003f7a:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003f7e:	50 7c       	stdsp	sp[0x1c],r12
80003f80:	40 0c       	lddsp	r12,sp[0x0]
80003f82:	58 7c       	cp.w	r12,7
80003f84:	e0 8b 00 f1 	brhi	80004166 <get_arg+0x266>
80003f88:	fe ce a7 ac 	sub	lr,pc,-22612
80003f8c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003f90:	36 8b       	mov	r11,104
80003f92:	f6 0a 18 00 	cp.b	r10,r11
80003f96:	e0 80 00 e8 	breq	80004166 <get_arg+0x266>
80003f9a:	37 1b       	mov	r11,113
80003f9c:	f6 0a 18 00 	cp.b	r10,r11
80003fa0:	c0 70       	breq	80003fae <get_arg+0xae>
80003fa2:	34 cb       	mov	r11,76
80003fa4:	f6 0a 18 00 	cp.b	r10,r11
80003fa8:	c0 51       	brne	80003fb2 <get_arg+0xb2>
80003faa:	a3 b4       	sbr	r4,0x3
80003fac:	cd d8       	rjmp	80004166 <get_arg+0x266>
80003fae:	a5 b4       	sbr	r4,0x5
80003fb0:	cd b8       	rjmp	80004166 <get_arg+0x266>
80003fb2:	08 9a       	mov	r10,r4
80003fb4:	0e 9b       	mov	r11,r7
80003fb6:	a5 aa       	sbr	r10,0x4
80003fb8:	17 3c       	ld.ub	r12,r11++
80003fba:	a5 b4       	sbr	r4,0x5
80003fbc:	36 ce       	mov	lr,108
80003fbe:	fc 0c 18 00 	cp.b	r12,lr
80003fc2:	e0 80 00 d3 	breq	80004168 <get_arg+0x268>
80003fc6:	14 94       	mov	r4,r10
80003fc8:	cc f8       	rjmp	80004166 <get_arg+0x266>
80003fca:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003fce:	36 7c       	mov	r12,103
80003fd0:	f8 0a 18 00 	cp.b	r10,r12
80003fd4:	e0 8b 00 27 	brhi	80004022 <get_arg+0x122>
80003fd8:	36 5b       	mov	r11,101
80003fda:	f6 0a 18 00 	cp.b	r10,r11
80003fde:	c4 82       	brcc	8000406e <get_arg+0x16e>
80003fe0:	34 fb       	mov	r11,79
80003fe2:	f6 0a 18 00 	cp.b	r10,r11
80003fe6:	c4 80       	breq	80004076 <get_arg+0x176>
80003fe8:	e0 8b 00 0c 	brhi	80004000 <get_arg+0x100>
80003fec:	34 5b       	mov	r11,69
80003fee:	f6 0a 18 00 	cp.b	r10,r11
80003ff2:	c3 e0       	breq	8000406e <get_arg+0x16e>
80003ff4:	34 7b       	mov	r11,71
80003ff6:	f6 0a 18 00 	cp.b	r10,r11
80003ffa:	c3 a0       	breq	8000406e <get_arg+0x16e>
80003ffc:	34 4b       	mov	r11,68
80003ffe:	c0 88       	rjmp	8000400e <get_arg+0x10e>
80004000:	35 8b       	mov	r11,88
80004002:	f6 0a 18 00 	cp.b	r10,r11
80004006:	c2 c0       	breq	8000405e <get_arg+0x15e>
80004008:	e0 8b 00 07 	brhi	80004016 <get_arg+0x116>
8000400c:	35 5b       	mov	r11,85
8000400e:	f6 0a 18 00 	cp.b	r10,r11
80004012:	c3 51       	brne	8000407c <get_arg+0x17c>
80004014:	c3 18       	rjmp	80004076 <get_arg+0x176>
80004016:	36 3b       	mov	r11,99
80004018:	f6 0a 18 00 	cp.b	r10,r11
8000401c:	c2 f0       	breq	8000407a <get_arg+0x17a>
8000401e:	36 4b       	mov	r11,100
80004020:	c0 e8       	rjmp	8000403c <get_arg+0x13c>
80004022:	37 0b       	mov	r11,112
80004024:	f6 0a 18 00 	cp.b	r10,r11
80004028:	c2 50       	breq	80004072 <get_arg+0x172>
8000402a:	e0 8b 00 0d 	brhi	80004044 <get_arg+0x144>
8000402e:	36 eb       	mov	r11,110
80004030:	f6 0a 18 00 	cp.b	r10,r11
80004034:	c1 f0       	breq	80004072 <get_arg+0x172>
80004036:	e0 8b 00 14 	brhi	8000405e <get_arg+0x15e>
8000403a:	36 9b       	mov	r11,105
8000403c:	f6 0a 18 00 	cp.b	r10,r11
80004040:	c1 e1       	brne	8000407c <get_arg+0x17c>
80004042:	c0 e8       	rjmp	8000405e <get_arg+0x15e>
80004044:	37 5b       	mov	r11,117
80004046:	f6 0a 18 00 	cp.b	r10,r11
8000404a:	c0 a0       	breq	8000405e <get_arg+0x15e>
8000404c:	37 8b       	mov	r11,120
8000404e:	f6 0a 18 00 	cp.b	r10,r11
80004052:	c0 60       	breq	8000405e <get_arg+0x15e>
80004054:	37 3b       	mov	r11,115
80004056:	f6 0a 18 00 	cp.b	r10,r11
8000405a:	c1 11       	brne	8000407c <get_arg+0x17c>
8000405c:	c0 b8       	rjmp	80004072 <get_arg+0x172>
8000405e:	ed b4 00 04 	bld	r4,0x4
80004062:	c0 a0       	breq	80004076 <get_arg+0x176>
80004064:	ed b4 00 05 	bld	r4,0x5
80004068:	c0 91       	brne	8000407a <get_arg+0x17a>
8000406a:	30 20       	mov	r0,2
8000406c:	c0 88       	rjmp	8000407c <get_arg+0x17c>
8000406e:	30 40       	mov	r0,4
80004070:	c0 68       	rjmp	8000407c <get_arg+0x17c>
80004072:	30 30       	mov	r0,3
80004074:	c0 48       	rjmp	8000407c <get_arg+0x17c>
80004076:	30 10       	mov	r0,1
80004078:	c0 28       	rjmp	8000407c <get_arg+0x17c>
8000407a:	30 00       	mov	r0,0
8000407c:	40 3b       	lddsp	r11,sp[0xc]
8000407e:	5b fb       	cp.w	r11,-1
80004080:	c0 40       	breq	80004088 <get_arg+0x188>
80004082:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80004086:	c7 08       	rjmp	80004166 <get_arg+0x266>
80004088:	58 60       	cp.w	r0,6
8000408a:	e0 8b 00 6e 	brhi	80004166 <get_arg+0x266>
8000408e:	6c 0a       	ld.w	r10,r6[0x0]
80004090:	ea cc ff ff 	sub	r12,r5,-1
80004094:	fe ce a8 98 	sub	lr,pc,-22376
80004098:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000409c:	f4 cb ff f8 	sub	r11,r10,-8
800040a0:	8d 0b       	st.w	r6[0x0],r11
800040a2:	f4 ea 00 00 	ld.d	r10,r10[0]
800040a6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800040aa:	c0 f8       	rjmp	800040c8 <get_arg+0x1c8>
800040ac:	f4 cb ff fc 	sub	r11,r10,-4
800040b0:	8d 0b       	st.w	r6[0x0],r11
800040b2:	74 0a       	ld.w	r10,r10[0x0]
800040b4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800040b8:	c0 88       	rjmp	800040c8 <get_arg+0x1c8>
800040ba:	f4 cb ff f8 	sub	r11,r10,-8
800040be:	8d 0b       	st.w	r6[0x0],r11
800040c0:	f4 ea 00 00 	ld.d	r10,r10[0]
800040c4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800040c8:	0e 9b       	mov	r11,r7
800040ca:	18 95       	mov	r5,r12
800040cc:	c4 e8       	rjmp	80004168 <get_arg+0x268>
800040ce:	62 0a       	ld.w	r10,r1[0x0]
800040d0:	5b fa       	cp.w	r10,-1
800040d2:	c0 b1       	brne	800040e8 <get_arg+0x1e8>
800040d4:	50 19       	stdsp	sp[0x4],r9
800040d6:	50 28       	stdsp	sp[0x8],r8
800040d8:	e0 6a 00 80 	mov	r10,128
800040dc:	30 0b       	mov	r11,0
800040de:	02 9c       	mov	r12,r1
800040e0:	e0 a0 1d 78 	rcall	80007bd0 <memset>
800040e4:	40 28       	lddsp	r8,sp[0x8]
800040e6:	40 19       	lddsp	r9,sp[0x4]
800040e8:	e4 cc 00 01 	sub	r12,r2,1
800040ec:	0e 9b       	mov	r11,r7
800040ee:	50 3c       	stdsp	sp[0xc],r12
800040f0:	f2 0c 0c 49 	max	r9,r9,r12
800040f4:	c3 a8       	rjmp	80004168 <get_arg+0x268>
800040f6:	62 0a       	ld.w	r10,r1[0x0]
800040f8:	5b fa       	cp.w	r10,-1
800040fa:	c0 b1       	brne	80004110 <get_arg+0x210>
800040fc:	50 19       	stdsp	sp[0x4],r9
800040fe:	50 28       	stdsp	sp[0x8],r8
80004100:	e0 6a 00 80 	mov	r10,128
80004104:	30 0b       	mov	r11,0
80004106:	02 9c       	mov	r12,r1
80004108:	e0 a0 1d 64 	rcall	80007bd0 <memset>
8000410c:	40 28       	lddsp	r8,sp[0x8]
8000410e:	40 19       	lddsp	r9,sp[0x4]
80004110:	20 12       	sub	r2,1
80004112:	30 0a       	mov	r10,0
80004114:	0e 9b       	mov	r11,r7
80004116:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000411a:	f2 02 0c 49 	max	r9,r9,r2
8000411e:	c2 58       	rjmp	80004168 <get_arg+0x268>
80004120:	16 97       	mov	r7,r11
80004122:	6c 0a       	ld.w	r10,r6[0x0]
80004124:	f4 cb ff fc 	sub	r11,r10,-4
80004128:	8d 0b       	st.w	r6[0x0],r11
8000412a:	74 0a       	ld.w	r10,r10[0x0]
8000412c:	0e 9b       	mov	r11,r7
8000412e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004132:	2f f5       	sub	r5,-1
80004134:	c1 a8       	rjmp	80004168 <get_arg+0x268>
80004136:	f4 c2 00 30 	sub	r2,r10,48
8000413a:	c0 68       	rjmp	80004146 <get_arg+0x246>
8000413c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004140:	2f f7       	sub	r7,-1
80004142:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004146:	0f 8a       	ld.ub	r10,r7[0x0]
80004148:	58 0a       	cp.w	r10,0
8000414a:	c0 e0       	breq	80004166 <get_arg+0x266>
8000414c:	23 0a       	sub	r10,48
8000414e:	58 9a       	cp.w	r10,9
80004150:	fe 98 ff f6 	brls	8000413c <get_arg+0x23c>
80004154:	c0 98       	rjmp	80004166 <get_arg+0x266>
80004156:	2f f7       	sub	r7,-1
80004158:	0f 8a       	ld.ub	r10,r7[0x0]
8000415a:	58 0a       	cp.w	r10,0
8000415c:	c0 50       	breq	80004166 <get_arg+0x266>
8000415e:	23 0a       	sub	r10,48
80004160:	58 9a       	cp.w	r10,9
80004162:	fe 98 ff fa 	brls	80004156 <get_arg+0x256>
80004166:	0e 9b       	mov	r11,r7
80004168:	40 7c       	lddsp	r12,sp[0x1c]
8000416a:	30 ba       	mov	r10,11
8000416c:	f4 0c 18 00 	cp.b	r12,r10
80004170:	fe 91 fe f2 	brne	80003f54 <get_arg+0x54>
80004174:	40 42       	lddsp	r2,sp[0x10]
80004176:	17 8c       	ld.ub	r12,r11[0x0]
80004178:	0a 32       	cp.w	r2,r5
8000417a:	5f 4a       	srge	r10
8000417c:	f0 0c 18 00 	cp.b	r12,r8
80004180:	5f 1c       	srne	r12
80004182:	f9 ea 00 0a 	and	r10,r12,r10
80004186:	f0 0a 18 00 	cp.b	r10,r8
8000418a:	fe 91 fe cf 	brne	80003f28 <get_arg+0x28>
8000418e:	30 08       	mov	r8,0
80004190:	40 4e       	lddsp	lr,sp[0x10]
80004192:	17 8a       	ld.ub	r10,r11[0x0]
80004194:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004198:	f0 0a 18 00 	cp.b	r10,r8
8000419c:	fc 09 17 10 	movne	r9,lr
800041a0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800041a4:	06 9e       	mov	lr,r3
800041a6:	c2 a8       	rjmp	800041fa <get_arg+0x2fa>
800041a8:	62 0a       	ld.w	r10,r1[0x0]
800041aa:	58 3a       	cp.w	r10,3
800041ac:	c1 e0       	breq	800041e8 <get_arg+0x2e8>
800041ae:	e0 89 00 07 	brgt	800041bc <get_arg+0x2bc>
800041b2:	58 1a       	cp.w	r10,1
800041b4:	c1 a0       	breq	800041e8 <get_arg+0x2e8>
800041b6:	58 2a       	cp.w	r10,2
800041b8:	c1 81       	brne	800041e8 <get_arg+0x2e8>
800041ba:	c0 58       	rjmp	800041c4 <get_arg+0x2c4>
800041bc:	58 5a       	cp.w	r10,5
800041be:	c0 c0       	breq	800041d6 <get_arg+0x2d6>
800041c0:	c0 b5       	brlt	800041d6 <get_arg+0x2d6>
800041c2:	c1 38       	rjmp	800041e8 <get_arg+0x2e8>
800041c4:	6c 0a       	ld.w	r10,r6[0x0]
800041c6:	f4 cc ff f8 	sub	r12,r10,-8
800041ca:	8d 0c       	st.w	r6[0x0],r12
800041cc:	f4 e2 00 00 	ld.d	r2,r10[0]
800041d0:	f0 e3 00 00 	st.d	r8[0],r2
800041d4:	c1 08       	rjmp	800041f4 <get_arg+0x2f4>
800041d6:	6c 0a       	ld.w	r10,r6[0x0]
800041d8:	f4 cc ff f8 	sub	r12,r10,-8
800041dc:	8d 0c       	st.w	r6[0x0],r12
800041de:	f4 e2 00 00 	ld.d	r2,r10[0]
800041e2:	f0 e3 00 00 	st.d	r8[0],r2
800041e6:	c0 78       	rjmp	800041f4 <get_arg+0x2f4>
800041e8:	6c 0a       	ld.w	r10,r6[0x0]
800041ea:	f4 cc ff fc 	sub	r12,r10,-4
800041ee:	8d 0c       	st.w	r6[0x0],r12
800041f0:	74 0a       	ld.w	r10,r10[0x0]
800041f2:	91 0a       	st.w	r8[0x0],r10
800041f4:	2f f5       	sub	r5,-1
800041f6:	2f 88       	sub	r8,-8
800041f8:	2f c1       	sub	r1,-4
800041fa:	12 35       	cp.w	r5,r9
800041fc:	fe 9a ff d6 	brle	800041a8 <get_arg+0x2a8>
80004200:	1c 93       	mov	r3,lr
80004202:	40 52       	lddsp	r2,sp[0x14]
80004204:	40 6e       	lddsp	lr,sp[0x18]
80004206:	85 05       	st.w	r2[0x0],r5
80004208:	9d 0b       	st.w	lr[0x0],r11
8000420a:	40 4b       	lddsp	r11,sp[0x10]
8000420c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004210:	2f 8d       	sub	sp,-32
80004212:	d8 32       	popm	r0-r7,pc

80004214 <__sprint_r>:
80004214:	d4 21       	pushm	r4-r7,lr
80004216:	14 97       	mov	r7,r10
80004218:	74 28       	ld.w	r8,r10[0x8]
8000421a:	58 08       	cp.w	r8,0
8000421c:	c0 41       	brne	80004224 <__sprint_r+0x10>
8000421e:	95 18       	st.w	r10[0x4],r8
80004220:	10 9c       	mov	r12,r8
80004222:	d8 22       	popm	r4-r7,pc
80004224:	e0 a0 18 b4 	rcall	8000738c <__sfvwrite_r>
80004228:	30 08       	mov	r8,0
8000422a:	8f 18       	st.w	r7[0x4],r8
8000422c:	8f 28       	st.w	r7[0x8],r8
8000422e:	d8 22       	popm	r4-r7,pc

80004230 <_vfprintf_r>:
80004230:	d4 31       	pushm	r0-r7,lr
80004232:	fa cd 06 bc 	sub	sp,sp,1724
80004236:	51 09       	stdsp	sp[0x40],r9
80004238:	16 91       	mov	r1,r11
8000423a:	14 97       	mov	r7,r10
8000423c:	18 95       	mov	r5,r12
8000423e:	e0 a0 1a 1d 	rcall	80007678 <_localeconv_r>
80004242:	78 0c       	ld.w	r12,r12[0x0]
80004244:	50 cc       	stdsp	sp[0x30],r12
80004246:	58 05       	cp.w	r5,0
80004248:	c0 70       	breq	80004256 <_vfprintf_r+0x26>
8000424a:	6a 68       	ld.w	r8,r5[0x18]
8000424c:	58 08       	cp.w	r8,0
8000424e:	c0 41       	brne	80004256 <_vfprintf_r+0x26>
80004250:	0a 9c       	mov	r12,r5
80004252:	e0 a0 17 3d 	rcall	800070cc <__sinit>
80004256:	fe c8 a6 96 	sub	r8,pc,-22890
8000425a:	10 31       	cp.w	r1,r8
8000425c:	c0 31       	brne	80004262 <_vfprintf_r+0x32>
8000425e:	6a 01       	ld.w	r1,r5[0x0]
80004260:	c0 c8       	rjmp	80004278 <_vfprintf_r+0x48>
80004262:	fe c8 a6 82 	sub	r8,pc,-22910
80004266:	10 31       	cp.w	r1,r8
80004268:	c0 31       	brne	8000426e <_vfprintf_r+0x3e>
8000426a:	6a 11       	ld.w	r1,r5[0x4]
8000426c:	c0 68       	rjmp	80004278 <_vfprintf_r+0x48>
8000426e:	fe c8 a6 6e 	sub	r8,pc,-22930
80004272:	10 31       	cp.w	r1,r8
80004274:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004278:	82 68       	ld.sh	r8,r1[0xc]
8000427a:	ed b8 00 03 	bld	r8,0x3
8000427e:	c0 41       	brne	80004286 <_vfprintf_r+0x56>
80004280:	62 48       	ld.w	r8,r1[0x10]
80004282:	58 08       	cp.w	r8,0
80004284:	c0 71       	brne	80004292 <_vfprintf_r+0x62>
80004286:	02 9b       	mov	r11,r1
80004288:	0a 9c       	mov	r12,r5
8000428a:	e0 a0 0f 5d 	rcall	80006144 <__swsetup_r>
8000428e:	e0 81 0f 54 	brne	80006136 <_vfprintf_r+0x1f06>
80004292:	82 68       	ld.sh	r8,r1[0xc]
80004294:	10 99       	mov	r9,r8
80004296:	e2 19 00 1a 	andl	r9,0x1a,COH
8000429a:	58 a9       	cp.w	r9,10
8000429c:	c3 c1       	brne	80004314 <_vfprintf_r+0xe4>
8000429e:	82 79       	ld.sh	r9,r1[0xe]
800042a0:	30 0a       	mov	r10,0
800042a2:	f4 09 19 00 	cp.h	r9,r10
800042a6:	c3 75       	brlt	80004314 <_vfprintf_r+0xe4>
800042a8:	a1 d8       	cbr	r8,0x1
800042aa:	fb 58 05 d0 	st.h	sp[1488],r8
800042ae:	62 88       	ld.w	r8,r1[0x20]
800042b0:	fb 48 05 e4 	st.w	sp[1508],r8
800042b4:	62 a8       	ld.w	r8,r1[0x28]
800042b6:	fb 48 05 ec 	st.w	sp[1516],r8
800042ba:	fa c8 ff bc 	sub	r8,sp,-68
800042be:	fb 48 05 d4 	st.w	sp[1492],r8
800042c2:	fb 48 05 c4 	st.w	sp[1476],r8
800042c6:	e0 68 04 00 	mov	r8,1024
800042ca:	fb 48 05 d8 	st.w	sp[1496],r8
800042ce:	fb 48 05 cc 	st.w	sp[1484],r8
800042d2:	30 08       	mov	r8,0
800042d4:	fb 59 05 d2 	st.h	sp[1490],r9
800042d8:	0e 9a       	mov	r10,r7
800042da:	41 09       	lddsp	r9,sp[0x40]
800042dc:	fa c7 fa 3c 	sub	r7,sp,-1476
800042e0:	fb 48 05 dc 	st.w	sp[1500],r8
800042e4:	0a 9c       	mov	r12,r5
800042e6:	0e 9b       	mov	r11,r7
800042e8:	ca 4f       	rcall	80004230 <_vfprintf_r>
800042ea:	50 bc       	stdsp	sp[0x2c],r12
800042ec:	c0 95       	brlt	800042fe <_vfprintf_r+0xce>
800042ee:	0e 9b       	mov	r11,r7
800042f0:	0a 9c       	mov	r12,r5
800042f2:	e0 a0 16 15 	rcall	80006f1c <_fflush_r>
800042f6:	40 be       	lddsp	lr,sp[0x2c]
800042f8:	f9 be 01 ff 	movne	lr,-1
800042fc:	50 be       	stdsp	sp[0x2c],lr
800042fe:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004302:	ed b8 00 06 	bld	r8,0x6
80004306:	e0 81 0f 1a 	brne	8000613a <_vfprintf_r+0x1f0a>
8000430a:	82 68       	ld.sh	r8,r1[0xc]
8000430c:	a7 a8       	sbr	r8,0x6
8000430e:	a2 68       	st.h	r1[0xc],r8
80004310:	e0 8f 0f 15 	bral	8000613a <_vfprintf_r+0x1f0a>
80004314:	30 08       	mov	r8,0
80004316:	fb 48 06 b4 	st.w	sp[1716],r8
8000431a:	fb 48 06 90 	st.w	sp[1680],r8
8000431e:	fb 48 06 8c 	st.w	sp[1676],r8
80004322:	fb 48 06 b0 	st.w	sp[1712],r8
80004326:	30 08       	mov	r8,0
80004328:	30 09       	mov	r9,0
8000432a:	50 a7       	stdsp	sp[0x28],r7
8000432c:	50 78       	stdsp	sp[0x1c],r8
8000432e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004332:	3f f8       	mov	r8,-1
80004334:	50 59       	stdsp	sp[0x14],r9
80004336:	fb 43 06 88 	st.w	sp[1672],r3
8000433a:	fb 48 05 44 	st.w	sp[1348],r8
8000433e:	12 9c       	mov	r12,r9
80004340:	50 69       	stdsp	sp[0x18],r9
80004342:	50 d9       	stdsp	sp[0x34],r9
80004344:	50 e9       	stdsp	sp[0x38],r9
80004346:	50 b9       	stdsp	sp[0x2c],r9
80004348:	12 97       	mov	r7,r9
8000434a:	0a 94       	mov	r4,r5
8000434c:	40 a2       	lddsp	r2,sp[0x28]
8000434e:	32 5a       	mov	r10,37
80004350:	30 08       	mov	r8,0
80004352:	c0 28       	rjmp	80004356 <_vfprintf_r+0x126>
80004354:	2f f2       	sub	r2,-1
80004356:	05 89       	ld.ub	r9,r2[0x0]
80004358:	f0 09 18 00 	cp.b	r9,r8
8000435c:	5f 1b       	srne	r11
8000435e:	f4 09 18 00 	cp.b	r9,r10
80004362:	5f 19       	srne	r9
80004364:	f3 eb 00 0b 	and	r11,r9,r11
80004368:	f0 0b 18 00 	cp.b	r11,r8
8000436c:	cf 41       	brne	80004354 <_vfprintf_r+0x124>
8000436e:	40 ab       	lddsp	r11,sp[0x28]
80004370:	e4 0b 01 06 	sub	r6,r2,r11
80004374:	c1 e0       	breq	800043b0 <_vfprintf_r+0x180>
80004376:	fa f8 06 90 	ld.w	r8,sp[1680]
8000437a:	0c 08       	add	r8,r6
8000437c:	87 0b       	st.w	r3[0x0],r11
8000437e:	fb 48 06 90 	st.w	sp[1680],r8
80004382:	87 16       	st.w	r3[0x4],r6
80004384:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004388:	2f f8       	sub	r8,-1
8000438a:	fb 48 06 8c 	st.w	sp[1676],r8
8000438e:	58 78       	cp.w	r8,7
80004390:	e0 89 00 04 	brgt	80004398 <_vfprintf_r+0x168>
80004394:	2f 83       	sub	r3,-8
80004396:	c0 a8       	rjmp	800043aa <_vfprintf_r+0x17a>
80004398:	fa ca f9 78 	sub	r10,sp,-1672
8000439c:	02 9b       	mov	r11,r1
8000439e:	08 9c       	mov	r12,r4
800043a0:	c3 af       	rcall	80004214 <__sprint_r>
800043a2:	e0 81 0e c6 	brne	8000612e <_vfprintf_r+0x1efe>
800043a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800043aa:	40 ba       	lddsp	r10,sp[0x2c]
800043ac:	0c 0a       	add	r10,r6
800043ae:	50 ba       	stdsp	sp[0x2c],r10
800043b0:	05 89       	ld.ub	r9,r2[0x0]
800043b2:	30 08       	mov	r8,0
800043b4:	f0 09 18 00 	cp.b	r9,r8
800043b8:	e0 80 0e aa 	breq	8000610c <_vfprintf_r+0x1edc>
800043bc:	30 09       	mov	r9,0
800043be:	fb 68 06 bb 	st.b	sp[1723],r8
800043c2:	0e 96       	mov	r6,r7
800043c4:	e4 c8 ff ff 	sub	r8,r2,-1
800043c8:	3f fe       	mov	lr,-1
800043ca:	50 93       	stdsp	sp[0x24],r3
800043cc:	50 41       	stdsp	sp[0x10],r1
800043ce:	0e 93       	mov	r3,r7
800043d0:	04 91       	mov	r1,r2
800043d2:	50 89       	stdsp	sp[0x20],r9
800043d4:	50 a8       	stdsp	sp[0x28],r8
800043d6:	50 2e       	stdsp	sp[0x8],lr
800043d8:	50 39       	stdsp	sp[0xc],r9
800043da:	12 95       	mov	r5,r9
800043dc:	12 90       	mov	r0,r9
800043de:	10 97       	mov	r7,r8
800043e0:	08 92       	mov	r2,r4
800043e2:	c0 78       	rjmp	800043f0 <_vfprintf_r+0x1c0>
800043e4:	3f fc       	mov	r12,-1
800043e6:	08 97       	mov	r7,r4
800043e8:	50 2c       	stdsp	sp[0x8],r12
800043ea:	c0 38       	rjmp	800043f0 <_vfprintf_r+0x1c0>
800043ec:	30 0b       	mov	r11,0
800043ee:	50 3b       	stdsp	sp[0xc],r11
800043f0:	0f 38       	ld.ub	r8,r7++
800043f2:	c0 28       	rjmp	800043f6 <_vfprintf_r+0x1c6>
800043f4:	12 90       	mov	r0,r9
800043f6:	f0 c9 00 20 	sub	r9,r8,32
800043fa:	e0 49 00 58 	cp.w	r9,88
800043fe:	e0 8b 0a 30 	brhi	8000585e <_vfprintf_r+0x162e>
80004402:	fe ca ab ea 	sub	r10,pc,-21526
80004406:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000440a:	50 a7       	stdsp	sp[0x28],r7
8000440c:	50 80       	stdsp	sp[0x20],r0
8000440e:	0c 97       	mov	r7,r6
80004410:	04 94       	mov	r4,r2
80004412:	06 96       	mov	r6,r3
80004414:	02 92       	mov	r2,r1
80004416:	fe c9 a9 c2 	sub	r9,pc,-22078
8000441a:	40 93       	lddsp	r3,sp[0x24]
8000441c:	10 90       	mov	r0,r8
8000441e:	40 41       	lddsp	r1,sp[0x10]
80004420:	50 d9       	stdsp	sp[0x34],r9
80004422:	e0 8f 08 8e 	bral	8000553e <_vfprintf_r+0x130e>
80004426:	30 08       	mov	r8,0
80004428:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000442c:	f0 09 18 00 	cp.b	r9,r8
80004430:	ce 01       	brne	800043f0 <_vfprintf_r+0x1c0>
80004432:	32 08       	mov	r8,32
80004434:	c6 e8       	rjmp	80004510 <_vfprintf_r+0x2e0>
80004436:	a1 a5       	sbr	r5,0x0
80004438:	cd cb       	rjmp	800043f0 <_vfprintf_r+0x1c0>
8000443a:	0f 89       	ld.ub	r9,r7[0x0]
8000443c:	f2 c8 00 30 	sub	r8,r9,48
80004440:	58 98       	cp.w	r8,9
80004442:	e0 8b 00 1d 	brhi	8000447c <_vfprintf_r+0x24c>
80004446:	ee c8 ff ff 	sub	r8,r7,-1
8000444a:	30 0b       	mov	r11,0
8000444c:	23 09       	sub	r9,48
8000444e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004452:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004456:	11 39       	ld.ub	r9,r8++
80004458:	f2 ca 00 30 	sub	r10,r9,48
8000445c:	58 9a       	cp.w	r10,9
8000445e:	fe 98 ff f7 	brls	8000444c <_vfprintf_r+0x21c>
80004462:	e0 49 00 24 	cp.w	r9,36
80004466:	cc 31       	brne	800043ec <_vfprintf_r+0x1bc>
80004468:	e0 4b 00 20 	cp.w	r11,32
8000446c:	e0 89 0e 60 	brgt	8000612c <_vfprintf_r+0x1efc>
80004470:	20 1b       	sub	r11,1
80004472:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004476:	12 3b       	cp.w	r11,r9
80004478:	c0 95       	brlt	8000448a <_vfprintf_r+0x25a>
8000447a:	c1 08       	rjmp	8000449a <_vfprintf_r+0x26a>
8000447c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004480:	ec ca ff ff 	sub	r10,r6,-1
80004484:	12 36       	cp.w	r6,r9
80004486:	c1 f5       	brlt	800044c4 <_vfprintf_r+0x294>
80004488:	c2 68       	rjmp	800044d4 <_vfprintf_r+0x2a4>
8000448a:	fa ce f9 44 	sub	lr,sp,-1724
8000448e:	10 97       	mov	r7,r8
80004490:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004494:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004498:	c3 58       	rjmp	80004502 <_vfprintf_r+0x2d2>
8000449a:	10 97       	mov	r7,r8
8000449c:	fa c8 f9 50 	sub	r8,sp,-1712
800044a0:	1a d8       	st.w	--sp,r8
800044a2:	fa c8 fa b8 	sub	r8,sp,-1352
800044a6:	1a d8       	st.w	--sp,r8
800044a8:	fa c8 fb b4 	sub	r8,sp,-1100
800044ac:	02 9a       	mov	r10,r1
800044ae:	1a d8       	st.w	--sp,r8
800044b0:	04 9c       	mov	r12,r2
800044b2:	fa c8 f9 40 	sub	r8,sp,-1728
800044b6:	fa c9 ff b4 	sub	r9,sp,-76
800044ba:	fe b0 fd 23 	rcall	80003f00 <get_arg>
800044be:	2f dd       	sub	sp,-12
800044c0:	78 00       	ld.w	r0,r12[0x0]
800044c2:	c2 08       	rjmp	80004502 <_vfprintf_r+0x2d2>
800044c4:	fa cc f9 44 	sub	r12,sp,-1724
800044c8:	14 96       	mov	r6,r10
800044ca:	f8 03 00 38 	add	r8,r12,r3<<0x3
800044ce:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800044d2:	c1 88       	rjmp	80004502 <_vfprintf_r+0x2d2>
800044d4:	41 08       	lddsp	r8,sp[0x40]
800044d6:	59 f9       	cp.w	r9,31
800044d8:	e0 89 00 11 	brgt	800044fa <_vfprintf_r+0x2ca>
800044dc:	f0 cb ff fc 	sub	r11,r8,-4
800044e0:	51 0b       	stdsp	sp[0x40],r11
800044e2:	70 00       	ld.w	r0,r8[0x0]
800044e4:	fa cb f9 44 	sub	r11,sp,-1724
800044e8:	f6 09 00 38 	add	r8,r11,r9<<0x3
800044ec:	f1 40 fd 88 	st.w	r8[-632],r0
800044f0:	2f f9       	sub	r9,-1
800044f2:	14 96       	mov	r6,r10
800044f4:	fb 49 06 b4 	st.w	sp[1716],r9
800044f8:	c0 58       	rjmp	80004502 <_vfprintf_r+0x2d2>
800044fa:	70 00       	ld.w	r0,r8[0x0]
800044fc:	14 96       	mov	r6,r10
800044fe:	2f c8       	sub	r8,-4
80004500:	51 08       	stdsp	sp[0x40],r8
80004502:	58 00       	cp.w	r0,0
80004504:	fe 94 ff 76 	brge	800043f0 <_vfprintf_r+0x1c0>
80004508:	5c 30       	neg	r0
8000450a:	a3 a5       	sbr	r5,0x2
8000450c:	c7 2b       	rjmp	800043f0 <_vfprintf_r+0x1c0>
8000450e:	32 b8       	mov	r8,43
80004510:	fb 68 06 bb 	st.b	sp[1723],r8
80004514:	c6 eb       	rjmp	800043f0 <_vfprintf_r+0x1c0>
80004516:	0f 38       	ld.ub	r8,r7++
80004518:	e0 48 00 2a 	cp.w	r8,42
8000451c:	c0 30       	breq	80004522 <_vfprintf_r+0x2f2>
8000451e:	30 09       	mov	r9,0
80004520:	c7 98       	rjmp	80004612 <_vfprintf_r+0x3e2>
80004522:	0f 88       	ld.ub	r8,r7[0x0]
80004524:	f0 c9 00 30 	sub	r9,r8,48
80004528:	58 99       	cp.w	r9,9
8000452a:	e0 8b 00 1f 	brhi	80004568 <_vfprintf_r+0x338>
8000452e:	ee c4 ff ff 	sub	r4,r7,-1
80004532:	30 0b       	mov	r11,0
80004534:	23 08       	sub	r8,48
80004536:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000453a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000453e:	09 38       	ld.ub	r8,r4++
80004540:	f0 c9 00 30 	sub	r9,r8,48
80004544:	58 99       	cp.w	r9,9
80004546:	fe 98 ff f7 	brls	80004534 <_vfprintf_r+0x304>
8000454a:	e0 48 00 24 	cp.w	r8,36
8000454e:	fe 91 ff 4f 	brne	800043ec <_vfprintf_r+0x1bc>
80004552:	e0 4b 00 20 	cp.w	r11,32
80004556:	e0 89 0d eb 	brgt	8000612c <_vfprintf_r+0x1efc>
8000455a:	20 1b       	sub	r11,1
8000455c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004560:	10 3b       	cp.w	r11,r8
80004562:	c0 a5       	brlt	80004576 <_vfprintf_r+0x346>
80004564:	c1 18       	rjmp	80004586 <_vfprintf_r+0x356>
80004566:	d7 03       	nop
80004568:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000456c:	ec c9 ff ff 	sub	r9,r6,-1
80004570:	14 36       	cp.w	r6,r10
80004572:	c1 f5       	brlt	800045b0 <_vfprintf_r+0x380>
80004574:	c2 88       	rjmp	800045c4 <_vfprintf_r+0x394>
80004576:	fa ca f9 44 	sub	r10,sp,-1724
8000457a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000457e:	f6 fb fd 88 	ld.w	r11,r11[-632]
80004582:	50 2b       	stdsp	sp[0x8],r11
80004584:	c3 c8       	rjmp	800045fc <_vfprintf_r+0x3cc>
80004586:	fa c8 f9 50 	sub	r8,sp,-1712
8000458a:	1a d8       	st.w	--sp,r8
8000458c:	fa c8 fa b8 	sub	r8,sp,-1352
80004590:	1a d8       	st.w	--sp,r8
80004592:	fa c8 fb b4 	sub	r8,sp,-1100
80004596:	02 9a       	mov	r10,r1
80004598:	1a d8       	st.w	--sp,r8
8000459a:	04 9c       	mov	r12,r2
8000459c:	fa c8 f9 40 	sub	r8,sp,-1728
800045a0:	fa c9 ff b4 	sub	r9,sp,-76
800045a4:	fe b0 fc ae 	rcall	80003f00 <get_arg>
800045a8:	2f dd       	sub	sp,-12
800045aa:	78 0c       	ld.w	r12,r12[0x0]
800045ac:	50 2c       	stdsp	sp[0x8],r12
800045ae:	c2 78       	rjmp	800045fc <_vfprintf_r+0x3cc>
800045b0:	12 96       	mov	r6,r9
800045b2:	0e 94       	mov	r4,r7
800045b4:	fa c9 f9 44 	sub	r9,sp,-1724
800045b8:	f2 03 00 38 	add	r8,r9,r3<<0x3
800045bc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800045c0:	50 28       	stdsp	sp[0x8],r8
800045c2:	c1 d8       	rjmp	800045fc <_vfprintf_r+0x3cc>
800045c4:	41 08       	lddsp	r8,sp[0x40]
800045c6:	59 fa       	cp.w	r10,31
800045c8:	e0 89 00 14 	brgt	800045f0 <_vfprintf_r+0x3c0>
800045cc:	f0 cb ff fc 	sub	r11,r8,-4
800045d0:	70 08       	ld.w	r8,r8[0x0]
800045d2:	51 0b       	stdsp	sp[0x40],r11
800045d4:	50 28       	stdsp	sp[0x8],r8
800045d6:	fa c6 f9 44 	sub	r6,sp,-1724
800045da:	40 2e       	lddsp	lr,sp[0x8]
800045dc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800045e0:	f1 4e fd 88 	st.w	r8[-632],lr
800045e4:	2f fa       	sub	r10,-1
800045e6:	0e 94       	mov	r4,r7
800045e8:	fb 4a 06 b4 	st.w	sp[1716],r10
800045ec:	12 96       	mov	r6,r9
800045ee:	c0 78       	rjmp	800045fc <_vfprintf_r+0x3cc>
800045f0:	70 0c       	ld.w	r12,r8[0x0]
800045f2:	0e 94       	mov	r4,r7
800045f4:	2f c8       	sub	r8,-4
800045f6:	50 2c       	stdsp	sp[0x8],r12
800045f8:	12 96       	mov	r6,r9
800045fa:	51 08       	stdsp	sp[0x40],r8
800045fc:	40 2b       	lddsp	r11,sp[0x8]
800045fe:	58 0b       	cp.w	r11,0
80004600:	fe 95 fe f2 	brlt	800043e4 <_vfprintf_r+0x1b4>
80004604:	08 97       	mov	r7,r4
80004606:	cf 5a       	rjmp	800043f0 <_vfprintf_r+0x1c0>
80004608:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000460c:	0f 38       	ld.ub	r8,r7++
8000460e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004612:	f0 ca 00 30 	sub	r10,r8,48
80004616:	58 9a       	cp.w	r10,9
80004618:	fe 98 ff f8 	brls	80004608 <_vfprintf_r+0x3d8>
8000461c:	3f fa       	mov	r10,-1
8000461e:	f2 0a 0c 49 	max	r9,r9,r10
80004622:	50 29       	stdsp	sp[0x8],r9
80004624:	ce 9a       	rjmp	800043f6 <_vfprintf_r+0x1c6>
80004626:	a7 b5       	sbr	r5,0x7
80004628:	ce 4a       	rjmp	800043f0 <_vfprintf_r+0x1c0>
8000462a:	30 09       	mov	r9,0
8000462c:	23 08       	sub	r8,48
8000462e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004632:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004636:	0f 38       	ld.ub	r8,r7++
80004638:	f0 ca 00 30 	sub	r10,r8,48
8000463c:	58 9a       	cp.w	r10,9
8000463e:	fe 98 ff f7 	brls	8000462c <_vfprintf_r+0x3fc>
80004642:	e0 48 00 24 	cp.w	r8,36
80004646:	fe 91 fe d7 	brne	800043f4 <_vfprintf_r+0x1c4>
8000464a:	e0 49 00 20 	cp.w	r9,32
8000464e:	e0 89 0d 6f 	brgt	8000612c <_vfprintf_r+0x1efc>
80004652:	f2 c3 00 01 	sub	r3,r9,1
80004656:	30 19       	mov	r9,1
80004658:	50 39       	stdsp	sp[0xc],r9
8000465a:	cc ba       	rjmp	800043f0 <_vfprintf_r+0x1c0>
8000465c:	a3 b5       	sbr	r5,0x3
8000465e:	cc 9a       	rjmp	800043f0 <_vfprintf_r+0x1c0>
80004660:	a7 a5       	sbr	r5,0x6
80004662:	cc 7a       	rjmp	800043f0 <_vfprintf_r+0x1c0>
80004664:	0a 98       	mov	r8,r5
80004666:	a5 b5       	sbr	r5,0x5
80004668:	a5 a8       	sbr	r8,0x4
8000466a:	0f 89       	ld.ub	r9,r7[0x0]
8000466c:	36 ce       	mov	lr,108
8000466e:	fc 09 18 00 	cp.b	r9,lr
80004672:	f7 b7 00 ff 	subeq	r7,-1
80004676:	f0 05 17 10 	movne	r5,r8
8000467a:	cb ba       	rjmp	800043f0 <_vfprintf_r+0x1c0>
8000467c:	a5 b5       	sbr	r5,0x5
8000467e:	cb 9a       	rjmp	800043f0 <_vfprintf_r+0x1c0>
80004680:	50 a7       	stdsp	sp[0x28],r7
80004682:	50 80       	stdsp	sp[0x20],r0
80004684:	0c 97       	mov	r7,r6
80004686:	10 90       	mov	r0,r8
80004688:	06 96       	mov	r6,r3
8000468a:	04 94       	mov	r4,r2
8000468c:	40 93       	lddsp	r3,sp[0x24]
8000468e:	02 92       	mov	r2,r1
80004690:	0e 99       	mov	r9,r7
80004692:	40 41       	lddsp	r1,sp[0x10]
80004694:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004698:	40 3c       	lddsp	r12,sp[0xc]
8000469a:	58 0c       	cp.w	r12,0
8000469c:	c1 d0       	breq	800046d6 <_vfprintf_r+0x4a6>
8000469e:	10 36       	cp.w	r6,r8
800046a0:	c0 64       	brge	800046ac <_vfprintf_r+0x47c>
800046a2:	fa cb f9 44 	sub	r11,sp,-1724
800046a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800046aa:	c1 d8       	rjmp	800046e4 <_vfprintf_r+0x4b4>
800046ac:	fa c8 f9 50 	sub	r8,sp,-1712
800046b0:	1a d8       	st.w	--sp,r8
800046b2:	fa c8 fa b8 	sub	r8,sp,-1352
800046b6:	1a d8       	st.w	--sp,r8
800046b8:	fa c8 fb b4 	sub	r8,sp,-1100
800046bc:	1a d8       	st.w	--sp,r8
800046be:	fa c8 f9 40 	sub	r8,sp,-1728
800046c2:	fa c9 ff b4 	sub	r9,sp,-76
800046c6:	04 9a       	mov	r10,r2
800046c8:	0c 9b       	mov	r11,r6
800046ca:	08 9c       	mov	r12,r4
800046cc:	fe b0 fc 1a 	rcall	80003f00 <get_arg>
800046d0:	2f dd       	sub	sp,-12
800046d2:	19 b8       	ld.ub	r8,r12[0x3]
800046d4:	c2 28       	rjmp	80004718 <_vfprintf_r+0x4e8>
800046d6:	2f f7       	sub	r7,-1
800046d8:	10 39       	cp.w	r9,r8
800046da:	c0 84       	brge	800046ea <_vfprintf_r+0x4ba>
800046dc:	fa ca f9 44 	sub	r10,sp,-1724
800046e0:	f4 06 00 36 	add	r6,r10,r6<<0x3
800046e4:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800046e8:	c1 88       	rjmp	80004718 <_vfprintf_r+0x4e8>
800046ea:	41 09       	lddsp	r9,sp[0x40]
800046ec:	59 f8       	cp.w	r8,31
800046ee:	e0 89 00 12 	brgt	80004712 <_vfprintf_r+0x4e2>
800046f2:	f2 ca ff fc 	sub	r10,r9,-4
800046f6:	51 0a       	stdsp	sp[0x40],r10
800046f8:	72 09       	ld.w	r9,r9[0x0]
800046fa:	fa c6 f9 44 	sub	r6,sp,-1724
800046fe:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004702:	2f f8       	sub	r8,-1
80004704:	f5 49 fd 88 	st.w	r10[-632],r9
80004708:	fb 48 06 b4 	st.w	sp[1716],r8
8000470c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004710:	c0 48       	rjmp	80004718 <_vfprintf_r+0x4e8>
80004712:	13 b8       	ld.ub	r8,r9[0x3]
80004714:	2f c9       	sub	r9,-4
80004716:	51 09       	stdsp	sp[0x40],r9
80004718:	fb 68 06 60 	st.b	sp[1632],r8
8000471c:	30 0e       	mov	lr,0
8000471e:	30 08       	mov	r8,0
80004720:	30 12       	mov	r2,1
80004722:	fb 68 06 bb 	st.b	sp[1723],r8
80004726:	50 2e       	stdsp	sp[0x8],lr
80004728:	e0 8f 08 ad 	bral	80005882 <_vfprintf_r+0x1652>
8000472c:	50 a7       	stdsp	sp[0x28],r7
8000472e:	50 80       	stdsp	sp[0x20],r0
80004730:	0c 97       	mov	r7,r6
80004732:	04 94       	mov	r4,r2
80004734:	06 96       	mov	r6,r3
80004736:	02 92       	mov	r2,r1
80004738:	40 93       	lddsp	r3,sp[0x24]
8000473a:	10 90       	mov	r0,r8
8000473c:	40 41       	lddsp	r1,sp[0x10]
8000473e:	a5 a5       	sbr	r5,0x4
80004740:	c0 a8       	rjmp	80004754 <_vfprintf_r+0x524>
80004742:	50 a7       	stdsp	sp[0x28],r7
80004744:	50 80       	stdsp	sp[0x20],r0
80004746:	0c 97       	mov	r7,r6
80004748:	04 94       	mov	r4,r2
8000474a:	06 96       	mov	r6,r3
8000474c:	02 92       	mov	r2,r1
8000474e:	40 93       	lddsp	r3,sp[0x24]
80004750:	10 90       	mov	r0,r8
80004752:	40 41       	lddsp	r1,sp[0x10]
80004754:	ed b5 00 05 	bld	r5,0x5
80004758:	c5 11       	brne	800047fa <_vfprintf_r+0x5ca>
8000475a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000475e:	40 3c       	lddsp	r12,sp[0xc]
80004760:	58 0c       	cp.w	r12,0
80004762:	c1 e0       	breq	8000479e <_vfprintf_r+0x56e>
80004764:	10 36       	cp.w	r6,r8
80004766:	c0 64       	brge	80004772 <_vfprintf_r+0x542>
80004768:	fa cb f9 44 	sub	r11,sp,-1724
8000476c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004770:	c2 08       	rjmp	800047b0 <_vfprintf_r+0x580>
80004772:	fa c8 f9 50 	sub	r8,sp,-1712
80004776:	1a d8       	st.w	--sp,r8
80004778:	fa c8 fa b8 	sub	r8,sp,-1352
8000477c:	0c 9b       	mov	r11,r6
8000477e:	1a d8       	st.w	--sp,r8
80004780:	fa c8 fb b4 	sub	r8,sp,-1100
80004784:	1a d8       	st.w	--sp,r8
80004786:	fa c9 ff b4 	sub	r9,sp,-76
8000478a:	fa c8 f9 40 	sub	r8,sp,-1728
8000478e:	04 9a       	mov	r10,r2
80004790:	08 9c       	mov	r12,r4
80004792:	fe b0 fb b7 	rcall	80003f00 <get_arg>
80004796:	2f dd       	sub	sp,-12
80004798:	78 1b       	ld.w	r11,r12[0x4]
8000479a:	78 09       	ld.w	r9,r12[0x0]
8000479c:	c2 b8       	rjmp	800047f2 <_vfprintf_r+0x5c2>
8000479e:	ee ca ff ff 	sub	r10,r7,-1
800047a2:	10 37       	cp.w	r7,r8
800047a4:	c0 b4       	brge	800047ba <_vfprintf_r+0x58a>
800047a6:	fa c9 f9 44 	sub	r9,sp,-1724
800047aa:	14 97       	mov	r7,r10
800047ac:	f2 06 00 36 	add	r6,r9,r6<<0x3
800047b0:	ec fb fd 8c 	ld.w	r11,r6[-628]
800047b4:	ec f9 fd 88 	ld.w	r9,r6[-632]
800047b8:	c1 d8       	rjmp	800047f2 <_vfprintf_r+0x5c2>
800047ba:	41 09       	lddsp	r9,sp[0x40]
800047bc:	59 f8       	cp.w	r8,31
800047be:	e0 89 00 14 	brgt	800047e6 <_vfprintf_r+0x5b6>
800047c2:	f2 cb ff f8 	sub	r11,r9,-8
800047c6:	51 0b       	stdsp	sp[0x40],r11
800047c8:	fa c6 f9 44 	sub	r6,sp,-1724
800047cc:	72 1b       	ld.w	r11,r9[0x4]
800047ce:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800047d2:	72 09       	ld.w	r9,r9[0x0]
800047d4:	f9 4b fd 8c 	st.w	r12[-628],r11
800047d8:	f9 49 fd 88 	st.w	r12[-632],r9
800047dc:	2f f8       	sub	r8,-1
800047de:	14 97       	mov	r7,r10
800047e0:	fb 48 06 b4 	st.w	sp[1716],r8
800047e4:	c0 78       	rjmp	800047f2 <_vfprintf_r+0x5c2>
800047e6:	f2 c8 ff f8 	sub	r8,r9,-8
800047ea:	72 1b       	ld.w	r11,r9[0x4]
800047ec:	14 97       	mov	r7,r10
800047ee:	51 08       	stdsp	sp[0x40],r8
800047f0:	72 09       	ld.w	r9,r9[0x0]
800047f2:	16 98       	mov	r8,r11
800047f4:	fa e9 00 00 	st.d	sp[0],r8
800047f8:	ca e8       	rjmp	80004954 <_vfprintf_r+0x724>
800047fa:	ed b5 00 04 	bld	r5,0x4
800047fe:	c1 71       	brne	8000482c <_vfprintf_r+0x5fc>
80004800:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004804:	40 3e       	lddsp	lr,sp[0xc]
80004806:	58 0e       	cp.w	lr,0
80004808:	c0 80       	breq	80004818 <_vfprintf_r+0x5e8>
8000480a:	10 36       	cp.w	r6,r8
8000480c:	c6 94       	brge	800048de <_vfprintf_r+0x6ae>
8000480e:	fa cc f9 44 	sub	r12,sp,-1724
80004812:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004816:	c8 28       	rjmp	8000491a <_vfprintf_r+0x6ea>
80004818:	ee ca ff ff 	sub	r10,r7,-1
8000481c:	10 37       	cp.w	r7,r8
8000481e:	e0 84 00 81 	brge	80004920 <_vfprintf_r+0x6f0>
80004822:	fa cb f9 44 	sub	r11,sp,-1724
80004826:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000482a:	c7 78       	rjmp	80004918 <_vfprintf_r+0x6e8>
8000482c:	ed b5 00 06 	bld	r5,0x6
80004830:	c4 b1       	brne	800048c6 <_vfprintf_r+0x696>
80004832:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004836:	40 3c       	lddsp	r12,sp[0xc]
80004838:	58 0c       	cp.w	r12,0
8000483a:	c1 d0       	breq	80004874 <_vfprintf_r+0x644>
8000483c:	10 36       	cp.w	r6,r8
8000483e:	c0 64       	brge	8000484a <_vfprintf_r+0x61a>
80004840:	fa cb f9 44 	sub	r11,sp,-1724
80004844:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004848:	c1 f8       	rjmp	80004886 <_vfprintf_r+0x656>
8000484a:	fa c8 f9 50 	sub	r8,sp,-1712
8000484e:	1a d8       	st.w	--sp,r8
80004850:	fa c8 fa b8 	sub	r8,sp,-1352
80004854:	1a d8       	st.w	--sp,r8
80004856:	fa c8 fb b4 	sub	r8,sp,-1100
8000485a:	1a d8       	st.w	--sp,r8
8000485c:	fa c8 f9 40 	sub	r8,sp,-1728
80004860:	fa c9 ff b4 	sub	r9,sp,-76
80004864:	04 9a       	mov	r10,r2
80004866:	0c 9b       	mov	r11,r6
80004868:	08 9c       	mov	r12,r4
8000486a:	fe b0 fb 4b 	rcall	80003f00 <get_arg>
8000486e:	2f dd       	sub	sp,-12
80004870:	98 18       	ld.sh	r8,r12[0x2]
80004872:	c2 68       	rjmp	800048be <_vfprintf_r+0x68e>
80004874:	ee ca ff ff 	sub	r10,r7,-1
80004878:	10 37       	cp.w	r7,r8
8000487a:	c0 94       	brge	8000488c <_vfprintf_r+0x65c>
8000487c:	fa c9 f9 44 	sub	r9,sp,-1724
80004880:	14 97       	mov	r7,r10
80004882:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004886:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000488a:	c1 a8       	rjmp	800048be <_vfprintf_r+0x68e>
8000488c:	41 09       	lddsp	r9,sp[0x40]
8000488e:	59 f8       	cp.w	r8,31
80004890:	e0 89 00 13 	brgt	800048b6 <_vfprintf_r+0x686>
80004894:	f2 cb ff fc 	sub	r11,r9,-4
80004898:	51 0b       	stdsp	sp[0x40],r11
8000489a:	72 09       	ld.w	r9,r9[0x0]
8000489c:	fa c6 f9 44 	sub	r6,sp,-1724
800048a0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800048a4:	2f f8       	sub	r8,-1
800048a6:	f7 49 fd 88 	st.w	r11[-632],r9
800048aa:	fb 48 06 b4 	st.w	sp[1716],r8
800048ae:	14 97       	mov	r7,r10
800048b0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800048b4:	c0 58       	rjmp	800048be <_vfprintf_r+0x68e>
800048b6:	92 18       	ld.sh	r8,r9[0x2]
800048b8:	14 97       	mov	r7,r10
800048ba:	2f c9       	sub	r9,-4
800048bc:	51 09       	stdsp	sp[0x40],r9
800048be:	50 18       	stdsp	sp[0x4],r8
800048c0:	bf 58       	asr	r8,0x1f
800048c2:	50 08       	stdsp	sp[0x0],r8
800048c4:	c4 88       	rjmp	80004954 <_vfprintf_r+0x724>
800048c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800048ca:	40 3c       	lddsp	r12,sp[0xc]
800048cc:	58 0c       	cp.w	r12,0
800048ce:	c1 d0       	breq	80004908 <_vfprintf_r+0x6d8>
800048d0:	10 36       	cp.w	r6,r8
800048d2:	c0 64       	brge	800048de <_vfprintf_r+0x6ae>
800048d4:	fa cb f9 44 	sub	r11,sp,-1724
800048d8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800048dc:	c1 f8       	rjmp	8000491a <_vfprintf_r+0x6ea>
800048de:	fa c8 f9 50 	sub	r8,sp,-1712
800048e2:	1a d8       	st.w	--sp,r8
800048e4:	fa c8 fa b8 	sub	r8,sp,-1352
800048e8:	0c 9b       	mov	r11,r6
800048ea:	1a d8       	st.w	--sp,r8
800048ec:	fa c8 fb b4 	sub	r8,sp,-1100
800048f0:	04 9a       	mov	r10,r2
800048f2:	1a d8       	st.w	--sp,r8
800048f4:	08 9c       	mov	r12,r4
800048f6:	fa c8 f9 40 	sub	r8,sp,-1728
800048fa:	fa c9 ff b4 	sub	r9,sp,-76
800048fe:	fe b0 fb 01 	rcall	80003f00 <get_arg>
80004902:	2f dd       	sub	sp,-12
80004904:	78 0b       	ld.w	r11,r12[0x0]
80004906:	c2 48       	rjmp	8000494e <_vfprintf_r+0x71e>
80004908:	ee ca ff ff 	sub	r10,r7,-1
8000490c:	10 37       	cp.w	r7,r8
8000490e:	c0 94       	brge	80004920 <_vfprintf_r+0x6f0>
80004910:	fa c9 f9 44 	sub	r9,sp,-1724
80004914:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004918:	14 97       	mov	r7,r10
8000491a:	ec fb fd 88 	ld.w	r11,r6[-632]
8000491e:	c1 88       	rjmp	8000494e <_vfprintf_r+0x71e>
80004920:	41 09       	lddsp	r9,sp[0x40]
80004922:	59 f8       	cp.w	r8,31
80004924:	e0 89 00 11 	brgt	80004946 <_vfprintf_r+0x716>
80004928:	f2 cb ff fc 	sub	r11,r9,-4
8000492c:	51 0b       	stdsp	sp[0x40],r11
8000492e:	fa c6 f9 44 	sub	r6,sp,-1724
80004932:	72 0b       	ld.w	r11,r9[0x0]
80004934:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004938:	f3 4b fd 88 	st.w	r9[-632],r11
8000493c:	2f f8       	sub	r8,-1
8000493e:	14 97       	mov	r7,r10
80004940:	fb 48 06 b4 	st.w	sp[1716],r8
80004944:	c0 58       	rjmp	8000494e <_vfprintf_r+0x71e>
80004946:	72 0b       	ld.w	r11,r9[0x0]
80004948:	14 97       	mov	r7,r10
8000494a:	2f c9       	sub	r9,-4
8000494c:	51 09       	stdsp	sp[0x40],r9
8000494e:	50 1b       	stdsp	sp[0x4],r11
80004950:	bf 5b       	asr	r11,0x1f
80004952:	50 0b       	stdsp	sp[0x0],r11
80004954:	fa ea 00 00 	ld.d	r10,sp[0]
80004958:	58 0a       	cp.w	r10,0
8000495a:	5c 2b       	cpc	r11
8000495c:	c0 e4       	brge	80004978 <_vfprintf_r+0x748>
8000495e:	30 08       	mov	r8,0
80004960:	fa ea 00 00 	ld.d	r10,sp[0]
80004964:	30 09       	mov	r9,0
80004966:	f0 0a 01 0a 	sub	r10,r8,r10
8000496a:	f2 0b 01 4b 	sbc	r11,r9,r11
8000496e:	32 d8       	mov	r8,45
80004970:	fa eb 00 00 	st.d	sp[0],r10
80004974:	fb 68 06 bb 	st.b	sp[1723],r8
80004978:	30 18       	mov	r8,1
8000497a:	e0 8f 06 fa 	bral	8000576e <_vfprintf_r+0x153e>
8000497e:	50 a7       	stdsp	sp[0x28],r7
80004980:	50 80       	stdsp	sp[0x20],r0
80004982:	0c 97       	mov	r7,r6
80004984:	04 94       	mov	r4,r2
80004986:	06 96       	mov	r6,r3
80004988:	02 92       	mov	r2,r1
8000498a:	40 93       	lddsp	r3,sp[0x24]
8000498c:	10 90       	mov	r0,r8
8000498e:	40 41       	lddsp	r1,sp[0x10]
80004990:	0e 99       	mov	r9,r7
80004992:	ed b5 00 03 	bld	r5,0x3
80004996:	c4 11       	brne	80004a18 <_vfprintf_r+0x7e8>
80004998:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000499c:	40 3a       	lddsp	r10,sp[0xc]
8000499e:	58 0a       	cp.w	r10,0
800049a0:	c1 90       	breq	800049d2 <_vfprintf_r+0x7a2>
800049a2:	10 36       	cp.w	r6,r8
800049a4:	c6 45       	brlt	80004a6c <_vfprintf_r+0x83c>
800049a6:	fa c8 f9 50 	sub	r8,sp,-1712
800049aa:	1a d8       	st.w	--sp,r8
800049ac:	fa c8 fa b8 	sub	r8,sp,-1352
800049b0:	1a d8       	st.w	--sp,r8
800049b2:	fa c8 fb b4 	sub	r8,sp,-1100
800049b6:	0c 9b       	mov	r11,r6
800049b8:	1a d8       	st.w	--sp,r8
800049ba:	04 9a       	mov	r10,r2
800049bc:	fa c8 f9 40 	sub	r8,sp,-1728
800049c0:	fa c9 ff b4 	sub	r9,sp,-76
800049c4:	08 9c       	mov	r12,r4
800049c6:	fe b0 fa 9d 	rcall	80003f00 <get_arg>
800049ca:	2f dd       	sub	sp,-12
800049cc:	78 16       	ld.w	r6,r12[0x4]
800049ce:	50 76       	stdsp	sp[0x1c],r6
800049d0:	c4 88       	rjmp	80004a60 <_vfprintf_r+0x830>
800049d2:	2f f7       	sub	r7,-1
800049d4:	10 39       	cp.w	r9,r8
800049d6:	c0 c4       	brge	800049ee <_vfprintf_r+0x7be>
800049d8:	fa ce f9 44 	sub	lr,sp,-1724
800049dc:	fc 06 00 36 	add	r6,lr,r6<<0x3
800049e0:	ec fc fd 8c 	ld.w	r12,r6[-628]
800049e4:	50 7c       	stdsp	sp[0x1c],r12
800049e6:	ec f6 fd 88 	ld.w	r6,r6[-632]
800049ea:	50 56       	stdsp	sp[0x14],r6
800049ec:	c6 68       	rjmp	80004ab8 <_vfprintf_r+0x888>
800049ee:	41 09       	lddsp	r9,sp[0x40]
800049f0:	59 f8       	cp.w	r8,31
800049f2:	e0 89 00 10 	brgt	80004a12 <_vfprintf_r+0x7e2>
800049f6:	f2 ca ff f8 	sub	r10,r9,-8
800049fa:	72 1b       	ld.w	r11,r9[0x4]
800049fc:	51 0a       	stdsp	sp[0x40],r10
800049fe:	72 09       	ld.w	r9,r9[0x0]
80004a00:	fa ca f9 44 	sub	r10,sp,-1724
80004a04:	50 7b       	stdsp	sp[0x1c],r11
80004a06:	50 59       	stdsp	sp[0x14],r9
80004a08:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004a0c:	40 5b       	lddsp	r11,sp[0x14]
80004a0e:	40 7a       	lddsp	r10,sp[0x1c]
80004a10:	c4 78       	rjmp	80004a9e <_vfprintf_r+0x86e>
80004a12:	72 18       	ld.w	r8,r9[0x4]
80004a14:	50 78       	stdsp	sp[0x1c],r8
80004a16:	c4 c8       	rjmp	80004aae <_vfprintf_r+0x87e>
80004a18:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a1c:	40 3e       	lddsp	lr,sp[0xc]
80004a1e:	58 0e       	cp.w	lr,0
80004a20:	c2 30       	breq	80004a66 <_vfprintf_r+0x836>
80004a22:	10 36       	cp.w	r6,r8
80004a24:	c0 94       	brge	80004a36 <_vfprintf_r+0x806>
80004a26:	fa cc f9 44 	sub	r12,sp,-1724
80004a2a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004a2e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004a32:	50 7b       	stdsp	sp[0x1c],r11
80004a34:	cd 9b       	rjmp	800049e6 <_vfprintf_r+0x7b6>
80004a36:	fa c8 f9 50 	sub	r8,sp,-1712
80004a3a:	1a d8       	st.w	--sp,r8
80004a3c:	fa c8 fa b8 	sub	r8,sp,-1352
80004a40:	04 9a       	mov	r10,r2
80004a42:	1a d8       	st.w	--sp,r8
80004a44:	fa c8 fb b4 	sub	r8,sp,-1100
80004a48:	0c 9b       	mov	r11,r6
80004a4a:	1a d8       	st.w	--sp,r8
80004a4c:	08 9c       	mov	r12,r4
80004a4e:	fa c8 f9 40 	sub	r8,sp,-1728
80004a52:	fa c9 ff b4 	sub	r9,sp,-76
80004a56:	fe b0 fa 55 	rcall	80003f00 <get_arg>
80004a5a:	2f dd       	sub	sp,-12
80004a5c:	78 1a       	ld.w	r10,r12[0x4]
80004a5e:	50 7a       	stdsp	sp[0x1c],r10
80004a60:	78 0c       	ld.w	r12,r12[0x0]
80004a62:	50 5c       	stdsp	sp[0x14],r12
80004a64:	c2 a8       	rjmp	80004ab8 <_vfprintf_r+0x888>
80004a66:	2f f7       	sub	r7,-1
80004a68:	10 39       	cp.w	r9,r8
80004a6a:	c0 94       	brge	80004a7c <_vfprintf_r+0x84c>
80004a6c:	fa c9 f9 44 	sub	r9,sp,-1724
80004a70:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a74:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004a78:	50 78       	stdsp	sp[0x1c],r8
80004a7a:	cb 6b       	rjmp	800049e6 <_vfprintf_r+0x7b6>
80004a7c:	41 09       	lddsp	r9,sp[0x40]
80004a7e:	59 f8       	cp.w	r8,31
80004a80:	e0 89 00 15 	brgt	80004aaa <_vfprintf_r+0x87a>
80004a84:	f2 ca ff f8 	sub	r10,r9,-8
80004a88:	72 16       	ld.w	r6,r9[0x4]
80004a8a:	72 09       	ld.w	r9,r9[0x0]
80004a8c:	51 0a       	stdsp	sp[0x40],r10
80004a8e:	50 59       	stdsp	sp[0x14],r9
80004a90:	fa ce f9 44 	sub	lr,sp,-1724
80004a94:	50 76       	stdsp	sp[0x1c],r6
80004a96:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004a9a:	40 5b       	lddsp	r11,sp[0x14]
80004a9c:	0c 9a       	mov	r10,r6
80004a9e:	f2 eb fd 88 	st.d	r9[-632],r10
80004aa2:	2f f8       	sub	r8,-1
80004aa4:	fb 48 06 b4 	st.w	sp[1716],r8
80004aa8:	c0 88       	rjmp	80004ab8 <_vfprintf_r+0x888>
80004aaa:	72 1c       	ld.w	r12,r9[0x4]
80004aac:	50 7c       	stdsp	sp[0x1c],r12
80004aae:	f2 c8 ff f8 	sub	r8,r9,-8
80004ab2:	51 08       	stdsp	sp[0x40],r8
80004ab4:	72 09       	ld.w	r9,r9[0x0]
80004ab6:	50 59       	stdsp	sp[0x14],r9
80004ab8:	40 5b       	lddsp	r11,sp[0x14]
80004aba:	40 7a       	lddsp	r10,sp[0x1c]
80004abc:	e0 a0 1c de 	rcall	80008478 <__isinfd>
80004ac0:	18 96       	mov	r6,r12
80004ac2:	c1 70       	breq	80004af0 <_vfprintf_r+0x8c0>
80004ac4:	30 08       	mov	r8,0
80004ac6:	30 09       	mov	r9,0
80004ac8:	40 5b       	lddsp	r11,sp[0x14]
80004aca:	40 7a       	lddsp	r10,sp[0x1c]
80004acc:	fe b0 f9 22 	rcall	80003d10 <__avr32_f64_cmp_lt>
80004ad0:	c0 40       	breq	80004ad8 <_vfprintf_r+0x8a8>
80004ad2:	32 d8       	mov	r8,45
80004ad4:	fb 68 06 bb 	st.b	sp[1723],r8
80004ad8:	fe c8 b0 70 	sub	r8,pc,-20368
80004adc:	fe c6 b0 70 	sub	r6,pc,-20368
80004ae0:	a7 d5       	cbr	r5,0x7
80004ae2:	e0 40 00 47 	cp.w	r0,71
80004ae6:	f0 06 17 a0 	movle	r6,r8
80004aea:	30 32       	mov	r2,3
80004aec:	e0 8f 06 ce 	bral	80005888 <_vfprintf_r+0x1658>
80004af0:	40 5b       	lddsp	r11,sp[0x14]
80004af2:	40 7a       	lddsp	r10,sp[0x1c]
80004af4:	e0 a0 1c d7 	rcall	800084a2 <__isnand>
80004af8:	c0 e0       	breq	80004b14 <_vfprintf_r+0x8e4>
80004afa:	50 26       	stdsp	sp[0x8],r6
80004afc:	fe c8 b0 8c 	sub	r8,pc,-20340
80004b00:	fe c6 b0 8c 	sub	r6,pc,-20340
80004b04:	a7 d5       	cbr	r5,0x7
80004b06:	e0 40 00 47 	cp.w	r0,71
80004b0a:	f0 06 17 a0 	movle	r6,r8
80004b0e:	30 32       	mov	r2,3
80004b10:	e0 8f 06 c2 	bral	80005894 <_vfprintf_r+0x1664>
80004b14:	40 2a       	lddsp	r10,sp[0x8]
80004b16:	5b fa       	cp.w	r10,-1
80004b18:	c0 41       	brne	80004b20 <_vfprintf_r+0x8f0>
80004b1a:	30 69       	mov	r9,6
80004b1c:	50 29       	stdsp	sp[0x8],r9
80004b1e:	c1 18       	rjmp	80004b40 <_vfprintf_r+0x910>
80004b20:	e0 40 00 47 	cp.w	r0,71
80004b24:	5f 09       	sreq	r9
80004b26:	e0 40 00 67 	cp.w	r0,103
80004b2a:	5f 08       	sreq	r8
80004b2c:	f3 e8 10 08 	or	r8,r9,r8
80004b30:	f8 08 18 00 	cp.b	r8,r12
80004b34:	c0 60       	breq	80004b40 <_vfprintf_r+0x910>
80004b36:	40 28       	lddsp	r8,sp[0x8]
80004b38:	58 08       	cp.w	r8,0
80004b3a:	f9 b8 00 01 	moveq	r8,1
80004b3e:	50 28       	stdsp	sp[0x8],r8
80004b40:	40 78       	lddsp	r8,sp[0x1c]
80004b42:	40 59       	lddsp	r9,sp[0x14]
80004b44:	fa e9 06 94 	st.d	sp[1684],r8
80004b48:	a9 a5       	sbr	r5,0x8
80004b4a:	fa f8 06 94 	ld.w	r8,sp[1684]
80004b4e:	58 08       	cp.w	r8,0
80004b50:	c0 65       	brlt	80004b5c <_vfprintf_r+0x92c>
80004b52:	40 5e       	lddsp	lr,sp[0x14]
80004b54:	30 0c       	mov	r12,0
80004b56:	50 6e       	stdsp	sp[0x18],lr
80004b58:	50 9c       	stdsp	sp[0x24],r12
80004b5a:	c0 78       	rjmp	80004b68 <_vfprintf_r+0x938>
80004b5c:	40 5b       	lddsp	r11,sp[0x14]
80004b5e:	32 da       	mov	r10,45
80004b60:	ee 1b 80 00 	eorh	r11,0x8000
80004b64:	50 9a       	stdsp	sp[0x24],r10
80004b66:	50 6b       	stdsp	sp[0x18],r11
80004b68:	e0 40 00 46 	cp.w	r0,70
80004b6c:	5f 09       	sreq	r9
80004b6e:	e0 40 00 66 	cp.w	r0,102
80004b72:	5f 08       	sreq	r8
80004b74:	f3 e8 10 08 	or	r8,r9,r8
80004b78:	50 48       	stdsp	sp[0x10],r8
80004b7a:	c0 40       	breq	80004b82 <_vfprintf_r+0x952>
80004b7c:	40 22       	lddsp	r2,sp[0x8]
80004b7e:	30 39       	mov	r9,3
80004b80:	c1 08       	rjmp	80004ba0 <_vfprintf_r+0x970>
80004b82:	e0 40 00 45 	cp.w	r0,69
80004b86:	5f 09       	sreq	r9
80004b88:	e0 40 00 65 	cp.w	r0,101
80004b8c:	5f 08       	sreq	r8
80004b8e:	40 22       	lddsp	r2,sp[0x8]
80004b90:	10 49       	or	r9,r8
80004b92:	2f f2       	sub	r2,-1
80004b94:	40 46       	lddsp	r6,sp[0x10]
80004b96:	ec 09 18 00 	cp.b	r9,r6
80004b9a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004b9e:	30 29       	mov	r9,2
80004ba0:	fa c8 f9 5c 	sub	r8,sp,-1700
80004ba4:	1a d8       	st.w	--sp,r8
80004ba6:	fa c8 f9 54 	sub	r8,sp,-1708
80004baa:	1a d8       	st.w	--sp,r8
80004bac:	fa c8 f9 4c 	sub	r8,sp,-1716
80004bb0:	08 9c       	mov	r12,r4
80004bb2:	1a d8       	st.w	--sp,r8
80004bb4:	04 98       	mov	r8,r2
80004bb6:	40 9b       	lddsp	r11,sp[0x24]
80004bb8:	40 aa       	lddsp	r10,sp[0x28]
80004bba:	e0 a0 0b c3 	rcall	80006340 <_dtoa_r>
80004bbe:	e0 40 00 47 	cp.w	r0,71
80004bc2:	5f 19       	srne	r9
80004bc4:	e0 40 00 67 	cp.w	r0,103
80004bc8:	5f 18       	srne	r8
80004bca:	18 96       	mov	r6,r12
80004bcc:	2f dd       	sub	sp,-12
80004bce:	f3 e8 00 08 	and	r8,r9,r8
80004bd2:	c0 41       	brne	80004bda <_vfprintf_r+0x9aa>
80004bd4:	ed b5 00 00 	bld	r5,0x0
80004bd8:	c3 01       	brne	80004c38 <_vfprintf_r+0xa08>
80004bda:	ec 02 00 0e 	add	lr,r6,r2
80004bde:	50 3e       	stdsp	sp[0xc],lr
80004be0:	40 4c       	lddsp	r12,sp[0x10]
80004be2:	58 0c       	cp.w	r12,0
80004be4:	c1 50       	breq	80004c0e <_vfprintf_r+0x9de>
80004be6:	0d 89       	ld.ub	r9,r6[0x0]
80004be8:	33 08       	mov	r8,48
80004bea:	f0 09 18 00 	cp.b	r9,r8
80004bee:	c0 b1       	brne	80004c04 <_vfprintf_r+0x9d4>
80004bf0:	30 08       	mov	r8,0
80004bf2:	30 09       	mov	r9,0
80004bf4:	40 6b       	lddsp	r11,sp[0x18]
80004bf6:	40 7a       	lddsp	r10,sp[0x1c]
80004bf8:	e0 a0 1f 91 	rcall	80008b1a <__avr32_f64_cmp_eq>
80004bfc:	fb b2 00 01 	rsubeq	r2,1
80004c00:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004c04:	40 3b       	lddsp	r11,sp[0xc]
80004c06:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004c0a:	10 0b       	add	r11,r8
80004c0c:	50 3b       	stdsp	sp[0xc],r11
80004c0e:	40 6b       	lddsp	r11,sp[0x18]
80004c10:	30 08       	mov	r8,0
80004c12:	30 09       	mov	r9,0
80004c14:	40 7a       	lddsp	r10,sp[0x1c]
80004c16:	e0 a0 1f 82 	rcall	80008b1a <__avr32_f64_cmp_eq>
80004c1a:	c0 90       	breq	80004c2c <_vfprintf_r+0x9fc>
80004c1c:	40 3a       	lddsp	r10,sp[0xc]
80004c1e:	fb 4a 06 a4 	st.w	sp[1700],r10
80004c22:	c0 58       	rjmp	80004c2c <_vfprintf_r+0x9fc>
80004c24:	10 c9       	st.b	r8++,r9
80004c26:	fb 48 06 a4 	st.w	sp[1700],r8
80004c2a:	c0 28       	rjmp	80004c2e <_vfprintf_r+0x9fe>
80004c2c:	33 09       	mov	r9,48
80004c2e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80004c32:	40 3e       	lddsp	lr,sp[0xc]
80004c34:	1c 38       	cp.w	r8,lr
80004c36:	cf 73       	brcs	80004c24 <_vfprintf_r+0x9f4>
80004c38:	e0 40 00 47 	cp.w	r0,71
80004c3c:	5f 09       	sreq	r9
80004c3e:	e0 40 00 67 	cp.w	r0,103
80004c42:	5f 08       	sreq	r8
80004c44:	f3 e8 10 08 	or	r8,r9,r8
80004c48:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004c4c:	0c 19       	sub	r9,r6
80004c4e:	50 69       	stdsp	sp[0x18],r9
80004c50:	58 08       	cp.w	r8,0
80004c52:	c0 b0       	breq	80004c68 <_vfprintf_r+0xa38>
80004c54:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004c58:	5b d8       	cp.w	r8,-3
80004c5a:	c0 55       	brlt	80004c64 <_vfprintf_r+0xa34>
80004c5c:	40 2c       	lddsp	r12,sp[0x8]
80004c5e:	18 38       	cp.w	r8,r12
80004c60:	e0 8a 00 6a 	brle	80004d34 <_vfprintf_r+0xb04>
80004c64:	20 20       	sub	r0,2
80004c66:	c0 58       	rjmp	80004c70 <_vfprintf_r+0xa40>
80004c68:	e0 40 00 65 	cp.w	r0,101
80004c6c:	e0 89 00 46 	brgt	80004cf8 <_vfprintf_r+0xac8>
80004c70:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004c74:	fb 60 06 9c 	st.b	sp[1692],r0
80004c78:	20 1b       	sub	r11,1
80004c7a:	fb 4b 06 ac 	st.w	sp[1708],r11
80004c7e:	c0 47       	brpl	80004c86 <_vfprintf_r+0xa56>
80004c80:	5c 3b       	neg	r11
80004c82:	32 d8       	mov	r8,45
80004c84:	c0 28       	rjmp	80004c88 <_vfprintf_r+0xa58>
80004c86:	32 b8       	mov	r8,43
80004c88:	fb 68 06 9d 	st.b	sp[1693],r8
80004c8c:	58 9b       	cp.w	r11,9
80004c8e:	e0 8a 00 1d 	brle	80004cc8 <_vfprintf_r+0xa98>
80004c92:	fa c9 fa 35 	sub	r9,sp,-1483
80004c96:	30 aa       	mov	r10,10
80004c98:	12 98       	mov	r8,r9
80004c9a:	0e 9c       	mov	r12,r7
80004c9c:	0c 92       	mov	r2,r6
80004c9e:	f6 0a 0c 06 	divs	r6,r11,r10
80004ca2:	0e 9b       	mov	r11,r7
80004ca4:	2d 0b       	sub	r11,-48
80004ca6:	10 fb       	st.b	--r8,r11
80004ca8:	0c 9b       	mov	r11,r6
80004caa:	58 96       	cp.w	r6,9
80004cac:	fe 99 ff f9 	brgt	80004c9e <_vfprintf_r+0xa6e>
80004cb0:	2d 0b       	sub	r11,-48
80004cb2:	18 97       	mov	r7,r12
80004cb4:	04 96       	mov	r6,r2
80004cb6:	10 fb       	st.b	--r8,r11
80004cb8:	fa ca f9 62 	sub	r10,sp,-1694
80004cbc:	c0 38       	rjmp	80004cc2 <_vfprintf_r+0xa92>
80004cbe:	11 3b       	ld.ub	r11,r8++
80004cc0:	14 cb       	st.b	r10++,r11
80004cc2:	12 38       	cp.w	r8,r9
80004cc4:	cf d3       	brcs	80004cbe <_vfprintf_r+0xa8e>
80004cc6:	c0 98       	rjmp	80004cd8 <_vfprintf_r+0xaa8>
80004cc8:	2d 0b       	sub	r11,-48
80004cca:	33 08       	mov	r8,48
80004ccc:	fb 6b 06 9f 	st.b	sp[1695],r11
80004cd0:	fb 68 06 9e 	st.b	sp[1694],r8
80004cd4:	fa ca f9 60 	sub	r10,sp,-1696
80004cd8:	fa c8 f9 64 	sub	r8,sp,-1692
80004cdc:	f4 08 01 08 	sub	r8,r10,r8
80004ce0:	50 e8       	stdsp	sp[0x38],r8
80004ce2:	10 92       	mov	r2,r8
80004ce4:	40 6b       	lddsp	r11,sp[0x18]
80004ce6:	16 02       	add	r2,r11
80004ce8:	58 1b       	cp.w	r11,1
80004cea:	e0 89 00 05 	brgt	80004cf4 <_vfprintf_r+0xac4>
80004cee:	ed b5 00 00 	bld	r5,0x0
80004cf2:	c3 51       	brne	80004d5c <_vfprintf_r+0xb2c>
80004cf4:	2f f2       	sub	r2,-1
80004cf6:	c3 38       	rjmp	80004d5c <_vfprintf_r+0xb2c>
80004cf8:	e0 40 00 66 	cp.w	r0,102
80004cfc:	c1 c1       	brne	80004d34 <_vfprintf_r+0xb04>
80004cfe:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004d02:	58 02       	cp.w	r2,0
80004d04:	e0 8a 00 0c 	brle	80004d1c <_vfprintf_r+0xaec>
80004d08:	40 2a       	lddsp	r10,sp[0x8]
80004d0a:	58 0a       	cp.w	r10,0
80004d0c:	c0 41       	brne	80004d14 <_vfprintf_r+0xae4>
80004d0e:	ed b5 00 00 	bld	r5,0x0
80004d12:	c2 51       	brne	80004d5c <_vfprintf_r+0xb2c>
80004d14:	2f f2       	sub	r2,-1
80004d16:	40 29       	lddsp	r9,sp[0x8]
80004d18:	12 02       	add	r2,r9
80004d1a:	c0 b8       	rjmp	80004d30 <_vfprintf_r+0xb00>
80004d1c:	40 28       	lddsp	r8,sp[0x8]
80004d1e:	58 08       	cp.w	r8,0
80004d20:	c0 61       	brne	80004d2c <_vfprintf_r+0xafc>
80004d22:	ed b5 00 00 	bld	r5,0x0
80004d26:	c0 30       	breq	80004d2c <_vfprintf_r+0xafc>
80004d28:	30 12       	mov	r2,1
80004d2a:	c1 98       	rjmp	80004d5c <_vfprintf_r+0xb2c>
80004d2c:	40 22       	lddsp	r2,sp[0x8]
80004d2e:	2f e2       	sub	r2,-2
80004d30:	36 60       	mov	r0,102
80004d32:	c1 58       	rjmp	80004d5c <_vfprintf_r+0xb2c>
80004d34:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004d38:	40 6e       	lddsp	lr,sp[0x18]
80004d3a:	1c 32       	cp.w	r2,lr
80004d3c:	c0 65       	brlt	80004d48 <_vfprintf_r+0xb18>
80004d3e:	ed b5 00 00 	bld	r5,0x0
80004d42:	f7 b2 00 ff 	subeq	r2,-1
80004d46:	c0 a8       	rjmp	80004d5a <_vfprintf_r+0xb2a>
80004d48:	e4 08 11 02 	rsub	r8,r2,2
80004d4c:	40 6c       	lddsp	r12,sp[0x18]
80004d4e:	58 02       	cp.w	r2,0
80004d50:	f0 02 17 a0 	movle	r2,r8
80004d54:	f9 b2 09 01 	movgt	r2,1
80004d58:	18 02       	add	r2,r12
80004d5a:	36 70       	mov	r0,103
80004d5c:	40 9b       	lddsp	r11,sp[0x24]
80004d5e:	58 0b       	cp.w	r11,0
80004d60:	e0 80 05 94 	breq	80005888 <_vfprintf_r+0x1658>
80004d64:	32 d8       	mov	r8,45
80004d66:	fb 68 06 bb 	st.b	sp[1723],r8
80004d6a:	e0 8f 05 93 	bral	80005890 <_vfprintf_r+0x1660>
80004d6e:	50 a7       	stdsp	sp[0x28],r7
80004d70:	04 94       	mov	r4,r2
80004d72:	0c 97       	mov	r7,r6
80004d74:	02 92       	mov	r2,r1
80004d76:	06 96       	mov	r6,r3
80004d78:	40 41       	lddsp	r1,sp[0x10]
80004d7a:	40 93       	lddsp	r3,sp[0x24]
80004d7c:	0e 99       	mov	r9,r7
80004d7e:	ed b5 00 05 	bld	r5,0x5
80004d82:	c4 81       	brne	80004e12 <_vfprintf_r+0xbe2>
80004d84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d88:	40 3e       	lddsp	lr,sp[0xc]
80004d8a:	58 0e       	cp.w	lr,0
80004d8c:	c1 d0       	breq	80004dc6 <_vfprintf_r+0xb96>
80004d8e:	10 36       	cp.w	r6,r8
80004d90:	c0 64       	brge	80004d9c <_vfprintf_r+0xb6c>
80004d92:	fa cc f9 44 	sub	r12,sp,-1724
80004d96:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004d9a:	c1 d8       	rjmp	80004dd4 <_vfprintf_r+0xba4>
80004d9c:	fa c8 f9 50 	sub	r8,sp,-1712
80004da0:	1a d8       	st.w	--sp,r8
80004da2:	fa c8 fa b8 	sub	r8,sp,-1352
80004da6:	04 9a       	mov	r10,r2
80004da8:	1a d8       	st.w	--sp,r8
80004daa:	fa c8 fb b4 	sub	r8,sp,-1100
80004dae:	0c 9b       	mov	r11,r6
80004db0:	1a d8       	st.w	--sp,r8
80004db2:	08 9c       	mov	r12,r4
80004db4:	fa c8 f9 40 	sub	r8,sp,-1728
80004db8:	fa c9 ff b4 	sub	r9,sp,-76
80004dbc:	fe b0 f8 a2 	rcall	80003f00 <get_arg>
80004dc0:	2f dd       	sub	sp,-12
80004dc2:	78 0a       	ld.w	r10,r12[0x0]
80004dc4:	c2 08       	rjmp	80004e04 <_vfprintf_r+0xbd4>
80004dc6:	2f f7       	sub	r7,-1
80004dc8:	10 39       	cp.w	r9,r8
80004dca:	c0 84       	brge	80004dda <_vfprintf_r+0xbaa>
80004dcc:	fa cb f9 44 	sub	r11,sp,-1724
80004dd0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004dd4:	ec fa fd 88 	ld.w	r10,r6[-632]
80004dd8:	c1 68       	rjmp	80004e04 <_vfprintf_r+0xbd4>
80004dda:	41 09       	lddsp	r9,sp[0x40]
80004ddc:	59 f8       	cp.w	r8,31
80004dde:	e0 89 00 10 	brgt	80004dfe <_vfprintf_r+0xbce>
80004de2:	f2 ca ff fc 	sub	r10,r9,-4
80004de6:	51 0a       	stdsp	sp[0x40],r10
80004de8:	fa c6 f9 44 	sub	r6,sp,-1724
80004dec:	72 0a       	ld.w	r10,r9[0x0]
80004dee:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004df2:	f3 4a fd 88 	st.w	r9[-632],r10
80004df6:	2f f8       	sub	r8,-1
80004df8:	fb 48 06 b4 	st.w	sp[1716],r8
80004dfc:	c0 48       	rjmp	80004e04 <_vfprintf_r+0xbd4>
80004dfe:	72 0a       	ld.w	r10,r9[0x0]
80004e00:	2f c9       	sub	r9,-4
80004e02:	51 09       	stdsp	sp[0x40],r9
80004e04:	40 be       	lddsp	lr,sp[0x2c]
80004e06:	1c 98       	mov	r8,lr
80004e08:	95 1e       	st.w	r10[0x4],lr
80004e0a:	bf 58       	asr	r8,0x1f
80004e0c:	95 08       	st.w	r10[0x0],r8
80004e0e:	fe 9f fa 9f 	bral	8000434c <_vfprintf_r+0x11c>
80004e12:	ed b5 00 04 	bld	r5,0x4
80004e16:	c4 80       	breq	80004ea6 <_vfprintf_r+0xc76>
80004e18:	e2 15 00 40 	andl	r5,0x40,COH
80004e1c:	c4 50       	breq	80004ea6 <_vfprintf_r+0xc76>
80004e1e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e22:	40 3c       	lddsp	r12,sp[0xc]
80004e24:	58 0c       	cp.w	r12,0
80004e26:	c1 d0       	breq	80004e60 <_vfprintf_r+0xc30>
80004e28:	10 36       	cp.w	r6,r8
80004e2a:	c0 64       	brge	80004e36 <_vfprintf_r+0xc06>
80004e2c:	fa cb f9 44 	sub	r11,sp,-1724
80004e30:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e34:	c1 d8       	rjmp	80004e6e <_vfprintf_r+0xc3e>
80004e36:	fa c8 f9 50 	sub	r8,sp,-1712
80004e3a:	1a d8       	st.w	--sp,r8
80004e3c:	fa c8 fa b8 	sub	r8,sp,-1352
80004e40:	04 9a       	mov	r10,r2
80004e42:	1a d8       	st.w	--sp,r8
80004e44:	fa c8 fb b4 	sub	r8,sp,-1100
80004e48:	0c 9b       	mov	r11,r6
80004e4a:	1a d8       	st.w	--sp,r8
80004e4c:	08 9c       	mov	r12,r4
80004e4e:	fa c8 f9 40 	sub	r8,sp,-1728
80004e52:	fa c9 ff b4 	sub	r9,sp,-76
80004e56:	fe b0 f8 55 	rcall	80003f00 <get_arg>
80004e5a:	2f dd       	sub	sp,-12
80004e5c:	78 0a       	ld.w	r10,r12[0x0]
80004e5e:	c2 08       	rjmp	80004e9e <_vfprintf_r+0xc6e>
80004e60:	2f f7       	sub	r7,-1
80004e62:	10 39       	cp.w	r9,r8
80004e64:	c0 84       	brge	80004e74 <_vfprintf_r+0xc44>
80004e66:	fa ca f9 44 	sub	r10,sp,-1724
80004e6a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004e6e:	ec fa fd 88 	ld.w	r10,r6[-632]
80004e72:	c1 68       	rjmp	80004e9e <_vfprintf_r+0xc6e>
80004e74:	41 09       	lddsp	r9,sp[0x40]
80004e76:	59 f8       	cp.w	r8,31
80004e78:	e0 89 00 10 	brgt	80004e98 <_vfprintf_r+0xc68>
80004e7c:	f2 ca ff fc 	sub	r10,r9,-4
80004e80:	51 0a       	stdsp	sp[0x40],r10
80004e82:	fa c6 f9 44 	sub	r6,sp,-1724
80004e86:	72 0a       	ld.w	r10,r9[0x0]
80004e88:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004e8c:	f3 4a fd 88 	st.w	r9[-632],r10
80004e90:	2f f8       	sub	r8,-1
80004e92:	fb 48 06 b4 	st.w	sp[1716],r8
80004e96:	c0 48       	rjmp	80004e9e <_vfprintf_r+0xc6e>
80004e98:	72 0a       	ld.w	r10,r9[0x0]
80004e9a:	2f c9       	sub	r9,-4
80004e9c:	51 09       	stdsp	sp[0x40],r9
80004e9e:	40 be       	lddsp	lr,sp[0x2c]
80004ea0:	b4 0e       	st.h	r10[0x0],lr
80004ea2:	fe 9f fa 55 	bral	8000434c <_vfprintf_r+0x11c>
80004ea6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004eaa:	40 3c       	lddsp	r12,sp[0xc]
80004eac:	58 0c       	cp.w	r12,0
80004eae:	c1 d0       	breq	80004ee8 <_vfprintf_r+0xcb8>
80004eb0:	10 36       	cp.w	r6,r8
80004eb2:	c0 64       	brge	80004ebe <_vfprintf_r+0xc8e>
80004eb4:	fa cb f9 44 	sub	r11,sp,-1724
80004eb8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ebc:	c1 d8       	rjmp	80004ef6 <_vfprintf_r+0xcc6>
80004ebe:	fa c8 f9 50 	sub	r8,sp,-1712
80004ec2:	1a d8       	st.w	--sp,r8
80004ec4:	fa c8 fa b8 	sub	r8,sp,-1352
80004ec8:	04 9a       	mov	r10,r2
80004eca:	1a d8       	st.w	--sp,r8
80004ecc:	fa c8 fb b4 	sub	r8,sp,-1100
80004ed0:	0c 9b       	mov	r11,r6
80004ed2:	1a d8       	st.w	--sp,r8
80004ed4:	08 9c       	mov	r12,r4
80004ed6:	fa c8 f9 40 	sub	r8,sp,-1728
80004eda:	fa c9 ff b4 	sub	r9,sp,-76
80004ede:	fe b0 f8 11 	rcall	80003f00 <get_arg>
80004ee2:	2f dd       	sub	sp,-12
80004ee4:	78 0a       	ld.w	r10,r12[0x0]
80004ee6:	c2 08       	rjmp	80004f26 <_vfprintf_r+0xcf6>
80004ee8:	2f f7       	sub	r7,-1
80004eea:	10 39       	cp.w	r9,r8
80004eec:	c0 84       	brge	80004efc <_vfprintf_r+0xccc>
80004eee:	fa ca f9 44 	sub	r10,sp,-1724
80004ef2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004ef6:	ec fa fd 88 	ld.w	r10,r6[-632]
80004efa:	c1 68       	rjmp	80004f26 <_vfprintf_r+0xcf6>
80004efc:	41 09       	lddsp	r9,sp[0x40]
80004efe:	59 f8       	cp.w	r8,31
80004f00:	e0 89 00 10 	brgt	80004f20 <_vfprintf_r+0xcf0>
80004f04:	f2 ca ff fc 	sub	r10,r9,-4
80004f08:	51 0a       	stdsp	sp[0x40],r10
80004f0a:	fa c6 f9 44 	sub	r6,sp,-1724
80004f0e:	72 0a       	ld.w	r10,r9[0x0]
80004f10:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f14:	f3 4a fd 88 	st.w	r9[-632],r10
80004f18:	2f f8       	sub	r8,-1
80004f1a:	fb 48 06 b4 	st.w	sp[1716],r8
80004f1e:	c0 48       	rjmp	80004f26 <_vfprintf_r+0xcf6>
80004f20:	72 0a       	ld.w	r10,r9[0x0]
80004f22:	2f c9       	sub	r9,-4
80004f24:	51 09       	stdsp	sp[0x40],r9
80004f26:	40 be       	lddsp	lr,sp[0x2c]
80004f28:	95 0e       	st.w	r10[0x0],lr
80004f2a:	fe 9f fa 11 	bral	8000434c <_vfprintf_r+0x11c>
80004f2e:	50 a7       	stdsp	sp[0x28],r7
80004f30:	50 80       	stdsp	sp[0x20],r0
80004f32:	0c 97       	mov	r7,r6
80004f34:	04 94       	mov	r4,r2
80004f36:	06 96       	mov	r6,r3
80004f38:	02 92       	mov	r2,r1
80004f3a:	40 93       	lddsp	r3,sp[0x24]
80004f3c:	10 90       	mov	r0,r8
80004f3e:	40 41       	lddsp	r1,sp[0x10]
80004f40:	a5 a5       	sbr	r5,0x4
80004f42:	c0 a8       	rjmp	80004f56 <_vfprintf_r+0xd26>
80004f44:	50 a7       	stdsp	sp[0x28],r7
80004f46:	50 80       	stdsp	sp[0x20],r0
80004f48:	0c 97       	mov	r7,r6
80004f4a:	04 94       	mov	r4,r2
80004f4c:	06 96       	mov	r6,r3
80004f4e:	02 92       	mov	r2,r1
80004f50:	40 93       	lddsp	r3,sp[0x24]
80004f52:	10 90       	mov	r0,r8
80004f54:	40 41       	lddsp	r1,sp[0x10]
80004f56:	ed b5 00 05 	bld	r5,0x5
80004f5a:	c5 d1       	brne	80005014 <_vfprintf_r+0xde4>
80004f5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f60:	40 3c       	lddsp	r12,sp[0xc]
80004f62:	58 0c       	cp.w	r12,0
80004f64:	c2 60       	breq	80004fb0 <_vfprintf_r+0xd80>
80004f66:	10 36       	cp.w	r6,r8
80004f68:	c0 a4       	brge	80004f7c <_vfprintf_r+0xd4c>
80004f6a:	fa cb f9 44 	sub	r11,sp,-1724
80004f6e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f72:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004f76:	fa e9 00 00 	st.d	sp[0],r8
80004f7a:	c1 88       	rjmp	80004faa <_vfprintf_r+0xd7a>
80004f7c:	fa c8 f9 50 	sub	r8,sp,-1712
80004f80:	1a d8       	st.w	--sp,r8
80004f82:	fa c8 fa b8 	sub	r8,sp,-1352
80004f86:	04 9a       	mov	r10,r2
80004f88:	1a d8       	st.w	--sp,r8
80004f8a:	0c 9b       	mov	r11,r6
80004f8c:	fa c8 fb b4 	sub	r8,sp,-1100
80004f90:	08 9c       	mov	r12,r4
80004f92:	1a d8       	st.w	--sp,r8
80004f94:	fa c8 f9 40 	sub	r8,sp,-1728
80004f98:	fa c9 ff b4 	sub	r9,sp,-76
80004f9c:	fe b0 f7 b2 	rcall	80003f00 <get_arg>
80004fa0:	2f dd       	sub	sp,-12
80004fa2:	f8 ea 00 00 	ld.d	r10,r12[0]
80004fa6:	fa eb 00 00 	st.d	sp[0],r10
80004faa:	30 08       	mov	r8,0
80004fac:	e0 8f 03 de 	bral	80005768 <_vfprintf_r+0x1538>
80004fb0:	ee ca ff ff 	sub	r10,r7,-1
80004fb4:	10 37       	cp.w	r7,r8
80004fb6:	c0 b4       	brge	80004fcc <_vfprintf_r+0xd9c>
80004fb8:	fa c9 f9 44 	sub	r9,sp,-1724
80004fbc:	14 97       	mov	r7,r10
80004fbe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004fc2:	ec ea fd 88 	ld.d	r10,r6[-632]
80004fc6:	fa eb 00 00 	st.d	sp[0],r10
80004fca:	c1 88       	rjmp	80004ffa <_vfprintf_r+0xdca>
80004fcc:	41 09       	lddsp	r9,sp[0x40]
80004fce:	59 f8       	cp.w	r8,31
80004fd0:	e0 89 00 18 	brgt	80005000 <_vfprintf_r+0xdd0>
80004fd4:	f2 e6 00 00 	ld.d	r6,r9[0]
80004fd8:	f2 cb ff f8 	sub	r11,r9,-8
80004fdc:	fa e7 00 00 	st.d	sp[0],r6
80004fe0:	51 0b       	stdsp	sp[0x40],r11
80004fe2:	fa c6 f9 44 	sub	r6,sp,-1724
80004fe6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004fea:	fa e6 00 00 	ld.d	r6,sp[0]
80004fee:	f2 e7 fd 88 	st.d	r9[-632],r6
80004ff2:	2f f8       	sub	r8,-1
80004ff4:	14 97       	mov	r7,r10
80004ff6:	fb 48 06 b4 	st.w	sp[1716],r8
80004ffa:	40 38       	lddsp	r8,sp[0xc]
80004ffc:	e0 8f 03 b6 	bral	80005768 <_vfprintf_r+0x1538>
80005000:	f2 e6 00 00 	ld.d	r6,r9[0]
80005004:	40 38       	lddsp	r8,sp[0xc]
80005006:	fa e7 00 00 	st.d	sp[0],r6
8000500a:	2f 89       	sub	r9,-8
8000500c:	14 97       	mov	r7,r10
8000500e:	51 09       	stdsp	sp[0x40],r9
80005010:	e0 8f 03 ac 	bral	80005768 <_vfprintf_r+0x1538>
80005014:	ed b5 00 04 	bld	r5,0x4
80005018:	c1 61       	brne	80005044 <_vfprintf_r+0xe14>
8000501a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000501e:	40 3e       	lddsp	lr,sp[0xc]
80005020:	58 0e       	cp.w	lr,0
80005022:	c0 80       	breq	80005032 <_vfprintf_r+0xe02>
80005024:	10 36       	cp.w	r6,r8
80005026:	c6 74       	brge	800050f4 <_vfprintf_r+0xec4>
80005028:	fa cc f9 44 	sub	r12,sp,-1724
8000502c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005030:	c8 08       	rjmp	80005130 <_vfprintf_r+0xf00>
80005032:	ee ca ff ff 	sub	r10,r7,-1
80005036:	10 37       	cp.w	r7,r8
80005038:	c7 f4       	brge	80005136 <_vfprintf_r+0xf06>
8000503a:	fa cb f9 44 	sub	r11,sp,-1724
8000503e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005042:	c7 68       	rjmp	8000512e <_vfprintf_r+0xefe>
80005044:	ed b5 00 06 	bld	r5,0x6
80005048:	c4 a1       	brne	800050dc <_vfprintf_r+0xeac>
8000504a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000504e:	40 3c       	lddsp	r12,sp[0xc]
80005050:	58 0c       	cp.w	r12,0
80005052:	c1 d0       	breq	8000508c <_vfprintf_r+0xe5c>
80005054:	10 36       	cp.w	r6,r8
80005056:	c0 64       	brge	80005062 <_vfprintf_r+0xe32>
80005058:	fa cb f9 44 	sub	r11,sp,-1724
8000505c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005060:	c1 f8       	rjmp	8000509e <_vfprintf_r+0xe6e>
80005062:	fa c8 f9 50 	sub	r8,sp,-1712
80005066:	1a d8       	st.w	--sp,r8
80005068:	fa c8 fa b8 	sub	r8,sp,-1352
8000506c:	1a d8       	st.w	--sp,r8
8000506e:	fa c8 fb b4 	sub	r8,sp,-1100
80005072:	1a d8       	st.w	--sp,r8
80005074:	fa c8 f9 40 	sub	r8,sp,-1728
80005078:	fa c9 ff b4 	sub	r9,sp,-76
8000507c:	04 9a       	mov	r10,r2
8000507e:	0c 9b       	mov	r11,r6
80005080:	08 9c       	mov	r12,r4
80005082:	fe b0 f7 3f 	rcall	80003f00 <get_arg>
80005086:	2f dd       	sub	sp,-12
80005088:	98 18       	ld.sh	r8,r12[0x2]
8000508a:	c2 68       	rjmp	800050d6 <_vfprintf_r+0xea6>
8000508c:	ee ca ff ff 	sub	r10,r7,-1
80005090:	10 37       	cp.w	r7,r8
80005092:	c0 94       	brge	800050a4 <_vfprintf_r+0xe74>
80005094:	fa c9 f9 44 	sub	r9,sp,-1724
80005098:	14 97       	mov	r7,r10
8000509a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000509e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800050a2:	c1 a8       	rjmp	800050d6 <_vfprintf_r+0xea6>
800050a4:	41 09       	lddsp	r9,sp[0x40]
800050a6:	59 f8       	cp.w	r8,31
800050a8:	e0 89 00 13 	brgt	800050ce <_vfprintf_r+0xe9e>
800050ac:	f2 cb ff fc 	sub	r11,r9,-4
800050b0:	51 0b       	stdsp	sp[0x40],r11
800050b2:	72 09       	ld.w	r9,r9[0x0]
800050b4:	fa c6 f9 44 	sub	r6,sp,-1724
800050b8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800050bc:	2f f8       	sub	r8,-1
800050be:	f7 49 fd 88 	st.w	r11[-632],r9
800050c2:	fb 48 06 b4 	st.w	sp[1716],r8
800050c6:	14 97       	mov	r7,r10
800050c8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800050cc:	c0 58       	rjmp	800050d6 <_vfprintf_r+0xea6>
800050ce:	92 18       	ld.sh	r8,r9[0x2]
800050d0:	14 97       	mov	r7,r10
800050d2:	2f c9       	sub	r9,-4
800050d4:	51 09       	stdsp	sp[0x40],r9
800050d6:	5c 78       	castu.h	r8
800050d8:	50 18       	stdsp	sp[0x4],r8
800050da:	c4 68       	rjmp	80005166 <_vfprintf_r+0xf36>
800050dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050e0:	40 3c       	lddsp	r12,sp[0xc]
800050e2:	58 0c       	cp.w	r12,0
800050e4:	c1 d0       	breq	8000511e <_vfprintf_r+0xeee>
800050e6:	10 36       	cp.w	r6,r8
800050e8:	c0 64       	brge	800050f4 <_vfprintf_r+0xec4>
800050ea:	fa cb f9 44 	sub	r11,sp,-1724
800050ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800050f2:	c1 f8       	rjmp	80005130 <_vfprintf_r+0xf00>
800050f4:	fa c8 f9 50 	sub	r8,sp,-1712
800050f8:	1a d8       	st.w	--sp,r8
800050fa:	fa c8 fa b8 	sub	r8,sp,-1352
800050fe:	0c 9b       	mov	r11,r6
80005100:	1a d8       	st.w	--sp,r8
80005102:	fa c8 fb b4 	sub	r8,sp,-1100
80005106:	04 9a       	mov	r10,r2
80005108:	1a d8       	st.w	--sp,r8
8000510a:	08 9c       	mov	r12,r4
8000510c:	fa c8 f9 40 	sub	r8,sp,-1728
80005110:	fa c9 ff b4 	sub	r9,sp,-76
80005114:	fe b0 f6 f6 	rcall	80003f00 <get_arg>
80005118:	2f dd       	sub	sp,-12
8000511a:	78 0b       	ld.w	r11,r12[0x0]
8000511c:	c2 48       	rjmp	80005164 <_vfprintf_r+0xf34>
8000511e:	ee ca ff ff 	sub	r10,r7,-1
80005122:	10 37       	cp.w	r7,r8
80005124:	c0 94       	brge	80005136 <_vfprintf_r+0xf06>
80005126:	fa c9 f9 44 	sub	r9,sp,-1724
8000512a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000512e:	14 97       	mov	r7,r10
80005130:	ec fb fd 88 	ld.w	r11,r6[-632]
80005134:	c1 88       	rjmp	80005164 <_vfprintf_r+0xf34>
80005136:	41 09       	lddsp	r9,sp[0x40]
80005138:	59 f8       	cp.w	r8,31
8000513a:	e0 89 00 11 	brgt	8000515c <_vfprintf_r+0xf2c>
8000513e:	f2 cb ff fc 	sub	r11,r9,-4
80005142:	51 0b       	stdsp	sp[0x40],r11
80005144:	fa c6 f9 44 	sub	r6,sp,-1724
80005148:	72 0b       	ld.w	r11,r9[0x0]
8000514a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000514e:	f3 4b fd 88 	st.w	r9[-632],r11
80005152:	2f f8       	sub	r8,-1
80005154:	14 97       	mov	r7,r10
80005156:	fb 48 06 b4 	st.w	sp[1716],r8
8000515a:	c0 58       	rjmp	80005164 <_vfprintf_r+0xf34>
8000515c:	72 0b       	ld.w	r11,r9[0x0]
8000515e:	14 97       	mov	r7,r10
80005160:	2f c9       	sub	r9,-4
80005162:	51 09       	stdsp	sp[0x40],r9
80005164:	50 1b       	stdsp	sp[0x4],r11
80005166:	30 0e       	mov	lr,0
80005168:	50 0e       	stdsp	sp[0x0],lr
8000516a:	1c 98       	mov	r8,lr
8000516c:	e0 8f 02 fe 	bral	80005768 <_vfprintf_r+0x1538>
80005170:	50 a7       	stdsp	sp[0x28],r7
80005172:	50 80       	stdsp	sp[0x20],r0
80005174:	0c 97       	mov	r7,r6
80005176:	04 94       	mov	r4,r2
80005178:	06 96       	mov	r6,r3
8000517a:	02 92       	mov	r2,r1
8000517c:	40 93       	lddsp	r3,sp[0x24]
8000517e:	40 41       	lddsp	r1,sp[0x10]
80005180:	0e 99       	mov	r9,r7
80005182:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005186:	40 3c       	lddsp	r12,sp[0xc]
80005188:	58 0c       	cp.w	r12,0
8000518a:	c1 d0       	breq	800051c4 <_vfprintf_r+0xf94>
8000518c:	10 36       	cp.w	r6,r8
8000518e:	c0 64       	brge	8000519a <_vfprintf_r+0xf6a>
80005190:	fa cb f9 44 	sub	r11,sp,-1724
80005194:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005198:	c1 d8       	rjmp	800051d2 <_vfprintf_r+0xfa2>
8000519a:	fa c8 f9 50 	sub	r8,sp,-1712
8000519e:	1a d8       	st.w	--sp,r8
800051a0:	fa c8 fa b8 	sub	r8,sp,-1352
800051a4:	1a d8       	st.w	--sp,r8
800051a6:	fa c8 fb b4 	sub	r8,sp,-1100
800051aa:	1a d8       	st.w	--sp,r8
800051ac:	fa c9 ff b4 	sub	r9,sp,-76
800051b0:	fa c8 f9 40 	sub	r8,sp,-1728
800051b4:	04 9a       	mov	r10,r2
800051b6:	0c 9b       	mov	r11,r6
800051b8:	08 9c       	mov	r12,r4
800051ba:	fe b0 f6 a3 	rcall	80003f00 <get_arg>
800051be:	2f dd       	sub	sp,-12
800051c0:	78 09       	ld.w	r9,r12[0x0]
800051c2:	c2 18       	rjmp	80005204 <_vfprintf_r+0xfd4>
800051c4:	2f f7       	sub	r7,-1
800051c6:	10 39       	cp.w	r9,r8
800051c8:	c0 84       	brge	800051d8 <_vfprintf_r+0xfa8>
800051ca:	fa ca f9 44 	sub	r10,sp,-1724
800051ce:	f4 06 00 36 	add	r6,r10,r6<<0x3
800051d2:	ec f9 fd 88 	ld.w	r9,r6[-632]
800051d6:	c1 78       	rjmp	80005204 <_vfprintf_r+0xfd4>
800051d8:	41 09       	lddsp	r9,sp[0x40]
800051da:	59 f8       	cp.w	r8,31
800051dc:	e0 89 00 10 	brgt	800051fc <_vfprintf_r+0xfcc>
800051e0:	f2 ca ff fc 	sub	r10,r9,-4
800051e4:	51 0a       	stdsp	sp[0x40],r10
800051e6:	fa c6 f9 44 	sub	r6,sp,-1724
800051ea:	72 09       	ld.w	r9,r9[0x0]
800051ec:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800051f0:	f5 49 fd 88 	st.w	r10[-632],r9
800051f4:	2f f8       	sub	r8,-1
800051f6:	fb 48 06 b4 	st.w	sp[1716],r8
800051fa:	c0 58       	rjmp	80005204 <_vfprintf_r+0xfd4>
800051fc:	f2 c8 ff fc 	sub	r8,r9,-4
80005200:	51 08       	stdsp	sp[0x40],r8
80005202:	72 09       	ld.w	r9,r9[0x0]
80005204:	33 08       	mov	r8,48
80005206:	fb 68 06 b8 	st.b	sp[1720],r8
8000520a:	37 88       	mov	r8,120
8000520c:	30 0e       	mov	lr,0
8000520e:	fb 68 06 b9 	st.b	sp[1721],r8
80005212:	fe cc b7 9a 	sub	r12,pc,-18534
80005216:	50 19       	stdsp	sp[0x4],r9
80005218:	a1 b5       	sbr	r5,0x1
8000521a:	50 0e       	stdsp	sp[0x0],lr
8000521c:	50 dc       	stdsp	sp[0x34],r12
8000521e:	30 28       	mov	r8,2
80005220:	37 80       	mov	r0,120
80005222:	e0 8f 02 a3 	bral	80005768 <_vfprintf_r+0x1538>
80005226:	50 a7       	stdsp	sp[0x28],r7
80005228:	50 80       	stdsp	sp[0x20],r0
8000522a:	10 90       	mov	r0,r8
8000522c:	30 08       	mov	r8,0
8000522e:	fb 68 06 bb 	st.b	sp[1723],r8
80005232:	0c 97       	mov	r7,r6
80005234:	04 94       	mov	r4,r2
80005236:	06 96       	mov	r6,r3
80005238:	02 92       	mov	r2,r1
8000523a:	40 93       	lddsp	r3,sp[0x24]
8000523c:	40 41       	lddsp	r1,sp[0x10]
8000523e:	0e 99       	mov	r9,r7
80005240:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005244:	40 3b       	lddsp	r11,sp[0xc]
80005246:	58 0b       	cp.w	r11,0
80005248:	c1 d0       	breq	80005282 <_vfprintf_r+0x1052>
8000524a:	10 36       	cp.w	r6,r8
8000524c:	c0 64       	brge	80005258 <_vfprintf_r+0x1028>
8000524e:	fa ca f9 44 	sub	r10,sp,-1724
80005252:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005256:	c1 d8       	rjmp	80005290 <_vfprintf_r+0x1060>
80005258:	fa c8 f9 50 	sub	r8,sp,-1712
8000525c:	1a d8       	st.w	--sp,r8
8000525e:	fa c8 fa b8 	sub	r8,sp,-1352
80005262:	1a d8       	st.w	--sp,r8
80005264:	fa c8 fb b4 	sub	r8,sp,-1100
80005268:	0c 9b       	mov	r11,r6
8000526a:	1a d8       	st.w	--sp,r8
8000526c:	04 9a       	mov	r10,r2
8000526e:	fa c8 f9 40 	sub	r8,sp,-1728
80005272:	fa c9 ff b4 	sub	r9,sp,-76
80005276:	08 9c       	mov	r12,r4
80005278:	fe b0 f6 44 	rcall	80003f00 <get_arg>
8000527c:	2f dd       	sub	sp,-12
8000527e:	78 06       	ld.w	r6,r12[0x0]
80005280:	c2 08       	rjmp	800052c0 <_vfprintf_r+0x1090>
80005282:	2f f7       	sub	r7,-1
80005284:	10 39       	cp.w	r9,r8
80005286:	c0 84       	brge	80005296 <_vfprintf_r+0x1066>
80005288:	fa c9 f9 44 	sub	r9,sp,-1724
8000528c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005290:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005294:	c1 68       	rjmp	800052c0 <_vfprintf_r+0x1090>
80005296:	41 09       	lddsp	r9,sp[0x40]
80005298:	59 f8       	cp.w	r8,31
8000529a:	e0 89 00 10 	brgt	800052ba <_vfprintf_r+0x108a>
8000529e:	f2 ca ff fc 	sub	r10,r9,-4
800052a2:	51 0a       	stdsp	sp[0x40],r10
800052a4:	72 06       	ld.w	r6,r9[0x0]
800052a6:	fa ce f9 44 	sub	lr,sp,-1724
800052aa:	fc 08 00 39 	add	r9,lr,r8<<0x3
800052ae:	f3 46 fd 88 	st.w	r9[-632],r6
800052b2:	2f f8       	sub	r8,-1
800052b4:	fb 48 06 b4 	st.w	sp[1716],r8
800052b8:	c0 48       	rjmp	800052c0 <_vfprintf_r+0x1090>
800052ba:	72 06       	ld.w	r6,r9[0x0]
800052bc:	2f c9       	sub	r9,-4
800052be:	51 09       	stdsp	sp[0x40],r9
800052c0:	40 2c       	lddsp	r12,sp[0x8]
800052c2:	58 0c       	cp.w	r12,0
800052c4:	c1 05       	brlt	800052e4 <_vfprintf_r+0x10b4>
800052c6:	18 9a       	mov	r10,r12
800052c8:	30 0b       	mov	r11,0
800052ca:	0c 9c       	mov	r12,r6
800052cc:	e0 a0 14 58 	rcall	80007b7c <memchr>
800052d0:	e0 80 02 df 	breq	8000588e <_vfprintf_r+0x165e>
800052d4:	f8 06 01 02 	sub	r2,r12,r6
800052d8:	40 2b       	lddsp	r11,sp[0x8]
800052da:	16 32       	cp.w	r2,r11
800052dc:	e0 89 02 d9 	brgt	8000588e <_vfprintf_r+0x165e>
800052e0:	e0 8f 02 d4 	bral	80005888 <_vfprintf_r+0x1658>
800052e4:	30 0a       	mov	r10,0
800052e6:	0c 9c       	mov	r12,r6
800052e8:	50 2a       	stdsp	sp[0x8],r10
800052ea:	e0 a0 19 33 	rcall	80008550 <strlen>
800052ee:	18 92       	mov	r2,r12
800052f0:	e0 8f 02 d2 	bral	80005894 <_vfprintf_r+0x1664>
800052f4:	50 a7       	stdsp	sp[0x28],r7
800052f6:	50 80       	stdsp	sp[0x20],r0
800052f8:	0c 97       	mov	r7,r6
800052fa:	04 94       	mov	r4,r2
800052fc:	06 96       	mov	r6,r3
800052fe:	02 92       	mov	r2,r1
80005300:	40 93       	lddsp	r3,sp[0x24]
80005302:	10 90       	mov	r0,r8
80005304:	40 41       	lddsp	r1,sp[0x10]
80005306:	a5 a5       	sbr	r5,0x4
80005308:	c0 a8       	rjmp	8000531c <_vfprintf_r+0x10ec>
8000530a:	50 a7       	stdsp	sp[0x28],r7
8000530c:	50 80       	stdsp	sp[0x20],r0
8000530e:	0c 97       	mov	r7,r6
80005310:	04 94       	mov	r4,r2
80005312:	06 96       	mov	r6,r3
80005314:	02 92       	mov	r2,r1
80005316:	40 93       	lddsp	r3,sp[0x24]
80005318:	10 90       	mov	r0,r8
8000531a:	40 41       	lddsp	r1,sp[0x10]
8000531c:	ed b5 00 05 	bld	r5,0x5
80005320:	c5 61       	brne	800053cc <_vfprintf_r+0x119c>
80005322:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005326:	40 39       	lddsp	r9,sp[0xc]
80005328:	58 09       	cp.w	r9,0
8000532a:	c2 10       	breq	8000536c <_vfprintf_r+0x113c>
8000532c:	10 36       	cp.w	r6,r8
8000532e:	c0 74       	brge	8000533c <_vfprintf_r+0x110c>
80005330:	fa c8 f9 44 	sub	r8,sp,-1724
80005334:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005338:	c2 38       	rjmp	8000537e <_vfprintf_r+0x114e>
8000533a:	d7 03       	nop
8000533c:	fa c8 f9 50 	sub	r8,sp,-1712
80005340:	1a d8       	st.w	--sp,r8
80005342:	fa c8 fa b8 	sub	r8,sp,-1352
80005346:	1a d8       	st.w	--sp,r8
80005348:	fa c8 fb b4 	sub	r8,sp,-1100
8000534c:	1a d8       	st.w	--sp,r8
8000534e:	fa c8 f9 40 	sub	r8,sp,-1728
80005352:	fa c9 ff b4 	sub	r9,sp,-76
80005356:	04 9a       	mov	r10,r2
80005358:	0c 9b       	mov	r11,r6
8000535a:	08 9c       	mov	r12,r4
8000535c:	fe b0 f5 d2 	rcall	80003f00 <get_arg>
80005360:	2f dd       	sub	sp,-12
80005362:	f8 e8 00 00 	ld.d	r8,r12[0]
80005366:	fa e9 00 00 	st.d	sp[0],r8
8000536a:	c2 e8       	rjmp	800053c6 <_vfprintf_r+0x1196>
8000536c:	ee ca ff ff 	sub	r10,r7,-1
80005370:	10 37       	cp.w	r7,r8
80005372:	c0 b4       	brge	80005388 <_vfprintf_r+0x1158>
80005374:	fa c8 f9 44 	sub	r8,sp,-1724
80005378:	14 97       	mov	r7,r10
8000537a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000537e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005382:	fa eb 00 00 	st.d	sp[0],r10
80005386:	c2 08       	rjmp	800053c6 <_vfprintf_r+0x1196>
80005388:	41 09       	lddsp	r9,sp[0x40]
8000538a:	59 f8       	cp.w	r8,31
8000538c:	e0 89 00 16 	brgt	800053b8 <_vfprintf_r+0x1188>
80005390:	f2 e6 00 00 	ld.d	r6,r9[0]
80005394:	f2 cb ff f8 	sub	r11,r9,-8
80005398:	fa e7 00 00 	st.d	sp[0],r6
8000539c:	51 0b       	stdsp	sp[0x40],r11
8000539e:	fa c6 f9 44 	sub	r6,sp,-1724
800053a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800053a6:	fa e6 00 00 	ld.d	r6,sp[0]
800053aa:	f2 e7 fd 88 	st.d	r9[-632],r6
800053ae:	2f f8       	sub	r8,-1
800053b0:	14 97       	mov	r7,r10
800053b2:	fb 48 06 b4 	st.w	sp[1716],r8
800053b6:	c0 88       	rjmp	800053c6 <_vfprintf_r+0x1196>
800053b8:	f2 e6 00 00 	ld.d	r6,r9[0]
800053bc:	2f 89       	sub	r9,-8
800053be:	fa e7 00 00 	st.d	sp[0],r6
800053c2:	51 09       	stdsp	sp[0x40],r9
800053c4:	14 97       	mov	r7,r10
800053c6:	30 18       	mov	r8,1
800053c8:	e0 8f 01 d0 	bral	80005768 <_vfprintf_r+0x1538>
800053cc:	ed b5 00 04 	bld	r5,0x4
800053d0:	c1 61       	brne	800053fc <_vfprintf_r+0x11cc>
800053d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053d6:	40 3e       	lddsp	lr,sp[0xc]
800053d8:	58 0e       	cp.w	lr,0
800053da:	c0 80       	breq	800053ea <_vfprintf_r+0x11ba>
800053dc:	10 36       	cp.w	r6,r8
800053de:	c6 74       	brge	800054ac <_vfprintf_r+0x127c>
800053e0:	fa cc f9 44 	sub	r12,sp,-1724
800053e4:	f8 06 00 36 	add	r6,r12,r6<<0x3
800053e8:	c8 08       	rjmp	800054e8 <_vfprintf_r+0x12b8>
800053ea:	ee ca ff ff 	sub	r10,r7,-1
800053ee:	10 37       	cp.w	r7,r8
800053f0:	c7 f4       	brge	800054ee <_vfprintf_r+0x12be>
800053f2:	fa cb f9 44 	sub	r11,sp,-1724
800053f6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053fa:	c7 68       	rjmp	800054e6 <_vfprintf_r+0x12b6>
800053fc:	ed b5 00 06 	bld	r5,0x6
80005400:	c4 a1       	brne	80005494 <_vfprintf_r+0x1264>
80005402:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005406:	40 3c       	lddsp	r12,sp[0xc]
80005408:	58 0c       	cp.w	r12,0
8000540a:	c1 d0       	breq	80005444 <_vfprintf_r+0x1214>
8000540c:	10 36       	cp.w	r6,r8
8000540e:	c0 64       	brge	8000541a <_vfprintf_r+0x11ea>
80005410:	fa cb f9 44 	sub	r11,sp,-1724
80005414:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005418:	c1 f8       	rjmp	80005456 <_vfprintf_r+0x1226>
8000541a:	fa c8 f9 50 	sub	r8,sp,-1712
8000541e:	1a d8       	st.w	--sp,r8
80005420:	fa c8 fa b8 	sub	r8,sp,-1352
80005424:	1a d8       	st.w	--sp,r8
80005426:	fa c8 fb b4 	sub	r8,sp,-1100
8000542a:	1a d8       	st.w	--sp,r8
8000542c:	fa c8 f9 40 	sub	r8,sp,-1728
80005430:	fa c9 ff b4 	sub	r9,sp,-76
80005434:	04 9a       	mov	r10,r2
80005436:	0c 9b       	mov	r11,r6
80005438:	08 9c       	mov	r12,r4
8000543a:	fe b0 f5 63 	rcall	80003f00 <get_arg>
8000543e:	2f dd       	sub	sp,-12
80005440:	98 18       	ld.sh	r8,r12[0x2]
80005442:	c2 68       	rjmp	8000548e <_vfprintf_r+0x125e>
80005444:	ee ca ff ff 	sub	r10,r7,-1
80005448:	10 37       	cp.w	r7,r8
8000544a:	c0 94       	brge	8000545c <_vfprintf_r+0x122c>
8000544c:	fa c9 f9 44 	sub	r9,sp,-1724
80005450:	14 97       	mov	r7,r10
80005452:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005456:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000545a:	c1 a8       	rjmp	8000548e <_vfprintf_r+0x125e>
8000545c:	41 09       	lddsp	r9,sp[0x40]
8000545e:	59 f8       	cp.w	r8,31
80005460:	e0 89 00 13 	brgt	80005486 <_vfprintf_r+0x1256>
80005464:	f2 cb ff fc 	sub	r11,r9,-4
80005468:	51 0b       	stdsp	sp[0x40],r11
8000546a:	72 09       	ld.w	r9,r9[0x0]
8000546c:	fa c6 f9 44 	sub	r6,sp,-1724
80005470:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005474:	2f f8       	sub	r8,-1
80005476:	f7 49 fd 88 	st.w	r11[-632],r9
8000547a:	fb 48 06 b4 	st.w	sp[1716],r8
8000547e:	14 97       	mov	r7,r10
80005480:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005484:	c0 58       	rjmp	8000548e <_vfprintf_r+0x125e>
80005486:	92 18       	ld.sh	r8,r9[0x2]
80005488:	14 97       	mov	r7,r10
8000548a:	2f c9       	sub	r9,-4
8000548c:	51 09       	stdsp	sp[0x40],r9
8000548e:	5c 78       	castu.h	r8
80005490:	50 18       	stdsp	sp[0x4],r8
80005492:	c4 68       	rjmp	8000551e <_vfprintf_r+0x12ee>
80005494:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005498:	40 3c       	lddsp	r12,sp[0xc]
8000549a:	58 0c       	cp.w	r12,0
8000549c:	c1 d0       	breq	800054d6 <_vfprintf_r+0x12a6>
8000549e:	10 36       	cp.w	r6,r8
800054a0:	c0 64       	brge	800054ac <_vfprintf_r+0x127c>
800054a2:	fa cb f9 44 	sub	r11,sp,-1724
800054a6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054aa:	c1 f8       	rjmp	800054e8 <_vfprintf_r+0x12b8>
800054ac:	fa c8 f9 50 	sub	r8,sp,-1712
800054b0:	1a d8       	st.w	--sp,r8
800054b2:	fa c8 fa b8 	sub	r8,sp,-1352
800054b6:	0c 9b       	mov	r11,r6
800054b8:	1a d8       	st.w	--sp,r8
800054ba:	fa c8 fb b4 	sub	r8,sp,-1100
800054be:	04 9a       	mov	r10,r2
800054c0:	1a d8       	st.w	--sp,r8
800054c2:	08 9c       	mov	r12,r4
800054c4:	fa c8 f9 40 	sub	r8,sp,-1728
800054c8:	fa c9 ff b4 	sub	r9,sp,-76
800054cc:	fe b0 f5 1a 	rcall	80003f00 <get_arg>
800054d0:	2f dd       	sub	sp,-12
800054d2:	78 0b       	ld.w	r11,r12[0x0]
800054d4:	c2 48       	rjmp	8000551c <_vfprintf_r+0x12ec>
800054d6:	ee ca ff ff 	sub	r10,r7,-1
800054da:	10 37       	cp.w	r7,r8
800054dc:	c0 94       	brge	800054ee <_vfprintf_r+0x12be>
800054de:	fa c9 f9 44 	sub	r9,sp,-1724
800054e2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054e6:	14 97       	mov	r7,r10
800054e8:	ec fb fd 88 	ld.w	r11,r6[-632]
800054ec:	c1 88       	rjmp	8000551c <_vfprintf_r+0x12ec>
800054ee:	41 09       	lddsp	r9,sp[0x40]
800054f0:	59 f8       	cp.w	r8,31
800054f2:	e0 89 00 11 	brgt	80005514 <_vfprintf_r+0x12e4>
800054f6:	f2 cb ff fc 	sub	r11,r9,-4
800054fa:	51 0b       	stdsp	sp[0x40],r11
800054fc:	fa c6 f9 44 	sub	r6,sp,-1724
80005500:	72 0b       	ld.w	r11,r9[0x0]
80005502:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005506:	f3 4b fd 88 	st.w	r9[-632],r11
8000550a:	2f f8       	sub	r8,-1
8000550c:	14 97       	mov	r7,r10
8000550e:	fb 48 06 b4 	st.w	sp[1716],r8
80005512:	c0 58       	rjmp	8000551c <_vfprintf_r+0x12ec>
80005514:	72 0b       	ld.w	r11,r9[0x0]
80005516:	14 97       	mov	r7,r10
80005518:	2f c9       	sub	r9,-4
8000551a:	51 09       	stdsp	sp[0x40],r9
8000551c:	50 1b       	stdsp	sp[0x4],r11
8000551e:	30 0e       	mov	lr,0
80005520:	30 18       	mov	r8,1
80005522:	50 0e       	stdsp	sp[0x0],lr
80005524:	c2 29       	rjmp	80005768 <_vfprintf_r+0x1538>
80005526:	50 a7       	stdsp	sp[0x28],r7
80005528:	50 80       	stdsp	sp[0x20],r0
8000552a:	0c 97       	mov	r7,r6
8000552c:	04 94       	mov	r4,r2
8000552e:	06 96       	mov	r6,r3
80005530:	02 92       	mov	r2,r1
80005532:	fe cc ba ba 	sub	r12,pc,-17734
80005536:	40 93       	lddsp	r3,sp[0x24]
80005538:	10 90       	mov	r0,r8
8000553a:	40 41       	lddsp	r1,sp[0x10]
8000553c:	50 dc       	stdsp	sp[0x34],r12
8000553e:	ed b5 00 05 	bld	r5,0x5
80005542:	c5 51       	brne	800055ec <_vfprintf_r+0x13bc>
80005544:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005548:	40 3b       	lddsp	r11,sp[0xc]
8000554a:	58 0b       	cp.w	r11,0
8000554c:	c2 20       	breq	80005590 <_vfprintf_r+0x1360>
8000554e:	10 36       	cp.w	r6,r8
80005550:	c0 a4       	brge	80005564 <_vfprintf_r+0x1334>
80005552:	fa ca f9 44 	sub	r10,sp,-1724
80005556:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000555a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000555e:	fa e9 00 00 	st.d	sp[0],r8
80005562:	cf 28       	rjmp	80005746 <_vfprintf_r+0x1516>
80005564:	fa c8 f9 50 	sub	r8,sp,-1712
80005568:	1a d8       	st.w	--sp,r8
8000556a:	fa c8 fa b8 	sub	r8,sp,-1352
8000556e:	04 9a       	mov	r10,r2
80005570:	1a d8       	st.w	--sp,r8
80005572:	0c 9b       	mov	r11,r6
80005574:	fa c8 fb b4 	sub	r8,sp,-1100
80005578:	08 9c       	mov	r12,r4
8000557a:	1a d8       	st.w	--sp,r8
8000557c:	fa c8 f9 40 	sub	r8,sp,-1728
80005580:	fa c9 ff b4 	sub	r9,sp,-76
80005584:	fe b0 f4 be 	rcall	80003f00 <get_arg>
80005588:	2f dd       	sub	sp,-12
8000558a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000558e:	c0 c8       	rjmp	800055a6 <_vfprintf_r+0x1376>
80005590:	ee ca ff ff 	sub	r10,r7,-1
80005594:	10 37       	cp.w	r7,r8
80005596:	c0 b4       	brge	800055ac <_vfprintf_r+0x137c>
80005598:	fa c9 f9 44 	sub	r9,sp,-1724
8000559c:	14 97       	mov	r7,r10
8000559e:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055a2:	ec ea fd 88 	ld.d	r10,r6[-632]
800055a6:	fa eb 00 00 	st.d	sp[0],r10
800055aa:	cc e8       	rjmp	80005746 <_vfprintf_r+0x1516>
800055ac:	41 09       	lddsp	r9,sp[0x40]
800055ae:	59 f8       	cp.w	r8,31
800055b0:	e0 89 00 16 	brgt	800055dc <_vfprintf_r+0x13ac>
800055b4:	f2 e6 00 00 	ld.d	r6,r9[0]
800055b8:	f2 cb ff f8 	sub	r11,r9,-8
800055bc:	fa e7 00 00 	st.d	sp[0],r6
800055c0:	51 0b       	stdsp	sp[0x40],r11
800055c2:	fa c6 f9 44 	sub	r6,sp,-1724
800055c6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800055ca:	fa e6 00 00 	ld.d	r6,sp[0]
800055ce:	f2 e7 fd 88 	st.d	r9[-632],r6
800055d2:	2f f8       	sub	r8,-1
800055d4:	14 97       	mov	r7,r10
800055d6:	fb 48 06 b4 	st.w	sp[1716],r8
800055da:	cb 68       	rjmp	80005746 <_vfprintf_r+0x1516>
800055dc:	f2 e6 00 00 	ld.d	r6,r9[0]
800055e0:	2f 89       	sub	r9,-8
800055e2:	fa e7 00 00 	st.d	sp[0],r6
800055e6:	51 09       	stdsp	sp[0x40],r9
800055e8:	14 97       	mov	r7,r10
800055ea:	ca e8       	rjmp	80005746 <_vfprintf_r+0x1516>
800055ec:	ed b5 00 04 	bld	r5,0x4
800055f0:	c1 71       	brne	8000561e <_vfprintf_r+0x13ee>
800055f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055f6:	40 3e       	lddsp	lr,sp[0xc]
800055f8:	58 0e       	cp.w	lr,0
800055fa:	c0 80       	breq	8000560a <_vfprintf_r+0x13da>
800055fc:	10 36       	cp.w	r6,r8
800055fe:	c6 94       	brge	800056d0 <_vfprintf_r+0x14a0>
80005600:	fa cc f9 44 	sub	r12,sp,-1724
80005604:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005608:	c8 28       	rjmp	8000570c <_vfprintf_r+0x14dc>
8000560a:	ee ca ff ff 	sub	r10,r7,-1
8000560e:	10 37       	cp.w	r7,r8
80005610:	e0 84 00 81 	brge	80005712 <_vfprintf_r+0x14e2>
80005614:	fa cb f9 44 	sub	r11,sp,-1724
80005618:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000561c:	c7 78       	rjmp	8000570a <_vfprintf_r+0x14da>
8000561e:	ed b5 00 06 	bld	r5,0x6
80005622:	c4 b1       	brne	800056b8 <_vfprintf_r+0x1488>
80005624:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005628:	40 3c       	lddsp	r12,sp[0xc]
8000562a:	58 0c       	cp.w	r12,0
8000562c:	c1 d0       	breq	80005666 <_vfprintf_r+0x1436>
8000562e:	10 36       	cp.w	r6,r8
80005630:	c0 64       	brge	8000563c <_vfprintf_r+0x140c>
80005632:	fa cb f9 44 	sub	r11,sp,-1724
80005636:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000563a:	c1 f8       	rjmp	80005678 <_vfprintf_r+0x1448>
8000563c:	fa c8 f9 50 	sub	r8,sp,-1712
80005640:	1a d8       	st.w	--sp,r8
80005642:	fa c8 fa b8 	sub	r8,sp,-1352
80005646:	1a d8       	st.w	--sp,r8
80005648:	fa c8 fb b4 	sub	r8,sp,-1100
8000564c:	1a d8       	st.w	--sp,r8
8000564e:	fa c8 f9 40 	sub	r8,sp,-1728
80005652:	fa c9 ff b4 	sub	r9,sp,-76
80005656:	04 9a       	mov	r10,r2
80005658:	0c 9b       	mov	r11,r6
8000565a:	08 9c       	mov	r12,r4
8000565c:	fe b0 f4 52 	rcall	80003f00 <get_arg>
80005660:	2f dd       	sub	sp,-12
80005662:	98 18       	ld.sh	r8,r12[0x2]
80005664:	c2 78       	rjmp	800056b2 <_vfprintf_r+0x1482>
80005666:	ee ca ff ff 	sub	r10,r7,-1
8000566a:	10 37       	cp.w	r7,r8
8000566c:	c0 a4       	brge	80005680 <_vfprintf_r+0x1450>
8000566e:	fa c9 f9 44 	sub	r9,sp,-1724
80005672:	14 97       	mov	r7,r10
80005674:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005678:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000567c:	c1 b8       	rjmp	800056b2 <_vfprintf_r+0x1482>
8000567e:	d7 03       	nop
80005680:	41 09       	lddsp	r9,sp[0x40]
80005682:	59 f8       	cp.w	r8,31
80005684:	e0 89 00 13 	brgt	800056aa <_vfprintf_r+0x147a>
80005688:	f2 cb ff fc 	sub	r11,r9,-4
8000568c:	51 0b       	stdsp	sp[0x40],r11
8000568e:	72 09       	ld.w	r9,r9[0x0]
80005690:	fa c6 f9 44 	sub	r6,sp,-1724
80005694:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005698:	2f f8       	sub	r8,-1
8000569a:	f7 49 fd 88 	st.w	r11[-632],r9
8000569e:	fb 48 06 b4 	st.w	sp[1716],r8
800056a2:	14 97       	mov	r7,r10
800056a4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800056a8:	c0 58       	rjmp	800056b2 <_vfprintf_r+0x1482>
800056aa:	92 18       	ld.sh	r8,r9[0x2]
800056ac:	14 97       	mov	r7,r10
800056ae:	2f c9       	sub	r9,-4
800056b0:	51 09       	stdsp	sp[0x40],r9
800056b2:	5c 78       	castu.h	r8
800056b4:	50 18       	stdsp	sp[0x4],r8
800056b6:	c4 68       	rjmp	80005742 <_vfprintf_r+0x1512>
800056b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056bc:	40 3c       	lddsp	r12,sp[0xc]
800056be:	58 0c       	cp.w	r12,0
800056c0:	c1 d0       	breq	800056fa <_vfprintf_r+0x14ca>
800056c2:	10 36       	cp.w	r6,r8
800056c4:	c0 64       	brge	800056d0 <_vfprintf_r+0x14a0>
800056c6:	fa cb f9 44 	sub	r11,sp,-1724
800056ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
800056ce:	c1 f8       	rjmp	8000570c <_vfprintf_r+0x14dc>
800056d0:	fa c8 f9 50 	sub	r8,sp,-1712
800056d4:	1a d8       	st.w	--sp,r8
800056d6:	fa c8 fa b8 	sub	r8,sp,-1352
800056da:	0c 9b       	mov	r11,r6
800056dc:	1a d8       	st.w	--sp,r8
800056de:	fa c8 fb b4 	sub	r8,sp,-1100
800056e2:	04 9a       	mov	r10,r2
800056e4:	1a d8       	st.w	--sp,r8
800056e6:	08 9c       	mov	r12,r4
800056e8:	fa c8 f9 40 	sub	r8,sp,-1728
800056ec:	fa c9 ff b4 	sub	r9,sp,-76
800056f0:	fe b0 f4 08 	rcall	80003f00 <get_arg>
800056f4:	2f dd       	sub	sp,-12
800056f6:	78 0b       	ld.w	r11,r12[0x0]
800056f8:	c2 48       	rjmp	80005740 <_vfprintf_r+0x1510>
800056fa:	ee ca ff ff 	sub	r10,r7,-1
800056fe:	10 37       	cp.w	r7,r8
80005700:	c0 94       	brge	80005712 <_vfprintf_r+0x14e2>
80005702:	fa c9 f9 44 	sub	r9,sp,-1724
80005706:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000570a:	14 97       	mov	r7,r10
8000570c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005710:	c1 88       	rjmp	80005740 <_vfprintf_r+0x1510>
80005712:	41 09       	lddsp	r9,sp[0x40]
80005714:	59 f8       	cp.w	r8,31
80005716:	e0 89 00 11 	brgt	80005738 <_vfprintf_r+0x1508>
8000571a:	f2 cb ff fc 	sub	r11,r9,-4
8000571e:	51 0b       	stdsp	sp[0x40],r11
80005720:	fa c6 f9 44 	sub	r6,sp,-1724
80005724:	72 0b       	ld.w	r11,r9[0x0]
80005726:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000572a:	f3 4b fd 88 	st.w	r9[-632],r11
8000572e:	2f f8       	sub	r8,-1
80005730:	14 97       	mov	r7,r10
80005732:	fb 48 06 b4 	st.w	sp[1716],r8
80005736:	c0 58       	rjmp	80005740 <_vfprintf_r+0x1510>
80005738:	72 0b       	ld.w	r11,r9[0x0]
8000573a:	14 97       	mov	r7,r10
8000573c:	2f c9       	sub	r9,-4
8000573e:	51 09       	stdsp	sp[0x40],r9
80005740:	50 1b       	stdsp	sp[0x4],r11
80005742:	30 0e       	mov	lr,0
80005744:	50 0e       	stdsp	sp[0x0],lr
80005746:	40 08       	lddsp	r8,sp[0x0]
80005748:	40 1c       	lddsp	r12,sp[0x4]
8000574a:	18 48       	or	r8,r12
8000574c:	5f 19       	srne	r9
8000574e:	0a 98       	mov	r8,r5
80005750:	eb e9 00 09 	and	r9,r5,r9
80005754:	a1 b8       	sbr	r8,0x1
80005756:	58 09       	cp.w	r9,0
80005758:	c0 70       	breq	80005766 <_vfprintf_r+0x1536>
8000575a:	10 95       	mov	r5,r8
8000575c:	fb 60 06 b9 	st.b	sp[1721],r0
80005760:	33 08       	mov	r8,48
80005762:	fb 68 06 b8 	st.b	sp[1720],r8
80005766:	30 28       	mov	r8,2
80005768:	30 09       	mov	r9,0
8000576a:	fb 69 06 bb 	st.b	sp[1723],r9
8000576e:	0a 99       	mov	r9,r5
80005770:	a7 d9       	cbr	r9,0x7
80005772:	40 2b       	lddsp	r11,sp[0x8]
80005774:	40 16       	lddsp	r6,sp[0x4]
80005776:	58 0b       	cp.w	r11,0
80005778:	5f 1a       	srne	r10
8000577a:	f2 05 17 40 	movge	r5,r9
8000577e:	fa c2 f9 78 	sub	r2,sp,-1672
80005782:	40 09       	lddsp	r9,sp[0x0]
80005784:	0c 49       	or	r9,r6
80005786:	5f 19       	srne	r9
80005788:	f5 e9 10 09 	or	r9,r10,r9
8000578c:	c5 c0       	breq	80005844 <_vfprintf_r+0x1614>
8000578e:	30 19       	mov	r9,1
80005790:	f2 08 18 00 	cp.b	r8,r9
80005794:	c0 60       	breq	800057a0 <_vfprintf_r+0x1570>
80005796:	30 29       	mov	r9,2
80005798:	f2 08 18 00 	cp.b	r8,r9
8000579c:	c0 41       	brne	800057a4 <_vfprintf_r+0x1574>
8000579e:	c3 c8       	rjmp	80005816 <_vfprintf_r+0x15e6>
800057a0:	04 96       	mov	r6,r2
800057a2:	c3 08       	rjmp	80005802 <_vfprintf_r+0x15d2>
800057a4:	04 96       	mov	r6,r2
800057a6:	fa e8 00 00 	ld.d	r8,sp[0]
800057aa:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800057ae:	2d 0a       	sub	r10,-48
800057b0:	0c fa       	st.b	--r6,r10
800057b2:	f0 0b 16 03 	lsr	r11,r8,0x3
800057b6:	f2 0c 16 03 	lsr	r12,r9,0x3
800057ba:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800057be:	18 99       	mov	r9,r12
800057c0:	16 98       	mov	r8,r11
800057c2:	58 08       	cp.w	r8,0
800057c4:	5c 29       	cpc	r9
800057c6:	cf 21       	brne	800057aa <_vfprintf_r+0x157a>
800057c8:	fa e9 00 00 	st.d	sp[0],r8
800057cc:	ed b5 00 00 	bld	r5,0x0
800057d0:	c4 51       	brne	8000585a <_vfprintf_r+0x162a>
800057d2:	33 09       	mov	r9,48
800057d4:	f2 0a 18 00 	cp.b	r10,r9
800057d8:	c4 10       	breq	8000585a <_vfprintf_r+0x162a>
800057da:	0c f9       	st.b	--r6,r9
800057dc:	c3 f8       	rjmp	8000585a <_vfprintf_r+0x162a>
800057de:	fa ea 00 00 	ld.d	r10,sp[0]
800057e2:	30 a8       	mov	r8,10
800057e4:	30 09       	mov	r9,0
800057e6:	e0 a0 1c 9f 	rcall	80009124 <__avr32_umod64>
800057ea:	30 a8       	mov	r8,10
800057ec:	2d 0a       	sub	r10,-48
800057ee:	30 09       	mov	r9,0
800057f0:	ac 8a       	st.b	r6[0x0],r10
800057f2:	fa ea 00 00 	ld.d	r10,sp[0]
800057f6:	e0 a0 1b 65 	rcall	80008ec0 <__avr32_udiv64>
800057fa:	16 99       	mov	r9,r11
800057fc:	14 98       	mov	r8,r10
800057fe:	fa e9 00 00 	st.d	sp[0],r8
80005802:	20 16       	sub	r6,1
80005804:	fa ea 00 00 	ld.d	r10,sp[0]
80005808:	58 9a       	cp.w	r10,9
8000580a:	5c 2b       	cpc	r11
8000580c:	fe 9b ff e9 	brhi	800057de <_vfprintf_r+0x15ae>
80005810:	1b f8       	ld.ub	r8,sp[0x7]
80005812:	2d 08       	sub	r8,-48
80005814:	c2 08       	rjmp	80005854 <_vfprintf_r+0x1624>
80005816:	04 96       	mov	r6,r2
80005818:	fa e8 00 00 	ld.d	r8,sp[0]
8000581c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005820:	40 de       	lddsp	lr,sp[0x34]
80005822:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005826:	0c fa       	st.b	--r6,r10
80005828:	f2 0b 16 04 	lsr	r11,r9,0x4
8000582c:	f0 0a 16 04 	lsr	r10,r8,0x4
80005830:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005834:	16 99       	mov	r9,r11
80005836:	14 98       	mov	r8,r10
80005838:	58 08       	cp.w	r8,0
8000583a:	5c 29       	cpc	r9
8000583c:	cf 01       	brne	8000581c <_vfprintf_r+0x15ec>
8000583e:	fa e9 00 00 	st.d	sp[0],r8
80005842:	c0 c8       	rjmp	8000585a <_vfprintf_r+0x162a>
80005844:	58 08       	cp.w	r8,0
80005846:	c0 91       	brne	80005858 <_vfprintf_r+0x1628>
80005848:	ed b5 00 00 	bld	r5,0x0
8000584c:	c0 61       	brne	80005858 <_vfprintf_r+0x1628>
8000584e:	fa c6 f9 79 	sub	r6,sp,-1671
80005852:	33 08       	mov	r8,48
80005854:	ac 88       	st.b	r6[0x0],r8
80005856:	c0 28       	rjmp	8000585a <_vfprintf_r+0x162a>
80005858:	04 96       	mov	r6,r2
8000585a:	0c 12       	sub	r2,r6
8000585c:	c1 c8       	rjmp	80005894 <_vfprintf_r+0x1664>
8000585e:	50 a7       	stdsp	sp[0x28],r7
80005860:	50 80       	stdsp	sp[0x20],r0
80005862:	40 93       	lddsp	r3,sp[0x24]
80005864:	0c 97       	mov	r7,r6
80005866:	10 90       	mov	r0,r8
80005868:	04 94       	mov	r4,r2
8000586a:	40 41       	lddsp	r1,sp[0x10]
8000586c:	58 08       	cp.w	r8,0
8000586e:	e0 80 04 4f 	breq	8000610c <_vfprintf_r+0x1edc>
80005872:	fb 68 06 60 	st.b	sp[1632],r8
80005876:	30 0c       	mov	r12,0
80005878:	30 08       	mov	r8,0
8000587a:	30 12       	mov	r2,1
8000587c:	fb 68 06 bb 	st.b	sp[1723],r8
80005880:	50 2c       	stdsp	sp[0x8],r12
80005882:	fa c6 f9 a0 	sub	r6,sp,-1632
80005886:	c0 78       	rjmp	80005894 <_vfprintf_r+0x1664>
80005888:	30 0b       	mov	r11,0
8000588a:	50 2b       	stdsp	sp[0x8],r11
8000588c:	c0 48       	rjmp	80005894 <_vfprintf_r+0x1664>
8000588e:	40 22       	lddsp	r2,sp[0x8]
80005890:	30 0a       	mov	r10,0
80005892:	50 2a       	stdsp	sp[0x8],r10
80005894:	40 29       	lddsp	r9,sp[0x8]
80005896:	e4 09 0c 49 	max	r9,r2,r9
8000589a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000589e:	50 39       	stdsp	sp[0xc],r9
800058a0:	0a 9e       	mov	lr,r5
800058a2:	30 09       	mov	r9,0
800058a4:	e2 1e 00 02 	andl	lr,0x2,COH
800058a8:	f2 08 18 00 	cp.b	r8,r9
800058ac:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800058b0:	f7 b8 01 ff 	subne	r8,-1
800058b4:	fb f8 1a 03 	st.wne	sp[0xc],r8
800058b8:	0a 9b       	mov	r11,r5
800058ba:	58 0e       	cp.w	lr,0
800058bc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800058c0:	f7 bc 01 fe 	subne	r12,-2
800058c4:	fb fc 1a 03 	st.wne	sp[0xc],r12
800058c8:	e2 1b 00 84 	andl	r11,0x84,COH
800058cc:	50 fe       	stdsp	sp[0x3c],lr
800058ce:	50 9b       	stdsp	sp[0x24],r11
800058d0:	c4 71       	brne	8000595e <_vfprintf_r+0x172e>
800058d2:	40 8a       	lddsp	r10,sp[0x20]
800058d4:	40 39       	lddsp	r9,sp[0xc]
800058d6:	12 1a       	sub	r10,r9
800058d8:	50 4a       	stdsp	sp[0x10],r10
800058da:	58 0a       	cp.w	r10,0
800058dc:	e0 89 00 20 	brgt	8000591c <_vfprintf_r+0x16ec>
800058e0:	c3 f8       	rjmp	8000595e <_vfprintf_r+0x172e>
800058e2:	2f 09       	sub	r9,-16
800058e4:	2f f8       	sub	r8,-1
800058e6:	fe ce be 56 	sub	lr,pc,-16810
800058ea:	31 0c       	mov	r12,16
800058ec:	fb 49 06 90 	st.w	sp[1680],r9
800058f0:	87 0e       	st.w	r3[0x0],lr
800058f2:	87 1c       	st.w	r3[0x4],r12
800058f4:	fb 48 06 8c 	st.w	sp[1676],r8
800058f8:	58 78       	cp.w	r8,7
800058fa:	e0 89 00 04 	brgt	80005902 <_vfprintf_r+0x16d2>
800058fe:	2f 83       	sub	r3,-8
80005900:	c0 b8       	rjmp	80005916 <_vfprintf_r+0x16e6>
80005902:	fa ca f9 78 	sub	r10,sp,-1672
80005906:	02 9b       	mov	r11,r1
80005908:	08 9c       	mov	r12,r4
8000590a:	fe b0 f4 85 	rcall	80004214 <__sprint_r>
8000590e:	e0 81 04 10 	brne	8000612e <_vfprintf_r+0x1efe>
80005912:	fa c3 f9 e0 	sub	r3,sp,-1568
80005916:	40 4b       	lddsp	r11,sp[0x10]
80005918:	21 0b       	sub	r11,16
8000591a:	50 4b       	stdsp	sp[0x10],r11
8000591c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005920:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005924:	fe ca be 94 	sub	r10,pc,-16748
80005928:	40 4e       	lddsp	lr,sp[0x10]
8000592a:	59 0e       	cp.w	lr,16
8000592c:	fe 99 ff db 	brgt	800058e2 <_vfprintf_r+0x16b2>
80005930:	1c 09       	add	r9,lr
80005932:	2f f8       	sub	r8,-1
80005934:	87 0a       	st.w	r3[0x0],r10
80005936:	fb 49 06 90 	st.w	sp[1680],r9
8000593a:	87 1e       	st.w	r3[0x4],lr
8000593c:	fb 48 06 8c 	st.w	sp[1676],r8
80005940:	58 78       	cp.w	r8,7
80005942:	e0 89 00 04 	brgt	8000594a <_vfprintf_r+0x171a>
80005946:	2f 83       	sub	r3,-8
80005948:	c0 b8       	rjmp	8000595e <_vfprintf_r+0x172e>
8000594a:	fa ca f9 78 	sub	r10,sp,-1672
8000594e:	02 9b       	mov	r11,r1
80005950:	08 9c       	mov	r12,r4
80005952:	fe b0 f4 61 	rcall	80004214 <__sprint_r>
80005956:	e0 81 03 ec 	brne	8000612e <_vfprintf_r+0x1efe>
8000595a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000595e:	30 09       	mov	r9,0
80005960:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005964:	f2 08 18 00 	cp.b	r8,r9
80005968:	c1 f0       	breq	800059a6 <_vfprintf_r+0x1776>
8000596a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000596e:	fa c9 f9 45 	sub	r9,sp,-1723
80005972:	2f f8       	sub	r8,-1
80005974:	87 09       	st.w	r3[0x0],r9
80005976:	fb 48 06 90 	st.w	sp[1680],r8
8000597a:	30 19       	mov	r9,1
8000597c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005980:	87 19       	st.w	r3[0x4],r9
80005982:	2f f8       	sub	r8,-1
80005984:	fb 48 06 8c 	st.w	sp[1676],r8
80005988:	58 78       	cp.w	r8,7
8000598a:	e0 89 00 04 	brgt	80005992 <_vfprintf_r+0x1762>
8000598e:	2f 83       	sub	r3,-8
80005990:	c0 b8       	rjmp	800059a6 <_vfprintf_r+0x1776>
80005992:	fa ca f9 78 	sub	r10,sp,-1672
80005996:	02 9b       	mov	r11,r1
80005998:	08 9c       	mov	r12,r4
8000599a:	fe b0 f4 3d 	rcall	80004214 <__sprint_r>
8000599e:	e0 81 03 c8 	brne	8000612e <_vfprintf_r+0x1efe>
800059a2:	fa c3 f9 e0 	sub	r3,sp,-1568
800059a6:	40 fc       	lddsp	r12,sp[0x3c]
800059a8:	58 0c       	cp.w	r12,0
800059aa:	c1 f0       	breq	800059e8 <_vfprintf_r+0x17b8>
800059ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800059b0:	fa c9 f9 48 	sub	r9,sp,-1720
800059b4:	2f e8       	sub	r8,-2
800059b6:	87 09       	st.w	r3[0x0],r9
800059b8:	fb 48 06 90 	st.w	sp[1680],r8
800059bc:	30 29       	mov	r9,2
800059be:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059c2:	87 19       	st.w	r3[0x4],r9
800059c4:	2f f8       	sub	r8,-1
800059c6:	fb 48 06 8c 	st.w	sp[1676],r8
800059ca:	58 78       	cp.w	r8,7
800059cc:	e0 89 00 04 	brgt	800059d4 <_vfprintf_r+0x17a4>
800059d0:	2f 83       	sub	r3,-8
800059d2:	c0 b8       	rjmp	800059e8 <_vfprintf_r+0x17b8>
800059d4:	fa ca f9 78 	sub	r10,sp,-1672
800059d8:	02 9b       	mov	r11,r1
800059da:	08 9c       	mov	r12,r4
800059dc:	fe b0 f4 1c 	rcall	80004214 <__sprint_r>
800059e0:	e0 81 03 a7 	brne	8000612e <_vfprintf_r+0x1efe>
800059e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800059e8:	40 9b       	lddsp	r11,sp[0x24]
800059ea:	e0 4b 00 80 	cp.w	r11,128
800059ee:	c4 71       	brne	80005a7c <_vfprintf_r+0x184c>
800059f0:	40 8a       	lddsp	r10,sp[0x20]
800059f2:	40 39       	lddsp	r9,sp[0xc]
800059f4:	12 1a       	sub	r10,r9
800059f6:	50 4a       	stdsp	sp[0x10],r10
800059f8:	58 0a       	cp.w	r10,0
800059fa:	e0 89 00 20 	brgt	80005a3a <_vfprintf_r+0x180a>
800059fe:	c3 f8       	rjmp	80005a7c <_vfprintf_r+0x184c>
80005a00:	2f 09       	sub	r9,-16
80005a02:	2f f8       	sub	r8,-1
80005a04:	fe ce bf 64 	sub	lr,pc,-16540
80005a08:	31 0c       	mov	r12,16
80005a0a:	fb 49 06 90 	st.w	sp[1680],r9
80005a0e:	87 0e       	st.w	r3[0x0],lr
80005a10:	87 1c       	st.w	r3[0x4],r12
80005a12:	fb 48 06 8c 	st.w	sp[1676],r8
80005a16:	58 78       	cp.w	r8,7
80005a18:	e0 89 00 04 	brgt	80005a20 <_vfprintf_r+0x17f0>
80005a1c:	2f 83       	sub	r3,-8
80005a1e:	c0 b8       	rjmp	80005a34 <_vfprintf_r+0x1804>
80005a20:	fa ca f9 78 	sub	r10,sp,-1672
80005a24:	02 9b       	mov	r11,r1
80005a26:	08 9c       	mov	r12,r4
80005a28:	fe b0 f3 f6 	rcall	80004214 <__sprint_r>
80005a2c:	e0 81 03 81 	brne	8000612e <_vfprintf_r+0x1efe>
80005a30:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a34:	40 4b       	lddsp	r11,sp[0x10]
80005a36:	21 0b       	sub	r11,16
80005a38:	50 4b       	stdsp	sp[0x10],r11
80005a3a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005a3e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a42:	fe ca bf a2 	sub	r10,pc,-16478
80005a46:	40 4e       	lddsp	lr,sp[0x10]
80005a48:	59 0e       	cp.w	lr,16
80005a4a:	fe 99 ff db 	brgt	80005a00 <_vfprintf_r+0x17d0>
80005a4e:	1c 09       	add	r9,lr
80005a50:	2f f8       	sub	r8,-1
80005a52:	87 0a       	st.w	r3[0x0],r10
80005a54:	fb 49 06 90 	st.w	sp[1680],r9
80005a58:	87 1e       	st.w	r3[0x4],lr
80005a5a:	fb 48 06 8c 	st.w	sp[1676],r8
80005a5e:	58 78       	cp.w	r8,7
80005a60:	e0 89 00 04 	brgt	80005a68 <_vfprintf_r+0x1838>
80005a64:	2f 83       	sub	r3,-8
80005a66:	c0 b8       	rjmp	80005a7c <_vfprintf_r+0x184c>
80005a68:	fa ca f9 78 	sub	r10,sp,-1672
80005a6c:	02 9b       	mov	r11,r1
80005a6e:	08 9c       	mov	r12,r4
80005a70:	fe b0 f3 d2 	rcall	80004214 <__sprint_r>
80005a74:	e0 81 03 5d 	brne	8000612e <_vfprintf_r+0x1efe>
80005a78:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a7c:	40 2c       	lddsp	r12,sp[0x8]
80005a7e:	04 1c       	sub	r12,r2
80005a80:	50 2c       	stdsp	sp[0x8],r12
80005a82:	58 0c       	cp.w	r12,0
80005a84:	e0 89 00 20 	brgt	80005ac4 <_vfprintf_r+0x1894>
80005a88:	c3 f8       	rjmp	80005b06 <_vfprintf_r+0x18d6>
80005a8a:	2f 09       	sub	r9,-16
80005a8c:	2f f8       	sub	r8,-1
80005a8e:	fe cb bf ee 	sub	r11,pc,-16402
80005a92:	31 0a       	mov	r10,16
80005a94:	fb 49 06 90 	st.w	sp[1680],r9
80005a98:	87 0b       	st.w	r3[0x0],r11
80005a9a:	87 1a       	st.w	r3[0x4],r10
80005a9c:	fb 48 06 8c 	st.w	sp[1676],r8
80005aa0:	58 78       	cp.w	r8,7
80005aa2:	e0 89 00 04 	brgt	80005aaa <_vfprintf_r+0x187a>
80005aa6:	2f 83       	sub	r3,-8
80005aa8:	c0 b8       	rjmp	80005abe <_vfprintf_r+0x188e>
80005aaa:	fa ca f9 78 	sub	r10,sp,-1672
80005aae:	02 9b       	mov	r11,r1
80005ab0:	08 9c       	mov	r12,r4
80005ab2:	fe b0 f3 b1 	rcall	80004214 <__sprint_r>
80005ab6:	e0 81 03 3c 	brne	8000612e <_vfprintf_r+0x1efe>
80005aba:	fa c3 f9 e0 	sub	r3,sp,-1568
80005abe:	40 29       	lddsp	r9,sp[0x8]
80005ac0:	21 09       	sub	r9,16
80005ac2:	50 29       	stdsp	sp[0x8],r9
80005ac4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005ac8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005acc:	fe ca c0 2c 	sub	r10,pc,-16340
80005ad0:	40 2e       	lddsp	lr,sp[0x8]
80005ad2:	59 0e       	cp.w	lr,16
80005ad4:	fe 99 ff db 	brgt	80005a8a <_vfprintf_r+0x185a>
80005ad8:	1c 09       	add	r9,lr
80005ada:	2f f8       	sub	r8,-1
80005adc:	87 0a       	st.w	r3[0x0],r10
80005ade:	fb 49 06 90 	st.w	sp[1680],r9
80005ae2:	87 1e       	st.w	r3[0x4],lr
80005ae4:	fb 48 06 8c 	st.w	sp[1676],r8
80005ae8:	58 78       	cp.w	r8,7
80005aea:	e0 89 00 04 	brgt	80005af2 <_vfprintf_r+0x18c2>
80005aee:	2f 83       	sub	r3,-8
80005af0:	c0 b8       	rjmp	80005b06 <_vfprintf_r+0x18d6>
80005af2:	fa ca f9 78 	sub	r10,sp,-1672
80005af6:	02 9b       	mov	r11,r1
80005af8:	08 9c       	mov	r12,r4
80005afa:	fe b0 f3 8d 	rcall	80004214 <__sprint_r>
80005afe:	e0 81 03 18 	brne	8000612e <_vfprintf_r+0x1efe>
80005b02:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b06:	ed b5 00 08 	bld	r5,0x8
80005b0a:	c0 b0       	breq	80005b20 <_vfprintf_r+0x18f0>
80005b0c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b10:	87 12       	st.w	r3[0x4],r2
80005b12:	87 06       	st.w	r3[0x0],r6
80005b14:	f0 02 00 02 	add	r2,r8,r2
80005b18:	fb 42 06 90 	st.w	sp[1680],r2
80005b1c:	e0 8f 01 d4 	bral	80005ec4 <_vfprintf_r+0x1c94>
80005b20:	e0 40 00 65 	cp.w	r0,101
80005b24:	e0 8a 01 d6 	brle	80005ed0 <_vfprintf_r+0x1ca0>
80005b28:	30 08       	mov	r8,0
80005b2a:	30 09       	mov	r9,0
80005b2c:	40 5b       	lddsp	r11,sp[0x14]
80005b2e:	40 7a       	lddsp	r10,sp[0x1c]
80005b30:	e0 a0 17 f5 	rcall	80008b1a <__avr32_f64_cmp_eq>
80005b34:	c7 90       	breq	80005c26 <_vfprintf_r+0x19f6>
80005b36:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b3a:	fe c9 c0 ae 	sub	r9,pc,-16210
80005b3e:	2f f8       	sub	r8,-1
80005b40:	87 09       	st.w	r3[0x0],r9
80005b42:	fb 48 06 90 	st.w	sp[1680],r8
80005b46:	30 19       	mov	r9,1
80005b48:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b4c:	87 19       	st.w	r3[0x4],r9
80005b4e:	2f f8       	sub	r8,-1
80005b50:	fb 48 06 8c 	st.w	sp[1676],r8
80005b54:	58 78       	cp.w	r8,7
80005b56:	e0 89 00 05 	brgt	80005b60 <_vfprintf_r+0x1930>
80005b5a:	2f 83       	sub	r3,-8
80005b5c:	c0 c8       	rjmp	80005b74 <_vfprintf_r+0x1944>
80005b5e:	d7 03       	nop
80005b60:	fa ca f9 78 	sub	r10,sp,-1672
80005b64:	02 9b       	mov	r11,r1
80005b66:	08 9c       	mov	r12,r4
80005b68:	fe b0 f3 56 	rcall	80004214 <__sprint_r>
80005b6c:	e0 81 02 e1 	brne	8000612e <_vfprintf_r+0x1efe>
80005b70:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b74:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005b78:	40 6c       	lddsp	r12,sp[0x18]
80005b7a:	18 38       	cp.w	r8,r12
80005b7c:	c0 55       	brlt	80005b86 <_vfprintf_r+0x1956>
80005b7e:	ed b5 00 00 	bld	r5,0x0
80005b82:	e0 81 02 6b 	brne	80006058 <_vfprintf_r+0x1e28>
80005b86:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b8a:	2f f8       	sub	r8,-1
80005b8c:	40 cb       	lddsp	r11,sp[0x30]
80005b8e:	fb 48 06 90 	st.w	sp[1680],r8
80005b92:	30 19       	mov	r9,1
80005b94:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b98:	87 0b       	st.w	r3[0x0],r11
80005b9a:	2f f8       	sub	r8,-1
80005b9c:	87 19       	st.w	r3[0x4],r9
80005b9e:	fb 48 06 8c 	st.w	sp[1676],r8
80005ba2:	58 78       	cp.w	r8,7
80005ba4:	e0 89 00 04 	brgt	80005bac <_vfprintf_r+0x197c>
80005ba8:	2f 83       	sub	r3,-8
80005baa:	c0 b8       	rjmp	80005bc0 <_vfprintf_r+0x1990>
80005bac:	fa ca f9 78 	sub	r10,sp,-1672
80005bb0:	02 9b       	mov	r11,r1
80005bb2:	08 9c       	mov	r12,r4
80005bb4:	fe b0 f3 30 	rcall	80004214 <__sprint_r>
80005bb8:	e0 81 02 bb 	brne	8000612e <_vfprintf_r+0x1efe>
80005bbc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bc0:	40 66       	lddsp	r6,sp[0x18]
80005bc2:	20 16       	sub	r6,1
80005bc4:	58 06       	cp.w	r6,0
80005bc6:	e0 89 00 1d 	brgt	80005c00 <_vfprintf_r+0x19d0>
80005bca:	e0 8f 02 47 	bral	80006058 <_vfprintf_r+0x1e28>
80005bce:	2f 09       	sub	r9,-16
80005bd0:	2f f8       	sub	r8,-1
80005bd2:	fb 49 06 90 	st.w	sp[1680],r9
80005bd6:	87 02       	st.w	r3[0x0],r2
80005bd8:	87 10       	st.w	r3[0x4],r0
80005bda:	fb 48 06 8c 	st.w	sp[1676],r8
80005bde:	58 78       	cp.w	r8,7
80005be0:	e0 89 00 04 	brgt	80005be8 <_vfprintf_r+0x19b8>
80005be4:	2f 83       	sub	r3,-8
80005be6:	c0 b8       	rjmp	80005bfc <_vfprintf_r+0x19cc>
80005be8:	fa ca f9 78 	sub	r10,sp,-1672
80005bec:	02 9b       	mov	r11,r1
80005bee:	08 9c       	mov	r12,r4
80005bf0:	fe b0 f3 12 	rcall	80004214 <__sprint_r>
80005bf4:	e0 81 02 9d 	brne	8000612e <_vfprintf_r+0x1efe>
80005bf8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bfc:	21 06       	sub	r6,16
80005bfe:	c0 48       	rjmp	80005c06 <_vfprintf_r+0x19d6>
80005c00:	fe c2 c1 60 	sub	r2,pc,-16032
80005c04:	31 00       	mov	r0,16
80005c06:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c0a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c0e:	fe ca c1 6e 	sub	r10,pc,-16018
80005c12:	59 06       	cp.w	r6,16
80005c14:	fe 99 ff dd 	brgt	80005bce <_vfprintf_r+0x199e>
80005c18:	0c 09       	add	r9,r6
80005c1a:	87 0a       	st.w	r3[0x0],r10
80005c1c:	fb 49 06 90 	st.w	sp[1680],r9
80005c20:	2f f8       	sub	r8,-1
80005c22:	87 16       	st.w	r3[0x4],r6
80005c24:	c5 39       	rjmp	80005eca <_vfprintf_r+0x1c9a>
80005c26:	fa fa 06 ac 	ld.w	r10,sp[1708]
80005c2a:	58 0a       	cp.w	r10,0
80005c2c:	e0 89 00 92 	brgt	80005d50 <_vfprintf_r+0x1b20>
80005c30:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c34:	fe c9 c1 a8 	sub	r9,pc,-15960
80005c38:	2f f8       	sub	r8,-1
80005c3a:	87 09       	st.w	r3[0x0],r9
80005c3c:	fb 48 06 90 	st.w	sp[1680],r8
80005c40:	30 19       	mov	r9,1
80005c42:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c46:	87 19       	st.w	r3[0x4],r9
80005c48:	2f f8       	sub	r8,-1
80005c4a:	fb 48 06 8c 	st.w	sp[1676],r8
80005c4e:	58 78       	cp.w	r8,7
80005c50:	e0 89 00 04 	brgt	80005c58 <_vfprintf_r+0x1a28>
80005c54:	2f 83       	sub	r3,-8
80005c56:	c0 b8       	rjmp	80005c6c <_vfprintf_r+0x1a3c>
80005c58:	fa ca f9 78 	sub	r10,sp,-1672
80005c5c:	02 9b       	mov	r11,r1
80005c5e:	08 9c       	mov	r12,r4
80005c60:	fe b0 f2 da 	rcall	80004214 <__sprint_r>
80005c64:	e0 81 02 65 	brne	8000612e <_vfprintf_r+0x1efe>
80005c68:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c6c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005c70:	58 08       	cp.w	r8,0
80005c72:	c0 81       	brne	80005c82 <_vfprintf_r+0x1a52>
80005c74:	40 6a       	lddsp	r10,sp[0x18]
80005c76:	58 0a       	cp.w	r10,0
80005c78:	c0 51       	brne	80005c82 <_vfprintf_r+0x1a52>
80005c7a:	ed b5 00 00 	bld	r5,0x0
80005c7e:	e0 81 01 ed 	brne	80006058 <_vfprintf_r+0x1e28>
80005c82:	40 c9       	lddsp	r9,sp[0x30]
80005c84:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c88:	2f f8       	sub	r8,-1
80005c8a:	87 09       	st.w	r3[0x0],r9
80005c8c:	fb 48 06 90 	st.w	sp[1680],r8
80005c90:	30 19       	mov	r9,1
80005c92:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c96:	87 19       	st.w	r3[0x4],r9
80005c98:	2f f8       	sub	r8,-1
80005c9a:	fb 48 06 8c 	st.w	sp[1676],r8
80005c9e:	58 78       	cp.w	r8,7
80005ca0:	e0 89 00 04 	brgt	80005ca8 <_vfprintf_r+0x1a78>
80005ca4:	2f 83       	sub	r3,-8
80005ca6:	c0 b8       	rjmp	80005cbc <_vfprintf_r+0x1a8c>
80005ca8:	fa ca f9 78 	sub	r10,sp,-1672
80005cac:	02 9b       	mov	r11,r1
80005cae:	08 9c       	mov	r12,r4
80005cb0:	fe b0 f2 b2 	rcall	80004214 <__sprint_r>
80005cb4:	e0 81 02 3d 	brne	8000612e <_vfprintf_r+0x1efe>
80005cb8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cbc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005cc0:	5c 32       	neg	r2
80005cc2:	58 02       	cp.w	r2,0
80005cc4:	e0 89 00 1d 	brgt	80005cfe <_vfprintf_r+0x1ace>
80005cc8:	c3 d8       	rjmp	80005d42 <_vfprintf_r+0x1b12>
80005cca:	2f 09       	sub	r9,-16
80005ccc:	2f f8       	sub	r8,-1
80005cce:	31 0e       	mov	lr,16
80005cd0:	fb 49 06 90 	st.w	sp[1680],r9
80005cd4:	87 00       	st.w	r3[0x0],r0
80005cd6:	87 1e       	st.w	r3[0x4],lr
80005cd8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cdc:	58 78       	cp.w	r8,7
80005cde:	e0 89 00 04 	brgt	80005ce6 <_vfprintf_r+0x1ab6>
80005ce2:	2f 83       	sub	r3,-8
80005ce4:	c0 b8       	rjmp	80005cfa <_vfprintf_r+0x1aca>
80005ce6:	fa ca f9 78 	sub	r10,sp,-1672
80005cea:	02 9b       	mov	r11,r1
80005cec:	08 9c       	mov	r12,r4
80005cee:	fe b0 f2 93 	rcall	80004214 <__sprint_r>
80005cf2:	e0 81 02 1e 	brne	8000612e <_vfprintf_r+0x1efe>
80005cf6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cfa:	21 02       	sub	r2,16
80005cfc:	c0 38       	rjmp	80005d02 <_vfprintf_r+0x1ad2>
80005cfe:	fe c0 c2 5e 	sub	r0,pc,-15778
80005d02:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d06:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d0a:	fe ca c2 6a 	sub	r10,pc,-15766
80005d0e:	59 02       	cp.w	r2,16
80005d10:	fe 99 ff dd 	brgt	80005cca <_vfprintf_r+0x1a9a>
80005d14:	04 09       	add	r9,r2
80005d16:	2f f8       	sub	r8,-1
80005d18:	87 0a       	st.w	r3[0x0],r10
80005d1a:	fb 49 06 90 	st.w	sp[1680],r9
80005d1e:	87 12       	st.w	r3[0x4],r2
80005d20:	fb 48 06 8c 	st.w	sp[1676],r8
80005d24:	58 78       	cp.w	r8,7
80005d26:	e0 89 00 04 	brgt	80005d2e <_vfprintf_r+0x1afe>
80005d2a:	2f 83       	sub	r3,-8
80005d2c:	c0 b8       	rjmp	80005d42 <_vfprintf_r+0x1b12>
80005d2e:	fa ca f9 78 	sub	r10,sp,-1672
80005d32:	02 9b       	mov	r11,r1
80005d34:	08 9c       	mov	r12,r4
80005d36:	fe b0 f2 6f 	rcall	80004214 <__sprint_r>
80005d3a:	e0 81 01 fa 	brne	8000612e <_vfprintf_r+0x1efe>
80005d3e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d42:	40 6c       	lddsp	r12,sp[0x18]
80005d44:	fa f8 06 90 	ld.w	r8,sp[1680]
80005d48:	87 06       	st.w	r3[0x0],r6
80005d4a:	87 1c       	st.w	r3[0x4],r12
80005d4c:	18 08       	add	r8,r12
80005d4e:	cb 98       	rjmp	80005ec0 <_vfprintf_r+0x1c90>
80005d50:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d54:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d58:	40 6b       	lddsp	r11,sp[0x18]
80005d5a:	16 3a       	cp.w	r10,r11
80005d5c:	c6 f5       	brlt	80005e3a <_vfprintf_r+0x1c0a>
80005d5e:	16 09       	add	r9,r11
80005d60:	2f f8       	sub	r8,-1
80005d62:	87 06       	st.w	r3[0x0],r6
80005d64:	fb 49 06 90 	st.w	sp[1680],r9
80005d68:	87 1b       	st.w	r3[0x4],r11
80005d6a:	fb 48 06 8c 	st.w	sp[1676],r8
80005d6e:	58 78       	cp.w	r8,7
80005d70:	e0 89 00 04 	brgt	80005d78 <_vfprintf_r+0x1b48>
80005d74:	2f 83       	sub	r3,-8
80005d76:	c0 b8       	rjmp	80005d8c <_vfprintf_r+0x1b5c>
80005d78:	fa ca f9 78 	sub	r10,sp,-1672
80005d7c:	02 9b       	mov	r11,r1
80005d7e:	08 9c       	mov	r12,r4
80005d80:	fe b0 f2 4a 	rcall	80004214 <__sprint_r>
80005d84:	e0 81 01 d5 	brne	8000612e <_vfprintf_r+0x1efe>
80005d88:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d8c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005d90:	40 6a       	lddsp	r10,sp[0x18]
80005d92:	14 16       	sub	r6,r10
80005d94:	58 06       	cp.w	r6,0
80005d96:	e0 89 00 1c 	brgt	80005dce <_vfprintf_r+0x1b9e>
80005d9a:	c3 d8       	rjmp	80005e14 <_vfprintf_r+0x1be4>
80005d9c:	2f 09       	sub	r9,-16
80005d9e:	2f f8       	sub	r8,-1
80005da0:	fb 49 06 90 	st.w	sp[1680],r9
80005da4:	87 02       	st.w	r3[0x0],r2
80005da6:	87 10       	st.w	r3[0x4],r0
80005da8:	fb 48 06 8c 	st.w	sp[1676],r8
80005dac:	58 78       	cp.w	r8,7
80005dae:	e0 89 00 04 	brgt	80005db6 <_vfprintf_r+0x1b86>
80005db2:	2f 83       	sub	r3,-8
80005db4:	c0 b8       	rjmp	80005dca <_vfprintf_r+0x1b9a>
80005db6:	fa ca f9 78 	sub	r10,sp,-1672
80005dba:	02 9b       	mov	r11,r1
80005dbc:	08 9c       	mov	r12,r4
80005dbe:	fe b0 f2 2b 	rcall	80004214 <__sprint_r>
80005dc2:	e0 81 01 b6 	brne	8000612e <_vfprintf_r+0x1efe>
80005dc6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dca:	21 06       	sub	r6,16
80005dcc:	c0 48       	rjmp	80005dd4 <_vfprintf_r+0x1ba4>
80005dce:	fe c2 c3 2e 	sub	r2,pc,-15570
80005dd2:	31 00       	mov	r0,16
80005dd4:	fa f9 06 90 	ld.w	r9,sp[1680]
80005dd8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ddc:	fe ca c3 3c 	sub	r10,pc,-15556
80005de0:	59 06       	cp.w	r6,16
80005de2:	fe 99 ff dd 	brgt	80005d9c <_vfprintf_r+0x1b6c>
80005de6:	0c 09       	add	r9,r6
80005de8:	2f f8       	sub	r8,-1
80005dea:	87 0a       	st.w	r3[0x0],r10
80005dec:	fb 49 06 90 	st.w	sp[1680],r9
80005df0:	87 16       	st.w	r3[0x4],r6
80005df2:	fb 48 06 8c 	st.w	sp[1676],r8
80005df6:	58 78       	cp.w	r8,7
80005df8:	e0 89 00 04 	brgt	80005e00 <_vfprintf_r+0x1bd0>
80005dfc:	2f 83       	sub	r3,-8
80005dfe:	c0 b8       	rjmp	80005e14 <_vfprintf_r+0x1be4>
80005e00:	fa ca f9 78 	sub	r10,sp,-1672
80005e04:	02 9b       	mov	r11,r1
80005e06:	08 9c       	mov	r12,r4
80005e08:	fe b0 f2 06 	rcall	80004214 <__sprint_r>
80005e0c:	e0 81 01 91 	brne	8000612e <_vfprintf_r+0x1efe>
80005e10:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e14:	ed b5 00 00 	bld	r5,0x0
80005e18:	e0 81 01 20 	brne	80006058 <_vfprintf_r+0x1e28>
80005e1c:	40 c9       	lddsp	r9,sp[0x30]
80005e1e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e22:	2f f8       	sub	r8,-1
80005e24:	87 09       	st.w	r3[0x0],r9
80005e26:	fb 48 06 90 	st.w	sp[1680],r8
80005e2a:	30 19       	mov	r9,1
80005e2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e30:	87 19       	st.w	r3[0x4],r9
80005e32:	2f f8       	sub	r8,-1
80005e34:	fb 48 06 8c 	st.w	sp[1676],r8
80005e38:	c0 29       	rjmp	8000603c <_vfprintf_r+0x1e0c>
80005e3a:	14 09       	add	r9,r10
80005e3c:	2f f8       	sub	r8,-1
80005e3e:	fb 49 06 90 	st.w	sp[1680],r9
80005e42:	87 06       	st.w	r3[0x0],r6
80005e44:	87 1a       	st.w	r3[0x4],r10
80005e46:	fb 48 06 8c 	st.w	sp[1676],r8
80005e4a:	58 78       	cp.w	r8,7
80005e4c:	e0 89 00 04 	brgt	80005e54 <_vfprintf_r+0x1c24>
80005e50:	2f 83       	sub	r3,-8
80005e52:	c0 b8       	rjmp	80005e68 <_vfprintf_r+0x1c38>
80005e54:	fa ca f9 78 	sub	r10,sp,-1672
80005e58:	02 9b       	mov	r11,r1
80005e5a:	08 9c       	mov	r12,r4
80005e5c:	fe b0 f1 dc 	rcall	80004214 <__sprint_r>
80005e60:	e0 81 01 67 	brne	8000612e <_vfprintf_r+0x1efe>
80005e64:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e68:	40 c8       	lddsp	r8,sp[0x30]
80005e6a:	87 08       	st.w	r3[0x0],r8
80005e6c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005e70:	2f f8       	sub	r8,-1
80005e72:	30 19       	mov	r9,1
80005e74:	fb 48 06 90 	st.w	sp[1680],r8
80005e78:	87 19       	st.w	r3[0x4],r9
80005e7a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e7e:	2f f8       	sub	r8,-1
80005e80:	fb 48 06 8c 	st.w	sp[1676],r8
80005e84:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005e88:	58 78       	cp.w	r8,7
80005e8a:	e0 89 00 04 	brgt	80005e92 <_vfprintf_r+0x1c62>
80005e8e:	2f 83       	sub	r3,-8
80005e90:	c0 b8       	rjmp	80005ea6 <_vfprintf_r+0x1c76>
80005e92:	fa ca f9 78 	sub	r10,sp,-1672
80005e96:	02 9b       	mov	r11,r1
80005e98:	08 9c       	mov	r12,r4
80005e9a:	fe b0 f1 bd 	rcall	80004214 <__sprint_r>
80005e9e:	e0 81 01 48 	brne	8000612e <_vfprintf_r+0x1efe>
80005ea2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ea6:	04 06       	add	r6,r2
80005ea8:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005eac:	87 06       	st.w	r3[0x0],r6
80005eae:	fa f9 06 90 	ld.w	r9,sp[1680]
80005eb2:	40 66       	lddsp	r6,sp[0x18]
80005eb4:	40 6e       	lddsp	lr,sp[0x18]
80005eb6:	10 16       	sub	r6,r8
80005eb8:	f2 08 01 08 	sub	r8,r9,r8
80005ebc:	87 16       	st.w	r3[0x4],r6
80005ebe:	1c 08       	add	r8,lr
80005ec0:	fb 48 06 90 	st.w	sp[1680],r8
80005ec4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ec8:	2f f8       	sub	r8,-1
80005eca:	fb 48 06 8c 	st.w	sp[1676],r8
80005ece:	cb 78       	rjmp	8000603c <_vfprintf_r+0x1e0c>
80005ed0:	40 6c       	lddsp	r12,sp[0x18]
80005ed2:	58 1c       	cp.w	r12,1
80005ed4:	e0 89 00 06 	brgt	80005ee0 <_vfprintf_r+0x1cb0>
80005ed8:	ed b5 00 00 	bld	r5,0x0
80005edc:	e0 81 00 85 	brne	80005fe6 <_vfprintf_r+0x1db6>
80005ee0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ee4:	2f f8       	sub	r8,-1
80005ee6:	30 19       	mov	r9,1
80005ee8:	fb 48 06 90 	st.w	sp[1680],r8
80005eec:	87 06       	st.w	r3[0x0],r6
80005eee:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ef2:	87 19       	st.w	r3[0x4],r9
80005ef4:	2f f8       	sub	r8,-1
80005ef6:	fb 48 06 8c 	st.w	sp[1676],r8
80005efa:	58 78       	cp.w	r8,7
80005efc:	e0 89 00 04 	brgt	80005f04 <_vfprintf_r+0x1cd4>
80005f00:	2f 83       	sub	r3,-8
80005f02:	c0 b8       	rjmp	80005f18 <_vfprintf_r+0x1ce8>
80005f04:	fa ca f9 78 	sub	r10,sp,-1672
80005f08:	02 9b       	mov	r11,r1
80005f0a:	08 9c       	mov	r12,r4
80005f0c:	fe b0 f1 84 	rcall	80004214 <__sprint_r>
80005f10:	e0 81 01 0f 	brne	8000612e <_vfprintf_r+0x1efe>
80005f14:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f18:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f1c:	2f f8       	sub	r8,-1
80005f1e:	40 cb       	lddsp	r11,sp[0x30]
80005f20:	fb 48 06 90 	st.w	sp[1680],r8
80005f24:	30 19       	mov	r9,1
80005f26:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f2a:	87 0b       	st.w	r3[0x0],r11
80005f2c:	2f f8       	sub	r8,-1
80005f2e:	87 19       	st.w	r3[0x4],r9
80005f30:	fb 48 06 8c 	st.w	sp[1676],r8
80005f34:	58 78       	cp.w	r8,7
80005f36:	e0 89 00 05 	brgt	80005f40 <_vfprintf_r+0x1d10>
80005f3a:	2f 83       	sub	r3,-8
80005f3c:	c0 c8       	rjmp	80005f54 <_vfprintf_r+0x1d24>
80005f3e:	d7 03       	nop
80005f40:	fa ca f9 78 	sub	r10,sp,-1672
80005f44:	02 9b       	mov	r11,r1
80005f46:	08 9c       	mov	r12,r4
80005f48:	fe b0 f1 66 	rcall	80004214 <__sprint_r>
80005f4c:	e0 81 00 f1 	brne	8000612e <_vfprintf_r+0x1efe>
80005f50:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f54:	30 08       	mov	r8,0
80005f56:	30 09       	mov	r9,0
80005f58:	40 5b       	lddsp	r11,sp[0x14]
80005f5a:	40 7a       	lddsp	r10,sp[0x1c]
80005f5c:	e0 a0 15 df 	rcall	80008b1a <__avr32_f64_cmp_eq>
80005f60:	40 68       	lddsp	r8,sp[0x18]
80005f62:	20 18       	sub	r8,1
80005f64:	58 0c       	cp.w	r12,0
80005f66:	c0 d1       	brne	80005f80 <_vfprintf_r+0x1d50>
80005f68:	2f f6       	sub	r6,-1
80005f6a:	87 18       	st.w	r3[0x4],r8
80005f6c:	87 06       	st.w	r3[0x0],r6
80005f6e:	fa f6 06 90 	ld.w	r6,sp[1680]
80005f72:	10 06       	add	r6,r8
80005f74:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f78:	fb 46 06 90 	st.w	sp[1680],r6
80005f7c:	2f f8       	sub	r8,-1
80005f7e:	c3 18       	rjmp	80005fe0 <_vfprintf_r+0x1db0>
80005f80:	10 96       	mov	r6,r8
80005f82:	58 08       	cp.w	r8,0
80005f84:	e0 89 00 1c 	brgt	80005fbc <_vfprintf_r+0x1d8c>
80005f88:	c4 b8       	rjmp	8000601e <_vfprintf_r+0x1dee>
80005f8a:	2f 09       	sub	r9,-16
80005f8c:	2f f8       	sub	r8,-1
80005f8e:	fb 49 06 90 	st.w	sp[1680],r9
80005f92:	87 02       	st.w	r3[0x0],r2
80005f94:	87 10       	st.w	r3[0x4],r0
80005f96:	fb 48 06 8c 	st.w	sp[1676],r8
80005f9a:	58 78       	cp.w	r8,7
80005f9c:	e0 89 00 04 	brgt	80005fa4 <_vfprintf_r+0x1d74>
80005fa0:	2f 83       	sub	r3,-8
80005fa2:	c0 b8       	rjmp	80005fb8 <_vfprintf_r+0x1d88>
80005fa4:	fa ca f9 78 	sub	r10,sp,-1672
80005fa8:	02 9b       	mov	r11,r1
80005faa:	08 9c       	mov	r12,r4
80005fac:	fe b0 f1 34 	rcall	80004214 <__sprint_r>
80005fb0:	e0 81 00 bf 	brne	8000612e <_vfprintf_r+0x1efe>
80005fb4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fb8:	21 06       	sub	r6,16
80005fba:	c0 48       	rjmp	80005fc2 <_vfprintf_r+0x1d92>
80005fbc:	fe c2 c5 1c 	sub	r2,pc,-15076
80005fc0:	31 00       	mov	r0,16
80005fc2:	fa f9 06 90 	ld.w	r9,sp[1680]
80005fc6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fca:	fe ca c5 2a 	sub	r10,pc,-15062
80005fce:	59 06       	cp.w	r6,16
80005fd0:	fe 99 ff dd 	brgt	80005f8a <_vfprintf_r+0x1d5a>
80005fd4:	0c 09       	add	r9,r6
80005fd6:	87 0a       	st.w	r3[0x0],r10
80005fd8:	fb 49 06 90 	st.w	sp[1680],r9
80005fdc:	2f f8       	sub	r8,-1
80005fde:	87 16       	st.w	r3[0x4],r6
80005fe0:	fb 48 06 8c 	st.w	sp[1676],r8
80005fe4:	c0 e8       	rjmp	80006000 <_vfprintf_r+0x1dd0>
80005fe6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fea:	2f f8       	sub	r8,-1
80005fec:	30 19       	mov	r9,1
80005fee:	fb 48 06 90 	st.w	sp[1680],r8
80005ff2:	87 06       	st.w	r3[0x0],r6
80005ff4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ff8:	87 19       	st.w	r3[0x4],r9
80005ffa:	2f f8       	sub	r8,-1
80005ffc:	fb 48 06 8c 	st.w	sp[1676],r8
80006000:	58 78       	cp.w	r8,7
80006002:	e0 89 00 04 	brgt	8000600a <_vfprintf_r+0x1dda>
80006006:	2f 83       	sub	r3,-8
80006008:	c0 b8       	rjmp	8000601e <_vfprintf_r+0x1dee>
8000600a:	fa ca f9 78 	sub	r10,sp,-1672
8000600e:	02 9b       	mov	r11,r1
80006010:	08 9c       	mov	r12,r4
80006012:	fe b0 f1 01 	rcall	80004214 <__sprint_r>
80006016:	e0 81 00 8c 	brne	8000612e <_vfprintf_r+0x1efe>
8000601a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000601e:	40 ea       	lddsp	r10,sp[0x38]
80006020:	fa f8 06 90 	ld.w	r8,sp[1680]
80006024:	14 08       	add	r8,r10
80006026:	fa c9 f9 64 	sub	r9,sp,-1692
8000602a:	fb 48 06 90 	st.w	sp[1680],r8
8000602e:	87 1a       	st.w	r3[0x4],r10
80006030:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006034:	87 09       	st.w	r3[0x0],r9
80006036:	2f f8       	sub	r8,-1
80006038:	fb 48 06 8c 	st.w	sp[1676],r8
8000603c:	58 78       	cp.w	r8,7
8000603e:	e0 89 00 04 	brgt	80006046 <_vfprintf_r+0x1e16>
80006042:	2f 83       	sub	r3,-8
80006044:	c0 a8       	rjmp	80006058 <_vfprintf_r+0x1e28>
80006046:	fa ca f9 78 	sub	r10,sp,-1672
8000604a:	02 9b       	mov	r11,r1
8000604c:	08 9c       	mov	r12,r4
8000604e:	fe b0 f0 e3 	rcall	80004214 <__sprint_r>
80006052:	c6 e1       	brne	8000612e <_vfprintf_r+0x1efe>
80006054:	fa c3 f9 e0 	sub	r3,sp,-1568
80006058:	e2 15 00 04 	andl	r5,0x4,COH
8000605c:	c3 f0       	breq	800060da <_vfprintf_r+0x1eaa>
8000605e:	40 86       	lddsp	r6,sp[0x20]
80006060:	40 39       	lddsp	r9,sp[0xc]
80006062:	12 16       	sub	r6,r9
80006064:	58 06       	cp.w	r6,0
80006066:	e0 89 00 1a 	brgt	8000609a <_vfprintf_r+0x1e6a>
8000606a:	c3 88       	rjmp	800060da <_vfprintf_r+0x1eaa>
8000606c:	2f 09       	sub	r9,-16
8000606e:	2f f8       	sub	r8,-1
80006070:	fb 49 06 90 	st.w	sp[1680],r9
80006074:	87 05       	st.w	r3[0x0],r5
80006076:	87 12       	st.w	r3[0x4],r2
80006078:	fb 48 06 8c 	st.w	sp[1676],r8
8000607c:	58 78       	cp.w	r8,7
8000607e:	e0 89 00 04 	brgt	80006086 <_vfprintf_r+0x1e56>
80006082:	2f 83       	sub	r3,-8
80006084:	c0 98       	rjmp	80006096 <_vfprintf_r+0x1e66>
80006086:	00 9a       	mov	r10,r0
80006088:	02 9b       	mov	r11,r1
8000608a:	08 9c       	mov	r12,r4
8000608c:	fe b0 f0 c4 	rcall	80004214 <__sprint_r>
80006090:	c4 f1       	brne	8000612e <_vfprintf_r+0x1efe>
80006092:	fa c3 f9 e0 	sub	r3,sp,-1568
80006096:	21 06       	sub	r6,16
80006098:	c0 68       	rjmp	800060a4 <_vfprintf_r+0x1e74>
8000609a:	fe c5 c6 0a 	sub	r5,pc,-14838
8000609e:	31 02       	mov	r2,16
800060a0:	fa c0 f9 78 	sub	r0,sp,-1672
800060a4:	fa f9 06 90 	ld.w	r9,sp[1680]
800060a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060ac:	fe ca c6 1c 	sub	r10,pc,-14820
800060b0:	59 06       	cp.w	r6,16
800060b2:	fe 99 ff dd 	brgt	8000606c <_vfprintf_r+0x1e3c>
800060b6:	0c 09       	add	r9,r6
800060b8:	2f f8       	sub	r8,-1
800060ba:	87 0a       	st.w	r3[0x0],r10
800060bc:	87 16       	st.w	r3[0x4],r6
800060be:	fb 49 06 90 	st.w	sp[1680],r9
800060c2:	fb 48 06 8c 	st.w	sp[1676],r8
800060c6:	58 78       	cp.w	r8,7
800060c8:	e0 8a 00 09 	brle	800060da <_vfprintf_r+0x1eaa>
800060cc:	fa ca f9 78 	sub	r10,sp,-1672
800060d0:	02 9b       	mov	r11,r1
800060d2:	08 9c       	mov	r12,r4
800060d4:	fe b0 f0 a0 	rcall	80004214 <__sprint_r>
800060d8:	c2 b1       	brne	8000612e <_vfprintf_r+0x1efe>
800060da:	40 bc       	lddsp	r12,sp[0x2c]
800060dc:	40 36       	lddsp	r6,sp[0xc]
800060de:	40 8e       	lddsp	lr,sp[0x20]
800060e0:	ec 0e 0c 48 	max	r8,r6,lr
800060e4:	10 0c       	add	r12,r8
800060e6:	50 bc       	stdsp	sp[0x2c],r12
800060e8:	fa f8 06 90 	ld.w	r8,sp[1680]
800060ec:	58 08       	cp.w	r8,0
800060ee:	c0 80       	breq	800060fe <_vfprintf_r+0x1ece>
800060f0:	fa ca f9 78 	sub	r10,sp,-1672
800060f4:	02 9b       	mov	r11,r1
800060f6:	08 9c       	mov	r12,r4
800060f8:	fe b0 f0 8e 	rcall	80004214 <__sprint_r>
800060fc:	c1 91       	brne	8000612e <_vfprintf_r+0x1efe>
800060fe:	30 0b       	mov	r11,0
80006100:	fa c3 f9 e0 	sub	r3,sp,-1568
80006104:	fb 4b 06 8c 	st.w	sp[1676],r11
80006108:	fe 9f f1 22 	bral	8000434c <_vfprintf_r+0x11c>
8000610c:	08 95       	mov	r5,r4
8000610e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006112:	58 08       	cp.w	r8,0
80006114:	c0 80       	breq	80006124 <_vfprintf_r+0x1ef4>
80006116:	08 9c       	mov	r12,r4
80006118:	fa ca f9 78 	sub	r10,sp,-1672
8000611c:	02 9b       	mov	r11,r1
8000611e:	fe b0 f0 7b 	rcall	80004214 <__sprint_r>
80006122:	c0 61       	brne	8000612e <_vfprintf_r+0x1efe>
80006124:	30 08       	mov	r8,0
80006126:	fb 48 06 8c 	st.w	sp[1676],r8
8000612a:	c0 28       	rjmp	8000612e <_vfprintf_r+0x1efe>
8000612c:	40 41       	lddsp	r1,sp[0x10]
8000612e:	82 68       	ld.sh	r8,r1[0xc]
80006130:	ed b8 00 06 	bld	r8,0x6
80006134:	c0 31       	brne	8000613a <_vfprintf_r+0x1f0a>
80006136:	3f fa       	mov	r10,-1
80006138:	50 ba       	stdsp	sp[0x2c],r10
8000613a:	40 bc       	lddsp	r12,sp[0x2c]
8000613c:	fe 3d f9 44 	sub	sp,-1724
80006140:	d8 32       	popm	r0-r7,pc
80006142:	d7 03       	nop

80006144 <__swsetup_r>:
80006144:	d4 21       	pushm	r4-r7,lr
80006146:	e0 68 01 04 	mov	r8,260
8000614a:	18 96       	mov	r6,r12
8000614c:	16 97       	mov	r7,r11
8000614e:	70 0c       	ld.w	r12,r8[0x0]
80006150:	58 0c       	cp.w	r12,0
80006152:	c0 60       	breq	8000615e <__swsetup_r+0x1a>
80006154:	78 68       	ld.w	r8,r12[0x18]
80006156:	58 08       	cp.w	r8,0
80006158:	c0 31       	brne	8000615e <__swsetup_r+0x1a>
8000615a:	e0 a0 07 b9 	rcall	800070cc <__sinit>
8000615e:	fe c8 c5 9e 	sub	r8,pc,-14946
80006162:	10 37       	cp.w	r7,r8
80006164:	c0 61       	brne	80006170 <__swsetup_r+0x2c>
80006166:	e0 68 01 04 	mov	r8,260
8000616a:	70 08       	ld.w	r8,r8[0x0]
8000616c:	70 07       	ld.w	r7,r8[0x0]
8000616e:	c1 28       	rjmp	80006192 <__swsetup_r+0x4e>
80006170:	fe c8 c5 90 	sub	r8,pc,-14960
80006174:	10 37       	cp.w	r7,r8
80006176:	c0 61       	brne	80006182 <__swsetup_r+0x3e>
80006178:	e0 68 01 04 	mov	r8,260
8000617c:	70 08       	ld.w	r8,r8[0x0]
8000617e:	70 17       	ld.w	r7,r8[0x4]
80006180:	c0 98       	rjmp	80006192 <__swsetup_r+0x4e>
80006182:	fe c8 c5 82 	sub	r8,pc,-14974
80006186:	10 37       	cp.w	r7,r8
80006188:	c0 51       	brne	80006192 <__swsetup_r+0x4e>
8000618a:	e0 68 01 04 	mov	r8,260
8000618e:	70 08       	ld.w	r8,r8[0x0]
80006190:	70 27       	ld.w	r7,r8[0x8]
80006192:	8e 68       	ld.sh	r8,r7[0xc]
80006194:	ed b8 00 03 	bld	r8,0x3
80006198:	c1 e0       	breq	800061d4 <__swsetup_r+0x90>
8000619a:	ed b8 00 04 	bld	r8,0x4
8000619e:	c3 e1       	brne	8000621a <__swsetup_r+0xd6>
800061a0:	ed b8 00 02 	bld	r8,0x2
800061a4:	c1 51       	brne	800061ce <__swsetup_r+0x8a>
800061a6:	6e db       	ld.w	r11,r7[0x34]
800061a8:	58 0b       	cp.w	r11,0
800061aa:	c0 a0       	breq	800061be <__swsetup_r+0x7a>
800061ac:	ee c8 ff bc 	sub	r8,r7,-68
800061b0:	10 3b       	cp.w	r11,r8
800061b2:	c0 40       	breq	800061ba <__swsetup_r+0x76>
800061b4:	0c 9c       	mov	r12,r6
800061b6:	e0 a0 08 25 	rcall	80007200 <_free_r>
800061ba:	30 08       	mov	r8,0
800061bc:	8f d8       	st.w	r7[0x34],r8
800061be:	8e 68       	ld.sh	r8,r7[0xc]
800061c0:	e0 18 ff db 	andl	r8,0xffdb
800061c4:	ae 68       	st.h	r7[0xc],r8
800061c6:	30 08       	mov	r8,0
800061c8:	8f 18       	st.w	r7[0x4],r8
800061ca:	6e 48       	ld.w	r8,r7[0x10]
800061cc:	8f 08       	st.w	r7[0x0],r8
800061ce:	8e 68       	ld.sh	r8,r7[0xc]
800061d0:	a3 b8       	sbr	r8,0x3
800061d2:	ae 68       	st.h	r7[0xc],r8
800061d4:	6e 48       	ld.w	r8,r7[0x10]
800061d6:	58 08       	cp.w	r8,0
800061d8:	c0 b1       	brne	800061ee <__swsetup_r+0xaa>
800061da:	8e 68       	ld.sh	r8,r7[0xc]
800061dc:	e2 18 02 80 	andl	r8,0x280,COH
800061e0:	e0 48 02 00 	cp.w	r8,512
800061e4:	c0 50       	breq	800061ee <__swsetup_r+0xaa>
800061e6:	0c 9c       	mov	r12,r6
800061e8:	0e 9b       	mov	r11,r7
800061ea:	e0 a0 0a 4b 	rcall	80007680 <__smakebuf_r>
800061ee:	8e 69       	ld.sh	r9,r7[0xc]
800061f0:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800061f4:	c0 70       	breq	80006202 <__swsetup_r+0xbe>
800061f6:	30 08       	mov	r8,0
800061f8:	8f 28       	st.w	r7[0x8],r8
800061fa:	6e 58       	ld.w	r8,r7[0x14]
800061fc:	5c 38       	neg	r8
800061fe:	8f 68       	st.w	r7[0x18],r8
80006200:	c0 68       	rjmp	8000620c <__swsetup_r+0xc8>
80006202:	ed b9 00 01 	bld	r9,0x1
80006206:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000620a:	8f 28       	st.w	r7[0x8],r8
8000620c:	6e 48       	ld.w	r8,r7[0x10]
8000620e:	58 08       	cp.w	r8,0
80006210:	c0 61       	brne	8000621c <__swsetup_r+0xd8>
80006212:	8e 68       	ld.sh	r8,r7[0xc]
80006214:	ed b8 00 07 	bld	r8,0x7
80006218:	c0 21       	brne	8000621c <__swsetup_r+0xd8>
8000621a:	dc 2a       	popm	r4-r7,pc,r12=-1
8000621c:	d8 2a       	popm	r4-r7,pc,r12=0
8000621e:	d7 03       	nop

80006220 <quorem>:
80006220:	d4 31       	pushm	r0-r7,lr
80006222:	20 2d       	sub	sp,8
80006224:	18 97       	mov	r7,r12
80006226:	78 48       	ld.w	r8,r12[0x10]
80006228:	76 46       	ld.w	r6,r11[0x10]
8000622a:	0c 38       	cp.w	r8,r6
8000622c:	c0 34       	brge	80006232 <quorem+0x12>
8000622e:	30 0c       	mov	r12,0
80006230:	c8 58       	rjmp	8000633a <quorem+0x11a>
80006232:	ec c2 ff fc 	sub	r2,r6,-4
80006236:	f6 c3 ff ec 	sub	r3,r11,-20
8000623a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000623e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006242:	2f f9       	sub	r9,-1
80006244:	20 16       	sub	r6,1
80006246:	f8 09 0d 08 	divu	r8,r12,r9
8000624a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000624e:	ee c4 ff ec 	sub	r4,r7,-20
80006252:	10 95       	mov	r5,r8
80006254:	58 08       	cp.w	r8,0
80006256:	c4 10       	breq	800062d8 <quorem+0xb8>
80006258:	30 09       	mov	r9,0
8000625a:	06 9a       	mov	r10,r3
8000625c:	08 98       	mov	r8,r4
8000625e:	12 91       	mov	r1,r9
80006260:	50 0b       	stdsp	sp[0x0],r11
80006262:	70 0e       	ld.w	lr,r8[0x0]
80006264:	b1 8e       	lsr	lr,0x10
80006266:	50 1e       	stdsp	sp[0x4],lr
80006268:	15 0e       	ld.w	lr,r10++
8000626a:	fc 00 16 10 	lsr	r0,lr,0x10
8000626e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80006272:	ea 0e 03 41 	mac	r1,r5,lr
80006276:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000627a:	b1 81       	lsr	r1,0x10
8000627c:	40 1b       	lddsp	r11,sp[0x4]
8000627e:	ea 00 02 40 	mul	r0,r5,r0
80006282:	e2 00 00 00 	add	r0,r1,r0
80006286:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000628a:	02 1b       	sub	r11,r1
8000628c:	50 1b       	stdsp	sp[0x4],r11
8000628e:	70 0b       	ld.w	r11,r8[0x0]
80006290:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006294:	02 09       	add	r9,r1
80006296:	f2 0e 01 0e 	sub	lr,r9,lr
8000629a:	b0 1e       	st.h	r8[0x2],lr
8000629c:	fc 09 14 10 	asr	r9,lr,0x10
800062a0:	40 1e       	lddsp	lr,sp[0x4]
800062a2:	fc 09 00 09 	add	r9,lr,r9
800062a6:	b0 09       	st.h	r8[0x0],r9
800062a8:	e0 01 16 10 	lsr	r1,r0,0x10
800062ac:	2f c8       	sub	r8,-4
800062ae:	b1 49       	asr	r9,0x10
800062b0:	04 3a       	cp.w	r10,r2
800062b2:	fe 98 ff d8 	brls	80006262 <quorem+0x42>
800062b6:	40 0b       	lddsp	r11,sp[0x0]
800062b8:	58 0c       	cp.w	r12,0
800062ba:	c0 f1       	brne	800062d8 <quorem+0xb8>
800062bc:	ec c8 ff fb 	sub	r8,r6,-5
800062c0:	ee 08 00 28 	add	r8,r7,r8<<0x2
800062c4:	c0 28       	rjmp	800062c8 <quorem+0xa8>
800062c6:	20 16       	sub	r6,1
800062c8:	20 48       	sub	r8,4
800062ca:	08 38       	cp.w	r8,r4
800062cc:	e0 88 00 05 	brls	800062d6 <quorem+0xb6>
800062d0:	70 09       	ld.w	r9,r8[0x0]
800062d2:	58 09       	cp.w	r9,0
800062d4:	cf 90       	breq	800062c6 <quorem+0xa6>
800062d6:	8f 46       	st.w	r7[0x10],r6
800062d8:	0e 9c       	mov	r12,r7
800062da:	e0 a0 0c fb 	rcall	80007cd0 <__mcmp>
800062de:	c2 d5       	brlt	80006338 <quorem+0x118>
800062e0:	2f f5       	sub	r5,-1
800062e2:	08 98       	mov	r8,r4
800062e4:	30 09       	mov	r9,0
800062e6:	07 0b       	ld.w	r11,r3++
800062e8:	f6 0a 16 10 	lsr	r10,r11,0x10
800062ec:	70 0c       	ld.w	r12,r8[0x0]
800062ee:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800062f2:	f8 0e 16 10 	lsr	lr,r12,0x10
800062f6:	14 1e       	sub	lr,r10
800062f8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800062fc:	16 1a       	sub	r10,r11
800062fe:	12 0a       	add	r10,r9
80006300:	b0 1a       	st.h	r8[0x2],r10
80006302:	b1 4a       	asr	r10,0x10
80006304:	fc 0a 00 09 	add	r9,lr,r10
80006308:	b0 09       	st.h	r8[0x0],r9
8000630a:	2f c8       	sub	r8,-4
8000630c:	b1 49       	asr	r9,0x10
8000630e:	04 33       	cp.w	r3,r2
80006310:	fe 98 ff eb 	brls	800062e6 <quorem+0xc6>
80006314:	ec c8 ff fb 	sub	r8,r6,-5
80006318:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000631c:	58 09       	cp.w	r9,0
8000631e:	c0 d1       	brne	80006338 <quorem+0x118>
80006320:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006324:	c0 28       	rjmp	80006328 <quorem+0x108>
80006326:	20 16       	sub	r6,1
80006328:	20 48       	sub	r8,4
8000632a:	08 38       	cp.w	r8,r4
8000632c:	e0 88 00 05 	brls	80006336 <quorem+0x116>
80006330:	70 09       	ld.w	r9,r8[0x0]
80006332:	58 09       	cp.w	r9,0
80006334:	cf 90       	breq	80006326 <quorem+0x106>
80006336:	8f 46       	st.w	r7[0x10],r6
80006338:	0a 9c       	mov	r12,r5
8000633a:	2f ed       	sub	sp,-8
8000633c:	d8 32       	popm	r0-r7,pc
8000633e:	d7 03       	nop

80006340 <_dtoa_r>:
80006340:	d4 31       	pushm	r0-r7,lr
80006342:	21 ad       	sub	sp,104
80006344:	fa c4 ff 74 	sub	r4,sp,-140
80006348:	18 97       	mov	r7,r12
8000634a:	16 95       	mov	r5,r11
8000634c:	68 2c       	ld.w	r12,r4[0x8]
8000634e:	50 c9       	stdsp	sp[0x30],r9
80006350:	68 16       	ld.w	r6,r4[0x4]
80006352:	68 09       	ld.w	r9,r4[0x0]
80006354:	50 e8       	stdsp	sp[0x38],r8
80006356:	14 94       	mov	r4,r10
80006358:	51 2c       	stdsp	sp[0x48],r12
8000635a:	fa e5 00 08 	st.d	sp[8],r4
8000635e:	51 59       	stdsp	sp[0x54],r9
80006360:	6e 95       	ld.w	r5,r7[0x24]
80006362:	58 05       	cp.w	r5,0
80006364:	c0 91       	brne	80006376 <_dtoa_r+0x36>
80006366:	31 0c       	mov	r12,16
80006368:	e0 a0 09 ea 	rcall	8000773c <malloc>
8000636c:	99 35       	st.w	r12[0xc],r5
8000636e:	8f 9c       	st.w	r7[0x24],r12
80006370:	99 15       	st.w	r12[0x4],r5
80006372:	99 25       	st.w	r12[0x8],r5
80006374:	99 05       	st.w	r12[0x0],r5
80006376:	6e 99       	ld.w	r9,r7[0x24]
80006378:	72 08       	ld.w	r8,r9[0x0]
8000637a:	58 08       	cp.w	r8,0
8000637c:	c0 f0       	breq	8000639a <_dtoa_r+0x5a>
8000637e:	72 1a       	ld.w	r10,r9[0x4]
80006380:	91 1a       	st.w	r8[0x4],r10
80006382:	30 1a       	mov	r10,1
80006384:	72 19       	ld.w	r9,r9[0x4]
80006386:	f4 09 09 49 	lsl	r9,r10,r9
8000638a:	10 9b       	mov	r11,r8
8000638c:	91 29       	st.w	r8[0x8],r9
8000638e:	0e 9c       	mov	r12,r7
80006390:	e0 a0 0c ba 	rcall	80007d04 <_Bfree>
80006394:	6e 98       	ld.w	r8,r7[0x24]
80006396:	30 09       	mov	r9,0
80006398:	91 09       	st.w	r8[0x0],r9
8000639a:	40 28       	lddsp	r8,sp[0x8]
8000639c:	10 94       	mov	r4,r8
8000639e:	58 08       	cp.w	r8,0
800063a0:	c0 64       	brge	800063ac <_dtoa_r+0x6c>
800063a2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800063a6:	50 28       	stdsp	sp[0x8],r8
800063a8:	30 18       	mov	r8,1
800063aa:	c0 28       	rjmp	800063ae <_dtoa_r+0x6e>
800063ac:	30 08       	mov	r8,0
800063ae:	8d 08       	st.w	r6[0x0],r8
800063b0:	fc 1c 7f f0 	movh	r12,0x7ff0
800063b4:	40 26       	lddsp	r6,sp[0x8]
800063b6:	0c 98       	mov	r8,r6
800063b8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800063bc:	18 38       	cp.w	r8,r12
800063be:	c2 01       	brne	800063fe <_dtoa_r+0xbe>
800063c0:	e0 68 27 0f 	mov	r8,9999
800063c4:	41 5b       	lddsp	r11,sp[0x54]
800063c6:	97 08       	st.w	r11[0x0],r8
800063c8:	40 3a       	lddsp	r10,sp[0xc]
800063ca:	58 0a       	cp.w	r10,0
800063cc:	c0 71       	brne	800063da <_dtoa_r+0x9a>
800063ce:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800063d2:	c0 41       	brne	800063da <_dtoa_r+0x9a>
800063d4:	fe cc c8 24 	sub	r12,pc,-14300
800063d8:	c0 38       	rjmp	800063de <_dtoa_r+0x9e>
800063da:	fe cc c8 1e 	sub	r12,pc,-14306
800063de:	41 29       	lddsp	r9,sp[0x48]
800063e0:	58 09       	cp.w	r9,0
800063e2:	e0 80 05 9a 	breq	80006f16 <_dtoa_r+0xbd6>
800063e6:	f8 c8 ff fd 	sub	r8,r12,-3
800063ea:	f8 c9 ff f8 	sub	r9,r12,-8
800063ee:	11 8b       	ld.ub	r11,r8[0x0]
800063f0:	30 0a       	mov	r10,0
800063f2:	41 25       	lddsp	r5,sp[0x48]
800063f4:	f4 0b 18 00 	cp.b	r11,r10
800063f8:	f2 08 17 10 	movne	r8,r9
800063fc:	c1 68       	rjmp	80006428 <_dtoa_r+0xe8>
800063fe:	fa ea 00 08 	ld.d	r10,sp[8]
80006402:	30 08       	mov	r8,0
80006404:	fa eb 00 3c 	st.d	sp[60],r10
80006408:	30 09       	mov	r9,0
8000640a:	e0 a0 13 88 	rcall	80008b1a <__avr32_f64_cmp_eq>
8000640e:	c1 00       	breq	8000642e <_dtoa_r+0xee>
80006410:	30 18       	mov	r8,1
80006412:	41 5a       	lddsp	r10,sp[0x54]
80006414:	95 08       	st.w	r10[0x0],r8
80006416:	fe cc c9 8a 	sub	r12,pc,-13942
8000641a:	41 29       	lddsp	r9,sp[0x48]
8000641c:	f8 08 00 08 	add	r8,r12,r8
80006420:	58 09       	cp.w	r9,0
80006422:	e0 80 05 7a 	breq	80006f16 <_dtoa_r+0xbd6>
80006426:	12 95       	mov	r5,r9
80006428:	8b 08       	st.w	r5[0x0],r8
8000642a:	e0 8f 05 76 	bral	80006f16 <_dtoa_r+0xbd6>
8000642e:	fa c8 ff 9c 	sub	r8,sp,-100
80006432:	fa c9 ff a0 	sub	r9,sp,-96
80006436:	fa ea 00 3c 	ld.d	r10,sp[60]
8000643a:	0e 9c       	mov	r12,r7
8000643c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006440:	e0 a0 0c b4 	rcall	80007da8 <__d2b>
80006444:	18 93       	mov	r3,r12
80006446:	58 05       	cp.w	r5,0
80006448:	c0 d0       	breq	80006462 <_dtoa_r+0x122>
8000644a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000644e:	30 04       	mov	r4,0
80006450:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006454:	ea c5 03 ff 	sub	r5,r5,1023
80006458:	10 9b       	mov	r11,r8
8000645a:	51 74       	stdsp	sp[0x5c],r4
8000645c:	ea 1b 3f f0 	orh	r11,0x3ff0
80006460:	c2 58       	rjmp	800064aa <_dtoa_r+0x16a>
80006462:	41 88       	lddsp	r8,sp[0x60]
80006464:	41 9c       	lddsp	r12,sp[0x64]
80006466:	10 0c       	add	r12,r8
80006468:	f8 c5 fb ce 	sub	r5,r12,-1074
8000646c:	e0 45 00 20 	cp.w	r5,32
80006470:	e0 8a 00 0e 	brle	8000648c <_dtoa_r+0x14c>
80006474:	f8 cc fb ee 	sub	r12,r12,-1042
80006478:	40 3b       	lddsp	r11,sp[0xc]
8000647a:	ea 08 11 40 	rsub	r8,r5,64
8000647e:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006482:	ec 08 09 46 	lsl	r6,r6,r8
80006486:	0c 4c       	or	r12,r6
80006488:	c0 78       	rjmp	80006496 <_dtoa_r+0x156>
8000648a:	d7 03       	nop
8000648c:	ea 0c 11 20 	rsub	r12,r5,32
80006490:	40 3a       	lddsp	r10,sp[0xc]
80006492:	f4 0c 09 4c 	lsl	r12,r10,r12
80006496:	fe b0 eb c9 	rcall	80003c28 <__avr32_u32_to_f64>
8000649a:	fc 18 fe 10 	movh	r8,0xfe10
8000649e:	30 19       	mov	r9,1
800064a0:	ea c5 04 33 	sub	r5,r5,1075
800064a4:	f0 0b 00 0b 	add	r11,r8,r11
800064a8:	51 79       	stdsp	sp[0x5c],r9
800064aa:	30 08       	mov	r8,0
800064ac:	fc 19 3f f8 	movh	r9,0x3ff8
800064b0:	e0 a0 11 ca 	rcall	80008844 <__avr32_f64_sub>
800064b4:	e0 68 43 61 	mov	r8,17249
800064b8:	ea 18 63 6f 	orh	r8,0x636f
800064bc:	e0 69 87 a7 	mov	r9,34727
800064c0:	ea 19 3f d2 	orh	r9,0x3fd2
800064c4:	fe b0 ea c8 	rcall	80003a54 <__avr32_f64_mul>
800064c8:	e0 68 c8 b3 	mov	r8,51379
800064cc:	ea 18 8b 60 	orh	r8,0x8b60
800064d0:	e0 69 8a 28 	mov	r9,35368
800064d4:	ea 19 3f c6 	orh	r9,0x3fc6
800064d8:	e0 a0 12 84 	rcall	800089e0 <__avr32_f64_add>
800064dc:	0a 9c       	mov	r12,r5
800064de:	14 90       	mov	r0,r10
800064e0:	16 91       	mov	r1,r11
800064e2:	fe b0 eb a7 	rcall	80003c30 <__avr32_s32_to_f64>
800064e6:	e0 68 79 fb 	mov	r8,31227
800064ea:	ea 18 50 9f 	orh	r8,0x509f
800064ee:	e0 69 44 13 	mov	r9,17427
800064f2:	ea 19 3f d3 	orh	r9,0x3fd3
800064f6:	fe b0 ea af 	rcall	80003a54 <__avr32_f64_mul>
800064fa:	14 98       	mov	r8,r10
800064fc:	16 99       	mov	r9,r11
800064fe:	00 9a       	mov	r10,r0
80006500:	02 9b       	mov	r11,r1
80006502:	e0 a0 12 6f 	rcall	800089e0 <__avr32_f64_add>
80006506:	14 90       	mov	r0,r10
80006508:	16 91       	mov	r1,r11
8000650a:	e0 a0 12 f5 	rcall	80008af4 <__avr32_f64_to_s32>
8000650e:	30 08       	mov	r8,0
80006510:	18 96       	mov	r6,r12
80006512:	30 09       	mov	r9,0
80006514:	00 9a       	mov	r10,r0
80006516:	02 9b       	mov	r11,r1
80006518:	fe b0 eb fc 	rcall	80003d10 <__avr32_f64_cmp_lt>
8000651c:	c0 c0       	breq	80006534 <_dtoa_r+0x1f4>
8000651e:	0c 9c       	mov	r12,r6
80006520:	fe b0 eb 88 	rcall	80003c30 <__avr32_s32_to_f64>
80006524:	14 98       	mov	r8,r10
80006526:	16 99       	mov	r9,r11
80006528:	00 9a       	mov	r10,r0
8000652a:	02 9b       	mov	r11,r1
8000652c:	e0 a0 12 f7 	rcall	80008b1a <__avr32_f64_cmp_eq>
80006530:	f7 b6 00 01 	subeq	r6,1
80006534:	59 66       	cp.w	r6,22
80006536:	e0 88 00 05 	brls	80006540 <_dtoa_r+0x200>
8000653a:	30 18       	mov	r8,1
8000653c:	51 48       	stdsp	sp[0x50],r8
8000653e:	c1 38       	rjmp	80006564 <_dtoa_r+0x224>
80006540:	fe c8 c8 d4 	sub	r8,pc,-14124
80006544:	fa ea 00 3c 	ld.d	r10,sp[60]
80006548:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000654c:	fe b0 eb e2 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006550:	f9 b4 00 00 	moveq	r4,0
80006554:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006558:	f7 b6 01 01 	subne	r6,1
8000655c:	f9 bc 01 00 	movne	r12,0
80006560:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006564:	41 90       	lddsp	r0,sp[0x64]
80006566:	20 10       	sub	r0,1
80006568:	0a 10       	sub	r0,r5
8000656a:	c0 46       	brmi	80006572 <_dtoa_r+0x232>
8000656c:	50 40       	stdsp	sp[0x10],r0
8000656e:	30 00       	mov	r0,0
80006570:	c0 48       	rjmp	80006578 <_dtoa_r+0x238>
80006572:	30 0b       	mov	r11,0
80006574:	5c 30       	neg	r0
80006576:	50 4b       	stdsp	sp[0x10],r11
80006578:	ec 02 11 00 	rsub	r2,r6,0
8000657c:	58 06       	cp.w	r6,0
8000657e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006582:	f5 d6 e4 0a 	addge	r10,r10,r6
80006586:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000658a:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000658e:	f9 b2 04 00 	movge	r2,0
80006592:	e1 d6 e5 10 	sublt	r0,r0,r6
80006596:	f9 b9 05 00 	movlt	r9,0
8000659a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000659e:	40 c8       	lddsp	r8,sp[0x30]
800065a0:	58 98       	cp.w	r8,9
800065a2:	e0 8b 00 20 	brhi	800065e2 <_dtoa_r+0x2a2>
800065a6:	58 58       	cp.w	r8,5
800065a8:	f9 b4 0a 01 	movle	r4,1
800065ac:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800065b0:	f7 b5 09 04 	subgt	r5,4
800065b4:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800065b8:	f9 b4 09 00 	movgt	r4,0
800065bc:	40 cc       	lddsp	r12,sp[0x30]
800065be:	58 3c       	cp.w	r12,3
800065c0:	c2 d0       	breq	8000661a <_dtoa_r+0x2da>
800065c2:	e0 89 00 05 	brgt	800065cc <_dtoa_r+0x28c>
800065c6:	58 2c       	cp.w	r12,2
800065c8:	c1 01       	brne	800065e8 <_dtoa_r+0x2a8>
800065ca:	c1 88       	rjmp	800065fa <_dtoa_r+0x2ba>
800065cc:	40 cb       	lddsp	r11,sp[0x30]
800065ce:	58 4b       	cp.w	r11,4
800065d0:	c0 60       	breq	800065dc <_dtoa_r+0x29c>
800065d2:	58 5b       	cp.w	r11,5
800065d4:	c0 a1       	brne	800065e8 <_dtoa_r+0x2a8>
800065d6:	30 1a       	mov	r10,1
800065d8:	50 da       	stdsp	sp[0x34],r10
800065da:	c2 28       	rjmp	8000661e <_dtoa_r+0x2de>
800065dc:	30 19       	mov	r9,1
800065de:	50 d9       	stdsp	sp[0x34],r9
800065e0:	c0 f8       	rjmp	800065fe <_dtoa_r+0x2be>
800065e2:	30 08       	mov	r8,0
800065e4:	30 14       	mov	r4,1
800065e6:	50 c8       	stdsp	sp[0x30],r8
800065e8:	3f f5       	mov	r5,-1
800065ea:	30 1c       	mov	r12,1
800065ec:	30 0b       	mov	r11,0
800065ee:	50 95       	stdsp	sp[0x24],r5
800065f0:	50 dc       	stdsp	sp[0x34],r12
800065f2:	0a 91       	mov	r1,r5
800065f4:	31 28       	mov	r8,18
800065f6:	50 eb       	stdsp	sp[0x38],r11
800065f8:	c2 08       	rjmp	80006638 <_dtoa_r+0x2f8>
800065fa:	30 0a       	mov	r10,0
800065fc:	50 da       	stdsp	sp[0x34],r10
800065fe:	40 e9       	lddsp	r9,sp[0x38]
80006600:	58 09       	cp.w	r9,0
80006602:	e0 89 00 07 	brgt	80006610 <_dtoa_r+0x2d0>
80006606:	30 18       	mov	r8,1
80006608:	50 98       	stdsp	sp[0x24],r8
8000660a:	10 91       	mov	r1,r8
8000660c:	50 e8       	stdsp	sp[0x38],r8
8000660e:	c1 58       	rjmp	80006638 <_dtoa_r+0x2f8>
80006610:	40 e5       	lddsp	r5,sp[0x38]
80006612:	50 95       	stdsp	sp[0x24],r5
80006614:	0a 91       	mov	r1,r5
80006616:	0a 98       	mov	r8,r5
80006618:	c1 08       	rjmp	80006638 <_dtoa_r+0x2f8>
8000661a:	30 0c       	mov	r12,0
8000661c:	50 dc       	stdsp	sp[0x34],r12
8000661e:	40 eb       	lddsp	r11,sp[0x38]
80006620:	ec 0b 00 0b 	add	r11,r6,r11
80006624:	50 9b       	stdsp	sp[0x24],r11
80006626:	16 98       	mov	r8,r11
80006628:	2f f8       	sub	r8,-1
8000662a:	58 08       	cp.w	r8,0
8000662c:	e0 89 00 05 	brgt	80006636 <_dtoa_r+0x2f6>
80006630:	10 91       	mov	r1,r8
80006632:	30 18       	mov	r8,1
80006634:	c0 28       	rjmp	80006638 <_dtoa_r+0x2f8>
80006636:	10 91       	mov	r1,r8
80006638:	30 09       	mov	r9,0
8000663a:	6e 9a       	ld.w	r10,r7[0x24]
8000663c:	95 19       	st.w	r10[0x4],r9
8000663e:	30 49       	mov	r9,4
80006640:	c0 68       	rjmp	8000664c <_dtoa_r+0x30c>
80006642:	d7 03       	nop
80006644:	6a 1a       	ld.w	r10,r5[0x4]
80006646:	a1 79       	lsl	r9,0x1
80006648:	2f fa       	sub	r10,-1
8000664a:	8b 1a       	st.w	r5[0x4],r10
8000664c:	6e 95       	ld.w	r5,r7[0x24]
8000664e:	f2 ca ff ec 	sub	r10,r9,-20
80006652:	10 3a       	cp.w	r10,r8
80006654:	fe 98 ff f8 	brls	80006644 <_dtoa_r+0x304>
80006658:	6a 1b       	ld.w	r11,r5[0x4]
8000665a:	0e 9c       	mov	r12,r7
8000665c:	e0 a0 0b 6e 	rcall	80007d38 <_Balloc>
80006660:	58 e1       	cp.w	r1,14
80006662:	5f 88       	srls	r8
80006664:	8b 0c       	st.w	r5[0x0],r12
80006666:	f1 e4 00 04 	and	r4,r8,r4
8000666a:	6e 98       	ld.w	r8,r7[0x24]
8000666c:	70 08       	ld.w	r8,r8[0x0]
8000666e:	50 88       	stdsp	sp[0x20],r8
80006670:	e0 80 01 82 	breq	80006974 <_dtoa_r+0x634>
80006674:	58 06       	cp.w	r6,0
80006676:	e0 8a 00 43 	brle	800066fc <_dtoa_r+0x3bc>
8000667a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000667e:	fe c8 ca 12 	sub	r8,pc,-13806
80006682:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006686:	fa e5 00 18 	st.d	sp[24],r4
8000668a:	ec 04 14 04 	asr	r4,r6,0x4
8000668e:	ed b4 00 04 	bld	r4,0x4
80006692:	c0 30       	breq	80006698 <_dtoa_r+0x358>
80006694:	30 25       	mov	r5,2
80006696:	c1 08       	rjmp	800066b6 <_dtoa_r+0x376>
80006698:	fe c8 c9 64 	sub	r8,pc,-13980
8000669c:	f0 e8 00 20 	ld.d	r8,r8[32]
800066a0:	fa ea 00 3c 	ld.d	r10,sp[60]
800066a4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800066a8:	e0 a0 12 80 	rcall	80008ba8 <__avr32_f64_div>
800066ac:	30 35       	mov	r5,3
800066ae:	14 98       	mov	r8,r10
800066b0:	16 99       	mov	r9,r11
800066b2:	fa e9 00 08 	st.d	sp[8],r8
800066b6:	fe cc c9 82 	sub	r12,pc,-13950
800066ba:	50 a3       	stdsp	sp[0x28],r3
800066bc:	0c 93       	mov	r3,r6
800066be:	18 96       	mov	r6,r12
800066c0:	c0 f8       	rjmp	800066de <_dtoa_r+0x39e>
800066c2:	fa ea 00 18 	ld.d	r10,sp[24]
800066c6:	ed b4 00 00 	bld	r4,0x0
800066ca:	c0 81       	brne	800066da <_dtoa_r+0x39a>
800066cc:	ec e8 00 00 	ld.d	r8,r6[0]
800066d0:	2f f5       	sub	r5,-1
800066d2:	fe b0 e9 c1 	rcall	80003a54 <__avr32_f64_mul>
800066d6:	fa eb 00 18 	st.d	sp[24],r10
800066da:	a1 54       	asr	r4,0x1
800066dc:	2f 86       	sub	r6,-8
800066de:	58 04       	cp.w	r4,0
800066e0:	cf 11       	brne	800066c2 <_dtoa_r+0x382>
800066e2:	fa e8 00 18 	ld.d	r8,sp[24]
800066e6:	fa ea 00 08 	ld.d	r10,sp[8]
800066ea:	06 96       	mov	r6,r3
800066ec:	e0 a0 12 5e 	rcall	80008ba8 <__avr32_f64_div>
800066f0:	40 a3       	lddsp	r3,sp[0x28]
800066f2:	14 98       	mov	r8,r10
800066f4:	16 99       	mov	r9,r11
800066f6:	fa e9 00 08 	st.d	sp[8],r8
800066fa:	c2 f8       	rjmp	80006758 <_dtoa_r+0x418>
800066fc:	ec 08 11 00 	rsub	r8,r6,0
80006700:	c0 31       	brne	80006706 <_dtoa_r+0x3c6>
80006702:	30 25       	mov	r5,2
80006704:	c2 a8       	rjmp	80006758 <_dtoa_r+0x418>
80006706:	fe cc c9 d2 	sub	r12,pc,-13870
8000670a:	f0 04 14 04 	asr	r4,r8,0x4
8000670e:	50 1c       	stdsp	sp[0x4],r12
80006710:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006714:	fe c9 ca a8 	sub	r9,pc,-13656
80006718:	fa ea 00 3c 	ld.d	r10,sp[60]
8000671c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006720:	fe b0 e9 9a 	rcall	80003a54 <__avr32_f64_mul>
80006724:	40 1c       	lddsp	r12,sp[0x4]
80006726:	50 63       	stdsp	sp[0x18],r3
80006728:	30 25       	mov	r5,2
8000672a:	0c 93       	mov	r3,r6
8000672c:	fa eb 00 08 	st.d	sp[8],r10
80006730:	18 96       	mov	r6,r12
80006732:	c0 f8       	rjmp	80006750 <_dtoa_r+0x410>
80006734:	fa ea 00 08 	ld.d	r10,sp[8]
80006738:	ed b4 00 00 	bld	r4,0x0
8000673c:	c0 81       	brne	8000674c <_dtoa_r+0x40c>
8000673e:	ec e8 00 00 	ld.d	r8,r6[0]
80006742:	2f f5       	sub	r5,-1
80006744:	fe b0 e9 88 	rcall	80003a54 <__avr32_f64_mul>
80006748:	fa eb 00 08 	st.d	sp[8],r10
8000674c:	a1 54       	asr	r4,0x1
8000674e:	2f 86       	sub	r6,-8
80006750:	58 04       	cp.w	r4,0
80006752:	cf 11       	brne	80006734 <_dtoa_r+0x3f4>
80006754:	06 96       	mov	r6,r3
80006756:	40 63       	lddsp	r3,sp[0x18]
80006758:	41 4a       	lddsp	r10,sp[0x50]
8000675a:	58 0a       	cp.w	r10,0
8000675c:	c2 a0       	breq	800067b0 <_dtoa_r+0x470>
8000675e:	fa e8 00 08 	ld.d	r8,sp[8]
80006762:	58 01       	cp.w	r1,0
80006764:	5f 94       	srgt	r4
80006766:	fa e9 00 18 	st.d	sp[24],r8
8000676a:	30 08       	mov	r8,0
8000676c:	fc 19 3f f0 	movh	r9,0x3ff0
80006770:	fa ea 00 18 	ld.d	r10,sp[24]
80006774:	fe b0 ea ce 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006778:	f9 bc 00 00 	moveq	r12,0
8000677c:	f9 bc 01 01 	movne	r12,1
80006780:	e9 ec 00 0c 	and	r12,r4,r12
80006784:	c1 60       	breq	800067b0 <_dtoa_r+0x470>
80006786:	40 98       	lddsp	r8,sp[0x24]
80006788:	58 08       	cp.w	r8,0
8000678a:	e0 8a 00 f1 	brle	8000696c <_dtoa_r+0x62c>
8000678e:	30 08       	mov	r8,0
80006790:	fc 19 40 24 	movh	r9,0x4024
80006794:	ec c4 00 01 	sub	r4,r6,1
80006798:	fa ea 00 18 	ld.d	r10,sp[24]
8000679c:	2f f5       	sub	r5,-1
8000679e:	50 64       	stdsp	sp[0x18],r4
800067a0:	fe b0 e9 5a 	rcall	80003a54 <__avr32_f64_mul>
800067a4:	40 94       	lddsp	r4,sp[0x24]
800067a6:	14 98       	mov	r8,r10
800067a8:	16 99       	mov	r9,r11
800067aa:	fa e9 00 08 	st.d	sp[8],r8
800067ae:	c0 38       	rjmp	800067b4 <_dtoa_r+0x474>
800067b0:	50 66       	stdsp	sp[0x18],r6
800067b2:	02 94       	mov	r4,r1
800067b4:	0a 9c       	mov	r12,r5
800067b6:	fe b0 ea 3d 	rcall	80003c30 <__avr32_s32_to_f64>
800067ba:	fa e8 00 08 	ld.d	r8,sp[8]
800067be:	fe b0 e9 4b 	rcall	80003a54 <__avr32_f64_mul>
800067c2:	30 08       	mov	r8,0
800067c4:	fc 19 40 1c 	movh	r9,0x401c
800067c8:	e0 a0 11 0c 	rcall	800089e0 <__avr32_f64_add>
800067cc:	14 98       	mov	r8,r10
800067ce:	16 99       	mov	r9,r11
800067d0:	fa e9 00 28 	st.d	sp[40],r8
800067d4:	fc 18 fc c0 	movh	r8,0xfcc0
800067d8:	40 a5       	lddsp	r5,sp[0x28]
800067da:	10 05       	add	r5,r8
800067dc:	50 a5       	stdsp	sp[0x28],r5
800067de:	58 04       	cp.w	r4,0
800067e0:	c2 11       	brne	80006822 <_dtoa_r+0x4e2>
800067e2:	fa ea 00 08 	ld.d	r10,sp[8]
800067e6:	30 08       	mov	r8,0
800067e8:	fc 19 40 14 	movh	r9,0x4014
800067ec:	e0 a0 10 2c 	rcall	80008844 <__avr32_f64_sub>
800067f0:	40 bc       	lddsp	r12,sp[0x2c]
800067f2:	fa eb 00 08 	st.d	sp[8],r10
800067f6:	14 98       	mov	r8,r10
800067f8:	16 99       	mov	r9,r11
800067fa:	18 9a       	mov	r10,r12
800067fc:	0a 9b       	mov	r11,r5
800067fe:	fe b0 ea 89 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006802:	e0 81 02 54 	brne	80006caa <_dtoa_r+0x96a>
80006806:	0a 98       	mov	r8,r5
80006808:	40 b9       	lddsp	r9,sp[0x2c]
8000680a:	ee 18 80 00 	eorh	r8,0x8000
8000680e:	fa ea 00 08 	ld.d	r10,sp[8]
80006812:	10 95       	mov	r5,r8
80006814:	12 98       	mov	r8,r9
80006816:	0a 99       	mov	r9,r5
80006818:	fe b0 ea 7c 	rcall	80003d10 <__avr32_f64_cmp_lt>
8000681c:	e0 81 02 3e 	brne	80006c98 <_dtoa_r+0x958>
80006820:	ca 68       	rjmp	8000696c <_dtoa_r+0x62c>
80006822:	fe c9 cb b6 	sub	r9,pc,-13386
80006826:	e8 c8 00 01 	sub	r8,r4,1
8000682a:	40 d5       	lddsp	r5,sp[0x34]
8000682c:	58 05       	cp.w	r5,0
8000682e:	c4 f0       	breq	800068cc <_dtoa_r+0x58c>
80006830:	30 0c       	mov	r12,0
80006832:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006836:	51 3c       	stdsp	sp[0x4c],r12
80006838:	30 0a       	mov	r10,0
8000683a:	fc 1b 3f e0 	movh	r11,0x3fe0
8000683e:	e0 a0 11 b5 	rcall	80008ba8 <__avr32_f64_div>
80006842:	fa e8 00 28 	ld.d	r8,sp[40]
80006846:	40 85       	lddsp	r5,sp[0x20]
80006848:	e0 a0 0f fe 	rcall	80008844 <__avr32_f64_sub>
8000684c:	fa eb 00 28 	st.d	sp[40],r10
80006850:	fa ea 00 08 	ld.d	r10,sp[8]
80006854:	e0 a0 11 50 	rcall	80008af4 <__avr32_f64_to_s32>
80006858:	51 6c       	stdsp	sp[0x58],r12
8000685a:	fe b0 e9 eb 	rcall	80003c30 <__avr32_s32_to_f64>
8000685e:	14 98       	mov	r8,r10
80006860:	16 99       	mov	r9,r11
80006862:	fa ea 00 08 	ld.d	r10,sp[8]
80006866:	e0 a0 0f ef 	rcall	80008844 <__avr32_f64_sub>
8000686a:	fa eb 00 08 	st.d	sp[8],r10
8000686e:	41 68       	lddsp	r8,sp[0x58]
80006870:	2d 08       	sub	r8,-48
80006872:	0a c8       	st.b	r5++,r8
80006874:	41 39       	lddsp	r9,sp[0x4c]
80006876:	2f f9       	sub	r9,-1
80006878:	51 39       	stdsp	sp[0x4c],r9
8000687a:	fa e8 00 28 	ld.d	r8,sp[40]
8000687e:	fe b0 ea 49 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006882:	e0 81 03 39 	brne	80006ef4 <_dtoa_r+0xbb4>
80006886:	fa e8 00 08 	ld.d	r8,sp[8]
8000688a:	30 0a       	mov	r10,0
8000688c:	fc 1b 3f f0 	movh	r11,0x3ff0
80006890:	e0 a0 0f da 	rcall	80008844 <__avr32_f64_sub>
80006894:	fa e8 00 28 	ld.d	r8,sp[40]
80006898:	fe b0 ea 3c 	rcall	80003d10 <__avr32_f64_cmp_lt>
8000689c:	fa ea 00 28 	ld.d	r10,sp[40]
800068a0:	30 08       	mov	r8,0
800068a2:	fc 19 40 24 	movh	r9,0x4024
800068a6:	e0 81 00 da 	brne	80006a5a <_dtoa_r+0x71a>
800068aa:	41 3c       	lddsp	r12,sp[0x4c]
800068ac:	08 3c       	cp.w	r12,r4
800068ae:	c5 f4       	brge	8000696c <_dtoa_r+0x62c>
800068b0:	fe b0 e8 d2 	rcall	80003a54 <__avr32_f64_mul>
800068b4:	30 08       	mov	r8,0
800068b6:	fa eb 00 28 	st.d	sp[40],r10
800068ba:	fc 19 40 24 	movh	r9,0x4024
800068be:	fa ea 00 08 	ld.d	r10,sp[8]
800068c2:	fe b0 e8 c9 	rcall	80003a54 <__avr32_f64_mul>
800068c6:	fa eb 00 08 	st.d	sp[8],r10
800068ca:	cc 3b       	rjmp	80006850 <_dtoa_r+0x510>
800068cc:	40 85       	lddsp	r5,sp[0x20]
800068ce:	08 05       	add	r5,r4
800068d0:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800068d4:	51 35       	stdsp	sp[0x4c],r5
800068d6:	fa e8 00 28 	ld.d	r8,sp[40]
800068da:	40 85       	lddsp	r5,sp[0x20]
800068dc:	fe b0 e8 bc 	rcall	80003a54 <__avr32_f64_mul>
800068e0:	fa eb 00 28 	st.d	sp[40],r10
800068e4:	fa ea 00 08 	ld.d	r10,sp[8]
800068e8:	e0 a0 11 06 	rcall	80008af4 <__avr32_f64_to_s32>
800068ec:	51 6c       	stdsp	sp[0x58],r12
800068ee:	fe b0 e9 a1 	rcall	80003c30 <__avr32_s32_to_f64>
800068f2:	14 98       	mov	r8,r10
800068f4:	16 99       	mov	r9,r11
800068f6:	fa ea 00 08 	ld.d	r10,sp[8]
800068fa:	e0 a0 0f a5 	rcall	80008844 <__avr32_f64_sub>
800068fe:	fa eb 00 08 	st.d	sp[8],r10
80006902:	41 68       	lddsp	r8,sp[0x58]
80006904:	2d 08       	sub	r8,-48
80006906:	0a c8       	st.b	r5++,r8
80006908:	41 3c       	lddsp	r12,sp[0x4c]
8000690a:	18 35       	cp.w	r5,r12
8000690c:	c2 81       	brne	8000695c <_dtoa_r+0x61c>
8000690e:	30 08       	mov	r8,0
80006910:	fc 19 3f e0 	movh	r9,0x3fe0
80006914:	fa ea 00 28 	ld.d	r10,sp[40]
80006918:	e0 a0 10 64 	rcall	800089e0 <__avr32_f64_add>
8000691c:	40 85       	lddsp	r5,sp[0x20]
8000691e:	fa e8 00 08 	ld.d	r8,sp[8]
80006922:	08 05       	add	r5,r4
80006924:	fe b0 e9 f6 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006928:	e0 81 00 99 	brne	80006a5a <_dtoa_r+0x71a>
8000692c:	fa e8 00 28 	ld.d	r8,sp[40]
80006930:	30 0a       	mov	r10,0
80006932:	fc 1b 3f e0 	movh	r11,0x3fe0
80006936:	e0 a0 0f 87 	rcall	80008844 <__avr32_f64_sub>
8000693a:	14 98       	mov	r8,r10
8000693c:	16 99       	mov	r9,r11
8000693e:	fa ea 00 08 	ld.d	r10,sp[8]
80006942:	fe b0 e9 e7 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006946:	c1 30       	breq	8000696c <_dtoa_r+0x62c>
80006948:	33 09       	mov	r9,48
8000694a:	0a 98       	mov	r8,r5
8000694c:	11 7a       	ld.ub	r10,--r8
8000694e:	f2 0a 18 00 	cp.b	r10,r9
80006952:	e0 81 02 d1 	brne	80006ef4 <_dtoa_r+0xbb4>
80006956:	10 95       	mov	r5,r8
80006958:	cf 9b       	rjmp	8000694a <_dtoa_r+0x60a>
8000695a:	d7 03       	nop
8000695c:	30 08       	mov	r8,0
8000695e:	fc 19 40 24 	movh	r9,0x4024
80006962:	fe b0 e8 79 	rcall	80003a54 <__avr32_f64_mul>
80006966:	fa eb 00 08 	st.d	sp[8],r10
8000696a:	cb db       	rjmp	800068e4 <_dtoa_r+0x5a4>
8000696c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006970:	fa eb 00 08 	st.d	sp[8],r10
80006974:	58 e6       	cp.w	r6,14
80006976:	5f ab       	srle	r11
80006978:	41 8a       	lddsp	r10,sp[0x60]
8000697a:	30 08       	mov	r8,0
8000697c:	f4 09 11 ff 	rsub	r9,r10,-1
80006980:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006984:	f0 09 18 00 	cp.b	r9,r8
80006988:	e0 80 00 82 	breq	80006a8c <_dtoa_r+0x74c>
8000698c:	40 ea       	lddsp	r10,sp[0x38]
8000698e:	58 01       	cp.w	r1,0
80006990:	5f a9       	srle	r9
80006992:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006996:	fe ca cd 2a 	sub	r10,pc,-13014
8000699a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000699e:	fa e5 00 10 	st.d	sp[16],r4
800069a2:	f0 09 18 00 	cp.b	r9,r8
800069a6:	c1 40       	breq	800069ce <_dtoa_r+0x68e>
800069a8:	58 01       	cp.w	r1,0
800069aa:	e0 81 01 77 	brne	80006c98 <_dtoa_r+0x958>
800069ae:	30 08       	mov	r8,0
800069b0:	fc 19 40 14 	movh	r9,0x4014
800069b4:	08 9a       	mov	r10,r4
800069b6:	0a 9b       	mov	r11,r5
800069b8:	fe b0 e8 4e 	rcall	80003a54 <__avr32_f64_mul>
800069bc:	fa e8 00 08 	ld.d	r8,sp[8]
800069c0:	e0 a0 10 c0 	rcall	80008b40 <__avr32_f64_cmp_ge>
800069c4:	e0 81 01 6a 	brne	80006c98 <_dtoa_r+0x958>
800069c8:	02 92       	mov	r2,r1
800069ca:	e0 8f 01 72 	bral	80006cae <_dtoa_r+0x96e>
800069ce:	40 85       	lddsp	r5,sp[0x20]
800069d0:	30 14       	mov	r4,1
800069d2:	fa e8 00 10 	ld.d	r8,sp[16]
800069d6:	fa ea 00 08 	ld.d	r10,sp[8]
800069da:	e0 a0 10 e7 	rcall	80008ba8 <__avr32_f64_div>
800069de:	e0 a0 10 8b 	rcall	80008af4 <__avr32_f64_to_s32>
800069e2:	18 92       	mov	r2,r12
800069e4:	fe b0 e9 26 	rcall	80003c30 <__avr32_s32_to_f64>
800069e8:	fa e8 00 10 	ld.d	r8,sp[16]
800069ec:	fe b0 e8 34 	rcall	80003a54 <__avr32_f64_mul>
800069f0:	14 98       	mov	r8,r10
800069f2:	16 99       	mov	r9,r11
800069f4:	fa ea 00 08 	ld.d	r10,sp[8]
800069f8:	e0 a0 0f 26 	rcall	80008844 <__avr32_f64_sub>
800069fc:	fa eb 00 08 	st.d	sp[8],r10
80006a00:	e4 c8 ff d0 	sub	r8,r2,-48
80006a04:	0a c8       	st.b	r5++,r8
80006a06:	fc 19 40 24 	movh	r9,0x4024
80006a0a:	30 08       	mov	r8,0
80006a0c:	02 34       	cp.w	r4,r1
80006a0e:	c3 31       	brne	80006a74 <_dtoa_r+0x734>
80006a10:	fa e8 00 08 	ld.d	r8,sp[8]
80006a14:	e0 a0 0f e6 	rcall	800089e0 <__avr32_f64_add>
80006a18:	16 91       	mov	r1,r11
80006a1a:	14 90       	mov	r0,r10
80006a1c:	14 98       	mov	r8,r10
80006a1e:	02 99       	mov	r9,r1
80006a20:	fa ea 00 10 	ld.d	r10,sp[16]
80006a24:	fe b0 e9 76 	rcall	80003d10 <__avr32_f64_cmp_lt>
80006a28:	c1 a1       	brne	80006a5c <_dtoa_r+0x71c>
80006a2a:	fa e8 00 10 	ld.d	r8,sp[16]
80006a2e:	00 9a       	mov	r10,r0
80006a30:	02 9b       	mov	r11,r1
80006a32:	e0 a0 10 74 	rcall	80008b1a <__avr32_f64_cmp_eq>
80006a36:	e0 80 02 5e 	breq	80006ef2 <_dtoa_r+0xbb2>
80006a3a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80006a3e:	c0 f1       	brne	80006a5c <_dtoa_r+0x71c>
80006a40:	e0 8f 02 59 	bral	80006ef2 <_dtoa_r+0xbb2>
80006a44:	40 8a       	lddsp	r10,sp[0x20]
80006a46:	14 38       	cp.w	r8,r10
80006a48:	c0 30       	breq	80006a4e <_dtoa_r+0x70e>
80006a4a:	10 95       	mov	r5,r8
80006a4c:	c0 98       	rjmp	80006a5e <_dtoa_r+0x71e>
80006a4e:	33 08       	mov	r8,48
80006a50:	40 89       	lddsp	r9,sp[0x20]
80006a52:	2f f6       	sub	r6,-1
80006a54:	b2 88       	st.b	r9[0x0],r8
80006a56:	40 88       	lddsp	r8,sp[0x20]
80006a58:	c0 88       	rjmp	80006a68 <_dtoa_r+0x728>
80006a5a:	40 66       	lddsp	r6,sp[0x18]
80006a5c:	33 99       	mov	r9,57
80006a5e:	0a 98       	mov	r8,r5
80006a60:	11 7a       	ld.ub	r10,--r8
80006a62:	f2 0a 18 00 	cp.b	r10,r9
80006a66:	ce f0       	breq	80006a44 <_dtoa_r+0x704>
80006a68:	50 66       	stdsp	sp[0x18],r6
80006a6a:	11 89       	ld.ub	r9,r8[0x0]
80006a6c:	2f f9       	sub	r9,-1
80006a6e:	b0 89       	st.b	r8[0x0],r9
80006a70:	e0 8f 02 42 	bral	80006ef4 <_dtoa_r+0xbb4>
80006a74:	fe b0 e7 f0 	rcall	80003a54 <__avr32_f64_mul>
80006a78:	2f f4       	sub	r4,-1
80006a7a:	fa eb 00 08 	st.d	sp[8],r10
80006a7e:	30 08       	mov	r8,0
80006a80:	30 09       	mov	r9,0
80006a82:	e0 a0 10 4c 	rcall	80008b1a <__avr32_f64_cmp_eq>
80006a86:	ca 60       	breq	800069d2 <_dtoa_r+0x692>
80006a88:	e0 8f 02 35 	bral	80006ef2 <_dtoa_r+0xbb2>
80006a8c:	40 d8       	lddsp	r8,sp[0x34]
80006a8e:	58 08       	cp.w	r8,0
80006a90:	c0 51       	brne	80006a9a <_dtoa_r+0x75a>
80006a92:	04 98       	mov	r8,r2
80006a94:	00 95       	mov	r5,r0
80006a96:	40 d4       	lddsp	r4,sp[0x34]
80006a98:	c3 78       	rjmp	80006b06 <_dtoa_r+0x7c6>
80006a9a:	40 c5       	lddsp	r5,sp[0x30]
80006a9c:	58 15       	cp.w	r5,1
80006a9e:	e0 89 00 0f 	brgt	80006abc <_dtoa_r+0x77c>
80006aa2:	41 74       	lddsp	r4,sp[0x5c]
80006aa4:	58 04       	cp.w	r4,0
80006aa6:	c0 40       	breq	80006aae <_dtoa_r+0x76e>
80006aa8:	f4 c9 fb cd 	sub	r9,r10,-1075
80006aac:	c0 48       	rjmp	80006ab4 <_dtoa_r+0x774>
80006aae:	41 99       	lddsp	r9,sp[0x64]
80006ab0:	f2 09 11 36 	rsub	r9,r9,54
80006ab4:	04 98       	mov	r8,r2
80006ab6:	00 95       	mov	r5,r0
80006ab8:	c1 c8       	rjmp	80006af0 <_dtoa_r+0x7b0>
80006aba:	d7 03       	nop
80006abc:	e2 c8 00 01 	sub	r8,r1,1
80006ac0:	58 01       	cp.w	r1,0
80006ac2:	e0 05 17 40 	movge	r5,r0
80006ac6:	e2 09 17 40 	movge	r9,r1
80006aca:	e1 d1 e5 15 	sublt	r5,r0,r1
80006ace:	f9 b9 05 00 	movlt	r9,0
80006ad2:	10 32       	cp.w	r2,r8
80006ad4:	e5 d8 e4 18 	subge	r8,r2,r8
80006ad8:	f1 d2 e5 18 	sublt	r8,r8,r2
80006adc:	e5 d8 e5 02 	addlt	r2,r2,r8
80006ae0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006ae4:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006ae8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80006aec:	f9 b8 05 00 	movlt	r8,0
80006af0:	40 4b       	lddsp	r11,sp[0x10]
80006af2:	12 0b       	add	r11,r9
80006af4:	50 08       	stdsp	sp[0x0],r8
80006af6:	50 4b       	stdsp	sp[0x10],r11
80006af8:	12 00       	add	r0,r9
80006afa:	30 1b       	mov	r11,1
80006afc:	0e 9c       	mov	r12,r7
80006afe:	e0 a0 0a d1 	rcall	800080a0 <__i2b>
80006b02:	40 08       	lddsp	r8,sp[0x0]
80006b04:	18 94       	mov	r4,r12
80006b06:	40 4a       	lddsp	r10,sp[0x10]
80006b08:	58 05       	cp.w	r5,0
80006b0a:	5f 99       	srgt	r9
80006b0c:	58 0a       	cp.w	r10,0
80006b0e:	5f 9a       	srgt	r10
80006b10:	f5 e9 00 09 	and	r9,r10,r9
80006b14:	c0 80       	breq	80006b24 <_dtoa_r+0x7e4>
80006b16:	40 4c       	lddsp	r12,sp[0x10]
80006b18:	f8 05 0d 49 	min	r9,r12,r5
80006b1c:	12 1c       	sub	r12,r9
80006b1e:	12 10       	sub	r0,r9
80006b20:	50 4c       	stdsp	sp[0x10],r12
80006b22:	12 15       	sub	r5,r9
80006b24:	58 02       	cp.w	r2,0
80006b26:	e0 8a 00 27 	brle	80006b74 <_dtoa_r+0x834>
80006b2a:	40 db       	lddsp	r11,sp[0x34]
80006b2c:	58 0b       	cp.w	r11,0
80006b2e:	c1 d0       	breq	80006b68 <_dtoa_r+0x828>
80006b30:	58 08       	cp.w	r8,0
80006b32:	e0 8a 00 17 	brle	80006b60 <_dtoa_r+0x820>
80006b36:	10 9a       	mov	r10,r8
80006b38:	50 08       	stdsp	sp[0x0],r8
80006b3a:	08 9b       	mov	r11,r4
80006b3c:	0e 9c       	mov	r12,r7
80006b3e:	e0 a0 0a f7 	rcall	8000812c <__pow5mult>
80006b42:	06 9a       	mov	r10,r3
80006b44:	18 9b       	mov	r11,r12
80006b46:	18 94       	mov	r4,r12
80006b48:	0e 9c       	mov	r12,r7
80006b4a:	e0 a0 0a 2b 	rcall	80007fa0 <__multiply>
80006b4e:	18 99       	mov	r9,r12
80006b50:	06 9b       	mov	r11,r3
80006b52:	50 19       	stdsp	sp[0x4],r9
80006b54:	0e 9c       	mov	r12,r7
80006b56:	e0 a0 08 d7 	rcall	80007d04 <_Bfree>
80006b5a:	40 19       	lddsp	r9,sp[0x4]
80006b5c:	40 08       	lddsp	r8,sp[0x0]
80006b5e:	12 93       	mov	r3,r9
80006b60:	e4 08 01 0a 	sub	r10,r2,r8
80006b64:	c0 80       	breq	80006b74 <_dtoa_r+0x834>
80006b66:	c0 28       	rjmp	80006b6a <_dtoa_r+0x82a>
80006b68:	04 9a       	mov	r10,r2
80006b6a:	06 9b       	mov	r11,r3
80006b6c:	0e 9c       	mov	r12,r7
80006b6e:	e0 a0 0a df 	rcall	8000812c <__pow5mult>
80006b72:	18 93       	mov	r3,r12
80006b74:	30 1b       	mov	r11,1
80006b76:	0e 9c       	mov	r12,r7
80006b78:	e0 a0 0a 94 	rcall	800080a0 <__i2b>
80006b7c:	41 1a       	lddsp	r10,sp[0x44]
80006b7e:	18 92       	mov	r2,r12
80006b80:	58 0a       	cp.w	r10,0
80006b82:	e0 8a 00 07 	brle	80006b90 <_dtoa_r+0x850>
80006b86:	18 9b       	mov	r11,r12
80006b88:	0e 9c       	mov	r12,r7
80006b8a:	e0 a0 0a d1 	rcall	8000812c <__pow5mult>
80006b8e:	18 92       	mov	r2,r12
80006b90:	40 c9       	lddsp	r9,sp[0x30]
80006b92:	58 19       	cp.w	r9,1
80006b94:	e0 89 00 14 	brgt	80006bbc <_dtoa_r+0x87c>
80006b98:	40 38       	lddsp	r8,sp[0xc]
80006b9a:	58 08       	cp.w	r8,0
80006b9c:	c1 01       	brne	80006bbc <_dtoa_r+0x87c>
80006b9e:	40 29       	lddsp	r9,sp[0x8]
80006ba0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006ba4:	c0 c1       	brne	80006bbc <_dtoa_r+0x87c>
80006ba6:	12 98       	mov	r8,r9
80006ba8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006bac:	c0 80       	breq	80006bbc <_dtoa_r+0x87c>
80006bae:	40 4c       	lddsp	r12,sp[0x10]
80006bb0:	30 1b       	mov	r11,1
80006bb2:	2f fc       	sub	r12,-1
80006bb4:	2f f0       	sub	r0,-1
80006bb6:	50 4c       	stdsp	sp[0x10],r12
80006bb8:	50 6b       	stdsp	sp[0x18],r11
80006bba:	c0 38       	rjmp	80006bc0 <_dtoa_r+0x880>
80006bbc:	30 0a       	mov	r10,0
80006bbe:	50 6a       	stdsp	sp[0x18],r10
80006bc0:	41 19       	lddsp	r9,sp[0x44]
80006bc2:	58 09       	cp.w	r9,0
80006bc4:	c0 31       	brne	80006bca <_dtoa_r+0x88a>
80006bc6:	30 1c       	mov	r12,1
80006bc8:	c0 98       	rjmp	80006bda <_dtoa_r+0x89a>
80006bca:	64 48       	ld.w	r8,r2[0x10]
80006bcc:	2f c8       	sub	r8,-4
80006bce:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006bd2:	e0 a0 08 08 	rcall	80007be2 <__hi0bits>
80006bd6:	f8 0c 11 20 	rsub	r12,r12,32
80006bda:	40 4b       	lddsp	r11,sp[0x10]
80006bdc:	f8 0b 00 08 	add	r8,r12,r11
80006be0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006be4:	c0 c0       	breq	80006bfc <_dtoa_r+0x8bc>
80006be6:	f0 08 11 20 	rsub	r8,r8,32
80006bea:	58 48       	cp.w	r8,4
80006bec:	e0 8a 00 06 	brle	80006bf8 <_dtoa_r+0x8b8>
80006bf0:	20 48       	sub	r8,4
80006bf2:	10 0b       	add	r11,r8
80006bf4:	50 4b       	stdsp	sp[0x10],r11
80006bf6:	c0 78       	rjmp	80006c04 <_dtoa_r+0x8c4>
80006bf8:	58 48       	cp.w	r8,4
80006bfa:	c0 70       	breq	80006c08 <_dtoa_r+0x8c8>
80006bfc:	40 4a       	lddsp	r10,sp[0x10]
80006bfe:	2e 48       	sub	r8,-28
80006c00:	10 0a       	add	r10,r8
80006c02:	50 4a       	stdsp	sp[0x10],r10
80006c04:	10 00       	add	r0,r8
80006c06:	10 05       	add	r5,r8
80006c08:	58 00       	cp.w	r0,0
80006c0a:	e0 8a 00 08 	brle	80006c1a <_dtoa_r+0x8da>
80006c0e:	06 9b       	mov	r11,r3
80006c10:	00 9a       	mov	r10,r0
80006c12:	0e 9c       	mov	r12,r7
80006c14:	e0 a0 09 82 	rcall	80007f18 <__lshift>
80006c18:	18 93       	mov	r3,r12
80006c1a:	40 49       	lddsp	r9,sp[0x10]
80006c1c:	58 09       	cp.w	r9,0
80006c1e:	e0 8a 00 08 	brle	80006c2e <_dtoa_r+0x8ee>
80006c22:	04 9b       	mov	r11,r2
80006c24:	12 9a       	mov	r10,r9
80006c26:	0e 9c       	mov	r12,r7
80006c28:	e0 a0 09 78 	rcall	80007f18 <__lshift>
80006c2c:	18 92       	mov	r2,r12
80006c2e:	41 48       	lddsp	r8,sp[0x50]
80006c30:	58 08       	cp.w	r8,0
80006c32:	c1 b0       	breq	80006c68 <_dtoa_r+0x928>
80006c34:	04 9b       	mov	r11,r2
80006c36:	06 9c       	mov	r12,r3
80006c38:	e0 a0 08 4c 	rcall	80007cd0 <__mcmp>
80006c3c:	c1 64       	brge	80006c68 <_dtoa_r+0x928>
80006c3e:	06 9b       	mov	r11,r3
80006c40:	30 09       	mov	r9,0
80006c42:	30 aa       	mov	r10,10
80006c44:	0e 9c       	mov	r12,r7
80006c46:	e0 a0 0a 35 	rcall	800080b0 <__multadd>
80006c4a:	20 16       	sub	r6,1
80006c4c:	18 93       	mov	r3,r12
80006c4e:	40 dc       	lddsp	r12,sp[0x34]
80006c50:	58 0c       	cp.w	r12,0
80006c52:	c0 31       	brne	80006c58 <_dtoa_r+0x918>
80006c54:	40 91       	lddsp	r1,sp[0x24]
80006c56:	c0 98       	rjmp	80006c68 <_dtoa_r+0x928>
80006c58:	08 9b       	mov	r11,r4
80006c5a:	40 91       	lddsp	r1,sp[0x24]
80006c5c:	30 09       	mov	r9,0
80006c5e:	30 aa       	mov	r10,10
80006c60:	0e 9c       	mov	r12,r7
80006c62:	e0 a0 0a 27 	rcall	800080b0 <__multadd>
80006c66:	18 94       	mov	r4,r12
80006c68:	58 01       	cp.w	r1,0
80006c6a:	5f a9       	srle	r9
80006c6c:	40 cb       	lddsp	r11,sp[0x30]
80006c6e:	58 2b       	cp.w	r11,2
80006c70:	5f 98       	srgt	r8
80006c72:	f3 e8 00 08 	and	r8,r9,r8
80006c76:	c2 50       	breq	80006cc0 <_dtoa_r+0x980>
80006c78:	58 01       	cp.w	r1,0
80006c7a:	c1 11       	brne	80006c9c <_dtoa_r+0x95c>
80006c7c:	04 9b       	mov	r11,r2
80006c7e:	02 99       	mov	r9,r1
80006c80:	30 5a       	mov	r10,5
80006c82:	0e 9c       	mov	r12,r7
80006c84:	e0 a0 0a 16 	rcall	800080b0 <__multadd>
80006c88:	18 92       	mov	r2,r12
80006c8a:	18 9b       	mov	r11,r12
80006c8c:	06 9c       	mov	r12,r3
80006c8e:	e0 a0 08 21 	rcall	80007cd0 <__mcmp>
80006c92:	e0 89 00 0f 	brgt	80006cb0 <_dtoa_r+0x970>
80006c96:	c0 38       	rjmp	80006c9c <_dtoa_r+0x95c>
80006c98:	30 02       	mov	r2,0
80006c9a:	04 94       	mov	r4,r2
80006c9c:	40 ea       	lddsp	r10,sp[0x38]
80006c9e:	30 09       	mov	r9,0
80006ca0:	5c da       	com	r10
80006ca2:	40 85       	lddsp	r5,sp[0x20]
80006ca4:	50 6a       	stdsp	sp[0x18],r10
80006ca6:	50 49       	stdsp	sp[0x10],r9
80006ca8:	c0 f9       	rjmp	80006ec6 <_dtoa_r+0xb86>
80006caa:	08 92       	mov	r2,r4
80006cac:	40 66       	lddsp	r6,sp[0x18]
80006cae:	04 94       	mov	r4,r2
80006cb0:	2f f6       	sub	r6,-1
80006cb2:	50 66       	stdsp	sp[0x18],r6
80006cb4:	33 18       	mov	r8,49
80006cb6:	40 85       	lddsp	r5,sp[0x20]
80006cb8:	0a c8       	st.b	r5++,r8
80006cba:	30 08       	mov	r8,0
80006cbc:	50 48       	stdsp	sp[0x10],r8
80006cbe:	c0 49       	rjmp	80006ec6 <_dtoa_r+0xb86>
80006cc0:	40 dc       	lddsp	r12,sp[0x34]
80006cc2:	58 0c       	cp.w	r12,0
80006cc4:	e0 80 00 b5 	breq	80006e2e <_dtoa_r+0xaee>
80006cc8:	58 05       	cp.w	r5,0
80006cca:	e0 8a 00 08 	brle	80006cda <_dtoa_r+0x99a>
80006cce:	08 9b       	mov	r11,r4
80006cd0:	0a 9a       	mov	r10,r5
80006cd2:	0e 9c       	mov	r12,r7
80006cd4:	e0 a0 09 22 	rcall	80007f18 <__lshift>
80006cd8:	18 94       	mov	r4,r12
80006cda:	40 6b       	lddsp	r11,sp[0x18]
80006cdc:	58 0b       	cp.w	r11,0
80006cde:	c0 31       	brne	80006ce4 <_dtoa_r+0x9a4>
80006ce0:	08 9c       	mov	r12,r4
80006ce2:	c1 38       	rjmp	80006d08 <_dtoa_r+0x9c8>
80006ce4:	68 1b       	ld.w	r11,r4[0x4]
80006ce6:	0e 9c       	mov	r12,r7
80006ce8:	e0 a0 08 28 	rcall	80007d38 <_Balloc>
80006cec:	68 4a       	ld.w	r10,r4[0x10]
80006cee:	18 95       	mov	r5,r12
80006cf0:	e8 cb ff f4 	sub	r11,r4,-12
80006cf4:	2f ea       	sub	r10,-2
80006cf6:	2f 4c       	sub	r12,-12
80006cf8:	a3 6a       	lsl	r10,0x2
80006cfa:	fe b0 e8 3f 	rcall	80003d78 <memcpy>
80006cfe:	0a 9b       	mov	r11,r5
80006d00:	30 1a       	mov	r10,1
80006d02:	0e 9c       	mov	r12,r7
80006d04:	e0 a0 09 0a 	rcall	80007f18 <__lshift>
80006d08:	50 44       	stdsp	sp[0x10],r4
80006d0a:	40 3a       	lddsp	r10,sp[0xc]
80006d0c:	30 19       	mov	r9,1
80006d0e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006d12:	18 94       	mov	r4,r12
80006d14:	50 da       	stdsp	sp[0x34],r10
80006d16:	40 85       	lddsp	r5,sp[0x20]
80006d18:	50 99       	stdsp	sp[0x24],r9
80006d1a:	50 26       	stdsp	sp[0x8],r6
80006d1c:	50 e1       	stdsp	sp[0x38],r1
80006d1e:	04 9b       	mov	r11,r2
80006d20:	06 9c       	mov	r12,r3
80006d22:	fe b0 fa 7f 	rcall	80006220 <quorem>
80006d26:	40 4b       	lddsp	r11,sp[0x10]
80006d28:	f8 c0 ff d0 	sub	r0,r12,-48
80006d2c:	06 9c       	mov	r12,r3
80006d2e:	e0 a0 07 d1 	rcall	80007cd0 <__mcmp>
80006d32:	08 9a       	mov	r10,r4
80006d34:	50 6c       	stdsp	sp[0x18],r12
80006d36:	04 9b       	mov	r11,r2
80006d38:	0e 9c       	mov	r12,r7
80006d3a:	e0 a0 08 87 	rcall	80007e48 <__mdiff>
80006d3e:	18 91       	mov	r1,r12
80006d40:	78 38       	ld.w	r8,r12[0xc]
80006d42:	58 08       	cp.w	r8,0
80006d44:	c0 30       	breq	80006d4a <_dtoa_r+0xa0a>
80006d46:	30 16       	mov	r6,1
80006d48:	c0 68       	rjmp	80006d54 <_dtoa_r+0xa14>
80006d4a:	18 9b       	mov	r11,r12
80006d4c:	06 9c       	mov	r12,r3
80006d4e:	e0 a0 07 c1 	rcall	80007cd0 <__mcmp>
80006d52:	18 96       	mov	r6,r12
80006d54:	0e 9c       	mov	r12,r7
80006d56:	02 9b       	mov	r11,r1
80006d58:	e0 a0 07 d6 	rcall	80007d04 <_Bfree>
80006d5c:	40 cc       	lddsp	r12,sp[0x30]
80006d5e:	ed ec 10 08 	or	r8,r6,r12
80006d62:	c0 d1       	brne	80006d7c <_dtoa_r+0xa3c>
80006d64:	40 db       	lddsp	r11,sp[0x34]
80006d66:	58 0b       	cp.w	r11,0
80006d68:	c0 a1       	brne	80006d7c <_dtoa_r+0xa3c>
80006d6a:	40 26       	lddsp	r6,sp[0x8]
80006d6c:	e0 40 00 39 	cp.w	r0,57
80006d70:	c3 00       	breq	80006dd0 <_dtoa_r+0xa90>
80006d72:	40 6a       	lddsp	r10,sp[0x18]
80006d74:	58 0a       	cp.w	r10,0
80006d76:	e0 89 00 24 	brgt	80006dbe <_dtoa_r+0xa7e>
80006d7a:	c2 f8       	rjmp	80006dd8 <_dtoa_r+0xa98>
80006d7c:	40 69       	lddsp	r9,sp[0x18]
80006d7e:	58 09       	cp.w	r9,0
80006d80:	c0 85       	brlt	80006d90 <_dtoa_r+0xa50>
80006d82:	12 98       	mov	r8,r9
80006d84:	40 cc       	lddsp	r12,sp[0x30]
80006d86:	18 48       	or	r8,r12
80006d88:	c1 d1       	brne	80006dc2 <_dtoa_r+0xa82>
80006d8a:	40 db       	lddsp	r11,sp[0x34]
80006d8c:	58 0b       	cp.w	r11,0
80006d8e:	c1 a1       	brne	80006dc2 <_dtoa_r+0xa82>
80006d90:	0c 99       	mov	r9,r6
80006d92:	40 26       	lddsp	r6,sp[0x8]
80006d94:	58 09       	cp.w	r9,0
80006d96:	e0 8a 00 21 	brle	80006dd8 <_dtoa_r+0xa98>
80006d9a:	06 9b       	mov	r11,r3
80006d9c:	30 1a       	mov	r10,1
80006d9e:	0e 9c       	mov	r12,r7
80006da0:	e0 a0 08 bc 	rcall	80007f18 <__lshift>
80006da4:	04 9b       	mov	r11,r2
80006da6:	18 93       	mov	r3,r12
80006da8:	e0 a0 07 94 	rcall	80007cd0 <__mcmp>
80006dac:	e0 89 00 06 	brgt	80006db8 <_dtoa_r+0xa78>
80006db0:	c1 41       	brne	80006dd8 <_dtoa_r+0xa98>
80006db2:	ed b0 00 00 	bld	r0,0x0
80006db6:	c1 11       	brne	80006dd8 <_dtoa_r+0xa98>
80006db8:	e0 40 00 39 	cp.w	r0,57
80006dbc:	c0 a0       	breq	80006dd0 <_dtoa_r+0xa90>
80006dbe:	2f f0       	sub	r0,-1
80006dc0:	c0 c8       	rjmp	80006dd8 <_dtoa_r+0xa98>
80006dc2:	58 06       	cp.w	r6,0
80006dc4:	e0 8a 00 0c 	brle	80006ddc <_dtoa_r+0xa9c>
80006dc8:	40 26       	lddsp	r6,sp[0x8]
80006dca:	e0 40 00 39 	cp.w	r0,57
80006dce:	c0 41       	brne	80006dd6 <_dtoa_r+0xa96>
80006dd0:	33 98       	mov	r8,57
80006dd2:	0a c8       	st.b	r5++,r8
80006dd4:	c6 78       	rjmp	80006ea2 <_dtoa_r+0xb62>
80006dd6:	2f f0       	sub	r0,-1
80006dd8:	0a c0       	st.b	r5++,r0
80006dda:	c7 58       	rjmp	80006ec4 <_dtoa_r+0xb84>
80006ddc:	0a c0       	st.b	r5++,r0
80006dde:	40 9a       	lddsp	r10,sp[0x24]
80006de0:	40 e9       	lddsp	r9,sp[0x38]
80006de2:	12 3a       	cp.w	r10,r9
80006de4:	c4 30       	breq	80006e6a <_dtoa_r+0xb2a>
80006de6:	06 9b       	mov	r11,r3
80006de8:	30 09       	mov	r9,0
80006dea:	30 aa       	mov	r10,10
80006dec:	0e 9c       	mov	r12,r7
80006dee:	e0 a0 09 61 	rcall	800080b0 <__multadd>
80006df2:	40 48       	lddsp	r8,sp[0x10]
80006df4:	18 93       	mov	r3,r12
80006df6:	08 38       	cp.w	r8,r4
80006df8:	c0 91       	brne	80006e0a <_dtoa_r+0xaca>
80006dfa:	10 9b       	mov	r11,r8
80006dfc:	30 09       	mov	r9,0
80006dfe:	30 aa       	mov	r10,10
80006e00:	0e 9c       	mov	r12,r7
80006e02:	e0 a0 09 57 	rcall	800080b0 <__multadd>
80006e06:	50 4c       	stdsp	sp[0x10],r12
80006e08:	c0 e8       	rjmp	80006e24 <_dtoa_r+0xae4>
80006e0a:	40 4b       	lddsp	r11,sp[0x10]
80006e0c:	30 09       	mov	r9,0
80006e0e:	30 aa       	mov	r10,10
80006e10:	0e 9c       	mov	r12,r7
80006e12:	e0 a0 09 4f 	rcall	800080b0 <__multadd>
80006e16:	08 9b       	mov	r11,r4
80006e18:	50 4c       	stdsp	sp[0x10],r12
80006e1a:	30 09       	mov	r9,0
80006e1c:	30 aa       	mov	r10,10
80006e1e:	0e 9c       	mov	r12,r7
80006e20:	e0 a0 09 48 	rcall	800080b0 <__multadd>
80006e24:	18 94       	mov	r4,r12
80006e26:	40 9c       	lddsp	r12,sp[0x24]
80006e28:	2f fc       	sub	r12,-1
80006e2a:	50 9c       	stdsp	sp[0x24],r12
80006e2c:	c7 9b       	rjmp	80006d1e <_dtoa_r+0x9de>
80006e2e:	30 18       	mov	r8,1
80006e30:	06 90       	mov	r0,r3
80006e32:	40 85       	lddsp	r5,sp[0x20]
80006e34:	08 93       	mov	r3,r4
80006e36:	0c 94       	mov	r4,r6
80006e38:	10 96       	mov	r6,r8
80006e3a:	04 9b       	mov	r11,r2
80006e3c:	00 9c       	mov	r12,r0
80006e3e:	fe b0 f9 f1 	rcall	80006220 <quorem>
80006e42:	2d 0c       	sub	r12,-48
80006e44:	0a cc       	st.b	r5++,r12
80006e46:	02 36       	cp.w	r6,r1
80006e48:	c0 a4       	brge	80006e5c <_dtoa_r+0xb1c>
80006e4a:	00 9b       	mov	r11,r0
80006e4c:	30 09       	mov	r9,0
80006e4e:	30 aa       	mov	r10,10
80006e50:	0e 9c       	mov	r12,r7
80006e52:	2f f6       	sub	r6,-1
80006e54:	e0 a0 09 2e 	rcall	800080b0 <__multadd>
80006e58:	18 90       	mov	r0,r12
80006e5a:	cf 0b       	rjmp	80006e3a <_dtoa_r+0xafa>
80006e5c:	08 96       	mov	r6,r4
80006e5e:	30 0b       	mov	r11,0
80006e60:	06 94       	mov	r4,r3
80006e62:	50 4b       	stdsp	sp[0x10],r11
80006e64:	00 93       	mov	r3,r0
80006e66:	18 90       	mov	r0,r12
80006e68:	c0 28       	rjmp	80006e6c <_dtoa_r+0xb2c>
80006e6a:	40 26       	lddsp	r6,sp[0x8]
80006e6c:	06 9b       	mov	r11,r3
80006e6e:	30 1a       	mov	r10,1
80006e70:	0e 9c       	mov	r12,r7
80006e72:	e0 a0 08 53 	rcall	80007f18 <__lshift>
80006e76:	04 9b       	mov	r11,r2
80006e78:	18 93       	mov	r3,r12
80006e7a:	e0 a0 07 2b 	rcall	80007cd0 <__mcmp>
80006e7e:	e0 89 00 12 	brgt	80006ea2 <_dtoa_r+0xb62>
80006e82:	c1 b1       	brne	80006eb8 <_dtoa_r+0xb78>
80006e84:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006e88:	c0 d1       	brne	80006ea2 <_dtoa_r+0xb62>
80006e8a:	c1 78       	rjmp	80006eb8 <_dtoa_r+0xb78>
80006e8c:	40 89       	lddsp	r9,sp[0x20]
80006e8e:	12 38       	cp.w	r8,r9
80006e90:	c0 30       	breq	80006e96 <_dtoa_r+0xb56>
80006e92:	10 95       	mov	r5,r8
80006e94:	c0 88       	rjmp	80006ea4 <_dtoa_r+0xb64>
80006e96:	2f f6       	sub	r6,-1
80006e98:	50 66       	stdsp	sp[0x18],r6
80006e9a:	33 18       	mov	r8,49
80006e9c:	40 8c       	lddsp	r12,sp[0x20]
80006e9e:	b8 88       	st.b	r12[0x0],r8
80006ea0:	c1 38       	rjmp	80006ec6 <_dtoa_r+0xb86>
80006ea2:	33 9a       	mov	r10,57
80006ea4:	0a 98       	mov	r8,r5
80006ea6:	11 79       	ld.ub	r9,--r8
80006ea8:	f4 09 18 00 	cp.b	r9,r10
80006eac:	cf 00       	breq	80006e8c <_dtoa_r+0xb4c>
80006eae:	2f f9       	sub	r9,-1
80006eb0:	b0 89       	st.b	r8[0x0],r9
80006eb2:	c0 98       	rjmp	80006ec4 <_dtoa_r+0xb84>
80006eb4:	10 95       	mov	r5,r8
80006eb6:	c0 28       	rjmp	80006eba <_dtoa_r+0xb7a>
80006eb8:	33 09       	mov	r9,48
80006eba:	0a 98       	mov	r8,r5
80006ebc:	11 7a       	ld.ub	r10,--r8
80006ebe:	f2 0a 18 00 	cp.b	r10,r9
80006ec2:	cf 90       	breq	80006eb4 <_dtoa_r+0xb74>
80006ec4:	50 66       	stdsp	sp[0x18],r6
80006ec6:	04 9b       	mov	r11,r2
80006ec8:	0e 9c       	mov	r12,r7
80006eca:	e0 a0 07 1d 	rcall	80007d04 <_Bfree>
80006ece:	58 04       	cp.w	r4,0
80006ed0:	c1 20       	breq	80006ef4 <_dtoa_r+0xbb4>
80006ed2:	40 4b       	lddsp	r11,sp[0x10]
80006ed4:	08 3b       	cp.w	r11,r4
80006ed6:	5f 19       	srne	r9
80006ed8:	58 0b       	cp.w	r11,0
80006eda:	5f 18       	srne	r8
80006edc:	f3 e8 00 08 	and	r8,r9,r8
80006ee0:	c0 40       	breq	80006ee8 <_dtoa_r+0xba8>
80006ee2:	0e 9c       	mov	r12,r7
80006ee4:	e0 a0 07 10 	rcall	80007d04 <_Bfree>
80006ee8:	08 9b       	mov	r11,r4
80006eea:	0e 9c       	mov	r12,r7
80006eec:	e0 a0 07 0c 	rcall	80007d04 <_Bfree>
80006ef0:	c0 28       	rjmp	80006ef4 <_dtoa_r+0xbb4>
80006ef2:	50 66       	stdsp	sp[0x18],r6
80006ef4:	0e 9c       	mov	r12,r7
80006ef6:	06 9b       	mov	r11,r3
80006ef8:	e0 a0 07 06 	rcall	80007d04 <_Bfree>
80006efc:	30 08       	mov	r8,0
80006efe:	aa 88       	st.b	r5[0x0],r8
80006f00:	40 68       	lddsp	r8,sp[0x18]
80006f02:	41 5a       	lddsp	r10,sp[0x54]
80006f04:	2f f8       	sub	r8,-1
80006f06:	41 29       	lddsp	r9,sp[0x48]
80006f08:	95 08       	st.w	r10[0x0],r8
80006f0a:	40 8c       	lddsp	r12,sp[0x20]
80006f0c:	58 09       	cp.w	r9,0
80006f0e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006f12:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006f16:	2e 6d       	sub	sp,-104
80006f18:	d8 32       	popm	r0-r7,pc
80006f1a:	d7 03       	nop

80006f1c <_fflush_r>:
80006f1c:	d4 21       	pushm	r4-r7,lr
80006f1e:	16 97       	mov	r7,r11
80006f20:	18 96       	mov	r6,r12
80006f22:	76 48       	ld.w	r8,r11[0x10]
80006f24:	58 08       	cp.w	r8,0
80006f26:	c7 f0       	breq	80007024 <_fflush_r+0x108>
80006f28:	58 0c       	cp.w	r12,0
80006f2a:	c0 50       	breq	80006f34 <_fflush_r+0x18>
80006f2c:	78 68       	ld.w	r8,r12[0x18]
80006f2e:	58 08       	cp.w	r8,0
80006f30:	c0 21       	brne	80006f34 <_fflush_r+0x18>
80006f32:	cc dc       	rcall	800070cc <__sinit>
80006f34:	fe c8 d3 74 	sub	r8,pc,-11404
80006f38:	10 37       	cp.w	r7,r8
80006f3a:	c0 31       	brne	80006f40 <_fflush_r+0x24>
80006f3c:	6c 07       	ld.w	r7,r6[0x0]
80006f3e:	c0 c8       	rjmp	80006f56 <_fflush_r+0x3a>
80006f40:	fe c8 d3 60 	sub	r8,pc,-11424
80006f44:	10 37       	cp.w	r7,r8
80006f46:	c0 31       	brne	80006f4c <_fflush_r+0x30>
80006f48:	6c 17       	ld.w	r7,r6[0x4]
80006f4a:	c0 68       	rjmp	80006f56 <_fflush_r+0x3a>
80006f4c:	fe c8 d3 4c 	sub	r8,pc,-11444
80006f50:	10 37       	cp.w	r7,r8
80006f52:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006f56:	8e 6a       	ld.sh	r10,r7[0xc]
80006f58:	14 98       	mov	r8,r10
80006f5a:	ed ba 00 03 	bld	r10,0x3
80006f5e:	c4 20       	breq	80006fe2 <_fflush_r+0xc6>
80006f60:	ab ba       	sbr	r10,0xb
80006f62:	ae 6a       	st.h	r7[0xc],r10
80006f64:	6e 18       	ld.w	r8,r7[0x4]
80006f66:	58 08       	cp.w	r8,0
80006f68:	e0 89 00 06 	brgt	80006f74 <_fflush_r+0x58>
80006f6c:	6f 08       	ld.w	r8,r7[0x40]
80006f6e:	58 08       	cp.w	r8,0
80006f70:	e0 8a 00 5a 	brle	80007024 <_fflush_r+0x108>
80006f74:	6e b8       	ld.w	r8,r7[0x2c]
80006f76:	58 08       	cp.w	r8,0
80006f78:	c5 60       	breq	80007024 <_fflush_r+0x108>
80006f7a:	e2 1a 10 00 	andl	r10,0x1000,COH
80006f7e:	c0 30       	breq	80006f84 <_fflush_r+0x68>
80006f80:	6f 55       	ld.w	r5,r7[0x54]
80006f82:	c0 f8       	rjmp	80006fa0 <_fflush_r+0x84>
80006f84:	30 19       	mov	r9,1
80006f86:	6e 8b       	ld.w	r11,r7[0x20]
80006f88:	0c 9c       	mov	r12,r6
80006f8a:	5d 18       	icall	r8
80006f8c:	18 95       	mov	r5,r12
80006f8e:	5b fc       	cp.w	r12,-1
80006f90:	c0 81       	brne	80006fa0 <_fflush_r+0x84>
80006f92:	6c 38       	ld.w	r8,r6[0xc]
80006f94:	59 d8       	cp.w	r8,29
80006f96:	c4 70       	breq	80007024 <_fflush_r+0x108>
80006f98:	8e 68       	ld.sh	r8,r7[0xc]
80006f9a:	a7 a8       	sbr	r8,0x6
80006f9c:	ae 68       	st.h	r7[0xc],r8
80006f9e:	d8 22       	popm	r4-r7,pc
80006fa0:	8e 68       	ld.sh	r8,r7[0xc]
80006fa2:	ed b8 00 02 	bld	r8,0x2
80006fa6:	c0 91       	brne	80006fb8 <_fflush_r+0x9c>
80006fa8:	6e 18       	ld.w	r8,r7[0x4]
80006faa:	10 15       	sub	r5,r8
80006fac:	6e d8       	ld.w	r8,r7[0x34]
80006fae:	58 08       	cp.w	r8,0
80006fb0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006fb4:	eb d8 e1 15 	subne	r5,r5,r8
80006fb8:	6e b8       	ld.w	r8,r7[0x2c]
80006fba:	0c 9c       	mov	r12,r6
80006fbc:	30 09       	mov	r9,0
80006fbe:	0a 9a       	mov	r10,r5
80006fc0:	6e 8b       	ld.w	r11,r7[0x20]
80006fc2:	5d 18       	icall	r8
80006fc4:	8e 68       	ld.sh	r8,r7[0xc]
80006fc6:	0a 3c       	cp.w	r12,r5
80006fc8:	c2 61       	brne	80007014 <_fflush_r+0xf8>
80006fca:	ab d8       	cbr	r8,0xb
80006fcc:	30 0c       	mov	r12,0
80006fce:	6e 49       	ld.w	r9,r7[0x10]
80006fd0:	ae 68       	st.h	r7[0xc],r8
80006fd2:	8f 1c       	st.w	r7[0x4],r12
80006fd4:	8f 09       	st.w	r7[0x0],r9
80006fd6:	ed b8 00 0c 	bld	r8,0xc
80006fda:	c2 51       	brne	80007024 <_fflush_r+0x108>
80006fdc:	ef 45 00 54 	st.w	r7[84],r5
80006fe0:	d8 22       	popm	r4-r7,pc
80006fe2:	6e 45       	ld.w	r5,r7[0x10]
80006fe4:	58 05       	cp.w	r5,0
80006fe6:	c1 f0       	breq	80007024 <_fflush_r+0x108>
80006fe8:	6e 04       	ld.w	r4,r7[0x0]
80006fea:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006fee:	8f 05       	st.w	r7[0x0],r5
80006ff0:	f9 b8 01 00 	movne	r8,0
80006ff4:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006ff8:	0a 14       	sub	r4,r5
80006ffa:	8f 28       	st.w	r7[0x8],r8
80006ffc:	c1 18       	rjmp	8000701e <_fflush_r+0x102>
80006ffe:	08 99       	mov	r9,r4
80007000:	0a 9a       	mov	r10,r5
80007002:	6e a8       	ld.w	r8,r7[0x28]
80007004:	6e 8b       	ld.w	r11,r7[0x20]
80007006:	0c 9c       	mov	r12,r6
80007008:	5d 18       	icall	r8
8000700a:	18 14       	sub	r4,r12
8000700c:	58 0c       	cp.w	r12,0
8000700e:	e0 89 00 07 	brgt	8000701c <_fflush_r+0x100>
80007012:	8e 68       	ld.sh	r8,r7[0xc]
80007014:	a7 a8       	sbr	r8,0x6
80007016:	3f fc       	mov	r12,-1
80007018:	ae 68       	st.h	r7[0xc],r8
8000701a:	d8 22       	popm	r4-r7,pc
8000701c:	18 05       	add	r5,r12
8000701e:	58 04       	cp.w	r4,0
80007020:	fe 99 ff ef 	brgt	80006ffe <_fflush_r+0xe2>
80007024:	d8 2a       	popm	r4-r7,pc,r12=0
80007026:	d7 03       	nop

80007028 <__sfp_lock_acquire>:
80007028:	5e fc       	retal	r12

8000702a <__sfp_lock_release>:
8000702a:	5e fc       	retal	r12

8000702c <_cleanup_r>:
8000702c:	d4 01       	pushm	lr
8000702e:	fe cb e8 6a 	sub	r11,pc,-6038
80007032:	e0 a0 02 fd 	rcall	8000762c <_fwalk>
80007036:	d8 02       	popm	pc

80007038 <__sfmoreglue>:
80007038:	d4 21       	pushm	r4-r7,lr
8000703a:	16 95       	mov	r5,r11
8000703c:	f6 06 10 5c 	mul	r6,r11,92
80007040:	ec cb ff f4 	sub	r11,r6,-12
80007044:	e0 a0 03 84 	rcall	8000774c <_malloc_r>
80007048:	18 97       	mov	r7,r12
8000704a:	c0 90       	breq	8000705c <__sfmoreglue+0x24>
8000704c:	99 15       	st.w	r12[0x4],r5
8000704e:	30 0b       	mov	r11,0
80007050:	2f 4c       	sub	r12,-12
80007052:	0c 9a       	mov	r10,r6
80007054:	8f 2c       	st.w	r7[0x8],r12
80007056:	8f 0b       	st.w	r7[0x0],r11
80007058:	e0 a0 05 bc 	rcall	80007bd0 <memset>
8000705c:	0e 9c       	mov	r12,r7
8000705e:	d8 22       	popm	r4-r7,pc

80007060 <__sfp>:
80007060:	d4 21       	pushm	r4-r7,lr
80007062:	fe c8 d8 8a 	sub	r8,pc,-10102
80007066:	18 96       	mov	r6,r12
80007068:	70 07       	ld.w	r7,r8[0x0]
8000706a:	6e 68       	ld.w	r8,r7[0x18]
8000706c:	58 08       	cp.w	r8,0
8000706e:	c0 31       	brne	80007074 <__sfp+0x14>
80007070:	0e 9c       	mov	r12,r7
80007072:	c2 dc       	rcall	800070cc <__sinit>
80007074:	ee c7 ff 28 	sub	r7,r7,-216
80007078:	30 05       	mov	r5,0
8000707a:	6e 2c       	ld.w	r12,r7[0x8]
8000707c:	6e 18       	ld.w	r8,r7[0x4]
8000707e:	c0 68       	rjmp	8000708a <__sfp+0x2a>
80007080:	98 69       	ld.sh	r9,r12[0xc]
80007082:	ea 09 19 00 	cp.h	r9,r5
80007086:	c1 10       	breq	800070a8 <__sfp+0x48>
80007088:	2a 4c       	sub	r12,-92
8000708a:	20 18       	sub	r8,1
8000708c:	cf a7       	brpl	80007080 <__sfp+0x20>
8000708e:	6e 08       	ld.w	r8,r7[0x0]
80007090:	58 08       	cp.w	r8,0
80007092:	c0 61       	brne	8000709e <__sfp+0x3e>
80007094:	30 4b       	mov	r11,4
80007096:	0c 9c       	mov	r12,r6
80007098:	cd 0f       	rcall	80007038 <__sfmoreglue>
8000709a:	8f 0c       	st.w	r7[0x0],r12
8000709c:	c0 30       	breq	800070a2 <__sfp+0x42>
8000709e:	6e 07       	ld.w	r7,r7[0x0]
800070a0:	ce db       	rjmp	8000707a <__sfp+0x1a>
800070a2:	30 c8       	mov	r8,12
800070a4:	8d 38       	st.w	r6[0xc],r8
800070a6:	d8 22       	popm	r4-r7,pc
800070a8:	30 08       	mov	r8,0
800070aa:	f9 48 00 4c 	st.w	r12[76],r8
800070ae:	99 08       	st.w	r12[0x0],r8
800070b0:	99 28       	st.w	r12[0x8],r8
800070b2:	99 18       	st.w	r12[0x4],r8
800070b4:	99 48       	st.w	r12[0x10],r8
800070b6:	99 58       	st.w	r12[0x14],r8
800070b8:	99 68       	st.w	r12[0x18],r8
800070ba:	99 d8       	st.w	r12[0x34],r8
800070bc:	99 e8       	st.w	r12[0x38],r8
800070be:	f9 48 00 48 	st.w	r12[72],r8
800070c2:	3f f8       	mov	r8,-1
800070c4:	b8 78       	st.h	r12[0xe],r8
800070c6:	30 18       	mov	r8,1
800070c8:	b8 68       	st.h	r12[0xc],r8
800070ca:	d8 22       	popm	r4-r7,pc

800070cc <__sinit>:
800070cc:	d4 21       	pushm	r4-r7,lr
800070ce:	18 96       	mov	r6,r12
800070d0:	78 67       	ld.w	r7,r12[0x18]
800070d2:	58 07       	cp.w	r7,0
800070d4:	c4 91       	brne	80007166 <__sinit+0x9a>
800070d6:	fe c8 00 aa 	sub	r8,pc,170
800070da:	30 15       	mov	r5,1
800070dc:	99 a8       	st.w	r12[0x28],r8
800070de:	f9 47 00 d8 	st.w	r12[216],r7
800070e2:	f9 47 00 dc 	st.w	r12[220],r7
800070e6:	f9 47 00 e0 	st.w	r12[224],r7
800070ea:	99 65       	st.w	r12[0x18],r5
800070ec:	cb af       	rcall	80007060 <__sfp>
800070ee:	8d 0c       	st.w	r6[0x0],r12
800070f0:	0c 9c       	mov	r12,r6
800070f2:	cb 7f       	rcall	80007060 <__sfp>
800070f4:	8d 1c       	st.w	r6[0x4],r12
800070f6:	0c 9c       	mov	r12,r6
800070f8:	cb 4f       	rcall	80007060 <__sfp>
800070fa:	6c 09       	ld.w	r9,r6[0x0]
800070fc:	30 48       	mov	r8,4
800070fe:	93 07       	st.w	r9[0x0],r7
80007100:	b2 68       	st.h	r9[0xc],r8
80007102:	93 17       	st.w	r9[0x4],r7
80007104:	93 27       	st.w	r9[0x8],r7
80007106:	6c 18       	ld.w	r8,r6[0x4]
80007108:	b2 77       	st.h	r9[0xe],r7
8000710a:	93 47       	st.w	r9[0x10],r7
8000710c:	93 57       	st.w	r9[0x14],r7
8000710e:	93 67       	st.w	r9[0x18],r7
80007110:	93 89       	st.w	r9[0x20],r9
80007112:	91 07       	st.w	r8[0x0],r7
80007114:	91 17       	st.w	r8[0x4],r7
80007116:	91 27       	st.w	r8[0x8],r7
80007118:	fe ce eb e4 	sub	lr,pc,-5148
8000711c:	fe cb ec 14 	sub	r11,pc,-5100
80007120:	93 9e       	st.w	r9[0x24],lr
80007122:	93 ab       	st.w	r9[0x28],r11
80007124:	fe ca ec 3c 	sub	r10,pc,-5060
80007128:	fe c4 ec 48 	sub	r4,pc,-5048
8000712c:	93 ba       	st.w	r9[0x2c],r10
8000712e:	93 c4       	st.w	r9[0x30],r4
80007130:	30 99       	mov	r9,9
80007132:	b0 69       	st.h	r8[0xc],r9
80007134:	b0 75       	st.h	r8[0xe],r5
80007136:	91 c4       	st.w	r8[0x30],r4
80007138:	91 47       	st.w	r8[0x10],r7
8000713a:	91 57       	st.w	r8[0x14],r7
8000713c:	91 67       	st.w	r8[0x18],r7
8000713e:	91 88       	st.w	r8[0x20],r8
80007140:	91 9e       	st.w	r8[0x24],lr
80007142:	91 ab       	st.w	r8[0x28],r11
80007144:	91 ba       	st.w	r8[0x2c],r10
80007146:	8d 2c       	st.w	r6[0x8],r12
80007148:	31 28       	mov	r8,18
8000714a:	99 07       	st.w	r12[0x0],r7
8000714c:	b8 68       	st.h	r12[0xc],r8
8000714e:	99 17       	st.w	r12[0x4],r7
80007150:	99 27       	st.w	r12[0x8],r7
80007152:	30 28       	mov	r8,2
80007154:	b8 78       	st.h	r12[0xe],r8
80007156:	99 c4       	st.w	r12[0x30],r4
80007158:	99 67       	st.w	r12[0x18],r7
8000715a:	99 9e       	st.w	r12[0x24],lr
8000715c:	99 ab       	st.w	r12[0x28],r11
8000715e:	99 ba       	st.w	r12[0x2c],r10
80007160:	99 47       	st.w	r12[0x10],r7
80007162:	99 57       	st.w	r12[0x14],r7
80007164:	99 8c       	st.w	r12[0x20],r12
80007166:	d8 22       	popm	r4-r7,pc

80007168 <_malloc_trim_r>:
80007168:	d4 21       	pushm	r4-r7,lr
8000716a:	16 95       	mov	r5,r11
8000716c:	18 97       	mov	r7,r12
8000716e:	e0 a0 05 38 	rcall	80007bde <__malloc_lock>
80007172:	e0 64 01 08 	mov	r4,264
80007176:	68 28       	ld.w	r8,r4[0x8]
80007178:	70 16       	ld.w	r6,r8[0x4]
8000717a:	e0 16 ff fc 	andl	r6,0xfffc
8000717e:	ec c8 ff 91 	sub	r8,r6,-111
80007182:	f0 05 01 05 	sub	r5,r8,r5
80007186:	e0 15 ff 80 	andl	r5,0xff80
8000718a:	ea c5 00 80 	sub	r5,r5,128
8000718e:	e0 45 00 7f 	cp.w	r5,127
80007192:	e0 8a 00 25 	brle	800071dc <_malloc_trim_r+0x74>
80007196:	30 0b       	mov	r11,0
80007198:	0e 9c       	mov	r12,r7
8000719a:	e0 a0 09 93 	rcall	800084c0 <_sbrk_r>
8000719e:	68 28       	ld.w	r8,r4[0x8]
800071a0:	0c 08       	add	r8,r6
800071a2:	10 3c       	cp.w	r12,r8
800071a4:	c1 c1       	brne	800071dc <_malloc_trim_r+0x74>
800071a6:	ea 0b 11 00 	rsub	r11,r5,0
800071aa:	0e 9c       	mov	r12,r7
800071ac:	e0 a0 09 8a 	rcall	800084c0 <_sbrk_r>
800071b0:	5b fc       	cp.w	r12,-1
800071b2:	c1 91       	brne	800071e4 <_malloc_trim_r+0x7c>
800071b4:	30 0b       	mov	r11,0
800071b6:	0e 9c       	mov	r12,r7
800071b8:	e0 a0 09 84 	rcall	800084c0 <_sbrk_r>
800071bc:	68 28       	ld.w	r8,r4[0x8]
800071be:	f8 08 01 09 	sub	r9,r12,r8
800071c2:	58 f9       	cp.w	r9,15
800071c4:	e0 8a 00 0c 	brle	800071dc <_malloc_trim_r+0x74>
800071c8:	a1 a9       	sbr	r9,0x0
800071ca:	91 19       	st.w	r8[0x4],r9
800071cc:	e0 68 05 14 	mov	r8,1300
800071d0:	70 09       	ld.w	r9,r8[0x0]
800071d2:	e0 68 06 34 	mov	r8,1588
800071d6:	f8 09 01 09 	sub	r9,r12,r9
800071da:	91 09       	st.w	r8[0x0],r9
800071dc:	0e 9c       	mov	r12,r7
800071de:	e0 a0 05 01 	rcall	80007be0 <__malloc_unlock>
800071e2:	d8 2a       	popm	r4-r7,pc,r12=0
800071e4:	68 28       	ld.w	r8,r4[0x8]
800071e6:	0a 16       	sub	r6,r5
800071e8:	a1 a6       	sbr	r6,0x0
800071ea:	91 16       	st.w	r8[0x4],r6
800071ec:	e0 68 06 34 	mov	r8,1588
800071f0:	70 09       	ld.w	r9,r8[0x0]
800071f2:	0a 19       	sub	r9,r5
800071f4:	0e 9c       	mov	r12,r7
800071f6:	91 09       	st.w	r8[0x0],r9
800071f8:	e0 a0 04 f4 	rcall	80007be0 <__malloc_unlock>
800071fc:	da 2a       	popm	r4-r7,pc,r12=1
800071fe:	d7 03       	nop

80007200 <_free_r>:
80007200:	d4 21       	pushm	r4-r7,lr
80007202:	16 96       	mov	r6,r11
80007204:	18 97       	mov	r7,r12
80007206:	58 0b       	cp.w	r11,0
80007208:	e0 80 00 c0 	breq	80007388 <_free_r+0x188>
8000720c:	e0 a0 04 e9 	rcall	80007bde <__malloc_lock>
80007210:	20 86       	sub	r6,8
80007212:	e0 6a 01 08 	mov	r10,264
80007216:	6c 18       	ld.w	r8,r6[0x4]
80007218:	74 2e       	ld.w	lr,r10[0x8]
8000721a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000721e:	a1 c8       	cbr	r8,0x0
80007220:	ec 08 00 09 	add	r9,r6,r8
80007224:	72 1b       	ld.w	r11,r9[0x4]
80007226:	e0 1b ff fc 	andl	r11,0xfffc
8000722a:	1c 39       	cp.w	r9,lr
8000722c:	c1 e1       	brne	80007268 <_free_r+0x68>
8000722e:	f6 08 00 08 	add	r8,r11,r8
80007232:	58 0c       	cp.w	r12,0
80007234:	c0 81       	brne	80007244 <_free_r+0x44>
80007236:	6c 09       	ld.w	r9,r6[0x0]
80007238:	12 16       	sub	r6,r9
8000723a:	12 08       	add	r8,r9
8000723c:	6c 3b       	ld.w	r11,r6[0xc]
8000723e:	6c 29       	ld.w	r9,r6[0x8]
80007240:	97 29       	st.w	r11[0x8],r9
80007242:	93 3b       	st.w	r9[0xc],r11
80007244:	10 99       	mov	r9,r8
80007246:	95 26       	st.w	r10[0x8],r6
80007248:	a1 a9       	sbr	r9,0x0
8000724a:	8d 19       	st.w	r6[0x4],r9
8000724c:	e0 69 05 10 	mov	r9,1296
80007250:	72 09       	ld.w	r9,r9[0x0]
80007252:	12 38       	cp.w	r8,r9
80007254:	c0 63       	brcs	80007260 <_free_r+0x60>
80007256:	e0 68 06 30 	mov	r8,1584
8000725a:	0e 9c       	mov	r12,r7
8000725c:	70 0b       	ld.w	r11,r8[0x0]
8000725e:	c8 5f       	rcall	80007168 <_malloc_trim_r>
80007260:	0e 9c       	mov	r12,r7
80007262:	e0 a0 04 bf 	rcall	80007be0 <__malloc_unlock>
80007266:	d8 22       	popm	r4-r7,pc
80007268:	93 1b       	st.w	r9[0x4],r11
8000726a:	58 0c       	cp.w	r12,0
8000726c:	c0 30       	breq	80007272 <_free_r+0x72>
8000726e:	30 0c       	mov	r12,0
80007270:	c1 08       	rjmp	80007290 <_free_r+0x90>
80007272:	6c 0e       	ld.w	lr,r6[0x0]
80007274:	f4 c5 ff f8 	sub	r5,r10,-8
80007278:	1c 16       	sub	r6,lr
8000727a:	1c 08       	add	r8,lr
8000727c:	6c 2e       	ld.w	lr,r6[0x8]
8000727e:	0a 3e       	cp.w	lr,r5
80007280:	f9 bc 00 01 	moveq	r12,1
80007284:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007288:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000728c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007290:	f2 0b 00 0e 	add	lr,r9,r11
80007294:	7c 1e       	ld.w	lr,lr[0x4]
80007296:	ed be 00 00 	bld	lr,0x0
8000729a:	c1 40       	breq	800072c2 <_free_r+0xc2>
8000729c:	16 08       	add	r8,r11
8000729e:	58 0c       	cp.w	r12,0
800072a0:	c0 d1       	brne	800072ba <_free_r+0xba>
800072a2:	e0 6e 01 08 	mov	lr,264
800072a6:	72 2b       	ld.w	r11,r9[0x8]
800072a8:	2f 8e       	sub	lr,-8
800072aa:	1c 3b       	cp.w	r11,lr
800072ac:	c0 71       	brne	800072ba <_free_r+0xba>
800072ae:	97 36       	st.w	r11[0xc],r6
800072b0:	97 26       	st.w	r11[0x8],r6
800072b2:	8d 2b       	st.w	r6[0x8],r11
800072b4:	8d 3b       	st.w	r6[0xc],r11
800072b6:	30 1c       	mov	r12,1
800072b8:	c0 58       	rjmp	800072c2 <_free_r+0xc2>
800072ba:	72 2b       	ld.w	r11,r9[0x8]
800072bc:	72 39       	ld.w	r9,r9[0xc]
800072be:	93 2b       	st.w	r9[0x8],r11
800072c0:	97 39       	st.w	r11[0xc],r9
800072c2:	10 99       	mov	r9,r8
800072c4:	ec 08 09 08 	st.w	r6[r8],r8
800072c8:	a1 a9       	sbr	r9,0x0
800072ca:	8d 19       	st.w	r6[0x4],r9
800072cc:	58 0c       	cp.w	r12,0
800072ce:	c5 a1       	brne	80007382 <_free_r+0x182>
800072d0:	e0 48 01 ff 	cp.w	r8,511
800072d4:	e0 8b 00 13 	brhi	800072fa <_free_r+0xfa>
800072d8:	a3 98       	lsr	r8,0x3
800072da:	f4 08 00 39 	add	r9,r10,r8<<0x3
800072de:	72 2b       	ld.w	r11,r9[0x8]
800072e0:	8d 39       	st.w	r6[0xc],r9
800072e2:	8d 2b       	st.w	r6[0x8],r11
800072e4:	97 36       	st.w	r11[0xc],r6
800072e6:	93 26       	st.w	r9[0x8],r6
800072e8:	a3 48       	asr	r8,0x2
800072ea:	74 19       	ld.w	r9,r10[0x4]
800072ec:	30 1b       	mov	r11,1
800072ee:	f6 08 09 48 	lsl	r8,r11,r8
800072f2:	f3 e8 10 08 	or	r8,r9,r8
800072f6:	95 18       	st.w	r10[0x4],r8
800072f8:	c4 58       	rjmp	80007382 <_free_r+0x182>
800072fa:	f0 0b 16 09 	lsr	r11,r8,0x9
800072fe:	58 4b       	cp.w	r11,4
80007300:	e0 8b 00 06 	brhi	8000730c <_free_r+0x10c>
80007304:	f0 0b 16 06 	lsr	r11,r8,0x6
80007308:	2c 8b       	sub	r11,-56
8000730a:	c2 08       	rjmp	8000734a <_free_r+0x14a>
8000730c:	59 4b       	cp.w	r11,20
8000730e:	e0 8b 00 04 	brhi	80007316 <_free_r+0x116>
80007312:	2a 5b       	sub	r11,-91
80007314:	c1 b8       	rjmp	8000734a <_free_r+0x14a>
80007316:	e0 4b 00 54 	cp.w	r11,84
8000731a:	e0 8b 00 06 	brhi	80007326 <_free_r+0x126>
8000731e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007322:	29 2b       	sub	r11,-110
80007324:	c1 38       	rjmp	8000734a <_free_r+0x14a>
80007326:	e0 4b 01 54 	cp.w	r11,340
8000732a:	e0 8b 00 06 	brhi	80007336 <_free_r+0x136>
8000732e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007332:	28 9b       	sub	r11,-119
80007334:	c0 b8       	rjmp	8000734a <_free_r+0x14a>
80007336:	e0 4b 05 54 	cp.w	r11,1364
8000733a:	e0 88 00 05 	brls	80007344 <_free_r+0x144>
8000733e:	37 eb       	mov	r11,126
80007340:	c0 58       	rjmp	8000734a <_free_r+0x14a>
80007342:	d7 03       	nop
80007344:	f0 0b 16 12 	lsr	r11,r8,0x12
80007348:	28 4b       	sub	r11,-124
8000734a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000734e:	78 29       	ld.w	r9,r12[0x8]
80007350:	18 39       	cp.w	r9,r12
80007352:	c0 e1       	brne	8000736e <_free_r+0x16e>
80007354:	74 18       	ld.w	r8,r10[0x4]
80007356:	a3 4b       	asr	r11,0x2
80007358:	30 1c       	mov	r12,1
8000735a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000735e:	f1 eb 10 0b 	or	r11,r8,r11
80007362:	12 98       	mov	r8,r9
80007364:	95 1b       	st.w	r10[0x4],r11
80007366:	c0 a8       	rjmp	8000737a <_free_r+0x17a>
80007368:	72 29       	ld.w	r9,r9[0x8]
8000736a:	18 39       	cp.w	r9,r12
8000736c:	c0 60       	breq	80007378 <_free_r+0x178>
8000736e:	72 1a       	ld.w	r10,r9[0x4]
80007370:	e0 1a ff fc 	andl	r10,0xfffc
80007374:	14 38       	cp.w	r8,r10
80007376:	cf 93       	brcs	80007368 <_free_r+0x168>
80007378:	72 38       	ld.w	r8,r9[0xc]
8000737a:	8d 38       	st.w	r6[0xc],r8
8000737c:	8d 29       	st.w	r6[0x8],r9
8000737e:	93 36       	st.w	r9[0xc],r6
80007380:	91 26       	st.w	r8[0x8],r6
80007382:	0e 9c       	mov	r12,r7
80007384:	e0 a0 04 2e 	rcall	80007be0 <__malloc_unlock>
80007388:	d8 22       	popm	r4-r7,pc
8000738a:	d7 03       	nop

8000738c <__sfvwrite_r>:
8000738c:	d4 31       	pushm	r0-r7,lr
8000738e:	20 3d       	sub	sp,12
80007390:	14 94       	mov	r4,r10
80007392:	18 95       	mov	r5,r12
80007394:	16 97       	mov	r7,r11
80007396:	74 28       	ld.w	r8,r10[0x8]
80007398:	58 08       	cp.w	r8,0
8000739a:	e0 80 01 45 	breq	80007624 <__sfvwrite_r+0x298>
8000739e:	96 68       	ld.sh	r8,r11[0xc]
800073a0:	ed b8 00 03 	bld	r8,0x3
800073a4:	c0 41       	brne	800073ac <__sfvwrite_r+0x20>
800073a6:	76 48       	ld.w	r8,r11[0x10]
800073a8:	58 08       	cp.w	r8,0
800073aa:	c0 c1       	brne	800073c2 <__sfvwrite_r+0x36>
800073ac:	0e 9b       	mov	r11,r7
800073ae:	0a 9c       	mov	r12,r5
800073b0:	fe b0 f6 ca 	rcall	80006144 <__swsetup_r>
800073b4:	c0 70       	breq	800073c2 <__sfvwrite_r+0x36>
800073b6:	8e 68       	ld.sh	r8,r7[0xc]
800073b8:	a7 a8       	sbr	r8,0x6
800073ba:	ae 68       	st.h	r7[0xc],r8
800073bc:	30 98       	mov	r8,9
800073be:	8b 38       	st.w	r5[0xc],r8
800073c0:	c3 09       	rjmp	80007620 <__sfvwrite_r+0x294>
800073c2:	8e 63       	ld.sh	r3,r7[0xc]
800073c4:	68 00       	ld.w	r0,r4[0x0]
800073c6:	06 96       	mov	r6,r3
800073c8:	e2 16 00 02 	andl	r6,0x2,COH
800073cc:	c2 10       	breq	8000740e <__sfvwrite_r+0x82>
800073ce:	30 03       	mov	r3,0
800073d0:	e0 62 04 00 	mov	r2,1024
800073d4:	06 96       	mov	r6,r3
800073d6:	c0 48       	rjmp	800073de <__sfvwrite_r+0x52>
800073d8:	60 03       	ld.w	r3,r0[0x0]
800073da:	60 16       	ld.w	r6,r0[0x4]
800073dc:	2f 80       	sub	r0,-8
800073de:	58 06       	cp.w	r6,0
800073e0:	cf c0       	breq	800073d8 <__sfvwrite_r+0x4c>
800073e2:	e0 46 04 00 	cp.w	r6,1024
800073e6:	ec 09 17 80 	movls	r9,r6
800073ea:	e4 09 17 b0 	movhi	r9,r2
800073ee:	06 9a       	mov	r10,r3
800073f0:	6e a8       	ld.w	r8,r7[0x28]
800073f2:	6e 8b       	ld.w	r11,r7[0x20]
800073f4:	0a 9c       	mov	r12,r5
800073f6:	5d 18       	icall	r8
800073f8:	18 16       	sub	r6,r12
800073fa:	58 0c       	cp.w	r12,0
800073fc:	e0 8a 01 0f 	brle	8000761a <__sfvwrite_r+0x28e>
80007400:	68 28       	ld.w	r8,r4[0x8]
80007402:	18 18       	sub	r8,r12
80007404:	89 28       	st.w	r4[0x8],r8
80007406:	e0 80 01 0f 	breq	80007624 <__sfvwrite_r+0x298>
8000740a:	18 03       	add	r3,r12
8000740c:	ce 9b       	rjmp	800073de <__sfvwrite_r+0x52>
8000740e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007412:	c0 70       	breq	80007420 <__sfvwrite_r+0x94>
80007414:	50 06       	stdsp	sp[0x0],r6
80007416:	0c 93       	mov	r3,r6
80007418:	0c 91       	mov	r1,r6
8000741a:	50 15       	stdsp	sp[0x4],r5
8000741c:	08 92       	mov	r2,r4
8000741e:	c9 e8       	rjmp	8000755a <__sfvwrite_r+0x1ce>
80007420:	06 96       	mov	r6,r3
80007422:	08 91       	mov	r1,r4
80007424:	c0 48       	rjmp	8000742c <__sfvwrite_r+0xa0>
80007426:	60 03       	ld.w	r3,r0[0x0]
80007428:	60 16       	ld.w	r6,r0[0x4]
8000742a:	2f 80       	sub	r0,-8
8000742c:	58 06       	cp.w	r6,0
8000742e:	cf c0       	breq	80007426 <__sfvwrite_r+0x9a>
80007430:	8e 68       	ld.sh	r8,r7[0xc]
80007432:	6e 24       	ld.w	r4,r7[0x8]
80007434:	10 99       	mov	r9,r8
80007436:	e2 19 02 00 	andl	r9,0x200,COH
8000743a:	c5 50       	breq	800074e4 <__sfvwrite_r+0x158>
8000743c:	08 36       	cp.w	r6,r4
8000743e:	c4 33       	brcs	800074c4 <__sfvwrite_r+0x138>
80007440:	10 99       	mov	r9,r8
80007442:	e2 19 04 80 	andl	r9,0x480,COH
80007446:	c3 f0       	breq	800074c4 <__sfvwrite_r+0x138>
80007448:	6e 4b       	ld.w	r11,r7[0x10]
8000744a:	6e 09       	ld.w	r9,r7[0x0]
8000744c:	16 19       	sub	r9,r11
8000744e:	50 09       	stdsp	sp[0x0],r9
80007450:	6e 59       	ld.w	r9,r7[0x14]
80007452:	10 9c       	mov	r12,r8
80007454:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007458:	30 28       	mov	r8,2
8000745a:	f4 08 0c 08 	divs	r8,r10,r8
8000745e:	fa e9 00 04 	st.d	sp[4],r8
80007462:	10 94       	mov	r4,r8
80007464:	40 09       	lddsp	r9,sp[0x0]
80007466:	e2 1c 04 00 	andl	r12,0x400,COH
8000746a:	2f f9       	sub	r9,-1
8000746c:	0c 09       	add	r9,r6
8000746e:	12 38       	cp.w	r8,r9
80007470:	f2 04 17 30 	movlo	r4,r9
80007474:	58 0c       	cp.w	r12,0
80007476:	c1 00       	breq	80007496 <__sfvwrite_r+0x10a>
80007478:	08 9b       	mov	r11,r4
8000747a:	0a 9c       	mov	r12,r5
8000747c:	c6 8d       	rcall	8000774c <_malloc_r>
8000747e:	18 92       	mov	r2,r12
80007480:	c1 40       	breq	800074a8 <__sfvwrite_r+0x11c>
80007482:	40 0a       	lddsp	r10,sp[0x0]
80007484:	6e 4b       	ld.w	r11,r7[0x10]
80007486:	fe b0 e4 79 	rcall	80003d78 <memcpy>
8000748a:	8e 68       	ld.sh	r8,r7[0xc]
8000748c:	e0 18 fb 7f 	andl	r8,0xfb7f
80007490:	a7 b8       	sbr	r8,0x7
80007492:	ae 68       	st.h	r7[0xc],r8
80007494:	c0 d8       	rjmp	800074ae <__sfvwrite_r+0x122>
80007496:	08 9a       	mov	r10,r4
80007498:	0a 9c       	mov	r12,r5
8000749a:	e0 a0 06 8f 	rcall	800081b8 <_realloc_r>
8000749e:	18 92       	mov	r2,r12
800074a0:	c0 71       	brne	800074ae <__sfvwrite_r+0x122>
800074a2:	6e 4b       	ld.w	r11,r7[0x10]
800074a4:	0a 9c       	mov	r12,r5
800074a6:	ca de       	rcall	80007200 <_free_r>
800074a8:	30 c8       	mov	r8,12
800074aa:	8b 38       	st.w	r5[0xc],r8
800074ac:	cb 78       	rjmp	8000761a <__sfvwrite_r+0x28e>
800074ae:	40 0a       	lddsp	r10,sp[0x0]
800074b0:	40 09       	lddsp	r9,sp[0x0]
800074b2:	e8 0a 01 0a 	sub	r10,r4,r10
800074b6:	e4 09 00 08 	add	r8,r2,r9
800074ba:	8f 54       	st.w	r7[0x14],r4
800074bc:	8f 2a       	st.w	r7[0x8],r10
800074be:	8f 08       	st.w	r7[0x0],r8
800074c0:	8f 42       	st.w	r7[0x10],r2
800074c2:	0c 94       	mov	r4,r6
800074c4:	08 36       	cp.w	r6,r4
800074c6:	ec 04 17 30 	movlo	r4,r6
800074ca:	06 9b       	mov	r11,r3
800074cc:	08 9a       	mov	r10,r4
800074ce:	6e 0c       	ld.w	r12,r7[0x0]
800074d0:	e0 a0 03 61 	rcall	80007b92 <memmove>
800074d4:	6e 08       	ld.w	r8,r7[0x0]
800074d6:	08 08       	add	r8,r4
800074d8:	8f 08       	st.w	r7[0x0],r8
800074da:	6e 28       	ld.w	r8,r7[0x8]
800074dc:	08 18       	sub	r8,r4
800074de:	0c 94       	mov	r4,r6
800074e0:	8f 28       	st.w	r7[0x8],r8
800074e2:	c3 08       	rjmp	80007542 <__sfvwrite_r+0x1b6>
800074e4:	08 36       	cp.w	r6,r4
800074e6:	5f ba       	srhi	r10
800074e8:	6e 0c       	ld.w	r12,r7[0x0]
800074ea:	6e 48       	ld.w	r8,r7[0x10]
800074ec:	10 3c       	cp.w	r12,r8
800074ee:	5f b8       	srhi	r8
800074f0:	f5 e8 00 08 	and	r8,r10,r8
800074f4:	f2 08 18 00 	cp.b	r8,r9
800074f8:	c0 e0       	breq	80007514 <__sfvwrite_r+0x188>
800074fa:	06 9b       	mov	r11,r3
800074fc:	08 9a       	mov	r10,r4
800074fe:	e0 a0 03 4a 	rcall	80007b92 <memmove>
80007502:	6e 08       	ld.w	r8,r7[0x0]
80007504:	08 08       	add	r8,r4
80007506:	0e 9b       	mov	r11,r7
80007508:	8f 08       	st.w	r7[0x0],r8
8000750a:	0a 9c       	mov	r12,r5
8000750c:	fe b0 fd 08 	rcall	80006f1c <_fflush_r>
80007510:	c1 90       	breq	80007542 <__sfvwrite_r+0x1b6>
80007512:	c8 48       	rjmp	8000761a <__sfvwrite_r+0x28e>
80007514:	6e 59       	ld.w	r9,r7[0x14]
80007516:	12 36       	cp.w	r6,r9
80007518:	c0 a3       	brcs	8000752c <__sfvwrite_r+0x1a0>
8000751a:	6e a8       	ld.w	r8,r7[0x28]
8000751c:	06 9a       	mov	r10,r3
8000751e:	6e 8b       	ld.w	r11,r7[0x20]
80007520:	0a 9c       	mov	r12,r5
80007522:	5d 18       	icall	r8
80007524:	18 94       	mov	r4,r12
80007526:	e0 89 00 0e 	brgt	80007542 <__sfvwrite_r+0x1b6>
8000752a:	c7 88       	rjmp	8000761a <__sfvwrite_r+0x28e>
8000752c:	0c 9a       	mov	r10,r6
8000752e:	06 9b       	mov	r11,r3
80007530:	e0 a0 03 31 	rcall	80007b92 <memmove>
80007534:	6e 08       	ld.w	r8,r7[0x0]
80007536:	0c 08       	add	r8,r6
80007538:	0c 94       	mov	r4,r6
8000753a:	8f 08       	st.w	r7[0x0],r8
8000753c:	6e 28       	ld.w	r8,r7[0x8]
8000753e:	0c 18       	sub	r8,r6
80007540:	8f 28       	st.w	r7[0x8],r8
80007542:	62 28       	ld.w	r8,r1[0x8]
80007544:	08 18       	sub	r8,r4
80007546:	83 28       	st.w	r1[0x8],r8
80007548:	c6 e0       	breq	80007624 <__sfvwrite_r+0x298>
8000754a:	08 16       	sub	r6,r4
8000754c:	08 03       	add	r3,r4
8000754e:	c6 fb       	rjmp	8000742c <__sfvwrite_r+0xa0>
80007550:	60 03       	ld.w	r3,r0[0x0]
80007552:	60 11       	ld.w	r1,r0[0x4]
80007554:	30 08       	mov	r8,0
80007556:	2f 80       	sub	r0,-8
80007558:	50 08       	stdsp	sp[0x0],r8
8000755a:	58 01       	cp.w	r1,0
8000755c:	cf a0       	breq	80007550 <__sfvwrite_r+0x1c4>
8000755e:	40 0a       	lddsp	r10,sp[0x0]
80007560:	58 0a       	cp.w	r10,0
80007562:	c1 51       	brne	8000758c <__sfvwrite_r+0x200>
80007564:	e2 c6 ff ff 	sub	r6,r1,-1
80007568:	02 9a       	mov	r10,r1
8000756a:	30 ab       	mov	r11,10
8000756c:	06 9c       	mov	r12,r3
8000756e:	e0 a0 03 07 	rcall	80007b7c <memchr>
80007572:	f8 c8 ff ff 	sub	r8,r12,-1
80007576:	58 0c       	cp.w	r12,0
80007578:	f1 d3 e1 16 	subne	r6,r8,r3
8000757c:	f9 b9 01 01 	movne	r9,1
80007580:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007584:	f9 b8 00 01 	moveq	r8,1
80007588:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000758c:	02 36       	cp.w	r6,r1
8000758e:	ec 04 17 80 	movls	r4,r6
80007592:	e2 04 17 b0 	movhi	r4,r1
80007596:	6e 59       	ld.w	r9,r7[0x14]
80007598:	6e 25       	ld.w	r5,r7[0x8]
8000759a:	f2 05 00 05 	add	r5,r9,r5
8000759e:	0a 34       	cp.w	r4,r5
800075a0:	5f 9a       	srgt	r10
800075a2:	6e 0c       	ld.w	r12,r7[0x0]
800075a4:	6e 48       	ld.w	r8,r7[0x10]
800075a6:	10 3c       	cp.w	r12,r8
800075a8:	5f b8       	srhi	r8
800075aa:	f5 e8 00 08 	and	r8,r10,r8
800075ae:	30 0a       	mov	r10,0
800075b0:	f4 08 18 00 	cp.b	r8,r10
800075b4:	c0 e0       	breq	800075d0 <__sfvwrite_r+0x244>
800075b6:	06 9b       	mov	r11,r3
800075b8:	0a 9a       	mov	r10,r5
800075ba:	e0 a0 02 ec 	rcall	80007b92 <memmove>
800075be:	6e 08       	ld.w	r8,r7[0x0]
800075c0:	0a 08       	add	r8,r5
800075c2:	0e 9b       	mov	r11,r7
800075c4:	8f 08       	st.w	r7[0x0],r8
800075c6:	40 1c       	lddsp	r12,sp[0x4]
800075c8:	fe b0 fc aa 	rcall	80006f1c <_fflush_r>
800075cc:	c1 80       	breq	800075fc <__sfvwrite_r+0x270>
800075ce:	c2 68       	rjmp	8000761a <__sfvwrite_r+0x28e>
800075d0:	12 34       	cp.w	r4,r9
800075d2:	c0 a5       	brlt	800075e6 <__sfvwrite_r+0x25a>
800075d4:	6e a8       	ld.w	r8,r7[0x28]
800075d6:	06 9a       	mov	r10,r3
800075d8:	6e 8b       	ld.w	r11,r7[0x20]
800075da:	40 1c       	lddsp	r12,sp[0x4]
800075dc:	5d 18       	icall	r8
800075de:	18 95       	mov	r5,r12
800075e0:	e0 89 00 0e 	brgt	800075fc <__sfvwrite_r+0x270>
800075e4:	c1 b8       	rjmp	8000761a <__sfvwrite_r+0x28e>
800075e6:	08 9a       	mov	r10,r4
800075e8:	06 9b       	mov	r11,r3
800075ea:	e0 a0 02 d4 	rcall	80007b92 <memmove>
800075ee:	6e 08       	ld.w	r8,r7[0x0]
800075f0:	08 08       	add	r8,r4
800075f2:	08 95       	mov	r5,r4
800075f4:	8f 08       	st.w	r7[0x0],r8
800075f6:	6e 28       	ld.w	r8,r7[0x8]
800075f8:	08 18       	sub	r8,r4
800075fa:	8f 28       	st.w	r7[0x8],r8
800075fc:	0a 16       	sub	r6,r5
800075fe:	c0 71       	brne	8000760c <__sfvwrite_r+0x280>
80007600:	0e 9b       	mov	r11,r7
80007602:	40 1c       	lddsp	r12,sp[0x4]
80007604:	fe b0 fc 8c 	rcall	80006f1c <_fflush_r>
80007608:	c0 91       	brne	8000761a <__sfvwrite_r+0x28e>
8000760a:	50 06       	stdsp	sp[0x0],r6
8000760c:	64 28       	ld.w	r8,r2[0x8]
8000760e:	0a 18       	sub	r8,r5
80007610:	85 28       	st.w	r2[0x8],r8
80007612:	c0 90       	breq	80007624 <__sfvwrite_r+0x298>
80007614:	0a 11       	sub	r1,r5
80007616:	0a 03       	add	r3,r5
80007618:	ca 1b       	rjmp	8000755a <__sfvwrite_r+0x1ce>
8000761a:	8e 68       	ld.sh	r8,r7[0xc]
8000761c:	a7 a8       	sbr	r8,0x6
8000761e:	ae 68       	st.h	r7[0xc],r8
80007620:	3f fc       	mov	r12,-1
80007622:	c0 28       	rjmp	80007626 <__sfvwrite_r+0x29a>
80007624:	30 0c       	mov	r12,0
80007626:	2f dd       	sub	sp,-12
80007628:	d8 32       	popm	r0-r7,pc
8000762a:	d7 03       	nop

8000762c <_fwalk>:
8000762c:	d4 31       	pushm	r0-r7,lr
8000762e:	30 05       	mov	r5,0
80007630:	16 91       	mov	r1,r11
80007632:	f8 c7 ff 28 	sub	r7,r12,-216
80007636:	0a 92       	mov	r2,r5
80007638:	fe b0 fc f8 	rcall	80007028 <__sfp_lock_acquire>
8000763c:	3f f3       	mov	r3,-1
8000763e:	c1 68       	rjmp	8000766a <_fwalk+0x3e>
80007640:	6e 26       	ld.w	r6,r7[0x8]
80007642:	6e 14       	ld.w	r4,r7[0x4]
80007644:	2f 46       	sub	r6,-12
80007646:	c0 c8       	rjmp	8000765e <_fwalk+0x32>
80007648:	8c 08       	ld.sh	r8,r6[0x0]
8000764a:	e4 08 19 00 	cp.h	r8,r2
8000764e:	c0 70       	breq	8000765c <_fwalk+0x30>
80007650:	8c 18       	ld.sh	r8,r6[0x2]
80007652:	e6 08 19 00 	cp.h	r8,r3
80007656:	c0 30       	breq	8000765c <_fwalk+0x30>
80007658:	5d 11       	icall	r1
8000765a:	18 45       	or	r5,r12
8000765c:	2a 46       	sub	r6,-92
8000765e:	20 14       	sub	r4,1
80007660:	ec cc 00 0c 	sub	r12,r6,12
80007664:	58 04       	cp.w	r4,0
80007666:	cf 14       	brge	80007648 <_fwalk+0x1c>
80007668:	6e 07       	ld.w	r7,r7[0x0]
8000766a:	58 07       	cp.w	r7,0
8000766c:	ce a1       	brne	80007640 <_fwalk+0x14>
8000766e:	fe b0 fc de 	rcall	8000702a <__sfp_lock_release>
80007672:	0a 9c       	mov	r12,r5
80007674:	d8 32       	popm	r0-r7,pc
80007676:	d7 03       	nop

80007678 <_localeconv_r>:
80007678:	fe cc da 58 	sub	r12,pc,-9640
8000767c:	5e fc       	retal	r12
8000767e:	d7 03       	nop

80007680 <__smakebuf_r>:
80007680:	d4 21       	pushm	r4-r7,lr
80007682:	20 fd       	sub	sp,60
80007684:	96 68       	ld.sh	r8,r11[0xc]
80007686:	16 97       	mov	r7,r11
80007688:	18 96       	mov	r6,r12
8000768a:	e2 18 00 02 	andl	r8,0x2,COH
8000768e:	c3 c1       	brne	80007706 <__smakebuf_r+0x86>
80007690:	96 7b       	ld.sh	r11,r11[0xe]
80007692:	f0 0b 19 00 	cp.h	r11,r8
80007696:	c0 55       	brlt	800076a0 <__smakebuf_r+0x20>
80007698:	1a 9a       	mov	r10,sp
8000769a:	e0 a0 08 9d 	rcall	800087d4 <_fstat_r>
8000769e:	c0 f4       	brge	800076bc <__smakebuf_r+0x3c>
800076a0:	8e 65       	ld.sh	r5,r7[0xc]
800076a2:	0a 98       	mov	r8,r5
800076a4:	ab b8       	sbr	r8,0xb
800076a6:	e2 15 00 80 	andl	r5,0x80,COH
800076aa:	ae 68       	st.h	r7[0xc],r8
800076ac:	30 04       	mov	r4,0
800076ae:	e0 68 04 00 	mov	r8,1024
800076b2:	f9 b5 01 40 	movne	r5,64
800076b6:	f0 05 17 00 	moveq	r5,r8
800076ba:	c1 c8       	rjmp	800076f2 <__smakebuf_r+0x72>
800076bc:	40 18       	lddsp	r8,sp[0x4]
800076be:	e2 18 f0 00 	andl	r8,0xf000,COH
800076c2:	e0 48 20 00 	cp.w	r8,8192
800076c6:	5f 04       	sreq	r4
800076c8:	e0 48 80 00 	cp.w	r8,32768
800076cc:	c0 e1       	brne	800076e8 <__smakebuf_r+0x68>
800076ce:	6e b9       	ld.w	r9,r7[0x2c]
800076d0:	fe c8 f1 e8 	sub	r8,pc,-3608
800076d4:	10 39       	cp.w	r9,r8
800076d6:	c0 91       	brne	800076e8 <__smakebuf_r+0x68>
800076d8:	8e 68       	ld.sh	r8,r7[0xc]
800076da:	e0 65 04 00 	mov	r5,1024
800076de:	ab a8       	sbr	r8,0xa
800076e0:	ef 45 00 50 	st.w	r7[80],r5
800076e4:	ae 68       	st.h	r7[0xc],r8
800076e6:	c0 68       	rjmp	800076f2 <__smakebuf_r+0x72>
800076e8:	8e 68       	ld.sh	r8,r7[0xc]
800076ea:	e0 65 04 00 	mov	r5,1024
800076ee:	ab b8       	sbr	r8,0xb
800076f0:	ae 68       	st.h	r7[0xc],r8
800076f2:	0a 9b       	mov	r11,r5
800076f4:	0c 9c       	mov	r12,r6
800076f6:	c2 bc       	rcall	8000774c <_malloc_r>
800076f8:	8e 68       	ld.sh	r8,r7[0xc]
800076fa:	c0 d1       	brne	80007714 <__smakebuf_r+0x94>
800076fc:	ed b8 00 09 	bld	r8,0x9
80007700:	c1 b0       	breq	80007736 <__smakebuf_r+0xb6>
80007702:	a1 b8       	sbr	r8,0x1
80007704:	ae 68       	st.h	r7[0xc],r8
80007706:	ee c8 ff b9 	sub	r8,r7,-71
8000770a:	8f 48       	st.w	r7[0x10],r8
8000770c:	8f 08       	st.w	r7[0x0],r8
8000770e:	30 18       	mov	r8,1
80007710:	8f 58       	st.w	r7[0x14],r8
80007712:	c1 28       	rjmp	80007736 <__smakebuf_r+0xb6>
80007714:	a7 b8       	sbr	r8,0x7
80007716:	8f 4c       	st.w	r7[0x10],r12
80007718:	ae 68       	st.h	r7[0xc],r8
8000771a:	8f 55       	st.w	r7[0x14],r5
8000771c:	fe c8 06 f0 	sub	r8,pc,1776
80007720:	8f 0c       	st.w	r7[0x0],r12
80007722:	8d a8       	st.w	r6[0x28],r8
80007724:	58 04       	cp.w	r4,0
80007726:	c0 80       	breq	80007736 <__smakebuf_r+0xb6>
80007728:	8e 7c       	ld.sh	r12,r7[0xe]
8000772a:	e0 a0 07 47 	rcall	800085b8 <isatty>
8000772e:	c0 40       	breq	80007736 <__smakebuf_r+0xb6>
80007730:	8e 68       	ld.sh	r8,r7[0xc]
80007732:	a1 a8       	sbr	r8,0x0
80007734:	ae 68       	st.h	r7[0xc],r8
80007736:	2f 1d       	sub	sp,-60
80007738:	d8 22       	popm	r4-r7,pc
8000773a:	d7 03       	nop

8000773c <malloc>:
8000773c:	d4 01       	pushm	lr
8000773e:	e0 68 01 04 	mov	r8,260
80007742:	18 9b       	mov	r11,r12
80007744:	70 0c       	ld.w	r12,r8[0x0]
80007746:	c0 3c       	rcall	8000774c <_malloc_r>
80007748:	d8 02       	popm	pc
8000774a:	d7 03       	nop

8000774c <_malloc_r>:
8000774c:	d4 31       	pushm	r0-r7,lr
8000774e:	f6 c8 ff f5 	sub	r8,r11,-11
80007752:	18 95       	mov	r5,r12
80007754:	10 97       	mov	r7,r8
80007756:	e0 17 ff f8 	andl	r7,0xfff8
8000775a:	59 68       	cp.w	r8,22
8000775c:	f9 b7 08 10 	movls	r7,16
80007760:	16 37       	cp.w	r7,r11
80007762:	5f 38       	srlo	r8
80007764:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007768:	c0 50       	breq	80007772 <_malloc_r+0x26>
8000776a:	30 c8       	mov	r8,12
8000776c:	99 38       	st.w	r12[0xc],r8
8000776e:	e0 8f 01 f7 	bral	80007b5c <_malloc_r+0x410>
80007772:	e0 a0 02 36 	rcall	80007bde <__malloc_lock>
80007776:	e0 47 01 f7 	cp.w	r7,503
8000777a:	e0 8b 00 1d 	brhi	800077b4 <_malloc_r+0x68>
8000777e:	ee 03 16 03 	lsr	r3,r7,0x3
80007782:	e0 68 01 08 	mov	r8,264
80007786:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000778a:	70 36       	ld.w	r6,r8[0xc]
8000778c:	10 36       	cp.w	r6,r8
8000778e:	c0 61       	brne	8000779a <_malloc_r+0x4e>
80007790:	ec c8 ff f8 	sub	r8,r6,-8
80007794:	70 36       	ld.w	r6,r8[0xc]
80007796:	10 36       	cp.w	r6,r8
80007798:	c0 c0       	breq	800077b0 <_malloc_r+0x64>
8000779a:	6c 18       	ld.w	r8,r6[0x4]
8000779c:	e0 18 ff fc 	andl	r8,0xfffc
800077a0:	6c 3a       	ld.w	r10,r6[0xc]
800077a2:	ec 08 00 09 	add	r9,r6,r8
800077a6:	0a 9c       	mov	r12,r5
800077a8:	6c 28       	ld.w	r8,r6[0x8]
800077aa:	95 28       	st.w	r10[0x8],r8
800077ac:	91 3a       	st.w	r8[0xc],r10
800077ae:	c4 78       	rjmp	8000783c <_malloc_r+0xf0>
800077b0:	2f e3       	sub	r3,-2
800077b2:	c4 d8       	rjmp	8000784c <_malloc_r+0x100>
800077b4:	ee 03 16 09 	lsr	r3,r7,0x9
800077b8:	c0 41       	brne	800077c0 <_malloc_r+0x74>
800077ba:	ee 03 16 03 	lsr	r3,r7,0x3
800077be:	c2 68       	rjmp	8000780a <_malloc_r+0xbe>
800077c0:	58 43       	cp.w	r3,4
800077c2:	e0 8b 00 06 	brhi	800077ce <_malloc_r+0x82>
800077c6:	ee 03 16 06 	lsr	r3,r7,0x6
800077ca:	2c 83       	sub	r3,-56
800077cc:	c1 f8       	rjmp	8000780a <_malloc_r+0xbe>
800077ce:	59 43       	cp.w	r3,20
800077d0:	e0 8b 00 04 	brhi	800077d8 <_malloc_r+0x8c>
800077d4:	2a 53       	sub	r3,-91
800077d6:	c1 a8       	rjmp	8000780a <_malloc_r+0xbe>
800077d8:	e0 43 00 54 	cp.w	r3,84
800077dc:	e0 8b 00 06 	brhi	800077e8 <_malloc_r+0x9c>
800077e0:	ee 03 16 0c 	lsr	r3,r7,0xc
800077e4:	29 23       	sub	r3,-110
800077e6:	c1 28       	rjmp	8000780a <_malloc_r+0xbe>
800077e8:	e0 43 01 54 	cp.w	r3,340
800077ec:	e0 8b 00 06 	brhi	800077f8 <_malloc_r+0xac>
800077f0:	ee 03 16 0f 	lsr	r3,r7,0xf
800077f4:	28 93       	sub	r3,-119
800077f6:	c0 a8       	rjmp	8000780a <_malloc_r+0xbe>
800077f8:	e0 43 05 54 	cp.w	r3,1364
800077fc:	e0 88 00 04 	brls	80007804 <_malloc_r+0xb8>
80007800:	37 e3       	mov	r3,126
80007802:	c0 48       	rjmp	8000780a <_malloc_r+0xbe>
80007804:	ee 03 16 12 	lsr	r3,r7,0x12
80007808:	28 43       	sub	r3,-124
8000780a:	e0 6a 01 08 	mov	r10,264
8000780e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007812:	74 36       	ld.w	r6,r10[0xc]
80007814:	c1 98       	rjmp	80007846 <_malloc_r+0xfa>
80007816:	6c 19       	ld.w	r9,r6[0x4]
80007818:	e0 19 ff fc 	andl	r9,0xfffc
8000781c:	f2 07 01 0b 	sub	r11,r9,r7
80007820:	58 fb       	cp.w	r11,15
80007822:	e0 8a 00 04 	brle	8000782a <_malloc_r+0xde>
80007826:	20 13       	sub	r3,1
80007828:	c1 18       	rjmp	8000784a <_malloc_r+0xfe>
8000782a:	6c 38       	ld.w	r8,r6[0xc]
8000782c:	58 0b       	cp.w	r11,0
8000782e:	c0 b5       	brlt	80007844 <_malloc_r+0xf8>
80007830:	6c 2a       	ld.w	r10,r6[0x8]
80007832:	ec 09 00 09 	add	r9,r6,r9
80007836:	0a 9c       	mov	r12,r5
80007838:	91 2a       	st.w	r8[0x8],r10
8000783a:	95 38       	st.w	r10[0xc],r8
8000783c:	72 18       	ld.w	r8,r9[0x4]
8000783e:	a1 a8       	sbr	r8,0x0
80007840:	93 18       	st.w	r9[0x4],r8
80007842:	cb c8       	rjmp	800079ba <_malloc_r+0x26e>
80007844:	10 96       	mov	r6,r8
80007846:	14 36       	cp.w	r6,r10
80007848:	ce 71       	brne	80007816 <_malloc_r+0xca>
8000784a:	2f f3       	sub	r3,-1
8000784c:	e0 6a 01 08 	mov	r10,264
80007850:	f4 cc ff f8 	sub	r12,r10,-8
80007854:	78 26       	ld.w	r6,r12[0x8]
80007856:	18 36       	cp.w	r6,r12
80007858:	c6 c0       	breq	80007930 <_malloc_r+0x1e4>
8000785a:	6c 19       	ld.w	r9,r6[0x4]
8000785c:	e0 19 ff fc 	andl	r9,0xfffc
80007860:	f2 07 01 08 	sub	r8,r9,r7
80007864:	58 f8       	cp.w	r8,15
80007866:	e0 89 00 8f 	brgt	80007984 <_malloc_r+0x238>
8000786a:	99 3c       	st.w	r12[0xc],r12
8000786c:	99 2c       	st.w	r12[0x8],r12
8000786e:	58 08       	cp.w	r8,0
80007870:	c0 55       	brlt	8000787a <_malloc_r+0x12e>
80007872:	ec 09 00 09 	add	r9,r6,r9
80007876:	0a 9c       	mov	r12,r5
80007878:	ce 2b       	rjmp	8000783c <_malloc_r+0xf0>
8000787a:	e0 49 01 ff 	cp.w	r9,511
8000787e:	e0 8b 00 13 	brhi	800078a4 <_malloc_r+0x158>
80007882:	a3 99       	lsr	r9,0x3
80007884:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007888:	70 2b       	ld.w	r11,r8[0x8]
8000788a:	8d 38       	st.w	r6[0xc],r8
8000788c:	8d 2b       	st.w	r6[0x8],r11
8000788e:	97 36       	st.w	r11[0xc],r6
80007890:	91 26       	st.w	r8[0x8],r6
80007892:	a3 49       	asr	r9,0x2
80007894:	74 18       	ld.w	r8,r10[0x4]
80007896:	30 1b       	mov	r11,1
80007898:	f6 09 09 49 	lsl	r9,r11,r9
8000789c:	f1 e9 10 09 	or	r9,r8,r9
800078a0:	95 19       	st.w	r10[0x4],r9
800078a2:	c4 78       	rjmp	80007930 <_malloc_r+0x1e4>
800078a4:	f2 0a 16 09 	lsr	r10,r9,0x9
800078a8:	58 4a       	cp.w	r10,4
800078aa:	e0 8b 00 07 	brhi	800078b8 <_malloc_r+0x16c>
800078ae:	f2 0a 16 06 	lsr	r10,r9,0x6
800078b2:	2c 8a       	sub	r10,-56
800078b4:	c2 08       	rjmp	800078f4 <_malloc_r+0x1a8>
800078b6:	d7 03       	nop
800078b8:	59 4a       	cp.w	r10,20
800078ba:	e0 8b 00 04 	brhi	800078c2 <_malloc_r+0x176>
800078be:	2a 5a       	sub	r10,-91
800078c0:	c1 a8       	rjmp	800078f4 <_malloc_r+0x1a8>
800078c2:	e0 4a 00 54 	cp.w	r10,84
800078c6:	e0 8b 00 06 	brhi	800078d2 <_malloc_r+0x186>
800078ca:	f2 0a 16 0c 	lsr	r10,r9,0xc
800078ce:	29 2a       	sub	r10,-110
800078d0:	c1 28       	rjmp	800078f4 <_malloc_r+0x1a8>
800078d2:	e0 4a 01 54 	cp.w	r10,340
800078d6:	e0 8b 00 06 	brhi	800078e2 <_malloc_r+0x196>
800078da:	f2 0a 16 0f 	lsr	r10,r9,0xf
800078de:	28 9a       	sub	r10,-119
800078e0:	c0 a8       	rjmp	800078f4 <_malloc_r+0x1a8>
800078e2:	e0 4a 05 54 	cp.w	r10,1364
800078e6:	e0 88 00 04 	brls	800078ee <_malloc_r+0x1a2>
800078ea:	37 ea       	mov	r10,126
800078ec:	c0 48       	rjmp	800078f4 <_malloc_r+0x1a8>
800078ee:	f2 0a 16 12 	lsr	r10,r9,0x12
800078f2:	28 4a       	sub	r10,-124
800078f4:	e0 6b 01 08 	mov	r11,264
800078f8:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800078fc:	68 28       	ld.w	r8,r4[0x8]
800078fe:	08 38       	cp.w	r8,r4
80007900:	c0 e1       	brne	8000791c <_malloc_r+0x1d0>
80007902:	76 19       	ld.w	r9,r11[0x4]
80007904:	a3 4a       	asr	r10,0x2
80007906:	30 1e       	mov	lr,1
80007908:	fc 0a 09 4a 	lsl	r10,lr,r10
8000790c:	f3 ea 10 0a 	or	r10,r9,r10
80007910:	10 99       	mov	r9,r8
80007912:	97 1a       	st.w	r11[0x4],r10
80007914:	c0 a8       	rjmp	80007928 <_malloc_r+0x1dc>
80007916:	70 28       	ld.w	r8,r8[0x8]
80007918:	08 38       	cp.w	r8,r4
8000791a:	c0 60       	breq	80007926 <_malloc_r+0x1da>
8000791c:	70 1a       	ld.w	r10,r8[0x4]
8000791e:	e0 1a ff fc 	andl	r10,0xfffc
80007922:	14 39       	cp.w	r9,r10
80007924:	cf 93       	brcs	80007916 <_malloc_r+0x1ca>
80007926:	70 39       	ld.w	r9,r8[0xc]
80007928:	8d 39       	st.w	r6[0xc],r9
8000792a:	8d 28       	st.w	r6[0x8],r8
8000792c:	91 36       	st.w	r8[0xc],r6
8000792e:	93 26       	st.w	r9[0x8],r6
80007930:	e6 08 14 02 	asr	r8,r3,0x2
80007934:	30 1b       	mov	r11,1
80007936:	e0 64 01 08 	mov	r4,264
8000793a:	f6 08 09 4b 	lsl	r11,r11,r8
8000793e:	68 18       	ld.w	r8,r4[0x4]
80007940:	10 3b       	cp.w	r11,r8
80007942:	e0 8b 00 69 	brhi	80007a14 <_malloc_r+0x2c8>
80007946:	f7 e8 00 09 	and	r9,r11,r8
8000794a:	c0 b1       	brne	80007960 <_malloc_r+0x214>
8000794c:	e0 13 ff fc 	andl	r3,0xfffc
80007950:	a1 7b       	lsl	r11,0x1
80007952:	2f c3       	sub	r3,-4
80007954:	c0 38       	rjmp	8000795a <_malloc_r+0x20e>
80007956:	2f c3       	sub	r3,-4
80007958:	a1 7b       	lsl	r11,0x1
8000795a:	f7 e8 00 09 	and	r9,r11,r8
8000795e:	cf c0       	breq	80007956 <_malloc_r+0x20a>
80007960:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007964:	06 92       	mov	r2,r3
80007966:	1c 91       	mov	r1,lr
80007968:	62 36       	ld.w	r6,r1[0xc]
8000796a:	c2 d8       	rjmp	800079c4 <_malloc_r+0x278>
8000796c:	6c 1a       	ld.w	r10,r6[0x4]
8000796e:	e0 1a ff fc 	andl	r10,0xfffc
80007972:	f4 07 01 08 	sub	r8,r10,r7
80007976:	58 f8       	cp.w	r8,15
80007978:	e0 8a 00 15 	brle	800079a2 <_malloc_r+0x256>
8000797c:	6c 3a       	ld.w	r10,r6[0xc]
8000797e:	6c 29       	ld.w	r9,r6[0x8]
80007980:	95 29       	st.w	r10[0x8],r9
80007982:	93 3a       	st.w	r9[0xc],r10
80007984:	0e 99       	mov	r9,r7
80007986:	ec 07 00 07 	add	r7,r6,r7
8000798a:	a1 a9       	sbr	r9,0x0
8000798c:	99 37       	st.w	r12[0xc],r7
8000798e:	99 27       	st.w	r12[0x8],r7
80007990:	8d 19       	st.w	r6[0x4],r9
80007992:	ee 08 09 08 	st.w	r7[r8],r8
80007996:	8f 2c       	st.w	r7[0x8],r12
80007998:	8f 3c       	st.w	r7[0xc],r12
8000799a:	a1 a8       	sbr	r8,0x0
8000799c:	0a 9c       	mov	r12,r5
8000799e:	8f 18       	st.w	r7[0x4],r8
800079a0:	c0 d8       	rjmp	800079ba <_malloc_r+0x26e>
800079a2:	6c 39       	ld.w	r9,r6[0xc]
800079a4:	58 08       	cp.w	r8,0
800079a6:	c0 e5       	brlt	800079c2 <_malloc_r+0x276>
800079a8:	ec 0a 00 0a 	add	r10,r6,r10
800079ac:	74 18       	ld.w	r8,r10[0x4]
800079ae:	a1 a8       	sbr	r8,0x0
800079b0:	0a 9c       	mov	r12,r5
800079b2:	95 18       	st.w	r10[0x4],r8
800079b4:	6c 28       	ld.w	r8,r6[0x8]
800079b6:	93 28       	st.w	r9[0x8],r8
800079b8:	91 39       	st.w	r8[0xc],r9
800079ba:	c1 3d       	rcall	80007be0 <__malloc_unlock>
800079bc:	ec cc ff f8 	sub	r12,r6,-8
800079c0:	d8 32       	popm	r0-r7,pc
800079c2:	12 96       	mov	r6,r9
800079c4:	02 36       	cp.w	r6,r1
800079c6:	cd 31       	brne	8000796c <_malloc_r+0x220>
800079c8:	2f f2       	sub	r2,-1
800079ca:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800079ce:	c0 30       	breq	800079d4 <_malloc_r+0x288>
800079d0:	2f 81       	sub	r1,-8
800079d2:	cc bb       	rjmp	80007968 <_malloc_r+0x21c>
800079d4:	1c 98       	mov	r8,lr
800079d6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800079da:	c0 81       	brne	800079ea <_malloc_r+0x29e>
800079dc:	68 19       	ld.w	r9,r4[0x4]
800079de:	f6 08 11 ff 	rsub	r8,r11,-1
800079e2:	f3 e8 00 08 	and	r8,r9,r8
800079e6:	89 18       	st.w	r4[0x4],r8
800079e8:	c0 78       	rjmp	800079f6 <_malloc_r+0x2aa>
800079ea:	f0 c9 00 08 	sub	r9,r8,8
800079ee:	20 13       	sub	r3,1
800079f0:	70 08       	ld.w	r8,r8[0x0]
800079f2:	12 38       	cp.w	r8,r9
800079f4:	cf 10       	breq	800079d6 <_malloc_r+0x28a>
800079f6:	a1 7b       	lsl	r11,0x1
800079f8:	68 18       	ld.w	r8,r4[0x4]
800079fa:	10 3b       	cp.w	r11,r8
800079fc:	e0 8b 00 0c 	brhi	80007a14 <_malloc_r+0x2c8>
80007a00:	58 0b       	cp.w	r11,0
80007a02:	c0 90       	breq	80007a14 <_malloc_r+0x2c8>
80007a04:	04 93       	mov	r3,r2
80007a06:	c0 38       	rjmp	80007a0c <_malloc_r+0x2c0>
80007a08:	2f c3       	sub	r3,-4
80007a0a:	a1 7b       	lsl	r11,0x1
80007a0c:	f7 e8 00 09 	and	r9,r11,r8
80007a10:	ca 81       	brne	80007960 <_malloc_r+0x214>
80007a12:	cf bb       	rjmp	80007a08 <_malloc_r+0x2bc>
80007a14:	68 23       	ld.w	r3,r4[0x8]
80007a16:	66 12       	ld.w	r2,r3[0x4]
80007a18:	e0 12 ff fc 	andl	r2,0xfffc
80007a1c:	0e 32       	cp.w	r2,r7
80007a1e:	5f 39       	srlo	r9
80007a20:	e4 07 01 08 	sub	r8,r2,r7
80007a24:	58 f8       	cp.w	r8,15
80007a26:	5f aa       	srle	r10
80007a28:	f5 e9 10 09 	or	r9,r10,r9
80007a2c:	e0 80 00 9a 	breq	80007b60 <_malloc_r+0x414>
80007a30:	e0 68 06 30 	mov	r8,1584
80007a34:	70 01       	ld.w	r1,r8[0x0]
80007a36:	e0 68 05 14 	mov	r8,1300
80007a3a:	2f 01       	sub	r1,-16
80007a3c:	70 08       	ld.w	r8,r8[0x0]
80007a3e:	0e 01       	add	r1,r7
80007a40:	5b f8       	cp.w	r8,-1
80007a42:	c0 40       	breq	80007a4a <_malloc_r+0x2fe>
80007a44:	28 11       	sub	r1,-127
80007a46:	e0 11 ff 80 	andl	r1,0xff80
80007a4a:	02 9b       	mov	r11,r1
80007a4c:	0a 9c       	mov	r12,r5
80007a4e:	e0 a0 05 39 	rcall	800084c0 <_sbrk_r>
80007a52:	18 96       	mov	r6,r12
80007a54:	5b fc       	cp.w	r12,-1
80007a56:	c7 50       	breq	80007b40 <_malloc_r+0x3f4>
80007a58:	e6 02 00 08 	add	r8,r3,r2
80007a5c:	10 3c       	cp.w	r12,r8
80007a5e:	c0 32       	brcc	80007a64 <_malloc_r+0x318>
80007a60:	08 33       	cp.w	r3,r4
80007a62:	c6 f1       	brne	80007b40 <_malloc_r+0x3f4>
80007a64:	e0 6a 06 34 	mov	r10,1588
80007a68:	74 09       	ld.w	r9,r10[0x0]
80007a6a:	e2 09 00 09 	add	r9,r1,r9
80007a6e:	95 09       	st.w	r10[0x0],r9
80007a70:	10 36       	cp.w	r6,r8
80007a72:	c0 a1       	brne	80007a86 <_malloc_r+0x33a>
80007a74:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007a78:	c0 71       	brne	80007a86 <_malloc_r+0x33a>
80007a7a:	e2 02 00 02 	add	r2,r1,r2
80007a7e:	68 28       	ld.w	r8,r4[0x8]
80007a80:	a1 a2       	sbr	r2,0x0
80007a82:	91 12       	st.w	r8[0x4],r2
80007a84:	c4 f8       	rjmp	80007b22 <_malloc_r+0x3d6>
80007a86:	e0 6a 05 14 	mov	r10,1300
80007a8a:	74 0b       	ld.w	r11,r10[0x0]
80007a8c:	5b fb       	cp.w	r11,-1
80007a8e:	c0 31       	brne	80007a94 <_malloc_r+0x348>
80007a90:	95 06       	st.w	r10[0x0],r6
80007a92:	c0 78       	rjmp	80007aa0 <_malloc_r+0x354>
80007a94:	ec 09 00 09 	add	r9,r6,r9
80007a98:	e0 6a 06 34 	mov	r10,1588
80007a9c:	10 19       	sub	r9,r8
80007a9e:	95 09       	st.w	r10[0x0],r9
80007aa0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007aa4:	f0 09 11 08 	rsub	r9,r8,8
80007aa8:	58 08       	cp.w	r8,0
80007aaa:	f2 08 17 10 	movne	r8,r9
80007aae:	ed d8 e1 06 	addne	r6,r6,r8
80007ab2:	28 08       	sub	r8,-128
80007ab4:	ec 01 00 01 	add	r1,r6,r1
80007ab8:	0a 9c       	mov	r12,r5
80007aba:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007abe:	f0 01 01 01 	sub	r1,r8,r1
80007ac2:	02 9b       	mov	r11,r1
80007ac4:	e0 a0 04 fe 	rcall	800084c0 <_sbrk_r>
80007ac8:	e0 68 06 34 	mov	r8,1588
80007acc:	5b fc       	cp.w	r12,-1
80007ace:	ec 0c 17 00 	moveq	r12,r6
80007ad2:	f9 b1 00 00 	moveq	r1,0
80007ad6:	70 09       	ld.w	r9,r8[0x0]
80007ad8:	0c 1c       	sub	r12,r6
80007ada:	89 26       	st.w	r4[0x8],r6
80007adc:	02 0c       	add	r12,r1
80007ade:	12 01       	add	r1,r9
80007ae0:	a1 ac       	sbr	r12,0x0
80007ae2:	91 01       	st.w	r8[0x0],r1
80007ae4:	8d 1c       	st.w	r6[0x4],r12
80007ae6:	08 33       	cp.w	r3,r4
80007ae8:	c1 d0       	breq	80007b22 <_malloc_r+0x3d6>
80007aea:	58 f2       	cp.w	r2,15
80007aec:	e0 8b 00 05 	brhi	80007af6 <_malloc_r+0x3aa>
80007af0:	30 18       	mov	r8,1
80007af2:	8d 18       	st.w	r6[0x4],r8
80007af4:	c2 68       	rjmp	80007b40 <_malloc_r+0x3f4>
80007af6:	30 59       	mov	r9,5
80007af8:	20 c2       	sub	r2,12
80007afa:	e0 12 ff f8 	andl	r2,0xfff8
80007afe:	e6 02 00 08 	add	r8,r3,r2
80007b02:	91 29       	st.w	r8[0x8],r9
80007b04:	91 19       	st.w	r8[0x4],r9
80007b06:	66 18       	ld.w	r8,r3[0x4]
80007b08:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007b0c:	e5 e8 10 08 	or	r8,r2,r8
80007b10:	87 18       	st.w	r3[0x4],r8
80007b12:	58 f2       	cp.w	r2,15
80007b14:	e0 88 00 07 	brls	80007b22 <_malloc_r+0x3d6>
80007b18:	e6 cb ff f8 	sub	r11,r3,-8
80007b1c:	0a 9c       	mov	r12,r5
80007b1e:	fe b0 fb 71 	rcall	80007200 <_free_r>
80007b22:	e0 69 06 2c 	mov	r9,1580
80007b26:	72 0a       	ld.w	r10,r9[0x0]
80007b28:	e0 68 06 34 	mov	r8,1588
80007b2c:	70 08       	ld.w	r8,r8[0x0]
80007b2e:	14 38       	cp.w	r8,r10
80007b30:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007b34:	e0 69 06 28 	mov	r9,1576
80007b38:	72 0a       	ld.w	r10,r9[0x0]
80007b3a:	14 38       	cp.w	r8,r10
80007b3c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80007b40:	68 28       	ld.w	r8,r4[0x8]
80007b42:	70 18       	ld.w	r8,r8[0x4]
80007b44:	e0 18 ff fc 	andl	r8,0xfffc
80007b48:	0e 38       	cp.w	r8,r7
80007b4a:	5f 39       	srlo	r9
80007b4c:	0e 18       	sub	r8,r7
80007b4e:	58 f8       	cp.w	r8,15
80007b50:	5f aa       	srle	r10
80007b52:	f5 e9 10 09 	or	r9,r10,r9
80007b56:	c0 50       	breq	80007b60 <_malloc_r+0x414>
80007b58:	0a 9c       	mov	r12,r5
80007b5a:	c4 3c       	rcall	80007be0 <__malloc_unlock>
80007b5c:	d8 3a       	popm	r0-r7,pc,r12=0
80007b5e:	d7 03       	nop
80007b60:	68 26       	ld.w	r6,r4[0x8]
80007b62:	a1 a8       	sbr	r8,0x0
80007b64:	0e 99       	mov	r9,r7
80007b66:	a1 a9       	sbr	r9,0x0
80007b68:	8d 19       	st.w	r6[0x4],r9
80007b6a:	ec 07 00 07 	add	r7,r6,r7
80007b6e:	0a 9c       	mov	r12,r5
80007b70:	89 27       	st.w	r4[0x8],r7
80007b72:	8f 18       	st.w	r7[0x4],r8
80007b74:	c3 6c       	rcall	80007be0 <__malloc_unlock>
80007b76:	ec cc ff f8 	sub	r12,r6,-8
80007b7a:	d8 32       	popm	r0-r7,pc

80007b7c <memchr>:
80007b7c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007b80:	c0 68       	rjmp	80007b8c <memchr+0x10>
80007b82:	20 1a       	sub	r10,1
80007b84:	19 88       	ld.ub	r8,r12[0x0]
80007b86:	16 38       	cp.w	r8,r11
80007b88:	5e 0c       	reteq	r12
80007b8a:	2f fc       	sub	r12,-1
80007b8c:	58 0a       	cp.w	r10,0
80007b8e:	cf a1       	brne	80007b82 <memchr+0x6>
80007b90:	5e fa       	retal	r10

80007b92 <memmove>:
80007b92:	d4 01       	pushm	lr
80007b94:	18 3b       	cp.w	r11,r12
80007b96:	c1 92       	brcc	80007bc8 <memmove+0x36>
80007b98:	f6 0a 00 09 	add	r9,r11,r10
80007b9c:	12 3c       	cp.w	r12,r9
80007b9e:	c1 52       	brcc	80007bc8 <memmove+0x36>
80007ba0:	f8 0a 00 0b 	add	r11,r12,r10
80007ba4:	30 08       	mov	r8,0
80007ba6:	c0 68       	rjmp	80007bb2 <memmove+0x20>
80007ba8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007bac:	20 1a       	sub	r10,1
80007bae:	f6 08 0b 0e 	st.b	r11[r8],lr
80007bb2:	20 18       	sub	r8,1
80007bb4:	58 0a       	cp.w	r10,0
80007bb6:	cf 91       	brne	80007ba8 <memmove+0x16>
80007bb8:	d8 02       	popm	pc
80007bba:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007bbe:	20 1a       	sub	r10,1
80007bc0:	f8 08 0b 09 	st.b	r12[r8],r9
80007bc4:	2f f8       	sub	r8,-1
80007bc6:	c0 28       	rjmp	80007bca <memmove+0x38>
80007bc8:	30 08       	mov	r8,0
80007bca:	58 0a       	cp.w	r10,0
80007bcc:	cf 71       	brne	80007bba <memmove+0x28>
80007bce:	d8 02       	popm	pc

80007bd0 <memset>:
80007bd0:	18 98       	mov	r8,r12
80007bd2:	c0 38       	rjmp	80007bd8 <memset+0x8>
80007bd4:	10 cb       	st.b	r8++,r11
80007bd6:	20 1a       	sub	r10,1
80007bd8:	58 0a       	cp.w	r10,0
80007bda:	cf d1       	brne	80007bd4 <memset+0x4>
80007bdc:	5e fc       	retal	r12

80007bde <__malloc_lock>:
80007bde:	5e fc       	retal	r12

80007be0 <__malloc_unlock>:
80007be0:	5e fc       	retal	r12

80007be2 <__hi0bits>:
80007be2:	18 98       	mov	r8,r12
80007be4:	e0 1c 00 00 	andl	r12,0x0
80007be8:	f0 09 15 10 	lsl	r9,r8,0x10
80007bec:	58 0c       	cp.w	r12,0
80007bee:	f2 08 17 00 	moveq	r8,r9
80007bf2:	f9 bc 00 10 	moveq	r12,16
80007bf6:	f9 bc 01 00 	movne	r12,0
80007bfa:	10 9a       	mov	r10,r8
80007bfc:	f0 09 15 08 	lsl	r9,r8,0x8
80007c00:	e6 1a ff 00 	andh	r10,0xff00,COH
80007c04:	f7 bc 00 f8 	subeq	r12,-8
80007c08:	f2 08 17 00 	moveq	r8,r9
80007c0c:	10 9a       	mov	r10,r8
80007c0e:	f0 09 15 04 	lsl	r9,r8,0x4
80007c12:	e6 1a f0 00 	andh	r10,0xf000,COH
80007c16:	f7 bc 00 fc 	subeq	r12,-4
80007c1a:	f2 08 17 00 	moveq	r8,r9
80007c1e:	10 9a       	mov	r10,r8
80007c20:	f0 09 15 02 	lsl	r9,r8,0x2
80007c24:	e6 1a c0 00 	andh	r10,0xc000,COH
80007c28:	f7 bc 00 fe 	subeq	r12,-2
80007c2c:	f2 08 17 00 	moveq	r8,r9
80007c30:	58 08       	cp.w	r8,0
80007c32:	5e 5c       	retlt	r12
80007c34:	ed b8 00 1e 	bld	r8,0x1e
80007c38:	f9 bc 01 20 	movne	r12,32
80007c3c:	f7 bc 00 ff 	subeq	r12,-1
80007c40:	5e fc       	retal	r12

80007c42 <__lo0bits>:
80007c42:	18 99       	mov	r9,r12
80007c44:	78 08       	ld.w	r8,r12[0x0]
80007c46:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007c4a:	c1 50       	breq	80007c74 <__lo0bits+0x32>
80007c4c:	ed b8 00 00 	bld	r8,0x0
80007c50:	c0 21       	brne	80007c54 <__lo0bits+0x12>
80007c52:	5e fd       	retal	0
80007c54:	10 9b       	mov	r11,r8
80007c56:	f0 0a 16 01 	lsr	r10,r8,0x1
80007c5a:	e2 1b 00 02 	andl	r11,0x2,COH
80007c5e:	a3 88       	lsr	r8,0x2
80007c60:	58 0b       	cp.w	r11,0
80007c62:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007c66:	f9 bc 01 01 	movne	r12,1
80007c6a:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007c6e:	f9 bc 00 02 	moveq	r12,2
80007c72:	5e fc       	retal	r12
80007c74:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007c78:	f0 0b 16 10 	lsr	r11,r8,0x10
80007c7c:	58 0a       	cp.w	r10,0
80007c7e:	f6 08 17 00 	moveq	r8,r11
80007c82:	f9 bc 00 10 	moveq	r12,16
80007c86:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007c8a:	f0 0a 16 08 	lsr	r10,r8,0x8
80007c8e:	58 0b       	cp.w	r11,0
80007c90:	f7 bc 00 f8 	subeq	r12,-8
80007c94:	f4 08 17 00 	moveq	r8,r10
80007c98:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007c9c:	f0 0a 16 04 	lsr	r10,r8,0x4
80007ca0:	58 0b       	cp.w	r11,0
80007ca2:	f7 bc 00 fc 	subeq	r12,-4
80007ca6:	f4 08 17 00 	moveq	r8,r10
80007caa:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007cae:	f0 0a 16 02 	lsr	r10,r8,0x2
80007cb2:	58 0b       	cp.w	r11,0
80007cb4:	f7 bc 00 fe 	subeq	r12,-2
80007cb8:	f4 08 17 00 	moveq	r8,r10
80007cbc:	ed b8 00 00 	bld	r8,0x0
80007cc0:	c0 60       	breq	80007ccc <__lo0bits+0x8a>
80007cc2:	a1 98       	lsr	r8,0x1
80007cc4:	c0 31       	brne	80007cca <__lo0bits+0x88>
80007cc6:	32 0c       	mov	r12,32
80007cc8:	5e fc       	retal	r12
80007cca:	2f fc       	sub	r12,-1
80007ccc:	93 08       	st.w	r9[0x0],r8
80007cce:	5e fc       	retal	r12

80007cd0 <__mcmp>:
80007cd0:	d4 01       	pushm	lr
80007cd2:	18 98       	mov	r8,r12
80007cd4:	76 49       	ld.w	r9,r11[0x10]
80007cd6:	78 4c       	ld.w	r12,r12[0x10]
80007cd8:	12 1c       	sub	r12,r9
80007cda:	c1 31       	brne	80007d00 <__mcmp+0x30>
80007cdc:	2f b9       	sub	r9,-5
80007cde:	a3 69       	lsl	r9,0x2
80007ce0:	12 0b       	add	r11,r9
80007ce2:	f0 09 00 09 	add	r9,r8,r9
80007ce6:	2e c8       	sub	r8,-20
80007ce8:	13 4e       	ld.w	lr,--r9
80007cea:	17 4a       	ld.w	r10,--r11
80007cec:	14 3e       	cp.w	lr,r10
80007cee:	c0 60       	breq	80007cfa <__mcmp+0x2a>
80007cf0:	f9 bc 03 ff 	movlo	r12,-1
80007cf4:	f9 bc 02 01 	movhs	r12,1
80007cf8:	d8 02       	popm	pc
80007cfa:	10 39       	cp.w	r9,r8
80007cfc:	fe 9b ff f6 	brhi	80007ce8 <__mcmp+0x18>
80007d00:	d8 02       	popm	pc
80007d02:	d7 03       	nop

80007d04 <_Bfree>:
80007d04:	d4 21       	pushm	r4-r7,lr
80007d06:	18 97       	mov	r7,r12
80007d08:	16 95       	mov	r5,r11
80007d0a:	78 96       	ld.w	r6,r12[0x24]
80007d0c:	58 06       	cp.w	r6,0
80007d0e:	c0 91       	brne	80007d20 <_Bfree+0x1c>
80007d10:	31 0c       	mov	r12,16
80007d12:	fe b0 fd 15 	rcall	8000773c <malloc>
80007d16:	99 36       	st.w	r12[0xc],r6
80007d18:	8f 9c       	st.w	r7[0x24],r12
80007d1a:	99 16       	st.w	r12[0x4],r6
80007d1c:	99 26       	st.w	r12[0x8],r6
80007d1e:	99 06       	st.w	r12[0x0],r6
80007d20:	58 05       	cp.w	r5,0
80007d22:	c0 90       	breq	80007d34 <_Bfree+0x30>
80007d24:	6a 19       	ld.w	r9,r5[0x4]
80007d26:	6e 98       	ld.w	r8,r7[0x24]
80007d28:	70 38       	ld.w	r8,r8[0xc]
80007d2a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007d2e:	8b 0a       	st.w	r5[0x0],r10
80007d30:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007d34:	d8 22       	popm	r4-r7,pc
80007d36:	d7 03       	nop

80007d38 <_Balloc>:
80007d38:	d4 21       	pushm	r4-r7,lr
80007d3a:	18 97       	mov	r7,r12
80007d3c:	16 96       	mov	r6,r11
80007d3e:	78 95       	ld.w	r5,r12[0x24]
80007d40:	58 05       	cp.w	r5,0
80007d42:	c0 91       	brne	80007d54 <_Balloc+0x1c>
80007d44:	31 0c       	mov	r12,16
80007d46:	fe b0 fc fb 	rcall	8000773c <malloc>
80007d4a:	99 35       	st.w	r12[0xc],r5
80007d4c:	8f 9c       	st.w	r7[0x24],r12
80007d4e:	99 15       	st.w	r12[0x4],r5
80007d50:	99 25       	st.w	r12[0x8],r5
80007d52:	99 05       	st.w	r12[0x0],r5
80007d54:	6e 95       	ld.w	r5,r7[0x24]
80007d56:	6a 38       	ld.w	r8,r5[0xc]
80007d58:	58 08       	cp.w	r8,0
80007d5a:	c0 b1       	brne	80007d70 <_Balloc+0x38>
80007d5c:	31 0a       	mov	r10,16
80007d5e:	30 4b       	mov	r11,4
80007d60:	0e 9c       	mov	r12,r7
80007d62:	e0 a0 04 93 	rcall	80008688 <_calloc_r>
80007d66:	8b 3c       	st.w	r5[0xc],r12
80007d68:	6e 98       	ld.w	r8,r7[0x24]
80007d6a:	70 3c       	ld.w	r12,r8[0xc]
80007d6c:	58 0c       	cp.w	r12,0
80007d6e:	c1 b0       	breq	80007da4 <_Balloc+0x6c>
80007d70:	6e 98       	ld.w	r8,r7[0x24]
80007d72:	70 38       	ld.w	r8,r8[0xc]
80007d74:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007d78:	70 0c       	ld.w	r12,r8[0x0]
80007d7a:	58 0c       	cp.w	r12,0
80007d7c:	c0 40       	breq	80007d84 <_Balloc+0x4c>
80007d7e:	78 09       	ld.w	r9,r12[0x0]
80007d80:	91 09       	st.w	r8[0x0],r9
80007d82:	c0 e8       	rjmp	80007d9e <_Balloc+0x66>
80007d84:	0e 9c       	mov	r12,r7
80007d86:	30 17       	mov	r7,1
80007d88:	0e 9b       	mov	r11,r7
80007d8a:	ee 06 09 47 	lsl	r7,r7,r6
80007d8e:	ee ca ff fb 	sub	r10,r7,-5
80007d92:	a3 6a       	lsl	r10,0x2
80007d94:	e0 a0 04 7a 	rcall	80008688 <_calloc_r>
80007d98:	c0 60       	breq	80007da4 <_Balloc+0x6c>
80007d9a:	99 16       	st.w	r12[0x4],r6
80007d9c:	99 27       	st.w	r12[0x8],r7
80007d9e:	30 08       	mov	r8,0
80007da0:	99 38       	st.w	r12[0xc],r8
80007da2:	99 48       	st.w	r12[0x10],r8
80007da4:	d8 22       	popm	r4-r7,pc
80007da6:	d7 03       	nop

80007da8 <__d2b>:
80007da8:	d4 31       	pushm	r0-r7,lr
80007daa:	20 2d       	sub	sp,8
80007dac:	16 93       	mov	r3,r11
80007dae:	12 96       	mov	r6,r9
80007db0:	10 95       	mov	r5,r8
80007db2:	14 92       	mov	r2,r10
80007db4:	30 1b       	mov	r11,1
80007db6:	cc 1f       	rcall	80007d38 <_Balloc>
80007db8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007dbc:	50 09       	stdsp	sp[0x0],r9
80007dbe:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007dc2:	b5 a9       	sbr	r9,0x14
80007dc4:	f0 01 16 14 	lsr	r1,r8,0x14
80007dc8:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007dcc:	18 94       	mov	r4,r12
80007dce:	58 02       	cp.w	r2,0
80007dd0:	c1 d0       	breq	80007e0a <__d2b+0x62>
80007dd2:	fa cc ff f8 	sub	r12,sp,-8
80007dd6:	18 d2       	st.w	--r12,r2
80007dd8:	c3 5f       	rcall	80007c42 <__lo0bits>
80007dda:	40 18       	lddsp	r8,sp[0x4]
80007ddc:	c0 d0       	breq	80007df6 <__d2b+0x4e>
80007dde:	40 09       	lddsp	r9,sp[0x0]
80007de0:	f8 0a 11 20 	rsub	r10,r12,32
80007de4:	f2 0a 09 4a 	lsl	r10,r9,r10
80007de8:	f5 e8 10 08 	or	r8,r10,r8
80007dec:	89 58       	st.w	r4[0x14],r8
80007dee:	f2 0c 0a 49 	lsr	r9,r9,r12
80007df2:	50 09       	stdsp	sp[0x0],r9
80007df4:	c0 28       	rjmp	80007df8 <__d2b+0x50>
80007df6:	89 58       	st.w	r4[0x14],r8
80007df8:	40 08       	lddsp	r8,sp[0x0]
80007dfa:	58 08       	cp.w	r8,0
80007dfc:	f9 b3 01 02 	movne	r3,2
80007e00:	f9 b3 00 01 	moveq	r3,1
80007e04:	89 68       	st.w	r4[0x18],r8
80007e06:	89 43       	st.w	r4[0x10],r3
80007e08:	c0 88       	rjmp	80007e18 <__d2b+0x70>
80007e0a:	1a 9c       	mov	r12,sp
80007e0c:	c1 bf       	rcall	80007c42 <__lo0bits>
80007e0e:	30 13       	mov	r3,1
80007e10:	40 08       	lddsp	r8,sp[0x0]
80007e12:	2e 0c       	sub	r12,-32
80007e14:	89 43       	st.w	r4[0x10],r3
80007e16:	89 58       	st.w	r4[0x14],r8
80007e18:	58 01       	cp.w	r1,0
80007e1a:	c0 90       	breq	80007e2c <__d2b+0x84>
80007e1c:	e2 c1 04 33 	sub	r1,r1,1075
80007e20:	18 01       	add	r1,r12
80007e22:	8d 01       	st.w	r6[0x0],r1
80007e24:	f8 0c 11 35 	rsub	r12,r12,53
80007e28:	8b 0c       	st.w	r5[0x0],r12
80007e2a:	c0 c8       	rjmp	80007e42 <__d2b+0x9a>
80007e2c:	e6 c8 ff fc 	sub	r8,r3,-4
80007e30:	f8 cc 04 32 	sub	r12,r12,1074
80007e34:	a5 73       	lsl	r3,0x5
80007e36:	8d 0c       	st.w	r6[0x0],r12
80007e38:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007e3c:	cd 3e       	rcall	80007be2 <__hi0bits>
80007e3e:	18 13       	sub	r3,r12
80007e40:	8b 03       	st.w	r5[0x0],r3
80007e42:	08 9c       	mov	r12,r4
80007e44:	2f ed       	sub	sp,-8
80007e46:	d8 32       	popm	r0-r7,pc

80007e48 <__mdiff>:
80007e48:	d4 31       	pushm	r0-r7,lr
80007e4a:	74 48       	ld.w	r8,r10[0x10]
80007e4c:	76 45       	ld.w	r5,r11[0x10]
80007e4e:	16 97       	mov	r7,r11
80007e50:	14 96       	mov	r6,r10
80007e52:	10 15       	sub	r5,r8
80007e54:	c1 31       	brne	80007e7a <__mdiff+0x32>
80007e56:	2f b8       	sub	r8,-5
80007e58:	ee ce ff ec 	sub	lr,r7,-20
80007e5c:	a3 68       	lsl	r8,0x2
80007e5e:	f4 08 00 0b 	add	r11,r10,r8
80007e62:	ee 08 00 08 	add	r8,r7,r8
80007e66:	11 4a       	ld.w	r10,--r8
80007e68:	17 49       	ld.w	r9,--r11
80007e6a:	12 3a       	cp.w	r10,r9
80007e6c:	c0 30       	breq	80007e72 <__mdiff+0x2a>
80007e6e:	c0 e2       	brcc	80007e8a <__mdiff+0x42>
80007e70:	c0 78       	rjmp	80007e7e <__mdiff+0x36>
80007e72:	1c 38       	cp.w	r8,lr
80007e74:	fe 9b ff f9 	brhi	80007e66 <__mdiff+0x1e>
80007e78:	c4 98       	rjmp	80007f0a <__mdiff+0xc2>
80007e7a:	58 05       	cp.w	r5,0
80007e7c:	c0 64       	brge	80007e88 <__mdiff+0x40>
80007e7e:	0e 98       	mov	r8,r7
80007e80:	30 15       	mov	r5,1
80007e82:	0c 97       	mov	r7,r6
80007e84:	10 96       	mov	r6,r8
80007e86:	c0 28       	rjmp	80007e8a <__mdiff+0x42>
80007e88:	30 05       	mov	r5,0
80007e8a:	6e 1b       	ld.w	r11,r7[0x4]
80007e8c:	c5 6f       	rcall	80007d38 <_Balloc>
80007e8e:	6e 49       	ld.w	r9,r7[0x10]
80007e90:	6c 44       	ld.w	r4,r6[0x10]
80007e92:	99 35       	st.w	r12[0xc],r5
80007e94:	2f b4       	sub	r4,-5
80007e96:	f2 c5 ff fb 	sub	r5,r9,-5
80007e9a:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007e9e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007ea2:	2e c6       	sub	r6,-20
80007ea4:	2e c7       	sub	r7,-20
80007ea6:	f8 c8 ff ec 	sub	r8,r12,-20
80007eaa:	30 0a       	mov	r10,0
80007eac:	0f 0e       	ld.w	lr,r7++
80007eae:	0d 0b       	ld.w	r11,r6++
80007eb0:	fc 02 16 10 	lsr	r2,lr,0x10
80007eb4:	f6 03 16 10 	lsr	r3,r11,0x10
80007eb8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007ebc:	e4 03 01 03 	sub	r3,r2,r3
80007ec0:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007ec4:	fc 0b 01 0b 	sub	r11,lr,r11
80007ec8:	f6 0a 00 0a 	add	r10,r11,r10
80007ecc:	b0 1a       	st.h	r8[0x2],r10
80007ece:	b1 4a       	asr	r10,0x10
80007ed0:	e6 0a 00 0a 	add	r10,r3,r10
80007ed4:	b0 0a       	st.h	r8[0x0],r10
80007ed6:	2f c8       	sub	r8,-4
80007ed8:	b1 4a       	asr	r10,0x10
80007eda:	08 36       	cp.w	r6,r4
80007edc:	ce 83       	brcs	80007eac <__mdiff+0x64>
80007ede:	c0 d8       	rjmp	80007ef8 <__mdiff+0xb0>
80007ee0:	0f 0b       	ld.w	r11,r7++
80007ee2:	f6 0e 16 10 	lsr	lr,r11,0x10
80007ee6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007eea:	16 0a       	add	r10,r11
80007eec:	b0 1a       	st.h	r8[0x2],r10
80007eee:	b1 4a       	asr	r10,0x10
80007ef0:	1c 0a       	add	r10,lr
80007ef2:	b0 0a       	st.h	r8[0x0],r10
80007ef4:	2f c8       	sub	r8,-4
80007ef6:	b1 4a       	asr	r10,0x10
80007ef8:	0a 37       	cp.w	r7,r5
80007efa:	cf 33       	brcs	80007ee0 <__mdiff+0x98>
80007efc:	c0 28       	rjmp	80007f00 <__mdiff+0xb8>
80007efe:	20 19       	sub	r9,1
80007f00:	11 4a       	ld.w	r10,--r8
80007f02:	58 0a       	cp.w	r10,0
80007f04:	cf d0       	breq	80007efe <__mdiff+0xb6>
80007f06:	99 49       	st.w	r12[0x10],r9
80007f08:	d8 32       	popm	r0-r7,pc
80007f0a:	30 0b       	mov	r11,0
80007f0c:	c1 6f       	rcall	80007d38 <_Balloc>
80007f0e:	30 18       	mov	r8,1
80007f10:	99 48       	st.w	r12[0x10],r8
80007f12:	30 08       	mov	r8,0
80007f14:	99 58       	st.w	r12[0x14],r8
80007f16:	d8 32       	popm	r0-r7,pc

80007f18 <__lshift>:
80007f18:	d4 31       	pushm	r0-r7,lr
80007f1a:	16 97       	mov	r7,r11
80007f1c:	76 46       	ld.w	r6,r11[0x10]
80007f1e:	f4 02 14 05 	asr	r2,r10,0x5
80007f22:	2f f6       	sub	r6,-1
80007f24:	14 93       	mov	r3,r10
80007f26:	18 94       	mov	r4,r12
80007f28:	04 06       	add	r6,r2
80007f2a:	76 1b       	ld.w	r11,r11[0x4]
80007f2c:	6e 28       	ld.w	r8,r7[0x8]
80007f2e:	c0 38       	rjmp	80007f34 <__lshift+0x1c>
80007f30:	2f fb       	sub	r11,-1
80007f32:	a1 78       	lsl	r8,0x1
80007f34:	10 36       	cp.w	r6,r8
80007f36:	fe 99 ff fd 	brgt	80007f30 <__lshift+0x18>
80007f3a:	08 9c       	mov	r12,r4
80007f3c:	cf ee       	rcall	80007d38 <_Balloc>
80007f3e:	30 09       	mov	r9,0
80007f40:	18 95       	mov	r5,r12
80007f42:	f8 c8 ff ec 	sub	r8,r12,-20
80007f46:	12 9a       	mov	r10,r9
80007f48:	c0 38       	rjmp	80007f4e <__lshift+0x36>
80007f4a:	10 aa       	st.w	r8++,r10
80007f4c:	2f f9       	sub	r9,-1
80007f4e:	04 39       	cp.w	r9,r2
80007f50:	cf d5       	brlt	80007f4a <__lshift+0x32>
80007f52:	6e 4b       	ld.w	r11,r7[0x10]
80007f54:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007f58:	2f bb       	sub	r11,-5
80007f5a:	ee c9 ff ec 	sub	r9,r7,-20
80007f5e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007f62:	58 03       	cp.w	r3,0
80007f64:	c1 30       	breq	80007f8a <__lshift+0x72>
80007f66:	e6 0c 11 20 	rsub	r12,r3,32
80007f6a:	30 0a       	mov	r10,0
80007f6c:	72 02       	ld.w	r2,r9[0x0]
80007f6e:	e4 03 09 42 	lsl	r2,r2,r3
80007f72:	04 4a       	or	r10,r2
80007f74:	10 aa       	st.w	r8++,r10
80007f76:	13 0a       	ld.w	r10,r9++
80007f78:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007f7c:	16 39       	cp.w	r9,r11
80007f7e:	cf 73       	brcs	80007f6c <__lshift+0x54>
80007f80:	91 0a       	st.w	r8[0x0],r10
80007f82:	58 0a       	cp.w	r10,0
80007f84:	c0 70       	breq	80007f92 <__lshift+0x7a>
80007f86:	2f f6       	sub	r6,-1
80007f88:	c0 58       	rjmp	80007f92 <__lshift+0x7a>
80007f8a:	13 0a       	ld.w	r10,r9++
80007f8c:	10 aa       	st.w	r8++,r10
80007f8e:	16 39       	cp.w	r9,r11
80007f90:	cf d3       	brcs	80007f8a <__lshift+0x72>
80007f92:	08 9c       	mov	r12,r4
80007f94:	20 16       	sub	r6,1
80007f96:	0e 9b       	mov	r11,r7
80007f98:	8b 46       	st.w	r5[0x10],r6
80007f9a:	cb 5e       	rcall	80007d04 <_Bfree>
80007f9c:	0a 9c       	mov	r12,r5
80007f9e:	d8 32       	popm	r0-r7,pc

80007fa0 <__multiply>:
80007fa0:	d4 31       	pushm	r0-r7,lr
80007fa2:	20 2d       	sub	sp,8
80007fa4:	76 49       	ld.w	r9,r11[0x10]
80007fa6:	74 48       	ld.w	r8,r10[0x10]
80007fa8:	16 96       	mov	r6,r11
80007faa:	14 95       	mov	r5,r10
80007fac:	10 39       	cp.w	r9,r8
80007fae:	ec 08 17 50 	movlt	r8,r6
80007fb2:	ea 06 17 50 	movlt	r6,r5
80007fb6:	f0 05 17 50 	movlt	r5,r8
80007fba:	6c 28       	ld.w	r8,r6[0x8]
80007fbc:	76 43       	ld.w	r3,r11[0x10]
80007fbe:	74 42       	ld.w	r2,r10[0x10]
80007fc0:	76 1b       	ld.w	r11,r11[0x4]
80007fc2:	e4 03 00 07 	add	r7,r2,r3
80007fc6:	10 37       	cp.w	r7,r8
80007fc8:	f7 bb 09 ff 	subgt	r11,-1
80007fcc:	cb 6e       	rcall	80007d38 <_Balloc>
80007fce:	ee c4 ff fb 	sub	r4,r7,-5
80007fd2:	f8 c9 ff ec 	sub	r9,r12,-20
80007fd6:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007fda:	30 0a       	mov	r10,0
80007fdc:	12 98       	mov	r8,r9
80007fde:	c0 28       	rjmp	80007fe2 <__multiply+0x42>
80007fe0:	10 aa       	st.w	r8++,r10
80007fe2:	08 38       	cp.w	r8,r4
80007fe4:	cf e3       	brcs	80007fe0 <__multiply+0x40>
80007fe6:	2f b3       	sub	r3,-5
80007fe8:	2f b2       	sub	r2,-5
80007fea:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007fee:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007ff2:	ec cb ff ec 	sub	r11,r6,-20
80007ff6:	50 12       	stdsp	sp[0x4],r2
80007ff8:	ea ca ff ec 	sub	r10,r5,-20
80007ffc:	c4 48       	rjmp	80008084 <__multiply+0xe4>
80007ffe:	94 95       	ld.uh	r5,r10[0x2]
80008000:	58 05       	cp.w	r5,0
80008002:	c2 00       	breq	80008042 <__multiply+0xa2>
80008004:	12 98       	mov	r8,r9
80008006:	16 96       	mov	r6,r11
80008008:	30 0e       	mov	lr,0
8000800a:	50 09       	stdsp	sp[0x0],r9
8000800c:	0d 02       	ld.w	r2,r6++
8000800e:	e4 00 16 10 	lsr	r0,r2,0x10
80008012:	70 01       	ld.w	r1,r8[0x0]
80008014:	70 09       	ld.w	r9,r8[0x0]
80008016:	b1 81       	lsr	r1,0x10
80008018:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000801c:	e0 05 03 41 	mac	r1,r0,r5
80008020:	ab 32       	mul	r2,r5
80008022:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008026:	00 02       	add	r2,r0
80008028:	e4 0e 00 0e 	add	lr,r2,lr
8000802c:	b0 1e       	st.h	r8[0x2],lr
8000802e:	b1 8e       	lsr	lr,0x10
80008030:	1c 01       	add	r1,lr
80008032:	b0 01       	st.h	r8[0x0],r1
80008034:	e2 0e 16 10 	lsr	lr,r1,0x10
80008038:	2f c8       	sub	r8,-4
8000803a:	06 36       	cp.w	r6,r3
8000803c:	ce 83       	brcs	8000800c <__multiply+0x6c>
8000803e:	40 09       	lddsp	r9,sp[0x0]
80008040:	91 0e       	st.w	r8[0x0],lr
80008042:	94 86       	ld.uh	r6,r10[0x0]
80008044:	58 06       	cp.w	r6,0
80008046:	c1 d0       	breq	80008080 <__multiply+0xe0>
80008048:	72 02       	ld.w	r2,r9[0x0]
8000804a:	12 98       	mov	r8,r9
8000804c:	16 9e       	mov	lr,r11
8000804e:	30 05       	mov	r5,0
80008050:	b0 12       	st.h	r8[0x2],r2
80008052:	1d 01       	ld.w	r1,lr++
80008054:	90 82       	ld.uh	r2,r8[0x0]
80008056:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000805a:	ad 30       	mul	r0,r6
8000805c:	e0 02 00 02 	add	r2,r0,r2
80008060:	e4 05 00 05 	add	r5,r2,r5
80008064:	b0 05       	st.h	r8[0x0],r5
80008066:	b1 85       	lsr	r5,0x10
80008068:	b1 81       	lsr	r1,0x10
8000806a:	2f c8       	sub	r8,-4
8000806c:	ad 31       	mul	r1,r6
8000806e:	90 92       	ld.uh	r2,r8[0x2]
80008070:	e2 02 00 02 	add	r2,r1,r2
80008074:	0a 02       	add	r2,r5
80008076:	e4 05 16 10 	lsr	r5,r2,0x10
8000807a:	06 3e       	cp.w	lr,r3
8000807c:	ce a3       	brcs	80008050 <__multiply+0xb0>
8000807e:	91 02       	st.w	r8[0x0],r2
80008080:	2f ca       	sub	r10,-4
80008082:	2f c9       	sub	r9,-4
80008084:	40 18       	lddsp	r8,sp[0x4]
80008086:	10 3a       	cp.w	r10,r8
80008088:	cb b3       	brcs	80007ffe <__multiply+0x5e>
8000808a:	c0 28       	rjmp	8000808e <__multiply+0xee>
8000808c:	20 17       	sub	r7,1
8000808e:	58 07       	cp.w	r7,0
80008090:	e0 8a 00 05 	brle	8000809a <__multiply+0xfa>
80008094:	09 48       	ld.w	r8,--r4
80008096:	58 08       	cp.w	r8,0
80008098:	cf a0       	breq	8000808c <__multiply+0xec>
8000809a:	99 47       	st.w	r12[0x10],r7
8000809c:	2f ed       	sub	sp,-8
8000809e:	d8 32       	popm	r0-r7,pc

800080a0 <__i2b>:
800080a0:	d4 21       	pushm	r4-r7,lr
800080a2:	16 97       	mov	r7,r11
800080a4:	30 1b       	mov	r11,1
800080a6:	c4 9e       	rcall	80007d38 <_Balloc>
800080a8:	30 19       	mov	r9,1
800080aa:	99 57       	st.w	r12[0x14],r7
800080ac:	99 49       	st.w	r12[0x10],r9
800080ae:	d8 22       	popm	r4-r7,pc

800080b0 <__multadd>:
800080b0:	d4 31       	pushm	r0-r7,lr
800080b2:	30 08       	mov	r8,0
800080b4:	12 95       	mov	r5,r9
800080b6:	16 97       	mov	r7,r11
800080b8:	18 96       	mov	r6,r12
800080ba:	76 44       	ld.w	r4,r11[0x10]
800080bc:	f6 c9 ff ec 	sub	r9,r11,-20
800080c0:	72 0b       	ld.w	r11,r9[0x0]
800080c2:	f6 0c 16 10 	lsr	r12,r11,0x10
800080c6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800080ca:	f4 0c 02 4c 	mul	r12,r10,r12
800080ce:	f4 0b 03 45 	mac	r5,r10,r11
800080d2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800080d6:	b1 85       	lsr	r5,0x10
800080d8:	18 05       	add	r5,r12
800080da:	ea 0c 15 10 	lsl	r12,r5,0x10
800080de:	f8 0b 00 0b 	add	r11,r12,r11
800080e2:	12 ab       	st.w	r9++,r11
800080e4:	2f f8       	sub	r8,-1
800080e6:	b1 85       	lsr	r5,0x10
800080e8:	08 38       	cp.w	r8,r4
800080ea:	ce b5       	brlt	800080c0 <__multadd+0x10>
800080ec:	58 05       	cp.w	r5,0
800080ee:	c1 c0       	breq	80008126 <__multadd+0x76>
800080f0:	6e 28       	ld.w	r8,r7[0x8]
800080f2:	10 34       	cp.w	r4,r8
800080f4:	c1 35       	brlt	8000811a <__multadd+0x6a>
800080f6:	6e 1b       	ld.w	r11,r7[0x4]
800080f8:	0c 9c       	mov	r12,r6
800080fa:	2f fb       	sub	r11,-1
800080fc:	c1 ee       	rcall	80007d38 <_Balloc>
800080fe:	6e 4a       	ld.w	r10,r7[0x10]
80008100:	ee cb ff f4 	sub	r11,r7,-12
80008104:	18 93       	mov	r3,r12
80008106:	2f ea       	sub	r10,-2
80008108:	2f 4c       	sub	r12,-12
8000810a:	a3 6a       	lsl	r10,0x2
8000810c:	fe b0 de 36 	rcall	80003d78 <memcpy>
80008110:	0e 9b       	mov	r11,r7
80008112:	0c 9c       	mov	r12,r6
80008114:	fe b0 fd f8 	rcall	80007d04 <_Bfree>
80008118:	06 97       	mov	r7,r3
8000811a:	e8 c8 ff ff 	sub	r8,r4,-1
8000811e:	2f b4       	sub	r4,-5
80008120:	8f 48       	st.w	r7[0x10],r8
80008122:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008126:	0e 9c       	mov	r12,r7
80008128:	d8 32       	popm	r0-r7,pc
8000812a:	d7 03       	nop

8000812c <__pow5mult>:
8000812c:	d4 31       	pushm	r0-r7,lr
8000812e:	14 96       	mov	r6,r10
80008130:	18 97       	mov	r7,r12
80008132:	16 94       	mov	r4,r11
80008134:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008138:	c0 90       	breq	8000814a <__pow5mult+0x1e>
8000813a:	20 18       	sub	r8,1
8000813c:	fe c9 e4 dc 	sub	r9,pc,-6948
80008140:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008144:	30 09       	mov	r9,0
80008146:	cb 5f       	rcall	800080b0 <__multadd>
80008148:	18 94       	mov	r4,r12
8000814a:	a3 46       	asr	r6,0x2
8000814c:	c3 40       	breq	800081b4 <__pow5mult+0x88>
8000814e:	6e 95       	ld.w	r5,r7[0x24]
80008150:	58 05       	cp.w	r5,0
80008152:	c0 91       	brne	80008164 <__pow5mult+0x38>
80008154:	31 0c       	mov	r12,16
80008156:	fe b0 fa f3 	rcall	8000773c <malloc>
8000815a:	99 35       	st.w	r12[0xc],r5
8000815c:	8f 9c       	st.w	r7[0x24],r12
8000815e:	99 15       	st.w	r12[0x4],r5
80008160:	99 25       	st.w	r12[0x8],r5
80008162:	99 05       	st.w	r12[0x0],r5
80008164:	6e 93       	ld.w	r3,r7[0x24]
80008166:	66 25       	ld.w	r5,r3[0x8]
80008168:	58 05       	cp.w	r5,0
8000816a:	c0 c1       	brne	80008182 <__pow5mult+0x56>
8000816c:	e0 6b 02 71 	mov	r11,625
80008170:	0e 9c       	mov	r12,r7
80008172:	c9 7f       	rcall	800080a0 <__i2b>
80008174:	87 2c       	st.w	r3[0x8],r12
80008176:	30 08       	mov	r8,0
80008178:	18 95       	mov	r5,r12
8000817a:	99 08       	st.w	r12[0x0],r8
8000817c:	c0 38       	rjmp	80008182 <__pow5mult+0x56>
8000817e:	06 9c       	mov	r12,r3
80008180:	18 95       	mov	r5,r12
80008182:	ed b6 00 00 	bld	r6,0x0
80008186:	c0 b1       	brne	8000819c <__pow5mult+0x70>
80008188:	08 9b       	mov	r11,r4
8000818a:	0a 9a       	mov	r10,r5
8000818c:	0e 9c       	mov	r12,r7
8000818e:	c0 9f       	rcall	80007fa0 <__multiply>
80008190:	08 9b       	mov	r11,r4
80008192:	18 93       	mov	r3,r12
80008194:	0e 9c       	mov	r12,r7
80008196:	06 94       	mov	r4,r3
80008198:	fe b0 fd b6 	rcall	80007d04 <_Bfree>
8000819c:	a1 56       	asr	r6,0x1
8000819e:	c0 b0       	breq	800081b4 <__pow5mult+0x88>
800081a0:	6a 03       	ld.w	r3,r5[0x0]
800081a2:	58 03       	cp.w	r3,0
800081a4:	ce d1       	brne	8000817e <__pow5mult+0x52>
800081a6:	0a 9a       	mov	r10,r5
800081a8:	0a 9b       	mov	r11,r5
800081aa:	0e 9c       	mov	r12,r7
800081ac:	cf ae       	rcall	80007fa0 <__multiply>
800081ae:	8b 0c       	st.w	r5[0x0],r12
800081b0:	99 03       	st.w	r12[0x0],r3
800081b2:	ce 7b       	rjmp	80008180 <__pow5mult+0x54>
800081b4:	08 9c       	mov	r12,r4
800081b6:	d8 32       	popm	r0-r7,pc

800081b8 <_realloc_r>:
800081b8:	d4 31       	pushm	r0-r7,lr
800081ba:	20 1d       	sub	sp,4
800081bc:	16 94       	mov	r4,r11
800081be:	18 92       	mov	r2,r12
800081c0:	14 9b       	mov	r11,r10
800081c2:	58 04       	cp.w	r4,0
800081c4:	c0 51       	brne	800081ce <_realloc_r+0x16>
800081c6:	fe b0 fa c3 	rcall	8000774c <_malloc_r>
800081ca:	18 95       	mov	r5,r12
800081cc:	c5 39       	rjmp	80008472 <_realloc_r+0x2ba>
800081ce:	50 0a       	stdsp	sp[0x0],r10
800081d0:	fe b0 fd 07 	rcall	80007bde <__malloc_lock>
800081d4:	40 0b       	lddsp	r11,sp[0x0]
800081d6:	f6 c8 ff f5 	sub	r8,r11,-11
800081da:	e8 c1 00 08 	sub	r1,r4,8
800081de:	10 96       	mov	r6,r8
800081e0:	62 1c       	ld.w	r12,r1[0x4]
800081e2:	e0 16 ff f8 	andl	r6,0xfff8
800081e6:	59 68       	cp.w	r8,22
800081e8:	f9 b6 08 10 	movls	r6,16
800081ec:	16 36       	cp.w	r6,r11
800081ee:	5f 38       	srlo	r8
800081f0:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800081f4:	c0 50       	breq	800081fe <_realloc_r+0x46>
800081f6:	30 c8       	mov	r8,12
800081f8:	30 05       	mov	r5,0
800081fa:	85 38       	st.w	r2[0xc],r8
800081fc:	c3 b9       	rjmp	80008472 <_realloc_r+0x2ba>
800081fe:	18 90       	mov	r0,r12
80008200:	e0 10 ff fc 	andl	r0,0xfffc
80008204:	0c 30       	cp.w	r0,r6
80008206:	e0 84 01 0b 	brge	8000841c <_realloc_r+0x264>
8000820a:	e0 68 01 08 	mov	r8,264
8000820e:	e2 00 00 09 	add	r9,r1,r0
80008212:	70 25       	ld.w	r5,r8[0x8]
80008214:	0a 39       	cp.w	r9,r5
80008216:	c0 90       	breq	80008228 <_realloc_r+0x70>
80008218:	72 1a       	ld.w	r10,r9[0x4]
8000821a:	a1 ca       	cbr	r10,0x0
8000821c:	f2 0a 00 0a 	add	r10,r9,r10
80008220:	74 1a       	ld.w	r10,r10[0x4]
80008222:	ed ba 00 00 	bld	r10,0x0
80008226:	c2 20       	breq	8000826a <_realloc_r+0xb2>
80008228:	72 1a       	ld.w	r10,r9[0x4]
8000822a:	e0 1a ff fc 	andl	r10,0xfffc
8000822e:	f4 00 00 03 	add	r3,r10,r0
80008232:	0a 39       	cp.w	r9,r5
80008234:	c1 31       	brne	8000825a <_realloc_r+0xa2>
80008236:	ec c7 ff f0 	sub	r7,r6,-16
8000823a:	0e 33       	cp.w	r3,r7
8000823c:	c1 95       	brlt	8000826e <_realloc_r+0xb6>
8000823e:	e2 06 00 09 	add	r9,r1,r6
80008242:	0c 13       	sub	r3,r6
80008244:	a1 a3       	sbr	r3,0x0
80008246:	93 13       	st.w	r9[0x4],r3
80008248:	91 29       	st.w	r8[0x8],r9
8000824a:	04 9c       	mov	r12,r2
8000824c:	62 18       	ld.w	r8,r1[0x4]
8000824e:	08 95       	mov	r5,r4
80008250:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008254:	10 46       	or	r6,r8
80008256:	83 16       	st.w	r1[0x4],r6
80008258:	c0 b9       	rjmp	8000846e <_realloc_r+0x2b6>
8000825a:	0c 33       	cp.w	r3,r6
8000825c:	c0 95       	brlt	8000826e <_realloc_r+0xb6>
8000825e:	72 28       	ld.w	r8,r9[0x8]
80008260:	02 97       	mov	r7,r1
80008262:	72 39       	ld.w	r9,r9[0xc]
80008264:	93 28       	st.w	r9[0x8],r8
80008266:	91 39       	st.w	r8[0xc],r9
80008268:	cd c8       	rjmp	80008420 <_realloc_r+0x268>
8000826a:	30 0a       	mov	r10,0
8000826c:	14 99       	mov	r9,r10
8000826e:	ed bc 00 00 	bld	r12,0x0
80008272:	e0 80 00 95 	breq	8000839c <_realloc_r+0x1e4>
80008276:	62 07       	ld.w	r7,r1[0x0]
80008278:	e2 07 01 07 	sub	r7,r1,r7
8000827c:	6e 1c       	ld.w	r12,r7[0x4]
8000827e:	e0 1c ff fc 	andl	r12,0xfffc
80008282:	58 09       	cp.w	r9,0
80008284:	c5 60       	breq	80008330 <_realloc_r+0x178>
80008286:	f8 00 00 03 	add	r3,r12,r0
8000828a:	0a 39       	cp.w	r9,r5
8000828c:	c4 81       	brne	8000831c <_realloc_r+0x164>
8000828e:	14 03       	add	r3,r10
80008290:	ec c9 ff f0 	sub	r9,r6,-16
80008294:	12 33       	cp.w	r3,r9
80008296:	c4 d5       	brlt	80008330 <_realloc_r+0x178>
80008298:	6e 3a       	ld.w	r10,r7[0xc]
8000829a:	6e 29       	ld.w	r9,r7[0x8]
8000829c:	95 29       	st.w	r10[0x8],r9
8000829e:	93 3a       	st.w	r9[0xc],r10
800082a0:	ee c5 ff f8 	sub	r5,r7,-8
800082a4:	e0 ca 00 04 	sub	r10,r0,4
800082a8:	e0 4a 00 24 	cp.w	r10,36
800082ac:	e0 8b 00 25 	brhi	800082f6 <_realloc_r+0x13e>
800082b0:	0a 99       	mov	r9,r5
800082b2:	59 3a       	cp.w	r10,19
800082b4:	e0 88 00 1a 	brls	800082e8 <_realloc_r+0x130>
800082b8:	09 09       	ld.w	r9,r4++
800082ba:	8b 09       	st.w	r5[0x0],r9
800082bc:	09 09       	ld.w	r9,r4++
800082be:	8f 39       	st.w	r7[0xc],r9
800082c0:	ee c9 ff f0 	sub	r9,r7,-16
800082c4:	59 ba       	cp.w	r10,27
800082c6:	e0 88 00 11 	brls	800082e8 <_realloc_r+0x130>
800082ca:	09 0b       	ld.w	r11,r4++
800082cc:	93 0b       	st.w	r9[0x0],r11
800082ce:	09 09       	ld.w	r9,r4++
800082d0:	8f 59       	st.w	r7[0x14],r9
800082d2:	ee c9 ff e8 	sub	r9,r7,-24
800082d6:	e0 4a 00 24 	cp.w	r10,36
800082da:	c0 71       	brne	800082e8 <_realloc_r+0x130>
800082dc:	09 0a       	ld.w	r10,r4++
800082de:	93 0a       	st.w	r9[0x0],r10
800082e0:	ee c9 ff e0 	sub	r9,r7,-32
800082e4:	09 0a       	ld.w	r10,r4++
800082e6:	8f 7a       	st.w	r7[0x1c],r10
800082e8:	09 0a       	ld.w	r10,r4++
800082ea:	12 aa       	st.w	r9++,r10
800082ec:	68 0a       	ld.w	r10,r4[0x0]
800082ee:	93 0a       	st.w	r9[0x0],r10
800082f0:	68 1a       	ld.w	r10,r4[0x4]
800082f2:	93 1a       	st.w	r9[0x4],r10
800082f4:	c0 78       	rjmp	80008302 <_realloc_r+0x14a>
800082f6:	50 08       	stdsp	sp[0x0],r8
800082f8:	08 9b       	mov	r11,r4
800082fa:	0a 9c       	mov	r12,r5
800082fc:	fe b0 fc 4b 	rcall	80007b92 <memmove>
80008300:	40 08       	lddsp	r8,sp[0x0]
80008302:	ee 06 00 09 	add	r9,r7,r6
80008306:	0c 13       	sub	r3,r6
80008308:	a1 a3       	sbr	r3,0x0
8000830a:	93 13       	st.w	r9[0x4],r3
8000830c:	91 29       	st.w	r8[0x8],r9
8000830e:	04 9c       	mov	r12,r2
80008310:	6e 18       	ld.w	r8,r7[0x4]
80008312:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008316:	10 46       	or	r6,r8
80008318:	8f 16       	st.w	r7[0x4],r6
8000831a:	ca a8       	rjmp	8000846e <_realloc_r+0x2b6>
8000831c:	14 03       	add	r3,r10
8000831e:	0c 33       	cp.w	r3,r6
80008320:	c0 85       	brlt	80008330 <_realloc_r+0x178>
80008322:	72 28       	ld.w	r8,r9[0x8]
80008324:	72 39       	ld.w	r9,r9[0xc]
80008326:	93 28       	st.w	r9[0x8],r8
80008328:	91 39       	st.w	r8[0xc],r9
8000832a:	6e 28       	ld.w	r8,r7[0x8]
8000832c:	6e 39       	ld.w	r9,r7[0xc]
8000832e:	c0 78       	rjmp	8000833c <_realloc_r+0x184>
80008330:	f8 00 00 03 	add	r3,r12,r0
80008334:	0c 33       	cp.w	r3,r6
80008336:	c3 35       	brlt	8000839c <_realloc_r+0x1e4>
80008338:	6e 39       	ld.w	r9,r7[0xc]
8000833a:	6e 28       	ld.w	r8,r7[0x8]
8000833c:	93 28       	st.w	r9[0x8],r8
8000833e:	91 39       	st.w	r8[0xc],r9
80008340:	e0 ca 00 04 	sub	r10,r0,4
80008344:	ee cc ff f8 	sub	r12,r7,-8
80008348:	e0 4a 00 24 	cp.w	r10,36
8000834c:	e0 8b 00 24 	brhi	80008394 <_realloc_r+0x1dc>
80008350:	59 3a       	cp.w	r10,19
80008352:	e0 88 00 1a 	brls	80008386 <_realloc_r+0x1ce>
80008356:	09 08       	ld.w	r8,r4++
80008358:	99 08       	st.w	r12[0x0],r8
8000835a:	09 08       	ld.w	r8,r4++
8000835c:	8f 38       	st.w	r7[0xc],r8
8000835e:	ee cc ff f0 	sub	r12,r7,-16
80008362:	59 ba       	cp.w	r10,27
80008364:	e0 88 00 11 	brls	80008386 <_realloc_r+0x1ce>
80008368:	09 08       	ld.w	r8,r4++
8000836a:	99 08       	st.w	r12[0x0],r8
8000836c:	09 08       	ld.w	r8,r4++
8000836e:	8f 58       	st.w	r7[0x14],r8
80008370:	ee cc ff e8 	sub	r12,r7,-24
80008374:	e0 4a 00 24 	cp.w	r10,36
80008378:	c0 71       	brne	80008386 <_realloc_r+0x1ce>
8000837a:	09 08       	ld.w	r8,r4++
8000837c:	99 08       	st.w	r12[0x0],r8
8000837e:	ee cc ff e0 	sub	r12,r7,-32
80008382:	09 08       	ld.w	r8,r4++
80008384:	8f 78       	st.w	r7[0x1c],r8
80008386:	09 08       	ld.w	r8,r4++
80008388:	18 a8       	st.w	r12++,r8
8000838a:	68 08       	ld.w	r8,r4[0x0]
8000838c:	99 08       	st.w	r12[0x0],r8
8000838e:	68 18       	ld.w	r8,r4[0x4]
80008390:	99 18       	st.w	r12[0x4],r8
80008392:	c4 78       	rjmp	80008420 <_realloc_r+0x268>
80008394:	08 9b       	mov	r11,r4
80008396:	fe b0 fb fe 	rcall	80007b92 <memmove>
8000839a:	c4 38       	rjmp	80008420 <_realloc_r+0x268>
8000839c:	04 9c       	mov	r12,r2
8000839e:	fe b0 f9 d7 	rcall	8000774c <_malloc_r>
800083a2:	18 95       	mov	r5,r12
800083a4:	c3 a0       	breq	80008418 <_realloc_r+0x260>
800083a6:	62 18       	ld.w	r8,r1[0x4]
800083a8:	f8 c9 00 08 	sub	r9,r12,8
800083ac:	a1 c8       	cbr	r8,0x0
800083ae:	e2 08 00 08 	add	r8,r1,r8
800083b2:	10 39       	cp.w	r9,r8
800083b4:	c0 71       	brne	800083c2 <_realloc_r+0x20a>
800083b6:	72 13       	ld.w	r3,r9[0x4]
800083b8:	02 97       	mov	r7,r1
800083ba:	e0 13 ff fc 	andl	r3,0xfffc
800083be:	00 03       	add	r3,r0
800083c0:	c3 08       	rjmp	80008420 <_realloc_r+0x268>
800083c2:	e0 ca 00 04 	sub	r10,r0,4
800083c6:	e0 4a 00 24 	cp.w	r10,36
800083ca:	e0 8b 00 20 	brhi	8000840a <_realloc_r+0x252>
800083ce:	08 99       	mov	r9,r4
800083d0:	18 98       	mov	r8,r12
800083d2:	59 3a       	cp.w	r10,19
800083d4:	e0 88 00 14 	brls	800083fc <_realloc_r+0x244>
800083d8:	13 0b       	ld.w	r11,r9++
800083da:	10 ab       	st.w	r8++,r11
800083dc:	13 0b       	ld.w	r11,r9++
800083de:	10 ab       	st.w	r8++,r11
800083e0:	59 ba       	cp.w	r10,27
800083e2:	e0 88 00 0d 	brls	800083fc <_realloc_r+0x244>
800083e6:	13 0b       	ld.w	r11,r9++
800083e8:	10 ab       	st.w	r8++,r11
800083ea:	13 0b       	ld.w	r11,r9++
800083ec:	10 ab       	st.w	r8++,r11
800083ee:	e0 4a 00 24 	cp.w	r10,36
800083f2:	c0 51       	brne	800083fc <_realloc_r+0x244>
800083f4:	13 0a       	ld.w	r10,r9++
800083f6:	10 aa       	st.w	r8++,r10
800083f8:	13 0a       	ld.w	r10,r9++
800083fa:	10 aa       	st.w	r8++,r10
800083fc:	13 0a       	ld.w	r10,r9++
800083fe:	10 aa       	st.w	r8++,r10
80008400:	72 0a       	ld.w	r10,r9[0x0]
80008402:	91 0a       	st.w	r8[0x0],r10
80008404:	72 19       	ld.w	r9,r9[0x4]
80008406:	91 19       	st.w	r8[0x4],r9
80008408:	c0 48       	rjmp	80008410 <_realloc_r+0x258>
8000840a:	08 9b       	mov	r11,r4
8000840c:	fe b0 fb c3 	rcall	80007b92 <memmove>
80008410:	08 9b       	mov	r11,r4
80008412:	04 9c       	mov	r12,r2
80008414:	fe b0 f6 f6 	rcall	80007200 <_free_r>
80008418:	04 9c       	mov	r12,r2
8000841a:	c2 a8       	rjmp	8000846e <_realloc_r+0x2b6>
8000841c:	00 93       	mov	r3,r0
8000841e:	02 97       	mov	r7,r1
80008420:	e6 06 01 09 	sub	r9,r3,r6
80008424:	6e 18       	ld.w	r8,r7[0x4]
80008426:	58 f9       	cp.w	r9,15
80008428:	e0 88 00 16 	brls	80008454 <_realloc_r+0x29c>
8000842c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008430:	ed e8 10 08 	or	r8,r6,r8
80008434:	8f 18       	st.w	r7[0x4],r8
80008436:	12 98       	mov	r8,r9
80008438:	a1 a8       	sbr	r8,0x0
8000843a:	ee 06 00 0b 	add	r11,r7,r6
8000843e:	f6 09 00 09 	add	r9,r11,r9
80008442:	97 18       	st.w	r11[0x4],r8
80008444:	72 18       	ld.w	r8,r9[0x4]
80008446:	a1 a8       	sbr	r8,0x0
80008448:	2f 8b       	sub	r11,-8
8000844a:	93 18       	st.w	r9[0x4],r8
8000844c:	04 9c       	mov	r12,r2
8000844e:	fe b0 f6 d9 	rcall	80007200 <_free_r>
80008452:	c0 b8       	rjmp	80008468 <_realloc_r+0x2b0>
80008454:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008458:	e7 e8 10 08 	or	r8,r3,r8
8000845c:	8f 18       	st.w	r7[0x4],r8
8000845e:	ee 03 00 03 	add	r3,r7,r3
80008462:	66 18       	ld.w	r8,r3[0x4]
80008464:	a1 a8       	sbr	r8,0x0
80008466:	87 18       	st.w	r3[0x4],r8
80008468:	04 9c       	mov	r12,r2
8000846a:	ee c5 ff f8 	sub	r5,r7,-8
8000846e:	fe b0 fb b9 	rcall	80007be0 <__malloc_unlock>
80008472:	0a 9c       	mov	r12,r5
80008474:	2f fd       	sub	sp,-4
80008476:	d8 32       	popm	r0-r7,pc

80008478 <__isinfd>:
80008478:	14 98       	mov	r8,r10
8000847a:	fc 19 7f f0 	movh	r9,0x7ff0
8000847e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008482:	f0 0b 11 00 	rsub	r11,r8,0
80008486:	f7 e8 10 08 	or	r8,r11,r8
8000848a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000848e:	f2 08 01 08 	sub	r8,r9,r8
80008492:	f0 0c 11 00 	rsub	r12,r8,0
80008496:	f9 e8 10 08 	or	r8,r12,r8
8000849a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000849e:	2f fc       	sub	r12,-1
800084a0:	5e fc       	retal	r12

800084a2 <__isnand>:
800084a2:	14 98       	mov	r8,r10
800084a4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800084a8:	f0 0c 11 00 	rsub	r12,r8,0
800084ac:	10 4c       	or	r12,r8
800084ae:	fc 18 7f f0 	movh	r8,0x7ff0
800084b2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800084b6:	f0 0c 01 0c 	sub	r12,r8,r12
800084ba:	bf 9c       	lsr	r12,0x1f
800084bc:	5e fc       	retal	r12
800084be:	d7 03       	nop

800084c0 <_sbrk_r>:
800084c0:	d4 21       	pushm	r4-r7,lr
800084c2:	30 08       	mov	r8,0
800084c4:	18 97       	mov	r7,r12
800084c6:	e0 66 07 0c 	mov	r6,1804
800084ca:	16 9c       	mov	r12,r11
800084cc:	8d 08       	st.w	r6[0x0],r8
800084ce:	ca fc       	rcall	8000862c <_sbrk>
800084d0:	5b fc       	cp.w	r12,-1
800084d2:	c0 51       	brne	800084dc <_sbrk_r+0x1c>
800084d4:	6c 08       	ld.w	r8,r6[0x0]
800084d6:	58 08       	cp.w	r8,0
800084d8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800084dc:	d8 22       	popm	r4-r7,pc
800084de:	d7 03       	nop

800084e0 <__sclose>:
800084e0:	d4 01       	pushm	lr
800084e2:	96 7b       	ld.sh	r11,r11[0xe]
800084e4:	cf ec       	rcall	800086e0 <_close_r>
800084e6:	d8 02       	popm	pc

800084e8 <__sseek>:
800084e8:	d4 21       	pushm	r4-r7,lr
800084ea:	16 97       	mov	r7,r11
800084ec:	96 7b       	ld.sh	r11,r11[0xe]
800084ee:	c8 5d       	rcall	800087f8 <_lseek_r>
800084f0:	8e 68       	ld.sh	r8,r7[0xc]
800084f2:	10 99       	mov	r9,r8
800084f4:	ad c8       	cbr	r8,0xc
800084f6:	ad a9       	sbr	r9,0xc
800084f8:	5b fc       	cp.w	r12,-1
800084fa:	ef f8 0c 06 	st.heq	r7[0xc],r8
800084fe:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008502:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008506:	d8 22       	popm	r4-r7,pc

80008508 <__swrite>:
80008508:	d4 21       	pushm	r4-r7,lr
8000850a:	96 68       	ld.sh	r8,r11[0xc]
8000850c:	16 97       	mov	r7,r11
8000850e:	14 95       	mov	r5,r10
80008510:	12 94       	mov	r4,r9
80008512:	e2 18 01 00 	andl	r8,0x100,COH
80008516:	18 96       	mov	r6,r12
80008518:	c0 50       	breq	80008522 <__swrite+0x1a>
8000851a:	30 29       	mov	r9,2
8000851c:	30 0a       	mov	r10,0
8000851e:	96 7b       	ld.sh	r11,r11[0xe]
80008520:	c6 cd       	rcall	800087f8 <_lseek_r>
80008522:	8e 68       	ld.sh	r8,r7[0xc]
80008524:	ad c8       	cbr	r8,0xc
80008526:	08 99       	mov	r9,r4
80008528:	0a 9a       	mov	r10,r5
8000852a:	8e 7b       	ld.sh	r11,r7[0xe]
8000852c:	0c 9c       	mov	r12,r6
8000852e:	ae 68       	st.h	r7[0xc],r8
80008530:	c9 ac       	rcall	80008664 <_write_r>
80008532:	d8 22       	popm	r4-r7,pc

80008534 <__sread>:
80008534:	d4 21       	pushm	r4-r7,lr
80008536:	16 97       	mov	r7,r11
80008538:	96 7b       	ld.sh	r11,r11[0xe]
8000853a:	c7 1d       	rcall	8000881c <_read_r>
8000853c:	c0 65       	brlt	80008548 <__sread+0x14>
8000853e:	6f 58       	ld.w	r8,r7[0x54]
80008540:	18 08       	add	r8,r12
80008542:	ef 48 00 54 	st.w	r7[84],r8
80008546:	d8 22       	popm	r4-r7,pc
80008548:	8e 68       	ld.sh	r8,r7[0xc]
8000854a:	ad c8       	cbr	r8,0xc
8000854c:	ae 68       	st.h	r7[0xc],r8
8000854e:	d8 22       	popm	r4-r7,pc

80008550 <strlen>:
80008550:	30 09       	mov	r9,0
80008552:	18 98       	mov	r8,r12
80008554:	c0 28       	rjmp	80008558 <strlen+0x8>
80008556:	2f f8       	sub	r8,-1
80008558:	11 8a       	ld.ub	r10,r8[0x0]
8000855a:	f2 0a 18 00 	cp.b	r10,r9
8000855e:	cf c1       	brne	80008556 <strlen+0x6>
80008560:	f0 0c 01 0c 	sub	r12,r8,r12
80008564:	5e fc       	retal	r12
80008566:	d7 03       	nop

80008568 <_close>:
80008568:	30 28       	mov	r8,2
8000856a:	d6 73       	breakpoint
8000856c:	3f fc       	mov	r12,-1
8000856e:	35 8b       	mov	r11,88
80008570:	58 0c       	cp.w	r12,0
80008572:	5e 4c       	retge	r12
80008574:	e0 6a 07 0c 	mov	r10,1804
80008578:	95 0b       	st.w	r10[0x0],r11
8000857a:	5e fc       	retal	r12

8000857c <_lseek>:
8000857c:	30 58       	mov	r8,5
8000857e:	d6 73       	breakpoint
80008580:	3f fc       	mov	r12,-1
80008582:	35 8b       	mov	r11,88
80008584:	58 0c       	cp.w	r12,0
80008586:	5e 4c       	retge	r12
80008588:	e0 6a 07 0c 	mov	r10,1804
8000858c:	95 0b       	st.w	r10[0x0],r11
8000858e:	5e fc       	retal	r12

80008590 <_read>:
80008590:	30 38       	mov	r8,3
80008592:	d6 73       	breakpoint
80008594:	3f fc       	mov	r12,-1
80008596:	35 8b       	mov	r11,88
80008598:	58 0c       	cp.w	r12,0
8000859a:	5e 4c       	retge	r12
8000859c:	e0 6a 07 0c 	mov	r10,1804
800085a0:	95 0b       	st.w	r10[0x0],r11
800085a2:	5e fc       	retal	r12

800085a4 <_write>:
800085a4:	30 48       	mov	r8,4
800085a6:	d6 73       	breakpoint
800085a8:	3f fc       	mov	r12,-1
800085aa:	35 8b       	mov	r11,88
800085ac:	58 0c       	cp.w	r12,0
800085ae:	5e 4c       	retge	r12
800085b0:	e0 6a 07 0c 	mov	r10,1804
800085b4:	95 0b       	st.w	r10[0x0],r11
800085b6:	5e fc       	retal	r12

800085b8 <isatty>:
800085b8:	30 b8       	mov	r8,11
800085ba:	d6 73       	breakpoint
800085bc:	3f fc       	mov	r12,-1
800085be:	35 8b       	mov	r11,88
800085c0:	58 0c       	cp.w	r12,0
800085c2:	5e 4c       	retge	r12
800085c4:	e0 6a 07 0c 	mov	r10,1804
800085c8:	95 0b       	st.w	r10[0x0],r11
800085ca:	5e fc       	retal	r12

800085cc <_fstat_host>:
800085cc:	30 98       	mov	r8,9
800085ce:	d6 73       	breakpoint
800085d0:	3f fc       	mov	r12,-1
800085d2:	35 8b       	mov	r11,88
800085d4:	58 0c       	cp.w	r12,0
800085d6:	5e 4c       	retge	r12
800085d8:	e0 6a 07 0c 	mov	r10,1804
800085dc:	95 0b       	st.w	r10[0x0],r11
800085de:	5e fc       	retal	r12

800085e0 <_fstat>:
800085e0:	d4 21       	pushm	r4-r7,lr
800085e2:	21 0d       	sub	sp,64
800085e4:	16 97       	mov	r7,r11
800085e6:	1a 9b       	mov	r11,sp
800085e8:	cf 2f       	rcall	800085cc <_fstat_host>
800085ea:	c0 34       	brge	800085f0 <_fstat+0x10>
800085ec:	3f fc       	mov	r12,-1
800085ee:	c1 c8       	rjmp	80008626 <_fstat+0x46>
800085f0:	40 08       	lddsp	r8,sp[0x0]
800085f2:	ae 08       	st.h	r7[0x0],r8
800085f4:	40 18       	lddsp	r8,sp[0x4]
800085f6:	ae 18       	st.h	r7[0x2],r8
800085f8:	40 28       	lddsp	r8,sp[0x8]
800085fa:	8f 18       	st.w	r7[0x4],r8
800085fc:	40 38       	lddsp	r8,sp[0xc]
800085fe:	ae 48       	st.h	r7[0x8],r8
80008600:	40 48       	lddsp	r8,sp[0x10]
80008602:	ae 58       	st.h	r7[0xa],r8
80008604:	40 58       	lddsp	r8,sp[0x14]
80008606:	ae 68       	st.h	r7[0xc],r8
80008608:	40 68       	lddsp	r8,sp[0x18]
8000860a:	ae 78       	st.h	r7[0xe],r8
8000860c:	40 88       	lddsp	r8,sp[0x20]
8000860e:	8f 48       	st.w	r7[0x10],r8
80008610:	40 a8       	lddsp	r8,sp[0x28]
80008612:	8f b8       	st.w	r7[0x2c],r8
80008614:	40 c8       	lddsp	r8,sp[0x30]
80008616:	8f c8       	st.w	r7[0x30],r8
80008618:	40 d8       	lddsp	r8,sp[0x34]
8000861a:	8f 58       	st.w	r7[0x14],r8
8000861c:	40 e8       	lddsp	r8,sp[0x38]
8000861e:	30 0c       	mov	r12,0
80008620:	8f 78       	st.w	r7[0x1c],r8
80008622:	40 f8       	lddsp	r8,sp[0x3c]
80008624:	8f 98       	st.w	r7[0x24],r8
80008626:	2f 0d       	sub	sp,-64
80008628:	d8 22       	popm	r4-r7,pc
8000862a:	d7 03       	nop

8000862c <_sbrk>:
8000862c:	d4 01       	pushm	lr
8000862e:	e0 68 06 5c 	mov	r8,1628
80008632:	70 09       	ld.w	r9,r8[0x0]
80008634:	58 09       	cp.w	r9,0
80008636:	c0 41       	brne	8000863e <_sbrk+0x12>
80008638:	e0 69 07 10 	mov	r9,1808
8000863c:	91 09       	st.w	r8[0x0],r9
8000863e:	e0 69 06 5c 	mov	r9,1628
80008642:	e0 6a f0 00 	mov	r10,61440
80008646:	72 08       	ld.w	r8,r9[0x0]
80008648:	f0 0c 00 0c 	add	r12,r8,r12
8000864c:	14 3c       	cp.w	r12,r10
8000864e:	e0 8b 00 04 	brhi	80008656 <_sbrk+0x2a>
80008652:	93 0c       	st.w	r9[0x0],r12
80008654:	c0 58       	rjmp	8000865e <_sbrk+0x32>
80008656:	c5 5c       	rcall	80008700 <__errno>
80008658:	30 c8       	mov	r8,12
8000865a:	99 08       	st.w	r12[0x0],r8
8000865c:	3f f8       	mov	r8,-1
8000865e:	10 9c       	mov	r12,r8
80008660:	d8 02       	popm	pc
80008662:	d7 03       	nop

80008664 <_write_r>:
80008664:	d4 21       	pushm	r4-r7,lr
80008666:	16 98       	mov	r8,r11
80008668:	18 97       	mov	r7,r12
8000866a:	10 9c       	mov	r12,r8
8000866c:	30 08       	mov	r8,0
8000866e:	14 9b       	mov	r11,r10
80008670:	e0 66 07 0c 	mov	r6,1804
80008674:	12 9a       	mov	r10,r9
80008676:	8d 08       	st.w	r6[0x0],r8
80008678:	c9 6f       	rcall	800085a4 <_write>
8000867a:	5b fc       	cp.w	r12,-1
8000867c:	c0 51       	brne	80008686 <_write_r+0x22>
8000867e:	6c 08       	ld.w	r8,r6[0x0]
80008680:	58 08       	cp.w	r8,0
80008682:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008686:	d8 22       	popm	r4-r7,pc

80008688 <_calloc_r>:
80008688:	d4 21       	pushm	r4-r7,lr
8000868a:	f4 0b 02 4b 	mul	r11,r10,r11
8000868e:	fe b0 f8 5f 	rcall	8000774c <_malloc_r>
80008692:	18 97       	mov	r7,r12
80008694:	c2 30       	breq	800086da <_calloc_r+0x52>
80008696:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000869a:	e0 1a ff fc 	andl	r10,0xfffc
8000869e:	20 4a       	sub	r10,4
800086a0:	e0 4a 00 24 	cp.w	r10,36
800086a4:	e0 8b 00 18 	brhi	800086d4 <_calloc_r+0x4c>
800086a8:	18 98       	mov	r8,r12
800086aa:	59 3a       	cp.w	r10,19
800086ac:	e0 88 00 0f 	brls	800086ca <_calloc_r+0x42>
800086b0:	30 09       	mov	r9,0
800086b2:	10 a9       	st.w	r8++,r9
800086b4:	10 a9       	st.w	r8++,r9
800086b6:	59 ba       	cp.w	r10,27
800086b8:	e0 88 00 09 	brls	800086ca <_calloc_r+0x42>
800086bc:	10 a9       	st.w	r8++,r9
800086be:	10 a9       	st.w	r8++,r9
800086c0:	e0 4a 00 24 	cp.w	r10,36
800086c4:	c0 31       	brne	800086ca <_calloc_r+0x42>
800086c6:	10 a9       	st.w	r8++,r9
800086c8:	10 a9       	st.w	r8++,r9
800086ca:	30 09       	mov	r9,0
800086cc:	10 a9       	st.w	r8++,r9
800086ce:	91 19       	st.w	r8[0x4],r9
800086d0:	91 09       	st.w	r8[0x0],r9
800086d2:	c0 48       	rjmp	800086da <_calloc_r+0x52>
800086d4:	30 0b       	mov	r11,0
800086d6:	fe b0 fa 7d 	rcall	80007bd0 <memset>
800086da:	0e 9c       	mov	r12,r7
800086dc:	d8 22       	popm	r4-r7,pc
800086de:	d7 03       	nop

800086e0 <_close_r>:
800086e0:	d4 21       	pushm	r4-r7,lr
800086e2:	30 08       	mov	r8,0
800086e4:	18 97       	mov	r7,r12
800086e6:	e0 66 07 0c 	mov	r6,1804
800086ea:	16 9c       	mov	r12,r11
800086ec:	8d 08       	st.w	r6[0x0],r8
800086ee:	c3 df       	rcall	80008568 <_close>
800086f0:	5b fc       	cp.w	r12,-1
800086f2:	c0 51       	brne	800086fc <_close_r+0x1c>
800086f4:	6c 08       	ld.w	r8,r6[0x0]
800086f6:	58 08       	cp.w	r8,0
800086f8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800086fc:	d8 22       	popm	r4-r7,pc
800086fe:	d7 03       	nop

80008700 <__errno>:
80008700:	e0 68 01 04 	mov	r8,260
80008704:	70 0c       	ld.w	r12,r8[0x0]
80008706:	2f 4c       	sub	r12,-12
80008708:	5e fc       	retal	r12
8000870a:	d7 03       	nop

8000870c <_fclose_r>:
8000870c:	d4 21       	pushm	r4-r7,lr
8000870e:	18 96       	mov	r6,r12
80008710:	16 97       	mov	r7,r11
80008712:	58 0b       	cp.w	r11,0
80008714:	c0 31       	brne	8000871a <_fclose_r+0xe>
80008716:	16 95       	mov	r5,r11
80008718:	c5 38       	rjmp	800087be <_fclose_r+0xb2>
8000871a:	fe b0 f4 87 	rcall	80007028 <__sfp_lock_acquire>
8000871e:	58 06       	cp.w	r6,0
80008720:	c0 70       	breq	8000872e <_fclose_r+0x22>
80008722:	6c 68       	ld.w	r8,r6[0x18]
80008724:	58 08       	cp.w	r8,0
80008726:	c0 41       	brne	8000872e <_fclose_r+0x22>
80008728:	0c 9c       	mov	r12,r6
8000872a:	fe b0 f4 d1 	rcall	800070cc <__sinit>
8000872e:	fe c8 eb 6e 	sub	r8,pc,-5266
80008732:	10 37       	cp.w	r7,r8
80008734:	c0 31       	brne	8000873a <_fclose_r+0x2e>
80008736:	6c 07       	ld.w	r7,r6[0x0]
80008738:	c0 c8       	rjmp	80008750 <_fclose_r+0x44>
8000873a:	fe c8 eb 5a 	sub	r8,pc,-5286
8000873e:	10 37       	cp.w	r7,r8
80008740:	c0 31       	brne	80008746 <_fclose_r+0x3a>
80008742:	6c 17       	ld.w	r7,r6[0x4]
80008744:	c0 68       	rjmp	80008750 <_fclose_r+0x44>
80008746:	fe c8 eb 46 	sub	r8,pc,-5306
8000874a:	10 37       	cp.w	r7,r8
8000874c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008750:	8e 69       	ld.sh	r9,r7[0xc]
80008752:	30 08       	mov	r8,0
80008754:	f0 09 19 00 	cp.h	r9,r8
80008758:	c0 51       	brne	80008762 <_fclose_r+0x56>
8000875a:	fe b0 f4 68 	rcall	8000702a <__sfp_lock_release>
8000875e:	30 05       	mov	r5,0
80008760:	c2 f8       	rjmp	800087be <_fclose_r+0xb2>
80008762:	0e 9b       	mov	r11,r7
80008764:	0c 9c       	mov	r12,r6
80008766:	fe b0 f3 db 	rcall	80006f1c <_fflush_r>
8000876a:	6e c8       	ld.w	r8,r7[0x30]
8000876c:	18 95       	mov	r5,r12
8000876e:	58 08       	cp.w	r8,0
80008770:	c0 60       	breq	8000877c <_fclose_r+0x70>
80008772:	6e 8b       	ld.w	r11,r7[0x20]
80008774:	0c 9c       	mov	r12,r6
80008776:	5d 18       	icall	r8
80008778:	f9 b5 05 ff 	movlt	r5,-1
8000877c:	8e 68       	ld.sh	r8,r7[0xc]
8000877e:	ed b8 00 07 	bld	r8,0x7
80008782:	c0 51       	brne	8000878c <_fclose_r+0x80>
80008784:	6e 4b       	ld.w	r11,r7[0x10]
80008786:	0c 9c       	mov	r12,r6
80008788:	fe b0 f5 3c 	rcall	80007200 <_free_r>
8000878c:	6e db       	ld.w	r11,r7[0x34]
8000878e:	58 0b       	cp.w	r11,0
80008790:	c0 a0       	breq	800087a4 <_fclose_r+0x98>
80008792:	ee c8 ff bc 	sub	r8,r7,-68
80008796:	10 3b       	cp.w	r11,r8
80008798:	c0 40       	breq	800087a0 <_fclose_r+0x94>
8000879a:	0c 9c       	mov	r12,r6
8000879c:	fe b0 f5 32 	rcall	80007200 <_free_r>
800087a0:	30 08       	mov	r8,0
800087a2:	8f d8       	st.w	r7[0x34],r8
800087a4:	6f 2b       	ld.w	r11,r7[0x48]
800087a6:	58 0b       	cp.w	r11,0
800087a8:	c0 70       	breq	800087b6 <_fclose_r+0xaa>
800087aa:	0c 9c       	mov	r12,r6
800087ac:	fe b0 f5 2a 	rcall	80007200 <_free_r>
800087b0:	30 08       	mov	r8,0
800087b2:	ef 48 00 48 	st.w	r7[72],r8
800087b6:	30 08       	mov	r8,0
800087b8:	ae 68       	st.h	r7[0xc],r8
800087ba:	fe b0 f4 38 	rcall	8000702a <__sfp_lock_release>
800087be:	0a 9c       	mov	r12,r5
800087c0:	d8 22       	popm	r4-r7,pc
800087c2:	d7 03       	nop

800087c4 <fclose>:
800087c4:	d4 01       	pushm	lr
800087c6:	e0 68 01 04 	mov	r8,260
800087ca:	18 9b       	mov	r11,r12
800087cc:	70 0c       	ld.w	r12,r8[0x0]
800087ce:	c9 ff       	rcall	8000870c <_fclose_r>
800087d0:	d8 02       	popm	pc
800087d2:	d7 03       	nop

800087d4 <_fstat_r>:
800087d4:	d4 21       	pushm	r4-r7,lr
800087d6:	16 98       	mov	r8,r11
800087d8:	18 97       	mov	r7,r12
800087da:	10 9c       	mov	r12,r8
800087dc:	30 08       	mov	r8,0
800087de:	e0 66 07 0c 	mov	r6,1804
800087e2:	14 9b       	mov	r11,r10
800087e4:	8d 08       	st.w	r6[0x0],r8
800087e6:	cf de       	rcall	800085e0 <_fstat>
800087e8:	5b fc       	cp.w	r12,-1
800087ea:	c0 51       	brne	800087f4 <_fstat_r+0x20>
800087ec:	6c 08       	ld.w	r8,r6[0x0]
800087ee:	58 08       	cp.w	r8,0
800087f0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800087f4:	d8 22       	popm	r4-r7,pc
800087f6:	d7 03       	nop

800087f8 <_lseek_r>:
800087f8:	d4 21       	pushm	r4-r7,lr
800087fa:	16 98       	mov	r8,r11
800087fc:	18 97       	mov	r7,r12
800087fe:	10 9c       	mov	r12,r8
80008800:	30 08       	mov	r8,0
80008802:	14 9b       	mov	r11,r10
80008804:	e0 66 07 0c 	mov	r6,1804
80008808:	12 9a       	mov	r10,r9
8000880a:	8d 08       	st.w	r6[0x0],r8
8000880c:	cb 8e       	rcall	8000857c <_lseek>
8000880e:	5b fc       	cp.w	r12,-1
80008810:	c0 51       	brne	8000881a <_lseek_r+0x22>
80008812:	6c 08       	ld.w	r8,r6[0x0]
80008814:	58 08       	cp.w	r8,0
80008816:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000881a:	d8 22       	popm	r4-r7,pc

8000881c <_read_r>:
8000881c:	d4 21       	pushm	r4-r7,lr
8000881e:	16 98       	mov	r8,r11
80008820:	18 97       	mov	r7,r12
80008822:	10 9c       	mov	r12,r8
80008824:	30 08       	mov	r8,0
80008826:	14 9b       	mov	r11,r10
80008828:	e0 66 07 0c 	mov	r6,1804
8000882c:	12 9a       	mov	r10,r9
8000882e:	8d 08       	st.w	r6[0x0],r8
80008830:	cb 0e       	rcall	80008590 <_read>
80008832:	5b fc       	cp.w	r12,-1
80008834:	c0 51       	brne	8000883e <_read_r+0x22>
80008836:	6c 08       	ld.w	r8,r6[0x0]
80008838:	58 08       	cp.w	r8,0
8000883a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000883e:	d8 22       	popm	r4-r7,pc

80008840 <__avr32_f64_sub_from_add>:
80008840:	ee 19 80 00 	eorh	r9,0x8000

80008844 <__avr32_f64_sub>:
80008844:	f7 e9 20 0c 	eor	r12,r11,r9
80008848:	e0 86 00 ca 	brmi	800089dc <__avr32_f64_add_from_sub>
8000884c:	eb cd 40 e0 	pushm	r5-r7,lr
80008850:	16 9c       	mov	r12,r11
80008852:	e6 1c 80 00 	andh	r12,0x8000,COH
80008856:	bf db       	cbr	r11,0x1f
80008858:	bf d9       	cbr	r9,0x1f
8000885a:	10 3a       	cp.w	r10,r8
8000885c:	f2 0b 13 00 	cpc	r11,r9
80008860:	c0 92       	brcc	80008872 <__avr32_f64_sub+0x2e>
80008862:	16 97       	mov	r7,r11
80008864:	12 9b       	mov	r11,r9
80008866:	0e 99       	mov	r9,r7
80008868:	14 97       	mov	r7,r10
8000886a:	10 9a       	mov	r10,r8
8000886c:	0e 98       	mov	r8,r7
8000886e:	ee 1c 80 00 	eorh	r12,0x8000
80008872:	f6 07 16 14 	lsr	r7,r11,0x14
80008876:	ab 7b       	lsl	r11,0xb
80008878:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000887c:	ab 7a       	lsl	r10,0xb
8000887e:	bf bb       	sbr	r11,0x1f
80008880:	f2 06 16 14 	lsr	r6,r9,0x14
80008884:	c4 40       	breq	8000890c <__avr32_f64_sub_opL_subnormal>
80008886:	ab 79       	lsl	r9,0xb
80008888:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000888c:	ab 78       	lsl	r8,0xb
8000888e:	bf b9       	sbr	r9,0x1f

80008890 <__avr32_f64_sub_opL_subnormal_done>:
80008890:	e0 47 07 ff 	cp.w	r7,2047
80008894:	c4 f0       	breq	80008932 <__avr32_f64_sub_opH_nan_or_inf>
80008896:	0e 26       	rsub	r6,r7
80008898:	c1 20       	breq	800088bc <__avr32_f64_sub_shift_done>
8000889a:	ec 05 11 20 	rsub	r5,r6,32
8000889e:	e0 46 00 20 	cp.w	r6,32
800088a2:	c7 c2       	brcc	8000899a <__avr32_f64_sub_longshift>
800088a4:	f0 05 09 4e 	lsl	lr,r8,r5
800088a8:	f2 05 09 45 	lsl	r5,r9,r5
800088ac:	f0 06 0a 48 	lsr	r8,r8,r6
800088b0:	f2 06 0a 49 	lsr	r9,r9,r6
800088b4:	0a 48       	or	r8,r5
800088b6:	58 0e       	cp.w	lr,0
800088b8:	5f 1e       	srne	lr
800088ba:	1c 48       	or	r8,lr

800088bc <__avr32_f64_sub_shift_done>:
800088bc:	10 1a       	sub	r10,r8
800088be:	f6 09 01 4b 	sbc	r11,r11,r9
800088c2:	f6 06 12 00 	clz	r6,r11
800088c6:	c0 e0       	breq	800088e2 <__avr32_f64_sub_longnormalize_done>
800088c8:	c7 83       	brcs	800089b8 <__avr32_f64_sub_longnormalize>
800088ca:	ec 0e 11 20 	rsub	lr,r6,32
800088ce:	f6 06 09 4b 	lsl	r11,r11,r6
800088d2:	f4 0e 0a 4e 	lsr	lr,r10,lr
800088d6:	1c 4b       	or	r11,lr
800088d8:	f4 06 09 4a 	lsl	r10,r10,r6
800088dc:	0c 17       	sub	r7,r6
800088de:	e0 8a 00 39 	brle	80008950 <__avr32_f64_sub_subnormal_result>

800088e2 <__avr32_f64_sub_longnormalize_done>:
800088e2:	f4 09 15 15 	lsl	r9,r10,0x15
800088e6:	ab 9a       	lsr	r10,0xb
800088e8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800088ec:	ab 9b       	lsr	r11,0xb
800088ee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800088f2:	18 4b       	or	r11,r12

800088f4 <__avr32_f64_sub_round>:
800088f4:	fc 17 80 00 	movh	r7,0x8000
800088f8:	ed ba 00 00 	bld	r10,0x0
800088fc:	f7 b7 01 ff 	subne	r7,-1
80008900:	0e 39       	cp.w	r9,r7
80008902:	5f 29       	srhs	r9
80008904:	12 0a       	add	r10,r9
80008906:	5c 0b       	acr	r11
80008908:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000890c <__avr32_f64_sub_opL_subnormal>:
8000890c:	ab 79       	lsl	r9,0xb
8000890e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008912:	ab 78       	lsl	r8,0xb
80008914:	f3 e8 10 0e 	or	lr,r9,r8
80008918:	f9 b6 01 01 	movne	r6,1
8000891c:	ee 0e 11 00 	rsub	lr,r7,0
80008920:	f9 b7 00 01 	moveq	r7,1
80008924:	ef bb 00 1f 	bst	r11,0x1f
80008928:	f7 ea 10 0e 	or	lr,r11,r10
8000892c:	f9 b7 00 00 	moveq	r7,0
80008930:	cb 0b       	rjmp	80008890 <__avr32_f64_sub_opL_subnormal_done>

80008932 <__avr32_f64_sub_opH_nan_or_inf>:
80008932:	bf db       	cbr	r11,0x1f
80008934:	f7 ea 10 0e 	or	lr,r11,r10
80008938:	c0 81       	brne	80008948 <__avr32_f64_sub_return_nan>
8000893a:	e0 46 07 ff 	cp.w	r6,2047
8000893e:	c0 50       	breq	80008948 <__avr32_f64_sub_return_nan>
80008940:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008944:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008948 <__avr32_f64_sub_return_nan>:
80008948:	3f fa       	mov	r10,-1
8000894a:	3f fb       	mov	r11,-1
8000894c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008950 <__avr32_f64_sub_subnormal_result>:
80008950:	5c 37       	neg	r7
80008952:	2f f7       	sub	r7,-1
80008954:	f1 b7 04 c0 	satu	r7,0x6
80008958:	e0 47 00 20 	cp.w	r7,32
8000895c:	c1 14       	brge	8000897e <__avr32_f64_sub_subnormal_result+0x2e>
8000895e:	ee 08 11 20 	rsub	r8,r7,32
80008962:	f4 08 09 49 	lsl	r9,r10,r8
80008966:	5f 16       	srne	r6
80008968:	f4 07 0a 4a 	lsr	r10,r10,r7
8000896c:	0c 4a       	or	r10,r6
8000896e:	f6 08 09 49 	lsl	r9,r11,r8
80008972:	f5 e9 10 0a 	or	r10,r10,r9
80008976:	f4 07 0a 4b 	lsr	r11,r10,r7
8000897a:	30 07       	mov	r7,0
8000897c:	cb 3b       	rjmp	800088e2 <__avr32_f64_sub_longnormalize_done>
8000897e:	ee 08 11 40 	rsub	r8,r7,64
80008982:	f6 08 09 49 	lsl	r9,r11,r8
80008986:	14 49       	or	r9,r10
80008988:	5f 16       	srne	r6
8000898a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000898e:	0c 4a       	or	r10,r6
80008990:	30 0b       	mov	r11,0
80008992:	30 07       	mov	r7,0
80008994:	ca 7b       	rjmp	800088e2 <__avr32_f64_sub_longnormalize_done>
80008996:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000899a <__avr32_f64_sub_longshift>:
8000899a:	f1 b6 04 c0 	satu	r6,0x6
8000899e:	f0 0e 17 00 	moveq	lr,r8
800089a2:	c0 40       	breq	800089aa <__avr32_f64_sub_longshift+0x10>
800089a4:	f2 05 09 4e 	lsl	lr,r9,r5
800089a8:	10 4e       	or	lr,r8
800089aa:	f2 06 0a 48 	lsr	r8,r9,r6
800089ae:	30 09       	mov	r9,0
800089b0:	58 0e       	cp.w	lr,0
800089b2:	5f 1e       	srne	lr
800089b4:	1c 48       	or	r8,lr
800089b6:	c8 3b       	rjmp	800088bc <__avr32_f64_sub_shift_done>

800089b8 <__avr32_f64_sub_longnormalize>:
800089b8:	f4 06 12 00 	clz	r6,r10
800089bc:	f9 b7 03 00 	movlo	r7,0
800089c0:	f9 b6 03 00 	movlo	r6,0
800089c4:	f9 bc 03 00 	movlo	r12,0
800089c8:	f7 b6 02 e0 	subhs	r6,-32
800089cc:	f4 06 09 4b 	lsl	r11,r10,r6
800089d0:	30 0a       	mov	r10,0
800089d2:	0c 17       	sub	r7,r6
800089d4:	fe 9a ff be 	brle	80008950 <__avr32_f64_sub_subnormal_result>
800089d8:	c8 5b       	rjmp	800088e2 <__avr32_f64_sub_longnormalize_done>
800089da:	d7 03       	nop

800089dc <__avr32_f64_add_from_sub>:
800089dc:	ee 19 80 00 	eorh	r9,0x8000

800089e0 <__avr32_f64_add>:
800089e0:	f7 e9 20 0c 	eor	r12,r11,r9
800089e4:	fe 96 ff 2e 	brmi	80008840 <__avr32_f64_sub_from_add>
800089e8:	eb cd 40 e0 	pushm	r5-r7,lr
800089ec:	16 9c       	mov	r12,r11
800089ee:	e6 1c 80 00 	andh	r12,0x8000,COH
800089f2:	bf db       	cbr	r11,0x1f
800089f4:	bf d9       	cbr	r9,0x1f
800089f6:	12 3b       	cp.w	r11,r9
800089f8:	c0 72       	brcc	80008a06 <__avr32_f64_add+0x26>
800089fa:	16 97       	mov	r7,r11
800089fc:	12 9b       	mov	r11,r9
800089fe:	0e 99       	mov	r9,r7
80008a00:	14 97       	mov	r7,r10
80008a02:	10 9a       	mov	r10,r8
80008a04:	0e 98       	mov	r8,r7
80008a06:	30 0e       	mov	lr,0
80008a08:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008a0c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008a10:	b5 ab       	sbr	r11,0x14
80008a12:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008a16:	c6 20       	breq	80008ada <__avr32_f64_add_op2_subnormal>
80008a18:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008a1c:	b5 a9       	sbr	r9,0x14
80008a1e:	e0 47 07 ff 	cp.w	r7,2047
80008a22:	c2 80       	breq	80008a72 <__avr32_f64_add_opH_nan_or_inf>
80008a24:	0e 26       	rsub	r6,r7
80008a26:	c1 20       	breq	80008a4a <__avr32_f64_add_shift_done>
80008a28:	e0 46 00 36 	cp.w	r6,54
80008a2c:	c1 52       	brcc	80008a56 <__avr32_f64_add_res_of_done>
80008a2e:	ec 05 11 20 	rsub	r5,r6,32
80008a32:	e0 46 00 20 	cp.w	r6,32
80008a36:	c3 52       	brcc	80008aa0 <__avr32_f64_add_longshift>
80008a38:	f0 05 09 4e 	lsl	lr,r8,r5
80008a3c:	f2 05 09 45 	lsl	r5,r9,r5
80008a40:	f0 06 0a 48 	lsr	r8,r8,r6
80008a44:	f2 06 0a 49 	lsr	r9,r9,r6
80008a48:	0a 48       	or	r8,r5

80008a4a <__avr32_f64_add_shift_done>:
80008a4a:	10 0a       	add	r10,r8
80008a4c:	f6 09 00 4b 	adc	r11,r11,r9
80008a50:	ed bb 00 15 	bld	r11,0x15
80008a54:	c3 40       	breq	80008abc <__avr32_f64_add_res_of>

80008a56 <__avr32_f64_add_res_of_done>:
80008a56:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008a5a:	18 4b       	or	r11,r12

80008a5c <__avr32_f64_add_round>:
80008a5c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008a60:	18 4e       	or	lr,r12
80008a62:	ee 1e 80 00 	eorh	lr,0x8000
80008a66:	f1 be 04 20 	satu	lr,0x1
80008a6a:	1c 0a       	add	r10,lr
80008a6c:	5c 0b       	acr	r11
80008a6e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a72 <__avr32_f64_add_opH_nan_or_inf>:
80008a72:	b5 cb       	cbr	r11,0x14
80008a74:	f7 ea 10 0e 	or	lr,r11,r10
80008a78:	c1 01       	brne	80008a98 <__avr32_f64_add_return_nan>
80008a7a:	e0 46 07 ff 	cp.w	r6,2047
80008a7e:	c0 30       	breq	80008a84 <__avr32_f64_add_opL_nan_or_inf>
80008a80:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a84 <__avr32_f64_add_opL_nan_or_inf>:
80008a84:	b5 c9       	cbr	r9,0x14
80008a86:	f3 e8 10 0e 	or	lr,r9,r8
80008a8a:	c0 71       	brne	80008a98 <__avr32_f64_add_return_nan>
80008a8c:	30 0a       	mov	r10,0
80008a8e:	fc 1b 7f f0 	movh	r11,0x7ff0
80008a92:	18 4b       	or	r11,r12
80008a94:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008a98 <__avr32_f64_add_return_nan>:
80008a98:	3f fa       	mov	r10,-1
80008a9a:	3f fb       	mov	r11,-1
80008a9c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008aa0 <__avr32_f64_add_longshift>:
80008aa0:	f1 b6 04 c0 	satu	r6,0x6
80008aa4:	f0 0e 17 00 	moveq	lr,r8
80008aa8:	c0 60       	breq	80008ab4 <__avr32_f64_add_longshift+0x14>
80008aaa:	f2 05 09 4e 	lsl	lr,r9,r5
80008aae:	58 08       	cp.w	r8,0
80008ab0:	5f 18       	srne	r8
80008ab2:	10 4e       	or	lr,r8
80008ab4:	f2 06 0a 48 	lsr	r8,r9,r6
80008ab8:	30 09       	mov	r9,0
80008aba:	cc 8b       	rjmp	80008a4a <__avr32_f64_add_shift_done>

80008abc <__avr32_f64_add_res_of>:
80008abc:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008ac0:	a1 9b       	lsr	r11,0x1
80008ac2:	5d 0a       	ror	r10
80008ac4:	5d 0e       	ror	lr
80008ac6:	2f f7       	sub	r7,-1
80008ac8:	e0 47 07 ff 	cp.w	r7,2047
80008acc:	f9 ba 00 00 	moveq	r10,0
80008ad0:	f9 bb 00 00 	moveq	r11,0
80008ad4:	f9 be 00 00 	moveq	lr,0
80008ad8:	cb fb       	rjmp	80008a56 <__avr32_f64_add_res_of_done>

80008ada <__avr32_f64_add_op2_subnormal>:
80008ada:	30 16       	mov	r6,1
80008adc:	58 07       	cp.w	r7,0
80008ade:	ca 01       	brne	80008a1e <__avr32_f64_add+0x3e>
80008ae0:	b5 cb       	cbr	r11,0x14
80008ae2:	10 0a       	add	r10,r8
80008ae4:	f6 09 00 4b 	adc	r11,r11,r9
80008ae8:	18 4b       	or	r11,r12
80008aea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008aee:	d7 03       	nop

80008af0 <__avr32_f64_to_u32>:
80008af0:	58 0b       	cp.w	r11,0
80008af2:	5e 6d       	retmi	0

80008af4 <__avr32_f64_to_s32>:
80008af4:	f6 0c 15 01 	lsl	r12,r11,0x1
80008af8:	b5 9c       	lsr	r12,0x15
80008afa:	e0 2c 03 ff 	sub	r12,1023
80008afe:	5e 3d       	retlo	0
80008b00:	f8 0c 11 1f 	rsub	r12,r12,31
80008b04:	16 99       	mov	r9,r11
80008b06:	ab 7b       	lsl	r11,0xb
80008b08:	bf bb       	sbr	r11,0x1f
80008b0a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008b0e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008b12:	a1 79       	lsl	r9,0x1
80008b14:	5e 2b       	reths	r11
80008b16:	5c 3b       	neg	r11
80008b18:	5e fb       	retal	r11

80008b1a <__avr32_f64_cmp_eq>:
80008b1a:	10 3a       	cp.w	r10,r8
80008b1c:	f2 0b 13 00 	cpc	r11,r9
80008b20:	c0 80       	breq	80008b30 <__avr32_f64_cmp_eq+0x16>
80008b22:	a1 7b       	lsl	r11,0x1
80008b24:	a1 79       	lsl	r9,0x1
80008b26:	14 4b       	or	r11,r10
80008b28:	12 4b       	or	r11,r9
80008b2a:	10 4b       	or	r11,r8
80008b2c:	5e 0f       	reteq	1
80008b2e:	5e fd       	retal	0
80008b30:	a1 7b       	lsl	r11,0x1
80008b32:	fc 1c ff e0 	movh	r12,0xffe0
80008b36:	58 0a       	cp.w	r10,0
80008b38:	f8 0b 13 00 	cpc	r11,r12
80008b3c:	5e 8f       	retls	1
80008b3e:	5e fd       	retal	0

80008b40 <__avr32_f64_cmp_ge>:
80008b40:	1a de       	st.w	--sp,lr
80008b42:	1a d7       	st.w	--sp,r7
80008b44:	a1 7b       	lsl	r11,0x1
80008b46:	5f 3c       	srlo	r12
80008b48:	a1 79       	lsl	r9,0x1
80008b4a:	5f 37       	srlo	r7
80008b4c:	5c fc       	rol	r12
80008b4e:	fc 1e ff e0 	movh	lr,0xffe0
80008b52:	58 0a       	cp.w	r10,0
80008b54:	fc 0b 13 00 	cpc	r11,lr
80008b58:	e0 8b 00 1d 	brhi	80008b92 <__avr32_f64_cmp_ge+0x52>
80008b5c:	58 08       	cp.w	r8,0
80008b5e:	fc 09 13 00 	cpc	r9,lr
80008b62:	e0 8b 00 18 	brhi	80008b92 <__avr32_f64_cmp_ge+0x52>
80008b66:	58 0b       	cp.w	r11,0
80008b68:	f5 ba 00 00 	subfeq	r10,0
80008b6c:	c1 50       	breq	80008b96 <__avr32_f64_cmp_ge+0x56>
80008b6e:	1b 07       	ld.w	r7,sp++
80008b70:	1b 0e       	ld.w	lr,sp++
80008b72:	58 3c       	cp.w	r12,3
80008b74:	c0 a0       	breq	80008b88 <__avr32_f64_cmp_ge+0x48>
80008b76:	58 1c       	cp.w	r12,1
80008b78:	c0 33       	brcs	80008b7e <__avr32_f64_cmp_ge+0x3e>
80008b7a:	5e 0f       	reteq	1
80008b7c:	5e 1d       	retne	0
80008b7e:	10 3a       	cp.w	r10,r8
80008b80:	f2 0b 13 00 	cpc	r11,r9
80008b84:	5e 2f       	reths	1
80008b86:	5e 3d       	retlo	0
80008b88:	14 38       	cp.w	r8,r10
80008b8a:	f6 09 13 00 	cpc	r9,r11
80008b8e:	5e 2f       	reths	1
80008b90:	5e 3d       	retlo	0
80008b92:	1b 07       	ld.w	r7,sp++
80008b94:	d8 0a       	popm	pc,r12=0
80008b96:	58 17       	cp.w	r7,1
80008b98:	5f 0c       	sreq	r12
80008b9a:	58 09       	cp.w	r9,0
80008b9c:	f5 b8 00 00 	subfeq	r8,0
80008ba0:	1b 07       	ld.w	r7,sp++
80008ba2:	1b 0e       	ld.w	lr,sp++
80008ba4:	5e 0f       	reteq	1
80008ba6:	5e fc       	retal	r12

80008ba8 <__avr32_f64_div>:
80008ba8:	eb cd 40 ff 	pushm	r0-r7,lr
80008bac:	f7 e9 20 0e 	eor	lr,r11,r9
80008bb0:	f6 07 16 14 	lsr	r7,r11,0x14
80008bb4:	a9 7b       	lsl	r11,0x9
80008bb6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80008bba:	a9 7a       	lsl	r10,0x9
80008bbc:	bd bb       	sbr	r11,0x1d
80008bbe:	e4 1b 3f ff 	andh	r11,0x3fff
80008bc2:	ab d7       	cbr	r7,0xb
80008bc4:	e0 80 00 cc 	breq	80008d5c <__avr32_f64_div_round_subnormal+0x54>
80008bc8:	e0 47 07 ff 	cp.w	r7,2047
80008bcc:	e0 84 00 b5 	brge	80008d36 <__avr32_f64_div_round_subnormal+0x2e>
80008bd0:	f2 06 16 14 	lsr	r6,r9,0x14
80008bd4:	a9 79       	lsl	r9,0x9
80008bd6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80008bda:	a9 78       	lsl	r8,0x9
80008bdc:	bd b9       	sbr	r9,0x1d
80008bde:	e4 19 3f ff 	andh	r9,0x3fff
80008be2:	ab d6       	cbr	r6,0xb
80008be4:	e0 80 00 e2 	breq	80008da8 <__avr32_f64_div_round_subnormal+0xa0>
80008be8:	e0 46 07 ff 	cp.w	r6,2047
80008bec:	e0 84 00 b2 	brge	80008d50 <__avr32_f64_div_round_subnormal+0x48>
80008bf0:	0c 17       	sub	r7,r6
80008bf2:	fe 37 fc 01 	sub	r7,-1023
80008bf6:	fc 1c 80 00 	movh	r12,0x8000
80008bfa:	f8 03 16 01 	lsr	r3,r12,0x1
80008bfe:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008c02:	5c d4       	com	r4
80008c04:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80008c08:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c0c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008c10:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c14:	ea 03 15 02 	lsl	r3,r5,0x2
80008c18:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c1c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008c20:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c24:	ea 03 15 02 	lsl	r3,r5,0x2
80008c28:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c2c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80008c30:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c34:	ea 03 15 02 	lsl	r3,r5,0x2
80008c38:	e6 08 06 40 	mulu.d	r0,r3,r8
80008c3c:	e4 09 07 40 	macu.d	r0,r2,r9
80008c40:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c44:	02 04       	add	r4,r1
80008c46:	5c 05       	acr	r5
80008c48:	a3 65       	lsl	r5,0x2
80008c4a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008c4e:	a3 64       	lsl	r4,0x2
80008c50:	5c 34       	neg	r4
80008c52:	f8 05 01 45 	sbc	r5,r12,r5
80008c56:	e6 04 06 40 	mulu.d	r0,r3,r4
80008c5a:	e4 05 07 40 	macu.d	r0,r2,r5
80008c5e:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c62:	02 04       	add	r4,r1
80008c64:	5c 05       	acr	r5
80008c66:	ea 03 15 02 	lsl	r3,r5,0x2
80008c6a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008c6e:	e8 02 15 02 	lsl	r2,r4,0x2
80008c72:	e6 08 06 40 	mulu.d	r0,r3,r8
80008c76:	e4 09 07 40 	macu.d	r0,r2,r9
80008c7a:	e6 09 06 44 	mulu.d	r4,r3,r9
80008c7e:	02 04       	add	r4,r1
80008c80:	5c 05       	acr	r5
80008c82:	a3 65       	lsl	r5,0x2
80008c84:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80008c88:	a3 64       	lsl	r4,0x2
80008c8a:	5c 34       	neg	r4
80008c8c:	f8 05 01 45 	sbc	r5,r12,r5
80008c90:	e6 04 06 40 	mulu.d	r0,r3,r4
80008c94:	e4 05 07 40 	macu.d	r0,r2,r5
80008c98:	e6 05 06 44 	mulu.d	r4,r3,r5
80008c9c:	02 04       	add	r4,r1
80008c9e:	5c 05       	acr	r5
80008ca0:	ea 03 15 02 	lsl	r3,r5,0x2
80008ca4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008ca8:	e8 02 15 02 	lsl	r2,r4,0x2
80008cac:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008cb0:	e4 0b 07 40 	macu.d	r0,r2,r11
80008cb4:	e6 0b 06 42 	mulu.d	r2,r3,r11
80008cb8:	02 02       	add	r2,r1
80008cba:	5c 03       	acr	r3
80008cbc:	ed b3 00 1c 	bld	r3,0x1c
80008cc0:	c0 90       	breq	80008cd2 <__avr32_f64_div+0x12a>
80008cc2:	a1 72       	lsl	r2,0x1
80008cc4:	5c f3       	rol	r3
80008cc6:	20 17       	sub	r7,1
80008cc8:	a3 9a       	lsr	r10,0x3
80008cca:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008cce:	a3 9b       	lsr	r11,0x3
80008cd0:	c0 58       	rjmp	80008cda <__avr32_f64_div+0x132>
80008cd2:	a5 8a       	lsr	r10,0x4
80008cd4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80008cd8:	a5 8b       	lsr	r11,0x4
80008cda:	58 07       	cp.w	r7,0
80008cdc:	e0 8a 00 8b 	brle	80008df2 <__avr32_f64_div_res_subnormal>
80008ce0:	e0 12 ff 00 	andl	r2,0xff00
80008ce4:	e8 12 00 80 	orl	r2,0x80
80008ce8:	e6 08 06 40 	mulu.d	r0,r3,r8
80008cec:	e4 09 07 40 	macu.d	r0,r2,r9
80008cf0:	e4 08 06 44 	mulu.d	r4,r2,r8
80008cf4:	e6 09 06 48 	mulu.d	r8,r3,r9
80008cf8:	00 05       	add	r5,r0
80008cfa:	f0 01 00 48 	adc	r8,r8,r1
80008cfe:	5c 09       	acr	r9
80008d00:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008d04:	58 04       	cp.w	r4,0
80008d06:	5c 25       	cpc	r5

80008d08 <__avr32_f64_div_round_subnormal>:
80008d08:	f4 08 13 00 	cpc	r8,r10
80008d0c:	f6 09 13 00 	cpc	r9,r11
80008d10:	5f 36       	srlo	r6
80008d12:	f8 06 17 00 	moveq	r6,r12
80008d16:	e4 0a 16 08 	lsr	r10,r2,0x8
80008d1a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80008d1e:	e6 0b 16 08 	lsr	r11,r3,0x8
80008d22:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008d26:	ed be 00 1f 	bld	lr,0x1f
80008d2a:	ef bb 00 1f 	bst	r11,0x1f
80008d2e:	0c 0a       	add	r10,r6
80008d30:	5c 0b       	acr	r11
80008d32:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008d36:	e4 1b 00 0f 	andh	r11,0xf
80008d3a:	14 4b       	or	r11,r10
80008d3c:	e0 81 00 a7 	brne	80008e8a <__avr32_f64_div_res_subnormal+0x98>
80008d40:	f2 06 16 14 	lsr	r6,r9,0x14
80008d44:	ab d6       	cbr	r6,0xb
80008d46:	e0 46 07 ff 	cp.w	r6,2047
80008d4a:	e0 81 00 a4 	brne	80008e92 <__avr32_f64_div_res_subnormal+0xa0>
80008d4e:	c9 e8       	rjmp	80008e8a <__avr32_f64_div_res_subnormal+0x98>
80008d50:	e4 19 00 0f 	andh	r9,0xf
80008d54:	10 49       	or	r9,r8
80008d56:	e0 81 00 9a 	brne	80008e8a <__avr32_f64_div_res_subnormal+0x98>
80008d5a:	c9 28       	rjmp	80008e7e <__avr32_f64_div_res_subnormal+0x8c>
80008d5c:	a3 7b       	lsl	r11,0x3
80008d5e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80008d62:	a3 7a       	lsl	r10,0x3
80008d64:	f5 eb 10 04 	or	r4,r10,r11
80008d68:	e0 80 00 a0 	breq	80008ea8 <__avr32_f64_div_op1_zero>
80008d6c:	f6 04 12 00 	clz	r4,r11
80008d70:	c1 70       	breq	80008d9e <__avr32_f64_div_round_subnormal+0x96>
80008d72:	c0 c3       	brcs	80008d8a <__avr32_f64_div_round_subnormal+0x82>
80008d74:	e8 05 11 20 	rsub	r5,r4,32
80008d78:	f6 04 09 4b 	lsl	r11,r11,r4
80008d7c:	f4 05 0a 45 	lsr	r5,r10,r5
80008d80:	0a 4b       	or	r11,r5
80008d82:	f4 04 09 4a 	lsl	r10,r10,r4
80008d86:	08 17       	sub	r7,r4
80008d88:	c0 b8       	rjmp	80008d9e <__avr32_f64_div_round_subnormal+0x96>
80008d8a:	f4 04 12 00 	clz	r4,r10
80008d8e:	f9 b4 03 00 	movlo	r4,0
80008d92:	f7 b4 02 e0 	subhs	r4,-32
80008d96:	f4 04 09 4b 	lsl	r11,r10,r4
80008d9a:	30 0a       	mov	r10,0
80008d9c:	08 17       	sub	r7,r4
80008d9e:	a3 8a       	lsr	r10,0x2
80008da0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008da4:	a3 8b       	lsr	r11,0x2
80008da6:	c1 1b       	rjmp	80008bc8 <__avr32_f64_div+0x20>
80008da8:	a3 79       	lsl	r9,0x3
80008daa:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008dae:	a3 78       	lsl	r8,0x3
80008db0:	f3 e8 10 04 	or	r4,r9,r8
80008db4:	c6 f0       	breq	80008e92 <__avr32_f64_div_res_subnormal+0xa0>
80008db6:	f2 04 12 00 	clz	r4,r9
80008dba:	c1 70       	breq	80008de8 <__avr32_f64_div_round_subnormal+0xe0>
80008dbc:	c0 c3       	brcs	80008dd4 <__avr32_f64_div_round_subnormal+0xcc>
80008dbe:	e8 05 11 20 	rsub	r5,r4,32
80008dc2:	f2 04 09 49 	lsl	r9,r9,r4
80008dc6:	f0 05 0a 45 	lsr	r5,r8,r5
80008dca:	0a 49       	or	r9,r5
80008dcc:	f0 04 09 48 	lsl	r8,r8,r4
80008dd0:	08 16       	sub	r6,r4
80008dd2:	c0 b8       	rjmp	80008de8 <__avr32_f64_div_round_subnormal+0xe0>
80008dd4:	f0 04 12 00 	clz	r4,r8
80008dd8:	f9 b4 03 00 	movlo	r4,0
80008ddc:	f7 b4 02 e0 	subhs	r4,-32
80008de0:	f0 04 09 49 	lsl	r9,r8,r4
80008de4:	30 08       	mov	r8,0
80008de6:	08 16       	sub	r6,r4
80008de8:	a3 88       	lsr	r8,0x2
80008dea:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008dee:	a3 89       	lsr	r9,0x2
80008df0:	cf ca       	rjmp	80008be8 <__avr32_f64_div+0x40>

80008df2 <__avr32_f64_div_res_subnormal>:
80008df2:	5c 37       	neg	r7
80008df4:	2f f7       	sub	r7,-1
80008df6:	f1 b7 04 c0 	satu	r7,0x6
80008dfa:	e0 47 00 20 	cp.w	r7,32
80008dfe:	c1 54       	brge	80008e28 <__avr32_f64_div_res_subnormal+0x36>
80008e00:	ee 06 11 20 	rsub	r6,r7,32
80008e04:	e4 07 0a 42 	lsr	r2,r2,r7
80008e08:	e6 06 09 4c 	lsl	r12,r3,r6
80008e0c:	18 42       	or	r2,r12
80008e0e:	e6 07 0a 43 	lsr	r3,r3,r7
80008e12:	f4 06 09 41 	lsl	r1,r10,r6
80008e16:	f4 07 0a 4a 	lsr	r10,r10,r7
80008e1a:	f6 06 09 4c 	lsl	r12,r11,r6
80008e1e:	18 4a       	or	r10,r12
80008e20:	f6 07 0a 4b 	lsr	r11,r11,r7
80008e24:	30 00       	mov	r0,0
80008e26:	c1 58       	rjmp	80008e50 <__avr32_f64_div_res_subnormal+0x5e>
80008e28:	ee 06 11 20 	rsub	r6,r7,32
80008e2c:	f9 b0 00 00 	moveq	r0,0
80008e30:	f9 bc 00 00 	moveq	r12,0
80008e34:	c0 50       	breq	80008e3e <__avr32_f64_div_res_subnormal+0x4c>
80008e36:	f4 06 09 40 	lsl	r0,r10,r6
80008e3a:	f6 06 09 4c 	lsl	r12,r11,r6
80008e3e:	e6 07 0a 42 	lsr	r2,r3,r7
80008e42:	30 03       	mov	r3,0
80008e44:	f4 07 0a 41 	lsr	r1,r10,r7
80008e48:	18 41       	or	r1,r12
80008e4a:	f6 07 0a 4a 	lsr	r10,r11,r7
80008e4e:	30 0b       	mov	r11,0
80008e50:	e0 12 ff 00 	andl	r2,0xff00
80008e54:	e8 12 00 80 	orl	r2,0x80
80008e58:	e6 08 06 46 	mulu.d	r6,r3,r8
80008e5c:	e4 09 07 46 	macu.d	r6,r2,r9
80008e60:	e4 08 06 44 	mulu.d	r4,r2,r8
80008e64:	e6 09 06 48 	mulu.d	r8,r3,r9
80008e68:	0c 05       	add	r5,r6
80008e6a:	f0 07 00 48 	adc	r8,r8,r7
80008e6e:	5c 09       	acr	r9
80008e70:	30 07       	mov	r7,0
80008e72:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008e76:	00 34       	cp.w	r4,r0
80008e78:	e2 05 13 00 	cpc	r5,r1
80008e7c:	c4 6b       	rjmp	80008d08 <__avr32_f64_div_round_subnormal>
80008e7e:	1c 9b       	mov	r11,lr
80008e80:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e84:	30 0a       	mov	r10,0
80008e86:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e8a:	3f fb       	mov	r11,-1
80008e8c:	30 0a       	mov	r10,0
80008e8e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008e92:	f5 eb 10 04 	or	r4,r10,r11
80008e96:	c0 90       	breq	80008ea8 <__avr32_f64_div_op1_zero>
80008e98:	1c 9b       	mov	r11,lr
80008e9a:	e6 1b 80 00 	andh	r11,0x8000,COH
80008e9e:	ea 1b 7f f0 	orh	r11,0x7ff0
80008ea2:	30 0a       	mov	r10,0
80008ea4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80008ea8 <__avr32_f64_div_op1_zero>:
80008ea8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008eac:	ce f0       	breq	80008e8a <__avr32_f64_div_res_subnormal+0x98>
80008eae:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008eb2:	e0 44 07 ff 	cp.w	r4,2047
80008eb6:	ce 41       	brne	80008e7e <__avr32_f64_div_res_subnormal+0x8c>
80008eb8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008ebc:	ce 10       	breq	80008e7e <__avr32_f64_div_res_subnormal+0x8c>
80008ebe:	ce 6b       	rjmp	80008e8a <__avr32_f64_div_res_subnormal+0x98>

80008ec0 <__avr32_udiv64>:
80008ec0:	d4 31       	pushm	r0-r7,lr
80008ec2:	1a 97       	mov	r7,sp
80008ec4:	20 3d       	sub	sp,12
80008ec6:	10 9c       	mov	r12,r8
80008ec8:	12 9e       	mov	lr,r9
80008eca:	14 93       	mov	r3,r10
80008ecc:	58 09       	cp.w	r9,0
80008ece:	e0 81 00 bd 	brne	80009048 <__avr32_udiv64+0x188>
80008ed2:	16 38       	cp.w	r8,r11
80008ed4:	e0 88 00 40 	brls	80008f54 <__avr32_udiv64+0x94>
80008ed8:	f0 08 12 00 	clz	r8,r8
80008edc:	c0 d0       	breq	80008ef6 <__avr32_udiv64+0x36>
80008ede:	f6 08 09 4b 	lsl	r11,r11,r8
80008ee2:	f0 09 11 20 	rsub	r9,r8,32
80008ee6:	f8 08 09 4c 	lsl	r12,r12,r8
80008eea:	f4 09 0a 49 	lsr	r9,r10,r9
80008eee:	f4 08 09 43 	lsl	r3,r10,r8
80008ef2:	f3 eb 10 0b 	or	r11,r9,r11
80008ef6:	f8 0e 16 10 	lsr	lr,r12,0x10
80008efa:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008efe:	f6 0e 0d 00 	divu	r0,r11,lr
80008f02:	e6 0b 16 10 	lsr	r11,r3,0x10
80008f06:	00 99       	mov	r9,r0
80008f08:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f0c:	e0 0a 02 48 	mul	r8,r0,r10
80008f10:	10 3b       	cp.w	r11,r8
80008f12:	c0 a2       	brcc	80008f26 <__avr32_udiv64+0x66>
80008f14:	20 19       	sub	r9,1
80008f16:	18 0b       	add	r11,r12
80008f18:	18 3b       	cp.w	r11,r12
80008f1a:	c0 63       	brcs	80008f26 <__avr32_udiv64+0x66>
80008f1c:	10 3b       	cp.w	r11,r8
80008f1e:	f7 b9 03 01 	sublo	r9,1
80008f22:	f7 dc e3 0b 	addcs	r11,r11,r12
80008f26:	f6 08 01 01 	sub	r1,r11,r8
80008f2a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008f2e:	e2 0e 0d 00 	divu	r0,r1,lr
80008f32:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008f36:	00 98       	mov	r8,r0
80008f38:	e0 0a 02 4a 	mul	r10,r0,r10
80008f3c:	14 33       	cp.w	r3,r10
80008f3e:	c0 82       	brcc	80008f4e <__avr32_udiv64+0x8e>
80008f40:	20 18       	sub	r8,1
80008f42:	18 03       	add	r3,r12
80008f44:	18 33       	cp.w	r3,r12
80008f46:	c0 43       	brcs	80008f4e <__avr32_udiv64+0x8e>
80008f48:	14 33       	cp.w	r3,r10
80008f4a:	f7 b8 03 01 	sublo	r8,1
80008f4e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008f52:	cd f8       	rjmp	80009110 <__avr32_udiv64+0x250>
80008f54:	58 08       	cp.w	r8,0
80008f56:	c0 51       	brne	80008f60 <__avr32_udiv64+0xa0>
80008f58:	30 19       	mov	r9,1
80008f5a:	f2 08 0d 08 	divu	r8,r9,r8
80008f5e:	10 9c       	mov	r12,r8
80008f60:	f8 06 12 00 	clz	r6,r12
80008f64:	c0 41       	brne	80008f6c <__avr32_udiv64+0xac>
80008f66:	18 1b       	sub	r11,r12
80008f68:	30 19       	mov	r9,1
80008f6a:	c4 08       	rjmp	80008fea <__avr32_udiv64+0x12a>
80008f6c:	ec 01 11 20 	rsub	r1,r6,32
80008f70:	f4 01 0a 49 	lsr	r9,r10,r1
80008f74:	f8 06 09 4c 	lsl	r12,r12,r6
80008f78:	f6 06 09 48 	lsl	r8,r11,r6
80008f7c:	f6 01 0a 41 	lsr	r1,r11,r1
80008f80:	f3 e8 10 08 	or	r8,r9,r8
80008f84:	f8 03 16 10 	lsr	r3,r12,0x10
80008f88:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008f8c:	e2 03 0d 00 	divu	r0,r1,r3
80008f90:	f0 0b 16 10 	lsr	r11,r8,0x10
80008f94:	00 9e       	mov	lr,r0
80008f96:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008f9a:	e0 05 02 49 	mul	r9,r0,r5
80008f9e:	12 3b       	cp.w	r11,r9
80008fa0:	c0 a2       	brcc	80008fb4 <__avr32_udiv64+0xf4>
80008fa2:	20 1e       	sub	lr,1
80008fa4:	18 0b       	add	r11,r12
80008fa6:	18 3b       	cp.w	r11,r12
80008fa8:	c0 63       	brcs	80008fb4 <__avr32_udiv64+0xf4>
80008faa:	12 3b       	cp.w	r11,r9
80008fac:	f7 be 03 01 	sublo	lr,1
80008fb0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008fb4:	12 1b       	sub	r11,r9
80008fb6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008fba:	f6 03 0d 02 	divu	r2,r11,r3
80008fbe:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008fc2:	04 99       	mov	r9,r2
80008fc4:	e4 05 02 4b 	mul	r11,r2,r5
80008fc8:	16 38       	cp.w	r8,r11
80008fca:	c0 a2       	brcc	80008fde <__avr32_udiv64+0x11e>
80008fcc:	20 19       	sub	r9,1
80008fce:	18 08       	add	r8,r12
80008fd0:	18 38       	cp.w	r8,r12
80008fd2:	c0 63       	brcs	80008fde <__avr32_udiv64+0x11e>
80008fd4:	16 38       	cp.w	r8,r11
80008fd6:	f7 b9 03 01 	sublo	r9,1
80008fda:	f1 dc e3 08 	addcs	r8,r8,r12
80008fde:	f4 06 09 43 	lsl	r3,r10,r6
80008fe2:	f0 0b 01 0b 	sub	r11,r8,r11
80008fe6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008fea:	f8 06 16 10 	lsr	r6,r12,0x10
80008fee:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008ff2:	f6 06 0d 00 	divu	r0,r11,r6
80008ff6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008ffa:	00 9a       	mov	r10,r0
80008ffc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80009000:	e0 0e 02 48 	mul	r8,r0,lr
80009004:	10 3b       	cp.w	r11,r8
80009006:	c0 a2       	brcc	8000901a <__avr32_udiv64+0x15a>
80009008:	20 1a       	sub	r10,1
8000900a:	18 0b       	add	r11,r12
8000900c:	18 3b       	cp.w	r11,r12
8000900e:	c0 63       	brcs	8000901a <__avr32_udiv64+0x15a>
80009010:	10 3b       	cp.w	r11,r8
80009012:	f7 ba 03 01 	sublo	r10,1
80009016:	f7 dc e3 0b 	addcs	r11,r11,r12
8000901a:	f6 08 01 01 	sub	r1,r11,r8
8000901e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80009022:	e2 06 0d 00 	divu	r0,r1,r6
80009026:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000902a:	00 98       	mov	r8,r0
8000902c:	e0 0e 02 4b 	mul	r11,r0,lr
80009030:	16 33       	cp.w	r3,r11
80009032:	c0 82       	brcc	80009042 <__avr32_udiv64+0x182>
80009034:	20 18       	sub	r8,1
80009036:	18 03       	add	r3,r12
80009038:	18 33       	cp.w	r3,r12
8000903a:	c0 43       	brcs	80009042 <__avr32_udiv64+0x182>
8000903c:	16 33       	cp.w	r3,r11
8000903e:	f7 b8 03 01 	sublo	r8,1
80009042:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80009046:	c6 98       	rjmp	80009118 <__avr32_udiv64+0x258>
80009048:	16 39       	cp.w	r9,r11
8000904a:	e0 8b 00 65 	brhi	80009114 <__avr32_udiv64+0x254>
8000904e:	f2 09 12 00 	clz	r9,r9
80009052:	c0 b1       	brne	80009068 <__avr32_udiv64+0x1a8>
80009054:	10 3a       	cp.w	r10,r8
80009056:	5f 2a       	srhs	r10
80009058:	1c 3b       	cp.w	r11,lr
8000905a:	5f b8       	srhi	r8
8000905c:	10 4a       	or	r10,r8
8000905e:	f2 0a 18 00 	cp.b	r10,r9
80009062:	c5 90       	breq	80009114 <__avr32_udiv64+0x254>
80009064:	30 18       	mov	r8,1
80009066:	c5 98       	rjmp	80009118 <__avr32_udiv64+0x258>
80009068:	f0 09 09 46 	lsl	r6,r8,r9
8000906c:	f2 03 11 20 	rsub	r3,r9,32
80009070:	fc 09 09 4e 	lsl	lr,lr,r9
80009074:	f0 03 0a 48 	lsr	r8,r8,r3
80009078:	f6 09 09 4c 	lsl	r12,r11,r9
8000907c:	f4 03 0a 42 	lsr	r2,r10,r3
80009080:	ef 46 ff f4 	st.w	r7[-12],r6
80009084:	f6 03 0a 43 	lsr	r3,r11,r3
80009088:	18 42       	or	r2,r12
8000908a:	f1 ee 10 0c 	or	r12,r8,lr
8000908e:	f8 01 16 10 	lsr	r1,r12,0x10
80009092:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009096:	e6 01 0d 04 	divu	r4,r3,r1
8000909a:	e4 03 16 10 	lsr	r3,r2,0x10
8000909e:	08 9e       	mov	lr,r4
800090a0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800090a4:	e8 06 02 48 	mul	r8,r4,r6
800090a8:	10 33       	cp.w	r3,r8
800090aa:	c0 a2       	brcc	800090be <__avr32_udiv64+0x1fe>
800090ac:	20 1e       	sub	lr,1
800090ae:	18 03       	add	r3,r12
800090b0:	18 33       	cp.w	r3,r12
800090b2:	c0 63       	brcs	800090be <__avr32_udiv64+0x1fe>
800090b4:	10 33       	cp.w	r3,r8
800090b6:	f7 be 03 01 	sublo	lr,1
800090ba:	e7 dc e3 03 	addcs	r3,r3,r12
800090be:	10 13       	sub	r3,r8
800090c0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800090c4:	e6 01 0d 00 	divu	r0,r3,r1
800090c8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800090cc:	00 98       	mov	r8,r0
800090ce:	e0 06 02 46 	mul	r6,r0,r6
800090d2:	0c 3b       	cp.w	r11,r6
800090d4:	c0 a2       	brcc	800090e8 <__avr32_udiv64+0x228>
800090d6:	20 18       	sub	r8,1
800090d8:	18 0b       	add	r11,r12
800090da:	18 3b       	cp.w	r11,r12
800090dc:	c0 63       	brcs	800090e8 <__avr32_udiv64+0x228>
800090de:	0c 3b       	cp.w	r11,r6
800090e0:	f7 dc e3 0b 	addcs	r11,r11,r12
800090e4:	f7 b8 03 01 	sublo	r8,1
800090e8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800090ec:	ee f4 ff f4 	ld.w	r4,r7[-12]
800090f0:	0c 1b       	sub	r11,r6
800090f2:	f0 04 06 42 	mulu.d	r2,r8,r4
800090f6:	06 95       	mov	r5,r3
800090f8:	16 35       	cp.w	r5,r11
800090fa:	e0 8b 00 0a 	brhi	8000910e <__avr32_udiv64+0x24e>
800090fe:	5f 0b       	sreq	r11
80009100:	f4 09 09 49 	lsl	r9,r10,r9
80009104:	12 32       	cp.w	r2,r9
80009106:	5f b9       	srhi	r9
80009108:	f7 e9 00 09 	and	r9,r11,r9
8000910c:	c0 60       	breq	80009118 <__avr32_udiv64+0x258>
8000910e:	20 18       	sub	r8,1
80009110:	30 09       	mov	r9,0
80009112:	c0 38       	rjmp	80009118 <__avr32_udiv64+0x258>
80009114:	30 09       	mov	r9,0
80009116:	12 98       	mov	r8,r9
80009118:	10 9a       	mov	r10,r8
8000911a:	12 93       	mov	r3,r9
8000911c:	10 92       	mov	r2,r8
8000911e:	12 9b       	mov	r11,r9
80009120:	2f dd       	sub	sp,-12
80009122:	d8 32       	popm	r0-r7,pc

80009124 <__avr32_umod64>:
80009124:	d4 31       	pushm	r0-r7,lr
80009126:	1a 97       	mov	r7,sp
80009128:	20 3d       	sub	sp,12
8000912a:	10 9c       	mov	r12,r8
8000912c:	12 95       	mov	r5,r9
8000912e:	14 9e       	mov	lr,r10
80009130:	16 91       	mov	r1,r11
80009132:	16 96       	mov	r6,r11
80009134:	58 09       	cp.w	r9,0
80009136:	e0 81 00 81 	brne	80009238 <__avr32_umod64+0x114>
8000913a:	16 38       	cp.w	r8,r11
8000913c:	e0 88 00 12 	brls	80009160 <__avr32_umod64+0x3c>
80009140:	f0 08 12 00 	clz	r8,r8
80009144:	c4 e0       	breq	800091e0 <__avr32_umod64+0xbc>
80009146:	f6 08 09 46 	lsl	r6,r11,r8
8000914a:	f8 08 09 4c 	lsl	r12,r12,r8
8000914e:	f0 0b 11 20 	rsub	r11,r8,32
80009152:	f4 08 09 4e 	lsl	lr,r10,r8
80009156:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000915a:	f7 e6 10 06 	or	r6,r11,r6
8000915e:	c4 18       	rjmp	800091e0 <__avr32_umod64+0xbc>
80009160:	58 08       	cp.w	r8,0
80009162:	c0 51       	brne	8000916c <__avr32_umod64+0x48>
80009164:	30 19       	mov	r9,1
80009166:	f2 08 0d 08 	divu	r8,r9,r8
8000916a:	10 9c       	mov	r12,r8
8000916c:	f8 08 12 00 	clz	r8,r12
80009170:	c0 31       	brne	80009176 <__avr32_umod64+0x52>
80009172:	18 16       	sub	r6,r12
80009174:	c3 68       	rjmp	800091e0 <__avr32_umod64+0xbc>
80009176:	f0 03 11 20 	rsub	r3,r8,32
8000917a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000917e:	f8 08 09 4c 	lsl	r12,r12,r8
80009182:	ec 08 09 49 	lsl	r9,r6,r8
80009186:	ec 03 0a 43 	lsr	r3,r6,r3
8000918a:	f7 e9 10 09 	or	r9,r11,r9
8000918e:	f8 05 16 10 	lsr	r5,r12,0x10
80009192:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009196:	e6 05 0d 02 	divu	r2,r3,r5
8000919a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000919e:	ec 02 02 4b 	mul	r11,r6,r2
800091a2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800091a6:	16 3e       	cp.w	lr,r11
800091a8:	c0 72       	brcc	800091b6 <__avr32_umod64+0x92>
800091aa:	18 0e       	add	lr,r12
800091ac:	18 3e       	cp.w	lr,r12
800091ae:	c0 43       	brcs	800091b6 <__avr32_umod64+0x92>
800091b0:	16 3e       	cp.w	lr,r11
800091b2:	fd dc e3 0e 	addcs	lr,lr,r12
800091b6:	fc 0b 01 03 	sub	r3,lr,r11
800091ba:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800091be:	e6 05 0d 02 	divu	r2,r3,r5
800091c2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800091c6:	a5 36       	mul	r6,r2
800091c8:	0c 39       	cp.w	r9,r6
800091ca:	c0 72       	brcc	800091d8 <__avr32_umod64+0xb4>
800091cc:	18 09       	add	r9,r12
800091ce:	18 39       	cp.w	r9,r12
800091d0:	c0 43       	brcs	800091d8 <__avr32_umod64+0xb4>
800091d2:	0c 39       	cp.w	r9,r6
800091d4:	f3 dc e3 09 	addcs	r9,r9,r12
800091d8:	f2 06 01 06 	sub	r6,r9,r6
800091dc:	f4 08 09 4e 	lsl	lr,r10,r8
800091e0:	f8 0a 16 10 	lsr	r10,r12,0x10
800091e4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800091e8:	ec 0a 0d 02 	divu	r2,r6,r10
800091ec:	fc 09 16 10 	lsr	r9,lr,0x10
800091f0:	ea 02 02 4b 	mul	r11,r5,r2
800091f4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800091f8:	16 39       	cp.w	r9,r11
800091fa:	c0 72       	brcc	80009208 <__avr32_umod64+0xe4>
800091fc:	18 09       	add	r9,r12
800091fe:	18 39       	cp.w	r9,r12
80009200:	c0 43       	brcs	80009208 <__avr32_umod64+0xe4>
80009202:	16 39       	cp.w	r9,r11
80009204:	f3 dc e3 09 	addcs	r9,r9,r12
80009208:	f2 0b 01 0b 	sub	r11,r9,r11
8000920c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009210:	f6 0a 0d 0a 	divu	r10,r11,r10
80009214:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009218:	ea 0a 02 4a 	mul	r10,r5,r10
8000921c:	14 3e       	cp.w	lr,r10
8000921e:	c0 72       	brcc	8000922c <__avr32_umod64+0x108>
80009220:	18 0e       	add	lr,r12
80009222:	18 3e       	cp.w	lr,r12
80009224:	c0 43       	brcs	8000922c <__avr32_umod64+0x108>
80009226:	14 3e       	cp.w	lr,r10
80009228:	fd dc e3 0e 	addcs	lr,lr,r12
8000922c:	fc 0a 01 0a 	sub	r10,lr,r10
80009230:	30 0b       	mov	r11,0
80009232:	f4 08 0a 4a 	lsr	r10,r10,r8
80009236:	c7 b8       	rjmp	8000932c <__avr32_umod64+0x208>
80009238:	16 39       	cp.w	r9,r11
8000923a:	e0 8b 00 79 	brhi	8000932c <__avr32_umod64+0x208>
8000923e:	f2 09 12 00 	clz	r9,r9
80009242:	c1 21       	brne	80009266 <__avr32_umod64+0x142>
80009244:	10 3a       	cp.w	r10,r8
80009246:	5f 2b       	srhs	r11
80009248:	0a 31       	cp.w	r1,r5
8000924a:	5f ba       	srhi	r10
8000924c:	f7 ea 10 0a 	or	r10,r11,r10
80009250:	f2 0a 18 00 	cp.b	r10,r9
80009254:	c0 60       	breq	80009260 <__avr32_umod64+0x13c>
80009256:	fc 08 01 0c 	sub	r12,lr,r8
8000925a:	e2 05 01 46 	sbc	r6,r1,r5
8000925e:	18 9e       	mov	lr,r12
80009260:	0c 9b       	mov	r11,r6
80009262:	1c 9a       	mov	r10,lr
80009264:	c6 48       	rjmp	8000932c <__avr32_umod64+0x208>
80009266:	ea 09 09 4c 	lsl	r12,r5,r9
8000926a:	f2 06 11 20 	rsub	r6,r9,32
8000926e:	f6 09 09 4b 	lsl	r11,r11,r9
80009272:	f0 09 09 42 	lsl	r2,r8,r9
80009276:	ef 46 ff f4 	st.w	r7[-12],r6
8000927a:	f0 06 0a 48 	lsr	r8,r8,r6
8000927e:	18 48       	or	r8,r12
80009280:	e2 06 0a 4c 	lsr	r12,r1,r6
80009284:	f4 09 09 43 	lsl	r3,r10,r9
80009288:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000928c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009290:	16 4a       	or	r10,r11
80009292:	f0 0b 16 10 	lsr	r11,r8,0x10
80009296:	f8 0b 0d 04 	divu	r4,r12,r11
8000929a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000929e:	08 91       	mov	r1,r4
800092a0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
800092a4:	e8 0e 02 46 	mul	r6,r4,lr
800092a8:	0c 3c       	cp.w	r12,r6
800092aa:	c0 a2       	brcc	800092be <__avr32_umod64+0x19a>
800092ac:	20 11       	sub	r1,1
800092ae:	10 0c       	add	r12,r8
800092b0:	10 3c       	cp.w	r12,r8
800092b2:	c0 63       	brcs	800092be <__avr32_umod64+0x19a>
800092b4:	0c 3c       	cp.w	r12,r6
800092b6:	f7 b1 03 01 	sublo	r1,1
800092ba:	f9 d8 e3 0c 	addcs	r12,r12,r8
800092be:	0c 1c       	sub	r12,r6
800092c0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800092c4:	f8 0b 0d 04 	divu	r4,r12,r11
800092c8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800092cc:	08 96       	mov	r6,r4
800092ce:	e8 0e 02 4e 	mul	lr,r4,lr
800092d2:	1c 3b       	cp.w	r11,lr
800092d4:	c0 a2       	brcc	800092e8 <__avr32_umod64+0x1c4>
800092d6:	20 16       	sub	r6,1
800092d8:	10 0b       	add	r11,r8
800092da:	10 3b       	cp.w	r11,r8
800092dc:	c0 63       	brcs	800092e8 <__avr32_umod64+0x1c4>
800092de:	1c 3b       	cp.w	r11,lr
800092e0:	f7 b6 03 01 	sublo	r6,1
800092e4:	f7 d8 e3 0b 	addcs	r11,r11,r8
800092e8:	ed e1 11 01 	or	r1,r6,r1<<0x10
800092ec:	1c 1b       	sub	r11,lr
800092ee:	e2 02 06 40 	mulu.d	r0,r1,r2
800092f2:	00 9e       	mov	lr,r0
800092f4:	02 9c       	mov	r12,r1
800092f6:	16 3c       	cp.w	r12,r11
800092f8:	e0 8b 00 08 	brhi	80009308 <__avr32_umod64+0x1e4>
800092fc:	5f 06       	sreq	r6
800092fe:	06 30       	cp.w	r0,r3
80009300:	5f ba       	srhi	r10
80009302:	ed ea 00 0a 	and	r10,r6,r10
80009306:	c0 60       	breq	80009312 <__avr32_umod64+0x1ee>
80009308:	fc 02 01 04 	sub	r4,lr,r2
8000930c:	f8 08 01 4c 	sbc	r12,r12,r8
80009310:	08 9e       	mov	lr,r4
80009312:	e6 0e 01 0a 	sub	r10,r3,lr
80009316:	f6 0c 01 4c 	sbc	r12,r11,r12
8000931a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000931e:	f8 09 0a 4b 	lsr	r11,r12,r9
80009322:	f4 09 0a 4a 	lsr	r10,r10,r9
80009326:	f8 01 09 4c 	lsl	r12,r12,r1
8000932a:	18 4a       	or	r10,r12
8000932c:	2f dd       	sub	sp,-12
8000932e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009400:	c0 08       	rjmp	80009400 <_evba>
	...

80009404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009404:	c0 08       	rjmp	80009404 <_handle_TLB_Multiple_Hit>
	...

80009408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009408:	c0 08       	rjmp	80009408 <_handle_Bus_Error_Data_Fetch>
	...

8000940c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000940c:	c0 08       	rjmp	8000940c <_handle_Bus_Error_Instruction_Fetch>
	...

80009410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009410:	c0 08       	rjmp	80009410 <_handle_NMI>
	...

80009414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009414:	c0 08       	rjmp	80009414 <_handle_Instruction_Address>
	...

80009418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009418:	c0 08       	rjmp	80009418 <_handle_ITLB_Protection>
	...

8000941c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000941c:	c0 08       	rjmp	8000941c <_handle_Breakpoint>
	...

80009420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009420:	c0 08       	rjmp	80009420 <_handle_Illegal_Opcode>
	...

80009424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009424:	c0 08       	rjmp	80009424 <_handle_Unimplemented_Instruction>
	...

80009428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009428:	c0 08       	rjmp	80009428 <_handle_Privilege_Violation>
	...

8000942c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000942c:	c0 08       	rjmp	8000942c <_handle_Floating_Point>
	...

80009430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009430:	c0 08       	rjmp	80009430 <_handle_Coprocessor_Absent>
	...

80009434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009434:	c0 08       	rjmp	80009434 <_handle_Data_Address_Read>
	...

80009438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009438:	c0 08       	rjmp	80009438 <_handle_Data_Address_Write>
	...

8000943c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000943c:	c0 08       	rjmp	8000943c <_handle_DTLB_Protection_Read>
	...

80009440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009440:	c0 08       	rjmp	80009440 <_handle_DTLB_Protection_Write>
	...

80009444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009444:	c0 08       	rjmp	80009444 <_handle_DTLB_Modified>
	...

80009450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009450:	c0 08       	rjmp	80009450 <_handle_ITLB_Miss>
	...

80009460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009460:	c0 08       	rjmp	80009460 <_handle_DTLB_Miss_Read>
	...

80009470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009470:	c0 08       	rjmp	80009470 <_handle_DTLB_Miss_Write>
	...

80009500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009500:	c0 08       	rjmp	80009500 <_handle_Supervisor_Call>
80009502:	d7 03       	nop

80009504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009504:	30 0c       	mov	r12,0
80009506:	fe b0 d0 a1 	rcall	80003648 <_get_interrupt_handler>
8000950a:	58 0c       	cp.w	r12,0
8000950c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009510:	d6 03       	rete

80009512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009512:	30 1c       	mov	r12,1
80009514:	fe b0 d0 9a 	rcall	80003648 <_get_interrupt_handler>
80009518:	58 0c       	cp.w	r12,0
8000951a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000951e:	d6 03       	rete

80009520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009520:	30 2c       	mov	r12,2
80009522:	fe b0 d0 93 	rcall	80003648 <_get_interrupt_handler>
80009526:	58 0c       	cp.w	r12,0
80009528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000952c:	d6 03       	rete

8000952e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000952e:	30 3c       	mov	r12,3
80009530:	fe b0 d0 8c 	rcall	80003648 <_get_interrupt_handler>
80009534:	58 0c       	cp.w	r12,0
80009536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000953a:	d6 03       	rete
8000953c:	d7 03       	nop
8000953e:	d7 03       	nop
80009540:	d7 03       	nop
80009542:	d7 03       	nop
80009544:	d7 03       	nop
80009546:	d7 03       	nop
80009548:	d7 03       	nop
8000954a:	d7 03       	nop
8000954c:	d7 03       	nop
8000954e:	d7 03       	nop
80009550:	d7 03       	nop
80009552:	d7 03       	nop
80009554:	d7 03       	nop
80009556:	d7 03       	nop
80009558:	d7 03       	nop
8000955a:	d7 03       	nop
8000955c:	d7 03       	nop
8000955e:	d7 03       	nop
80009560:	d7 03       	nop
80009562:	d7 03       	nop
80009564:	d7 03       	nop
80009566:	d7 03       	nop
80009568:	d7 03       	nop
8000956a:	d7 03       	nop
8000956c:	d7 03       	nop
8000956e:	d7 03       	nop
80009570:	d7 03       	nop
80009572:	d7 03       	nop
80009574:	d7 03       	nop
80009576:	d7 03       	nop
80009578:	d7 03       	nop
8000957a:	d7 03       	nop
8000957c:	d7 03       	nop
8000957e:	d7 03       	nop
80009580:	d7 03       	nop
80009582:	d7 03       	nop
80009584:	d7 03       	nop
80009586:	d7 03       	nop
80009588:	d7 03       	nop
8000958a:	d7 03       	nop
8000958c:	d7 03       	nop
8000958e:	d7 03       	nop
80009590:	d7 03       	nop
80009592:	d7 03       	nop
80009594:	d7 03       	nop
80009596:	d7 03       	nop
80009598:	d7 03       	nop
8000959a:	d7 03       	nop
8000959c:	d7 03       	nop
8000959e:	d7 03       	nop
800095a0:	d7 03       	nop
800095a2:	d7 03       	nop
800095a4:	d7 03       	nop
800095a6:	d7 03       	nop
800095a8:	d7 03       	nop
800095aa:	d7 03       	nop
800095ac:	d7 03       	nop
800095ae:	d7 03       	nop
800095b0:	d7 03       	nop
800095b2:	d7 03       	nop
800095b4:	d7 03       	nop
800095b6:	d7 03       	nop
800095b8:	d7 03       	nop
800095ba:	d7 03       	nop
800095bc:	d7 03       	nop
800095be:	d7 03       	nop
800095c0:	d7 03       	nop
800095c2:	d7 03       	nop
800095c4:	d7 03       	nop
800095c6:	d7 03       	nop
800095c8:	d7 03       	nop
800095ca:	d7 03       	nop
800095cc:	d7 03       	nop
800095ce:	d7 03       	nop
800095d0:	d7 03       	nop
800095d2:	d7 03       	nop
800095d4:	d7 03       	nop
800095d6:	d7 03       	nop
800095d8:	d7 03       	nop
800095da:	d7 03       	nop
800095dc:	d7 03       	nop
800095de:	d7 03       	nop
800095e0:	d7 03       	nop
800095e2:	d7 03       	nop
800095e4:	d7 03       	nop
800095e6:	d7 03       	nop
800095e8:	d7 03       	nop
800095ea:	d7 03       	nop
800095ec:	d7 03       	nop
800095ee:	d7 03       	nop
800095f0:	d7 03       	nop
800095f2:	d7 03       	nop
800095f4:	d7 03       	nop
800095f6:	d7 03       	nop
800095f8:	d7 03       	nop
800095fa:	d7 03       	nop
800095fc:	d7 03       	nop
800095fe:	d7 03       	nop
