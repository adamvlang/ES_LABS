
ADC_EXAMPLE1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000584  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000015c  80002800  80002800  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000295c  8000295c  00002d5c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  8 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000005e0  00000000  00000000  00002d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00000fb2  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000096db  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001281  00000000  00000000  0000d9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004b38  00000000  00000000  0000ec7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000eb0  00000000  00000000  000137b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000024a7  00000000  00000000  00014668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000024c1  00000000  00000000  00016b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0075e27f  00000000  00000000  00018fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000570  00000000  00000000  00777250  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf db 10 	sub	pc,pc,-9456

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fb 14 	sub	pc,pc,-1260

Disassembly of section .text:

80002008 <main>:
80002008:	d4 31       	pushm	r0-r7,lr
8000200a:	f0 1f 00 3a 	mcall	800020f0 <main+0xe8>

	/* Init system clocks */
	sysclk_init();

	/* init debug serial line */
	init_dbg_rs232(sysclk_get_cpu_hz());
8000200e:	e0 6c 1b 00 	mov	r12,6912
80002012:	ea 1c 00 b7 	orh	r12,0xb7
80002016:	f0 1f 00 38 	mcall	800020f4 <main+0xec>

	/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
8000201a:	30 3b       	mov	r11,3
8000201c:	4b 7c       	lddpc	r12,800020f8 <main+0xf0>
8000201e:	f0 1f 00 38 	mcall	800020fc <main+0xf4>

	/* Configure the ADC peripheral module.
	 * Lower the ADC clock to match the ADC characteristics (because we
	 * configured the CPU clock to 12MHz, and the ADC clock characteristics are
	 *  usually lower; cf. the ADC Characteristic section in the datasheet). */
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80002022:	fe 77 3c 00 	mov	r7,-50176
80002026:	6e 18       	ld.w	r8,r7[0x4]
80002028:	a9 a8       	sbr	r8,0x8
8000202a:	8f 18       	st.w	r7[0x4],r8
	adc_configure(&AVR32_ADC);
8000202c:	0e 9c       	mov	r12,r7
8000202e:	f0 1f 00 35 	mcall	80002100 <main+0xf8>

	/* Enable the ADC channels. */
#if defined(EXAMPLE_ADC_TEMPERATURE_CHANNEL)
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_TEMPERATURE_CHANNEL);
80002032:	30 0b       	mov	r11,0
80002034:	0e 9c       	mov	r12,r7
80002036:	f0 1f 00 34 	mcall	80002104 <main+0xfc>
#endif
#if defined(EXAMPLE_ADC_LIGHT_CHANNEL)
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_LIGHT_CHANNEL);
8000203a:	30 2b       	mov	r11,2
8000203c:	0e 9c       	mov	r12,r7
8000203e:	f0 1f 00 32 	mcall	80002104 <main+0xfc>
#endif
#if defined(EXAMPLE_ADC_POTENTIOMETER_CHANNEL)
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
80002042:	30 1b       	mov	r11,1
80002044:	0e 9c       	mov	r12,r7
80002046:	f0 1f 00 30 	mcall	80002104 <main+0xfc>
#endif

	/* Display a header to user */
	print_dbg("\x1B[2J\x1B[H\r\nADC Example\r\n");
8000204a:	4b 0c       	lddpc	r12,80002108 <main+0x100>
8000204c:	f0 1f 00 30 	mcall	8000210c <main+0x104>
		/* Start conversions on all enabled channels */
		adc_start(&AVR32_ADC);

#if defined(EXAMPLE_ADC_TEMPERATURE_CHANNEL)
		/* Get value for the temperature adc channel */
		adc_value_temp = adc_get_value(&AVR32_ADC,
80002050:	30 04       	mov	r4,0
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		/* Display value to user */
		print_dbg("HEX Value for Channel temperature : 0x");
80002052:	4b 03       	lddpc	r3,80002110 <main+0x108>
		print_dbg_hex(adc_value_temp);
		print_dbg("\r\n");
80002054:	4b 06       	lddpc	r6,80002114 <main+0x10c>
#endif

#if defined(EXAMPLE_ADC_LIGHT_CHANNEL)
		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
80002056:	30 22       	mov	r2,2
				EXAMPLE_ADC_LIGHT_CHANNEL);
		
		/* Display value to user */
		print_dbg("HEX Value for Channel light : 0x");
80002058:	4b 01       	lddpc	r1,80002118 <main+0x110>
		print_dbg("\r\n");
#endif

#if defined(EXAMPLE_ADC_POTENTIOMETER_CHANNEL)
		/* Get value for the potentiometer adc channel */
		adc_value_pot = adc_get_value(&AVR32_ADC,
8000205a:	30 10       	mov	r0,1
	/* Display a header to user */
	print_dbg("\x1B[2J\x1B[H\r\nADC Example\r\n");

	while (true) {
		/* Start conversions on all enabled channels */
		adc_start(&AVR32_ADC);
8000205c:	0e 9c       	mov	r12,r7
8000205e:	f0 1f 00 30 	mcall	8000211c <main+0x114>

#if defined(EXAMPLE_ADC_TEMPERATURE_CHANNEL)
		/* Get value for the temperature adc channel */
		adc_value_temp = adc_get_value(&AVR32_ADC,
80002062:	08 9b       	mov	r11,r4
80002064:	0e 9c       	mov	r12,r7
80002066:	f0 1f 00 2f 	mcall	80002120 <main+0x118>
8000206a:	18 95       	mov	r5,r12
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		/* Display value to user */
		print_dbg("HEX Value for Channel temperature : 0x");
8000206c:	06 9c       	mov	r12,r3
8000206e:	f0 1f 00 28 	mcall	8000210c <main+0x104>
		print_dbg_hex(adc_value_temp);
80002072:	f9 d5 b0 10 	bfexts	r12,r5,0x0,0x10
80002076:	f0 1f 00 2c 	mcall	80002124 <main+0x11c>
		print_dbg("\r\n");
8000207a:	0c 9c       	mov	r12,r6
8000207c:	f0 1f 00 24 	mcall	8000210c <main+0x104>
#endif

#if defined(EXAMPLE_ADC_LIGHT_CHANNEL)
		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
80002080:	04 9b       	mov	r11,r2
80002082:	0e 9c       	mov	r12,r7
80002084:	f0 1f 00 27 	mcall	80002120 <main+0x118>
80002088:	18 95       	mov	r5,r12
				EXAMPLE_ADC_LIGHT_CHANNEL);
		
		/* Display value to user */
		print_dbg("HEX Value for Channel light : 0x");
8000208a:	02 9c       	mov	r12,r1
8000208c:	f0 1f 00 20 	mcall	8000210c <main+0x104>
		print_dbg_hex(adc_value_light);
80002090:	f9 d5 b0 10 	bfexts	r12,r5,0x0,0x10
80002094:	f0 1f 00 24 	mcall	80002124 <main+0x11c>
		print_dbg("\r\n");
80002098:	0c 9c       	mov	r12,r6
8000209a:	f0 1f 00 1d 	mcall	8000210c <main+0x104>
#endif

#if defined(EXAMPLE_ADC_POTENTIOMETER_CHANNEL)
		/* Get value for the potentiometer adc channel */
		adc_value_pot = adc_get_value(&AVR32_ADC,
8000209e:	00 9b       	mov	r11,r0
800020a0:	0e 9c       	mov	r12,r7
800020a2:	f0 1f 00 20 	mcall	80002120 <main+0x118>
800020a6:	18 95       	mov	r5,r12
				EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
				
		/* Display value to user */
		print_dbg("HEX Value for Channel pot : 0x");
800020a8:	4a 0c       	lddpc	r12,80002128 <main+0x120>
800020aa:	f0 1f 00 19 	mcall	8000210c <main+0x104>
		print_dbg_hex(adc_value_pot);
800020ae:	f9 d5 b0 10 	bfexts	r12,r5,0x0,0x10
800020b2:	f0 1f 00 1d 	mcall	80002124 <main+0x11c>
		print_dbg("\r\n");
800020b6:	0c 9c       	mov	r12,r6
800020b8:	f0 1f 00 15 	mcall	8000210c <main+0x104>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800020bc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800020c0:	e0 69 8d 80 	mov	r9,36224
800020c4:	ea 19 00 5b 	orh	r9,0x5b
800020c8:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800020cc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800020d0:	14 38       	cp.w	r8,r10
800020d2:	e0 88 00 08 	brls	800020e2 <main+0xda>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800020d6:	12 38       	cp.w	r8,r9
800020d8:	fe 98 ff fa 	brls	800020cc <main+0xc4>
800020dc:	12 3a       	cp.w	r10,r9
800020de:	cb f3       	brcs	8000205c <main+0x54>
800020e0:	cf 6b       	rjmp	800020cc <main+0xc4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800020e2:	12 38       	cp.w	r8,r9
800020e4:	fe 9b ff bc 	brhi	8000205c <main+0x54>
800020e8:	12 3a       	cp.w	r10,r9
800020ea:	cb 93       	brcs	8000205c <main+0x54>
800020ec:	cf 0b       	rjmp	800020cc <main+0xc4>
800020ee:	00 00       	add	r0,r0
800020f0:	80 00       	ld.sh	r0,r0[0x0]
800020f2:	25 2c       	sub	r12,82
800020f4:	80 00       	ld.sh	r0,r0[0x0]
800020f6:	24 dc       	sub	r12,77
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	28 00       	sub	r0,-128
800020fc:	80 00       	ld.sh	r0,r0[0x0]
800020fe:	22 10       	sub	r0,33
80002100:	80 00       	ld.sh	r0,r0[0x0]
80002102:	21 2c       	sub	r12,18
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	21 44       	sub	r4,20
80002108:	80 00       	ld.sh	r0,r0[0x0]
8000210a:	28 18       	sub	r8,-127
8000210c:	80 00       	ld.sh	r0,r0[0x0]
8000210e:	24 88       	sub	r8,72
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	28 30       	sub	r0,-125
80002114:	80 00       	ld.sh	r0,r0[0x0]
80002116:	28 2c       	sub	r12,-126
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	28 58       	sub	r8,-123
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	21 3e       	sub	lr,19
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	21 60       	sub	r0,22
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	24 74       	sub	r4,71
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	28 7c       	sub	r12,-121

8000212c <adc_configure>:
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000212c:	78 18       	ld.w	r8,r12[0x4]
8000212e:	ea 18 0f 00 	orh	r8,0xf00
80002132:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002134:	78 18       	ld.w	r8,r12[0x4]
80002136:	ea 18 00 1f 	orh	r8,0x1f
8000213a:	99 18       	st.w	r12[0x4],r8
}
8000213c:	5e fc       	retal	r12

8000213e <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
8000213e:	30 28       	mov	r8,2
80002140:	99 08       	st.w	r12[0x0],r8
}
80002142:	5e fc       	retal	r12

80002144 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002144:	30 18       	mov	r8,1
80002146:	f0 0b 09 48 	lsl	r8,r8,r11
8000214a:	99 48       	st.w	r12[0x10],r8
}
8000214c:	5e fc       	retal	r12

8000214e <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
8000214e:	78 78       	ld.w	r8,r12[0x1c]
80002150:	30 19       	mov	r9,1
80002152:	f2 0b 09 49 	lsl	r9,r9,r11
80002156:	f3 e8 00 08 	and	r8,r9,r8
}
8000215a:	5f 1c       	srne	r12
8000215c:	5e fc       	retal	r12
8000215e:	d7 03       	nop

80002160 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002160:	eb cd 40 e0 	pushm	r5-r7,lr
80002164:	18 97       	mov	r7,r12
80002166:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002168:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
8000216c:	0c 9b       	mov	r11,r6
8000216e:	0e 9c       	mov	r12,r7
80002170:	f0 1f 00 05 	mcall	80002184 <adc_get_value+0x24>
80002174:	cf c0       	breq	8000216c <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80002176:	2d 07       	sub	r7,-48
80002178:	5c 75       	castu.h	r5
}
8000217a:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
8000217e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002182:	00 00       	add	r0,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	21 4e       	sub	lr,20

80002188 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002188:	fe 68 14 00 	mov	r8,-125952
8000218c:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000218e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002192:	91 09       	st.w	r8[0x0],r9
}
80002194:	5e fc       	retal	r12
80002196:	d7 03       	nop

80002198 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002198:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000219a:	e0 68 8a 3f 	mov	r8,35391
8000219e:	ea 18 01 f7 	orh	r8,0x1f7
800021a2:	10 3c       	cp.w	r12,r8
800021a4:	e0 88 00 06 	brls	800021b0 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800021a8:	30 1c       	mov	r12,1
800021aa:	f0 1f 00 04 	mcall	800021b8 <flashc_set_bus_freq+0x20>
800021ae:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800021b0:	30 0c       	mov	r12,0
800021b2:	f0 1f 00 02 	mcall	800021b8 <flashc_set_bus_freq+0x20>
800021b6:	d8 02       	popm	pc
800021b8:	80 00       	ld.sh	r0,r0[0x0]
800021ba:	21 88       	sub	r8,24

800021bc <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021bc:	f8 08 16 05 	lsr	r8,r12,0x5
800021c0:	a9 68       	lsl	r8,0x8
800021c2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800021c6:	58 1b       	cp.w	r11,1
800021c8:	c0 d0       	breq	800021e2 <gpio_enable_module_pin+0x26>
800021ca:	c0 63       	brcs	800021d6 <gpio_enable_module_pin+0x1a>
800021cc:	58 2b       	cp.w	r11,2
800021ce:	c1 00       	breq	800021ee <gpio_enable_module_pin+0x32>
800021d0:	58 3b       	cp.w	r11,3
800021d2:	c1 40       	breq	800021fa <gpio_enable_module_pin+0x3e>
800021d4:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021d6:	30 19       	mov	r9,1
800021d8:	f2 0c 09 49 	lsl	r9,r9,r12
800021dc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021de:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021e0:	c1 28       	rjmp	80002204 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021e2:	30 19       	mov	r9,1
800021e4:	f2 0c 09 49 	lsl	r9,r9,r12
800021e8:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021ea:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021ec:	c0 c8       	rjmp	80002204 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021ee:	30 19       	mov	r9,1
800021f0:	f2 0c 09 49 	lsl	r9,r9,r12
800021f4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800021f6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800021f8:	c0 68       	rjmp	80002204 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800021fa:	30 19       	mov	r9,1
800021fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002200:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002202:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002204:	30 19       	mov	r9,1
80002206:	f2 0c 09 4c 	lsl	r12,r9,r12
8000220a:	91 2c       	st.w	r8[0x8],r12
8000220c:	5e fd       	retal	0
8000220e:	d7 03       	nop

80002210 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002210:	d4 21       	pushm	r4-r7,lr
80002212:	18 97       	mov	r7,r12
80002214:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002216:	58 0b       	cp.w	r11,0
80002218:	c0 31       	brne	8000221e <gpio_enable_module+0xe>
8000221a:	30 05       	mov	r5,0
8000221c:	c0 d8       	rjmp	80002236 <gpio_enable_module+0x26>
8000221e:	30 06       	mov	r6,0
80002220:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002222:	6e 1b       	ld.w	r11,r7[0x4]
80002224:	6e 0c       	ld.w	r12,r7[0x0]
80002226:	f0 1f 00 06 	mcall	8000223c <gpio_enable_module+0x2c>
8000222a:	18 45       	or	r5,r12
		gpiomap++;
8000222c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000222e:	2f f6       	sub	r6,-1
80002230:	0c 34       	cp.w	r4,r6
80002232:	fe 9b ff f8 	brhi	80002222 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002236:	0a 9c       	mov	r12,r5
80002238:	d8 22       	popm	r4-r7,pc
8000223a:	00 00       	add	r0,r0
8000223c:	80 00       	ld.sh	r0,r0[0x0]
8000223e:	21 bc       	sub	r12,27

80002240 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002240:	fe 78 08 00 	mov	r8,-63488
80002244:	e0 69 00 83 	mov	r9,131
80002248:	f2 0c 01 0c 	sub	r12,r9,r12
8000224c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002250:	f2 ca ff c0 	sub	r10,r9,-64
80002254:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002258:	58 08       	cp.w	r8,0
8000225a:	c0 21       	brne	8000225e <_get_interrupt_handler+0x1e>
8000225c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000225e:	f0 08 12 00 	clz	r8,r8
80002262:	48 5a       	lddpc	r10,80002274 <_get_interrupt_handler+0x34>
80002264:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002268:	f0 08 11 1f 	rsub	r8,r8,31
8000226c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000226e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002272:	5e fc       	retal	r12
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	28 9c       	sub	r12,-119

80002278 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80002278:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000227a:	f6 08 15 04 	lsl	r8,r11,0x4
8000227e:	14 38       	cp.w	r8,r10
80002280:	f9 b8 08 10 	movls	r8,16
80002284:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002288:	f0 0b 02 4b 	mul	r11,r8,r11
8000228c:	f6 09 16 01 	lsr	r9,r11,0x1
80002290:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002294:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002298:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000229c:	f2 cb 00 01 	sub	r11,r9,1
800022a0:	e0 4b ff fe 	cp.w	r11,65534
800022a4:	e0 88 00 03 	brls	800022aa <usart_set_async_baudrate+0x32>
800022a8:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800022aa:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800022ac:	e8 6e 00 00 	mov	lr,524288
800022b0:	59 08       	cp.w	r8,16
800022b2:	fc 08 17 10 	movne	r8,lr
800022b6:	f9 b8 00 00 	moveq	r8,0
800022ba:	e4 1b ff f7 	andh	r11,0xfff7
800022be:	e0 1b fe cf 	andl	r11,0xfecf
800022c2:	16 48       	or	r8,r11
800022c4:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800022c6:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800022ca:	f3 ea 11 09 	or	r9,r9,r10<<0x10
800022ce:	99 89       	st.w	r12[0x20],r9
800022d0:	d8 0a       	popm	pc,r12=0

800022d2 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800022d2:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
800022d4:	e2 18 00 02 	andl	r8,0x2,COH
800022d8:	c0 31       	brne	800022de <usart_write_char+0xc>
800022da:	30 2c       	mov	r12,2
800022dc:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800022de:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800022e2:	99 7b       	st.w	r12[0x1c],r11
800022e4:	5e fd       	retal	0
800022e6:	d7 03       	nop

800022e8 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800022e8:	eb cd 40 e0 	pushm	r5-r7,lr
800022ec:	18 96       	mov	r6,r12
800022ee:	16 95       	mov	r5,r11
800022f0:	e0 67 27 0f 	mov	r7,9999
800022f4:	c0 68       	rjmp	80002300 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
800022f6:	58 07       	cp.w	r7,0
800022f8:	c0 31       	brne	800022fe <usart_putchar+0x16>
800022fa:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
800022fe:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002300:	0a 9b       	mov	r11,r5
80002302:	0c 9c       	mov	r12,r6
80002304:	f0 1f 00 03 	mcall	80002310 <usart_putchar+0x28>
80002308:	cf 71       	brne	800022f6 <usart_putchar+0xe>

  return USART_SUCCESS;
}
8000230a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000230e:	00 00       	add	r0,r0
80002310:	80 00       	ld.sh	r0,r0[0x0]
80002312:	22 d2       	sub	r2,45

80002314 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002314:	eb cd 40 c0 	pushm	r6-r7,lr
80002318:	18 96       	mov	r6,r12
8000231a:	16 97       	mov	r7,r11
  while (*string != '\0')
8000231c:	17 8b       	ld.ub	r11,r11[0x0]
8000231e:	58 0b       	cp.w	r11,0
80002320:	c0 80       	breq	80002330 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
80002322:	2f f7       	sub	r7,-1
80002324:	0c 9c       	mov	r12,r6
80002326:	f0 1f 00 04 	mcall	80002334 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8000232a:	0f 8b       	ld.ub	r11,r7[0x0]
8000232c:	58 0b       	cp.w	r11,0
8000232e:	cf a1       	brne	80002322 <usart_write_line+0xe>
80002330:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	22 e8       	sub	r8,46

80002338 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80002338:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8000233c:	e6 18 00 01 	andh	r8,0x1,COH
80002340:	c0 71       	brne	8000234e <usart_reset+0x16>
80002342:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002344:	3f f8       	mov	r8,-1
80002346:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002348:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8000234a:	d5 03       	csrf	0x10
8000234c:	c0 48       	rjmp	80002354 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
8000234e:	3f f8       	mov	r8,-1
80002350:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80002352:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002354:	30 08       	mov	r8,0
80002356:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80002358:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
8000235a:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000235c:	ea 68 61 0c 	mov	r8,680204
80002360:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002362:	5e fc       	retal	r12

80002364 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002364:	eb cd 40 e0 	pushm	r5-r7,lr
80002368:	18 96       	mov	r6,r12
8000236a:	16 97       	mov	r7,r11
8000236c:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8000236e:	f0 1f 00 2f 	mcall	80002428 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002372:	58 07       	cp.w	r7,0
80002374:	c5 80       	breq	80002424 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002376:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002378:	30 49       	mov	r9,4
8000237a:	f2 08 18 00 	cp.b	r8,r9
8000237e:	e0 88 00 53 	brls	80002424 <usart_init_rs232+0xc0>
80002382:	30 99       	mov	r9,9
80002384:	f2 08 18 00 	cp.b	r8,r9
80002388:	e0 8b 00 4e 	brhi	80002424 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8000238c:	0f d9       	ld.ub	r9,r7[0x5]
8000238e:	30 78       	mov	r8,7
80002390:	f0 09 18 00 	cp.b	r9,r8
80002394:	e0 8b 00 48 	brhi	80002424 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002398:	8e 39       	ld.sh	r9,r7[0x6]
8000239a:	e0 68 01 01 	mov	r8,257
8000239e:	f0 09 19 00 	cp.h	r9,r8
800023a2:	e0 8b 00 41 	brhi	80002424 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
800023a6:	ef 39 00 08 	ld.ub	r9,r7[8]
800023aa:	30 38       	mov	r8,3
800023ac:	f0 09 18 00 	cp.b	r9,r8
800023b0:	e0 8b 00 3a 	brhi	80002424 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800023b4:	0a 9a       	mov	r10,r5
800023b6:	6e 0b       	ld.w	r11,r7[0x0]
800023b8:	0c 9c       	mov	r12,r6
800023ba:	f0 1f 00 1d 	mcall	8000242c <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800023be:	58 1c       	cp.w	r12,1
800023c0:	c3 20       	breq	80002424 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
800023c2:	0f c8       	ld.ub	r8,r7[0x4]
800023c4:	30 99       	mov	r9,9
800023c6:	f2 08 18 00 	cp.b	r8,r9
800023ca:	c0 51       	brne	800023d4 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800023cc:	6c 18       	ld.w	r8,r6[0x4]
800023ce:	b1 b8       	sbr	r8,0x11
800023d0:	8d 18       	st.w	r6[0x4],r8
800023d2:	c0 68       	rjmp	800023de <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800023d4:	6c 19       	ld.w	r9,r6[0x4]
800023d6:	20 58       	sub	r8,5
800023d8:	f3 e8 10 68 	or	r8,r9,r8<<0x6
800023dc:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800023de:	6c 19       	ld.w	r9,r6[0x4]
800023e0:	ef 3a 00 08 	ld.ub	r10,r7[8]
800023e4:	0f d8       	ld.ub	r8,r7[0x5]
800023e6:	a9 78       	lsl	r8,0x9
800023e8:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
800023ec:	12 48       	or	r8,r9
800023ee:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800023f0:	8e 38       	ld.sh	r8,r7[0x6]
800023f2:	30 29       	mov	r9,2
800023f4:	f2 08 19 00 	cp.h	r8,r9
800023f8:	e0 88 00 09 	brls	8000240a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800023fc:	6c 18       	ld.w	r8,r6[0x4]
800023fe:	ad b8       	sbr	r8,0xd
80002400:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002402:	8e b8       	ld.uh	r8,r7[0x6]
80002404:	20 28       	sub	r8,2
80002406:	8d a8       	st.w	r6[0x28],r8
80002408:	c0 68       	rjmp	80002414 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000240a:	6c 19       	ld.w	r9,r6[0x4]
8000240c:	5c 78       	castu.h	r8
8000240e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80002412:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002414:	6c 18       	ld.w	r8,r6[0x4]
80002416:	e0 18 ff f0 	andl	r8,0xfff0
8000241a:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000241c:	35 08       	mov	r8,80
8000241e:	8d 08       	st.w	r6[0x0],r8
80002420:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002424:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002428:	80 00       	ld.sh	r0,r0[0x0]
8000242a:	23 38       	sub	r8,51
8000242c:	80 00       	ld.sh	r0,r0[0x0]
8000242e:	22 78       	sub	r8,39

80002430 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80002430:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80002432:	f0 1f 00 02 	mcall	80002438 <print+0x8>
}
80002436:	d8 02       	popm	pc
80002438:	80 00       	ld.sh	r0,r0[0x0]
8000243a:	23 14       	sub	r4,49

8000243c <print_hex>:
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
{
8000243c:	d4 01       	pushm	lr
8000243e:	20 3d       	sub	sp,12
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80002440:	30 08       	mov	r8,0
80002442:	fb 68 00 08 	st.b	sp[8],r8
80002446:	fa c8 ff f9 	sub	r8,sp,-7
  // Transmit the resulting string with the given USART.
  print(usart, tmp);
}


void print_hex(volatile avr32_usart_t *usart, unsigned long n)
8000244a:	fa ce 00 01 	sub	lr,sp,1

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
8000244e:	48 8a       	lddpc	r10,8000246c <print_hex+0x30>
80002450:	f3 db c0 04 	bfextu	r9,r11,0x0,0x4
80002454:	f4 09 07 09 	ld.ub	r9,r10[r9]
80002458:	b0 89       	st.b	r8[0x0],r9
    n >>= 4;
8000245a:	a5 8b       	lsr	r11,0x4
8000245c:	20 18       	sub	r8,1
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
8000245e:	1c 38       	cp.w	r8,lr
80002460:	cf 81       	brne	80002450 <print_hex+0x14>
    tmp[i] = HEX_DIGITS[n & 0xF];
    n >>= 4;
  }

  // Transmit the resulting string with the given USART.
  print(usart, tmp);
80002462:	1a 9b       	mov	r11,sp
80002464:	f0 1f 00 03 	mcall	80002470 <print_hex+0x34>
}
80002468:	2f dd       	sub	sp,-12
8000246a:	d8 02       	popm	pc
8000246c:	80 00       	ld.sh	r0,r0[0x0]
8000246e:	29 3c       	sub	r12,-109
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	24 30       	sub	r0,67

80002474 <print_dbg_hex>:
  print_short_hex(DBG_USART, n);
}


void print_dbg_hex(unsigned long n)
{
80002474:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
80002476:	18 9b       	mov	r11,r12
80002478:	fe 7c 18 00 	mov	r12,-59392
8000247c:	f0 1f 00 02 	mcall	80002484 <print_dbg_hex+0x10>
}
80002480:	d8 02       	popm	pc
80002482:	00 00       	add	r0,r0
80002484:	80 00       	ld.sh	r0,r0[0x0]
80002486:	24 3c       	sub	r12,67

80002488 <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80002488:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
8000248a:	18 9b       	mov	r11,r12
8000248c:	fe 7c 18 00 	mov	r12,-59392
80002490:	f0 1f 00 02 	mcall	80002498 <print_dbg+0x10>
}
80002494:	d8 02       	popm	pc
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	24 30       	sub	r0,67

8000249c <init_dbg_rs232_ex>:
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
}


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000249c:	eb cd 40 80 	pushm	r7,lr
800024a0:	20 3d       	sub	sp,12
800024a2:	16 97       	mov	r7,r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
800024a4:	50 0c       	stdsp	sp[0x0],r12
800024a6:	30 88       	mov	r8,8
800024a8:	ba c8       	st.b	sp[0x4],r8
800024aa:	30 48       	mov	r8,4
800024ac:	ba d8       	st.b	sp[0x5],r8
800024ae:	30 08       	mov	r8,0
800024b0:	ba 38       	st.h	sp[0x6],r8
800024b2:	fb 68 00 08 	st.b	sp[8],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
800024b6:	30 2b       	mov	r11,2
800024b8:	48 6c       	lddpc	r12,800024d0 <init_dbg_rs232_ex+0x34>
800024ba:	f0 1f 00 07 	mcall	800024d4 <init_dbg_rs232_ex+0x38>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
800024be:	0e 9a       	mov	r10,r7
800024c0:	1a 9b       	mov	r11,sp
800024c2:	fe 7c 18 00 	mov	r12,-59392
800024c6:	f0 1f 00 05 	mcall	800024d8 <init_dbg_rs232_ex+0x3c>
}
800024ca:	2f dd       	sub	sp,-12
800024cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800024d0:	80 00       	ld.sh	r0,r0[0x0]
800024d2:	29 4c       	sub	r12,-108
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	22 10       	sub	r0,33
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	23 64       	sub	r4,54

800024dc <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
800024dc:	d4 01       	pushm	lr
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
800024de:	18 9b       	mov	r11,r12
800024e0:	e0 6c e1 00 	mov	r12,57600
800024e4:	f0 1f 00 02 	mcall	800024ec <init_dbg_rs232+0x10>
}
800024e8:	d8 02       	popm	pc
800024ea:	00 00       	add	r0,r0
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	24 9c       	sub	r12,73

800024f0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800024f0:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800024f4:	fe c0 fe f4 	sub	r0,pc,-268

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800024f8:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800024fc:	d5 53       	csrf	0x15
  cp      r0, r1
800024fe:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002500:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
80002502:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002504:	c0 72       	brcc	80002512 <idata_load_loop_end>
  st.d    r0++, r4
80002506:	fe c2 fb a6 	sub	r2,pc,-1114

8000250a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000250a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000250c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000250e:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002510:	cf d3       	brcs	8000250a <idata_load_loop>

80002512 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002512:	30 80       	mov	r0,8
  mov     r2, 0
80002514:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002518:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000251a:	c0 62       	brcc	80002526 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000251c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000251e:	30 03       	mov	r3,0

80002520 <udata_clear_loop>:
80002520:	a1 22       	st.d	r0++,r2
80002522:	02 30       	cp.w	r0,r1
80002524:	cf e3       	brcs	80002520 <udata_clear_loop>

80002526 <udata_clear_loop_end>:
80002526:	fe cf 05 1e 	sub	pc,pc,1310
8000252a:	d7 03       	nop

8000252c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000252c:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000252e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002532:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002534:	fe 78 0c 00 	mov	r8,-62464
80002538:	e0 6a 03 07 	mov	r10,775
8000253c:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000253e:	70 0a       	ld.w	r10,r8[0x0]
80002540:	a3 aa       	sbr	r10,0x2
80002542:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002544:	12 98       	mov	r8,r9
80002546:	e6 18 00 01 	andh	r8,0x1,COH
8000254a:	c0 21       	brne	8000254e <sysclk_init+0x22>
      cpu_irq_enable();
8000254c:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000254e:	fe 78 0c 00 	mov	r8,-62464
80002552:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002554:	e2 19 00 80 	andl	r9,0x80,COH
80002558:	cf d0       	breq	80002552 <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
8000255a:	e0 6c 1b 00 	mov	r12,6912
8000255e:	ea 1c 00 b7 	orh	r12,0xb7
80002562:	f0 1f 00 0a 	mcall	80002588 <sysclk_init+0x5c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002566:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000256a:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000256c:	fe 78 0c 00 	mov	r8,-62464
80002570:	70 0a       	ld.w	r10,r8[0x0]
80002572:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80002576:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
80002578:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000257a:	12 98       	mov	r8,r9
8000257c:	e6 18 00 01 	andh	r8,0x1,COH
80002580:	c0 21       	brne	80002584 <sysclk_init+0x58>
      cpu_irq_enable();
80002582:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002584:	d8 02       	popm	pc
80002586:	00 00       	add	r0,r0
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	21 98       	sub	r8,25

Disassembly of section .exception:

80002600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002600:	c0 08       	rjmp	80002600 <_evba>
	...

80002604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002604:	c0 08       	rjmp	80002604 <_handle_TLB_Multiple_Hit>
	...

80002608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002608:	c0 08       	rjmp	80002608 <_handle_Bus_Error_Data_Fetch>
	...

8000260c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000260c:	c0 08       	rjmp	8000260c <_handle_Bus_Error_Instruction_Fetch>
	...

80002610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002610:	c0 08       	rjmp	80002610 <_handle_NMI>
	...

80002614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002614:	c0 08       	rjmp	80002614 <_handle_Instruction_Address>
	...

80002618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002618:	c0 08       	rjmp	80002618 <_handle_ITLB_Protection>
	...

8000261c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000261c:	c0 08       	rjmp	8000261c <_handle_Breakpoint>
	...

80002620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002620:	c0 08       	rjmp	80002620 <_handle_Illegal_Opcode>
	...

80002624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002624:	c0 08       	rjmp	80002624 <_handle_Unimplemented_Instruction>
	...

80002628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002628:	c0 08       	rjmp	80002628 <_handle_Privilege_Violation>
	...

8000262c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000262c:	c0 08       	rjmp	8000262c <_handle_Floating_Point>
	...

80002630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002630:	c0 08       	rjmp	80002630 <_handle_Coprocessor_Absent>
	...

80002634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002634:	c0 08       	rjmp	80002634 <_handle_Data_Address_Read>
	...

80002638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002638:	c0 08       	rjmp	80002638 <_handle_Data_Address_Write>
	...

8000263c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000263c:	c0 08       	rjmp	8000263c <_handle_DTLB_Protection_Read>
	...

80002640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002640:	c0 08       	rjmp	80002640 <_handle_DTLB_Protection_Write>
	...

80002644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002644:	c0 08       	rjmp	80002644 <_handle_DTLB_Modified>
	...

80002650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002650:	c0 08       	rjmp	80002650 <_handle_ITLB_Miss>
	...

80002660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002660:	c0 08       	rjmp	80002660 <_handle_DTLB_Miss_Read>
	...

80002670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002670:	c0 08       	rjmp	80002670 <_handle_DTLB_Miss_Write>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002700:	c0 08       	rjmp	80002700 <_handle_Supervisor_Call>
80002702:	d7 03       	nop

80002704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002704:	30 0c       	mov	r12,0
80002706:	fe b0 fd 9d 	rcall	80002240 <_get_interrupt_handler>
8000270a:	58 0c       	cp.w	r12,0
8000270c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002710:	d6 03       	rete

80002712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002712:	30 1c       	mov	r12,1
80002714:	fe b0 fd 96 	rcall	80002240 <_get_interrupt_handler>
80002718:	58 0c       	cp.w	r12,0
8000271a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000271e:	d6 03       	rete

80002720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002720:	30 2c       	mov	r12,2
80002722:	fe b0 fd 8f 	rcall	80002240 <_get_interrupt_handler>
80002726:	58 0c       	cp.w	r12,0
80002728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000272c:	d6 03       	rete

8000272e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000272e:	30 3c       	mov	r12,3
80002730:	fe b0 fd 88 	rcall	80002240 <_get_interrupt_handler>
80002734:	58 0c       	cp.w	r12,0
80002736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000273a:	d6 03       	rete
8000273c:	d7 03       	nop
8000273e:	d7 03       	nop
80002740:	d7 03       	nop
80002742:	d7 03       	nop
80002744:	d7 03       	nop
80002746:	d7 03       	nop
80002748:	d7 03       	nop
8000274a:	d7 03       	nop
8000274c:	d7 03       	nop
8000274e:	d7 03       	nop
80002750:	d7 03       	nop
80002752:	d7 03       	nop
80002754:	d7 03       	nop
80002756:	d7 03       	nop
80002758:	d7 03       	nop
8000275a:	d7 03       	nop
8000275c:	d7 03       	nop
8000275e:	d7 03       	nop
80002760:	d7 03       	nop
80002762:	d7 03       	nop
80002764:	d7 03       	nop
80002766:	d7 03       	nop
80002768:	d7 03       	nop
8000276a:	d7 03       	nop
8000276c:	d7 03       	nop
8000276e:	d7 03       	nop
80002770:	d7 03       	nop
80002772:	d7 03       	nop
80002774:	d7 03       	nop
80002776:	d7 03       	nop
80002778:	d7 03       	nop
8000277a:	d7 03       	nop
8000277c:	d7 03       	nop
8000277e:	d7 03       	nop
80002780:	d7 03       	nop
80002782:	d7 03       	nop
80002784:	d7 03       	nop
80002786:	d7 03       	nop
80002788:	d7 03       	nop
8000278a:	d7 03       	nop
8000278c:	d7 03       	nop
8000278e:	d7 03       	nop
80002790:	d7 03       	nop
80002792:	d7 03       	nop
80002794:	d7 03       	nop
80002796:	d7 03       	nop
80002798:	d7 03       	nop
8000279a:	d7 03       	nop
8000279c:	d7 03       	nop
8000279e:	d7 03       	nop
800027a0:	d7 03       	nop
800027a2:	d7 03       	nop
800027a4:	d7 03       	nop
800027a6:	d7 03       	nop
800027a8:	d7 03       	nop
800027aa:	d7 03       	nop
800027ac:	d7 03       	nop
800027ae:	d7 03       	nop
800027b0:	d7 03       	nop
800027b2:	d7 03       	nop
800027b4:	d7 03       	nop
800027b6:	d7 03       	nop
800027b8:	d7 03       	nop
800027ba:	d7 03       	nop
800027bc:	d7 03       	nop
800027be:	d7 03       	nop
800027c0:	d7 03       	nop
800027c2:	d7 03       	nop
800027c4:	d7 03       	nop
800027c6:	d7 03       	nop
800027c8:	d7 03       	nop
800027ca:	d7 03       	nop
800027cc:	d7 03       	nop
800027ce:	d7 03       	nop
800027d0:	d7 03       	nop
800027d2:	d7 03       	nop
800027d4:	d7 03       	nop
800027d6:	d7 03       	nop
800027d8:	d7 03       	nop
800027da:	d7 03       	nop
800027dc:	d7 03       	nop
800027de:	d7 03       	nop
800027e0:	d7 03       	nop
800027e2:	d7 03       	nop
800027e4:	d7 03       	nop
800027e6:	d7 03       	nop
800027e8:	d7 03       	nop
800027ea:	d7 03       	nop
800027ec:	d7 03       	nop
800027ee:	d7 03       	nop
800027f0:	d7 03       	nop
800027f2:	d7 03       	nop
800027f4:	d7 03       	nop
800027f6:	d7 03       	nop
800027f8:	d7 03       	nop
800027fa:	d7 03       	nop
800027fc:	d7 03       	nop
800027fe:	d7 03       	nop
