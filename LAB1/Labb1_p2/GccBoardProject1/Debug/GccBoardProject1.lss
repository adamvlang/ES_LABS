
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000031c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000130  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  00002b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000003d8  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001530  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000060e  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002168  00000000  00000000  00004c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002dc  00000000  00000000  00006dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000092f  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000004a4  00000000  00000000  000079d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 003ae7d1  00000000  00000000  00007e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 00000198  00000000  00000000  003b6648  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf dd 80 	sub	pc,pc,-8832

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fd 84 	sub	pc,pc,-636

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	30 3b       	mov	r11,3
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	33 bc       	mov	r12,59
8000200e:	f0 1f 00 2c 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002012:	30 3b       	mov	r11,3
80002014:	33 cc       	mov	r12,60
80002016:	f0 1f 00 2a 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201a:	30 3b       	mov	r11,3
8000201c:	33 dc       	mov	r12,61
8000201e:	f0 1f 00 28 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002022:	30 3b       	mov	r11,3
80002024:	33 ec       	mov	r12,62
80002026:	f0 1f 00 26 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000202a:	30 3b       	mov	r11,3
8000202c:	33 3c       	mov	r12,51
8000202e:	f0 1f 00 24 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002032:	30 3b       	mov	r11,3
80002034:	33 4c       	mov	r12,52
80002036:	f0 1f 00 22 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000203a:	30 3b       	mov	r11,3
8000203c:	33 5c       	mov	r12,53
8000203e:	f0 1f 00 20 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002042:	30 3b       	mov	r11,3
80002044:	33 6c       	mov	r12,54
80002046:	f0 1f 00 1e 	mcall	800020bc <board_init+0xb4>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000204a:	30 0b       	mov	r11,0
8000204c:	35 8c       	mov	r12,88
8000204e:	f0 1f 00 1c 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80002052:	30 0b       	mov	r11,0
80002054:	35 5c       	mov	r12,85
80002056:	f0 1f 00 1a 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000205a:	30 0b       	mov	r11,0
8000205c:	35 2c       	mov	r12,82
8000205e:	f0 1f 00 18 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002062:	30 0b       	mov	r11,0
80002064:	31 4c       	mov	r12,20
80002066:	f0 1f 00 16 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000206a:	30 0b       	mov	r11,0
8000206c:	31 9c       	mov	r12,25
8000206e:	f0 1f 00 14 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002072:	30 0b       	mov	r11,0
80002074:	31 ac       	mov	r12,26
80002076:	f0 1f 00 12 	mcall	800020bc <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000207a:	30 0b       	mov	r11,0
8000207c:	31 bc       	mov	r12,27
8000207e:	f0 1f 00 10 	mcall	800020bc <board_init+0xb4>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002082:	30 4b       	mov	r11,4
80002084:	48 fc       	lddpc	r12,800020c0 <board_init+0xb8>
80002086:	f0 1f 00 10 	mcall	800020c4 <board_init+0xbc>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000208a:	30 4b       	mov	r11,4
8000208c:	48 fc       	lddpc	r12,800020c8 <board_init+0xc0>
8000208e:	f0 1f 00 0e 	mcall	800020c4 <board_init+0xbc>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80002092:	30 0b       	mov	r11,0
80002094:	30 2c       	mov	r12,2
80002096:	f0 1f 00 0a 	mcall	800020bc <board_init+0xb4>
8000209a:	30 0b       	mov	r11,0
8000209c:	30 7c       	mov	r12,7
8000209e:	f0 1f 00 08 	mcall	800020bc <board_init+0xb4>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800020a2:	30 2b       	mov	r11,2
800020a4:	48 ac       	lddpc	r12,800020cc <board_init+0xc4>
800020a6:	f0 1f 00 08 	mcall	800020c4 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800020aa:	30 2b       	mov	r11,2
800020ac:	48 9c       	lddpc	r12,800020d0 <board_init+0xc8>
800020ae:	f0 1f 00 06 	mcall	800020c4 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
800020b2:	30 2b       	mov	r11,2
800020b4:	48 8c       	lddpc	r12,800020d4 <board_init+0xcc>
800020b6:	f0 1f 00 04 	mcall	800020c4 <board_init+0xbc>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
800020ba:	d8 02       	popm	pc
800020bc:	80 00       	ld.sh	r0,r0[0x0]
800020be:	21 74       	sub	r4,23
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	26 50       	sub	r0,101
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	21 2c       	sub	r12,18
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	26 00       	sub	r0,96
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	26 40       	sub	r0,100
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	26 30       	sub	r0,99
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	26 20       	sub	r0,98

800020d8 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d8:	f8 08 16 05 	lsr	r8,r12,0x5
800020dc:	a9 68       	lsl	r8,0x8
800020de:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800020e2:	58 1b       	cp.w	r11,1
800020e4:	c0 d0       	breq	800020fe <gpio_enable_module_pin+0x26>
800020e6:	c0 63       	brcs	800020f2 <gpio_enable_module_pin+0x1a>
800020e8:	58 2b       	cp.w	r11,2
800020ea:	c1 00       	breq	8000210a <gpio_enable_module_pin+0x32>
800020ec:	58 3b       	cp.w	r11,3
800020ee:	c1 40       	breq	80002116 <gpio_enable_module_pin+0x3e>
800020f0:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020f2:	30 19       	mov	r9,1
800020f4:	f2 0c 09 49 	lsl	r9,r9,r12
800020f8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020fa:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800020fc:	c1 28       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020fe:	30 19       	mov	r9,1
80002100:	f2 0c 09 49 	lsl	r9,r9,r12
80002104:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002106:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002108:	c0 c8       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000210a:	30 19       	mov	r9,1
8000210c:	f2 0c 09 49 	lsl	r9,r9,r12
80002110:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002112:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002114:	c0 68       	rjmp	80002120 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002116:	30 19       	mov	r9,1
80002118:	f2 0c 09 49 	lsl	r9,r9,r12
8000211c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000211e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002120:	30 19       	mov	r9,1
80002122:	f2 0c 09 4c 	lsl	r12,r9,r12
80002126:	91 2c       	st.w	r8[0x8],r12
80002128:	5e fd       	retal	0
8000212a:	d7 03       	nop

8000212c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000212c:	d4 21       	pushm	r4-r7,lr
8000212e:	18 97       	mov	r7,r12
80002130:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002132:	58 0b       	cp.w	r11,0
80002134:	c0 31       	brne	8000213a <gpio_enable_module+0xe>
80002136:	30 05       	mov	r5,0
80002138:	c0 d8       	rjmp	80002152 <gpio_enable_module+0x26>
8000213a:	30 06       	mov	r6,0
8000213c:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000213e:	6e 1b       	ld.w	r11,r7[0x4]
80002140:	6e 0c       	ld.w	r12,r7[0x0]
80002142:	f0 1f 00 06 	mcall	80002158 <gpio_enable_module+0x2c>
80002146:	18 45       	or	r5,r12
		gpiomap++;
80002148:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000214a:	2f f6       	sub	r6,-1
8000214c:	0c 34       	cp.w	r4,r6
8000214e:	fe 9b ff f8 	brhi	8000213e <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002152:	0a 9c       	mov	r12,r5
80002154:	d8 22       	popm	r4-r7,pc
80002156:	00 00       	add	r0,r0
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	20 d8       	sub	r8,13

8000215c <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000215c:	f8 08 16 05 	lsr	r8,r12,0x5
80002160:	a9 68       	lsl	r8,0x8
80002162:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002166:	30 19       	mov	r9,1
80002168:	f2 0c 09 4c 	lsl	r12,r9,r12
8000216c:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
80002170:	91 1c       	st.w	r8[0x4],r12
}
80002172:	5e fc       	retal	r12

80002174 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002174:	f8 08 16 05 	lsr	r8,r12,0x5
80002178:	a9 68       	lsl	r8,0x8
8000217a:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000217e:	16 99       	mov	r9,r11
80002180:	e2 19 00 04 	andl	r9,0x4,COH
80002184:	c0 70       	breq	80002192 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002186:	30 19       	mov	r9,1
80002188:	f2 0c 09 49 	lsl	r9,r9,r12
8000218c:	f1 49 00 74 	st.w	r8[116],r9
80002190:	c0 68       	rjmp	8000219c <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002192:	30 19       	mov	r9,1
80002194:	f2 0c 09 49 	lsl	r9,r9,r12
80002198:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000219c:	16 99       	mov	r9,r11
8000219e:	e2 19 00 80 	andl	r9,0x80,COH
800021a2:	c2 40       	breq	800021ea <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800021a4:	16 99       	mov	r9,r11
800021a6:	e2 19 01 80 	andl	r9,0x180,COH
800021aa:	c0 90       	breq	800021bc <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800021ac:	30 19       	mov	r9,1
800021ae:	f2 0c 09 49 	lsl	r9,r9,r12
800021b2:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800021b6:	f1 49 00 b8 	st.w	r8[184],r9
800021ba:	c1 88       	rjmp	800021ea <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800021bc:	16 99       	mov	r9,r11
800021be:	e2 19 02 80 	andl	r9,0x280,COH
800021c2:	c0 90       	breq	800021d4 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800021c4:	30 19       	mov	r9,1
800021c6:	f2 0c 09 49 	lsl	r9,r9,r12
800021ca:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800021ce:	f1 49 00 b8 	st.w	r8[184],r9
800021d2:	c0 c8       	rjmp	800021ea <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
800021d4:	16 99       	mov	r9,r11
800021d6:	e2 19 03 80 	andl	r9,0x380,COH
800021da:	c0 80       	breq	800021ea <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800021dc:	30 19       	mov	r9,1
800021de:	f2 0c 09 49 	lsl	r9,r9,r12
800021e2:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800021e6:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800021ea:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
800021ee:	c1 50       	breq	80002218 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
800021f0:	e2 1b 00 02 	andl	r11,0x2,COH
800021f4:	c0 70       	breq	80002202 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800021f6:	30 19       	mov	r9,1
800021f8:	f2 0c 09 49 	lsl	r9,r9,r12
800021fc:	f1 49 00 54 	st.w	r8[84],r9
80002200:	c0 68       	rjmp	8000220c <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002202:	30 19       	mov	r9,1
80002204:	f2 0c 09 49 	lsl	r9,r9,r12
80002208:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000220c:	30 19       	mov	r9,1
8000220e:	f2 0c 09 49 	lsl	r9,r9,r12
80002212:	f1 49 00 44 	st.w	r8[68],r9
80002216:	c0 68       	rjmp	80002222 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002218:	30 19       	mov	r9,1
8000221a:	f2 0c 09 49 	lsl	r9,r9,r12
8000221e:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002222:	30 19       	mov	r9,1
80002224:	f2 0c 09 4c 	lsl	r12,r9,r12
80002228:	91 1c       	st.w	r8[0x4],r12
}
8000222a:	5e fc       	retal	r12

8000222c <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000222c:	f8 08 16 05 	lsr	r8,r12,0x5
80002230:	a9 68       	lsl	r8,0x8
80002232:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002236:	30 19       	mov	r9,1
80002238:	f2 0c 09 4c 	lsl	r12,r9,r12
8000223c:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002240:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002244:	91 1c       	st.w	r8[0x4],r12
}
80002246:	5e fc       	retal	r12

80002248 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002248:	fe 78 08 00 	mov	r8,-63488
8000224c:	e0 69 00 83 	mov	r9,131
80002250:	f2 0c 01 0c 	sub	r12,r9,r12
80002254:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002258:	f2 ca ff c0 	sub	r10,r9,-64
8000225c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002260:	58 08       	cp.w	r8,0
80002262:	c0 21       	brne	80002266 <_get_interrupt_handler+0x1e>
80002264:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002266:	f0 08 12 00 	clz	r8,r8
8000226a:	48 5a       	lddpc	r10,8000227c <_get_interrupt_handler+0x34>
8000226c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002270:	f0 08 11 1f 	rsub	r8,r8,31
80002274:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002276:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000227a:	5e fc       	retal	r12
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	26 70       	sub	r0,103

80002280 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002280:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002284:	fe c0 fe 84 	sub	r0,pc,-380

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002288:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000228c:	d5 53       	csrf	0x15
  cp      r0, r1
8000228e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002290:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
80002292:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002294:	c0 72       	brcc	800022a2 <idata_load_loop_end>
  st.d    r0++, r4
80002296:	fe c2 fb 66 	sub	r2,pc,-1178

8000229a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000229a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000229c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
8000229e:	02 30       	cp.w	r0,r1
  cp      r0, r1
800022a0:	cf d3       	brcs	8000229a <idata_load_loop>

800022a2 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800022a2:	30 80       	mov	r0,8
  mov     r2, 0
800022a4:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800022a8:	02 30       	cp.w	r0,r1
  cp      r0, r1
800022aa:	c0 62       	brcc	800022b6 <udata_clear_loop_end>
  brlo    udata_clear_loop
800022ac:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800022ae:	30 03       	mov	r3,0

800022b0 <udata_clear_loop>:
800022b0:	a1 22       	st.d	r0++,r2
800022b2:	02 30       	cp.w	r0,r1
800022b4:	cf e3       	brcs	800022b0 <udata_clear_loop>

800022b6 <udata_clear_loop_end>:
800022b6:	fe cf ff a6 	sub	pc,pc,-90
800022ba:	d7 03       	nop

800022bc <part1>:
#include <asf.h>
#include "gpio.h"

void part1()
{
800022bc:	eb cd 40 e0 	pushm	r5-r7,lr
800022c0:	20 8d       	sub	sp,32
	unsigned int pin;
	unsigned int LEDs[] = {59, 60, 61, 62, 51, 52, 53, 54};
800022c2:	49 18       	lddpc	r8,80002304 <part1+0x48>
800022c4:	1a 97       	mov	r7,sp
800022c6:	f0 ea 00 00 	ld.d	r10,r8[0]
800022ca:	fa eb 00 00 	st.d	sp[0],r10
800022ce:	f0 ea 00 08 	ld.d	r10,r8[8]
800022d2:	fa eb 00 08 	st.d	sp[8],r10
800022d6:	f0 ea 00 10 	ld.d	r10,r8[16]
800022da:	fa eb 00 10 	st.d	sp[16],r10
800022de:	f0 e8 00 18 	ld.d	r8,r8[24]
800022e2:	fa e9 00 18 	st.d	sp[24],r8
#include <asf.h>
#include "gpio.h"

void part1()
800022e6:	fa c5 ff e0 	sub	r5,sp,-32
{
	unsigned int pin;
	unsigned int LEDs[] = {59, 60, 61, 62, 51, 52, 53, 54};
	for (int i = 0; i < 8; ++i )
	{
		pin = LEDs[i];
800022ea:	0f 06       	ld.w	r6,r7++
		gpio_enable_gpio_pin(pin);
800022ec:	0c 9c       	mov	r12,r6
800022ee:	f0 1f 00 07 	mcall	80002308 <part1+0x4c>
		gpio_clr_gpio_pin(pin);
800022f2:	0c 9c       	mov	r12,r6
800022f4:	f0 1f 00 06 	mcall	8000230c <part1+0x50>

void part1()
{
	unsigned int pin;
	unsigned int LEDs[] = {59, 60, 61, 62, 51, 52, 53, 54};
	for (int i = 0; i < 8; ++i )
800022f8:	0a 37       	cp.w	r7,r5
800022fa:	cf 81       	brne	800022ea <part1+0x2e>
		pin = LEDs[i];
		gpio_enable_gpio_pin(pin);
		gpio_clr_gpio_pin(pin);
	}
	
}
800022fc:	2f 8d       	sub	sp,-32
800022fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002302:	00 00       	add	r0,r0
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	27 10       	sub	r0,113
80002308:	80 00       	ld.sh	r0,r0[0x0]
8000230a:	21 5c       	sub	r12,21
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	22 2c       	sub	r12,34

80002310 <main>:




int main (void)
{
80002310:	d4 01       	pushm	lr
	board_init();
80002312:	f0 1f 00 03 	mcall	8000231c <main+0xc>
	part1();
80002316:	f0 1f 00 03 	mcall	80002320 <main+0x10>
	
	
}
8000231a:	d8 0a       	popm	pc,r12=0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	20 08       	sub	r8,0
80002320:	80 00       	ld.sh	r0,r0[0x0]
80002322:	22 bc       	sub	r12,43

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	ca 1e       	rcall	80002248 <_get_interrupt_handler>
80002508:	58 0c       	cp.w	r12,0
8000250a:	f8 0f 17 10 	movne	pc,r12
8000250e:	d6 03       	rete

80002510 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	c9 be       	rcall	80002248 <_get_interrupt_handler>
80002514:	58 0c       	cp.w	r12,0
80002516:	f8 0f 17 10 	movne	pc,r12
8000251a:	d6 03       	rete

8000251c <_int2>:
8000251c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	c9 5e       	rcall	80002248 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	58 0c       	cp.w	r12,0
80002522:	f8 0f 17 10 	movne	pc,r12
80002526:	d6 03       	rete

80002528 <_int3>:
80002528:	30 3c       	mov	r12,3
8000252a:	c8 fe       	rcall	80002248 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	f8 0f 17 10 	movne	pc,r12
80002532:	d6 03       	rete
80002534:	d7 03       	nop
80002536:	d7 03       	nop
80002538:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d7 03       	nop
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
