
LAB3_CAN.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f18  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009000  80009000  00009400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000744  80009200  80009200  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80009944  80009944  00009d44  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80009948  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80009e54  0000a514  2**0
                  ALLOC
  9 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000a514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000d60  00000000  00000000  0000a548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000182e  00000000  00000000  0000b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001f6c2  00000000  00000000  0000cad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000526b  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000dd8b  00000000  00000000  00031403  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001f28  00000000  00000000  0003f190  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004044  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009d6f  00000000  00000000  000450fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0092e945  00000000  00000000  0004ee6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000f30  00000000  00000000  0097d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cb 70 	sub	pc,pc,-13456

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf eb 74 	sub	pc,pc,-5260

Disassembly of section .text:

80002008 <adc_start>:
80002008:	30 28       	mov	r8,2
8000200a:	99 08       	st.w	r12[0x0],r8
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
}
8000200c:	5e fc       	retal	r12

8000200e <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
8000200e:	30 18       	mov	r8,1
80002010:	f0 0b 09 48 	lsl	r8,r8,r11
80002014:	99 48       	st.w	r12[0x10],r8
}
80002016:	5e fc       	retal	r12

80002018 <adc_check_eoc>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002018:	78 78       	ld.w	r8,r12[0x1c]
8000201a:	30 19       	mov	r9,1
8000201c:	f2 0b 09 49 	lsl	r9,r9,r11
80002020:	f3 e8 00 08 	and	r8,r9,r8
}
80002024:	5f 1c       	srne	r12
80002026:	5e fc       	retal	r12

80002028 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002028:	eb cd 40 e0 	pushm	r5-r7,lr
8000202c:	18 97       	mov	r7,r12
8000202e:	16 95       	mov	r5,r11
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002030:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
80002034:	0c 9b       	mov	r11,r6
80002036:	0e 9c       	mov	r12,r7
80002038:	f0 1f 00 05 	mcall	8000204c <adc_get_value+0x24>
8000203c:	cf c0       	breq	80002034 <adc_get_value+0xc>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000203e:	2d 07       	sub	r7,-48
80002040:	5c 75       	castu.h	r5
}
80002042:	ee 05 03 2c 	ld.w	r12,r7[r5<<0x2]
80002046:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000204a:	00 00       	add	r0,r0
8000204c:	80 00       	ld.sh	r0,r0[0x0]
8000204e:	20 18       	sub	r8,1

80002050 <ClearMessages>:
 *
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
80002050:	30 08       	mov	r8,0
80002052:	b8 88       	st.b	r12[0x0],r8
	Msg[1] = 0;
80002054:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
80002056:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002058:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
8000205a:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
8000205c:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
8000205e:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002060:	b8 f8       	st.b	r12[0x7],r8
}
80002062:	5e fc       	retal	r12

80002064 <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
80002064:	eb cd 40 80 	pushm	r7,lr
80002068:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
8000206a:	49 68       	lddpc	r8,800020c0 <config_dpi204+0x5c>
8000206c:	1a 97       	mov	r7,sp
8000206e:	f0 ea 00 00 	ld.d	r10,r8[0]
80002072:	fa eb 00 00 	st.d	sp[0],r10
80002076:	f0 e8 00 08 	ld.d	r8,r8[8]
8000207a:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000207e:	30 4b       	mov	r11,4
80002080:	49 1c       	lddpc	r12,800020c4 <config_dpi204+0x60>
80002082:	f0 1f 00 12 	mcall	800020c8 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
80002086:	1a 9b       	mov	r11,sp
80002088:	fe 7c 28 00 	mov	r12,-55296
8000208c:	f0 1f 00 10 	mcall	800020cc <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002090:	30 09       	mov	r9,0
80002092:	12 9a       	mov	r10,r9
80002094:	12 9b       	mov	r11,r9
80002096:	fe 7c 28 00 	mov	r12,-55296
8000209a:	f0 1f 00 0e 	mcall	800020d0 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
8000209e:	fe 7c 28 00 	mov	r12,-55296
800020a2:	f0 1f 00 0d 	mcall	800020d4 <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
800020a6:	e0 6a 1b 00 	mov	r10,6912
800020aa:	ea 1a 00 b7 	orh	r10,0xb7
800020ae:	1a 9b       	mov	r11,sp
800020b0:	fe 7c 28 00 	mov	r12,-55296
800020b4:	f0 1f 00 09 	mcall	800020d8 <config_dpi204+0x74>
}
800020b8:	2f cd       	sub	sp,-16
800020ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800020be:	00 00       	add	r0,r0
800020c0:	80 00       	ld.sh	r0,r0[0x0]
800020c2:	92 30       	ld.sh	r0,r9[0x6]
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	92 40       	ld.sh	r0,r9[0x8]
800020c8:	80 00       	ld.sh	r0,r0[0x0]
800020ca:	30 58       	mov	r8,5
800020cc:	80 00       	ld.sh	r0,r0[0x0]
800020ce:	32 b6       	mov	r6,43
800020d0:	80 00       	ld.sh	r0,r0[0x0]
800020d2:	32 ee       	mov	lr,46
800020d4:	80 00       	ld.sh	r0,r0[0x0]
800020d6:	34 44       	mov	r4,68
800020d8:	80 00       	ld.sh	r0,r0[0x0]
800020da:	33 8c       	mov	r12,56

800020dc <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
800020dc:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
800020de:	18 9b       	mov	r11,r12
800020e0:	fe 7c 24 00 	mov	r12,-56320
800020e4:	f0 1f 00 02 	mcall	800020ec <mASSERT_CS+0x10>
}
800020e8:	d8 02       	popm	pc
800020ea:	00 00       	add	r0,r0
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	33 1a       	mov	r10,49

800020f0 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800020f6:	49 88       	lddpc	r8,80002154 <config_SPI_SPARE+0x64>
800020f8:	1a 97       	mov	r7,sp
800020fa:	f0 ea 00 00 	ld.d	r10,r8[0]
800020fe:	fa eb 00 00 	st.d	sp[0],r10
80002102:	f0 e8 00 08 	ld.d	r8,r8[8]
80002106:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
8000210a:	30 4b       	mov	r11,4
8000210c:	49 3c       	lddpc	r12,80002158 <config_SPI_SPARE+0x68>
8000210e:	f0 1f 00 14 	mcall	8000215c <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
80002112:	1a 9b       	mov	r11,sp
80002114:	fe 7c 24 00 	mov	r12,-56320
80002118:	f0 1f 00 12 	mcall	80002160 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
8000211c:	30 09       	mov	r9,0
8000211e:	12 9a       	mov	r10,r9
80002120:	12 9b       	mov	r11,r9
80002122:	fe 7c 24 00 	mov	r12,-56320
80002126:	f0 1f 00 10 	mcall	80002164 <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
8000212a:	30 0b       	mov	r11,0
8000212c:	fe 7c 24 00 	mov	r12,-56320
80002130:	f0 1f 00 0e 	mcall	80002168 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
80002134:	e0 6a 1b 00 	mov	r10,6912
80002138:	ea 1a 00 b7 	orh	r10,0xb7
8000213c:	1a 9b       	mov	r11,sp
8000213e:	fe 7c 24 00 	mov	r12,-56320
80002142:	f0 1f 00 0b 	mcall	8000216c <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
80002146:	fe 7c 24 00 	mov	r12,-56320
8000214a:	f0 1f 00 0a 	mcall	80002170 <config_SPI_SPARE+0x80>
}
8000214e:	2f cd       	sub	sp,-16
80002150:	e3 cd 80 80 	ldm	sp++,r7,pc
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	92 20       	ld.sh	r0,r9[0x4]
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	92 00       	ld.sh	r0,r9[0x0]
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	30 58       	mov	r8,5
80002160:	80 00       	ld.sh	r0,r0[0x0]
80002162:	32 b6       	mov	r6,43
80002164:	80 00       	ld.sh	r0,r0[0x0]
80002166:	32 ee       	mov	lr,46
80002168:	80 00       	ld.sh	r0,r0[0x0]
8000216a:	33 1a       	mov	r10,49
8000216c:	80 00       	ld.sh	r0,r0[0x0]
8000216e:	33 8c       	mov	r12,56
80002170:	80 00       	ld.sh	r0,r0[0x0]
80002172:	34 44       	mov	r4,68

80002174 <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
80002174:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
80002176:	fe 7c 24 00 	mov	r12,-56320
8000217a:	f0 1f 00 02 	mcall	80002180 <XferSPI_send+0xc>
	return 0;
}
8000217e:	d8 0a       	popm	pc,r12=0
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	34 4a       	mov	r10,68

80002184 <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
80002184:	d4 01       	pushm	lr
80002186:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002188:	30 0b       	mov	r11,0
8000218a:	fe 7c 24 00 	mov	r12,-56320
8000218e:	f0 1f 00 0e 	mcall	800021c4 <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
80002192:	e0 6b 00 a0 	mov	r11,160
80002196:	fe 7c 24 00 	mov	r12,-56320
8000219a:	f0 1f 00 0c 	mcall	800021c8 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
8000219e:	30 0b       	mov	r11,0
800021a0:	fe 7c 24 00 	mov	r12,-56320
800021a4:	f0 1f 00 09 	mcall	800021c8 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800021a8:	fa cb ff fe 	sub	r11,sp,-2
800021ac:	fe 7c 24 00 	mov	r12,-56320
800021b0:	f0 1f 00 07 	mcall	800021cc <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
800021b4:	30 0b       	mov	r11,0
800021b6:	fe 7c 24 00 	mov	r12,-56320
800021ba:	f0 1f 00 06 	mcall	800021d0 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
800021be:	1b bc       	ld.ub	r12,sp[0x3]
800021c0:	2f fd       	sub	sp,-4
800021c2:	d8 02       	popm	pc
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	33 1a       	mov	r10,49
800021c8:	80 00       	ld.sh	r0,r0[0x0]
800021ca:	34 4a       	mov	r10,68
800021cc:	80 00       	ld.sh	r0,r0[0x0]
800021ce:	34 6e       	mov	lr,70
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	33 66       	mov	r6,54

800021d4 <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
800021d4:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
800021d6:	f0 1f 00 04 	mcall	800021e4 <CANRxReady+0x10>
800021da:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
800021de:	5f 1c       	srne	r12
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	21 84       	sub	r4,24

800021e8 <CANTxReady>:
 * Note:            None.
 *
 * Example:			CANTxReady(0);
 ********************************************************************/
inline Bool CANTxReady( int Channel )
{
800021e8:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x04) == 0;
800021ea:	f0 1f 00 04 	mcall	800021f8 <CANTxReady+0x10>
800021ee:	ec 1c 00 04 	eorl	r12,0x4
}
800021f2:	f9 dc c0 41 	bfextu	r12,r12,0x2,0x1
800021f6:	d8 02       	popm	pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 84       	sub	r4,24

800021fc <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800021fc:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800021fe:	18 9b       	mov	r11,r12
80002200:	fe 7c 24 00 	mov	r12,-56320
80002204:	f0 1f 00 02 	mcall	8000220c <mDEASSERT_CS+0x10>
}
80002208:	d8 02       	popm	pc
8000220a:	00 00       	add	r0,r0
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	33 66       	mov	r6,54

80002210 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
80002210:	d4 21       	pushm	r4-r7,lr
80002212:	18 97       	mov	r7,r12
80002214:	16 95       	mov	r5,r11
80002216:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
80002218:	18 96       	mov	r6,r12
8000221a:	5c 56       	castu.b	r6
8000221c:	0c 9c       	mov	r12,r6
8000221e:	f0 1f 00 0a 	mcall	80002244 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
80002222:	30 2b       	mov	r11,2
80002224:	0e 9c       	mov	r12,r7
80002226:	f0 1f 00 09 	mcall	80002248 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
8000222a:	0a 9b       	mov	r11,r5
8000222c:	0e 9c       	mov	r12,r7
8000222e:	f0 1f 00 07 	mcall	80002248 <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
80002232:	08 9b       	mov	r11,r4
80002234:	0e 9c       	mov	r12,r7
80002236:	f0 1f 00 05 	mcall	80002248 <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
8000223a:	0c 9c       	mov	r12,r6
8000223c:	f0 1f 00 04 	mcall	8000224c <CAN2515ByteWrite+0x3c>
}
80002240:	d8 22       	popm	r4-r7,pc
80002242:	00 00       	add	r0,r0
80002244:	80 00       	ld.sh	r0,r0[0x0]
80002246:	20 dc       	sub	r12,13
80002248:	80 00       	ld.sh	r0,r0[0x0]
8000224a:	21 74       	sub	r4,23
8000224c:	80 00       	ld.sh	r0,r0[0x0]
8000224e:	21 fc       	sub	r12,31

80002250 <CAN2515SetRXB1Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB1Filters(Channel, 0, &Flt[2]);
 ********************************************************************/
void CAN2515SetRXB1Filters(int Channel, UINT16 Mask1, UINT16* pFlt2_5 )
{
80002250:	eb cd 40 e0 	pushm	r5-r7,lr
80002254:	18 97       	mov	r7,r12
80002256:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 3);
80002258:	16 96       	mov	r6,r11
8000225a:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
8000225e:	32 4b       	mov	r11,36
80002260:	f0 1f 00 26 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXM1SIDL, Mask1 << 5);
80002264:	ec 0a 15 05 	lsl	r10,r6,0x5
80002268:	e2 1a 00 e0 	andl	r10,0xe0,COH
8000226c:	32 5b       	mov	r11,37
8000226e:	0e 9c       	mov	r12,r7
80002270:	f0 1f 00 22 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>

	// Set Four filters associated with RXB1

	CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 3);
80002274:	8a 8a       	ld.uh	r10,r5[0x0]
80002276:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000227a:	30 8b       	mov	r11,8
8000227c:	0e 9c       	mov	r12,r7
8000227e:	f0 1f 00 1f 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002282:	0b 2a       	ld.uh	r10,r5++
80002284:	a5 7a       	lsl	r10,0x5
80002286:	a3 ba       	sbr	r10,0x3
80002288:	e2 1a 00 e8 	andl	r10,0xe8,COH
8000228c:	30 9b       	mov	r11,9
8000228e:	0e 9c       	mov	r12,r7
80002290:	f0 1f 00 1a 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 3);
80002294:	8a 8a       	ld.uh	r10,r5[0x0]
80002296:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000229a:	31 0b       	mov	r11,16
8000229c:	0e 9c       	mov	r12,r7
8000229e:	f0 1f 00 17 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022a2:	0b 2a       	ld.uh	r10,r5++
800022a4:	a5 7a       	lsl	r10,0x5
800022a6:	a3 ba       	sbr	r10,0x3
800022a8:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022ac:	30 9b       	mov	r11,9
800022ae:	0e 9c       	mov	r12,r7
800022b0:	f0 1f 00 12 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 3);
800022b4:	8a 8a       	ld.uh	r10,r5[0x0]
800022b6:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022ba:	31 4b       	mov	r11,20
800022bc:	0e 9c       	mov	r12,r7
800022be:	f0 1f 00 0f 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022c2:	0b 2a       	ld.uh	r10,r5++
800022c4:	a5 7a       	lsl	r10,0x5
800022c6:	a3 ba       	sbr	r10,0x3
800022c8:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022cc:	30 9b       	mov	r11,9
800022ce:	0e 9c       	mov	r12,r7
800022d0:	f0 1f 00 0a 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 3);
800022d4:	8a 8a       	ld.uh	r10,r5[0x0]
800022d6:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022da:	31 8b       	mov	r11,24
800022dc:	0e 9c       	mov	r12,r7
800022de:	f0 1f 00 07 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
800022e2:	8a 8a       	ld.uh	r10,r5[0x0]
800022e4:	a5 7a       	lsl	r10,0x5
800022e6:	a3 ba       	sbr	r10,0x3
800022e8:	e2 1a 00 e8 	andl	r10,0xe8,COH
800022ec:	30 9b       	mov	r11,9
800022ee:	0e 9c       	mov	r12,r7
800022f0:	f0 1f 00 02 	mcall	800022f8 <CAN2515SetRXB1Filters+0xa8>
}
800022f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800022f8:	80 00       	ld.sh	r0,r0[0x0]
800022fa:	22 10       	sub	r0,33

800022fc <CAN2515SetRXB0Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0Filters(int Channel, UINT16 Mask0, UINT16* pFlt0_1 )
{
800022fc:	eb cd 40 e0 	pushm	r5-r7,lr
80002300:	18 97       	mov	r7,r12
80002302:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 3);
80002304:	16 96       	mov	r6,r11
80002306:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
8000230a:	32 0b       	mov	r11,32
8000230c:	f0 1f 00 15 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXM0SIDL, Mask0 << 5);
80002310:	ec 0a 15 05 	lsl	r10,r6,0x5
80002314:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002318:	32 1b       	mov	r11,33
8000231a:	0e 9c       	mov	r12,r7
8000231c:	f0 1f 00 11 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>

	// Set two filters associated with RXB0

	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 3);
80002320:	8a 8a       	ld.uh	r10,r5[0x0]
80002322:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002326:	30 0b       	mov	r11,0
80002328:	0e 9c       	mov	r12,r7
8000232a:	f0 1f 00 0e 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF0SIDL, *pFlt0_1 << 5);
8000232e:	0b 1a       	ld.sh	r10,r5++
80002330:	a5 7a       	lsl	r10,0x5
80002332:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002336:	30 1b       	mov	r11,1
80002338:	0e 9c       	mov	r12,r7
8000233a:	f0 1f 00 0a 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>


	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 3);
8000233e:	8a 8a       	ld.uh	r10,r5[0x0]
80002340:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
80002344:	30 4b       	mov	r11,4
80002346:	0e 9c       	mov	r12,r7
80002348:	f0 1f 00 06 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF1SIDL, *pFlt0_1 << 5);
8000234c:	0b 9a       	ld.ub	r10,r5[0x1]
8000234e:	a5 7a       	lsl	r10,0x5
80002350:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002354:	30 5b       	mov	r11,5
80002356:	0e 9c       	mov	r12,r7
80002358:	f0 1f 00 02 	mcall	80002360 <CAN2515SetRXB0Filters+0x64>

}
8000235c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002360:	80 00       	ld.sh	r0,r0[0x0]
80002362:	22 10       	sub	r0,33

80002364 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002364:	eb cd 40 c0 	pushm	r6-r7,lr
80002368:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
8000236a:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
8000236e:	0e 9c       	mov	r12,r7
80002370:	f0 1f 00 06 	mcall	80002388 <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002374:	e0 6b 00 c0 	mov	r11,192
80002378:	0c 9c       	mov	r12,r6
8000237a:	f0 1f 00 05 	mcall	8000238c <CANReset+0x28>
	mDEASSERT_CS(Channel);
8000237e:	0e 9c       	mov	r12,r7
80002380:	f0 1f 00 04 	mcall	80002390 <CANReset+0x2c>
}
80002384:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002388:	80 00       	ld.sh	r0,r0[0x0]
8000238a:	20 dc       	sub	r12,13
8000238c:	80 00       	ld.sh	r0,r0[0x0]
8000238e:	21 74       	sub	r4,23
80002390:	80 00       	ld.sh	r0,r0[0x0]
80002392:	21 fc       	sub	r12,31

80002394 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
80002394:	eb cd 40 e0 	pushm	r5-r7,lr
80002398:	20 1d       	sub	sp,4
8000239a:	18 97       	mov	r7,r12
8000239c:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
8000239e:	18 96       	mov	r6,r12
800023a0:	5c 56       	castu.b	r6
800023a2:	0c 9c       	mov	r12,r6
800023a4:	f0 1f 00 13 	mcall	800023f0 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
800023a8:	30 3b       	mov	r11,3
800023aa:	0e 9c       	mov	r12,r7
800023ac:	f0 1f 00 12 	mcall	800023f4 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
800023b0:	0a 9b       	mov	r11,r5
800023b2:	0e 9c       	mov	r12,r7
800023b4:	f0 1f 00 10 	mcall	800023f4 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
800023b8:	30 0b       	mov	r11,0
800023ba:	fe 7c 24 00 	mov	r12,-56320
800023be:	f0 1f 00 0f 	mcall	800023f8 <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800023c2:	fe 77 24 00 	mov	r7,-56320
800023c6:	c0 28       	rjmp	800023ca <CAN2515ByteRead+0x36>
		asm("NOP;");
800023c8:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
800023ca:	0e 9c       	mov	r12,r7
800023cc:	f0 1f 00 0c 	mcall	800023fc <CAN2515ByteRead+0x68>
800023d0:	cf c0       	breq	800023c8 <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
800023d2:	fa cb ff fe 	sub	r11,sp,-2
800023d6:	fe 7c 24 00 	mov	r12,-56320
800023da:	f0 1f 00 0a 	mcall	80002400 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
800023de:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
800023e0:	0c 9c       	mov	r12,r6
800023e2:	f0 1f 00 09 	mcall	80002404 <CAN2515ByteRead+0x70>

	return tempdata;
}
800023e6:	0e 9c       	mov	r12,r7
800023e8:	2f fd       	sub	sp,-4
800023ea:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	20 dc       	sub	r12,13
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	21 74       	sub	r4,23
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	34 4a       	mov	r10,68
800023fc:	80 00       	ld.sh	r0,r0[0x0]
800023fe:	34 66       	mov	r6,70
80002400:	80 00       	ld.sh	r0,r0[0x0]
80002402:	34 6e       	mov	lr,70
80002404:	80 00       	ld.sh	r0,r0[0x0]
80002406:	21 fc       	sub	r12,31

80002408 <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
80002408:	eb cd 40 80 	pushm	r7,lr
8000240c:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
8000240e:	58 ab       	cp.w	r11,10
80002410:	c1 11       	brne	80002432 <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
80002412:	30 3a       	mov	r10,3
80002414:	32 ab       	mov	r11,42
80002416:	f0 1f 00 30 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000241a:	e0 6a 00 ac 	mov	r10,172
8000241e:	32 9b       	mov	r11,41
80002420:	0e 9c       	mov	r12,r7
80002422:	f0 1f 00 2d 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002426:	30 7a       	mov	r10,7
80002428:	32 8b       	mov	r11,40
8000242a:	0e 9c       	mov	r12,r7
8000242c:	f0 1f 00 2a 	mcall	800024d4 <CANEnable+0xcc>
80002430:	c3 68       	rjmp	8000249c <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
80002432:	58 7b       	cp.w	r11,7
80002434:	c1 11       	brne	80002456 <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
80002436:	30 1a       	mov	r10,1
80002438:	32 ab       	mov	r11,42
8000243a:	f0 1f 00 27 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
8000243e:	e0 6a 00 ac 	mov	r10,172
80002442:	32 9b       	mov	r11,41
80002444:	0e 9c       	mov	r12,r7
80002446:	f0 1f 00 24 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000244a:	30 7a       	mov	r10,7
8000244c:	32 8b       	mov	r11,40
8000244e:	0e 9c       	mov	r12,r7
80002450:	f0 1f 00 21 	mcall	800024d4 <CANEnable+0xcc>
80002454:	c2 48       	rjmp	8000249c <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
80002456:	58 5b       	cp.w	r11,5
80002458:	c1 11       	brne	8000247a <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000245a:	30 0a       	mov	r10,0
8000245c:	32 ab       	mov	r11,42
8000245e:	f0 1f 00 1e 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002462:	e0 6a 00 ac 	mov	r10,172
80002466:	32 9b       	mov	r11,41
80002468:	0e 9c       	mov	r12,r7
8000246a:	f0 1f 00 1b 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
8000246e:	30 7a       	mov	r10,7
80002470:	32 8b       	mov	r11,40
80002472:	0e 9c       	mov	r12,r7
80002474:	f0 1f 00 18 	mcall	800024d4 <CANEnable+0xcc>
80002478:	c1 28       	rjmp	8000249c <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
8000247a:	58 1b       	cp.w	r11,1
8000247c:	c1 01       	brne	8000249c <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
8000247e:	30 0a       	mov	r10,0
80002480:	32 ab       	mov	r11,42
80002482:	f0 1f 00 15 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
80002486:	e0 6a 00 91 	mov	r10,145
8000248a:	32 9b       	mov	r11,41
8000248c:	0e 9c       	mov	r12,r7
8000248e:	f0 1f 00 12 	mcall	800024d4 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
80002492:	30 3a       	mov	r10,3
80002494:	32 8b       	mov	r11,40
80002496:	0e 9c       	mov	r12,r7
80002498:	f0 1f 00 0f 	mcall	800024d4 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
8000249c:	30 3a       	mov	r10,3
8000249e:	32 bb       	mov	r11,43
800024a0:	0e 9c       	mov	r12,r7
800024a2:	f0 1f 00 0d 	mcall	800024d4 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
800024a6:	30 4a       	mov	r10,4
800024a8:	30 fb       	mov	r11,15
800024aa:	0e 9c       	mov	r12,r7
800024ac:	f0 1f 00 0a 	mcall	800024d4 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
800024b0:	30 eb       	mov	r11,14
800024b2:	0e 9c       	mov	r12,r7
800024b4:	f0 1f 00 09 	mcall	800024d8 <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
800024b8:	30 eb       	mov	r11,14
800024ba:	0e 9c       	mov	r12,r7
800024bc:	f0 1f 00 07 	mcall	800024d8 <CANEnable+0xd0>
800024c0:	e2 1c 00 e0 	andl	r12,0xe0,COH
800024c4:	c0 60       	breq	800024d0 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
800024c6:	30 4a       	mov	r10,4
800024c8:	30 fb       	mov	r11,15
800024ca:	0e 9c       	mov	r12,r7
800024cc:	f0 1f 00 02 	mcall	800024d4 <CANEnable+0xcc>
800024d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800024d4:	80 00       	ld.sh	r0,r0[0x0]
800024d6:	22 10       	sub	r0,33
800024d8:	80 00       	ld.sh	r0,r0[0x0]
800024da:	23 94       	sub	r4,57

800024dc <InitializeCAN>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps)
 ********************************************************************/
void InitializeCAN( int Channel , int BusSpeed, UINT16 Mask, UINT16 Flt[6])
{
800024dc:	d4 21       	pushm	r4-r7,lr
800024de:	18 97       	mov	r7,r12
800024e0:	16 94       	mov	r4,r11
800024e2:	14 96       	mov	r6,r10
800024e4:	12 95       	mov	r5,r9
	CANReset(Channel);
800024e6:	f0 1f 00 0a 	mcall	8000250c <InitializeCAN+0x30>
	CAN2515SetRXB0Filters(Channel, Mask, Flt);
800024ea:	5c 76       	castu.h	r6
800024ec:	0a 9a       	mov	r10,r5
800024ee:	0c 9b       	mov	r11,r6
800024f0:	0e 9c       	mov	r12,r7
800024f2:	f0 1f 00 08 	mcall	80002510 <InitializeCAN+0x34>
	CAN2515SetRXB1Filters(Channel, Mask, &Flt[2]);
800024f6:	ea ca ff fc 	sub	r10,r5,-4
800024fa:	0c 9b       	mov	r11,r6
800024fc:	0e 9c       	mov	r12,r7
800024fe:	f0 1f 00 06 	mcall	80002514 <InitializeCAN+0x38>
	CANEnable(Channel, BusSpeed);
80002502:	08 9b       	mov	r11,r4
80002504:	0e 9c       	mov	r12,r7
80002506:	f0 1f 00 05 	mcall	80002518 <InitializeCAN+0x3c>
}
8000250a:	d8 22       	popm	r4-r7,pc
8000250c:	80 00       	ld.sh	r0,r0[0x0]
8000250e:	23 64       	sub	r4,54
80002510:	80 00       	ld.sh	r0,r0[0x0]
80002512:	22 fc       	sub	r12,47
80002514:	80 00       	ld.sh	r0,r0[0x0]
80002516:	22 50       	sub	r0,37
80002518:	80 00       	ld.sh	r0,r0[0x0]
8000251a:	24 08       	sub	r8,64

8000251c <Evk1100PrintDisp>:
 * Note:            None.
 *
 * Example:			Evk1100PrintDisp(&Ident, msg, &mSize );
 ********************************************************************/
void Evk1100PrintDisp(UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
8000251c:	d4 21       	pushm	r4-r7,lr
8000251e:	18 95       	mov	r5,r12
80002520:	16 96       	mov	r6,r11
80002522:	14 94       	mov	r4,r10
    dip204_set_cursor_position(1,1);
80002524:	30 1b       	mov	r11,1
80002526:	16 9c       	mov	r12,r11
80002528:	f0 1f 00 35 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[0]);
8000252c:	4b 57       	lddpc	r7,80002600 <Evk1100PrintDisp+0xe4>
8000252e:	0d 88       	ld.ub	r8,r6[0x0]
80002530:	1a d8       	st.w	--sp,r8
80002532:	0e 9c       	mov	r12,r7
80002534:	f0 1f 00 34 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,1);
80002538:	30 1b       	mov	r11,1
8000253a:	30 6c       	mov	r12,6
8000253c:	f0 1f 00 30 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[1]);
80002540:	0d 98       	ld.ub	r8,r6[0x1]
80002542:	1a d8       	st.w	--sp,r8
80002544:	0e 9c       	mov	r12,r7
80002546:	f0 1f 00 30 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,1);
8000254a:	30 1b       	mov	r11,1
8000254c:	30 bc       	mov	r12,11
8000254e:	f0 1f 00 2c 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[2]);
80002552:	0d a8       	ld.ub	r8,r6[0x2]
80002554:	1a d8       	st.w	--sp,r8
80002556:	0e 9c       	mov	r12,r7
80002558:	f0 1f 00 2b 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,1);
8000255c:	30 1b       	mov	r11,1
8000255e:	31 0c       	mov	r12,16
80002560:	f0 1f 00 27 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[3]);
80002564:	0d b8       	ld.ub	r8,r6[0x3]
80002566:	1a d8       	st.w	--sp,r8
80002568:	0e 9c       	mov	r12,r7
8000256a:	f0 1f 00 27 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,2);
8000256e:	30 2b       	mov	r11,2
80002570:	30 1c       	mov	r12,1
80002572:	f0 1f 00 23 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[4]);
80002576:	0d c8       	ld.ub	r8,r6[0x4]
80002578:	1a d8       	st.w	--sp,r8
8000257a:	0e 9c       	mov	r12,r7
8000257c:	f0 1f 00 22 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(6,2);
80002580:	30 2b       	mov	r11,2
80002582:	30 6c       	mov	r12,6
80002584:	f0 1f 00 1e 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[5]);
80002588:	0d d8       	ld.ub	r8,r6[0x5]
8000258a:	1a d8       	st.w	--sp,r8
8000258c:	0e 9c       	mov	r12,r7
8000258e:	f0 1f 00 1e 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(11,2);
80002592:	30 2b       	mov	r11,2
80002594:	30 bc       	mov	r12,11
80002596:	f0 1f 00 1a 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[6]);
8000259a:	0d e8       	ld.ub	r8,r6[0x6]
8000259c:	1a d8       	st.w	--sp,r8
8000259e:	0e 9c       	mov	r12,r7
800025a0:	f0 1f 00 19 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(16,2);
800025a4:	30 2b       	mov	r11,2
800025a6:	31 0c       	mov	r12,16
800025a8:	f0 1f 00 15 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", Msg[7]);
800025ac:	0d f8       	ld.ub	r8,r6[0x7]
800025ae:	1a d8       	st.w	--sp,r8
800025b0:	0e 9c       	mov	r12,r7
800025b2:	f0 1f 00 15 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(1,3);
800025b6:	2f 8d       	sub	sp,-32
800025b8:	30 3b       	mov	r11,3
800025ba:	30 1c       	mov	r12,1
800025bc:	f0 1f 00 10 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("Id: ");
800025c0:	49 2c       	lddpc	r12,80002608 <Evk1100PrintDisp+0xec>
800025c2:	f0 1f 00 11 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(4,3);
800025c6:	30 3b       	mov	r11,3
800025c8:	30 4c       	mov	r12,4
800025ca:	f0 1f 00 0d 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pIdentifier);
800025ce:	6a 08       	ld.w	r8,r5[0x0]
800025d0:	1a d8       	st.w	--sp,r8
800025d2:	0e 9c       	mov	r12,r7
800025d4:	f0 1f 00 0c 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(13,3);
800025d8:	30 3b       	mov	r11,3
800025da:	30 dc       	mov	r12,13
800025dc:	f0 1f 00 08 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("DLC:");
800025e0:	48 bc       	lddpc	r12,8000260c <Evk1100PrintDisp+0xf0>
800025e2:	f0 1f 00 09 	mcall	80002604 <Evk1100PrintDisp+0xe8>
    dip204_set_cursor_position(17,3);
800025e6:	30 3b       	mov	r11,3
800025e8:	31 1c       	mov	r12,17
800025ea:	f0 1f 00 05 	mcall	800025fc <Evk1100PrintDisp+0xe0>
    dip204_printf_string("%x", *pMsgSize);
800025ee:	09 88       	ld.ub	r8,r4[0x0]
800025f0:	1a d8       	st.w	--sp,r8
800025f2:	0e 9c       	mov	r12,r7
800025f4:	f0 1f 00 04 	mcall	80002604 <Evk1100PrintDisp+0xe8>
800025f8:	2f ed       	sub	sp,-8
}
800025fa:	d8 22       	popm	r4-r7,pc
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	2c f4       	sub	r4,-49
80002600:	80 00       	ld.sh	r0,r0[0x0]
80002602:	92 60       	ld.sh	r0,r9[0xc]
80002604:	80 00       	ld.sh	r0,r0[0x0]
80002606:	2c 5c       	sub	r12,-59
80002608:	80 00       	ld.sh	r0,r0[0x0]
8000260a:	92 64       	ld.sh	r4,r9[0xc]
8000260c:	80 00       	ld.sh	r0,r0[0x0]
8000260e:	92 6c       	ld.sh	r12,r9[0xc]

80002610 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
80002610:	eb cd 40 fe 	pushm	r1-r7,lr
80002614:	18 96       	mov	r6,r12
80002616:	16 93       	mov	r3,r11
80002618:	14 94       	mov	r4,r10
8000261a:	12 92       	mov	r2,r9
8000261c:	10 91       	mov	r1,r8
8000261e:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002620:	33 05       	mov	r5,48
80002622:	c1 78       	rjmp	80002650 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002624:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002628:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000262c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002630:	14 38       	cp.w	r8,r10
80002632:	e0 88 00 08 	brls	80002642 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002636:	12 38       	cp.w	r8,r9
80002638:	fe 98 ff fa 	brls	8000262c <CANSendMsg+0x1c>
8000263c:	12 3a       	cp.w	r10,r9
8000263e:	c7 63       	brcs	8000272a <CANSendMsg+0x11a>
80002640:	cf 6b       	rjmp	8000262c <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002642:	12 38       	cp.w	r8,r9
80002644:	e0 8b 00 73 	brhi	8000272a <CANSendMsg+0x11a>
80002648:	12 3a       	cp.w	r10,r9
8000264a:	c7 03       	brcs	8000272a <CANSendMsg+0x11a>
8000264c:	cf 0b       	rjmp	8000262c <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000264e:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002650:	0a 9b       	mov	r11,r5
80002652:	0c 9c       	mov	r12,r6
80002654:	f0 1f 00 38 	mcall	80002734 <CANSendMsg+0x124>
80002658:	e2 1c 00 08 	andl	r12,0x8,COH
8000265c:	ce 41       	brne	80002624 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
8000265e:	e6 08 16 0b 	lsr	r8,r3,0xb
80002662:	c1 01       	brne	80002682 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002664:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002668:	33 1b       	mov	r11,49
8000266a:	0c 9c       	mov	r12,r6
8000266c:	f0 1f 00 33 	mcall	80002738 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002670:	e6 0a 15 05 	lsl	r10,r3,0x5
80002674:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002678:	33 2b       	mov	r11,50
8000267a:	0c 9c       	mov	r12,r6
8000267c:	f0 1f 00 2f 	mcall	80002738 <CANSendMsg+0x128>
80002680:	c2 18       	rjmp	800026c2 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
80002682:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
80002686:	33 1b       	mov	r11,49
80002688:	0c 9c       	mov	r12,r6
8000268a:	f0 1f 00 2c 	mcall	80002738 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
8000268e:	e6 08 16 0d 	lsr	r8,r3,0xd
80002692:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
80002696:	e2 18 00 e0 	andl	r8,0xe0,COH
8000269a:	10 4a       	or	r10,r8
8000269c:	a3 ba       	sbr	r10,0x3
8000269e:	e2 1a 00 eb 	andl	r10,0xeb,COH
800026a2:	33 2b       	mov	r11,50
800026a4:	0c 9c       	mov	r12,r6
800026a6:	f0 1f 00 25 	mcall	80002738 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
800026aa:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
800026ae:	33 3b       	mov	r11,51
800026b0:	0c 9c       	mov	r12,r6
800026b2:	f0 1f 00 22 	mcall	80002738 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
800026b6:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
800026ba:	33 4b       	mov	r11,52
800026bc:	0c 9c       	mov	r12,r6
800026be:	f0 1f 00 1f 	mcall	80002738 <CANSendMsg+0x128>
800026c2:	30 85       	mov	r5,8
800026c4:	ea 02 18 00 	cp.b	r2,r5
800026c8:	e4 05 17 80 	movls	r5,r2
800026cc:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
800026d0:	e0 41 00 52 	cp.w	r1,82
800026d4:	c1 01       	brne	800026f4 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
800026d6:	a7 a5       	sbr	r5,0x6
800026d8:	5c 55       	castu.b	r5
800026da:	0a 9a       	mov	r10,r5
800026dc:	33 5b       	mov	r11,53
800026de:	0c 9c       	mov	r12,r6
800026e0:	f0 1f 00 16 	mcall	80002738 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
800026e4:	30 4b       	mov	r11,4
800026e6:	31 1c       	mov	r12,17
800026e8:	f0 1f 00 15 	mcall	8000273c <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
800026ec:	49 5c       	lddpc	r12,80002740 <CANSendMsg+0x130>
800026ee:	f0 1f 00 16 	mcall	80002744 <CANSendMsg+0x134>
800026f2:	c0 68       	rjmp	800026fe <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
800026f4:	0a 9a       	mov	r10,r5
800026f6:	33 5b       	mov	r11,53
800026f8:	0c 9c       	mov	r12,r6
800026fa:	f0 1f 00 10 	mcall	80002738 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800026fe:	58 05       	cp.w	r5,0
80002700:	e0 8a 00 0e 	brle	8000271c <CANSendMsg+0x10c>
80002704:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
80002706:	0e 9b       	mov	r11,r7
80002708:	2c ab       	sub	r11,-54
8000270a:	e8 07 07 0a 	ld.ub	r10,r4[r7]
8000270e:	5c 5b       	castu.b	r11
80002710:	0c 9c       	mov	r12,r6
80002712:	f0 1f 00 0a 	mcall	80002738 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
80002716:	2f f7       	sub	r7,-1
80002718:	0a 37       	cp.w	r7,r5
8000271a:	cf 65       	brlt	80002706 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
8000271c:	30 8a       	mov	r10,8
8000271e:	33 0b       	mov	r11,48
80002720:	0c 9c       	mov	r12,r6
80002722:	f0 1f 00 06 	mcall	80002738 <CANSendMsg+0x128>
80002726:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
8000272a:	e0 47 00 64 	cp.w	r7,100
8000272e:	c9 01       	brne	8000264e <CANSendMsg+0x3e>
80002730:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80002734:	80 00       	ld.sh	r0,r0[0x0]
80002736:	23 94       	sub	r4,57
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	22 10       	sub	r0,33
8000273c:	80 00       	ld.sh	r0,r0[0x0]
8000273e:	2c f4       	sub	r4,-49
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	92 74       	ld.sh	r4,r9[0xe]
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	2c 5c       	sub	r12,-59

80002748 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
80002748:	d4 31       	pushm	r0-r7,lr
8000274a:	18 95       	mov	r5,r12
8000274c:	16 92       	mov	r2,r11
8000274e:	14 93       	mov	r3,r10
80002750:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002752:	f0 1f 00 5c 	mcall	800028c0 <CANGetMsg+0x178>

        if( (temp & 3) == 0 )
80002756:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000275a:	e0 80 00 b1 	breq	800028bc <CANGetMsg+0x174>
            return FALSE;
        temp&=0x03;
        if(temp==1){
8000275e:	58 1c       	cp.w	r12,1
80002760:	c0 31       	brne	80002766 <CANGetMsg+0x1e>
80002762:	36 16       	mov	r6,97
80002764:	c0 58       	rjmp	8000276e <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
80002766:	58 2c       	cp.w	r12,2
80002768:	e0 81 00 aa 	brne	800028bc <CANGetMsg+0x174>
8000276c:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
8000276e:	0c 9b       	mov	r11,r6
80002770:	0a 9c       	mov	r12,r5
80002772:	f0 1f 00 55 	mcall	800028c4 <CANGetMsg+0x17c>
80002776:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002778:	ec cb ff ff 	sub	r11,r6,-1
8000277c:	5c 5b       	castu.b	r11
8000277e:	0a 9c       	mov	r12,r5
80002780:	f0 1f 00 51 	mcall	800028c4 <CANGetMsg+0x17c>
80002784:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
80002786:	ec cb ff fe 	sub	r11,r6,-2
8000278a:	5c 5b       	castu.b	r11
8000278c:	0a 9c       	mov	r12,r5
8000278e:	f0 1f 00 4e 	mcall	800028c4 <CANGetMsg+0x17c>
80002792:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
80002794:	ec cb ff fd 	sub	r11,r6,-3
80002798:	5c 5b       	castu.b	r11
8000279a:	0a 9c       	mov	r12,r5
8000279c:	f0 1f 00 4a 	mcall	800028c4 <CANGetMsg+0x17c>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
800027a0:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
800027a4:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
800027a8:	c1 41       	brne	800027d0 <CANGetMsg+0x88>
        {
            *pIdentifier = S1<<3 | S2>>5;
800027aa:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
800027ae:	ef e1 10 31 	or	r1,r7,r1<<0x3
800027b2:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
800027b4:	30 1c       	mov	r12,1
800027b6:	f0 1f 00 45 	mcall	800028c8 <CANGetMsg+0x180>
            LED_Off(LED1);
800027ba:	30 2c       	mov	r12,2
800027bc:	f0 1f 00 44 	mcall	800028cc <CANGetMsg+0x184>

             dip204_set_cursor_position(1,4);
800027c0:	30 4b       	mov	r11,4
800027c2:	30 1c       	mov	r12,1
800027c4:	f0 1f 00 43 	mcall	800028d0 <CANGetMsg+0x188>
             dip204_printf_string("St Id");
800027c8:	4c 3c       	lddpc	r12,800028d4 <CANGetMsg+0x18c>
800027ca:	f0 1f 00 44 	mcall	800028d8 <CANGetMsg+0x190>
800027ce:	c1 b8       	rjmp	80002804 <CANGetMsg+0xbc>
        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
800027d0:	a9 60       	lsl	r0,0x8
800027d2:	e1 e1 11 51 	or	r1,r0,r1<<0x15
800027d6:	e3 ec 10 0c 	or	r12,r1,r12
800027da:	e2 18 00 1c 	andl	r8,0x1c,COH
800027de:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
800027e2:	0e 48       	or	r8,r7
800027e4:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
800027e8:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
800027ea:	30 2c       	mov	r12,2
800027ec:	f0 1f 00 37 	mcall	800028c8 <CANGetMsg+0x180>
            LED_Off(LED0);
800027f0:	30 1c       	mov	r12,1
800027f2:	f0 1f 00 37 	mcall	800028cc <CANGetMsg+0x184>

            dip204_set_cursor_position(1,4);
800027f6:	30 4b       	mov	r11,4
800027f8:	30 1c       	mov	r12,1
800027fa:	f0 1f 00 36 	mcall	800028d0 <CANGetMsg+0x188>
            dip204_printf_string("Ex Id");
800027fe:	4b 8c       	lddpc	r12,800028dc <CANGetMsg+0x194>
80002800:	f0 1f 00 36 	mcall	800028d8 <CANGetMsg+0x190>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002804:	ec cb ff fc 	sub	r11,r6,-4
80002808:	5c 5b       	castu.b	r11
8000280a:	0a 9c       	mov	r12,r5
8000280c:	f0 1f 00 2e 	mcall	800028c4 <CANGetMsg+0x17c>
80002810:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002814:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
80002816:	30 88       	mov	r8,8
80002818:	f0 0c 18 00 	cp.b	r12,r8
8000281c:	e0 88 00 07 	brls	8000282a <CANGetMsg+0xe2>
            *pMsgSize = 8;
80002820:	a8 88       	st.b	r4[0x0],r8
80002822:	2f b6       	sub	r6,-5
80002824:	5c 56       	castu.b	r6
80002826:	30 07       	mov	r7,0
80002828:	c0 58       	rjmp	80002832 <CANGetMsg+0xea>

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000282a:	58 0c       	cp.w	r12,0
8000282c:	fe 99 ff fb 	brgt	80002822 <CANGetMsg+0xda>
80002830:	c0 e8       	rjmp	8000284c <CANGetMsg+0x104>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
80002832:	0c 9b       	mov	r11,r6
80002834:	0a 9c       	mov	r12,r5
80002836:	f0 1f 00 24 	mcall	800028c4 <CANGetMsg+0x17c>
8000283a:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
8000283e:	2f f7       	sub	r7,-1
80002840:	2f f6       	sub	r6,-1
80002842:	5c 56       	castu.b	r6
80002844:	09 88       	ld.ub	r8,r4[0x0]
80002846:	0e 38       	cp.w	r8,r7
80002848:	fe 99 ff f5 	brgt	80002832 <CANGetMsg+0xea>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
8000284c:	30 4c       	mov	r12,4
8000284e:	f0 1f 00 20 	mcall	800028cc <CANGetMsg+0x184>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
80002852:	36 0b       	mov	r11,96
80002854:	0a 9c       	mov	r12,r5
80002856:	f0 1f 00 1c 	mcall	800028c4 <CANGetMsg+0x17c>
8000285a:	e2 1c 00 08 	andl	r12,0x8,COH
8000285e:	c0 81       	brne	8000286e <CANGetMsg+0x126>
80002860:	37 0b       	mov	r11,112
80002862:	0a 9c       	mov	r12,r5
80002864:	f0 1f 00 18 	mcall	800028c4 <CANGetMsg+0x17c>
80002868:	e2 1c 00 08 	andl	r12,0x8,COH
8000286c:	c1 d0       	breq	800028a6 <CANGetMsg+0x15e>
8000286e:	64 08       	ld.w	r8,r2[0x0]
80002870:	58 18       	cp.w	r8,1
80002872:	c1 a1       	brne	800028a6 <CANGetMsg+0x15e>
                    {
                    Msg[0] = 0;
80002874:	30 08       	mov	r8,0
80002876:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
80002878:	30 18       	mov	r8,1
8000287a:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
8000287c:	30 28       	mov	r8,2
8000287e:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002880:	30 38       	mov	r8,3
80002882:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
80002884:	30 08       	mov	r8,0
80002886:	30 49       	mov	r9,4
80002888:	06 9a       	mov	r10,r3
8000288a:	64 0b       	ld.w	r11,r2[0x0]
8000288c:	0a 9c       	mov	r12,r5
8000288e:	f0 1f 00 15 	mcall	800028e0 <CANGetMsg+0x198>
                    dip204_set_cursor_position(17,4);
80002892:	30 4b       	mov	r11,4
80002894:	31 1c       	mov	r12,17
80002896:	f0 1f 00 0f 	mcall	800028d0 <CANGetMsg+0x188>
                    dip204_printf_string("Re F");
8000289a:	49 3c       	lddpc	r12,800028e4 <CANGetMsg+0x19c>
8000289c:	f0 1f 00 0f 	mcall	800028d8 <CANGetMsg+0x190>
                    LED_On(LED2);
800028a0:	30 4c       	mov	r12,4
800028a2:	f0 1f 00 0a 	mcall	800028c8 <CANGetMsg+0x180>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
800028a6:	30 0a       	mov	r10,0
800028a8:	32 cb       	mov	r11,44
800028aa:	14 9c       	mov	r12,r10
800028ac:	f0 1f 00 0f 	mcall	800028e8 <CANGetMsg+0x1a0>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
800028b0:	30 0a       	mov	r10,0
800028b2:	32 cb       	mov	r11,44
800028b4:	14 9c       	mov	r12,r10
800028b6:	f0 1f 00 0d 	mcall	800028e8 <CANGetMsg+0x1a0>
800028ba:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
800028bc:	d8 3a       	popm	r0-r7,pc,r12=0
800028be:	00 00       	add	r0,r0
800028c0:	80 00       	ld.sh	r0,r0[0x0]
800028c2:	21 84       	sub	r4,24
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	23 94       	sub	r4,57
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	2a c8       	sub	r8,-84
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	2b 18       	sub	r8,-79
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	2c f4       	sub	r4,-49
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	92 7c       	ld.sh	r12,r9[0xe]
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	2c 5c       	sub	r12,-59
800028dc:	80 00       	ld.sh	r0,r0[0x0]
800028de:	92 84       	ld.uh	r4,r9[0x0]
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	26 10       	sub	r0,97
800028e4:	80 00       	ld.sh	r0,r0[0x0]
800028e6:	92 74       	ld.sh	r4,r9[0xe]
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	22 10       	sub	r0,33

800028ec <main>:
#define CAN_125kbps 10

UINT32 Ident;
UINT8 msg[8], mSize;

int main(void) {
800028ec:	d4 31       	pushm	r0-r7,lr
800028ee:	20 3d       	sub	sp,12
	
	float readPot;
	float speedPot;
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
800028f0:	30 3a       	mov	r10,3
800028f2:	e0 6b 1b 00 	mov	r11,6912
800028f6:	ea 1b 00 b7 	orh	r11,0xb7
800028fa:	fe 7c 0c 00 	mov	r12,-62464
800028fe:	f0 1f 00 57 	mcall	80002a58 <main+0x16c>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
80002902:	f0 1f 00 57 	mcall	80002a5c <main+0x170>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002906:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002908:	f0 1f 00 56 	mcall	80002a60 <main+0x174>
	Enable_global_interrupt();
8000290c:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
8000290e:	f0 1f 00 56 	mcall	80002a64 <main+0x178>
	dip204_init(100,1);
80002912:	30 1b       	mov	r11,1
80002914:	36 4c       	mov	r12,100
80002916:	f0 1f 00 55 	mcall	80002a68 <main+0x17c>
	dip204_clear_display();
8000291a:	f0 1f 00 55 	mcall	80002a6c <main+0x180>
	
	UINT16 Mask = 0; 
	UINT16 flt = 0;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
8000291e:	30 08       	mov	r8,0
80002920:	ba 08       	st.h	sp[0x0],r8
80002922:	ba 18       	st.h	sp[0x2],r8
80002924:	ba 28       	st.h	sp[0x4],r8
80002926:	ba 38       	st.h	sp[0x6],r8
80002928:	ba 48       	st.h	sp[0x8],r8
8000292a:	ba 58       	st.h	sp[0xa],r8
	InitializeCAN(0, CAN_250kbps, Mask, Flt);
8000292c:	1a 99       	mov	r9,sp
8000292e:	30 0a       	mov	r10,0
80002930:	30 7b       	mov	r11,7
80002932:	14 9c       	mov	r12,r10
80002934:	f0 1f 00 4f 	mcall	80002a70 <main+0x184>
	
	dip204_set_cursor_position(1,1);
80002938:	30 1b       	mov	r11,1
8000293a:	16 9c       	mov	r12,r11
8000293c:	f0 1f 00 4e 	mcall	80002a74 <main+0x188>
	dip204_printf_string("ES1 CAN EXAMPLE");
80002940:	4c ec       	lddpc	r12,80002a78 <main+0x18c>
80002942:	f0 1f 00 4f 	mcall	80002a7c <main+0x190>
	dip204_hide_cursor();
80002946:	f0 1f 00 4f 	mcall	80002a80 <main+0x194>
	
	//Enable potentiometer
	adc_enable( &AVR32_ADC, ADC_POTENTIOMETER_CHANNEL );
8000294a:	30 1b       	mov	r11,1
8000294c:	fe 7c 3c 00 	mov	r12,-50176
80002950:	f0 1f 00 4d 	mcall	80002a84 <main+0x198>

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002954:	4c d7       	lddpc	r7,80002a88 <main+0x19c>
		
		adc_start(&AVR32_ADC);
80002956:	fe 75 3c 00 	mov	r5,-50176
		
		readPot = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000295a:	30 13       	mov	r3,1
		speedPot = readPot/(10.24)*256.0/251.0;
8000295c:	e0 60 14 7b 	mov	r0,5243
80002960:	ea 10 47 ae 	orh	r0,0x47ae
80002964:	e0 61 7a e1 	mov	r1,31457
80002968:	ea 11 40 24 	orh	r1,0x4024
				
		//Read any message available
		if(CANRxReady(0)){
8000296c:	30 06       	mov	r6,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
8000296e:	4c 82       	lddpc	r2,80002a8c <main+0x1a0>
	//Enable potentiometer
	adc_enable( &AVR32_ADC, ADC_POTENTIOMETER_CHANNEL );

	while(1){
		//Clear memory contents
		ClearMessages(msg);
80002970:	0e 9c       	mov	r12,r7
80002972:	f0 1f 00 48 	mcall	80002a90 <main+0x1a4>
		
		adc_start(&AVR32_ADC);
80002976:	0a 9c       	mov	r12,r5
80002978:	f0 1f 00 47 	mcall	80002a94 <main+0x1a8>
		
		readPot = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000297c:	06 9b       	mov	r11,r3
8000297e:	0a 9c       	mov	r12,r5
80002980:	f0 1f 00 46 	mcall	80002a98 <main+0x1ac>
		speedPot = readPot/(10.24)*256.0/251.0;
80002984:	f0 1f 00 46 	mcall	80002a9c <main+0x1b0>
80002988:	f0 1f 00 46 	mcall	80002aa0 <main+0x1b4>
8000298c:	00 98       	mov	r8,r0
8000298e:	02 99       	mov	r9,r1
80002990:	f0 1f 00 45 	mcall	80002aa4 <main+0x1b8>
80002994:	30 08       	mov	r8,0
80002996:	fc 19 40 70 	movh	r9,0x4070
8000299a:	f0 1f 00 44 	mcall	80002aa8 <main+0x1bc>
8000299e:	30 08       	mov	r8,0
800029a0:	e0 69 60 00 	mov	r9,24576
800029a4:	ea 19 40 6f 	orh	r9,0x406f
800029a8:	f0 1f 00 3f 	mcall	80002aa4 <main+0x1b8>
800029ac:	f0 1f 00 40 	mcall	80002aac <main+0x1c0>
800029b0:	18 94       	mov	r4,r12
				
		//Read any message available
		if(CANRxReady(0)){
800029b2:	0c 9c       	mov	r12,r6
800029b4:	f0 1f 00 3f 	mcall	80002ab0 <main+0x1c4>
800029b8:	c2 70       	breq	80002a06 <main+0x11a>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
800029ba:	04 99       	mov	r9,r2
800029bc:	0e 9a       	mov	r10,r7
800029be:	4b eb       	lddpc	r11,80002ab4 <main+0x1c8>
800029c0:	0c 9c       	mov	r12,r6
800029c2:	f0 1f 00 3e 	mcall	80002ab8 <main+0x1cc>
800029c6:	c2 00       	breq	80002a06 <main+0x11a>
			{	
				// Evk1100PrintDisplay prints 4 message values, the Identifier and the data size on the display
				dip204_clear_display();
800029c8:	f0 1f 00 29 	mcall	80002a6c <main+0x180>
				Evk1100PrintDisp(&Ident, msg, &mSize);
800029cc:	04 9a       	mov	r10,r2
800029ce:	0e 9b       	mov	r11,r7
800029d0:	4b 9c       	lddpc	r12,80002ab4 <main+0x1c8>
800029d2:	f0 1f 00 3b 	mcall	80002abc <main+0x1d0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029d6:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029da:	e0 6a 1b 00 	mov	r10,6912
800029de:	ea 1a 00 b7 	orh	r10,0xb7
800029e2:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800029e6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029ea:	14 38       	cp.w	r8,r10
800029ec:	e0 88 00 08 	brls	800029fc <main+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029f0:	12 38       	cp.w	r8,r9
800029f2:	fe 98 ff fa 	brls	800029e6 <main+0xfa>
800029f6:	12 3a       	cp.w	r10,r9
800029f8:	c0 73       	brcs	80002a06 <main+0x11a>
800029fa:	cf 6b       	rjmp	800029e6 <main+0xfa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800029fc:	12 38       	cp.w	r8,r9
800029fe:	e0 8b 00 04 	brhi	80002a06 <main+0x11a>
80002a02:	12 3a       	cp.w	r10,r9
80002a04:	cf 12       	brcc	800029e6 <main+0xfa>
				delay_ms(1000);
				//dip204_clear_display();
			}
		}
		// Send messages if possible
		if(CANTxReady(0))
80002a06:	0c 9c       	mov	r12,r6
80002a08:	f0 1f 00 2e 	mcall	80002ac0 <main+0x1d4>
80002a0c:	cb 20       	breq	80002970 <main+0x84>
		{
			msg[0]=0;
80002a0e:	30 08       	mov	r8,0
80002a10:	ae 88       	st.b	r7[0x0],r8
			msg[1]=0;
80002a12:	ae 98       	st.b	r7[0x1],r8
			msg[2]=0;
80002a14:	ae a8       	st.b	r7[0x2],r8
			msg[3]=0;
80002a16:	ae b8       	st.b	r7[0x3],r8
			msg[4]=0;
80002a18:	ae c8       	st.b	r7[0x4],r8
			msg[5]=0;
80002a1a:	ae d8       	st.b	r7[0x5],r8
			msg[6]=0;
80002a1c:	ae e8       	st.b	r7[0x6],r8
			msg[7]=speedPot;
80002a1e:	08 9c       	mov	r12,r4
80002a20:	f0 1f 00 29 	mcall	80002ac4 <main+0x1d8>
80002a24:	ae fc       	st.b	r7[0x7],r12
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a26:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a2a:	e0 6a 4f 80 	mov	r10,20352
80002a2e:	ea 1a 00 12 	orh	r10,0x12
80002a32:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a36:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a3a:	14 38       	cp.w	r8,r10
80002a3c:	e0 88 00 08 	brls	80002a4c <main+0x160>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a40:	12 38       	cp.w	r8,r9
80002a42:	fe 98 ff fa 	brls	80002a36 <main+0x14a>
80002a46:	12 3a       	cp.w	r10,r9
80002a48:	c9 43       	brcs	80002970 <main+0x84>
80002a4a:	cf 6b       	rjmp	80002a36 <main+0x14a>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a4c:	12 38       	cp.w	r8,r9
80002a4e:	fe 9b ff 91 	brhi	80002970 <main+0x84>
80002a52:	12 3a       	cp.w	r10,r9
80002a54:	c8 e3       	brcs	80002970 <main+0x84>
80002a56:	cf 0b       	rjmp	80002a36 <main+0x14a>
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	31 dc       	mov	r12,29
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	20 f0       	sub	r0,15
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	30 c4       	mov	r4,12
80002a64:	80 00       	ld.sh	r0,r0[0x0]
80002a66:	20 64       	sub	r4,6
80002a68:	80 00       	ld.sh	r0,r0[0x0]
80002a6a:	2d dc       	sub	r12,-35
80002a6c:	80 00       	ld.sh	r0,r0[0x0]
80002a6e:	2d 80       	sub	r0,-40
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	24 dc       	sub	r12,77
80002a74:	80 00       	ld.sh	r0,r0[0x0]
80002a76:	2c f4       	sub	r4,-49
80002a78:	80 00       	ld.sh	r0,r0[0x0]
80002a7a:	92 8c       	ld.uh	r12,r9[0x0]
80002a7c:	80 00       	ld.sh	r0,r0[0x0]
80002a7e:	2c 5c       	sub	r12,-59
80002a80:	80 00       	ld.sh	r0,r0[0x0]
80002a82:	2d 50       	sub	r0,-43
80002a84:	80 00       	ld.sh	r0,r0[0x0]
80002a86:	20 0e       	sub	lr,0
80002a88:	00 00       	add	r0,r0
80002a8a:	06 60       	and	r0,r3
80002a8c:	00 00       	add	r0,r0
80002a8e:	06 68       	and	r8,r3
80002a90:	80 00       	ld.sh	r0,r0[0x0]
80002a92:	20 50       	sub	r0,5
80002a94:	80 00       	ld.sh	r0,r0[0x0]
80002a96:	20 08       	sub	r8,0
80002a98:	80 00       	ld.sh	r0,r0[0x0]
80002a9a:	20 28       	sub	r8,2
80002a9c:	80 00       	ld.sh	r0,r0[0x0]
80002a9e:	39 bc       	mov	r12,-101
80002aa0:	80 00       	ld.sh	r0,r0[0x0]
80002aa2:	3a 46       	mov	r6,-92
80002aa4:	80 00       	ld.sh	r0,r0[0x0]
80002aa6:	36 a4       	mov	r4,106
80002aa8:	80 00       	ld.sh	r0,r0[0x0]
80002aaa:	34 d0       	mov	r0,77
80002aac:	80 00       	ld.sh	r0,r0[0x0]
80002aae:	3a a6       	mov	r6,-86
80002ab0:	80 00       	ld.sh	r0,r0[0x0]
80002ab2:	21 d4       	sub	r4,29
80002ab4:	00 00       	add	r0,r0
80002ab6:	06 6c       	and	r12,r3
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	27 48       	sub	r8,116
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	25 1c       	sub	r12,81
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	21 e8       	sub	r8,30
80002ac4:	80 00       	ld.sh	r0,r0[0x0]
80002ac6:	3a 2c       	mov	r12,-94

80002ac8 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002ac8:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002acc:	49 18       	lddpc	r8,80002b10 <LED_On+0x48>
80002ace:	70 09       	ld.w	r9,r8[0x0]
80002ad0:	f9 e9 10 09 	or	r9,r12,r9
80002ad4:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002ad6:	58 0c       	cp.w	r12,0
80002ad8:	5e 0c       	reteq	r12
80002ada:	48 f8       	lddpc	r8,80002b14 <LED_On+0x4c>
80002adc:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002ade:	18 9a       	mov	r10,r12
80002ae0:	5c 9a       	brev	r10
80002ae2:	f4 0a 12 00 	clz	r10,r10
80002ae6:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002ae8:	f4 09 15 04 	lsl	r9,r10,0x4
80002aec:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002aee:	70 09       	ld.w	r9,r8[0x0]
80002af0:	a9 69       	lsl	r9,0x8
80002af2:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002af6:	70 1b       	ld.w	r11,r8[0x4]
80002af8:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002afc:	70 1b       	ld.w	r11,r8[0x4]
80002afe:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002b02:	70 1b       	ld.w	r11,r8[0x4]
80002b04:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002b06:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002b0a:	ce a1       	brne	80002ade <LED_On+0x16>
80002b0c:	5e fc       	retal	r12
80002b0e:	00 00       	add	r0,r0
80002b10:	00 00       	add	r0,r0
80002b12:	00 08       	add	r8,r0
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	92 9c       	ld.uh	r12,r9[0x2]

80002b18 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002b18:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002b1c:	49 28       	lddpc	r8,80002b64 <LED_Off+0x4c>
80002b1e:	70 09       	ld.w	r9,r8[0x0]
80002b20:	f8 0a 11 ff 	rsub	r10,r12,-1
80002b24:	f5 e9 00 09 	and	r9,r10,r9
80002b28:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002b2a:	58 0c       	cp.w	r12,0
80002b2c:	5e 0c       	reteq	r12
80002b2e:	48 f8       	lddpc	r8,80002b68 <LED_Off+0x50>
80002b30:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002b32:	18 9a       	mov	r10,r12
80002b34:	5c 9a       	brev	r10
80002b36:	f4 0a 12 00 	clz	r10,r10
80002b3a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002b3c:	f4 09 15 04 	lsl	r9,r10,0x4
80002b40:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002b42:	70 09       	ld.w	r9,r8[0x0]
80002b44:	a9 69       	lsl	r9,0x8
80002b46:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002b4a:	70 1b       	ld.w	r11,r8[0x4]
80002b4c:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002b50:	70 1b       	ld.w	r11,r8[0x4]
80002b52:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002b56:	70 1b       	ld.w	r11,r8[0x4]
80002b58:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002b5a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002b5e:	ce a1       	brne	80002b32 <LED_Off+0x1a>
80002b60:	5e fc       	retal	r12
80002b62:	00 00       	add	r0,r0
80002b64:	00 00       	add	r0,r0
80002b66:	00 08       	add	r8,r0
80002b68:	80 00       	ld.sh	r0,r0[0x0]
80002b6a:	92 9c       	ld.uh	r12,r9[0x2]

80002b6c <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002b6c:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002b6e:	30 2b       	mov	r11,2
80002b70:	fe 7c 28 00 	mov	r12,-55296
80002b74:	f0 1f 00 02 	mcall	80002b7c <dip204_select+0x10>
}
80002b78:	d8 02       	popm	pc
80002b7a:	00 00       	add	r0,r0
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	33 1a       	mov	r10,49

80002b80 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002b80:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
80002b84:	f8 c8 ff f8 	sub	r8,r12,-8
80002b88:	30 69       	mov	r9,6
80002b8a:	f2 08 18 00 	cp.b	r8,r9
80002b8e:	e0 8b 00 0f 	brhi	80002bac <dip204_write_byte+0x2c>
80002b92:	30 19       	mov	r9,1
80002b94:	f2 08 09 48 	lsl	r8,r9,r8
80002b98:	e2 18 00 55 	andl	r8,0x55,COH
80002b9c:	c0 80       	breq	80002bac <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002b9e:	18 9b       	mov	r11,r12
80002ba0:	fe 7c 28 00 	mov	r12,-55296
80002ba4:	f0 1f 00 0c 	mcall	80002bd4 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
80002ba8:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002bac:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002bae:	f8 07 16 18 	lsr	r7,r12,0x18
80002bb2:	0e 9b       	mov	r11,r7
80002bb4:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002bb8:	fe 7c 28 00 	mov	r12,-55296
80002bbc:	f0 1f 00 06 	mcall	80002bd4 <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002bc0:	ee 0b 15 04 	lsl	r11,r7,0x4
80002bc4:	e2 1b 00 f0 	andl	r11,0xf0,COH
80002bc8:	fe 7c 28 00 	mov	r12,-55296
80002bcc:	f0 1f 00 02 	mcall	80002bd4 <dip204_write_byte+0x54>
80002bd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	34 4a       	mov	r10,68

80002bd8 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bdc:	20 1d       	sub	sp,4
80002bde:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
80002be0:	fa c7 ff fc 	sub	r7,sp,-4
80002be4:	30 08       	mov	r8,0
80002be6:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002be8:	30 0b       	mov	r11,0
80002bea:	fe 7c 28 00 	mov	r12,-55296
80002bee:	f0 1f 00 08 	mcall	80002c0c <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002bf2:	0e 9b       	mov	r11,r7
80002bf4:	fe 7c 28 00 	mov	r12,-55296
80002bf8:	f0 1f 00 06 	mcall	80002c10 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002bfc:	1b b8       	ld.ub	r8,sp[0x3]
80002bfe:	5c 98       	brev	r8
80002c00:	b9 88       	lsr	r8,0x18
80002c02:	ac 88       	st.b	r6[0x0],r8
}
80002c04:	2f fd       	sub	sp,-4
80002c06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c0a:	00 00       	add	r0,r0
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	34 4a       	mov	r10,68
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	34 6e       	mov	lr,70

80002c14 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002c14:	eb cd 40 c0 	pushm	r6-r7,lr
80002c18:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002c1a:	fa c7 ff fc 	sub	r7,sp,-4
80002c1e:	30 08       	mov	r8,0
80002c20:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002c22:	e0 6c 00 fc 	mov	r12,252
80002c26:	f0 1f 00 07 	mcall	80002c40 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002c2a:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002c2c:	0e 9c       	mov	r12,r7
80002c2e:	f0 1f 00 06 	mcall	80002c44 <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002c32:	1b b8       	ld.ub	r8,sp[0x3]
80002c34:	ec 08 18 00 	cp.b	r8,r6
80002c38:	cf a5       	brlt	80002c2c <dip204_wait_busy+0x18>
}
80002c3a:	2f fd       	sub	sp,-4
80002c3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c40:	80 00       	ld.sh	r0,r0[0x0]
80002c42:	2b 80       	sub	r0,-72
80002c44:	80 00       	ld.sh	r0,r0[0x0]
80002c46:	2b d8       	sub	r8,-67

80002c48 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002c48:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002c4a:	30 2b       	mov	r11,2
80002c4c:	fe 7c 28 00 	mov	r12,-55296
80002c50:	f0 1f 00 02 	mcall	80002c58 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002c54:	d8 02       	popm	pc
80002c56:	00 00       	add	r0,r0
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	33 66       	mov	r6,54

80002c5c <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002c5c:	d4 21       	pushm	r4-r7,lr
80002c5e:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002c60:	fa ca ff d4 	sub	r10,sp,-44
80002c64:	18 9b       	mov	r11,r12
80002c66:	1a 9c       	mov	r12,sp
80002c68:	f0 1f 00 1e 	mcall	80002ce0 <dip204_printf_string+0x84>
80002c6c:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002c6e:	31 38       	mov	r8,19
80002c70:	f0 0c 18 00 	cp.b	r12,r8
80002c74:	e0 8b 00 0e 	brhi	80002c90 <dip204_printf_string+0x34>
80002c78:	30 0a       	mov	r10,0
80002c7a:	31 49       	mov	r9,20
80002c7c:	fa c8 ff e8 	sub	r8,sp,-24
80002c80:	18 08       	add	r8,r12
80002c82:	f1 6a ff e8 	st.b	r8[-24],r10
80002c86:	2f fc       	sub	r12,-1
80002c88:	5c 5c       	castu.b	r12
80002c8a:	f2 0c 18 00 	cp.b	r12,r9
80002c8e:	cf 71       	brne	80002c7c <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002c90:	f0 1f 00 15 	mcall	80002ce4 <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002c94:	30 08       	mov	r8,0
80002c96:	1b 89       	ld.ub	r9,sp[0x0]
80002c98:	f0 09 18 00 	cp.b	r9,r8
80002c9c:	c1 e0       	breq	80002cd8 <dip204_printf_string+0x7c>
80002c9e:	30 06       	mov	r6,0
80002ca0:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ca2:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002ca6:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ca8:	08 9c       	mov	r12,r4
80002caa:	f0 1f 00 10 	mcall	80002ce8 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002cae:	fa c8 ff e8 	sub	r8,sp,-24
80002cb2:	f0 06 00 06 	add	r6,r8,r6
80002cb6:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002cba:	f0 1f 00 0c 	mcall	80002ce8 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002cbe:	2f f7       	sub	r7,-1
80002cc0:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002cc2:	f0 1f 00 0b 	mcall	80002cec <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002cc6:	0e 96       	mov	r6,r7
80002cc8:	fa c8 ff e8 	sub	r8,sp,-24
80002ccc:	0e 08       	add	r8,r7
80002cce:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002cd2:	ea 08 18 00 	cp.b	r8,r5
80002cd6:	ce 91       	brne	80002ca8 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002cd8:	f0 1f 00 06 	mcall	80002cf0 <dip204_printf_string+0x94>
}
80002cdc:	2f ad       	sub	sp,-24
80002cde:	d8 22       	popm	r4-r7,pc
80002ce0:	80 00       	ld.sh	r0,r0[0x0]
80002ce2:	3c a4       	mov	r4,-54
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	2b 6c       	sub	r12,-74
80002ce8:	80 00       	ld.sh	r0,r0[0x0]
80002cea:	2b 80       	sub	r0,-72
80002cec:	80 00       	ld.sh	r0,r0[0x0]
80002cee:	2c 14       	sub	r4,-63
80002cf0:	80 00       	ld.sh	r0,r0[0x0]
80002cf2:	2c 48       	sub	r8,-60

80002cf4 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002cf4:	eb cd 40 c0 	pushm	r6-r7,lr
80002cf8:	18 96       	mov	r6,r12
80002cfa:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002cfc:	f0 1f 00 11 	mcall	80002d40 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002d00:	31 48       	mov	r8,20
80002d02:	f0 06 18 00 	cp.b	r6,r8
80002d06:	5f 89       	srls	r9
80002d08:	30 48       	mov	r8,4
80002d0a:	f0 07 18 00 	cp.b	r7,r8
80002d0e:	5f 88       	srls	r8
80002d10:	f3 e8 00 08 	and	r8,r9,r8
80002d14:	c0 31       	brne	80002d1a <dip204_set_cursor_position+0x26>
80002d16:	30 06       	mov	r6,0
80002d18:	c0 68       	rjmp	80002d24 <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002d1a:	28 16       	sub	r6,-127
80002d1c:	20 17       	sub	r7,1
80002d1e:	a5 77       	lsl	r7,0x5
80002d20:	0e 06       	add	r6,r7
80002d22:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002d24:	e0 6c 00 f8 	mov	r12,248
80002d28:	f0 1f 00 07 	mcall	80002d44 <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002d2c:	0c 9c       	mov	r12,r6
80002d2e:	f0 1f 00 06 	mcall	80002d44 <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002d32:	f0 1f 00 06 	mcall	80002d48 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002d36:	f0 1f 00 06 	mcall	80002d4c <dip204_set_cursor_position+0x58>
}
80002d3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d3e:	00 00       	add	r0,r0
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	2b 6c       	sub	r12,-74
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	2b 80       	sub	r0,-72
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2c 14       	sub	r4,-63
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2c 48       	sub	r8,-60

80002d50 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002d50:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002d52:	f0 1f 00 08 	mcall	80002d70 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002d56:	e0 6c 00 f8 	mov	r12,248
80002d5a:	f0 1f 00 07 	mcall	80002d74 <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002d5e:	30 cc       	mov	r12,12
80002d60:	f0 1f 00 05 	mcall	80002d74 <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002d64:	f0 1f 00 05 	mcall	80002d78 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002d68:	f0 1f 00 05 	mcall	80002d7c <dip204_hide_cursor+0x2c>
}
80002d6c:	d8 02       	popm	pc
80002d6e:	00 00       	add	r0,r0
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	2b 6c       	sub	r12,-74
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	2b 80       	sub	r0,-72
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2c 14       	sub	r4,-63
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	2c 48       	sub	r8,-60

80002d80 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002d80:	d4 01       	pushm	lr
  dip204_select();
80002d82:	f0 1f 00 13 	mcall	80002dcc <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002d86:	e0 6c 00 f8 	mov	r12,248
80002d8a:	f0 1f 00 12 	mcall	80002dd0 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002d8e:	30 1c       	mov	r12,1
80002d90:	f0 1f 00 10 	mcall	80002dd0 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d94:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d98:	e0 69 bb 80 	mov	r9,48000
80002d9c:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002da0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002da4:	14 38       	cp.w	r8,r10
80002da6:	e0 88 00 08 	brls	80002db6 <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002daa:	12 38       	cp.w	r8,r9
80002dac:	fe 98 ff fa 	brls	80002da0 <dip204_clear_display+0x20>
80002db0:	12 3a       	cp.w	r10,r9
80002db2:	c0 73       	brcs	80002dc0 <dip204_clear_display+0x40>
80002db4:	cf 6b       	rjmp	80002da0 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002db6:	12 38       	cp.w	r8,r9
80002db8:	e0 8b 00 04 	brhi	80002dc0 <dip204_clear_display+0x40>
80002dbc:	12 3a       	cp.w	r10,r9
80002dbe:	cf 12       	brcc	80002da0 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002dc0:	f0 1f 00 05 	mcall	80002dd4 <dip204_clear_display+0x54>
  dip204_unselect();
80002dc4:	f0 1f 00 05 	mcall	80002dd8 <dip204_clear_display+0x58>
}
80002dc8:	d8 02       	popm	pc
80002dca:	00 00       	add	r0,r0
80002dcc:	80 00       	ld.sh	r0,r0[0x0]
80002dce:	2b 6c       	sub	r12,-74
80002dd0:	80 00       	ld.sh	r0,r0[0x0]
80002dd2:	2b 80       	sub	r0,-72
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c 14       	sub	r4,-63
80002dd8:	80 00       	ld.sh	r0,r0[0x0]
80002dda:	2c 48       	sub	r8,-60

80002ddc <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002ddc:	eb cd 40 80 	pushm	r7,lr
80002de0:	20 4d       	sub	sp,16
80002de2:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002de4:	58 1c       	cp.w	r12,1
80002de6:	c3 01       	brne	80002e46 <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002de8:	30 69       	mov	r9,6
80002dea:	4f a8       	lddpc	r8,80002fd0 <dip204_init+0x1f4>
80002dec:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002dee:	30 2b       	mov	r11,2
80002df0:	33 2c       	mov	r12,50
80002df2:	f0 1f 00 79 	mcall	80002fd4 <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002df6:	30 08       	mov	r8,0
80002df8:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002dfa:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002dfc:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002dfe:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002e00:	1a 9c       	mov	r12,sp
80002e02:	f0 1f 00 76 	mcall	80002fd8 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002e06:	58 07       	cp.w	r7,0
80002e08:	f9 b7 01 31 	movne	r7,49
80002e0c:	f9 b7 00 01 	moveq	r7,1
80002e10:	4f 38       	lddpc	r8,80002fdc <dip204_init+0x200>
80002e12:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002e14:	4f 3b       	lddpc	r11,80002fe0 <dip204_init+0x204>
80002e16:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002e18:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002e1c:	ab a8       	sbr	r8,0xa
80002e1e:	30 89       	mov	r9,8
80002e20:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002e24:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002e26:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002e28:	33 28       	mov	r8,50
80002e2a:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002e2c:	30 08       	mov	r8,0
80002e2e:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002e30:	4e 87       	lddpc	r7,80002fd0 <dip204_init+0x1f4>
80002e32:	6e 0c       	ld.w	r12,r7[0x0]
80002e34:	f0 1f 00 6c 	mcall	80002fe4 <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002e38:	6e 08       	ld.w	r8,r7[0x0]
80002e3a:	30 1c       	mov	r12,1
80002e3c:	f8 08 09 4c 	lsl	r12,r12,r8
80002e40:	f0 1f 00 6a 	mcall	80002fe8 <dip204_init+0x20c>
80002e44:	c0 a8       	rjmp	80002e58 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80002e46:	58 0b       	cp.w	r11,0
80002e48:	c0 50       	breq	80002e52 <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002e4a:	33 2c       	mov	r12,50
80002e4c:	f0 1f 00 68 	mcall	80002fec <dip204_init+0x210>
80002e50:	c0 48       	rjmp	80002e58 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002e52:	33 2c       	mov	r12,50
80002e54:	f0 1f 00 67 	mcall	80002ff0 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002e58:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002e5c:	e2 79 a9 80 	mov	r9,240000
80002e60:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e64:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e68:	14 38       	cp.w	r8,r10
80002e6a:	e0 88 00 08 	brls	80002e7a <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e6e:	12 38       	cp.w	r8,r9
80002e70:	fe 98 ff fa 	brls	80002e64 <dip204_init+0x88>
80002e74:	12 3a       	cp.w	r10,r9
80002e76:	c6 e3       	brcs	80002f52 <dip204_init+0x176>
80002e78:	cf 6b       	rjmp	80002e64 <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e7a:	12 38       	cp.w	r8,r9
80002e7c:	e0 8b 00 6b 	brhi	80002f52 <dip204_init+0x176>
80002e80:	12 3a       	cp.w	r10,r9
80002e82:	c6 83       	brcs	80002f52 <dip204_init+0x176>
80002e84:	cf 0b       	rjmp	80002e64 <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002e86:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002e8a:	14 38       	cp.w	r8,r10
80002e8c:	e0 88 00 08 	brls	80002e9c <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002e90:	12 38       	cp.w	r8,r9
80002e92:	fe 98 ff fa 	brls	80002e86 <dip204_init+0xaa>
80002e96:	12 3a       	cp.w	r10,r9
80002e98:	c6 b3       	brcs	80002f6e <dip204_init+0x192>
80002e9a:	cf 6b       	rjmp	80002e86 <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002e9c:	12 38       	cp.w	r8,r9
80002e9e:	e0 8b 00 68 	brhi	80002f6e <dip204_init+0x192>
80002ea2:	12 3a       	cp.w	r10,r9
80002ea4:	c6 53       	brcs	80002f6e <dip204_init+0x192>
80002ea6:	cf 0b       	rjmp	80002e86 <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ea8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002eac:	14 38       	cp.w	r8,r10
80002eae:	e0 88 00 08 	brls	80002ebe <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002eb2:	12 38       	cp.w	r8,r9
80002eb4:	fe 98 ff fa 	brls	80002ea8 <dip204_init+0xcc>
80002eb8:	12 3a       	cp.w	r10,r9
80002eba:	c6 23       	brcs	80002f7e <dip204_init+0x1a2>
80002ebc:	cf 6b       	rjmp	80002ea8 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ebe:	12 38       	cp.w	r8,r9
80002ec0:	e0 8b 00 5f 	brhi	80002f7e <dip204_init+0x1a2>
80002ec4:	12 3a       	cp.w	r10,r9
80002ec6:	c5 c3       	brcs	80002f7e <dip204_init+0x1a2>
80002ec8:	cf 0b       	rjmp	80002ea8 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002eca:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ece:	14 38       	cp.w	r8,r10
80002ed0:	e0 88 00 08 	brls	80002ee0 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ed4:	12 38       	cp.w	r8,r9
80002ed6:	fe 98 ff fa 	brls	80002eca <dip204_init+0xee>
80002eda:	12 3a       	cp.w	r10,r9
80002edc:	c5 93       	brcs	80002f8e <dip204_init+0x1b2>
80002ede:	cf 6b       	rjmp	80002eca <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ee0:	12 38       	cp.w	r8,r9
80002ee2:	e0 8b 00 56 	brhi	80002f8e <dip204_init+0x1b2>
80002ee6:	12 3a       	cp.w	r10,r9
80002ee8:	c5 33       	brcs	80002f8e <dip204_init+0x1b2>
80002eea:	cf 0b       	rjmp	80002eca <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002eec:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ef0:	14 38       	cp.w	r8,r10
80002ef2:	e0 88 00 08 	brls	80002f02 <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ef6:	12 38       	cp.w	r8,r9
80002ef8:	fe 98 ff fa 	brls	80002eec <dip204_init+0x110>
80002efc:	12 3a       	cp.w	r10,r9
80002efe:	c5 03       	brcs	80002f9e <dip204_init+0x1c2>
80002f00:	cf 6b       	rjmp	80002eec <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f02:	12 38       	cp.w	r8,r9
80002f04:	e0 8b 00 4d 	brhi	80002f9e <dip204_init+0x1c2>
80002f08:	12 3a       	cp.w	r10,r9
80002f0a:	c4 a3       	brcs	80002f9e <dip204_init+0x1c2>
80002f0c:	cf 0b       	rjmp	80002eec <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f0e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f12:	14 38       	cp.w	r8,r10
80002f14:	e0 88 00 08 	brls	80002f24 <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f18:	12 38       	cp.w	r8,r9
80002f1a:	fe 98 ff fa 	brls	80002f0e <dip204_init+0x132>
80002f1e:	12 3a       	cp.w	r10,r9
80002f20:	c4 93       	brcs	80002fb2 <dip204_init+0x1d6>
80002f22:	cf 6b       	rjmp	80002f0e <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f24:	12 38       	cp.w	r8,r9
80002f26:	e0 8b 00 46 	brhi	80002fb2 <dip204_init+0x1d6>
80002f2a:	12 3a       	cp.w	r10,r9
80002f2c:	c4 33       	brcs	80002fb2 <dip204_init+0x1d6>
80002f2e:	cf 0b       	rjmp	80002f0e <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002f30:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002f34:	14 38       	cp.w	r8,r10
80002f36:	e0 88 00 08 	brls	80002f46 <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002f3a:	12 38       	cp.w	r8,r9
80002f3c:	fe 98 ff fa 	brls	80002f30 <dip204_init+0x154>
80002f40:	12 3a       	cp.w	r10,r9
80002f42:	c4 03       	brcs	80002fc2 <dip204_init+0x1e6>
80002f44:	cf 6b       	rjmp	80002f30 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002f46:	12 38       	cp.w	r8,r9
80002f48:	e0 8b 00 3d 	brhi	80002fc2 <dip204_init+0x1e6>
80002f4c:	12 3a       	cp.w	r10,r9
80002f4e:	c3 a3       	brcs	80002fc2 <dip204_init+0x1e6>
80002f50:	cf 0b       	rjmp	80002f30 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002f52:	f0 1f 00 29 	mcall	80002ff4 <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002f56:	e0 6c 00 f8 	mov	r12,248
80002f5a:	f0 1f 00 28 	mcall	80002ff8 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002f5e:	33 4c       	mov	r12,52
80002f60:	f0 1f 00 26 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f64:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f68:	f0 ca d1 20 	sub	r10,r8,-12000
80002f6c:	c8 db       	rjmp	80002e86 <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002f6e:	30 9c       	mov	r12,9
80002f70:	f0 1f 00 22 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f74:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f78:	f0 ca d1 20 	sub	r10,r8,-12000
80002f7c:	c9 6b       	rjmp	80002ea8 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002f7e:	33 0c       	mov	r12,48
80002f80:	f0 1f 00 1e 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f84:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f88:	f0 ca d1 20 	sub	r10,r8,-12000
80002f8c:	c9 fb       	rjmp	80002eca <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002f8e:	30 fc       	mov	r12,15
80002f90:	f0 1f 00 1a 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002f94:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002f98:	f0 ca d1 20 	sub	r10,r8,-12000
80002f9c:	ca 8b       	rjmp	80002eec <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002f9e:	30 1c       	mov	r12,1
80002fa0:	f0 1f 00 16 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fa4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fa8:	e0 69 ea 60 	mov	r9,60000
80002fac:	f0 09 00 0a 	add	r10,r8,r9
80002fb0:	ca fb       	rjmp	80002f0e <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002fb2:	30 6c       	mov	r12,6
80002fb4:	f0 1f 00 11 	mcall	80002ff8 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002fb8:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002fbc:	f0 ca d1 20 	sub	r10,r8,-12000
80002fc0:	cb 8b       	rjmp	80002f30 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002fc2:	f0 1f 00 0f 	mcall	80002ffc <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80002fc6:	f0 1f 00 0f 	mcall	80003000 <dip204_init+0x224>
}
80002fca:	2f cd       	sub	sp,-16
80002fcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fd0:	00 00       	add	r0,r0
80002fd2:	00 0c       	add	r12,r0
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	30 04       	mov	r4,0
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	32 50       	mov	r0,37
80002fdc:	00 00       	add	r0,r0
80002fde:	05 38       	ld.ub	r8,r2++
80002fe0:	00 00       	add	r0,r0
80002fe2:	05 18       	ld.sh	r8,r2++
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	32 08       	mov	r8,32
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	32 3e       	mov	lr,35
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	30 a4       	mov	r4,10
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	30 88       	mov	r8,8
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	2b 6c       	sub	r12,-74
80002ff8:	80 00       	ld.sh	r0,r0[0x0]
80002ffa:	2b 80       	sub	r0,-72
80002ffc:	80 00       	ld.sh	r0,r0[0x0]
80002ffe:	2c 14       	sub	r4,-63
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	2c 48       	sub	r8,-60

80003004 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003004:	f8 08 16 05 	lsr	r8,r12,0x5
80003008:	a9 68       	lsl	r8,0x8
8000300a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000300e:	58 1b       	cp.w	r11,1
80003010:	c0 d0       	breq	8000302a <gpio_enable_module_pin+0x26>
80003012:	c0 63       	brcs	8000301e <gpio_enable_module_pin+0x1a>
80003014:	58 2b       	cp.w	r11,2
80003016:	c1 00       	breq	80003036 <gpio_enable_module_pin+0x32>
80003018:	58 3b       	cp.w	r11,3
8000301a:	c1 40       	breq	80003042 <gpio_enable_module_pin+0x3e>
8000301c:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000301e:	30 19       	mov	r9,1
80003020:	f2 0c 09 49 	lsl	r9,r9,r12
80003024:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003026:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003028:	c1 28       	rjmp	8000304c <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000302a:	30 19       	mov	r9,1
8000302c:	f2 0c 09 49 	lsl	r9,r9,r12
80003030:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003032:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003034:	c0 c8       	rjmp	8000304c <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003036:	30 19       	mov	r9,1
80003038:	f2 0c 09 49 	lsl	r9,r9,r12
8000303c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000303e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003040:	c0 68       	rjmp	8000304c <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003042:	30 19       	mov	r9,1
80003044:	f2 0c 09 49 	lsl	r9,r9,r12
80003048:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000304a:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000304c:	30 19       	mov	r9,1
8000304e:	f2 0c 09 4c 	lsl	r12,r9,r12
80003052:	91 2c       	st.w	r8[0x8],r12
80003054:	5e fd       	retal	0
80003056:	d7 03       	nop

80003058 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003058:	d4 21       	pushm	r4-r7,lr
8000305a:	18 97       	mov	r7,r12
8000305c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000305e:	58 0b       	cp.w	r11,0
80003060:	c0 31       	brne	80003066 <gpio_enable_module+0xe>
80003062:	30 05       	mov	r5,0
80003064:	c0 d8       	rjmp	8000307e <gpio_enable_module+0x26>
80003066:	30 06       	mov	r6,0
80003068:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000306a:	6e 1b       	ld.w	r11,r7[0x4]
8000306c:	6e 0c       	ld.w	r12,r7[0x0]
8000306e:	f0 1f 00 06 	mcall	80003084 <gpio_enable_module+0x2c>
80003072:	18 45       	or	r5,r12
		gpiomap++;
80003074:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003076:	2f f6       	sub	r6,-1
80003078:	0c 34       	cp.w	r4,r6
8000307a:	fe 9b ff f8 	brhi	8000306a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000307e:	0a 9c       	mov	r12,r5
80003080:	d8 22       	popm	r4-r7,pc
80003082:	00 00       	add	r0,r0
80003084:	80 00       	ld.sh	r0,r0[0x0]
80003086:	30 04       	mov	r4,0

80003088 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003088:	f8 08 16 05 	lsr	r8,r12,0x5
8000308c:	a9 68       	lsl	r8,0x8
8000308e:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003092:	30 19       	mov	r9,1
80003094:	f2 0c 09 4c 	lsl	r12,r9,r12
80003098:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000309c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800030a0:	91 1c       	st.w	r8[0x4],r12
}
800030a2:	5e fc       	retal	r12

800030a4 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800030a4:	f8 08 16 05 	lsr	r8,r12,0x5
800030a8:	a9 68       	lsl	r8,0x8
800030aa:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800030ae:	30 19       	mov	r9,1
800030b0:	f2 0c 09 4c 	lsl	r12,r9,r12
800030b4:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800030b8:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800030bc:	91 1c       	st.w	r8[0x4],r12
}
800030be:	5e fc       	retal	r12

800030c0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800030c0:	c0 08       	rjmp	800030c0 <_unhandled_interrupt>
800030c2:	d7 03       	nop

800030c4 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800030c4:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800030c6:	49 18       	lddpc	r8,80003108 <INTC_init_interrupts+0x44>
800030c8:	e3 b8 00 01 	mtsr	0x4,r8
800030cc:	49 0e       	lddpc	lr,8000310c <INTC_init_interrupts+0x48>
800030ce:	30 07       	mov	r7,0
800030d0:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800030d2:	49 0c       	lddpc	r12,80003110 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800030d4:	49 05       	lddpc	r5,80003114 <INTC_init_interrupts+0x50>
800030d6:	10 15       	sub	r5,r8
800030d8:	fe 76 08 00 	mov	r6,-63488
800030dc:	c1 08       	rjmp	800030fc <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800030de:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800030e0:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800030e2:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800030e4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800030e8:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800030ea:	10 3a       	cp.w	r10,r8
800030ec:	fe 9b ff fc 	brhi	800030e4 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800030f0:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800030f4:	2f f7       	sub	r7,-1
800030f6:	2f 8e       	sub	lr,-8
800030f8:	59 47       	cp.w	r7,20
800030fa:	c0 50       	breq	80003104 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800030fc:	7c 08       	ld.w	r8,lr[0x0]
800030fe:	58 08       	cp.w	r8,0
80003100:	ce f1       	brne	800030de <INTC_init_interrupts+0x1a>
80003102:	cf 7b       	rjmp	800030f0 <INTC_init_interrupts+0x2c>
80003104:	d8 22       	popm	r4-r7,pc
80003106:	00 00       	add	r0,r0
80003108:	80 00       	ld.sh	r0,r0[0x0]
8000310a:	90 00       	ld.sh	r0,r8[0x0]
8000310c:	80 00       	ld.sh	r0,r0[0x0]
8000310e:	93 1c       	st.w	r9[0x4],r12
80003110:	80 00       	ld.sh	r0,r0[0x0]
80003112:	30 c0       	mov	r0,12
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	91 04       	st.w	r8[0x0],r4

80003118 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003118:	fe 78 08 00 	mov	r8,-63488
8000311c:	e0 69 00 83 	mov	r9,131
80003120:	f2 0c 01 0c 	sub	r12,r9,r12
80003124:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003128:	f2 ca ff c0 	sub	r10,r9,-64
8000312c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003130:	58 08       	cp.w	r8,0
80003132:	c0 21       	brne	80003136 <_get_interrupt_handler+0x1e>
80003134:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003136:	f0 08 12 00 	clz	r8,r8
8000313a:	48 5a       	lddpc	r10,8000314c <_get_interrupt_handler+0x34>
8000313c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003140:	f0 08 11 1f 	rsub	r8,r8,31
80003144:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003146:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000314a:	5e fc       	retal	r12
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	93 1c       	st.w	r9[0x4],r12

80003150 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003150:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003152:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003156:	99 a8       	st.w	r12[0x28],r8
}
80003158:	5e fc       	retal	r12
8000315a:	d7 03       	nop

8000315c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000315c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000315e:	ec 5b bb 9f 	cp.w	r11,899999
80003162:	e0 8b 00 04 	brhi	8000316a <pm_enable_osc0_crystal+0xe>
80003166:	30 4b       	mov	r11,4
80003168:	c1 38       	rjmp	8000318e <pm_enable_osc0_crystal+0x32>
8000316a:	e0 68 c6 bf 	mov	r8,50879
8000316e:	ea 18 00 2d 	orh	r8,0x2d
80003172:	10 3b       	cp.w	r11,r8
80003174:	e0 8b 00 04 	brhi	8000317c <pm_enable_osc0_crystal+0x20>
80003178:	30 5b       	mov	r11,5
8000317a:	c0 a8       	rjmp	8000318e <pm_enable_osc0_crystal+0x32>
8000317c:	e0 68 12 00 	mov	r8,4608
80003180:	ea 18 00 7a 	orh	r8,0x7a
80003184:	10 3b       	cp.w	r11,r8
80003186:	f9 bb 03 06 	movlo	r11,6
8000318a:	f9 bb 02 07 	movhs	r11,7
8000318e:	f0 1f 00 02 	mcall	80003194 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003192:	d8 02       	popm	pc
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	31 50       	mov	r0,21

80003198 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003198:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
8000319a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000319e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800031a0:	78 08       	ld.w	r8,r12[0x0]
800031a2:	a3 a8       	sbr	r8,0x2
800031a4:	99 08       	st.w	r12[0x0],r8
}
800031a6:	5e fc       	retal	r12

800031a8 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800031a8:	79 58       	ld.w	r8,r12[0x54]
800031aa:	e2 18 00 80 	andl	r8,0x80,COH
800031ae:	cf d0       	breq	800031a8 <pm_wait_for_clk0_ready>
}
800031b0:	5e fc       	retal	r12
800031b2:	d7 03       	nop

800031b4 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800031b4:	eb cd 40 80 	pushm	r7,lr
800031b8:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
800031ba:	f0 1f 00 04 	mcall	800031c8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
800031be:	0e 9c       	mov	r12,r7
800031c0:	f0 1f 00 03 	mcall	800031cc <pm_enable_clk0+0x18>
}
800031c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800031c8:	80 00       	ld.sh	r0,r0[0x0]
800031ca:	31 98       	mov	r8,25
800031cc:	80 00       	ld.sh	r0,r0[0x0]
800031ce:	31 a8       	mov	r8,26

800031d0 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800031d0:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800031d2:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800031d6:	99 08       	st.w	r12[0x0],r8
}
800031d8:	5e fc       	retal	r12
800031da:	d7 03       	nop

800031dc <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800031dc:	eb cd 40 c0 	pushm	r6-r7,lr
800031e0:	18 97       	mov	r7,r12
800031e2:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800031e4:	f0 1f 00 06 	mcall	800031fc <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800031e8:	0c 9b       	mov	r11,r6
800031ea:	0e 9c       	mov	r12,r7
800031ec:	f0 1f 00 05 	mcall	80003200 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800031f0:	30 1b       	mov	r11,1
800031f2:	0e 9c       	mov	r12,r7
800031f4:	f0 1f 00 04 	mcall	80003204 <pm_switch_to_osc0+0x28>
}
800031f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031fc:	80 00       	ld.sh	r0,r0[0x0]
800031fe:	31 5c       	mov	r12,21
80003200:	80 00       	ld.sh	r0,r0[0x0]
80003202:	31 b4       	mov	r4,27
80003204:	80 00       	ld.sh	r0,r0[0x0]
80003206:	31 d0       	mov	r0,29

80003208 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003208:	58 0b       	cp.w	r11,0
8000320a:	c1 90       	breq	8000323c <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
8000320c:	58 6c       	cp.w	r12,6
8000320e:	e0 8b 00 17 	brhi	8000323c <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003212:	76 0a       	ld.w	r10,r11[0x0]
80003214:	fe 78 30 00 	mov	r8,-53248
80003218:	f8 c9 ff f0 	sub	r9,r12,-16
8000321c:	a5 79       	lsl	r9,0x5
8000321e:	f0 09 00 09 	add	r9,r8,r9
80003222:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003224:	76 19       	ld.w	r9,r11[0x4]
80003226:	a5 7c       	lsl	r12,0x5
80003228:	f0 0c 00 0c 	add	r12,r8,r12
8000322c:	f8 c8 fd fc 	sub	r8,r12,-516
80003230:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003232:	76 28       	ld.w	r8,r11[0x8]
80003234:	f8 cc fd f8 	sub	r12,r12,-520
80003238:	99 08       	st.w	r12[0x0],r8
8000323a:	5e fd       	retal	0

  return PWM_SUCCESS;
8000323c:	5e ff       	retal	1

8000323e <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000323e:	18 98       	mov	r8,r12
80003240:	e0 18 ff 80 	andl	r8,0xff80
80003244:	c0 20       	breq	80003248 <pwm_start_channels+0xa>
80003246:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003248:	fe 78 30 00 	mov	r8,-53248
8000324c:	91 1c       	st.w	r8[0x4],r12
8000324e:	5e fd       	retal	0

80003250 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003250:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
80003254:	58 0c       	cp.w	r12,0
80003256:	c0 21       	brne	8000325a <pwm_init+0xa>
80003258:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000325a:	e6 18 00 01 	andh	r8,0x1,COH
8000325e:	c0 91       	brne	80003270 <pwm_init+0x20>
80003260:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003262:	fe 78 30 00 	mov	r8,-53248
80003266:	37 f9       	mov	r9,127
80003268:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000326a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000326c:	d5 03       	csrf	0x10
8000326e:	c0 68       	rjmp	8000327a <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003270:	fe 78 30 00 	mov	r8,-53248
80003274:	37 f9       	mov	r9,127
80003276:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003278:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000327a:	78 08       	ld.w	r8,r12[0x0]
8000327c:	78 39       	ld.w	r9,r12[0xc]
8000327e:	a9 69       	lsl	r9,0x8
80003280:	f3 e8 11 09 	or	r9,r9,r8<<0x10
80003284:	78 18       	ld.w	r8,r12[0x4]
80003286:	10 49       	or	r9,r8
80003288:	78 28       	ld.w	r8,r12[0x8]
8000328a:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000328e:	fe 78 30 00 	mov	r8,-53248
80003292:	91 09       	st.w	r8[0x0],r9
80003294:	5e fd       	retal	0

80003296 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003296:	f8 c8 00 01 	sub	r8,r12,1
8000329a:	f0 0b 00 0b 	add	r11,r8,r11
8000329e:	f6 0c 0d 0a 	divu	r10,r11,r12
800032a2:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800032a4:	f4 c8 00 01 	sub	r8,r10,1
800032a8:	e0 48 00 fe 	cp.w	r8,254
800032ac:	e0 88 00 03 	brls	800032b2 <getBaudDiv+0x1c>
800032b0:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800032b2:	5c 8c       	casts.h	r12
}
800032b4:	5e fc       	retal	r12

800032b6 <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800032b6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800032ba:	30 18       	mov	r8,1
800032bc:	f0 09 18 00 	cp.b	r9,r8
800032c0:	e0 88 00 04 	brls	800032c8 <spi_initMaster+0x12>
800032c4:	30 2c       	mov	r12,2
800032c6:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800032c8:	e0 68 00 80 	mov	r8,128
800032cc:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800032ce:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800032d0:	30 19       	mov	r9,1
800032d2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800032d6:	f7 39 00 0d 	ld.ub	r9,r11[13]
800032da:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800032de:	30 09       	mov	r9,0
800032e0:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800032e4:	30 fa       	mov	r10,15
800032e6:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
800032ea:	99 18       	st.w	r12[0x4],r8
800032ec:	5e f9       	retal	r9

800032ee <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800032ee:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800032f0:	30 18       	mov	r8,1
800032f2:	f0 0b 18 00 	cp.b	r11,r8
800032f6:	5f be       	srhi	lr
800032f8:	f0 0a 18 00 	cp.b	r10,r8
800032fc:	5f b8       	srhi	r8
800032fe:	fd e8 10 08 	or	r8,lr,r8
80003302:	c0 30       	breq	80003308 <spi_selectionMode+0x1a>
80003304:	30 2c       	mov	r12,2
80003306:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003308:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
8000330a:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000330e:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80003312:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80003316:	99 18       	st.w	r12[0x4],r8
80003318:	d8 0a       	popm	pc,r12=0

8000331a <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000331a:	78 18       	ld.w	r8,r12[0x4]
8000331c:	ea 18 00 0f 	orh	r8,0xf
80003320:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003322:	78 18       	ld.w	r8,r12[0x4]
80003324:	e2 18 00 04 	andl	r8,0x4,COH
80003328:	c0 f0       	breq	80003346 <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000332a:	30 e8       	mov	r8,14
8000332c:	f0 0b 18 00 	cp.b	r11,r8
80003330:	e0 8b 00 19 	brhi	80003362 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003334:	78 18       	ld.w	r8,r12[0x4]
80003336:	b1 6b       	lsl	r11,0x10
80003338:	ea 1b ff f0 	orh	r11,0xfff0
8000333c:	e8 1b ff ff 	orl	r11,0xffff
80003340:	10 6b       	and	r11,r8
80003342:	99 1b       	st.w	r12[0x4],r11
80003344:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003346:	30 38       	mov	r8,3
80003348:	f0 0b 18 00 	cp.b	r11,r8
8000334c:	e0 8b 00 0b 	brhi	80003362 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003350:	78 18       	ld.w	r8,r12[0x4]
80003352:	2f 0b       	sub	r11,-16
80003354:	30 19       	mov	r9,1
80003356:	f2 0b 09 4b 	lsl	r11,r9,r11
8000335a:	5c db       	com	r11
8000335c:	10 6b       	and	r11,r8
8000335e:	99 1b       	st.w	r12[0x4],r11
80003360:	5e fd       	retal	0
80003362:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80003364:	5e fc       	retal	r12

80003366 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003366:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000336a:	c0 58       	rjmp	80003374 <spi_unselectChip+0xe>
		if (!timeout--) {
8000336c:	58 08       	cp.w	r8,0
8000336e:	c0 21       	brne	80003372 <spi_unselectChip+0xc>
80003370:	5e ff       	retal	1
80003372:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003374:	78 49       	ld.w	r9,r12[0x10]
80003376:	e2 19 02 00 	andl	r9,0x200,COH
8000337a:	cf 90       	breq	8000336c <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000337c:	78 18       	ld.w	r8,r12[0x4]
8000337e:	ea 18 00 0f 	orh	r8,0xf
80003382:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003384:	fc 18 01 00 	movh	r8,0x100
80003388:	99 08       	st.w	r12[0x0],r8
8000338a:	5e fd       	retal	0

8000338c <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000338c:	eb cd 40 f8 	pushm	r3-r7,lr
80003390:	18 95       	mov	r5,r12
80003392:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003394:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003398:	30 38       	mov	r8,3
8000339a:	f0 06 18 00 	cp.b	r6,r8
8000339e:	e0 8b 00 4d 	brhi	80003438 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800033a2:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800033a6:	30 18       	mov	r8,1
800033a8:	f0 04 18 00 	cp.b	r4,r8
800033ac:	e0 8b 00 46 	brhi	80003438 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800033b0:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800033b4:	30 78       	mov	r8,7
800033b6:	f0 03 18 00 	cp.b	r3,r8
800033ba:	e0 88 00 3f 	brls	80003438 <spi_setupChipReg+0xac>
800033be:	31 08       	mov	r8,16
800033c0:	f0 03 18 00 	cp.b	r3,r8
800033c4:	e0 8b 00 3a 	brhi	80003438 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800033c8:	14 9b       	mov	r11,r10
800033ca:	6e 1c       	ld.w	r12,r7[0x4]
800033cc:	f0 1f 00 1d 	mcall	80003440 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800033d0:	c3 45       	brlt	80003438 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800033d2:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800033d4:	ec 09 16 01 	lsr	r9,r6,0x1
800033d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800033dc:	ec 16 00 01 	eorl	r6,0x1
800033e0:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800033e4:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800033e8:	20 83       	sub	r3,8
800033ea:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800033ee:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800033f2:	ef 39 00 09 	ld.ub	r9,r7[9]
800033f6:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800033fa:	ef 39 00 0a 	ld.ub	r9,r7[10]
800033fe:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
80003402:	0f 89       	ld.ub	r9,r7[0x0]
80003404:	30 1a       	mov	r10,1
80003406:	f4 09 18 00 	cp.b	r9,r10
8000340a:	c0 e0       	breq	80003426 <spi_setupChipReg+0x9a>
8000340c:	c0 a3       	brcs	80003420 <spi_setupChipReg+0x94>
8000340e:	30 2a       	mov	r10,2
80003410:	f4 09 18 00 	cp.b	r9,r10
80003414:	c0 c0       	breq	8000342c <spi_setupChipReg+0xa0>
80003416:	30 3a       	mov	r10,3
80003418:	f4 09 18 00 	cp.b	r9,r10
8000341c:	c0 e1       	brne	80003438 <spi_setupChipReg+0xac>
8000341e:	c0 a8       	rjmp	80003432 <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003420:	8b c8       	st.w	r5[0x30],r8
80003422:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003426:	8b d8       	st.w	r5[0x34],r8
80003428:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000342c:	8b e8       	st.w	r5[0x38],r8
8000342e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003432:	8b f8       	st.w	r5[0x3c],r8
80003434:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003438:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
8000343a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000343e:	00 00       	add	r0,r0
80003440:	80 00       	ld.sh	r0,r0[0x0]
80003442:	32 96       	mov	r6,41

80003444 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003444:	30 18       	mov	r8,1
80003446:	99 08       	st.w	r12[0x0],r8
}
80003448:	5e fc       	retal	r12

8000344a <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000344a:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000344e:	c0 58       	rjmp	80003458 <spi_write+0xe>
		if (!timeout--) {
80003450:	58 08       	cp.w	r8,0
80003452:	c0 21       	brne	80003456 <spi_write+0xc>
80003454:	5e ff       	retal	1
80003456:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003458:	78 49       	ld.w	r9,r12[0x10]
8000345a:	e2 19 00 02 	andl	r9,0x2,COH
8000345e:	cf 90       	breq	80003450 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003460:	5c 7b       	castu.h	r11
80003462:	99 3b       	st.w	r12[0xc],r11
80003464:	5e fd       	retal	0

80003466 <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80003466:	78 4c       	ld.w	r12,r12[0x10]
}
80003468:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000346c:	5e fc       	retal	r12

8000346e <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000346e:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003472:	c0 58       	rjmp	8000347c <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003474:	58 08       	cp.w	r8,0
80003476:	c0 21       	brne	8000347a <spi_read+0xc>
80003478:	5e ff       	retal	1
8000347a:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000347c:	78 49       	ld.w	r9,r12[0x10]
8000347e:	e2 19 02 01 	andl	r9,0x201,COH
80003482:	e0 49 02 01 	cp.w	r9,513
80003486:	cf 71       	brne	80003474 <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003488:	78 28       	ld.w	r8,r12[0x8]
8000348a:	b6 08       	st.h	r11[0x0],r8
8000348c:	5e fd       	retal	0
8000348e:	d7 03       	nop

80003490 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003490:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003494:	fe c0 a4 94 	sub	r0,pc,-23404

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003498:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000349c:	d5 53       	csrf	0x15
  cp      r0, r1
8000349e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800034a0:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800034a4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800034a6:	c0 72       	brcc	800034b4 <idata_load_loop_end>
  cp      r0, r1
800034a8:	fe c2 9b 60 	sub	r2,pc,-25760

800034ac <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800034ac:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800034ae:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800034b0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800034b2:	cf d3       	brcs	800034ac <idata_load_loop>

800034b4 <idata_load_loop_end>:
  mov     r2, 0
800034b4:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800034b8:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
800034bc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800034be:	c0 62       	brcc	800034ca <udata_clear_loop_end>
800034c0:	30 02       	mov	r2,0
800034c2:	30 03       	mov	r3,0

800034c4 <udata_clear_loop>:
800034c4:	a1 22       	st.d	r0++,r2
800034c6:	02 30       	cp.w	r0,r1
800034c8:	cf e3       	brcs	800034c4 <udata_clear_loop>

800034ca <udata_clear_loop_end>:
800034ca:	fe cf 0b de 	sub	pc,pc,3038
800034ce:	d7 03       	nop

800034d0 <__avr32_f64_mul>:
800034d0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800034d4:	e0 80 00 dc 	breq	8000368c <__avr32_f64_mul_op1_zero>
800034d8:	d4 21       	pushm	r4-r7,lr
800034da:	f7 e9 20 0e 	eor	lr,r11,r9
800034de:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800034e2:	30 15       	mov	r5,1
800034e4:	c4 30       	breq	8000356a <__avr32_f64_mul_op1_subnormal>
800034e6:	ab 6b       	lsl	r11,0xa
800034e8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800034ec:	ab 6a       	lsl	r10,0xa
800034ee:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800034f2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800034f6:	c5 c0       	breq	800035ae <__avr32_f64_mul_op2_subnormal>
800034f8:	a1 78       	lsl	r8,0x1
800034fa:	5c f9       	rol	r9
800034fc:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80003500:	e0 47 07 ff 	cp.w	r7,2047
80003504:	c7 70       	breq	800035f2 <__avr32_f64_mul_op_nan_or_inf>
80003506:	e0 46 07 ff 	cp.w	r6,2047
8000350a:	c7 40       	breq	800035f2 <__avr32_f64_mul_op_nan_or_inf>
8000350c:	ee 06 00 0c 	add	r12,r7,r6
80003510:	e0 2c 03 fe 	sub	r12,1022
80003514:	f6 08 06 44 	mulu.d	r4,r11,r8
80003518:	f4 09 07 44 	macu.d	r4,r10,r9
8000351c:	f4 08 06 46 	mulu.d	r6,r10,r8
80003520:	f6 09 06 4a 	mulu.d	r10,r11,r9
80003524:	08 07       	add	r7,r4
80003526:	f4 05 00 4a 	adc	r10,r10,r5
8000352a:	5c 0b       	acr	r11
8000352c:	ed bb 00 14 	bld	r11,0x14
80003530:	c0 50       	breq	8000353a <__avr32_f64_mul+0x6a>
80003532:	a1 77       	lsl	r7,0x1
80003534:	5c fa       	rol	r10
80003536:	5c fb       	rol	r11
80003538:	20 1c       	sub	r12,1
8000353a:	58 0c       	cp.w	r12,0
8000353c:	e0 8a 00 6f 	brle	8000361a <__avr32_f64_mul_res_subnormal>
80003540:	e0 4c 07 ff 	cp.w	r12,2047
80003544:	e0 84 00 9c 	brge	8000367c <__avr32_f64_mul_res_inf>
80003548:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000354c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80003550:	ef e6 12 17 	or	r7,r7,r6>>0x1
80003554:	ee 17 80 00 	eorh	r7,0x8000
80003558:	f1 b7 04 20 	satu	r7,0x1
8000355c:	0e 0a       	add	r10,r7
8000355e:	5c 0b       	acr	r11
80003560:	ed be 00 1f 	bld	lr,0x1f
80003564:	ef bb 00 1f 	bst	r11,0x1f
80003568:	d8 22       	popm	r4-r7,pc

8000356a <__avr32_f64_mul_op1_subnormal>:
8000356a:	e4 1b 00 0f 	andh	r11,0xf
8000356e:	f4 0c 12 00 	clz	r12,r10
80003572:	f6 06 12 00 	clz	r6,r11
80003576:	f7 bc 03 e1 	sublo	r12,-31
8000357a:	f8 06 17 30 	movlo	r6,r12
8000357e:	f7 b6 02 01 	subhs	r6,1
80003582:	e0 46 00 20 	cp.w	r6,32
80003586:	c0 d4       	brge	800035a0 <__avr32_f64_mul_op1_subnormal+0x36>
80003588:	ec 0c 11 20 	rsub	r12,r6,32
8000358c:	f6 06 09 4b 	lsl	r11,r11,r6
80003590:	f4 0c 0a 4c 	lsr	r12,r10,r12
80003594:	18 4b       	or	r11,r12
80003596:	f4 06 09 4a 	lsl	r10,r10,r6
8000359a:	20 b6       	sub	r6,11
8000359c:	0c 17       	sub	r7,r6
8000359e:	ca ab       	rjmp	800034f2 <__avr32_f64_mul+0x22>
800035a0:	f4 06 09 4b 	lsl	r11,r10,r6
800035a4:	c6 40       	breq	8000366c <__avr32_f64_mul_res_zero>
800035a6:	30 0a       	mov	r10,0
800035a8:	20 b6       	sub	r6,11
800035aa:	0c 17       	sub	r7,r6
800035ac:	ca 3b       	rjmp	800034f2 <__avr32_f64_mul+0x22>

800035ae <__avr32_f64_mul_op2_subnormal>:
800035ae:	e4 19 00 0f 	andh	r9,0xf
800035b2:	f0 0c 12 00 	clz	r12,r8
800035b6:	f2 05 12 00 	clz	r5,r9
800035ba:	f7 bc 03 ea 	sublo	r12,-22
800035be:	f8 05 17 30 	movlo	r5,r12
800035c2:	f7 b5 02 0a 	subhs	r5,10
800035c6:	e0 45 00 20 	cp.w	r5,32
800035ca:	c0 d4       	brge	800035e4 <__avr32_f64_mul_op2_subnormal+0x36>
800035cc:	ea 0c 11 20 	rsub	r12,r5,32
800035d0:	f2 05 09 49 	lsl	r9,r9,r5
800035d4:	f0 0c 0a 4c 	lsr	r12,r8,r12
800035d8:	18 49       	or	r9,r12
800035da:	f0 05 09 48 	lsl	r8,r8,r5
800035de:	20 25       	sub	r5,2
800035e0:	0a 16       	sub	r6,r5
800035e2:	c8 fb       	rjmp	80003500 <__avr32_f64_mul+0x30>
800035e4:	f0 05 09 49 	lsl	r9,r8,r5
800035e8:	c4 20       	breq	8000366c <__avr32_f64_mul_res_zero>
800035ea:	30 08       	mov	r8,0
800035ec:	20 25       	sub	r5,2
800035ee:	0a 16       	sub	r6,r5
800035f0:	c8 8b       	rjmp	80003500 <__avr32_f64_mul+0x30>

800035f2 <__avr32_f64_mul_op_nan_or_inf>:
800035f2:	e4 19 00 0f 	andh	r9,0xf
800035f6:	e4 1b 00 0f 	andh	r11,0xf
800035fa:	14 4b       	or	r11,r10
800035fc:	10 49       	or	r9,r8
800035fe:	e0 47 07 ff 	cp.w	r7,2047
80003602:	c0 91       	brne	80003614 <__avr32_f64_mul_op1_not_naninf>
80003604:	58 0b       	cp.w	r11,0
80003606:	c3 81       	brne	80003676 <__avr32_f64_mul_res_nan>
80003608:	e0 46 07 ff 	cp.w	r6,2047
8000360c:	c3 81       	brne	8000367c <__avr32_f64_mul_res_inf>
8000360e:	58 09       	cp.w	r9,0
80003610:	c3 60       	breq	8000367c <__avr32_f64_mul_res_inf>
80003612:	c3 28       	rjmp	80003676 <__avr32_f64_mul_res_nan>

80003614 <__avr32_f64_mul_op1_not_naninf>:
80003614:	58 09       	cp.w	r9,0
80003616:	c3 30       	breq	8000367c <__avr32_f64_mul_res_inf>
80003618:	c2 f8       	rjmp	80003676 <__avr32_f64_mul_res_nan>

8000361a <__avr32_f64_mul_res_subnormal>:
8000361a:	5c 3c       	neg	r12
8000361c:	2f fc       	sub	r12,-1
8000361e:	f1 bc 04 c0 	satu	r12,0x6
80003622:	e0 4c 00 20 	cp.w	r12,32
80003626:	c1 14       	brge	80003648 <__avr32_f64_mul_res_subnormal+0x2e>
80003628:	f8 08 11 20 	rsub	r8,r12,32
8000362c:	0e 46       	or	r6,r7
8000362e:	ee 0c 0a 47 	lsr	r7,r7,r12
80003632:	f4 08 09 49 	lsl	r9,r10,r8
80003636:	12 47       	or	r7,r9
80003638:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000363c:	f6 08 09 49 	lsl	r9,r11,r8
80003640:	12 4a       	or	r10,r9
80003642:	f6 0c 0a 4b 	lsr	r11,r11,r12
80003646:	c8 3b       	rjmp	8000354c <__avr32_f64_mul+0x7c>
80003648:	f8 08 11 20 	rsub	r8,r12,32
8000364c:	f9 b9 00 00 	moveq	r9,0
80003650:	c0 30       	breq	80003656 <__avr32_f64_mul_res_subnormal+0x3c>
80003652:	f6 08 09 49 	lsl	r9,r11,r8
80003656:	0e 46       	or	r6,r7
80003658:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000365c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80003660:	f3 ea 10 07 	or	r7,r9,r10
80003664:	f6 0c 0a 4a 	lsr	r10,r11,r12
80003668:	30 0b       	mov	r11,0
8000366a:	c7 1b       	rjmp	8000354c <__avr32_f64_mul+0x7c>

8000366c <__avr32_f64_mul_res_zero>:
8000366c:	1c 9b       	mov	r11,lr
8000366e:	e6 1b 80 00 	andh	r11,0x8000,COH
80003672:	30 0a       	mov	r10,0
80003674:	d8 22       	popm	r4-r7,pc

80003676 <__avr32_f64_mul_res_nan>:
80003676:	3f fb       	mov	r11,-1
80003678:	3f fa       	mov	r10,-1
8000367a:	d8 22       	popm	r4-r7,pc

8000367c <__avr32_f64_mul_res_inf>:
8000367c:	f0 6b 00 00 	mov	r11,-1048576
80003680:	ed be 00 1f 	bld	lr,0x1f
80003684:	ef bb 00 1f 	bst	r11,0x1f
80003688:	30 0a       	mov	r10,0
8000368a:	d8 22       	popm	r4-r7,pc

8000368c <__avr32_f64_mul_op1_zero>:
8000368c:	f7 e9 20 0b 	eor	r11,r11,r9
80003690:	e6 1b 80 00 	andh	r11,0x8000,COH
80003694:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80003698:	e0 4c 07 ff 	cp.w	r12,2047
8000369c:	5e 1c       	retne	r12
8000369e:	3f fa       	mov	r10,-1
800036a0:	3f fb       	mov	r11,-1
800036a2:	5e fc       	retal	r12

800036a4 <__avr32_f64_div>:
800036a4:	eb cd 40 ff 	pushm	r0-r7,lr
800036a8:	f7 e9 20 0e 	eor	lr,r11,r9
800036ac:	f6 07 16 14 	lsr	r7,r11,0x14
800036b0:	a9 7b       	lsl	r11,0x9
800036b2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800036b6:	a9 7a       	lsl	r10,0x9
800036b8:	bd bb       	sbr	r11,0x1d
800036ba:	e4 1b 3f ff 	andh	r11,0x3fff
800036be:	ab d7       	cbr	r7,0xb
800036c0:	e0 80 00 cc 	breq	80003858 <__avr32_f64_div_round_subnormal+0x54>
800036c4:	e0 47 07 ff 	cp.w	r7,2047
800036c8:	e0 84 00 b5 	brge	80003832 <__avr32_f64_div_round_subnormal+0x2e>
800036cc:	f2 06 16 14 	lsr	r6,r9,0x14
800036d0:	a9 79       	lsl	r9,0x9
800036d2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800036d6:	a9 78       	lsl	r8,0x9
800036d8:	bd b9       	sbr	r9,0x1d
800036da:	e4 19 3f ff 	andh	r9,0x3fff
800036de:	ab d6       	cbr	r6,0xb
800036e0:	e0 80 00 e2 	breq	800038a4 <__avr32_f64_div_round_subnormal+0xa0>
800036e4:	e0 46 07 ff 	cp.w	r6,2047
800036e8:	e0 84 00 b2 	brge	8000384c <__avr32_f64_div_round_subnormal+0x48>
800036ec:	0c 17       	sub	r7,r6
800036ee:	fe 37 fc 01 	sub	r7,-1023
800036f2:	fc 1c 80 00 	movh	r12,0x8000
800036f6:	f8 03 16 01 	lsr	r3,r12,0x1
800036fa:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800036fe:	5c d4       	com	r4
80003700:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80003704:	e6 09 06 44 	mulu.d	r4,r3,r9
80003708:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000370c:	e6 05 06 44 	mulu.d	r4,r3,r5
80003710:	ea 03 15 02 	lsl	r3,r5,0x2
80003714:	e6 09 06 44 	mulu.d	r4,r3,r9
80003718:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000371c:	e6 05 06 44 	mulu.d	r4,r3,r5
80003720:	ea 03 15 02 	lsl	r3,r5,0x2
80003724:	e6 09 06 44 	mulu.d	r4,r3,r9
80003728:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000372c:	e6 05 06 44 	mulu.d	r4,r3,r5
80003730:	ea 03 15 02 	lsl	r3,r5,0x2
80003734:	e6 08 06 40 	mulu.d	r0,r3,r8
80003738:	e4 09 07 40 	macu.d	r0,r2,r9
8000373c:	e6 09 06 44 	mulu.d	r4,r3,r9
80003740:	02 04       	add	r4,r1
80003742:	5c 05       	acr	r5
80003744:	a3 65       	lsl	r5,0x2
80003746:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000374a:	a3 64       	lsl	r4,0x2
8000374c:	5c 34       	neg	r4
8000374e:	f8 05 01 45 	sbc	r5,r12,r5
80003752:	e6 04 06 40 	mulu.d	r0,r3,r4
80003756:	e4 05 07 40 	macu.d	r0,r2,r5
8000375a:	e6 05 06 44 	mulu.d	r4,r3,r5
8000375e:	02 04       	add	r4,r1
80003760:	5c 05       	acr	r5
80003762:	ea 03 15 02 	lsl	r3,r5,0x2
80003766:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000376a:	e8 02 15 02 	lsl	r2,r4,0x2
8000376e:	e6 08 06 40 	mulu.d	r0,r3,r8
80003772:	e4 09 07 40 	macu.d	r0,r2,r9
80003776:	e6 09 06 44 	mulu.d	r4,r3,r9
8000377a:	02 04       	add	r4,r1
8000377c:	5c 05       	acr	r5
8000377e:	a3 65       	lsl	r5,0x2
80003780:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80003784:	a3 64       	lsl	r4,0x2
80003786:	5c 34       	neg	r4
80003788:	f8 05 01 45 	sbc	r5,r12,r5
8000378c:	e6 04 06 40 	mulu.d	r0,r3,r4
80003790:	e4 05 07 40 	macu.d	r0,r2,r5
80003794:	e6 05 06 44 	mulu.d	r4,r3,r5
80003798:	02 04       	add	r4,r1
8000379a:	5c 05       	acr	r5
8000379c:	ea 03 15 02 	lsl	r3,r5,0x2
800037a0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800037a4:	e8 02 15 02 	lsl	r2,r4,0x2
800037a8:	e6 0a 06 40 	mulu.d	r0,r3,r10
800037ac:	e4 0b 07 40 	macu.d	r0,r2,r11
800037b0:	e6 0b 06 42 	mulu.d	r2,r3,r11
800037b4:	02 02       	add	r2,r1
800037b6:	5c 03       	acr	r3
800037b8:	ed b3 00 1c 	bld	r3,0x1c
800037bc:	c0 90       	breq	800037ce <__avr32_f64_div+0x12a>
800037be:	a1 72       	lsl	r2,0x1
800037c0:	5c f3       	rol	r3
800037c2:	20 17       	sub	r7,1
800037c4:	a3 9a       	lsr	r10,0x3
800037c6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800037ca:	a3 9b       	lsr	r11,0x3
800037cc:	c0 58       	rjmp	800037d6 <__avr32_f64_div+0x132>
800037ce:	a5 8a       	lsr	r10,0x4
800037d0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800037d4:	a5 8b       	lsr	r11,0x4
800037d6:	58 07       	cp.w	r7,0
800037d8:	e0 8a 00 8b 	brle	800038ee <__avr32_f64_div_res_subnormal>
800037dc:	e0 12 ff 00 	andl	r2,0xff00
800037e0:	e8 12 00 80 	orl	r2,0x80
800037e4:	e6 08 06 40 	mulu.d	r0,r3,r8
800037e8:	e4 09 07 40 	macu.d	r0,r2,r9
800037ec:	e4 08 06 44 	mulu.d	r4,r2,r8
800037f0:	e6 09 06 48 	mulu.d	r8,r3,r9
800037f4:	00 05       	add	r5,r0
800037f6:	f0 01 00 48 	adc	r8,r8,r1
800037fa:	5c 09       	acr	r9
800037fc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80003800:	58 04       	cp.w	r4,0
80003802:	5c 25       	cpc	r5

80003804 <__avr32_f64_div_round_subnormal>:
80003804:	f4 08 13 00 	cpc	r8,r10
80003808:	f6 09 13 00 	cpc	r9,r11
8000380c:	5f 36       	srlo	r6
8000380e:	f8 06 17 00 	moveq	r6,r12
80003812:	e4 0a 16 08 	lsr	r10,r2,0x8
80003816:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000381a:	e6 0b 16 08 	lsr	r11,r3,0x8
8000381e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80003822:	ed be 00 1f 	bld	lr,0x1f
80003826:	ef bb 00 1f 	bst	r11,0x1f
8000382a:	0c 0a       	add	r10,r6
8000382c:	5c 0b       	acr	r11
8000382e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80003832:	e4 1b 00 0f 	andh	r11,0xf
80003836:	14 4b       	or	r11,r10
80003838:	e0 81 00 a7 	brne	80003986 <__avr32_f64_div_res_subnormal+0x98>
8000383c:	f2 06 16 14 	lsr	r6,r9,0x14
80003840:	ab d6       	cbr	r6,0xb
80003842:	e0 46 07 ff 	cp.w	r6,2047
80003846:	e0 81 00 a4 	brne	8000398e <__avr32_f64_div_res_subnormal+0xa0>
8000384a:	c9 e8       	rjmp	80003986 <__avr32_f64_div_res_subnormal+0x98>
8000384c:	e4 19 00 0f 	andh	r9,0xf
80003850:	10 49       	or	r9,r8
80003852:	e0 81 00 9a 	brne	80003986 <__avr32_f64_div_res_subnormal+0x98>
80003856:	c9 28       	rjmp	8000397a <__avr32_f64_div_res_subnormal+0x8c>
80003858:	a3 7b       	lsl	r11,0x3
8000385a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000385e:	a3 7a       	lsl	r10,0x3
80003860:	f5 eb 10 04 	or	r4,r10,r11
80003864:	e0 80 00 a0 	breq	800039a4 <__avr32_f64_div_op1_zero>
80003868:	f6 04 12 00 	clz	r4,r11
8000386c:	c1 70       	breq	8000389a <__avr32_f64_div_round_subnormal+0x96>
8000386e:	c0 c3       	brcs	80003886 <__avr32_f64_div_round_subnormal+0x82>
80003870:	e8 05 11 20 	rsub	r5,r4,32
80003874:	f6 04 09 4b 	lsl	r11,r11,r4
80003878:	f4 05 0a 45 	lsr	r5,r10,r5
8000387c:	0a 4b       	or	r11,r5
8000387e:	f4 04 09 4a 	lsl	r10,r10,r4
80003882:	08 17       	sub	r7,r4
80003884:	c0 b8       	rjmp	8000389a <__avr32_f64_div_round_subnormal+0x96>
80003886:	f4 04 12 00 	clz	r4,r10
8000388a:	f9 b4 03 00 	movlo	r4,0
8000388e:	f7 b4 02 e0 	subhs	r4,-32
80003892:	f4 04 09 4b 	lsl	r11,r10,r4
80003896:	30 0a       	mov	r10,0
80003898:	08 17       	sub	r7,r4
8000389a:	a3 8a       	lsr	r10,0x2
8000389c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800038a0:	a3 8b       	lsr	r11,0x2
800038a2:	c1 1b       	rjmp	800036c4 <__avr32_f64_div+0x20>
800038a4:	a3 79       	lsl	r9,0x3
800038a6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800038aa:	a3 78       	lsl	r8,0x3
800038ac:	f3 e8 10 04 	or	r4,r9,r8
800038b0:	c6 f0       	breq	8000398e <__avr32_f64_div_res_subnormal+0xa0>
800038b2:	f2 04 12 00 	clz	r4,r9
800038b6:	c1 70       	breq	800038e4 <__avr32_f64_div_round_subnormal+0xe0>
800038b8:	c0 c3       	brcs	800038d0 <__avr32_f64_div_round_subnormal+0xcc>
800038ba:	e8 05 11 20 	rsub	r5,r4,32
800038be:	f2 04 09 49 	lsl	r9,r9,r4
800038c2:	f0 05 0a 45 	lsr	r5,r8,r5
800038c6:	0a 49       	or	r9,r5
800038c8:	f0 04 09 48 	lsl	r8,r8,r4
800038cc:	08 16       	sub	r6,r4
800038ce:	c0 b8       	rjmp	800038e4 <__avr32_f64_div_round_subnormal+0xe0>
800038d0:	f0 04 12 00 	clz	r4,r8
800038d4:	f9 b4 03 00 	movlo	r4,0
800038d8:	f7 b4 02 e0 	subhs	r4,-32
800038dc:	f0 04 09 49 	lsl	r9,r8,r4
800038e0:	30 08       	mov	r8,0
800038e2:	08 16       	sub	r6,r4
800038e4:	a3 88       	lsr	r8,0x2
800038e6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800038ea:	a3 89       	lsr	r9,0x2
800038ec:	cf ca       	rjmp	800036e4 <__avr32_f64_div+0x40>

800038ee <__avr32_f64_div_res_subnormal>:
800038ee:	5c 37       	neg	r7
800038f0:	2f f7       	sub	r7,-1
800038f2:	f1 b7 04 c0 	satu	r7,0x6
800038f6:	e0 47 00 20 	cp.w	r7,32
800038fa:	c1 54       	brge	80003924 <__avr32_f64_div_res_subnormal+0x36>
800038fc:	ee 06 11 20 	rsub	r6,r7,32
80003900:	e4 07 0a 42 	lsr	r2,r2,r7
80003904:	e6 06 09 4c 	lsl	r12,r3,r6
80003908:	18 42       	or	r2,r12
8000390a:	e6 07 0a 43 	lsr	r3,r3,r7
8000390e:	f4 06 09 41 	lsl	r1,r10,r6
80003912:	f4 07 0a 4a 	lsr	r10,r10,r7
80003916:	f6 06 09 4c 	lsl	r12,r11,r6
8000391a:	18 4a       	or	r10,r12
8000391c:	f6 07 0a 4b 	lsr	r11,r11,r7
80003920:	30 00       	mov	r0,0
80003922:	c1 58       	rjmp	8000394c <__avr32_f64_div_res_subnormal+0x5e>
80003924:	ee 06 11 20 	rsub	r6,r7,32
80003928:	f9 b0 00 00 	moveq	r0,0
8000392c:	f9 bc 00 00 	moveq	r12,0
80003930:	c0 50       	breq	8000393a <__avr32_f64_div_res_subnormal+0x4c>
80003932:	f4 06 09 40 	lsl	r0,r10,r6
80003936:	f6 06 09 4c 	lsl	r12,r11,r6
8000393a:	e6 07 0a 42 	lsr	r2,r3,r7
8000393e:	30 03       	mov	r3,0
80003940:	f4 07 0a 41 	lsr	r1,r10,r7
80003944:	18 41       	or	r1,r12
80003946:	f6 07 0a 4a 	lsr	r10,r11,r7
8000394a:	30 0b       	mov	r11,0
8000394c:	e0 12 ff 00 	andl	r2,0xff00
80003950:	e8 12 00 80 	orl	r2,0x80
80003954:	e6 08 06 46 	mulu.d	r6,r3,r8
80003958:	e4 09 07 46 	macu.d	r6,r2,r9
8000395c:	e4 08 06 44 	mulu.d	r4,r2,r8
80003960:	e6 09 06 48 	mulu.d	r8,r3,r9
80003964:	0c 05       	add	r5,r6
80003966:	f0 07 00 48 	adc	r8,r8,r7
8000396a:	5c 09       	acr	r9
8000396c:	30 07       	mov	r7,0
8000396e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80003972:	00 34       	cp.w	r4,r0
80003974:	e2 05 13 00 	cpc	r5,r1
80003978:	c4 6b       	rjmp	80003804 <__avr32_f64_div_round_subnormal>
8000397a:	1c 9b       	mov	r11,lr
8000397c:	e6 1b 80 00 	andh	r11,0x8000,COH
80003980:	30 0a       	mov	r10,0
80003982:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80003986:	3f fb       	mov	r11,-1
80003988:	30 0a       	mov	r10,0
8000398a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000398e:	f5 eb 10 04 	or	r4,r10,r11
80003992:	c0 90       	breq	800039a4 <__avr32_f64_div_op1_zero>
80003994:	1c 9b       	mov	r11,lr
80003996:	e6 1b 80 00 	andh	r11,0x8000,COH
8000399a:	ea 1b 7f f0 	orh	r11,0x7ff0
8000399e:	30 0a       	mov	r10,0
800039a0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800039a4 <__avr32_f64_div_op1_zero>:
800039a4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800039a8:	ce f0       	breq	80003986 <__avr32_f64_div_res_subnormal+0x98>
800039aa:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800039ae:	e0 44 07 ff 	cp.w	r4,2047
800039b2:	ce 41       	brne	8000397a <__avr32_f64_div_res_subnormal+0x8c>
800039b4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800039b8:	ce 10       	breq	8000397a <__avr32_f64_div_res_subnormal+0x8c>
800039ba:	ce 6b       	rjmp	80003986 <__avr32_f64_div_res_subnormal+0x98>

800039bc <__avr32_u32_to_f32>:
800039bc:	58 0c       	cp.w	r12,0
800039be:	5e 0c       	reteq	r12
800039c0:	e0 6a 00 9e 	mov	r10,158
800039c4:	f8 09 12 00 	clz	r9,r12
800039c8:	12 1a       	sub	r10,r9
800039ca:	f8 09 09 4c 	lsl	r12,r12,r9
800039ce:	58 0a       	cp.w	r10,0
800039d0:	e0 8a 00 14 	brle	800039f8 <__avr32_u32_to_f32_subnormal>
800039d4:	37 f9       	mov	r9,127
800039d6:	ed bc 00 08 	bld	r12,0x8
800039da:	f7 b9 00 ff 	subeq	r9,-1
800039de:	12 0c       	add	r12,r9
800039e0:	f7 ba 03 fe 	sublo	r10,-2
800039e4:	ed bc 00 1f 	bld	r12,0x1f
800039e8:	f7 ba 01 01 	subne	r10,1
800039ec:	f8 0c 16 07 	lsr	r12,r12,0x7
800039f0:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
800039f4:	a1 9c       	lsr	r12,0x1
800039f6:	5e fc       	retal	r12

800039f8 <__avr32_u32_to_f32_subnormal>:
800039f8:	30 08       	mov	r8,0
800039fa:	f4 0a 11 01 	rsub	r10,r10,1
800039fe:	59 9a       	cp.w	r10,25
80003a00:	f9 bc 02 00 	movhs	r12,0
80003a04:	c1 32       	brcc	80003a2a <__avr32_u32_to_f32_subnormal+0x32>
80003a06:	f4 09 11 20 	rsub	r9,r10,32
80003a0a:	f8 09 09 49 	lsl	r9,r12,r9
80003a0e:	5f 19       	srne	r9
80003a10:	f8 0a 0a 4c 	lsr	r12,r12,r10
80003a14:	12 4c       	or	r12,r9
80003a16:	37 f9       	mov	r9,127
80003a18:	ed bc 00 08 	bld	r12,0x8
80003a1c:	f7 b9 00 ff 	subeq	r9,-1
80003a20:	12 0c       	add	r12,r9
80003a22:	f8 0c 16 07 	lsr	r12,r12,0x7
80003a26:	a1 78       	lsl	r8,0x1
80003a28:	5d 0c       	ror	r12
80003a2a:	5e fc       	retal	r12

80003a2c <__avr32_f32_to_u32>:
80003a2c:	58 0c       	cp.w	r12,0
80003a2e:	5e 6d       	retmi	0
80003a30:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80003a34:	27 fb       	sub	r11,127
80003a36:	5e 3d       	retlo	0
80003a38:	f6 0b 11 1f 	rsub	r11,r11,31
80003a3c:	a9 6c       	lsl	r12,0x8
80003a3e:	bf bc       	sbr	r12,0x1f
80003a40:	f8 0b 0a 4c 	lsr	r12,r12,r11
80003a44:	5e fc       	retal	r12

80003a46 <__avr32_f32_to_f64>:
80003a46:	f8 0b 15 01 	lsl	r11,r12,0x1
80003a4a:	f9 ba 00 00 	moveq	r10,0
80003a4e:	5e 0b       	reteq	r11
80003a50:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80003a54:	e0 49 00 ff 	cp.w	r9,255
80003a58:	c1 e0       	breq	80003a94 <__extendsfdf_return_op1+0x6>
80003a5a:	a7 7b       	lsl	r11,0x7
80003a5c:	30 0a       	mov	r10,0
80003a5e:	58 09       	cp.w	r9,0
80003a60:	f7 b9 00 ff 	subeq	r9,-1
80003a64:	5f 18       	srne	r8
80003a66:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80003a6a:	fe 39 fc 80 	sub	r9,-896
80003a6e:	f6 08 12 00 	clz	r8,r11
80003a72:	10 19       	sub	r9,r8
80003a74:	f6 08 09 4b 	lsl	r11,r11,r8
80003a78:	ed bb 00 1f 	bld	r11,0x1f
80003a7c:	f7 b9 01 01 	subne	r9,1
80003a80:	ab 9a       	lsr	r10,0xb
80003a82:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80003a86:	a1 7b       	lsl	r11,0x1
80003a88:	ab 9b       	lsr	r11,0xb
80003a8a:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80003a8e <__extendsfdf_return_op1>:
80003a8e:	a1 7c       	lsl	r12,0x1
80003a90:	5d 0b       	ror	r11
80003a92:	5e fb       	retal	r11
80003a94:	fc 1a ff e0 	movh	r10,0xffe0
80003a98:	a9 6b       	lsl	r11,0x8
80003a9a:	f9 bb 01 ff 	movne	r11,-1
80003a9e:	f4 0b 17 00 	moveq	r11,r10
80003aa2:	30 0a       	mov	r10,0
80003aa4:	cf 5b       	rjmp	80003a8e <__extendsfdf_return_op1>

80003aa6 <__avr32_f64_to_f32>:
80003aa6:	f6 09 15 01 	lsl	r9,r11,0x1
80003aaa:	b5 99       	lsr	r9,0x15
80003aac:	5e 0d       	reteq	0
80003aae:	f6 08 15 0a 	lsl	r8,r11,0xa
80003ab2:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80003ab6:	ab 6a       	lsl	r10,0xa
80003ab8:	5c 3a       	neg	r10
80003aba:	5c fc       	rol	r12
80003abc:	e0 49 07 ff 	cp.w	r9,2047
80003ac0:	c1 a0       	breq	80003af4 <__truncdfsf_return_op1+0x6>
80003ac2:	e0 29 03 80 	sub	r9,896
80003ac6:	bf bc       	sbr	r12,0x1f
80003ac8:	58 09       	cp.w	r9,0
80003aca:	e0 8a 00 1a 	brle	80003afe <__truncdfsf_return_op1+0x10>
80003ace:	37 fa       	mov	r10,127
80003ad0:	ed bc 00 08 	bld	r12,0x8
80003ad4:	f7 ba 00 ff 	subeq	r10,-1
80003ad8:	14 0c       	add	r12,r10
80003ada:	f7 b9 03 fe 	sublo	r9,-2
80003ade:	ed bc 00 1f 	bld	r12,0x1f
80003ae2:	f7 b9 01 01 	subne	r9,1
80003ae6:	f8 0c 16 07 	lsr	r12,r12,0x7
80003aea:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80003aee <__truncdfsf_return_op1>:
80003aee:	a1 7b       	lsl	r11,0x1
80003af0:	5d 0c       	ror	r12
80003af2:	5e fc       	retal	r12
80003af4:	bf dc       	cbr	r12,0x1f
80003af6:	5e 1e       	retne	-1
80003af8:	fc 1c 7f 80 	movh	r12,0x7f80
80003afc:	5e fc       	retal	r12
80003afe:	f2 09 11 01 	rsub	r9,r9,1
80003b02:	59 99       	cp.w	r9,25
80003b04:	f9 bc 02 00 	movhs	r12,0
80003b08:	c1 32       	brcc	80003b2e <__truncdfsf_return_op1+0x40>
80003b0a:	f2 0a 11 20 	rsub	r10,r9,32
80003b0e:	f8 0a 09 4a 	lsl	r10,r12,r10
80003b12:	5f 1a       	srne	r10
80003b14:	f8 09 0a 4c 	lsr	r12,r12,r9
80003b18:	14 4c       	or	r12,r10
80003b1a:	37 fa       	mov	r10,127
80003b1c:	ed bc 00 08 	bld	r12,0x8
80003b20:	f7 ba 00 ff 	subeq	r10,-1
80003b24:	14 0c       	add	r12,r10
80003b26:	f8 0c 16 07 	lsr	r12,r12,0x7
80003b2a:	a1 7b       	lsl	r11,0x1
80003b2c:	5d 0c       	ror	r12
80003b2e:	5e fc       	retal	r12

80003b30 <memcpy>:
80003b30:	58 8a       	cp.w	r10,8
80003b32:	c2 f5       	brlt	80003b90 <memcpy+0x60>
80003b34:	f9 eb 10 09 	or	r9,r12,r11
80003b38:	e2 19 00 03 	andl	r9,0x3,COH
80003b3c:	e0 81 00 97 	brne	80003c6a <memcpy+0x13a>
80003b40:	e0 4a 00 20 	cp.w	r10,32
80003b44:	c3 b4       	brge	80003bba <memcpy+0x8a>
80003b46:	f4 08 14 02 	asr	r8,r10,0x2
80003b4a:	f0 09 11 08 	rsub	r9,r8,8
80003b4e:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003b52:	76 69       	ld.w	r9,r11[0x18]
80003b54:	99 69       	st.w	r12[0x18],r9
80003b56:	76 59       	ld.w	r9,r11[0x14]
80003b58:	99 59       	st.w	r12[0x14],r9
80003b5a:	76 49       	ld.w	r9,r11[0x10]
80003b5c:	99 49       	st.w	r12[0x10],r9
80003b5e:	76 39       	ld.w	r9,r11[0xc]
80003b60:	99 39       	st.w	r12[0xc],r9
80003b62:	76 29       	ld.w	r9,r11[0x8]
80003b64:	99 29       	st.w	r12[0x8],r9
80003b66:	76 19       	ld.w	r9,r11[0x4]
80003b68:	99 19       	st.w	r12[0x4],r9
80003b6a:	76 09       	ld.w	r9,r11[0x0]
80003b6c:	99 09       	st.w	r12[0x0],r9
80003b6e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003b72:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003b76:	e0 1a 00 03 	andl	r10,0x3
80003b7a:	f4 0a 11 04 	rsub	r10,r10,4
80003b7e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003b82:	17 a9       	ld.ub	r9,r11[0x2]
80003b84:	b0 a9       	st.b	r8[0x2],r9
80003b86:	17 99       	ld.ub	r9,r11[0x1]
80003b88:	b0 99       	st.b	r8[0x1],r9
80003b8a:	17 89       	ld.ub	r9,r11[0x0]
80003b8c:	b0 89       	st.b	r8[0x0],r9
80003b8e:	5e fc       	retal	r12
80003b90:	f4 0a 11 09 	rsub	r10,r10,9
80003b94:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003b98:	17 f9       	ld.ub	r9,r11[0x7]
80003b9a:	b8 f9       	st.b	r12[0x7],r9
80003b9c:	17 e9       	ld.ub	r9,r11[0x6]
80003b9e:	b8 e9       	st.b	r12[0x6],r9
80003ba0:	17 d9       	ld.ub	r9,r11[0x5]
80003ba2:	b8 d9       	st.b	r12[0x5],r9
80003ba4:	17 c9       	ld.ub	r9,r11[0x4]
80003ba6:	b8 c9       	st.b	r12[0x4],r9
80003ba8:	17 b9       	ld.ub	r9,r11[0x3]
80003baa:	b8 b9       	st.b	r12[0x3],r9
80003bac:	17 a9       	ld.ub	r9,r11[0x2]
80003bae:	b8 a9       	st.b	r12[0x2],r9
80003bb0:	17 99       	ld.ub	r9,r11[0x1]
80003bb2:	b8 99       	st.b	r12[0x1],r9
80003bb4:	17 89       	ld.ub	r9,r11[0x0]
80003bb6:	b8 89       	st.b	r12[0x0],r9
80003bb8:	5e fc       	retal	r12
80003bba:	eb cd 40 c0 	pushm	r6-r7,lr
80003bbe:	18 99       	mov	r9,r12
80003bc0:	22 0a       	sub	r10,32
80003bc2:	b7 07       	ld.d	r6,r11++
80003bc4:	b3 26       	st.d	r9++,r6
80003bc6:	b7 07       	ld.d	r6,r11++
80003bc8:	b3 26       	st.d	r9++,r6
80003bca:	b7 07       	ld.d	r6,r11++
80003bcc:	b3 26       	st.d	r9++,r6
80003bce:	b7 07       	ld.d	r6,r11++
80003bd0:	b3 26       	st.d	r9++,r6
80003bd2:	22 0a       	sub	r10,32
80003bd4:	cf 74       	brge	80003bc2 <memcpy+0x92>
80003bd6:	2f 0a       	sub	r10,-16
80003bd8:	c0 65       	brlt	80003be4 <memcpy+0xb4>
80003bda:	b7 07       	ld.d	r6,r11++
80003bdc:	b3 26       	st.d	r9++,r6
80003bde:	b7 07       	ld.d	r6,r11++
80003be0:	b3 26       	st.d	r9++,r6
80003be2:	21 0a       	sub	r10,16
80003be4:	5c 3a       	neg	r10
80003be6:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80003bea:	d7 03       	nop
80003bec:	d7 03       	nop
80003bee:	f7 36 00 0e 	ld.ub	r6,r11[14]
80003bf2:	f3 66 00 0e 	st.b	r9[14],r6
80003bf6:	f7 36 00 0d 	ld.ub	r6,r11[13]
80003bfa:	f3 66 00 0d 	st.b	r9[13],r6
80003bfe:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003c02:	f3 66 00 0c 	st.b	r9[12],r6
80003c06:	f7 36 00 0b 	ld.ub	r6,r11[11]
80003c0a:	f3 66 00 0b 	st.b	r9[11],r6
80003c0e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80003c12:	f3 66 00 0a 	st.b	r9[10],r6
80003c16:	f7 36 00 09 	ld.ub	r6,r11[9]
80003c1a:	f3 66 00 09 	st.b	r9[9],r6
80003c1e:	f7 36 00 08 	ld.ub	r6,r11[8]
80003c22:	f3 66 00 08 	st.b	r9[8],r6
80003c26:	f7 36 00 07 	ld.ub	r6,r11[7]
80003c2a:	f3 66 00 07 	st.b	r9[7],r6
80003c2e:	f7 36 00 06 	ld.ub	r6,r11[6]
80003c32:	f3 66 00 06 	st.b	r9[6],r6
80003c36:	f7 36 00 05 	ld.ub	r6,r11[5]
80003c3a:	f3 66 00 05 	st.b	r9[5],r6
80003c3e:	f7 36 00 04 	ld.ub	r6,r11[4]
80003c42:	f3 66 00 04 	st.b	r9[4],r6
80003c46:	f7 36 00 03 	ld.ub	r6,r11[3]
80003c4a:	f3 66 00 03 	st.b	r9[3],r6
80003c4e:	f7 36 00 02 	ld.ub	r6,r11[2]
80003c52:	f3 66 00 02 	st.b	r9[2],r6
80003c56:	f7 36 00 01 	ld.ub	r6,r11[1]
80003c5a:	f3 66 00 01 	st.b	r9[1],r6
80003c5e:	f7 36 00 00 	ld.ub	r6,r11[0]
80003c62:	f3 66 00 00 	st.b	r9[0],r6
80003c66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003c6a:	20 1a       	sub	r10,1
80003c6c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003c70:	f8 0a 0b 09 	st.b	r12[r10],r9
80003c74:	cf b1       	brne	80003c6a <memcpy+0x13a>
80003c76:	5e fc       	retal	r12

80003c78 <_vsprintf_r>:
80003c78:	d4 01       	pushm	lr
80003c7a:	21 7d       	sub	sp,92
80003c7c:	e0 68 ff ff 	mov	r8,65535
80003c80:	ea 18 7f ff 	orh	r8,0x7fff
80003c84:	50 58       	stdsp	sp[0x14],r8
80003c86:	50 28       	stdsp	sp[0x8],r8
80003c88:	e0 68 02 08 	mov	r8,520
80003c8c:	ba 68       	st.h	sp[0xc],r8
80003c8e:	3f f8       	mov	r8,-1
80003c90:	50 4b       	stdsp	sp[0x10],r11
80003c92:	50 0b       	stdsp	sp[0x0],r11
80003c94:	ba 78       	st.h	sp[0xe],r8
80003c96:	1a 9b       	mov	r11,sp
80003c98:	ca 8d       	rcall	80003fe8 <_vfprintf_r>
80003c9a:	30 09       	mov	r9,0
80003c9c:	40 08       	lddsp	r8,sp[0x0]
80003c9e:	b0 89       	st.b	r8[0x0],r9
80003ca0:	2e 9d       	sub	sp,-92
80003ca2:	d8 02       	popm	pc

80003ca4 <vsprintf>:
80003ca4:	d4 01       	pushm	lr
80003ca6:	e0 68 01 00 	mov	r8,256
80003caa:	14 99       	mov	r9,r10
80003cac:	16 9a       	mov	r10,r11
80003cae:	18 9b       	mov	r11,r12
80003cb0:	70 0c       	ld.w	r12,r8[0x0]
80003cb2:	ce 3f       	rcall	80003c78 <_vsprintf_r>
80003cb4:	d8 02       	popm	pc
80003cb6:	d7 03       	nop

80003cb8 <get_arg>:
80003cb8:	d4 31       	pushm	r0-r7,lr
80003cba:	20 8d       	sub	sp,32
80003cbc:	fa c4 ff bc 	sub	r4,sp,-68
80003cc0:	50 4b       	stdsp	sp[0x10],r11
80003cc2:	68 2e       	ld.w	lr,r4[0x8]
80003cc4:	50 58       	stdsp	sp[0x14],r8
80003cc6:	12 96       	mov	r6,r9
80003cc8:	7c 0b       	ld.w	r11,lr[0x0]
80003cca:	70 05       	ld.w	r5,r8[0x0]
80003ccc:	50 6e       	stdsp	sp[0x18],lr
80003cce:	58 0b       	cp.w	r11,0
80003cd0:	f4 0b 17 00 	moveq	r11,r10
80003cd4:	68 03       	ld.w	r3,r4[0x0]
80003cd6:	68 11       	ld.w	r1,r4[0x4]
80003cd8:	40 49       	lddsp	r9,sp[0x10]
80003cda:	30 08       	mov	r8,0
80003cdc:	c2 89       	rjmp	80003f2c <get_arg+0x274>
80003cde:	2f fb       	sub	r11,-1
80003ce0:	32 5c       	mov	r12,37
80003ce2:	17 8a       	ld.ub	r10,r11[0x0]
80003ce4:	f8 0a 18 00 	cp.b	r10,r12
80003ce8:	5f 1e       	srne	lr
80003cea:	f0 0a 18 00 	cp.b	r10,r8
80003cee:	5f 1c       	srne	r12
80003cf0:	fd ec 00 0c 	and	r12,lr,r12
80003cf4:	f0 0c 18 00 	cp.b	r12,r8
80003cf8:	cf 31       	brne	80003cde <get_arg+0x26>
80003cfa:	58 0a       	cp.w	r10,0
80003cfc:	e0 80 01 25 	breq	80003f46 <get_arg+0x28e>
80003d00:	30 0c       	mov	r12,0
80003d02:	3f fa       	mov	r10,-1
80003d04:	18 90       	mov	r0,r12
80003d06:	50 3a       	stdsp	sp[0xc],r10
80003d08:	18 94       	mov	r4,r12
80003d0a:	18 92       	mov	r2,r12
80003d0c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80003d10:	16 97       	mov	r7,r11
80003d12:	50 7c       	stdsp	sp[0x1c],r12
80003d14:	fe cc a6 7c 	sub	r12,pc,-22916
80003d18:	0f 3a       	ld.ub	r10,r7++
80003d1a:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80003d1e:	40 7c       	lddsp	r12,sp[0x1c]
80003d20:	1c 0c       	add	r12,lr
80003d22:	fe ce a7 52 	sub	lr,pc,-22702
80003d26:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80003d2a:	20 1e       	sub	lr,1
80003d2c:	50 0e       	stdsp	sp[0x0],lr
80003d2e:	fe ce a7 ca 	sub	lr,pc,-22582
80003d32:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80003d36:	50 7c       	stdsp	sp[0x1c],r12
80003d38:	40 0c       	lddsp	r12,sp[0x0]
80003d3a:	58 7c       	cp.w	r12,7
80003d3c:	e0 8b 00 f1 	brhi	80003f1e <get_arg+0x266>
80003d40:	fe ce a9 7c 	sub	lr,pc,-22148
80003d44:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003d48:	36 8b       	mov	r11,104
80003d4a:	f6 0a 18 00 	cp.b	r10,r11
80003d4e:	e0 80 00 e8 	breq	80003f1e <get_arg+0x266>
80003d52:	37 1b       	mov	r11,113
80003d54:	f6 0a 18 00 	cp.b	r10,r11
80003d58:	c0 70       	breq	80003d66 <get_arg+0xae>
80003d5a:	34 cb       	mov	r11,76
80003d5c:	f6 0a 18 00 	cp.b	r10,r11
80003d60:	c0 51       	brne	80003d6a <get_arg+0xb2>
80003d62:	a3 b4       	sbr	r4,0x3
80003d64:	cd d8       	rjmp	80003f1e <get_arg+0x266>
80003d66:	a5 b4       	sbr	r4,0x5
80003d68:	cd b8       	rjmp	80003f1e <get_arg+0x266>
80003d6a:	08 9a       	mov	r10,r4
80003d6c:	0e 9b       	mov	r11,r7
80003d6e:	a5 aa       	sbr	r10,0x4
80003d70:	17 3c       	ld.ub	r12,r11++
80003d72:	a5 b4       	sbr	r4,0x5
80003d74:	36 ce       	mov	lr,108
80003d76:	fc 0c 18 00 	cp.b	r12,lr
80003d7a:	e0 80 00 d3 	breq	80003f20 <get_arg+0x268>
80003d7e:	14 94       	mov	r4,r10
80003d80:	cc f8       	rjmp	80003f1e <get_arg+0x266>
80003d82:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80003d86:	36 7c       	mov	r12,103
80003d88:	f8 0a 18 00 	cp.b	r10,r12
80003d8c:	e0 8b 00 27 	brhi	80003dda <get_arg+0x122>
80003d90:	36 5b       	mov	r11,101
80003d92:	f6 0a 18 00 	cp.b	r10,r11
80003d96:	c4 82       	brcc	80003e26 <get_arg+0x16e>
80003d98:	34 fb       	mov	r11,79
80003d9a:	f6 0a 18 00 	cp.b	r10,r11
80003d9e:	c4 80       	breq	80003e2e <get_arg+0x176>
80003da0:	e0 8b 00 0c 	brhi	80003db8 <get_arg+0x100>
80003da4:	34 5b       	mov	r11,69
80003da6:	f6 0a 18 00 	cp.b	r10,r11
80003daa:	c3 e0       	breq	80003e26 <get_arg+0x16e>
80003dac:	34 7b       	mov	r11,71
80003dae:	f6 0a 18 00 	cp.b	r10,r11
80003db2:	c3 a0       	breq	80003e26 <get_arg+0x16e>
80003db4:	34 4b       	mov	r11,68
80003db6:	c0 88       	rjmp	80003dc6 <get_arg+0x10e>
80003db8:	35 8b       	mov	r11,88
80003dba:	f6 0a 18 00 	cp.b	r10,r11
80003dbe:	c2 c0       	breq	80003e16 <get_arg+0x15e>
80003dc0:	e0 8b 00 07 	brhi	80003dce <get_arg+0x116>
80003dc4:	35 5b       	mov	r11,85
80003dc6:	f6 0a 18 00 	cp.b	r10,r11
80003dca:	c3 51       	brne	80003e34 <get_arg+0x17c>
80003dcc:	c3 18       	rjmp	80003e2e <get_arg+0x176>
80003dce:	36 3b       	mov	r11,99
80003dd0:	f6 0a 18 00 	cp.b	r10,r11
80003dd4:	c2 f0       	breq	80003e32 <get_arg+0x17a>
80003dd6:	36 4b       	mov	r11,100
80003dd8:	c0 e8       	rjmp	80003df4 <get_arg+0x13c>
80003dda:	37 0b       	mov	r11,112
80003ddc:	f6 0a 18 00 	cp.b	r10,r11
80003de0:	c2 50       	breq	80003e2a <get_arg+0x172>
80003de2:	e0 8b 00 0d 	brhi	80003dfc <get_arg+0x144>
80003de6:	36 eb       	mov	r11,110
80003de8:	f6 0a 18 00 	cp.b	r10,r11
80003dec:	c1 f0       	breq	80003e2a <get_arg+0x172>
80003dee:	e0 8b 00 14 	brhi	80003e16 <get_arg+0x15e>
80003df2:	36 9b       	mov	r11,105
80003df4:	f6 0a 18 00 	cp.b	r10,r11
80003df8:	c1 e1       	brne	80003e34 <get_arg+0x17c>
80003dfa:	c0 e8       	rjmp	80003e16 <get_arg+0x15e>
80003dfc:	37 5b       	mov	r11,117
80003dfe:	f6 0a 18 00 	cp.b	r10,r11
80003e02:	c0 a0       	breq	80003e16 <get_arg+0x15e>
80003e04:	37 8b       	mov	r11,120
80003e06:	f6 0a 18 00 	cp.b	r10,r11
80003e0a:	c0 60       	breq	80003e16 <get_arg+0x15e>
80003e0c:	37 3b       	mov	r11,115
80003e0e:	f6 0a 18 00 	cp.b	r10,r11
80003e12:	c1 11       	brne	80003e34 <get_arg+0x17c>
80003e14:	c0 b8       	rjmp	80003e2a <get_arg+0x172>
80003e16:	ed b4 00 04 	bld	r4,0x4
80003e1a:	c0 a0       	breq	80003e2e <get_arg+0x176>
80003e1c:	ed b4 00 05 	bld	r4,0x5
80003e20:	c0 91       	brne	80003e32 <get_arg+0x17a>
80003e22:	30 20       	mov	r0,2
80003e24:	c0 88       	rjmp	80003e34 <get_arg+0x17c>
80003e26:	30 40       	mov	r0,4
80003e28:	c0 68       	rjmp	80003e34 <get_arg+0x17c>
80003e2a:	30 30       	mov	r0,3
80003e2c:	c0 48       	rjmp	80003e34 <get_arg+0x17c>
80003e2e:	30 10       	mov	r0,1
80003e30:	c0 28       	rjmp	80003e34 <get_arg+0x17c>
80003e32:	30 00       	mov	r0,0
80003e34:	40 3b       	lddsp	r11,sp[0xc]
80003e36:	5b fb       	cp.w	r11,-1
80003e38:	c0 40       	breq	80003e40 <get_arg+0x188>
80003e3a:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80003e3e:	c7 08       	rjmp	80003f1e <get_arg+0x266>
80003e40:	58 60       	cp.w	r0,6
80003e42:	e0 8b 00 6e 	brhi	80003f1e <get_arg+0x266>
80003e46:	6c 0a       	ld.w	r10,r6[0x0]
80003e48:	ea cc ff ff 	sub	r12,r5,-1
80003e4c:	fe ce aa 68 	sub	lr,pc,-21912
80003e50:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80003e54:	f4 cb ff f8 	sub	r11,r10,-8
80003e58:	8d 0b       	st.w	r6[0x0],r11
80003e5a:	f4 ea 00 00 	ld.d	r10,r10[0]
80003e5e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003e62:	c0 f8       	rjmp	80003e80 <get_arg+0x1c8>
80003e64:	f4 cb ff fc 	sub	r11,r10,-4
80003e68:	8d 0b       	st.w	r6[0x0],r11
80003e6a:	74 0a       	ld.w	r10,r10[0x0]
80003e6c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003e70:	c0 88       	rjmp	80003e80 <get_arg+0x1c8>
80003e72:	f4 cb ff f8 	sub	r11,r10,-8
80003e76:	8d 0b       	st.w	r6[0x0],r11
80003e78:	f4 ea 00 00 	ld.d	r10,r10[0]
80003e7c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003e80:	0e 9b       	mov	r11,r7
80003e82:	18 95       	mov	r5,r12
80003e84:	c4 e8       	rjmp	80003f20 <get_arg+0x268>
80003e86:	62 0a       	ld.w	r10,r1[0x0]
80003e88:	5b fa       	cp.w	r10,-1
80003e8a:	c0 b1       	brne	80003ea0 <get_arg+0x1e8>
80003e8c:	50 19       	stdsp	sp[0x4],r9
80003e8e:	50 28       	stdsp	sp[0x8],r8
80003e90:	e0 6a 00 80 	mov	r10,128
80003e94:	30 0b       	mov	r11,0
80003e96:	02 9c       	mov	r12,r1
80003e98:	e0 a0 1d 78 	rcall	80007988 <memset>
80003e9c:	40 28       	lddsp	r8,sp[0x8]
80003e9e:	40 19       	lddsp	r9,sp[0x4]
80003ea0:	e4 cc 00 01 	sub	r12,r2,1
80003ea4:	0e 9b       	mov	r11,r7
80003ea6:	50 3c       	stdsp	sp[0xc],r12
80003ea8:	f2 0c 0c 49 	max	r9,r9,r12
80003eac:	c3 a8       	rjmp	80003f20 <get_arg+0x268>
80003eae:	62 0a       	ld.w	r10,r1[0x0]
80003eb0:	5b fa       	cp.w	r10,-1
80003eb2:	c0 b1       	brne	80003ec8 <get_arg+0x210>
80003eb4:	50 19       	stdsp	sp[0x4],r9
80003eb6:	50 28       	stdsp	sp[0x8],r8
80003eb8:	e0 6a 00 80 	mov	r10,128
80003ebc:	30 0b       	mov	r11,0
80003ebe:	02 9c       	mov	r12,r1
80003ec0:	e0 a0 1d 64 	rcall	80007988 <memset>
80003ec4:	40 28       	lddsp	r8,sp[0x8]
80003ec6:	40 19       	lddsp	r9,sp[0x4]
80003ec8:	20 12       	sub	r2,1
80003eca:	30 0a       	mov	r10,0
80003ecc:	0e 9b       	mov	r11,r7
80003ece:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80003ed2:	f2 02 0c 49 	max	r9,r9,r2
80003ed6:	c2 58       	rjmp	80003f20 <get_arg+0x268>
80003ed8:	16 97       	mov	r7,r11
80003eda:	6c 0a       	ld.w	r10,r6[0x0]
80003edc:	f4 cb ff fc 	sub	r11,r10,-4
80003ee0:	8d 0b       	st.w	r6[0x0],r11
80003ee2:	74 0a       	ld.w	r10,r10[0x0]
80003ee4:	0e 9b       	mov	r11,r7
80003ee6:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003eea:	2f f5       	sub	r5,-1
80003eec:	c1 a8       	rjmp	80003f20 <get_arg+0x268>
80003eee:	f4 c2 00 30 	sub	r2,r10,48
80003ef2:	c0 68       	rjmp	80003efe <get_arg+0x246>
80003ef4:	e4 02 00 22 	add	r2,r2,r2<<0x2
80003ef8:	2f f7       	sub	r7,-1
80003efa:	f4 02 00 12 	add	r2,r10,r2<<0x1
80003efe:	0f 8a       	ld.ub	r10,r7[0x0]
80003f00:	58 0a       	cp.w	r10,0
80003f02:	c0 e0       	breq	80003f1e <get_arg+0x266>
80003f04:	23 0a       	sub	r10,48
80003f06:	58 9a       	cp.w	r10,9
80003f08:	fe 98 ff f6 	brls	80003ef4 <get_arg+0x23c>
80003f0c:	c0 98       	rjmp	80003f1e <get_arg+0x266>
80003f0e:	2f f7       	sub	r7,-1
80003f10:	0f 8a       	ld.ub	r10,r7[0x0]
80003f12:	58 0a       	cp.w	r10,0
80003f14:	c0 50       	breq	80003f1e <get_arg+0x266>
80003f16:	23 0a       	sub	r10,48
80003f18:	58 9a       	cp.w	r10,9
80003f1a:	fe 98 ff fa 	brls	80003f0e <get_arg+0x256>
80003f1e:	0e 9b       	mov	r11,r7
80003f20:	40 7c       	lddsp	r12,sp[0x1c]
80003f22:	30 ba       	mov	r10,11
80003f24:	f4 0c 18 00 	cp.b	r12,r10
80003f28:	fe 91 fe f2 	brne	80003d0c <get_arg+0x54>
80003f2c:	40 42       	lddsp	r2,sp[0x10]
80003f2e:	17 8c       	ld.ub	r12,r11[0x0]
80003f30:	0a 32       	cp.w	r2,r5
80003f32:	5f 4a       	srge	r10
80003f34:	f0 0c 18 00 	cp.b	r12,r8
80003f38:	5f 1c       	srne	r12
80003f3a:	f9 ea 00 0a 	and	r10,r12,r10
80003f3e:	f0 0a 18 00 	cp.b	r10,r8
80003f42:	fe 91 fe cf 	brne	80003ce0 <get_arg+0x28>
80003f46:	30 08       	mov	r8,0
80003f48:	40 4e       	lddsp	lr,sp[0x10]
80003f4a:	17 8a       	ld.ub	r10,r11[0x0]
80003f4c:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003f50:	f0 0a 18 00 	cp.b	r10,r8
80003f54:	fc 09 17 10 	movne	r9,lr
80003f58:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003f5c:	06 9e       	mov	lr,r3
80003f5e:	c2 a8       	rjmp	80003fb2 <get_arg+0x2fa>
80003f60:	62 0a       	ld.w	r10,r1[0x0]
80003f62:	58 3a       	cp.w	r10,3
80003f64:	c1 e0       	breq	80003fa0 <get_arg+0x2e8>
80003f66:	e0 89 00 07 	brgt	80003f74 <get_arg+0x2bc>
80003f6a:	58 1a       	cp.w	r10,1
80003f6c:	c1 a0       	breq	80003fa0 <get_arg+0x2e8>
80003f6e:	58 2a       	cp.w	r10,2
80003f70:	c1 81       	brne	80003fa0 <get_arg+0x2e8>
80003f72:	c0 58       	rjmp	80003f7c <get_arg+0x2c4>
80003f74:	58 5a       	cp.w	r10,5
80003f76:	c0 c0       	breq	80003f8e <get_arg+0x2d6>
80003f78:	c0 b5       	brlt	80003f8e <get_arg+0x2d6>
80003f7a:	c1 38       	rjmp	80003fa0 <get_arg+0x2e8>
80003f7c:	6c 0a       	ld.w	r10,r6[0x0]
80003f7e:	f4 cc ff f8 	sub	r12,r10,-8
80003f82:	8d 0c       	st.w	r6[0x0],r12
80003f84:	f4 e2 00 00 	ld.d	r2,r10[0]
80003f88:	f0 e3 00 00 	st.d	r8[0],r2
80003f8c:	c1 08       	rjmp	80003fac <get_arg+0x2f4>
80003f8e:	6c 0a       	ld.w	r10,r6[0x0]
80003f90:	f4 cc ff f8 	sub	r12,r10,-8
80003f94:	8d 0c       	st.w	r6[0x0],r12
80003f96:	f4 e2 00 00 	ld.d	r2,r10[0]
80003f9a:	f0 e3 00 00 	st.d	r8[0],r2
80003f9e:	c0 78       	rjmp	80003fac <get_arg+0x2f4>
80003fa0:	6c 0a       	ld.w	r10,r6[0x0]
80003fa2:	f4 cc ff fc 	sub	r12,r10,-4
80003fa6:	8d 0c       	st.w	r6[0x0],r12
80003fa8:	74 0a       	ld.w	r10,r10[0x0]
80003faa:	91 0a       	st.w	r8[0x0],r10
80003fac:	2f f5       	sub	r5,-1
80003fae:	2f 88       	sub	r8,-8
80003fb0:	2f c1       	sub	r1,-4
80003fb2:	12 35       	cp.w	r5,r9
80003fb4:	fe 9a ff d6 	brle	80003f60 <get_arg+0x2a8>
80003fb8:	1c 93       	mov	r3,lr
80003fba:	40 52       	lddsp	r2,sp[0x14]
80003fbc:	40 6e       	lddsp	lr,sp[0x18]
80003fbe:	85 05       	st.w	r2[0x0],r5
80003fc0:	9d 0b       	st.w	lr[0x0],r11
80003fc2:	40 4b       	lddsp	r11,sp[0x10]
80003fc4:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003fc8:	2f 8d       	sub	sp,-32
80003fca:	d8 32       	popm	r0-r7,pc

80003fcc <__sprint_r>:
80003fcc:	d4 21       	pushm	r4-r7,lr
80003fce:	14 97       	mov	r7,r10
80003fd0:	74 28       	ld.w	r8,r10[0x8]
80003fd2:	58 08       	cp.w	r8,0
80003fd4:	c0 41       	brne	80003fdc <__sprint_r+0x10>
80003fd6:	95 18       	st.w	r10[0x4],r8
80003fd8:	10 9c       	mov	r12,r8
80003fda:	d8 22       	popm	r4-r7,pc
80003fdc:	e0 a0 18 b4 	rcall	80007144 <__sfvwrite_r>
80003fe0:	30 08       	mov	r8,0
80003fe2:	8f 18       	st.w	r7[0x4],r8
80003fe4:	8f 28       	st.w	r7[0x8],r8
80003fe6:	d8 22       	popm	r4-r7,pc

80003fe8 <_vfprintf_r>:
80003fe8:	d4 31       	pushm	r0-r7,lr
80003fea:	fa cd 06 bc 	sub	sp,sp,1724
80003fee:	51 09       	stdsp	sp[0x40],r9
80003ff0:	16 91       	mov	r1,r11
80003ff2:	14 97       	mov	r7,r10
80003ff4:	18 95       	mov	r5,r12
80003ff6:	e0 a0 1a 1d 	rcall	80007430 <_localeconv_r>
80003ffa:	78 0c       	ld.w	r12,r12[0x0]
80003ffc:	50 cc       	stdsp	sp[0x30],r12
80003ffe:	58 05       	cp.w	r5,0
80004000:	c0 70       	breq	8000400e <_vfprintf_r+0x26>
80004002:	6a 68       	ld.w	r8,r5[0x18]
80004004:	58 08       	cp.w	r8,0
80004006:	c0 41       	brne	8000400e <_vfprintf_r+0x26>
80004008:	0a 9c       	mov	r12,r5
8000400a:	e0 a0 17 3d 	rcall	80006e84 <__sinit>
8000400e:	fe c8 a8 66 	sub	r8,pc,-22426
80004012:	10 31       	cp.w	r1,r8
80004014:	c0 31       	brne	8000401a <_vfprintf_r+0x32>
80004016:	6a 01       	ld.w	r1,r5[0x0]
80004018:	c0 c8       	rjmp	80004030 <_vfprintf_r+0x48>
8000401a:	fe c8 a8 52 	sub	r8,pc,-22446
8000401e:	10 31       	cp.w	r1,r8
80004020:	c0 31       	brne	80004026 <_vfprintf_r+0x3e>
80004022:	6a 11       	ld.w	r1,r5[0x4]
80004024:	c0 68       	rjmp	80004030 <_vfprintf_r+0x48>
80004026:	fe c8 a8 3e 	sub	r8,pc,-22466
8000402a:	10 31       	cp.w	r1,r8
8000402c:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004030:	82 68       	ld.sh	r8,r1[0xc]
80004032:	ed b8 00 03 	bld	r8,0x3
80004036:	c0 41       	brne	8000403e <_vfprintf_r+0x56>
80004038:	62 48       	ld.w	r8,r1[0x10]
8000403a:	58 08       	cp.w	r8,0
8000403c:	c0 71       	brne	8000404a <_vfprintf_r+0x62>
8000403e:	02 9b       	mov	r11,r1
80004040:	0a 9c       	mov	r12,r5
80004042:	e0 a0 0f 5d 	rcall	80005efc <__swsetup_r>
80004046:	e0 81 0f 54 	brne	80005eee <_vfprintf_r+0x1f06>
8000404a:	82 68       	ld.sh	r8,r1[0xc]
8000404c:	10 99       	mov	r9,r8
8000404e:	e2 19 00 1a 	andl	r9,0x1a,COH
80004052:	58 a9       	cp.w	r9,10
80004054:	c3 c1       	brne	800040cc <_vfprintf_r+0xe4>
80004056:	82 79       	ld.sh	r9,r1[0xe]
80004058:	30 0a       	mov	r10,0
8000405a:	f4 09 19 00 	cp.h	r9,r10
8000405e:	c3 75       	brlt	800040cc <_vfprintf_r+0xe4>
80004060:	a1 d8       	cbr	r8,0x1
80004062:	fb 58 05 d0 	st.h	sp[1488],r8
80004066:	62 88       	ld.w	r8,r1[0x20]
80004068:	fb 48 05 e4 	st.w	sp[1508],r8
8000406c:	62 a8       	ld.w	r8,r1[0x28]
8000406e:	fb 48 05 ec 	st.w	sp[1516],r8
80004072:	fa c8 ff bc 	sub	r8,sp,-68
80004076:	fb 48 05 d4 	st.w	sp[1492],r8
8000407a:	fb 48 05 c4 	st.w	sp[1476],r8
8000407e:	e0 68 04 00 	mov	r8,1024
80004082:	fb 48 05 d8 	st.w	sp[1496],r8
80004086:	fb 48 05 cc 	st.w	sp[1484],r8
8000408a:	30 08       	mov	r8,0
8000408c:	fb 59 05 d2 	st.h	sp[1490],r9
80004090:	0e 9a       	mov	r10,r7
80004092:	41 09       	lddsp	r9,sp[0x40]
80004094:	fa c7 fa 3c 	sub	r7,sp,-1476
80004098:	fb 48 05 dc 	st.w	sp[1500],r8
8000409c:	0a 9c       	mov	r12,r5
8000409e:	0e 9b       	mov	r11,r7
800040a0:	ca 4f       	rcall	80003fe8 <_vfprintf_r>
800040a2:	50 bc       	stdsp	sp[0x2c],r12
800040a4:	c0 95       	brlt	800040b6 <_vfprintf_r+0xce>
800040a6:	0e 9b       	mov	r11,r7
800040a8:	0a 9c       	mov	r12,r5
800040aa:	e0 a0 16 15 	rcall	80006cd4 <_fflush_r>
800040ae:	40 be       	lddsp	lr,sp[0x2c]
800040b0:	f9 be 01 ff 	movne	lr,-1
800040b4:	50 be       	stdsp	sp[0x2c],lr
800040b6:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800040ba:	ed b8 00 06 	bld	r8,0x6
800040be:	e0 81 0f 1a 	brne	80005ef2 <_vfprintf_r+0x1f0a>
800040c2:	82 68       	ld.sh	r8,r1[0xc]
800040c4:	a7 a8       	sbr	r8,0x6
800040c6:	a2 68       	st.h	r1[0xc],r8
800040c8:	e0 8f 0f 15 	bral	80005ef2 <_vfprintf_r+0x1f0a>
800040cc:	30 08       	mov	r8,0
800040ce:	fb 48 06 b4 	st.w	sp[1716],r8
800040d2:	fb 48 06 90 	st.w	sp[1680],r8
800040d6:	fb 48 06 8c 	st.w	sp[1676],r8
800040da:	fb 48 06 b0 	st.w	sp[1712],r8
800040de:	30 08       	mov	r8,0
800040e0:	30 09       	mov	r9,0
800040e2:	50 a7       	stdsp	sp[0x28],r7
800040e4:	50 78       	stdsp	sp[0x1c],r8
800040e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800040ea:	3f f8       	mov	r8,-1
800040ec:	50 59       	stdsp	sp[0x14],r9
800040ee:	fb 43 06 88 	st.w	sp[1672],r3
800040f2:	fb 48 05 44 	st.w	sp[1348],r8
800040f6:	12 9c       	mov	r12,r9
800040f8:	50 69       	stdsp	sp[0x18],r9
800040fa:	50 d9       	stdsp	sp[0x34],r9
800040fc:	50 e9       	stdsp	sp[0x38],r9
800040fe:	50 b9       	stdsp	sp[0x2c],r9
80004100:	12 97       	mov	r7,r9
80004102:	0a 94       	mov	r4,r5
80004104:	40 a2       	lddsp	r2,sp[0x28]
80004106:	32 5a       	mov	r10,37
80004108:	30 08       	mov	r8,0
8000410a:	c0 28       	rjmp	8000410e <_vfprintf_r+0x126>
8000410c:	2f f2       	sub	r2,-1
8000410e:	05 89       	ld.ub	r9,r2[0x0]
80004110:	f0 09 18 00 	cp.b	r9,r8
80004114:	5f 1b       	srne	r11
80004116:	f4 09 18 00 	cp.b	r9,r10
8000411a:	5f 19       	srne	r9
8000411c:	f3 eb 00 0b 	and	r11,r9,r11
80004120:	f0 0b 18 00 	cp.b	r11,r8
80004124:	cf 41       	brne	8000410c <_vfprintf_r+0x124>
80004126:	40 ab       	lddsp	r11,sp[0x28]
80004128:	e4 0b 01 06 	sub	r6,r2,r11
8000412c:	c1 e0       	breq	80004168 <_vfprintf_r+0x180>
8000412e:	fa f8 06 90 	ld.w	r8,sp[1680]
80004132:	0c 08       	add	r8,r6
80004134:	87 0b       	st.w	r3[0x0],r11
80004136:	fb 48 06 90 	st.w	sp[1680],r8
8000413a:	87 16       	st.w	r3[0x4],r6
8000413c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004140:	2f f8       	sub	r8,-1
80004142:	fb 48 06 8c 	st.w	sp[1676],r8
80004146:	58 78       	cp.w	r8,7
80004148:	e0 89 00 04 	brgt	80004150 <_vfprintf_r+0x168>
8000414c:	2f 83       	sub	r3,-8
8000414e:	c0 a8       	rjmp	80004162 <_vfprintf_r+0x17a>
80004150:	fa ca f9 78 	sub	r10,sp,-1672
80004154:	02 9b       	mov	r11,r1
80004156:	08 9c       	mov	r12,r4
80004158:	c3 af       	rcall	80003fcc <__sprint_r>
8000415a:	e0 81 0e c6 	brne	80005ee6 <_vfprintf_r+0x1efe>
8000415e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004162:	40 ba       	lddsp	r10,sp[0x2c]
80004164:	0c 0a       	add	r10,r6
80004166:	50 ba       	stdsp	sp[0x2c],r10
80004168:	05 89       	ld.ub	r9,r2[0x0]
8000416a:	30 08       	mov	r8,0
8000416c:	f0 09 18 00 	cp.b	r9,r8
80004170:	e0 80 0e aa 	breq	80005ec4 <_vfprintf_r+0x1edc>
80004174:	30 09       	mov	r9,0
80004176:	fb 68 06 bb 	st.b	sp[1723],r8
8000417a:	0e 96       	mov	r6,r7
8000417c:	e4 c8 ff ff 	sub	r8,r2,-1
80004180:	3f fe       	mov	lr,-1
80004182:	50 93       	stdsp	sp[0x24],r3
80004184:	50 41       	stdsp	sp[0x10],r1
80004186:	0e 93       	mov	r3,r7
80004188:	04 91       	mov	r1,r2
8000418a:	50 89       	stdsp	sp[0x20],r9
8000418c:	50 a8       	stdsp	sp[0x28],r8
8000418e:	50 2e       	stdsp	sp[0x8],lr
80004190:	50 39       	stdsp	sp[0xc],r9
80004192:	12 95       	mov	r5,r9
80004194:	12 90       	mov	r0,r9
80004196:	10 97       	mov	r7,r8
80004198:	08 92       	mov	r2,r4
8000419a:	c0 78       	rjmp	800041a8 <_vfprintf_r+0x1c0>
8000419c:	3f fc       	mov	r12,-1
8000419e:	08 97       	mov	r7,r4
800041a0:	50 2c       	stdsp	sp[0x8],r12
800041a2:	c0 38       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800041a4:	30 0b       	mov	r11,0
800041a6:	50 3b       	stdsp	sp[0xc],r11
800041a8:	0f 38       	ld.ub	r8,r7++
800041aa:	c0 28       	rjmp	800041ae <_vfprintf_r+0x1c6>
800041ac:	12 90       	mov	r0,r9
800041ae:	f0 c9 00 20 	sub	r9,r8,32
800041b2:	e0 49 00 58 	cp.w	r9,88
800041b6:	e0 8b 0a 30 	brhi	80005616 <_vfprintf_r+0x162e>
800041ba:	fe ca ad ba 	sub	r10,pc,-21062
800041be:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800041c2:	50 a7       	stdsp	sp[0x28],r7
800041c4:	50 80       	stdsp	sp[0x20],r0
800041c6:	0c 97       	mov	r7,r6
800041c8:	04 94       	mov	r4,r2
800041ca:	06 96       	mov	r6,r3
800041cc:	02 92       	mov	r2,r1
800041ce:	fe c9 ab 92 	sub	r9,pc,-21614
800041d2:	40 93       	lddsp	r3,sp[0x24]
800041d4:	10 90       	mov	r0,r8
800041d6:	40 41       	lddsp	r1,sp[0x10]
800041d8:	50 d9       	stdsp	sp[0x34],r9
800041da:	e0 8f 08 8e 	bral	800052f6 <_vfprintf_r+0x130e>
800041de:	30 08       	mov	r8,0
800041e0:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800041e4:	f0 09 18 00 	cp.b	r9,r8
800041e8:	ce 01       	brne	800041a8 <_vfprintf_r+0x1c0>
800041ea:	32 08       	mov	r8,32
800041ec:	c6 e8       	rjmp	800042c8 <_vfprintf_r+0x2e0>
800041ee:	a1 a5       	sbr	r5,0x0
800041f0:	cd cb       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800041f2:	0f 89       	ld.ub	r9,r7[0x0]
800041f4:	f2 c8 00 30 	sub	r8,r9,48
800041f8:	58 98       	cp.w	r8,9
800041fa:	e0 8b 00 1d 	brhi	80004234 <_vfprintf_r+0x24c>
800041fe:	ee c8 ff ff 	sub	r8,r7,-1
80004202:	30 0b       	mov	r11,0
80004204:	23 09       	sub	r9,48
80004206:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000420a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000420e:	11 39       	ld.ub	r9,r8++
80004210:	f2 ca 00 30 	sub	r10,r9,48
80004214:	58 9a       	cp.w	r10,9
80004216:	fe 98 ff f7 	brls	80004204 <_vfprintf_r+0x21c>
8000421a:	e0 49 00 24 	cp.w	r9,36
8000421e:	cc 31       	brne	800041a4 <_vfprintf_r+0x1bc>
80004220:	e0 4b 00 20 	cp.w	r11,32
80004224:	e0 89 0e 60 	brgt	80005ee4 <_vfprintf_r+0x1efc>
80004228:	20 1b       	sub	r11,1
8000422a:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000422e:	12 3b       	cp.w	r11,r9
80004230:	c0 95       	brlt	80004242 <_vfprintf_r+0x25a>
80004232:	c1 08       	rjmp	80004252 <_vfprintf_r+0x26a>
80004234:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004238:	ec ca ff ff 	sub	r10,r6,-1
8000423c:	12 36       	cp.w	r6,r9
8000423e:	c1 f5       	brlt	8000427c <_vfprintf_r+0x294>
80004240:	c2 68       	rjmp	8000428c <_vfprintf_r+0x2a4>
80004242:	fa ce f9 44 	sub	lr,sp,-1724
80004246:	10 97       	mov	r7,r8
80004248:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000424c:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004250:	c3 58       	rjmp	800042ba <_vfprintf_r+0x2d2>
80004252:	10 97       	mov	r7,r8
80004254:	fa c8 f9 50 	sub	r8,sp,-1712
80004258:	1a d8       	st.w	--sp,r8
8000425a:	fa c8 fa b8 	sub	r8,sp,-1352
8000425e:	1a d8       	st.w	--sp,r8
80004260:	fa c8 fb b4 	sub	r8,sp,-1100
80004264:	02 9a       	mov	r10,r1
80004266:	1a d8       	st.w	--sp,r8
80004268:	04 9c       	mov	r12,r2
8000426a:	fa c8 f9 40 	sub	r8,sp,-1728
8000426e:	fa c9 ff b4 	sub	r9,sp,-76
80004272:	fe b0 fd 23 	rcall	80003cb8 <get_arg>
80004276:	2f dd       	sub	sp,-12
80004278:	78 00       	ld.w	r0,r12[0x0]
8000427a:	c2 08       	rjmp	800042ba <_vfprintf_r+0x2d2>
8000427c:	fa cc f9 44 	sub	r12,sp,-1724
80004280:	14 96       	mov	r6,r10
80004282:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004286:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000428a:	c1 88       	rjmp	800042ba <_vfprintf_r+0x2d2>
8000428c:	41 08       	lddsp	r8,sp[0x40]
8000428e:	59 f9       	cp.w	r9,31
80004290:	e0 89 00 11 	brgt	800042b2 <_vfprintf_r+0x2ca>
80004294:	f0 cb ff fc 	sub	r11,r8,-4
80004298:	51 0b       	stdsp	sp[0x40],r11
8000429a:	70 00       	ld.w	r0,r8[0x0]
8000429c:	fa cb f9 44 	sub	r11,sp,-1724
800042a0:	f6 09 00 38 	add	r8,r11,r9<<0x3
800042a4:	f1 40 fd 88 	st.w	r8[-632],r0
800042a8:	2f f9       	sub	r9,-1
800042aa:	14 96       	mov	r6,r10
800042ac:	fb 49 06 b4 	st.w	sp[1716],r9
800042b0:	c0 58       	rjmp	800042ba <_vfprintf_r+0x2d2>
800042b2:	70 00       	ld.w	r0,r8[0x0]
800042b4:	14 96       	mov	r6,r10
800042b6:	2f c8       	sub	r8,-4
800042b8:	51 08       	stdsp	sp[0x40],r8
800042ba:	58 00       	cp.w	r0,0
800042bc:	fe 94 ff 76 	brge	800041a8 <_vfprintf_r+0x1c0>
800042c0:	5c 30       	neg	r0
800042c2:	a3 a5       	sbr	r5,0x2
800042c4:	c7 2b       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800042c6:	32 b8       	mov	r8,43
800042c8:	fb 68 06 bb 	st.b	sp[1723],r8
800042cc:	c6 eb       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800042ce:	0f 38       	ld.ub	r8,r7++
800042d0:	e0 48 00 2a 	cp.w	r8,42
800042d4:	c0 30       	breq	800042da <_vfprintf_r+0x2f2>
800042d6:	30 09       	mov	r9,0
800042d8:	c7 98       	rjmp	800043ca <_vfprintf_r+0x3e2>
800042da:	0f 88       	ld.ub	r8,r7[0x0]
800042dc:	f0 c9 00 30 	sub	r9,r8,48
800042e0:	58 99       	cp.w	r9,9
800042e2:	e0 8b 00 1f 	brhi	80004320 <_vfprintf_r+0x338>
800042e6:	ee c4 ff ff 	sub	r4,r7,-1
800042ea:	30 0b       	mov	r11,0
800042ec:	23 08       	sub	r8,48
800042ee:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800042f2:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800042f6:	09 38       	ld.ub	r8,r4++
800042f8:	f0 c9 00 30 	sub	r9,r8,48
800042fc:	58 99       	cp.w	r9,9
800042fe:	fe 98 ff f7 	brls	800042ec <_vfprintf_r+0x304>
80004302:	e0 48 00 24 	cp.w	r8,36
80004306:	fe 91 ff 4f 	brne	800041a4 <_vfprintf_r+0x1bc>
8000430a:	e0 4b 00 20 	cp.w	r11,32
8000430e:	e0 89 0d eb 	brgt	80005ee4 <_vfprintf_r+0x1efc>
80004312:	20 1b       	sub	r11,1
80004314:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004318:	10 3b       	cp.w	r11,r8
8000431a:	c0 a5       	brlt	8000432e <_vfprintf_r+0x346>
8000431c:	c1 18       	rjmp	8000433e <_vfprintf_r+0x356>
8000431e:	d7 03       	nop
80004320:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004324:	ec c9 ff ff 	sub	r9,r6,-1
80004328:	14 36       	cp.w	r6,r10
8000432a:	c1 f5       	brlt	80004368 <_vfprintf_r+0x380>
8000432c:	c2 88       	rjmp	8000437c <_vfprintf_r+0x394>
8000432e:	fa ca f9 44 	sub	r10,sp,-1724
80004332:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80004336:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000433a:	50 2b       	stdsp	sp[0x8],r11
8000433c:	c3 c8       	rjmp	800043b4 <_vfprintf_r+0x3cc>
8000433e:	fa c8 f9 50 	sub	r8,sp,-1712
80004342:	1a d8       	st.w	--sp,r8
80004344:	fa c8 fa b8 	sub	r8,sp,-1352
80004348:	1a d8       	st.w	--sp,r8
8000434a:	fa c8 fb b4 	sub	r8,sp,-1100
8000434e:	02 9a       	mov	r10,r1
80004350:	1a d8       	st.w	--sp,r8
80004352:	04 9c       	mov	r12,r2
80004354:	fa c8 f9 40 	sub	r8,sp,-1728
80004358:	fa c9 ff b4 	sub	r9,sp,-76
8000435c:	fe b0 fc ae 	rcall	80003cb8 <get_arg>
80004360:	2f dd       	sub	sp,-12
80004362:	78 0c       	ld.w	r12,r12[0x0]
80004364:	50 2c       	stdsp	sp[0x8],r12
80004366:	c2 78       	rjmp	800043b4 <_vfprintf_r+0x3cc>
80004368:	12 96       	mov	r6,r9
8000436a:	0e 94       	mov	r4,r7
8000436c:	fa c9 f9 44 	sub	r9,sp,-1724
80004370:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004374:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004378:	50 28       	stdsp	sp[0x8],r8
8000437a:	c1 d8       	rjmp	800043b4 <_vfprintf_r+0x3cc>
8000437c:	41 08       	lddsp	r8,sp[0x40]
8000437e:	59 fa       	cp.w	r10,31
80004380:	e0 89 00 14 	brgt	800043a8 <_vfprintf_r+0x3c0>
80004384:	f0 cb ff fc 	sub	r11,r8,-4
80004388:	70 08       	ld.w	r8,r8[0x0]
8000438a:	51 0b       	stdsp	sp[0x40],r11
8000438c:	50 28       	stdsp	sp[0x8],r8
8000438e:	fa c6 f9 44 	sub	r6,sp,-1724
80004392:	40 2e       	lddsp	lr,sp[0x8]
80004394:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004398:	f1 4e fd 88 	st.w	r8[-632],lr
8000439c:	2f fa       	sub	r10,-1
8000439e:	0e 94       	mov	r4,r7
800043a0:	fb 4a 06 b4 	st.w	sp[1716],r10
800043a4:	12 96       	mov	r6,r9
800043a6:	c0 78       	rjmp	800043b4 <_vfprintf_r+0x3cc>
800043a8:	70 0c       	ld.w	r12,r8[0x0]
800043aa:	0e 94       	mov	r4,r7
800043ac:	2f c8       	sub	r8,-4
800043ae:	50 2c       	stdsp	sp[0x8],r12
800043b0:	12 96       	mov	r6,r9
800043b2:	51 08       	stdsp	sp[0x40],r8
800043b4:	40 2b       	lddsp	r11,sp[0x8]
800043b6:	58 0b       	cp.w	r11,0
800043b8:	fe 95 fe f2 	brlt	8000419c <_vfprintf_r+0x1b4>
800043bc:	08 97       	mov	r7,r4
800043be:	cf 5a       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800043c0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043c4:	0f 38       	ld.ub	r8,r7++
800043c6:	f4 09 00 19 	add	r9,r10,r9<<0x1
800043ca:	f0 ca 00 30 	sub	r10,r8,48
800043ce:	58 9a       	cp.w	r10,9
800043d0:	fe 98 ff f8 	brls	800043c0 <_vfprintf_r+0x3d8>
800043d4:	3f fa       	mov	r10,-1
800043d6:	f2 0a 0c 49 	max	r9,r9,r10
800043da:	50 29       	stdsp	sp[0x8],r9
800043dc:	ce 9a       	rjmp	800041ae <_vfprintf_r+0x1c6>
800043de:	a7 b5       	sbr	r5,0x7
800043e0:	ce 4a       	rjmp	800041a8 <_vfprintf_r+0x1c0>
800043e2:	30 09       	mov	r9,0
800043e4:	23 08       	sub	r8,48
800043e6:	f2 09 00 29 	add	r9,r9,r9<<0x2
800043ea:	f0 09 00 19 	add	r9,r8,r9<<0x1
800043ee:	0f 38       	ld.ub	r8,r7++
800043f0:	f0 ca 00 30 	sub	r10,r8,48
800043f4:	58 9a       	cp.w	r10,9
800043f6:	fe 98 ff f7 	brls	800043e4 <_vfprintf_r+0x3fc>
800043fa:	e0 48 00 24 	cp.w	r8,36
800043fe:	fe 91 fe d7 	brne	800041ac <_vfprintf_r+0x1c4>
80004402:	e0 49 00 20 	cp.w	r9,32
80004406:	e0 89 0d 6f 	brgt	80005ee4 <_vfprintf_r+0x1efc>
8000440a:	f2 c3 00 01 	sub	r3,r9,1
8000440e:	30 19       	mov	r9,1
80004410:	50 39       	stdsp	sp[0xc],r9
80004412:	cc ba       	rjmp	800041a8 <_vfprintf_r+0x1c0>
80004414:	a3 b5       	sbr	r5,0x3
80004416:	cc 9a       	rjmp	800041a8 <_vfprintf_r+0x1c0>
80004418:	a7 a5       	sbr	r5,0x6
8000441a:	cc 7a       	rjmp	800041a8 <_vfprintf_r+0x1c0>
8000441c:	0a 98       	mov	r8,r5
8000441e:	a5 b5       	sbr	r5,0x5
80004420:	a5 a8       	sbr	r8,0x4
80004422:	0f 89       	ld.ub	r9,r7[0x0]
80004424:	36 ce       	mov	lr,108
80004426:	fc 09 18 00 	cp.b	r9,lr
8000442a:	f7 b7 00 ff 	subeq	r7,-1
8000442e:	f0 05 17 10 	movne	r5,r8
80004432:	cb ba       	rjmp	800041a8 <_vfprintf_r+0x1c0>
80004434:	a5 b5       	sbr	r5,0x5
80004436:	cb 9a       	rjmp	800041a8 <_vfprintf_r+0x1c0>
80004438:	50 a7       	stdsp	sp[0x28],r7
8000443a:	50 80       	stdsp	sp[0x20],r0
8000443c:	0c 97       	mov	r7,r6
8000443e:	10 90       	mov	r0,r8
80004440:	06 96       	mov	r6,r3
80004442:	04 94       	mov	r4,r2
80004444:	40 93       	lddsp	r3,sp[0x24]
80004446:	02 92       	mov	r2,r1
80004448:	0e 99       	mov	r9,r7
8000444a:	40 41       	lddsp	r1,sp[0x10]
8000444c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004450:	40 3c       	lddsp	r12,sp[0xc]
80004452:	58 0c       	cp.w	r12,0
80004454:	c1 d0       	breq	8000448e <_vfprintf_r+0x4a6>
80004456:	10 36       	cp.w	r6,r8
80004458:	c0 64       	brge	80004464 <_vfprintf_r+0x47c>
8000445a:	fa cb f9 44 	sub	r11,sp,-1724
8000445e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004462:	c1 d8       	rjmp	8000449c <_vfprintf_r+0x4b4>
80004464:	fa c8 f9 50 	sub	r8,sp,-1712
80004468:	1a d8       	st.w	--sp,r8
8000446a:	fa c8 fa b8 	sub	r8,sp,-1352
8000446e:	1a d8       	st.w	--sp,r8
80004470:	fa c8 fb b4 	sub	r8,sp,-1100
80004474:	1a d8       	st.w	--sp,r8
80004476:	fa c8 f9 40 	sub	r8,sp,-1728
8000447a:	fa c9 ff b4 	sub	r9,sp,-76
8000447e:	04 9a       	mov	r10,r2
80004480:	0c 9b       	mov	r11,r6
80004482:	08 9c       	mov	r12,r4
80004484:	fe b0 fc 1a 	rcall	80003cb8 <get_arg>
80004488:	2f dd       	sub	sp,-12
8000448a:	19 b8       	ld.ub	r8,r12[0x3]
8000448c:	c2 28       	rjmp	800044d0 <_vfprintf_r+0x4e8>
8000448e:	2f f7       	sub	r7,-1
80004490:	10 39       	cp.w	r9,r8
80004492:	c0 84       	brge	800044a2 <_vfprintf_r+0x4ba>
80004494:	fa ca f9 44 	sub	r10,sp,-1724
80004498:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000449c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800044a0:	c1 88       	rjmp	800044d0 <_vfprintf_r+0x4e8>
800044a2:	41 09       	lddsp	r9,sp[0x40]
800044a4:	59 f8       	cp.w	r8,31
800044a6:	e0 89 00 12 	brgt	800044ca <_vfprintf_r+0x4e2>
800044aa:	f2 ca ff fc 	sub	r10,r9,-4
800044ae:	51 0a       	stdsp	sp[0x40],r10
800044b0:	72 09       	ld.w	r9,r9[0x0]
800044b2:	fa c6 f9 44 	sub	r6,sp,-1724
800044b6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800044ba:	2f f8       	sub	r8,-1
800044bc:	f5 49 fd 88 	st.w	r10[-632],r9
800044c0:	fb 48 06 b4 	st.w	sp[1716],r8
800044c4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800044c8:	c0 48       	rjmp	800044d0 <_vfprintf_r+0x4e8>
800044ca:	13 b8       	ld.ub	r8,r9[0x3]
800044cc:	2f c9       	sub	r9,-4
800044ce:	51 09       	stdsp	sp[0x40],r9
800044d0:	fb 68 06 60 	st.b	sp[1632],r8
800044d4:	30 0e       	mov	lr,0
800044d6:	30 08       	mov	r8,0
800044d8:	30 12       	mov	r2,1
800044da:	fb 68 06 bb 	st.b	sp[1723],r8
800044de:	50 2e       	stdsp	sp[0x8],lr
800044e0:	e0 8f 08 ad 	bral	8000563a <_vfprintf_r+0x1652>
800044e4:	50 a7       	stdsp	sp[0x28],r7
800044e6:	50 80       	stdsp	sp[0x20],r0
800044e8:	0c 97       	mov	r7,r6
800044ea:	04 94       	mov	r4,r2
800044ec:	06 96       	mov	r6,r3
800044ee:	02 92       	mov	r2,r1
800044f0:	40 93       	lddsp	r3,sp[0x24]
800044f2:	10 90       	mov	r0,r8
800044f4:	40 41       	lddsp	r1,sp[0x10]
800044f6:	a5 a5       	sbr	r5,0x4
800044f8:	c0 a8       	rjmp	8000450c <_vfprintf_r+0x524>
800044fa:	50 a7       	stdsp	sp[0x28],r7
800044fc:	50 80       	stdsp	sp[0x20],r0
800044fe:	0c 97       	mov	r7,r6
80004500:	04 94       	mov	r4,r2
80004502:	06 96       	mov	r6,r3
80004504:	02 92       	mov	r2,r1
80004506:	40 93       	lddsp	r3,sp[0x24]
80004508:	10 90       	mov	r0,r8
8000450a:	40 41       	lddsp	r1,sp[0x10]
8000450c:	ed b5 00 05 	bld	r5,0x5
80004510:	c5 11       	brne	800045b2 <_vfprintf_r+0x5ca>
80004512:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004516:	40 3c       	lddsp	r12,sp[0xc]
80004518:	58 0c       	cp.w	r12,0
8000451a:	c1 e0       	breq	80004556 <_vfprintf_r+0x56e>
8000451c:	10 36       	cp.w	r6,r8
8000451e:	c0 64       	brge	8000452a <_vfprintf_r+0x542>
80004520:	fa cb f9 44 	sub	r11,sp,-1724
80004524:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004528:	c2 08       	rjmp	80004568 <_vfprintf_r+0x580>
8000452a:	fa c8 f9 50 	sub	r8,sp,-1712
8000452e:	1a d8       	st.w	--sp,r8
80004530:	fa c8 fa b8 	sub	r8,sp,-1352
80004534:	0c 9b       	mov	r11,r6
80004536:	1a d8       	st.w	--sp,r8
80004538:	fa c8 fb b4 	sub	r8,sp,-1100
8000453c:	1a d8       	st.w	--sp,r8
8000453e:	fa c9 ff b4 	sub	r9,sp,-76
80004542:	fa c8 f9 40 	sub	r8,sp,-1728
80004546:	04 9a       	mov	r10,r2
80004548:	08 9c       	mov	r12,r4
8000454a:	fe b0 fb b7 	rcall	80003cb8 <get_arg>
8000454e:	2f dd       	sub	sp,-12
80004550:	78 1b       	ld.w	r11,r12[0x4]
80004552:	78 09       	ld.w	r9,r12[0x0]
80004554:	c2 b8       	rjmp	800045aa <_vfprintf_r+0x5c2>
80004556:	ee ca ff ff 	sub	r10,r7,-1
8000455a:	10 37       	cp.w	r7,r8
8000455c:	c0 b4       	brge	80004572 <_vfprintf_r+0x58a>
8000455e:	fa c9 f9 44 	sub	r9,sp,-1724
80004562:	14 97       	mov	r7,r10
80004564:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004568:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000456c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004570:	c1 d8       	rjmp	800045aa <_vfprintf_r+0x5c2>
80004572:	41 09       	lddsp	r9,sp[0x40]
80004574:	59 f8       	cp.w	r8,31
80004576:	e0 89 00 14 	brgt	8000459e <_vfprintf_r+0x5b6>
8000457a:	f2 cb ff f8 	sub	r11,r9,-8
8000457e:	51 0b       	stdsp	sp[0x40],r11
80004580:	fa c6 f9 44 	sub	r6,sp,-1724
80004584:	72 1b       	ld.w	r11,r9[0x4]
80004586:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000458a:	72 09       	ld.w	r9,r9[0x0]
8000458c:	f9 4b fd 8c 	st.w	r12[-628],r11
80004590:	f9 49 fd 88 	st.w	r12[-632],r9
80004594:	2f f8       	sub	r8,-1
80004596:	14 97       	mov	r7,r10
80004598:	fb 48 06 b4 	st.w	sp[1716],r8
8000459c:	c0 78       	rjmp	800045aa <_vfprintf_r+0x5c2>
8000459e:	f2 c8 ff f8 	sub	r8,r9,-8
800045a2:	72 1b       	ld.w	r11,r9[0x4]
800045a4:	14 97       	mov	r7,r10
800045a6:	51 08       	stdsp	sp[0x40],r8
800045a8:	72 09       	ld.w	r9,r9[0x0]
800045aa:	16 98       	mov	r8,r11
800045ac:	fa e9 00 00 	st.d	sp[0],r8
800045b0:	ca e8       	rjmp	8000470c <_vfprintf_r+0x724>
800045b2:	ed b5 00 04 	bld	r5,0x4
800045b6:	c1 71       	brne	800045e4 <_vfprintf_r+0x5fc>
800045b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045bc:	40 3e       	lddsp	lr,sp[0xc]
800045be:	58 0e       	cp.w	lr,0
800045c0:	c0 80       	breq	800045d0 <_vfprintf_r+0x5e8>
800045c2:	10 36       	cp.w	r6,r8
800045c4:	c6 94       	brge	80004696 <_vfprintf_r+0x6ae>
800045c6:	fa cc f9 44 	sub	r12,sp,-1724
800045ca:	f8 06 00 36 	add	r6,r12,r6<<0x3
800045ce:	c8 28       	rjmp	800046d2 <_vfprintf_r+0x6ea>
800045d0:	ee ca ff ff 	sub	r10,r7,-1
800045d4:	10 37       	cp.w	r7,r8
800045d6:	e0 84 00 81 	brge	800046d8 <_vfprintf_r+0x6f0>
800045da:	fa cb f9 44 	sub	r11,sp,-1724
800045de:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045e2:	c7 78       	rjmp	800046d0 <_vfprintf_r+0x6e8>
800045e4:	ed b5 00 06 	bld	r5,0x6
800045e8:	c4 b1       	brne	8000467e <_vfprintf_r+0x696>
800045ea:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045ee:	40 3c       	lddsp	r12,sp[0xc]
800045f0:	58 0c       	cp.w	r12,0
800045f2:	c1 d0       	breq	8000462c <_vfprintf_r+0x644>
800045f4:	10 36       	cp.w	r6,r8
800045f6:	c0 64       	brge	80004602 <_vfprintf_r+0x61a>
800045f8:	fa cb f9 44 	sub	r11,sp,-1724
800045fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004600:	c1 f8       	rjmp	8000463e <_vfprintf_r+0x656>
80004602:	fa c8 f9 50 	sub	r8,sp,-1712
80004606:	1a d8       	st.w	--sp,r8
80004608:	fa c8 fa b8 	sub	r8,sp,-1352
8000460c:	1a d8       	st.w	--sp,r8
8000460e:	fa c8 fb b4 	sub	r8,sp,-1100
80004612:	1a d8       	st.w	--sp,r8
80004614:	fa c8 f9 40 	sub	r8,sp,-1728
80004618:	fa c9 ff b4 	sub	r9,sp,-76
8000461c:	04 9a       	mov	r10,r2
8000461e:	0c 9b       	mov	r11,r6
80004620:	08 9c       	mov	r12,r4
80004622:	fe b0 fb 4b 	rcall	80003cb8 <get_arg>
80004626:	2f dd       	sub	sp,-12
80004628:	98 18       	ld.sh	r8,r12[0x2]
8000462a:	c2 68       	rjmp	80004676 <_vfprintf_r+0x68e>
8000462c:	ee ca ff ff 	sub	r10,r7,-1
80004630:	10 37       	cp.w	r7,r8
80004632:	c0 94       	brge	80004644 <_vfprintf_r+0x65c>
80004634:	fa c9 f9 44 	sub	r9,sp,-1724
80004638:	14 97       	mov	r7,r10
8000463a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000463e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004642:	c1 a8       	rjmp	80004676 <_vfprintf_r+0x68e>
80004644:	41 09       	lddsp	r9,sp[0x40]
80004646:	59 f8       	cp.w	r8,31
80004648:	e0 89 00 13 	brgt	8000466e <_vfprintf_r+0x686>
8000464c:	f2 cb ff fc 	sub	r11,r9,-4
80004650:	51 0b       	stdsp	sp[0x40],r11
80004652:	72 09       	ld.w	r9,r9[0x0]
80004654:	fa c6 f9 44 	sub	r6,sp,-1724
80004658:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000465c:	2f f8       	sub	r8,-1
8000465e:	f7 49 fd 88 	st.w	r11[-632],r9
80004662:	fb 48 06 b4 	st.w	sp[1716],r8
80004666:	14 97       	mov	r7,r10
80004668:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000466c:	c0 58       	rjmp	80004676 <_vfprintf_r+0x68e>
8000466e:	92 18       	ld.sh	r8,r9[0x2]
80004670:	14 97       	mov	r7,r10
80004672:	2f c9       	sub	r9,-4
80004674:	51 09       	stdsp	sp[0x40],r9
80004676:	50 18       	stdsp	sp[0x4],r8
80004678:	bf 58       	asr	r8,0x1f
8000467a:	50 08       	stdsp	sp[0x0],r8
8000467c:	c4 88       	rjmp	8000470c <_vfprintf_r+0x724>
8000467e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004682:	40 3c       	lddsp	r12,sp[0xc]
80004684:	58 0c       	cp.w	r12,0
80004686:	c1 d0       	breq	800046c0 <_vfprintf_r+0x6d8>
80004688:	10 36       	cp.w	r6,r8
8000468a:	c0 64       	brge	80004696 <_vfprintf_r+0x6ae>
8000468c:	fa cb f9 44 	sub	r11,sp,-1724
80004690:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004694:	c1 f8       	rjmp	800046d2 <_vfprintf_r+0x6ea>
80004696:	fa c8 f9 50 	sub	r8,sp,-1712
8000469a:	1a d8       	st.w	--sp,r8
8000469c:	fa c8 fa b8 	sub	r8,sp,-1352
800046a0:	0c 9b       	mov	r11,r6
800046a2:	1a d8       	st.w	--sp,r8
800046a4:	fa c8 fb b4 	sub	r8,sp,-1100
800046a8:	04 9a       	mov	r10,r2
800046aa:	1a d8       	st.w	--sp,r8
800046ac:	08 9c       	mov	r12,r4
800046ae:	fa c8 f9 40 	sub	r8,sp,-1728
800046b2:	fa c9 ff b4 	sub	r9,sp,-76
800046b6:	fe b0 fb 01 	rcall	80003cb8 <get_arg>
800046ba:	2f dd       	sub	sp,-12
800046bc:	78 0b       	ld.w	r11,r12[0x0]
800046be:	c2 48       	rjmp	80004706 <_vfprintf_r+0x71e>
800046c0:	ee ca ff ff 	sub	r10,r7,-1
800046c4:	10 37       	cp.w	r7,r8
800046c6:	c0 94       	brge	800046d8 <_vfprintf_r+0x6f0>
800046c8:	fa c9 f9 44 	sub	r9,sp,-1724
800046cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800046d0:	14 97       	mov	r7,r10
800046d2:	ec fb fd 88 	ld.w	r11,r6[-632]
800046d6:	c1 88       	rjmp	80004706 <_vfprintf_r+0x71e>
800046d8:	41 09       	lddsp	r9,sp[0x40]
800046da:	59 f8       	cp.w	r8,31
800046dc:	e0 89 00 11 	brgt	800046fe <_vfprintf_r+0x716>
800046e0:	f2 cb ff fc 	sub	r11,r9,-4
800046e4:	51 0b       	stdsp	sp[0x40],r11
800046e6:	fa c6 f9 44 	sub	r6,sp,-1724
800046ea:	72 0b       	ld.w	r11,r9[0x0]
800046ec:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046f0:	f3 4b fd 88 	st.w	r9[-632],r11
800046f4:	2f f8       	sub	r8,-1
800046f6:	14 97       	mov	r7,r10
800046f8:	fb 48 06 b4 	st.w	sp[1716],r8
800046fc:	c0 58       	rjmp	80004706 <_vfprintf_r+0x71e>
800046fe:	72 0b       	ld.w	r11,r9[0x0]
80004700:	14 97       	mov	r7,r10
80004702:	2f c9       	sub	r9,-4
80004704:	51 09       	stdsp	sp[0x40],r9
80004706:	50 1b       	stdsp	sp[0x4],r11
80004708:	bf 5b       	asr	r11,0x1f
8000470a:	50 0b       	stdsp	sp[0x0],r11
8000470c:	fa ea 00 00 	ld.d	r10,sp[0]
80004710:	58 0a       	cp.w	r10,0
80004712:	5c 2b       	cpc	r11
80004714:	c0 e4       	brge	80004730 <_vfprintf_r+0x748>
80004716:	30 08       	mov	r8,0
80004718:	fa ea 00 00 	ld.d	r10,sp[0]
8000471c:	30 09       	mov	r9,0
8000471e:	f0 0a 01 0a 	sub	r10,r8,r10
80004722:	f2 0b 01 4b 	sbc	r11,r9,r11
80004726:	32 d8       	mov	r8,45
80004728:	fa eb 00 00 	st.d	sp[0],r10
8000472c:	fb 68 06 bb 	st.b	sp[1723],r8
80004730:	30 18       	mov	r8,1
80004732:	e0 8f 06 fa 	bral	80005526 <_vfprintf_r+0x153e>
80004736:	50 a7       	stdsp	sp[0x28],r7
80004738:	50 80       	stdsp	sp[0x20],r0
8000473a:	0c 97       	mov	r7,r6
8000473c:	04 94       	mov	r4,r2
8000473e:	06 96       	mov	r6,r3
80004740:	02 92       	mov	r2,r1
80004742:	40 93       	lddsp	r3,sp[0x24]
80004744:	10 90       	mov	r0,r8
80004746:	40 41       	lddsp	r1,sp[0x10]
80004748:	0e 99       	mov	r9,r7
8000474a:	ed b5 00 03 	bld	r5,0x3
8000474e:	c4 11       	brne	800047d0 <_vfprintf_r+0x7e8>
80004750:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004754:	40 3a       	lddsp	r10,sp[0xc]
80004756:	58 0a       	cp.w	r10,0
80004758:	c1 90       	breq	8000478a <_vfprintf_r+0x7a2>
8000475a:	10 36       	cp.w	r6,r8
8000475c:	c6 45       	brlt	80004824 <_vfprintf_r+0x83c>
8000475e:	fa c8 f9 50 	sub	r8,sp,-1712
80004762:	1a d8       	st.w	--sp,r8
80004764:	fa c8 fa b8 	sub	r8,sp,-1352
80004768:	1a d8       	st.w	--sp,r8
8000476a:	fa c8 fb b4 	sub	r8,sp,-1100
8000476e:	0c 9b       	mov	r11,r6
80004770:	1a d8       	st.w	--sp,r8
80004772:	04 9a       	mov	r10,r2
80004774:	fa c8 f9 40 	sub	r8,sp,-1728
80004778:	fa c9 ff b4 	sub	r9,sp,-76
8000477c:	08 9c       	mov	r12,r4
8000477e:	fe b0 fa 9d 	rcall	80003cb8 <get_arg>
80004782:	2f dd       	sub	sp,-12
80004784:	78 16       	ld.w	r6,r12[0x4]
80004786:	50 76       	stdsp	sp[0x1c],r6
80004788:	c4 88       	rjmp	80004818 <_vfprintf_r+0x830>
8000478a:	2f f7       	sub	r7,-1
8000478c:	10 39       	cp.w	r9,r8
8000478e:	c0 c4       	brge	800047a6 <_vfprintf_r+0x7be>
80004790:	fa ce f9 44 	sub	lr,sp,-1724
80004794:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004798:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000479c:	50 7c       	stdsp	sp[0x1c],r12
8000479e:	ec f6 fd 88 	ld.w	r6,r6[-632]
800047a2:	50 56       	stdsp	sp[0x14],r6
800047a4:	c6 68       	rjmp	80004870 <_vfprintf_r+0x888>
800047a6:	41 09       	lddsp	r9,sp[0x40]
800047a8:	59 f8       	cp.w	r8,31
800047aa:	e0 89 00 10 	brgt	800047ca <_vfprintf_r+0x7e2>
800047ae:	f2 ca ff f8 	sub	r10,r9,-8
800047b2:	72 1b       	ld.w	r11,r9[0x4]
800047b4:	51 0a       	stdsp	sp[0x40],r10
800047b6:	72 09       	ld.w	r9,r9[0x0]
800047b8:	fa ca f9 44 	sub	r10,sp,-1724
800047bc:	50 7b       	stdsp	sp[0x1c],r11
800047be:	50 59       	stdsp	sp[0x14],r9
800047c0:	f4 08 00 39 	add	r9,r10,r8<<0x3
800047c4:	40 5b       	lddsp	r11,sp[0x14]
800047c6:	40 7a       	lddsp	r10,sp[0x1c]
800047c8:	c4 78       	rjmp	80004856 <_vfprintf_r+0x86e>
800047ca:	72 18       	ld.w	r8,r9[0x4]
800047cc:	50 78       	stdsp	sp[0x1c],r8
800047ce:	c4 c8       	rjmp	80004866 <_vfprintf_r+0x87e>
800047d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047d4:	40 3e       	lddsp	lr,sp[0xc]
800047d6:	58 0e       	cp.w	lr,0
800047d8:	c2 30       	breq	8000481e <_vfprintf_r+0x836>
800047da:	10 36       	cp.w	r6,r8
800047dc:	c0 94       	brge	800047ee <_vfprintf_r+0x806>
800047de:	fa cc f9 44 	sub	r12,sp,-1724
800047e2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800047e6:	ec fb fd 8c 	ld.w	r11,r6[-628]
800047ea:	50 7b       	stdsp	sp[0x1c],r11
800047ec:	cd 9b       	rjmp	8000479e <_vfprintf_r+0x7b6>
800047ee:	fa c8 f9 50 	sub	r8,sp,-1712
800047f2:	1a d8       	st.w	--sp,r8
800047f4:	fa c8 fa b8 	sub	r8,sp,-1352
800047f8:	04 9a       	mov	r10,r2
800047fa:	1a d8       	st.w	--sp,r8
800047fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004800:	0c 9b       	mov	r11,r6
80004802:	1a d8       	st.w	--sp,r8
80004804:	08 9c       	mov	r12,r4
80004806:	fa c8 f9 40 	sub	r8,sp,-1728
8000480a:	fa c9 ff b4 	sub	r9,sp,-76
8000480e:	fe b0 fa 55 	rcall	80003cb8 <get_arg>
80004812:	2f dd       	sub	sp,-12
80004814:	78 1a       	ld.w	r10,r12[0x4]
80004816:	50 7a       	stdsp	sp[0x1c],r10
80004818:	78 0c       	ld.w	r12,r12[0x0]
8000481a:	50 5c       	stdsp	sp[0x14],r12
8000481c:	c2 a8       	rjmp	80004870 <_vfprintf_r+0x888>
8000481e:	2f f7       	sub	r7,-1
80004820:	10 39       	cp.w	r9,r8
80004822:	c0 94       	brge	80004834 <_vfprintf_r+0x84c>
80004824:	fa c9 f9 44 	sub	r9,sp,-1724
80004828:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000482c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80004830:	50 78       	stdsp	sp[0x1c],r8
80004832:	cb 6b       	rjmp	8000479e <_vfprintf_r+0x7b6>
80004834:	41 09       	lddsp	r9,sp[0x40]
80004836:	59 f8       	cp.w	r8,31
80004838:	e0 89 00 15 	brgt	80004862 <_vfprintf_r+0x87a>
8000483c:	f2 ca ff f8 	sub	r10,r9,-8
80004840:	72 16       	ld.w	r6,r9[0x4]
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	51 0a       	stdsp	sp[0x40],r10
80004846:	50 59       	stdsp	sp[0x14],r9
80004848:	fa ce f9 44 	sub	lr,sp,-1724
8000484c:	50 76       	stdsp	sp[0x1c],r6
8000484e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80004852:	40 5b       	lddsp	r11,sp[0x14]
80004854:	0c 9a       	mov	r10,r6
80004856:	f2 eb fd 88 	st.d	r9[-632],r10
8000485a:	2f f8       	sub	r8,-1
8000485c:	fb 48 06 b4 	st.w	sp[1716],r8
80004860:	c0 88       	rjmp	80004870 <_vfprintf_r+0x888>
80004862:	72 1c       	ld.w	r12,r9[0x4]
80004864:	50 7c       	stdsp	sp[0x1c],r12
80004866:	f2 c8 ff f8 	sub	r8,r9,-8
8000486a:	51 08       	stdsp	sp[0x40],r8
8000486c:	72 09       	ld.w	r9,r9[0x0]
8000486e:	50 59       	stdsp	sp[0x14],r9
80004870:	40 5b       	lddsp	r11,sp[0x14]
80004872:	40 7a       	lddsp	r10,sp[0x1c]
80004874:	e0 a0 1c de 	rcall	80008230 <__isinfd>
80004878:	18 96       	mov	r6,r12
8000487a:	c1 70       	breq	800048a8 <_vfprintf_r+0x8c0>
8000487c:	30 08       	mov	r8,0
8000487e:	30 09       	mov	r9,0
80004880:	40 5b       	lddsp	r11,sp[0x14]
80004882:	40 7a       	lddsp	r10,sp[0x1c]
80004884:	e0 a0 20 e2 	rcall	80008a48 <__avr32_f64_cmp_lt>
80004888:	c0 40       	breq	80004890 <_vfprintf_r+0x8a8>
8000488a:	32 d8       	mov	r8,45
8000488c:	fb 68 06 bb 	st.b	sp[1723],r8
80004890:	fe c8 b2 40 	sub	r8,pc,-19904
80004894:	fe c6 b2 40 	sub	r6,pc,-19904
80004898:	a7 d5       	cbr	r5,0x7
8000489a:	e0 40 00 47 	cp.w	r0,71
8000489e:	f0 06 17 a0 	movle	r6,r8
800048a2:	30 32       	mov	r2,3
800048a4:	e0 8f 06 ce 	bral	80005640 <_vfprintf_r+0x1658>
800048a8:	40 5b       	lddsp	r11,sp[0x14]
800048aa:	40 7a       	lddsp	r10,sp[0x1c]
800048ac:	e0 a0 1c d7 	rcall	8000825a <__isnand>
800048b0:	c0 e0       	breq	800048cc <_vfprintf_r+0x8e4>
800048b2:	50 26       	stdsp	sp[0x8],r6
800048b4:	fe c8 b2 5c 	sub	r8,pc,-19876
800048b8:	fe c6 b2 5c 	sub	r6,pc,-19876
800048bc:	a7 d5       	cbr	r5,0x7
800048be:	e0 40 00 47 	cp.w	r0,71
800048c2:	f0 06 17 a0 	movle	r6,r8
800048c6:	30 32       	mov	r2,3
800048c8:	e0 8f 06 c2 	bral	8000564c <_vfprintf_r+0x1664>
800048cc:	40 2a       	lddsp	r10,sp[0x8]
800048ce:	5b fa       	cp.w	r10,-1
800048d0:	c0 41       	brne	800048d8 <_vfprintf_r+0x8f0>
800048d2:	30 69       	mov	r9,6
800048d4:	50 29       	stdsp	sp[0x8],r9
800048d6:	c1 18       	rjmp	800048f8 <_vfprintf_r+0x910>
800048d8:	e0 40 00 47 	cp.w	r0,71
800048dc:	5f 09       	sreq	r9
800048de:	e0 40 00 67 	cp.w	r0,103
800048e2:	5f 08       	sreq	r8
800048e4:	f3 e8 10 08 	or	r8,r9,r8
800048e8:	f8 08 18 00 	cp.b	r8,r12
800048ec:	c0 60       	breq	800048f8 <_vfprintf_r+0x910>
800048ee:	40 28       	lddsp	r8,sp[0x8]
800048f0:	58 08       	cp.w	r8,0
800048f2:	f9 b8 00 01 	moveq	r8,1
800048f6:	50 28       	stdsp	sp[0x8],r8
800048f8:	40 78       	lddsp	r8,sp[0x1c]
800048fa:	40 59       	lddsp	r9,sp[0x14]
800048fc:	fa e9 06 94 	st.d	sp[1684],r8
80004900:	a9 a5       	sbr	r5,0x8
80004902:	fa f8 06 94 	ld.w	r8,sp[1684]
80004906:	58 08       	cp.w	r8,0
80004908:	c0 65       	brlt	80004914 <_vfprintf_r+0x92c>
8000490a:	40 5e       	lddsp	lr,sp[0x14]
8000490c:	30 0c       	mov	r12,0
8000490e:	50 6e       	stdsp	sp[0x18],lr
80004910:	50 9c       	stdsp	sp[0x24],r12
80004912:	c0 78       	rjmp	80004920 <_vfprintf_r+0x938>
80004914:	40 5b       	lddsp	r11,sp[0x14]
80004916:	32 da       	mov	r10,45
80004918:	ee 1b 80 00 	eorh	r11,0x8000
8000491c:	50 9a       	stdsp	sp[0x24],r10
8000491e:	50 6b       	stdsp	sp[0x18],r11
80004920:	e0 40 00 46 	cp.w	r0,70
80004924:	5f 09       	sreq	r9
80004926:	e0 40 00 66 	cp.w	r0,102
8000492a:	5f 08       	sreq	r8
8000492c:	f3 e8 10 08 	or	r8,r9,r8
80004930:	50 48       	stdsp	sp[0x10],r8
80004932:	c0 40       	breq	8000493a <_vfprintf_r+0x952>
80004934:	40 22       	lddsp	r2,sp[0x8]
80004936:	30 39       	mov	r9,3
80004938:	c1 08       	rjmp	80004958 <_vfprintf_r+0x970>
8000493a:	e0 40 00 45 	cp.w	r0,69
8000493e:	5f 09       	sreq	r9
80004940:	e0 40 00 65 	cp.w	r0,101
80004944:	5f 08       	sreq	r8
80004946:	40 22       	lddsp	r2,sp[0x8]
80004948:	10 49       	or	r9,r8
8000494a:	2f f2       	sub	r2,-1
8000494c:	40 46       	lddsp	r6,sp[0x10]
8000494e:	ec 09 18 00 	cp.b	r9,r6
80004952:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80004956:	30 29       	mov	r9,2
80004958:	fa c8 f9 5c 	sub	r8,sp,-1700
8000495c:	1a d8       	st.w	--sp,r8
8000495e:	fa c8 f9 54 	sub	r8,sp,-1708
80004962:	1a d8       	st.w	--sp,r8
80004964:	fa c8 f9 4c 	sub	r8,sp,-1716
80004968:	08 9c       	mov	r12,r4
8000496a:	1a d8       	st.w	--sp,r8
8000496c:	04 98       	mov	r8,r2
8000496e:	40 9b       	lddsp	r11,sp[0x24]
80004970:	40 aa       	lddsp	r10,sp[0x28]
80004972:	e0 a0 0b c3 	rcall	800060f8 <_dtoa_r>
80004976:	e0 40 00 47 	cp.w	r0,71
8000497a:	5f 19       	srne	r9
8000497c:	e0 40 00 67 	cp.w	r0,103
80004980:	5f 18       	srne	r8
80004982:	18 96       	mov	r6,r12
80004984:	2f dd       	sub	sp,-12
80004986:	f3 e8 00 08 	and	r8,r9,r8
8000498a:	c0 41       	brne	80004992 <_vfprintf_r+0x9aa>
8000498c:	ed b5 00 00 	bld	r5,0x0
80004990:	c3 01       	brne	800049f0 <_vfprintf_r+0xa08>
80004992:	ec 02 00 0e 	add	lr,r6,r2
80004996:	50 3e       	stdsp	sp[0xc],lr
80004998:	40 4c       	lddsp	r12,sp[0x10]
8000499a:	58 0c       	cp.w	r12,0
8000499c:	c1 50       	breq	800049c6 <_vfprintf_r+0x9de>
8000499e:	0d 89       	ld.ub	r9,r6[0x0]
800049a0:	33 08       	mov	r8,48
800049a2:	f0 09 18 00 	cp.b	r9,r8
800049a6:	c0 b1       	brne	800049bc <_vfprintf_r+0x9d4>
800049a8:	30 08       	mov	r8,0
800049aa:	30 09       	mov	r9,0
800049ac:	40 6b       	lddsp	r11,sp[0x18]
800049ae:	40 7a       	lddsp	r10,sp[0x1c]
800049b0:	e0 a0 20 05 	rcall	800089ba <__avr32_f64_cmp_eq>
800049b4:	fb b2 00 01 	rsubeq	r2,1
800049b8:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800049bc:	40 3b       	lddsp	r11,sp[0xc]
800049be:	fa f8 06 ac 	ld.w	r8,sp[1708]
800049c2:	10 0b       	add	r11,r8
800049c4:	50 3b       	stdsp	sp[0xc],r11
800049c6:	40 6b       	lddsp	r11,sp[0x18]
800049c8:	30 08       	mov	r8,0
800049ca:	30 09       	mov	r9,0
800049cc:	40 7a       	lddsp	r10,sp[0x1c]
800049ce:	e0 a0 1f f6 	rcall	800089ba <__avr32_f64_cmp_eq>
800049d2:	c0 90       	breq	800049e4 <_vfprintf_r+0x9fc>
800049d4:	40 3a       	lddsp	r10,sp[0xc]
800049d6:	fb 4a 06 a4 	st.w	sp[1700],r10
800049da:	c0 58       	rjmp	800049e4 <_vfprintf_r+0x9fc>
800049dc:	10 c9       	st.b	r8++,r9
800049de:	fb 48 06 a4 	st.w	sp[1700],r8
800049e2:	c0 28       	rjmp	800049e6 <_vfprintf_r+0x9fe>
800049e4:	33 09       	mov	r9,48
800049e6:	fa f8 06 a4 	ld.w	r8,sp[1700]
800049ea:	40 3e       	lddsp	lr,sp[0xc]
800049ec:	1c 38       	cp.w	r8,lr
800049ee:	cf 73       	brcs	800049dc <_vfprintf_r+0x9f4>
800049f0:	e0 40 00 47 	cp.w	r0,71
800049f4:	5f 09       	sreq	r9
800049f6:	e0 40 00 67 	cp.w	r0,103
800049fa:	5f 08       	sreq	r8
800049fc:	f3 e8 10 08 	or	r8,r9,r8
80004a00:	fa f9 06 a4 	ld.w	r9,sp[1700]
80004a04:	0c 19       	sub	r9,r6
80004a06:	50 69       	stdsp	sp[0x18],r9
80004a08:	58 08       	cp.w	r8,0
80004a0a:	c0 b0       	breq	80004a20 <_vfprintf_r+0xa38>
80004a0c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80004a10:	5b d8       	cp.w	r8,-3
80004a12:	c0 55       	brlt	80004a1c <_vfprintf_r+0xa34>
80004a14:	40 2c       	lddsp	r12,sp[0x8]
80004a16:	18 38       	cp.w	r8,r12
80004a18:	e0 8a 00 6a 	brle	80004aec <_vfprintf_r+0xb04>
80004a1c:	20 20       	sub	r0,2
80004a1e:	c0 58       	rjmp	80004a28 <_vfprintf_r+0xa40>
80004a20:	e0 40 00 65 	cp.w	r0,101
80004a24:	e0 89 00 46 	brgt	80004ab0 <_vfprintf_r+0xac8>
80004a28:	fa fb 06 ac 	ld.w	r11,sp[1708]
80004a2c:	fb 60 06 9c 	st.b	sp[1692],r0
80004a30:	20 1b       	sub	r11,1
80004a32:	fb 4b 06 ac 	st.w	sp[1708],r11
80004a36:	c0 47       	brpl	80004a3e <_vfprintf_r+0xa56>
80004a38:	5c 3b       	neg	r11
80004a3a:	32 d8       	mov	r8,45
80004a3c:	c0 28       	rjmp	80004a40 <_vfprintf_r+0xa58>
80004a3e:	32 b8       	mov	r8,43
80004a40:	fb 68 06 9d 	st.b	sp[1693],r8
80004a44:	58 9b       	cp.w	r11,9
80004a46:	e0 8a 00 1d 	brle	80004a80 <_vfprintf_r+0xa98>
80004a4a:	fa c9 fa 35 	sub	r9,sp,-1483
80004a4e:	30 aa       	mov	r10,10
80004a50:	12 98       	mov	r8,r9
80004a52:	0e 9c       	mov	r12,r7
80004a54:	0c 92       	mov	r2,r6
80004a56:	f6 0a 0c 06 	divs	r6,r11,r10
80004a5a:	0e 9b       	mov	r11,r7
80004a5c:	2d 0b       	sub	r11,-48
80004a5e:	10 fb       	st.b	--r8,r11
80004a60:	0c 9b       	mov	r11,r6
80004a62:	58 96       	cp.w	r6,9
80004a64:	fe 99 ff f9 	brgt	80004a56 <_vfprintf_r+0xa6e>
80004a68:	2d 0b       	sub	r11,-48
80004a6a:	18 97       	mov	r7,r12
80004a6c:	04 96       	mov	r6,r2
80004a6e:	10 fb       	st.b	--r8,r11
80004a70:	fa ca f9 62 	sub	r10,sp,-1694
80004a74:	c0 38       	rjmp	80004a7a <_vfprintf_r+0xa92>
80004a76:	11 3b       	ld.ub	r11,r8++
80004a78:	14 cb       	st.b	r10++,r11
80004a7a:	12 38       	cp.w	r8,r9
80004a7c:	cf d3       	brcs	80004a76 <_vfprintf_r+0xa8e>
80004a7e:	c0 98       	rjmp	80004a90 <_vfprintf_r+0xaa8>
80004a80:	2d 0b       	sub	r11,-48
80004a82:	33 08       	mov	r8,48
80004a84:	fb 6b 06 9f 	st.b	sp[1695],r11
80004a88:	fb 68 06 9e 	st.b	sp[1694],r8
80004a8c:	fa ca f9 60 	sub	r10,sp,-1696
80004a90:	fa c8 f9 64 	sub	r8,sp,-1692
80004a94:	f4 08 01 08 	sub	r8,r10,r8
80004a98:	50 e8       	stdsp	sp[0x38],r8
80004a9a:	10 92       	mov	r2,r8
80004a9c:	40 6b       	lddsp	r11,sp[0x18]
80004a9e:	16 02       	add	r2,r11
80004aa0:	58 1b       	cp.w	r11,1
80004aa2:	e0 89 00 05 	brgt	80004aac <_vfprintf_r+0xac4>
80004aa6:	ed b5 00 00 	bld	r5,0x0
80004aaa:	c3 51       	brne	80004b14 <_vfprintf_r+0xb2c>
80004aac:	2f f2       	sub	r2,-1
80004aae:	c3 38       	rjmp	80004b14 <_vfprintf_r+0xb2c>
80004ab0:	e0 40 00 66 	cp.w	r0,102
80004ab4:	c1 c1       	brne	80004aec <_vfprintf_r+0xb04>
80004ab6:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004aba:	58 02       	cp.w	r2,0
80004abc:	e0 8a 00 0c 	brle	80004ad4 <_vfprintf_r+0xaec>
80004ac0:	40 2a       	lddsp	r10,sp[0x8]
80004ac2:	58 0a       	cp.w	r10,0
80004ac4:	c0 41       	brne	80004acc <_vfprintf_r+0xae4>
80004ac6:	ed b5 00 00 	bld	r5,0x0
80004aca:	c2 51       	brne	80004b14 <_vfprintf_r+0xb2c>
80004acc:	2f f2       	sub	r2,-1
80004ace:	40 29       	lddsp	r9,sp[0x8]
80004ad0:	12 02       	add	r2,r9
80004ad2:	c0 b8       	rjmp	80004ae8 <_vfprintf_r+0xb00>
80004ad4:	40 28       	lddsp	r8,sp[0x8]
80004ad6:	58 08       	cp.w	r8,0
80004ad8:	c0 61       	brne	80004ae4 <_vfprintf_r+0xafc>
80004ada:	ed b5 00 00 	bld	r5,0x0
80004ade:	c0 30       	breq	80004ae4 <_vfprintf_r+0xafc>
80004ae0:	30 12       	mov	r2,1
80004ae2:	c1 98       	rjmp	80004b14 <_vfprintf_r+0xb2c>
80004ae4:	40 22       	lddsp	r2,sp[0x8]
80004ae6:	2f e2       	sub	r2,-2
80004ae8:	36 60       	mov	r0,102
80004aea:	c1 58       	rjmp	80004b14 <_vfprintf_r+0xb2c>
80004aec:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004af0:	40 6e       	lddsp	lr,sp[0x18]
80004af2:	1c 32       	cp.w	r2,lr
80004af4:	c0 65       	brlt	80004b00 <_vfprintf_r+0xb18>
80004af6:	ed b5 00 00 	bld	r5,0x0
80004afa:	f7 b2 00 ff 	subeq	r2,-1
80004afe:	c0 a8       	rjmp	80004b12 <_vfprintf_r+0xb2a>
80004b00:	e4 08 11 02 	rsub	r8,r2,2
80004b04:	40 6c       	lddsp	r12,sp[0x18]
80004b06:	58 02       	cp.w	r2,0
80004b08:	f0 02 17 a0 	movle	r2,r8
80004b0c:	f9 b2 09 01 	movgt	r2,1
80004b10:	18 02       	add	r2,r12
80004b12:	36 70       	mov	r0,103
80004b14:	40 9b       	lddsp	r11,sp[0x24]
80004b16:	58 0b       	cp.w	r11,0
80004b18:	e0 80 05 94 	breq	80005640 <_vfprintf_r+0x1658>
80004b1c:	32 d8       	mov	r8,45
80004b1e:	fb 68 06 bb 	st.b	sp[1723],r8
80004b22:	e0 8f 05 93 	bral	80005648 <_vfprintf_r+0x1660>
80004b26:	50 a7       	stdsp	sp[0x28],r7
80004b28:	04 94       	mov	r4,r2
80004b2a:	0c 97       	mov	r7,r6
80004b2c:	02 92       	mov	r2,r1
80004b2e:	06 96       	mov	r6,r3
80004b30:	40 41       	lddsp	r1,sp[0x10]
80004b32:	40 93       	lddsp	r3,sp[0x24]
80004b34:	0e 99       	mov	r9,r7
80004b36:	ed b5 00 05 	bld	r5,0x5
80004b3a:	c4 81       	brne	80004bca <_vfprintf_r+0xbe2>
80004b3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b40:	40 3e       	lddsp	lr,sp[0xc]
80004b42:	58 0e       	cp.w	lr,0
80004b44:	c1 d0       	breq	80004b7e <_vfprintf_r+0xb96>
80004b46:	10 36       	cp.w	r6,r8
80004b48:	c0 64       	brge	80004b54 <_vfprintf_r+0xb6c>
80004b4a:	fa cc f9 44 	sub	r12,sp,-1724
80004b4e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b52:	c1 d8       	rjmp	80004b8c <_vfprintf_r+0xba4>
80004b54:	fa c8 f9 50 	sub	r8,sp,-1712
80004b58:	1a d8       	st.w	--sp,r8
80004b5a:	fa c8 fa b8 	sub	r8,sp,-1352
80004b5e:	04 9a       	mov	r10,r2
80004b60:	1a d8       	st.w	--sp,r8
80004b62:	fa c8 fb b4 	sub	r8,sp,-1100
80004b66:	0c 9b       	mov	r11,r6
80004b68:	1a d8       	st.w	--sp,r8
80004b6a:	08 9c       	mov	r12,r4
80004b6c:	fa c8 f9 40 	sub	r8,sp,-1728
80004b70:	fa c9 ff b4 	sub	r9,sp,-76
80004b74:	fe b0 f8 a2 	rcall	80003cb8 <get_arg>
80004b78:	2f dd       	sub	sp,-12
80004b7a:	78 0a       	ld.w	r10,r12[0x0]
80004b7c:	c2 08       	rjmp	80004bbc <_vfprintf_r+0xbd4>
80004b7e:	2f f7       	sub	r7,-1
80004b80:	10 39       	cp.w	r9,r8
80004b82:	c0 84       	brge	80004b92 <_vfprintf_r+0xbaa>
80004b84:	fa cb f9 44 	sub	r11,sp,-1724
80004b88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b8c:	ec fa fd 88 	ld.w	r10,r6[-632]
80004b90:	c1 68       	rjmp	80004bbc <_vfprintf_r+0xbd4>
80004b92:	41 09       	lddsp	r9,sp[0x40]
80004b94:	59 f8       	cp.w	r8,31
80004b96:	e0 89 00 10 	brgt	80004bb6 <_vfprintf_r+0xbce>
80004b9a:	f2 ca ff fc 	sub	r10,r9,-4
80004b9e:	51 0a       	stdsp	sp[0x40],r10
80004ba0:	fa c6 f9 44 	sub	r6,sp,-1724
80004ba4:	72 0a       	ld.w	r10,r9[0x0]
80004ba6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004baa:	f3 4a fd 88 	st.w	r9[-632],r10
80004bae:	2f f8       	sub	r8,-1
80004bb0:	fb 48 06 b4 	st.w	sp[1716],r8
80004bb4:	c0 48       	rjmp	80004bbc <_vfprintf_r+0xbd4>
80004bb6:	72 0a       	ld.w	r10,r9[0x0]
80004bb8:	2f c9       	sub	r9,-4
80004bba:	51 09       	stdsp	sp[0x40],r9
80004bbc:	40 be       	lddsp	lr,sp[0x2c]
80004bbe:	1c 98       	mov	r8,lr
80004bc0:	95 1e       	st.w	r10[0x4],lr
80004bc2:	bf 58       	asr	r8,0x1f
80004bc4:	95 08       	st.w	r10[0x0],r8
80004bc6:	fe 9f fa 9f 	bral	80004104 <_vfprintf_r+0x11c>
80004bca:	ed b5 00 04 	bld	r5,0x4
80004bce:	c4 80       	breq	80004c5e <_vfprintf_r+0xc76>
80004bd0:	e2 15 00 40 	andl	r5,0x40,COH
80004bd4:	c4 50       	breq	80004c5e <_vfprintf_r+0xc76>
80004bd6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004bda:	40 3c       	lddsp	r12,sp[0xc]
80004bdc:	58 0c       	cp.w	r12,0
80004bde:	c1 d0       	breq	80004c18 <_vfprintf_r+0xc30>
80004be0:	10 36       	cp.w	r6,r8
80004be2:	c0 64       	brge	80004bee <_vfprintf_r+0xc06>
80004be4:	fa cb f9 44 	sub	r11,sp,-1724
80004be8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004bec:	c1 d8       	rjmp	80004c26 <_vfprintf_r+0xc3e>
80004bee:	fa c8 f9 50 	sub	r8,sp,-1712
80004bf2:	1a d8       	st.w	--sp,r8
80004bf4:	fa c8 fa b8 	sub	r8,sp,-1352
80004bf8:	04 9a       	mov	r10,r2
80004bfa:	1a d8       	st.w	--sp,r8
80004bfc:	fa c8 fb b4 	sub	r8,sp,-1100
80004c00:	0c 9b       	mov	r11,r6
80004c02:	1a d8       	st.w	--sp,r8
80004c04:	08 9c       	mov	r12,r4
80004c06:	fa c8 f9 40 	sub	r8,sp,-1728
80004c0a:	fa c9 ff b4 	sub	r9,sp,-76
80004c0e:	fe b0 f8 55 	rcall	80003cb8 <get_arg>
80004c12:	2f dd       	sub	sp,-12
80004c14:	78 0a       	ld.w	r10,r12[0x0]
80004c16:	c2 08       	rjmp	80004c56 <_vfprintf_r+0xc6e>
80004c18:	2f f7       	sub	r7,-1
80004c1a:	10 39       	cp.w	r9,r8
80004c1c:	c0 84       	brge	80004c2c <_vfprintf_r+0xc44>
80004c1e:	fa ca f9 44 	sub	r10,sp,-1724
80004c22:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004c26:	ec fa fd 88 	ld.w	r10,r6[-632]
80004c2a:	c1 68       	rjmp	80004c56 <_vfprintf_r+0xc6e>
80004c2c:	41 09       	lddsp	r9,sp[0x40]
80004c2e:	59 f8       	cp.w	r8,31
80004c30:	e0 89 00 10 	brgt	80004c50 <_vfprintf_r+0xc68>
80004c34:	f2 ca ff fc 	sub	r10,r9,-4
80004c38:	51 0a       	stdsp	sp[0x40],r10
80004c3a:	fa c6 f9 44 	sub	r6,sp,-1724
80004c3e:	72 0a       	ld.w	r10,r9[0x0]
80004c40:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c44:	f3 4a fd 88 	st.w	r9[-632],r10
80004c48:	2f f8       	sub	r8,-1
80004c4a:	fb 48 06 b4 	st.w	sp[1716],r8
80004c4e:	c0 48       	rjmp	80004c56 <_vfprintf_r+0xc6e>
80004c50:	72 0a       	ld.w	r10,r9[0x0]
80004c52:	2f c9       	sub	r9,-4
80004c54:	51 09       	stdsp	sp[0x40],r9
80004c56:	40 be       	lddsp	lr,sp[0x2c]
80004c58:	b4 0e       	st.h	r10[0x0],lr
80004c5a:	fe 9f fa 55 	bral	80004104 <_vfprintf_r+0x11c>
80004c5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c62:	40 3c       	lddsp	r12,sp[0xc]
80004c64:	58 0c       	cp.w	r12,0
80004c66:	c1 d0       	breq	80004ca0 <_vfprintf_r+0xcb8>
80004c68:	10 36       	cp.w	r6,r8
80004c6a:	c0 64       	brge	80004c76 <_vfprintf_r+0xc8e>
80004c6c:	fa cb f9 44 	sub	r11,sp,-1724
80004c70:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c74:	c1 d8       	rjmp	80004cae <_vfprintf_r+0xcc6>
80004c76:	fa c8 f9 50 	sub	r8,sp,-1712
80004c7a:	1a d8       	st.w	--sp,r8
80004c7c:	fa c8 fa b8 	sub	r8,sp,-1352
80004c80:	04 9a       	mov	r10,r2
80004c82:	1a d8       	st.w	--sp,r8
80004c84:	fa c8 fb b4 	sub	r8,sp,-1100
80004c88:	0c 9b       	mov	r11,r6
80004c8a:	1a d8       	st.w	--sp,r8
80004c8c:	08 9c       	mov	r12,r4
80004c8e:	fa c8 f9 40 	sub	r8,sp,-1728
80004c92:	fa c9 ff b4 	sub	r9,sp,-76
80004c96:	fe b0 f8 11 	rcall	80003cb8 <get_arg>
80004c9a:	2f dd       	sub	sp,-12
80004c9c:	78 0a       	ld.w	r10,r12[0x0]
80004c9e:	c2 08       	rjmp	80004cde <_vfprintf_r+0xcf6>
80004ca0:	2f f7       	sub	r7,-1
80004ca2:	10 39       	cp.w	r9,r8
80004ca4:	c0 84       	brge	80004cb4 <_vfprintf_r+0xccc>
80004ca6:	fa ca f9 44 	sub	r10,sp,-1724
80004caa:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004cae:	ec fa fd 88 	ld.w	r10,r6[-632]
80004cb2:	c1 68       	rjmp	80004cde <_vfprintf_r+0xcf6>
80004cb4:	41 09       	lddsp	r9,sp[0x40]
80004cb6:	59 f8       	cp.w	r8,31
80004cb8:	e0 89 00 10 	brgt	80004cd8 <_vfprintf_r+0xcf0>
80004cbc:	f2 ca ff fc 	sub	r10,r9,-4
80004cc0:	51 0a       	stdsp	sp[0x40],r10
80004cc2:	fa c6 f9 44 	sub	r6,sp,-1724
80004cc6:	72 0a       	ld.w	r10,r9[0x0]
80004cc8:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004ccc:	f3 4a fd 88 	st.w	r9[-632],r10
80004cd0:	2f f8       	sub	r8,-1
80004cd2:	fb 48 06 b4 	st.w	sp[1716],r8
80004cd6:	c0 48       	rjmp	80004cde <_vfprintf_r+0xcf6>
80004cd8:	72 0a       	ld.w	r10,r9[0x0]
80004cda:	2f c9       	sub	r9,-4
80004cdc:	51 09       	stdsp	sp[0x40],r9
80004cde:	40 be       	lddsp	lr,sp[0x2c]
80004ce0:	95 0e       	st.w	r10[0x0],lr
80004ce2:	fe 9f fa 11 	bral	80004104 <_vfprintf_r+0x11c>
80004ce6:	50 a7       	stdsp	sp[0x28],r7
80004ce8:	50 80       	stdsp	sp[0x20],r0
80004cea:	0c 97       	mov	r7,r6
80004cec:	04 94       	mov	r4,r2
80004cee:	06 96       	mov	r6,r3
80004cf0:	02 92       	mov	r2,r1
80004cf2:	40 93       	lddsp	r3,sp[0x24]
80004cf4:	10 90       	mov	r0,r8
80004cf6:	40 41       	lddsp	r1,sp[0x10]
80004cf8:	a5 a5       	sbr	r5,0x4
80004cfa:	c0 a8       	rjmp	80004d0e <_vfprintf_r+0xd26>
80004cfc:	50 a7       	stdsp	sp[0x28],r7
80004cfe:	50 80       	stdsp	sp[0x20],r0
80004d00:	0c 97       	mov	r7,r6
80004d02:	04 94       	mov	r4,r2
80004d04:	06 96       	mov	r6,r3
80004d06:	02 92       	mov	r2,r1
80004d08:	40 93       	lddsp	r3,sp[0x24]
80004d0a:	10 90       	mov	r0,r8
80004d0c:	40 41       	lddsp	r1,sp[0x10]
80004d0e:	ed b5 00 05 	bld	r5,0x5
80004d12:	c5 d1       	brne	80004dcc <_vfprintf_r+0xde4>
80004d14:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d18:	40 3c       	lddsp	r12,sp[0xc]
80004d1a:	58 0c       	cp.w	r12,0
80004d1c:	c2 60       	breq	80004d68 <_vfprintf_r+0xd80>
80004d1e:	10 36       	cp.w	r6,r8
80004d20:	c0 a4       	brge	80004d34 <_vfprintf_r+0xd4c>
80004d22:	fa cb f9 44 	sub	r11,sp,-1724
80004d26:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d2a:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004d2e:	fa e9 00 00 	st.d	sp[0],r8
80004d32:	c1 88       	rjmp	80004d62 <_vfprintf_r+0xd7a>
80004d34:	fa c8 f9 50 	sub	r8,sp,-1712
80004d38:	1a d8       	st.w	--sp,r8
80004d3a:	fa c8 fa b8 	sub	r8,sp,-1352
80004d3e:	04 9a       	mov	r10,r2
80004d40:	1a d8       	st.w	--sp,r8
80004d42:	0c 9b       	mov	r11,r6
80004d44:	fa c8 fb b4 	sub	r8,sp,-1100
80004d48:	08 9c       	mov	r12,r4
80004d4a:	1a d8       	st.w	--sp,r8
80004d4c:	fa c8 f9 40 	sub	r8,sp,-1728
80004d50:	fa c9 ff b4 	sub	r9,sp,-76
80004d54:	fe b0 f7 b2 	rcall	80003cb8 <get_arg>
80004d58:	2f dd       	sub	sp,-12
80004d5a:	f8 ea 00 00 	ld.d	r10,r12[0]
80004d5e:	fa eb 00 00 	st.d	sp[0],r10
80004d62:	30 08       	mov	r8,0
80004d64:	e0 8f 03 de 	bral	80005520 <_vfprintf_r+0x1538>
80004d68:	ee ca ff ff 	sub	r10,r7,-1
80004d6c:	10 37       	cp.w	r7,r8
80004d6e:	c0 b4       	brge	80004d84 <_vfprintf_r+0xd9c>
80004d70:	fa c9 f9 44 	sub	r9,sp,-1724
80004d74:	14 97       	mov	r7,r10
80004d76:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d7a:	ec ea fd 88 	ld.d	r10,r6[-632]
80004d7e:	fa eb 00 00 	st.d	sp[0],r10
80004d82:	c1 88       	rjmp	80004db2 <_vfprintf_r+0xdca>
80004d84:	41 09       	lddsp	r9,sp[0x40]
80004d86:	59 f8       	cp.w	r8,31
80004d88:	e0 89 00 18 	brgt	80004db8 <_vfprintf_r+0xdd0>
80004d8c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004d90:	f2 cb ff f8 	sub	r11,r9,-8
80004d94:	fa e7 00 00 	st.d	sp[0],r6
80004d98:	51 0b       	stdsp	sp[0x40],r11
80004d9a:	fa c6 f9 44 	sub	r6,sp,-1724
80004d9e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004da2:	fa e6 00 00 	ld.d	r6,sp[0]
80004da6:	f2 e7 fd 88 	st.d	r9[-632],r6
80004daa:	2f f8       	sub	r8,-1
80004dac:	14 97       	mov	r7,r10
80004dae:	fb 48 06 b4 	st.w	sp[1716],r8
80004db2:	40 38       	lddsp	r8,sp[0xc]
80004db4:	e0 8f 03 b6 	bral	80005520 <_vfprintf_r+0x1538>
80004db8:	f2 e6 00 00 	ld.d	r6,r9[0]
80004dbc:	40 38       	lddsp	r8,sp[0xc]
80004dbe:	fa e7 00 00 	st.d	sp[0],r6
80004dc2:	2f 89       	sub	r9,-8
80004dc4:	14 97       	mov	r7,r10
80004dc6:	51 09       	stdsp	sp[0x40],r9
80004dc8:	e0 8f 03 ac 	bral	80005520 <_vfprintf_r+0x1538>
80004dcc:	ed b5 00 04 	bld	r5,0x4
80004dd0:	c1 61       	brne	80004dfc <_vfprintf_r+0xe14>
80004dd2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dd6:	40 3e       	lddsp	lr,sp[0xc]
80004dd8:	58 0e       	cp.w	lr,0
80004dda:	c0 80       	breq	80004dea <_vfprintf_r+0xe02>
80004ddc:	10 36       	cp.w	r6,r8
80004dde:	c6 74       	brge	80004eac <_vfprintf_r+0xec4>
80004de0:	fa cc f9 44 	sub	r12,sp,-1724
80004de4:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004de8:	c8 08       	rjmp	80004ee8 <_vfprintf_r+0xf00>
80004dea:	ee ca ff ff 	sub	r10,r7,-1
80004dee:	10 37       	cp.w	r7,r8
80004df0:	c7 f4       	brge	80004eee <_vfprintf_r+0xf06>
80004df2:	fa cb f9 44 	sub	r11,sp,-1724
80004df6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004dfa:	c7 68       	rjmp	80004ee6 <_vfprintf_r+0xefe>
80004dfc:	ed b5 00 06 	bld	r5,0x6
80004e00:	c4 a1       	brne	80004e94 <_vfprintf_r+0xeac>
80004e02:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e06:	40 3c       	lddsp	r12,sp[0xc]
80004e08:	58 0c       	cp.w	r12,0
80004e0a:	c1 d0       	breq	80004e44 <_vfprintf_r+0xe5c>
80004e0c:	10 36       	cp.w	r6,r8
80004e0e:	c0 64       	brge	80004e1a <_vfprintf_r+0xe32>
80004e10:	fa cb f9 44 	sub	r11,sp,-1724
80004e14:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e18:	c1 f8       	rjmp	80004e56 <_vfprintf_r+0xe6e>
80004e1a:	fa c8 f9 50 	sub	r8,sp,-1712
80004e1e:	1a d8       	st.w	--sp,r8
80004e20:	fa c8 fa b8 	sub	r8,sp,-1352
80004e24:	1a d8       	st.w	--sp,r8
80004e26:	fa c8 fb b4 	sub	r8,sp,-1100
80004e2a:	1a d8       	st.w	--sp,r8
80004e2c:	fa c8 f9 40 	sub	r8,sp,-1728
80004e30:	fa c9 ff b4 	sub	r9,sp,-76
80004e34:	04 9a       	mov	r10,r2
80004e36:	0c 9b       	mov	r11,r6
80004e38:	08 9c       	mov	r12,r4
80004e3a:	fe b0 f7 3f 	rcall	80003cb8 <get_arg>
80004e3e:	2f dd       	sub	sp,-12
80004e40:	98 18       	ld.sh	r8,r12[0x2]
80004e42:	c2 68       	rjmp	80004e8e <_vfprintf_r+0xea6>
80004e44:	ee ca ff ff 	sub	r10,r7,-1
80004e48:	10 37       	cp.w	r7,r8
80004e4a:	c0 94       	brge	80004e5c <_vfprintf_r+0xe74>
80004e4c:	fa c9 f9 44 	sub	r9,sp,-1724
80004e50:	14 97       	mov	r7,r10
80004e52:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e56:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004e5a:	c1 a8       	rjmp	80004e8e <_vfprintf_r+0xea6>
80004e5c:	41 09       	lddsp	r9,sp[0x40]
80004e5e:	59 f8       	cp.w	r8,31
80004e60:	e0 89 00 13 	brgt	80004e86 <_vfprintf_r+0xe9e>
80004e64:	f2 cb ff fc 	sub	r11,r9,-4
80004e68:	51 0b       	stdsp	sp[0x40],r11
80004e6a:	72 09       	ld.w	r9,r9[0x0]
80004e6c:	fa c6 f9 44 	sub	r6,sp,-1724
80004e70:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004e74:	2f f8       	sub	r8,-1
80004e76:	f7 49 fd 88 	st.w	r11[-632],r9
80004e7a:	fb 48 06 b4 	st.w	sp[1716],r8
80004e7e:	14 97       	mov	r7,r10
80004e80:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004e84:	c0 58       	rjmp	80004e8e <_vfprintf_r+0xea6>
80004e86:	92 18       	ld.sh	r8,r9[0x2]
80004e88:	14 97       	mov	r7,r10
80004e8a:	2f c9       	sub	r9,-4
80004e8c:	51 09       	stdsp	sp[0x40],r9
80004e8e:	5c 78       	castu.h	r8
80004e90:	50 18       	stdsp	sp[0x4],r8
80004e92:	c4 68       	rjmp	80004f1e <_vfprintf_r+0xf36>
80004e94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e98:	40 3c       	lddsp	r12,sp[0xc]
80004e9a:	58 0c       	cp.w	r12,0
80004e9c:	c1 d0       	breq	80004ed6 <_vfprintf_r+0xeee>
80004e9e:	10 36       	cp.w	r6,r8
80004ea0:	c0 64       	brge	80004eac <_vfprintf_r+0xec4>
80004ea2:	fa cb f9 44 	sub	r11,sp,-1724
80004ea6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004eaa:	c1 f8       	rjmp	80004ee8 <_vfprintf_r+0xf00>
80004eac:	fa c8 f9 50 	sub	r8,sp,-1712
80004eb0:	1a d8       	st.w	--sp,r8
80004eb2:	fa c8 fa b8 	sub	r8,sp,-1352
80004eb6:	0c 9b       	mov	r11,r6
80004eb8:	1a d8       	st.w	--sp,r8
80004eba:	fa c8 fb b4 	sub	r8,sp,-1100
80004ebe:	04 9a       	mov	r10,r2
80004ec0:	1a d8       	st.w	--sp,r8
80004ec2:	08 9c       	mov	r12,r4
80004ec4:	fa c8 f9 40 	sub	r8,sp,-1728
80004ec8:	fa c9 ff b4 	sub	r9,sp,-76
80004ecc:	fe b0 f6 f6 	rcall	80003cb8 <get_arg>
80004ed0:	2f dd       	sub	sp,-12
80004ed2:	78 0b       	ld.w	r11,r12[0x0]
80004ed4:	c2 48       	rjmp	80004f1c <_vfprintf_r+0xf34>
80004ed6:	ee ca ff ff 	sub	r10,r7,-1
80004eda:	10 37       	cp.w	r7,r8
80004edc:	c0 94       	brge	80004eee <_vfprintf_r+0xf06>
80004ede:	fa c9 f9 44 	sub	r9,sp,-1724
80004ee2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ee6:	14 97       	mov	r7,r10
80004ee8:	ec fb fd 88 	ld.w	r11,r6[-632]
80004eec:	c1 88       	rjmp	80004f1c <_vfprintf_r+0xf34>
80004eee:	41 09       	lddsp	r9,sp[0x40]
80004ef0:	59 f8       	cp.w	r8,31
80004ef2:	e0 89 00 11 	brgt	80004f14 <_vfprintf_r+0xf2c>
80004ef6:	f2 cb ff fc 	sub	r11,r9,-4
80004efa:	51 0b       	stdsp	sp[0x40],r11
80004efc:	fa c6 f9 44 	sub	r6,sp,-1724
80004f00:	72 0b       	ld.w	r11,r9[0x0]
80004f02:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f06:	f3 4b fd 88 	st.w	r9[-632],r11
80004f0a:	2f f8       	sub	r8,-1
80004f0c:	14 97       	mov	r7,r10
80004f0e:	fb 48 06 b4 	st.w	sp[1716],r8
80004f12:	c0 58       	rjmp	80004f1c <_vfprintf_r+0xf34>
80004f14:	72 0b       	ld.w	r11,r9[0x0]
80004f16:	14 97       	mov	r7,r10
80004f18:	2f c9       	sub	r9,-4
80004f1a:	51 09       	stdsp	sp[0x40],r9
80004f1c:	50 1b       	stdsp	sp[0x4],r11
80004f1e:	30 0e       	mov	lr,0
80004f20:	50 0e       	stdsp	sp[0x0],lr
80004f22:	1c 98       	mov	r8,lr
80004f24:	e0 8f 02 fe 	bral	80005520 <_vfprintf_r+0x1538>
80004f28:	50 a7       	stdsp	sp[0x28],r7
80004f2a:	50 80       	stdsp	sp[0x20],r0
80004f2c:	0c 97       	mov	r7,r6
80004f2e:	04 94       	mov	r4,r2
80004f30:	06 96       	mov	r6,r3
80004f32:	02 92       	mov	r2,r1
80004f34:	40 93       	lddsp	r3,sp[0x24]
80004f36:	40 41       	lddsp	r1,sp[0x10]
80004f38:	0e 99       	mov	r9,r7
80004f3a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f3e:	40 3c       	lddsp	r12,sp[0xc]
80004f40:	58 0c       	cp.w	r12,0
80004f42:	c1 d0       	breq	80004f7c <_vfprintf_r+0xf94>
80004f44:	10 36       	cp.w	r6,r8
80004f46:	c0 64       	brge	80004f52 <_vfprintf_r+0xf6a>
80004f48:	fa cb f9 44 	sub	r11,sp,-1724
80004f4c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004f50:	c1 d8       	rjmp	80004f8a <_vfprintf_r+0xfa2>
80004f52:	fa c8 f9 50 	sub	r8,sp,-1712
80004f56:	1a d8       	st.w	--sp,r8
80004f58:	fa c8 fa b8 	sub	r8,sp,-1352
80004f5c:	1a d8       	st.w	--sp,r8
80004f5e:	fa c8 fb b4 	sub	r8,sp,-1100
80004f62:	1a d8       	st.w	--sp,r8
80004f64:	fa c9 ff b4 	sub	r9,sp,-76
80004f68:	fa c8 f9 40 	sub	r8,sp,-1728
80004f6c:	04 9a       	mov	r10,r2
80004f6e:	0c 9b       	mov	r11,r6
80004f70:	08 9c       	mov	r12,r4
80004f72:	fe b0 f6 a3 	rcall	80003cb8 <get_arg>
80004f76:	2f dd       	sub	sp,-12
80004f78:	78 09       	ld.w	r9,r12[0x0]
80004f7a:	c2 18       	rjmp	80004fbc <_vfprintf_r+0xfd4>
80004f7c:	2f f7       	sub	r7,-1
80004f7e:	10 39       	cp.w	r9,r8
80004f80:	c0 84       	brge	80004f90 <_vfprintf_r+0xfa8>
80004f82:	fa ca f9 44 	sub	r10,sp,-1724
80004f86:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004f8a:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004f8e:	c1 78       	rjmp	80004fbc <_vfprintf_r+0xfd4>
80004f90:	41 09       	lddsp	r9,sp[0x40]
80004f92:	59 f8       	cp.w	r8,31
80004f94:	e0 89 00 10 	brgt	80004fb4 <_vfprintf_r+0xfcc>
80004f98:	f2 ca ff fc 	sub	r10,r9,-4
80004f9c:	51 0a       	stdsp	sp[0x40],r10
80004f9e:	fa c6 f9 44 	sub	r6,sp,-1724
80004fa2:	72 09       	ld.w	r9,r9[0x0]
80004fa4:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004fa8:	f5 49 fd 88 	st.w	r10[-632],r9
80004fac:	2f f8       	sub	r8,-1
80004fae:	fb 48 06 b4 	st.w	sp[1716],r8
80004fb2:	c0 58       	rjmp	80004fbc <_vfprintf_r+0xfd4>
80004fb4:	f2 c8 ff fc 	sub	r8,r9,-4
80004fb8:	51 08       	stdsp	sp[0x40],r8
80004fba:	72 09       	ld.w	r9,r9[0x0]
80004fbc:	33 08       	mov	r8,48
80004fbe:	fb 68 06 b8 	st.b	sp[1720],r8
80004fc2:	37 88       	mov	r8,120
80004fc4:	30 0e       	mov	lr,0
80004fc6:	fb 68 06 b9 	st.b	sp[1721],r8
80004fca:	fe cc b9 6a 	sub	r12,pc,-18070
80004fce:	50 19       	stdsp	sp[0x4],r9
80004fd0:	a1 b5       	sbr	r5,0x1
80004fd2:	50 0e       	stdsp	sp[0x0],lr
80004fd4:	50 dc       	stdsp	sp[0x34],r12
80004fd6:	30 28       	mov	r8,2
80004fd8:	37 80       	mov	r0,120
80004fda:	e0 8f 02 a3 	bral	80005520 <_vfprintf_r+0x1538>
80004fde:	50 a7       	stdsp	sp[0x28],r7
80004fe0:	50 80       	stdsp	sp[0x20],r0
80004fe2:	10 90       	mov	r0,r8
80004fe4:	30 08       	mov	r8,0
80004fe6:	fb 68 06 bb 	st.b	sp[1723],r8
80004fea:	0c 97       	mov	r7,r6
80004fec:	04 94       	mov	r4,r2
80004fee:	06 96       	mov	r6,r3
80004ff0:	02 92       	mov	r2,r1
80004ff2:	40 93       	lddsp	r3,sp[0x24]
80004ff4:	40 41       	lddsp	r1,sp[0x10]
80004ff6:	0e 99       	mov	r9,r7
80004ff8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ffc:	40 3b       	lddsp	r11,sp[0xc]
80004ffe:	58 0b       	cp.w	r11,0
80005000:	c1 d0       	breq	8000503a <_vfprintf_r+0x1052>
80005002:	10 36       	cp.w	r6,r8
80005004:	c0 64       	brge	80005010 <_vfprintf_r+0x1028>
80005006:	fa ca f9 44 	sub	r10,sp,-1724
8000500a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000500e:	c1 d8       	rjmp	80005048 <_vfprintf_r+0x1060>
80005010:	fa c8 f9 50 	sub	r8,sp,-1712
80005014:	1a d8       	st.w	--sp,r8
80005016:	fa c8 fa b8 	sub	r8,sp,-1352
8000501a:	1a d8       	st.w	--sp,r8
8000501c:	fa c8 fb b4 	sub	r8,sp,-1100
80005020:	0c 9b       	mov	r11,r6
80005022:	1a d8       	st.w	--sp,r8
80005024:	04 9a       	mov	r10,r2
80005026:	fa c8 f9 40 	sub	r8,sp,-1728
8000502a:	fa c9 ff b4 	sub	r9,sp,-76
8000502e:	08 9c       	mov	r12,r4
80005030:	fe b0 f6 44 	rcall	80003cb8 <get_arg>
80005034:	2f dd       	sub	sp,-12
80005036:	78 06       	ld.w	r6,r12[0x0]
80005038:	c2 08       	rjmp	80005078 <_vfprintf_r+0x1090>
8000503a:	2f f7       	sub	r7,-1
8000503c:	10 39       	cp.w	r9,r8
8000503e:	c0 84       	brge	8000504e <_vfprintf_r+0x1066>
80005040:	fa c9 f9 44 	sub	r9,sp,-1724
80005044:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005048:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000504c:	c1 68       	rjmp	80005078 <_vfprintf_r+0x1090>
8000504e:	41 09       	lddsp	r9,sp[0x40]
80005050:	59 f8       	cp.w	r8,31
80005052:	e0 89 00 10 	brgt	80005072 <_vfprintf_r+0x108a>
80005056:	f2 ca ff fc 	sub	r10,r9,-4
8000505a:	51 0a       	stdsp	sp[0x40],r10
8000505c:	72 06       	ld.w	r6,r9[0x0]
8000505e:	fa ce f9 44 	sub	lr,sp,-1724
80005062:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005066:	f3 46 fd 88 	st.w	r9[-632],r6
8000506a:	2f f8       	sub	r8,-1
8000506c:	fb 48 06 b4 	st.w	sp[1716],r8
80005070:	c0 48       	rjmp	80005078 <_vfprintf_r+0x1090>
80005072:	72 06       	ld.w	r6,r9[0x0]
80005074:	2f c9       	sub	r9,-4
80005076:	51 09       	stdsp	sp[0x40],r9
80005078:	40 2c       	lddsp	r12,sp[0x8]
8000507a:	58 0c       	cp.w	r12,0
8000507c:	c1 05       	brlt	8000509c <_vfprintf_r+0x10b4>
8000507e:	18 9a       	mov	r10,r12
80005080:	30 0b       	mov	r11,0
80005082:	0c 9c       	mov	r12,r6
80005084:	e0 a0 14 58 	rcall	80007934 <memchr>
80005088:	e0 80 02 df 	breq	80005646 <_vfprintf_r+0x165e>
8000508c:	f8 06 01 02 	sub	r2,r12,r6
80005090:	40 2b       	lddsp	r11,sp[0x8]
80005092:	16 32       	cp.w	r2,r11
80005094:	e0 89 02 d9 	brgt	80005646 <_vfprintf_r+0x165e>
80005098:	e0 8f 02 d4 	bral	80005640 <_vfprintf_r+0x1658>
8000509c:	30 0a       	mov	r10,0
8000509e:	0c 9c       	mov	r12,r6
800050a0:	50 2a       	stdsp	sp[0x8],r10
800050a2:	e0 a0 19 33 	rcall	80008308 <strlen>
800050a6:	18 92       	mov	r2,r12
800050a8:	e0 8f 02 d2 	bral	8000564c <_vfprintf_r+0x1664>
800050ac:	50 a7       	stdsp	sp[0x28],r7
800050ae:	50 80       	stdsp	sp[0x20],r0
800050b0:	0c 97       	mov	r7,r6
800050b2:	04 94       	mov	r4,r2
800050b4:	06 96       	mov	r6,r3
800050b6:	02 92       	mov	r2,r1
800050b8:	40 93       	lddsp	r3,sp[0x24]
800050ba:	10 90       	mov	r0,r8
800050bc:	40 41       	lddsp	r1,sp[0x10]
800050be:	a5 a5       	sbr	r5,0x4
800050c0:	c0 a8       	rjmp	800050d4 <_vfprintf_r+0x10ec>
800050c2:	50 a7       	stdsp	sp[0x28],r7
800050c4:	50 80       	stdsp	sp[0x20],r0
800050c6:	0c 97       	mov	r7,r6
800050c8:	04 94       	mov	r4,r2
800050ca:	06 96       	mov	r6,r3
800050cc:	02 92       	mov	r2,r1
800050ce:	40 93       	lddsp	r3,sp[0x24]
800050d0:	10 90       	mov	r0,r8
800050d2:	40 41       	lddsp	r1,sp[0x10]
800050d4:	ed b5 00 05 	bld	r5,0x5
800050d8:	c5 61       	brne	80005184 <_vfprintf_r+0x119c>
800050da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050de:	40 39       	lddsp	r9,sp[0xc]
800050e0:	58 09       	cp.w	r9,0
800050e2:	c2 10       	breq	80005124 <_vfprintf_r+0x113c>
800050e4:	10 36       	cp.w	r6,r8
800050e6:	c0 74       	brge	800050f4 <_vfprintf_r+0x110c>
800050e8:	fa c8 f9 44 	sub	r8,sp,-1724
800050ec:	f0 06 00 36 	add	r6,r8,r6<<0x3
800050f0:	c2 38       	rjmp	80005136 <_vfprintf_r+0x114e>
800050f2:	d7 03       	nop
800050f4:	fa c8 f9 50 	sub	r8,sp,-1712
800050f8:	1a d8       	st.w	--sp,r8
800050fa:	fa c8 fa b8 	sub	r8,sp,-1352
800050fe:	1a d8       	st.w	--sp,r8
80005100:	fa c8 fb b4 	sub	r8,sp,-1100
80005104:	1a d8       	st.w	--sp,r8
80005106:	fa c8 f9 40 	sub	r8,sp,-1728
8000510a:	fa c9 ff b4 	sub	r9,sp,-76
8000510e:	04 9a       	mov	r10,r2
80005110:	0c 9b       	mov	r11,r6
80005112:	08 9c       	mov	r12,r4
80005114:	fe b0 f5 d2 	rcall	80003cb8 <get_arg>
80005118:	2f dd       	sub	sp,-12
8000511a:	f8 e8 00 00 	ld.d	r8,r12[0]
8000511e:	fa e9 00 00 	st.d	sp[0],r8
80005122:	c2 e8       	rjmp	8000517e <_vfprintf_r+0x1196>
80005124:	ee ca ff ff 	sub	r10,r7,-1
80005128:	10 37       	cp.w	r7,r8
8000512a:	c0 b4       	brge	80005140 <_vfprintf_r+0x1158>
8000512c:	fa c8 f9 44 	sub	r8,sp,-1724
80005130:	14 97       	mov	r7,r10
80005132:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005136:	ec ea fd 88 	ld.d	r10,r6[-632]
8000513a:	fa eb 00 00 	st.d	sp[0],r10
8000513e:	c2 08       	rjmp	8000517e <_vfprintf_r+0x1196>
80005140:	41 09       	lddsp	r9,sp[0x40]
80005142:	59 f8       	cp.w	r8,31
80005144:	e0 89 00 16 	brgt	80005170 <_vfprintf_r+0x1188>
80005148:	f2 e6 00 00 	ld.d	r6,r9[0]
8000514c:	f2 cb ff f8 	sub	r11,r9,-8
80005150:	fa e7 00 00 	st.d	sp[0],r6
80005154:	51 0b       	stdsp	sp[0x40],r11
80005156:	fa c6 f9 44 	sub	r6,sp,-1724
8000515a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000515e:	fa e6 00 00 	ld.d	r6,sp[0]
80005162:	f2 e7 fd 88 	st.d	r9[-632],r6
80005166:	2f f8       	sub	r8,-1
80005168:	14 97       	mov	r7,r10
8000516a:	fb 48 06 b4 	st.w	sp[1716],r8
8000516e:	c0 88       	rjmp	8000517e <_vfprintf_r+0x1196>
80005170:	f2 e6 00 00 	ld.d	r6,r9[0]
80005174:	2f 89       	sub	r9,-8
80005176:	fa e7 00 00 	st.d	sp[0],r6
8000517a:	51 09       	stdsp	sp[0x40],r9
8000517c:	14 97       	mov	r7,r10
8000517e:	30 18       	mov	r8,1
80005180:	e0 8f 01 d0 	bral	80005520 <_vfprintf_r+0x1538>
80005184:	ed b5 00 04 	bld	r5,0x4
80005188:	c1 61       	brne	800051b4 <_vfprintf_r+0x11cc>
8000518a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000518e:	40 3e       	lddsp	lr,sp[0xc]
80005190:	58 0e       	cp.w	lr,0
80005192:	c0 80       	breq	800051a2 <_vfprintf_r+0x11ba>
80005194:	10 36       	cp.w	r6,r8
80005196:	c6 74       	brge	80005264 <_vfprintf_r+0x127c>
80005198:	fa cc f9 44 	sub	r12,sp,-1724
8000519c:	f8 06 00 36 	add	r6,r12,r6<<0x3
800051a0:	c8 08       	rjmp	800052a0 <_vfprintf_r+0x12b8>
800051a2:	ee ca ff ff 	sub	r10,r7,-1
800051a6:	10 37       	cp.w	r7,r8
800051a8:	c7 f4       	brge	800052a6 <_vfprintf_r+0x12be>
800051aa:	fa cb f9 44 	sub	r11,sp,-1724
800051ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051b2:	c7 68       	rjmp	8000529e <_vfprintf_r+0x12b6>
800051b4:	ed b5 00 06 	bld	r5,0x6
800051b8:	c4 a1       	brne	8000524c <_vfprintf_r+0x1264>
800051ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051be:	40 3c       	lddsp	r12,sp[0xc]
800051c0:	58 0c       	cp.w	r12,0
800051c2:	c1 d0       	breq	800051fc <_vfprintf_r+0x1214>
800051c4:	10 36       	cp.w	r6,r8
800051c6:	c0 64       	brge	800051d2 <_vfprintf_r+0x11ea>
800051c8:	fa cb f9 44 	sub	r11,sp,-1724
800051cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051d0:	c1 f8       	rjmp	8000520e <_vfprintf_r+0x1226>
800051d2:	fa c8 f9 50 	sub	r8,sp,-1712
800051d6:	1a d8       	st.w	--sp,r8
800051d8:	fa c8 fa b8 	sub	r8,sp,-1352
800051dc:	1a d8       	st.w	--sp,r8
800051de:	fa c8 fb b4 	sub	r8,sp,-1100
800051e2:	1a d8       	st.w	--sp,r8
800051e4:	fa c8 f9 40 	sub	r8,sp,-1728
800051e8:	fa c9 ff b4 	sub	r9,sp,-76
800051ec:	04 9a       	mov	r10,r2
800051ee:	0c 9b       	mov	r11,r6
800051f0:	08 9c       	mov	r12,r4
800051f2:	fe b0 f5 63 	rcall	80003cb8 <get_arg>
800051f6:	2f dd       	sub	sp,-12
800051f8:	98 18       	ld.sh	r8,r12[0x2]
800051fa:	c2 68       	rjmp	80005246 <_vfprintf_r+0x125e>
800051fc:	ee ca ff ff 	sub	r10,r7,-1
80005200:	10 37       	cp.w	r7,r8
80005202:	c0 94       	brge	80005214 <_vfprintf_r+0x122c>
80005204:	fa c9 f9 44 	sub	r9,sp,-1724
80005208:	14 97       	mov	r7,r10
8000520a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000520e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005212:	c1 a8       	rjmp	80005246 <_vfprintf_r+0x125e>
80005214:	41 09       	lddsp	r9,sp[0x40]
80005216:	59 f8       	cp.w	r8,31
80005218:	e0 89 00 13 	brgt	8000523e <_vfprintf_r+0x1256>
8000521c:	f2 cb ff fc 	sub	r11,r9,-4
80005220:	51 0b       	stdsp	sp[0x40],r11
80005222:	72 09       	ld.w	r9,r9[0x0]
80005224:	fa c6 f9 44 	sub	r6,sp,-1724
80005228:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000522c:	2f f8       	sub	r8,-1
8000522e:	f7 49 fd 88 	st.w	r11[-632],r9
80005232:	fb 48 06 b4 	st.w	sp[1716],r8
80005236:	14 97       	mov	r7,r10
80005238:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000523c:	c0 58       	rjmp	80005246 <_vfprintf_r+0x125e>
8000523e:	92 18       	ld.sh	r8,r9[0x2]
80005240:	14 97       	mov	r7,r10
80005242:	2f c9       	sub	r9,-4
80005244:	51 09       	stdsp	sp[0x40],r9
80005246:	5c 78       	castu.h	r8
80005248:	50 18       	stdsp	sp[0x4],r8
8000524a:	c4 68       	rjmp	800052d6 <_vfprintf_r+0x12ee>
8000524c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005250:	40 3c       	lddsp	r12,sp[0xc]
80005252:	58 0c       	cp.w	r12,0
80005254:	c1 d0       	breq	8000528e <_vfprintf_r+0x12a6>
80005256:	10 36       	cp.w	r6,r8
80005258:	c0 64       	brge	80005264 <_vfprintf_r+0x127c>
8000525a:	fa cb f9 44 	sub	r11,sp,-1724
8000525e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005262:	c1 f8       	rjmp	800052a0 <_vfprintf_r+0x12b8>
80005264:	fa c8 f9 50 	sub	r8,sp,-1712
80005268:	1a d8       	st.w	--sp,r8
8000526a:	fa c8 fa b8 	sub	r8,sp,-1352
8000526e:	0c 9b       	mov	r11,r6
80005270:	1a d8       	st.w	--sp,r8
80005272:	fa c8 fb b4 	sub	r8,sp,-1100
80005276:	04 9a       	mov	r10,r2
80005278:	1a d8       	st.w	--sp,r8
8000527a:	08 9c       	mov	r12,r4
8000527c:	fa c8 f9 40 	sub	r8,sp,-1728
80005280:	fa c9 ff b4 	sub	r9,sp,-76
80005284:	fe b0 f5 1a 	rcall	80003cb8 <get_arg>
80005288:	2f dd       	sub	sp,-12
8000528a:	78 0b       	ld.w	r11,r12[0x0]
8000528c:	c2 48       	rjmp	800052d4 <_vfprintf_r+0x12ec>
8000528e:	ee ca ff ff 	sub	r10,r7,-1
80005292:	10 37       	cp.w	r7,r8
80005294:	c0 94       	brge	800052a6 <_vfprintf_r+0x12be>
80005296:	fa c9 f9 44 	sub	r9,sp,-1724
8000529a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000529e:	14 97       	mov	r7,r10
800052a0:	ec fb fd 88 	ld.w	r11,r6[-632]
800052a4:	c1 88       	rjmp	800052d4 <_vfprintf_r+0x12ec>
800052a6:	41 09       	lddsp	r9,sp[0x40]
800052a8:	59 f8       	cp.w	r8,31
800052aa:	e0 89 00 11 	brgt	800052cc <_vfprintf_r+0x12e4>
800052ae:	f2 cb ff fc 	sub	r11,r9,-4
800052b2:	51 0b       	stdsp	sp[0x40],r11
800052b4:	fa c6 f9 44 	sub	r6,sp,-1724
800052b8:	72 0b       	ld.w	r11,r9[0x0]
800052ba:	ec 08 00 39 	add	r9,r6,r8<<0x3
800052be:	f3 4b fd 88 	st.w	r9[-632],r11
800052c2:	2f f8       	sub	r8,-1
800052c4:	14 97       	mov	r7,r10
800052c6:	fb 48 06 b4 	st.w	sp[1716],r8
800052ca:	c0 58       	rjmp	800052d4 <_vfprintf_r+0x12ec>
800052cc:	72 0b       	ld.w	r11,r9[0x0]
800052ce:	14 97       	mov	r7,r10
800052d0:	2f c9       	sub	r9,-4
800052d2:	51 09       	stdsp	sp[0x40],r9
800052d4:	50 1b       	stdsp	sp[0x4],r11
800052d6:	30 0e       	mov	lr,0
800052d8:	30 18       	mov	r8,1
800052da:	50 0e       	stdsp	sp[0x0],lr
800052dc:	c2 29       	rjmp	80005520 <_vfprintf_r+0x1538>
800052de:	50 a7       	stdsp	sp[0x28],r7
800052e0:	50 80       	stdsp	sp[0x20],r0
800052e2:	0c 97       	mov	r7,r6
800052e4:	04 94       	mov	r4,r2
800052e6:	06 96       	mov	r6,r3
800052e8:	02 92       	mov	r2,r1
800052ea:	fe cc bc 8a 	sub	r12,pc,-17270
800052ee:	40 93       	lddsp	r3,sp[0x24]
800052f0:	10 90       	mov	r0,r8
800052f2:	40 41       	lddsp	r1,sp[0x10]
800052f4:	50 dc       	stdsp	sp[0x34],r12
800052f6:	ed b5 00 05 	bld	r5,0x5
800052fa:	c5 51       	brne	800053a4 <_vfprintf_r+0x13bc>
800052fc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005300:	40 3b       	lddsp	r11,sp[0xc]
80005302:	58 0b       	cp.w	r11,0
80005304:	c2 20       	breq	80005348 <_vfprintf_r+0x1360>
80005306:	10 36       	cp.w	r6,r8
80005308:	c0 a4       	brge	8000531c <_vfprintf_r+0x1334>
8000530a:	fa ca f9 44 	sub	r10,sp,-1724
8000530e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005312:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005316:	fa e9 00 00 	st.d	sp[0],r8
8000531a:	cf 28       	rjmp	800054fe <_vfprintf_r+0x1516>
8000531c:	fa c8 f9 50 	sub	r8,sp,-1712
80005320:	1a d8       	st.w	--sp,r8
80005322:	fa c8 fa b8 	sub	r8,sp,-1352
80005326:	04 9a       	mov	r10,r2
80005328:	1a d8       	st.w	--sp,r8
8000532a:	0c 9b       	mov	r11,r6
8000532c:	fa c8 fb b4 	sub	r8,sp,-1100
80005330:	08 9c       	mov	r12,r4
80005332:	1a d8       	st.w	--sp,r8
80005334:	fa c8 f9 40 	sub	r8,sp,-1728
80005338:	fa c9 ff b4 	sub	r9,sp,-76
8000533c:	fe b0 f4 be 	rcall	80003cb8 <get_arg>
80005340:	2f dd       	sub	sp,-12
80005342:	f8 ea 00 00 	ld.d	r10,r12[0]
80005346:	c0 c8       	rjmp	8000535e <_vfprintf_r+0x1376>
80005348:	ee ca ff ff 	sub	r10,r7,-1
8000534c:	10 37       	cp.w	r7,r8
8000534e:	c0 b4       	brge	80005364 <_vfprintf_r+0x137c>
80005350:	fa c9 f9 44 	sub	r9,sp,-1724
80005354:	14 97       	mov	r7,r10
80005356:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000535a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000535e:	fa eb 00 00 	st.d	sp[0],r10
80005362:	cc e8       	rjmp	800054fe <_vfprintf_r+0x1516>
80005364:	41 09       	lddsp	r9,sp[0x40]
80005366:	59 f8       	cp.w	r8,31
80005368:	e0 89 00 16 	brgt	80005394 <_vfprintf_r+0x13ac>
8000536c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005370:	f2 cb ff f8 	sub	r11,r9,-8
80005374:	fa e7 00 00 	st.d	sp[0],r6
80005378:	51 0b       	stdsp	sp[0x40],r11
8000537a:	fa c6 f9 44 	sub	r6,sp,-1724
8000537e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005382:	fa e6 00 00 	ld.d	r6,sp[0]
80005386:	f2 e7 fd 88 	st.d	r9[-632],r6
8000538a:	2f f8       	sub	r8,-1
8000538c:	14 97       	mov	r7,r10
8000538e:	fb 48 06 b4 	st.w	sp[1716],r8
80005392:	cb 68       	rjmp	800054fe <_vfprintf_r+0x1516>
80005394:	f2 e6 00 00 	ld.d	r6,r9[0]
80005398:	2f 89       	sub	r9,-8
8000539a:	fa e7 00 00 	st.d	sp[0],r6
8000539e:	51 09       	stdsp	sp[0x40],r9
800053a0:	14 97       	mov	r7,r10
800053a2:	ca e8       	rjmp	800054fe <_vfprintf_r+0x1516>
800053a4:	ed b5 00 04 	bld	r5,0x4
800053a8:	c1 71       	brne	800053d6 <_vfprintf_r+0x13ee>
800053aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053ae:	40 3e       	lddsp	lr,sp[0xc]
800053b0:	58 0e       	cp.w	lr,0
800053b2:	c0 80       	breq	800053c2 <_vfprintf_r+0x13da>
800053b4:	10 36       	cp.w	r6,r8
800053b6:	c6 94       	brge	80005488 <_vfprintf_r+0x14a0>
800053b8:	fa cc f9 44 	sub	r12,sp,-1724
800053bc:	f8 06 00 36 	add	r6,r12,r6<<0x3
800053c0:	c8 28       	rjmp	800054c4 <_vfprintf_r+0x14dc>
800053c2:	ee ca ff ff 	sub	r10,r7,-1
800053c6:	10 37       	cp.w	r7,r8
800053c8:	e0 84 00 81 	brge	800054ca <_vfprintf_r+0x14e2>
800053cc:	fa cb f9 44 	sub	r11,sp,-1724
800053d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053d4:	c7 78       	rjmp	800054c2 <_vfprintf_r+0x14da>
800053d6:	ed b5 00 06 	bld	r5,0x6
800053da:	c4 b1       	brne	80005470 <_vfprintf_r+0x1488>
800053dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053e0:	40 3c       	lddsp	r12,sp[0xc]
800053e2:	58 0c       	cp.w	r12,0
800053e4:	c1 d0       	breq	8000541e <_vfprintf_r+0x1436>
800053e6:	10 36       	cp.w	r6,r8
800053e8:	c0 64       	brge	800053f4 <_vfprintf_r+0x140c>
800053ea:	fa cb f9 44 	sub	r11,sp,-1724
800053ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053f2:	c1 f8       	rjmp	80005430 <_vfprintf_r+0x1448>
800053f4:	fa c8 f9 50 	sub	r8,sp,-1712
800053f8:	1a d8       	st.w	--sp,r8
800053fa:	fa c8 fa b8 	sub	r8,sp,-1352
800053fe:	1a d8       	st.w	--sp,r8
80005400:	fa c8 fb b4 	sub	r8,sp,-1100
80005404:	1a d8       	st.w	--sp,r8
80005406:	fa c8 f9 40 	sub	r8,sp,-1728
8000540a:	fa c9 ff b4 	sub	r9,sp,-76
8000540e:	04 9a       	mov	r10,r2
80005410:	0c 9b       	mov	r11,r6
80005412:	08 9c       	mov	r12,r4
80005414:	fe b0 f4 52 	rcall	80003cb8 <get_arg>
80005418:	2f dd       	sub	sp,-12
8000541a:	98 18       	ld.sh	r8,r12[0x2]
8000541c:	c2 78       	rjmp	8000546a <_vfprintf_r+0x1482>
8000541e:	ee ca ff ff 	sub	r10,r7,-1
80005422:	10 37       	cp.w	r7,r8
80005424:	c0 a4       	brge	80005438 <_vfprintf_r+0x1450>
80005426:	fa c9 f9 44 	sub	r9,sp,-1724
8000542a:	14 97       	mov	r7,r10
8000542c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005430:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005434:	c1 b8       	rjmp	8000546a <_vfprintf_r+0x1482>
80005436:	d7 03       	nop
80005438:	41 09       	lddsp	r9,sp[0x40]
8000543a:	59 f8       	cp.w	r8,31
8000543c:	e0 89 00 13 	brgt	80005462 <_vfprintf_r+0x147a>
80005440:	f2 cb ff fc 	sub	r11,r9,-4
80005444:	51 0b       	stdsp	sp[0x40],r11
80005446:	72 09       	ld.w	r9,r9[0x0]
80005448:	fa c6 f9 44 	sub	r6,sp,-1724
8000544c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005450:	2f f8       	sub	r8,-1
80005452:	f7 49 fd 88 	st.w	r11[-632],r9
80005456:	fb 48 06 b4 	st.w	sp[1716],r8
8000545a:	14 97       	mov	r7,r10
8000545c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005460:	c0 58       	rjmp	8000546a <_vfprintf_r+0x1482>
80005462:	92 18       	ld.sh	r8,r9[0x2]
80005464:	14 97       	mov	r7,r10
80005466:	2f c9       	sub	r9,-4
80005468:	51 09       	stdsp	sp[0x40],r9
8000546a:	5c 78       	castu.h	r8
8000546c:	50 18       	stdsp	sp[0x4],r8
8000546e:	c4 68       	rjmp	800054fa <_vfprintf_r+0x1512>
80005470:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005474:	40 3c       	lddsp	r12,sp[0xc]
80005476:	58 0c       	cp.w	r12,0
80005478:	c1 d0       	breq	800054b2 <_vfprintf_r+0x14ca>
8000547a:	10 36       	cp.w	r6,r8
8000547c:	c0 64       	brge	80005488 <_vfprintf_r+0x14a0>
8000547e:	fa cb f9 44 	sub	r11,sp,-1724
80005482:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005486:	c1 f8       	rjmp	800054c4 <_vfprintf_r+0x14dc>
80005488:	fa c8 f9 50 	sub	r8,sp,-1712
8000548c:	1a d8       	st.w	--sp,r8
8000548e:	fa c8 fa b8 	sub	r8,sp,-1352
80005492:	0c 9b       	mov	r11,r6
80005494:	1a d8       	st.w	--sp,r8
80005496:	fa c8 fb b4 	sub	r8,sp,-1100
8000549a:	04 9a       	mov	r10,r2
8000549c:	1a d8       	st.w	--sp,r8
8000549e:	08 9c       	mov	r12,r4
800054a0:	fa c8 f9 40 	sub	r8,sp,-1728
800054a4:	fa c9 ff b4 	sub	r9,sp,-76
800054a8:	fe b0 f4 08 	rcall	80003cb8 <get_arg>
800054ac:	2f dd       	sub	sp,-12
800054ae:	78 0b       	ld.w	r11,r12[0x0]
800054b0:	c2 48       	rjmp	800054f8 <_vfprintf_r+0x1510>
800054b2:	ee ca ff ff 	sub	r10,r7,-1
800054b6:	10 37       	cp.w	r7,r8
800054b8:	c0 94       	brge	800054ca <_vfprintf_r+0x14e2>
800054ba:	fa c9 f9 44 	sub	r9,sp,-1724
800054be:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054c2:	14 97       	mov	r7,r10
800054c4:	ec fb fd 88 	ld.w	r11,r6[-632]
800054c8:	c1 88       	rjmp	800054f8 <_vfprintf_r+0x1510>
800054ca:	41 09       	lddsp	r9,sp[0x40]
800054cc:	59 f8       	cp.w	r8,31
800054ce:	e0 89 00 11 	brgt	800054f0 <_vfprintf_r+0x1508>
800054d2:	f2 cb ff fc 	sub	r11,r9,-4
800054d6:	51 0b       	stdsp	sp[0x40],r11
800054d8:	fa c6 f9 44 	sub	r6,sp,-1724
800054dc:	72 0b       	ld.w	r11,r9[0x0]
800054de:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054e2:	f3 4b fd 88 	st.w	r9[-632],r11
800054e6:	2f f8       	sub	r8,-1
800054e8:	14 97       	mov	r7,r10
800054ea:	fb 48 06 b4 	st.w	sp[1716],r8
800054ee:	c0 58       	rjmp	800054f8 <_vfprintf_r+0x1510>
800054f0:	72 0b       	ld.w	r11,r9[0x0]
800054f2:	14 97       	mov	r7,r10
800054f4:	2f c9       	sub	r9,-4
800054f6:	51 09       	stdsp	sp[0x40],r9
800054f8:	50 1b       	stdsp	sp[0x4],r11
800054fa:	30 0e       	mov	lr,0
800054fc:	50 0e       	stdsp	sp[0x0],lr
800054fe:	40 08       	lddsp	r8,sp[0x0]
80005500:	40 1c       	lddsp	r12,sp[0x4]
80005502:	18 48       	or	r8,r12
80005504:	5f 19       	srne	r9
80005506:	0a 98       	mov	r8,r5
80005508:	eb e9 00 09 	and	r9,r5,r9
8000550c:	a1 b8       	sbr	r8,0x1
8000550e:	58 09       	cp.w	r9,0
80005510:	c0 70       	breq	8000551e <_vfprintf_r+0x1536>
80005512:	10 95       	mov	r5,r8
80005514:	fb 60 06 b9 	st.b	sp[1721],r0
80005518:	33 08       	mov	r8,48
8000551a:	fb 68 06 b8 	st.b	sp[1720],r8
8000551e:	30 28       	mov	r8,2
80005520:	30 09       	mov	r9,0
80005522:	fb 69 06 bb 	st.b	sp[1723],r9
80005526:	0a 99       	mov	r9,r5
80005528:	a7 d9       	cbr	r9,0x7
8000552a:	40 2b       	lddsp	r11,sp[0x8]
8000552c:	40 16       	lddsp	r6,sp[0x4]
8000552e:	58 0b       	cp.w	r11,0
80005530:	5f 1a       	srne	r10
80005532:	f2 05 17 40 	movge	r5,r9
80005536:	fa c2 f9 78 	sub	r2,sp,-1672
8000553a:	40 09       	lddsp	r9,sp[0x0]
8000553c:	0c 49       	or	r9,r6
8000553e:	5f 19       	srne	r9
80005540:	f5 e9 10 09 	or	r9,r10,r9
80005544:	c5 c0       	breq	800055fc <_vfprintf_r+0x1614>
80005546:	30 19       	mov	r9,1
80005548:	f2 08 18 00 	cp.b	r8,r9
8000554c:	c0 60       	breq	80005558 <_vfprintf_r+0x1570>
8000554e:	30 29       	mov	r9,2
80005550:	f2 08 18 00 	cp.b	r8,r9
80005554:	c0 41       	brne	8000555c <_vfprintf_r+0x1574>
80005556:	c3 c8       	rjmp	800055ce <_vfprintf_r+0x15e6>
80005558:	04 96       	mov	r6,r2
8000555a:	c3 08       	rjmp	800055ba <_vfprintf_r+0x15d2>
8000555c:	04 96       	mov	r6,r2
8000555e:	fa e8 00 00 	ld.d	r8,sp[0]
80005562:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005566:	2d 0a       	sub	r10,-48
80005568:	0c fa       	st.b	--r6,r10
8000556a:	f0 0b 16 03 	lsr	r11,r8,0x3
8000556e:	f2 0c 16 03 	lsr	r12,r9,0x3
80005572:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005576:	18 99       	mov	r9,r12
80005578:	16 98       	mov	r8,r11
8000557a:	58 08       	cp.w	r8,0
8000557c:	5c 29       	cpc	r9
8000557e:	cf 21       	brne	80005562 <_vfprintf_r+0x157a>
80005580:	fa e9 00 00 	st.d	sp[0],r8
80005584:	ed b5 00 00 	bld	r5,0x0
80005588:	c4 51       	brne	80005612 <_vfprintf_r+0x162a>
8000558a:	33 09       	mov	r9,48
8000558c:	f2 0a 18 00 	cp.b	r10,r9
80005590:	c4 10       	breq	80005612 <_vfprintf_r+0x162a>
80005592:	0c f9       	st.b	--r6,r9
80005594:	c3 f8       	rjmp	80005612 <_vfprintf_r+0x162a>
80005596:	fa ea 00 00 	ld.d	r10,sp[0]
8000559a:	30 a8       	mov	r8,10
8000559c:	30 09       	mov	r9,0
8000559e:	e0 a0 1b bb 	rcall	80008d14 <__avr32_umod64>
800055a2:	30 a8       	mov	r8,10
800055a4:	2d 0a       	sub	r10,-48
800055a6:	30 09       	mov	r9,0
800055a8:	ac 8a       	st.b	r6[0x0],r10
800055aa:	fa ea 00 00 	ld.d	r10,sp[0]
800055ae:	e0 a0 1a 81 	rcall	80008ab0 <__avr32_udiv64>
800055b2:	16 99       	mov	r9,r11
800055b4:	14 98       	mov	r8,r10
800055b6:	fa e9 00 00 	st.d	sp[0],r8
800055ba:	20 16       	sub	r6,1
800055bc:	fa ea 00 00 	ld.d	r10,sp[0]
800055c0:	58 9a       	cp.w	r10,9
800055c2:	5c 2b       	cpc	r11
800055c4:	fe 9b ff e9 	brhi	80005596 <_vfprintf_r+0x15ae>
800055c8:	1b f8       	ld.ub	r8,sp[0x7]
800055ca:	2d 08       	sub	r8,-48
800055cc:	c2 08       	rjmp	8000560c <_vfprintf_r+0x1624>
800055ce:	04 96       	mov	r6,r2
800055d0:	fa e8 00 00 	ld.d	r8,sp[0]
800055d4:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
800055d8:	40 de       	lddsp	lr,sp[0x34]
800055da:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
800055de:	0c fa       	st.b	--r6,r10
800055e0:	f2 0b 16 04 	lsr	r11,r9,0x4
800055e4:	f0 0a 16 04 	lsr	r10,r8,0x4
800055e8:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800055ec:	16 99       	mov	r9,r11
800055ee:	14 98       	mov	r8,r10
800055f0:	58 08       	cp.w	r8,0
800055f2:	5c 29       	cpc	r9
800055f4:	cf 01       	brne	800055d4 <_vfprintf_r+0x15ec>
800055f6:	fa e9 00 00 	st.d	sp[0],r8
800055fa:	c0 c8       	rjmp	80005612 <_vfprintf_r+0x162a>
800055fc:	58 08       	cp.w	r8,0
800055fe:	c0 91       	brne	80005610 <_vfprintf_r+0x1628>
80005600:	ed b5 00 00 	bld	r5,0x0
80005604:	c0 61       	brne	80005610 <_vfprintf_r+0x1628>
80005606:	fa c6 f9 79 	sub	r6,sp,-1671
8000560a:	33 08       	mov	r8,48
8000560c:	ac 88       	st.b	r6[0x0],r8
8000560e:	c0 28       	rjmp	80005612 <_vfprintf_r+0x162a>
80005610:	04 96       	mov	r6,r2
80005612:	0c 12       	sub	r2,r6
80005614:	c1 c8       	rjmp	8000564c <_vfprintf_r+0x1664>
80005616:	50 a7       	stdsp	sp[0x28],r7
80005618:	50 80       	stdsp	sp[0x20],r0
8000561a:	40 93       	lddsp	r3,sp[0x24]
8000561c:	0c 97       	mov	r7,r6
8000561e:	10 90       	mov	r0,r8
80005620:	04 94       	mov	r4,r2
80005622:	40 41       	lddsp	r1,sp[0x10]
80005624:	58 08       	cp.w	r8,0
80005626:	e0 80 04 4f 	breq	80005ec4 <_vfprintf_r+0x1edc>
8000562a:	fb 68 06 60 	st.b	sp[1632],r8
8000562e:	30 0c       	mov	r12,0
80005630:	30 08       	mov	r8,0
80005632:	30 12       	mov	r2,1
80005634:	fb 68 06 bb 	st.b	sp[1723],r8
80005638:	50 2c       	stdsp	sp[0x8],r12
8000563a:	fa c6 f9 a0 	sub	r6,sp,-1632
8000563e:	c0 78       	rjmp	8000564c <_vfprintf_r+0x1664>
80005640:	30 0b       	mov	r11,0
80005642:	50 2b       	stdsp	sp[0x8],r11
80005644:	c0 48       	rjmp	8000564c <_vfprintf_r+0x1664>
80005646:	40 22       	lddsp	r2,sp[0x8]
80005648:	30 0a       	mov	r10,0
8000564a:	50 2a       	stdsp	sp[0x8],r10
8000564c:	40 29       	lddsp	r9,sp[0x8]
8000564e:	e4 09 0c 49 	max	r9,r2,r9
80005652:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005656:	50 39       	stdsp	sp[0xc],r9
80005658:	0a 9e       	mov	lr,r5
8000565a:	30 09       	mov	r9,0
8000565c:	e2 1e 00 02 	andl	lr,0x2,COH
80005660:	f2 08 18 00 	cp.b	r8,r9
80005664:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005668:	f7 b8 01 ff 	subne	r8,-1
8000566c:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005670:	0a 9b       	mov	r11,r5
80005672:	58 0e       	cp.w	lr,0
80005674:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005678:	f7 bc 01 fe 	subne	r12,-2
8000567c:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005680:	e2 1b 00 84 	andl	r11,0x84,COH
80005684:	50 fe       	stdsp	sp[0x3c],lr
80005686:	50 9b       	stdsp	sp[0x24],r11
80005688:	c4 71       	brne	80005716 <_vfprintf_r+0x172e>
8000568a:	40 8a       	lddsp	r10,sp[0x20]
8000568c:	40 39       	lddsp	r9,sp[0xc]
8000568e:	12 1a       	sub	r10,r9
80005690:	50 4a       	stdsp	sp[0x10],r10
80005692:	58 0a       	cp.w	r10,0
80005694:	e0 89 00 20 	brgt	800056d4 <_vfprintf_r+0x16ec>
80005698:	c3 f8       	rjmp	80005716 <_vfprintf_r+0x172e>
8000569a:	2f 09       	sub	r9,-16
8000569c:	2f f8       	sub	r8,-1
8000569e:	fe ce c0 26 	sub	lr,pc,-16346
800056a2:	31 0c       	mov	r12,16
800056a4:	fb 49 06 90 	st.w	sp[1680],r9
800056a8:	87 0e       	st.w	r3[0x0],lr
800056aa:	87 1c       	st.w	r3[0x4],r12
800056ac:	fb 48 06 8c 	st.w	sp[1676],r8
800056b0:	58 78       	cp.w	r8,7
800056b2:	e0 89 00 04 	brgt	800056ba <_vfprintf_r+0x16d2>
800056b6:	2f 83       	sub	r3,-8
800056b8:	c0 b8       	rjmp	800056ce <_vfprintf_r+0x16e6>
800056ba:	fa ca f9 78 	sub	r10,sp,-1672
800056be:	02 9b       	mov	r11,r1
800056c0:	08 9c       	mov	r12,r4
800056c2:	fe b0 f4 85 	rcall	80003fcc <__sprint_r>
800056c6:	e0 81 04 10 	brne	80005ee6 <_vfprintf_r+0x1efe>
800056ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800056ce:	40 4b       	lddsp	r11,sp[0x10]
800056d0:	21 0b       	sub	r11,16
800056d2:	50 4b       	stdsp	sp[0x10],r11
800056d4:	fa f9 06 90 	ld.w	r9,sp[1680]
800056d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800056dc:	fe ca c0 64 	sub	r10,pc,-16284
800056e0:	40 4e       	lddsp	lr,sp[0x10]
800056e2:	59 0e       	cp.w	lr,16
800056e4:	fe 99 ff db 	brgt	8000569a <_vfprintf_r+0x16b2>
800056e8:	1c 09       	add	r9,lr
800056ea:	2f f8       	sub	r8,-1
800056ec:	87 0a       	st.w	r3[0x0],r10
800056ee:	fb 49 06 90 	st.w	sp[1680],r9
800056f2:	87 1e       	st.w	r3[0x4],lr
800056f4:	fb 48 06 8c 	st.w	sp[1676],r8
800056f8:	58 78       	cp.w	r8,7
800056fa:	e0 89 00 04 	brgt	80005702 <_vfprintf_r+0x171a>
800056fe:	2f 83       	sub	r3,-8
80005700:	c0 b8       	rjmp	80005716 <_vfprintf_r+0x172e>
80005702:	fa ca f9 78 	sub	r10,sp,-1672
80005706:	02 9b       	mov	r11,r1
80005708:	08 9c       	mov	r12,r4
8000570a:	fe b0 f4 61 	rcall	80003fcc <__sprint_r>
8000570e:	e0 81 03 ec 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005712:	fa c3 f9 e0 	sub	r3,sp,-1568
80005716:	30 09       	mov	r9,0
80005718:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000571c:	f2 08 18 00 	cp.b	r8,r9
80005720:	c1 f0       	breq	8000575e <_vfprintf_r+0x1776>
80005722:	fa f8 06 90 	ld.w	r8,sp[1680]
80005726:	fa c9 f9 45 	sub	r9,sp,-1723
8000572a:	2f f8       	sub	r8,-1
8000572c:	87 09       	st.w	r3[0x0],r9
8000572e:	fb 48 06 90 	st.w	sp[1680],r8
80005732:	30 19       	mov	r9,1
80005734:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005738:	87 19       	st.w	r3[0x4],r9
8000573a:	2f f8       	sub	r8,-1
8000573c:	fb 48 06 8c 	st.w	sp[1676],r8
80005740:	58 78       	cp.w	r8,7
80005742:	e0 89 00 04 	brgt	8000574a <_vfprintf_r+0x1762>
80005746:	2f 83       	sub	r3,-8
80005748:	c0 b8       	rjmp	8000575e <_vfprintf_r+0x1776>
8000574a:	fa ca f9 78 	sub	r10,sp,-1672
8000574e:	02 9b       	mov	r11,r1
80005750:	08 9c       	mov	r12,r4
80005752:	fe b0 f4 3d 	rcall	80003fcc <__sprint_r>
80005756:	e0 81 03 c8 	brne	80005ee6 <_vfprintf_r+0x1efe>
8000575a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000575e:	40 fc       	lddsp	r12,sp[0x3c]
80005760:	58 0c       	cp.w	r12,0
80005762:	c1 f0       	breq	800057a0 <_vfprintf_r+0x17b8>
80005764:	fa f8 06 90 	ld.w	r8,sp[1680]
80005768:	fa c9 f9 48 	sub	r9,sp,-1720
8000576c:	2f e8       	sub	r8,-2
8000576e:	87 09       	st.w	r3[0x0],r9
80005770:	fb 48 06 90 	st.w	sp[1680],r8
80005774:	30 29       	mov	r9,2
80005776:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000577a:	87 19       	st.w	r3[0x4],r9
8000577c:	2f f8       	sub	r8,-1
8000577e:	fb 48 06 8c 	st.w	sp[1676],r8
80005782:	58 78       	cp.w	r8,7
80005784:	e0 89 00 04 	brgt	8000578c <_vfprintf_r+0x17a4>
80005788:	2f 83       	sub	r3,-8
8000578a:	c0 b8       	rjmp	800057a0 <_vfprintf_r+0x17b8>
8000578c:	fa ca f9 78 	sub	r10,sp,-1672
80005790:	02 9b       	mov	r11,r1
80005792:	08 9c       	mov	r12,r4
80005794:	fe b0 f4 1c 	rcall	80003fcc <__sprint_r>
80005798:	e0 81 03 a7 	brne	80005ee6 <_vfprintf_r+0x1efe>
8000579c:	fa c3 f9 e0 	sub	r3,sp,-1568
800057a0:	40 9b       	lddsp	r11,sp[0x24]
800057a2:	e0 4b 00 80 	cp.w	r11,128
800057a6:	c4 71       	brne	80005834 <_vfprintf_r+0x184c>
800057a8:	40 8a       	lddsp	r10,sp[0x20]
800057aa:	40 39       	lddsp	r9,sp[0xc]
800057ac:	12 1a       	sub	r10,r9
800057ae:	50 4a       	stdsp	sp[0x10],r10
800057b0:	58 0a       	cp.w	r10,0
800057b2:	e0 89 00 20 	brgt	800057f2 <_vfprintf_r+0x180a>
800057b6:	c3 f8       	rjmp	80005834 <_vfprintf_r+0x184c>
800057b8:	2f 09       	sub	r9,-16
800057ba:	2f f8       	sub	r8,-1
800057bc:	fe ce c1 34 	sub	lr,pc,-16076
800057c0:	31 0c       	mov	r12,16
800057c2:	fb 49 06 90 	st.w	sp[1680],r9
800057c6:	87 0e       	st.w	r3[0x0],lr
800057c8:	87 1c       	st.w	r3[0x4],r12
800057ca:	fb 48 06 8c 	st.w	sp[1676],r8
800057ce:	58 78       	cp.w	r8,7
800057d0:	e0 89 00 04 	brgt	800057d8 <_vfprintf_r+0x17f0>
800057d4:	2f 83       	sub	r3,-8
800057d6:	c0 b8       	rjmp	800057ec <_vfprintf_r+0x1804>
800057d8:	fa ca f9 78 	sub	r10,sp,-1672
800057dc:	02 9b       	mov	r11,r1
800057de:	08 9c       	mov	r12,r4
800057e0:	fe b0 f3 f6 	rcall	80003fcc <__sprint_r>
800057e4:	e0 81 03 81 	brne	80005ee6 <_vfprintf_r+0x1efe>
800057e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800057ec:	40 4b       	lddsp	r11,sp[0x10]
800057ee:	21 0b       	sub	r11,16
800057f0:	50 4b       	stdsp	sp[0x10],r11
800057f2:	fa f9 06 90 	ld.w	r9,sp[1680]
800057f6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800057fa:	fe ca c1 72 	sub	r10,pc,-16014
800057fe:	40 4e       	lddsp	lr,sp[0x10]
80005800:	59 0e       	cp.w	lr,16
80005802:	fe 99 ff db 	brgt	800057b8 <_vfprintf_r+0x17d0>
80005806:	1c 09       	add	r9,lr
80005808:	2f f8       	sub	r8,-1
8000580a:	87 0a       	st.w	r3[0x0],r10
8000580c:	fb 49 06 90 	st.w	sp[1680],r9
80005810:	87 1e       	st.w	r3[0x4],lr
80005812:	fb 48 06 8c 	st.w	sp[1676],r8
80005816:	58 78       	cp.w	r8,7
80005818:	e0 89 00 04 	brgt	80005820 <_vfprintf_r+0x1838>
8000581c:	2f 83       	sub	r3,-8
8000581e:	c0 b8       	rjmp	80005834 <_vfprintf_r+0x184c>
80005820:	fa ca f9 78 	sub	r10,sp,-1672
80005824:	02 9b       	mov	r11,r1
80005826:	08 9c       	mov	r12,r4
80005828:	fe b0 f3 d2 	rcall	80003fcc <__sprint_r>
8000582c:	e0 81 03 5d 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005830:	fa c3 f9 e0 	sub	r3,sp,-1568
80005834:	40 2c       	lddsp	r12,sp[0x8]
80005836:	04 1c       	sub	r12,r2
80005838:	50 2c       	stdsp	sp[0x8],r12
8000583a:	58 0c       	cp.w	r12,0
8000583c:	e0 89 00 20 	brgt	8000587c <_vfprintf_r+0x1894>
80005840:	c3 f8       	rjmp	800058be <_vfprintf_r+0x18d6>
80005842:	2f 09       	sub	r9,-16
80005844:	2f f8       	sub	r8,-1
80005846:	fe cb c1 be 	sub	r11,pc,-15938
8000584a:	31 0a       	mov	r10,16
8000584c:	fb 49 06 90 	st.w	sp[1680],r9
80005850:	87 0b       	st.w	r3[0x0],r11
80005852:	87 1a       	st.w	r3[0x4],r10
80005854:	fb 48 06 8c 	st.w	sp[1676],r8
80005858:	58 78       	cp.w	r8,7
8000585a:	e0 89 00 04 	brgt	80005862 <_vfprintf_r+0x187a>
8000585e:	2f 83       	sub	r3,-8
80005860:	c0 b8       	rjmp	80005876 <_vfprintf_r+0x188e>
80005862:	fa ca f9 78 	sub	r10,sp,-1672
80005866:	02 9b       	mov	r11,r1
80005868:	08 9c       	mov	r12,r4
8000586a:	fe b0 f3 b1 	rcall	80003fcc <__sprint_r>
8000586e:	e0 81 03 3c 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005872:	fa c3 f9 e0 	sub	r3,sp,-1568
80005876:	40 29       	lddsp	r9,sp[0x8]
80005878:	21 09       	sub	r9,16
8000587a:	50 29       	stdsp	sp[0x8],r9
8000587c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005880:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005884:	fe ca c1 fc 	sub	r10,pc,-15876
80005888:	40 2e       	lddsp	lr,sp[0x8]
8000588a:	59 0e       	cp.w	lr,16
8000588c:	fe 99 ff db 	brgt	80005842 <_vfprintf_r+0x185a>
80005890:	1c 09       	add	r9,lr
80005892:	2f f8       	sub	r8,-1
80005894:	87 0a       	st.w	r3[0x0],r10
80005896:	fb 49 06 90 	st.w	sp[1680],r9
8000589a:	87 1e       	st.w	r3[0x4],lr
8000589c:	fb 48 06 8c 	st.w	sp[1676],r8
800058a0:	58 78       	cp.w	r8,7
800058a2:	e0 89 00 04 	brgt	800058aa <_vfprintf_r+0x18c2>
800058a6:	2f 83       	sub	r3,-8
800058a8:	c0 b8       	rjmp	800058be <_vfprintf_r+0x18d6>
800058aa:	fa ca f9 78 	sub	r10,sp,-1672
800058ae:	02 9b       	mov	r11,r1
800058b0:	08 9c       	mov	r12,r4
800058b2:	fe b0 f3 8d 	rcall	80003fcc <__sprint_r>
800058b6:	e0 81 03 18 	brne	80005ee6 <_vfprintf_r+0x1efe>
800058ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800058be:	ed b5 00 08 	bld	r5,0x8
800058c2:	c0 b0       	breq	800058d8 <_vfprintf_r+0x18f0>
800058c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800058c8:	87 12       	st.w	r3[0x4],r2
800058ca:	87 06       	st.w	r3[0x0],r6
800058cc:	f0 02 00 02 	add	r2,r8,r2
800058d0:	fb 42 06 90 	st.w	sp[1680],r2
800058d4:	e0 8f 01 d4 	bral	80005c7c <_vfprintf_r+0x1c94>
800058d8:	e0 40 00 65 	cp.w	r0,101
800058dc:	e0 8a 01 d6 	brle	80005c88 <_vfprintf_r+0x1ca0>
800058e0:	30 08       	mov	r8,0
800058e2:	30 09       	mov	r9,0
800058e4:	40 5b       	lddsp	r11,sp[0x14]
800058e6:	40 7a       	lddsp	r10,sp[0x1c]
800058e8:	e0 a0 18 69 	rcall	800089ba <__avr32_f64_cmp_eq>
800058ec:	c7 90       	breq	800059de <_vfprintf_r+0x19f6>
800058ee:	fa f8 06 90 	ld.w	r8,sp[1680]
800058f2:	fe c9 c2 7e 	sub	r9,pc,-15746
800058f6:	2f f8       	sub	r8,-1
800058f8:	87 09       	st.w	r3[0x0],r9
800058fa:	fb 48 06 90 	st.w	sp[1680],r8
800058fe:	30 19       	mov	r9,1
80005900:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005904:	87 19       	st.w	r3[0x4],r9
80005906:	2f f8       	sub	r8,-1
80005908:	fb 48 06 8c 	st.w	sp[1676],r8
8000590c:	58 78       	cp.w	r8,7
8000590e:	e0 89 00 05 	brgt	80005918 <_vfprintf_r+0x1930>
80005912:	2f 83       	sub	r3,-8
80005914:	c0 c8       	rjmp	8000592c <_vfprintf_r+0x1944>
80005916:	d7 03       	nop
80005918:	fa ca f9 78 	sub	r10,sp,-1672
8000591c:	02 9b       	mov	r11,r1
8000591e:	08 9c       	mov	r12,r4
80005920:	fe b0 f3 56 	rcall	80003fcc <__sprint_r>
80005924:	e0 81 02 e1 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005928:	fa c3 f9 e0 	sub	r3,sp,-1568
8000592c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005930:	40 6c       	lddsp	r12,sp[0x18]
80005932:	18 38       	cp.w	r8,r12
80005934:	c0 55       	brlt	8000593e <_vfprintf_r+0x1956>
80005936:	ed b5 00 00 	bld	r5,0x0
8000593a:	e0 81 02 6b 	brne	80005e10 <_vfprintf_r+0x1e28>
8000593e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005942:	2f f8       	sub	r8,-1
80005944:	40 cb       	lddsp	r11,sp[0x30]
80005946:	fb 48 06 90 	st.w	sp[1680],r8
8000594a:	30 19       	mov	r9,1
8000594c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005950:	87 0b       	st.w	r3[0x0],r11
80005952:	2f f8       	sub	r8,-1
80005954:	87 19       	st.w	r3[0x4],r9
80005956:	fb 48 06 8c 	st.w	sp[1676],r8
8000595a:	58 78       	cp.w	r8,7
8000595c:	e0 89 00 04 	brgt	80005964 <_vfprintf_r+0x197c>
80005960:	2f 83       	sub	r3,-8
80005962:	c0 b8       	rjmp	80005978 <_vfprintf_r+0x1990>
80005964:	fa ca f9 78 	sub	r10,sp,-1672
80005968:	02 9b       	mov	r11,r1
8000596a:	08 9c       	mov	r12,r4
8000596c:	fe b0 f3 30 	rcall	80003fcc <__sprint_r>
80005970:	e0 81 02 bb 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005974:	fa c3 f9 e0 	sub	r3,sp,-1568
80005978:	40 66       	lddsp	r6,sp[0x18]
8000597a:	20 16       	sub	r6,1
8000597c:	58 06       	cp.w	r6,0
8000597e:	e0 89 00 1d 	brgt	800059b8 <_vfprintf_r+0x19d0>
80005982:	e0 8f 02 47 	bral	80005e10 <_vfprintf_r+0x1e28>
80005986:	2f 09       	sub	r9,-16
80005988:	2f f8       	sub	r8,-1
8000598a:	fb 49 06 90 	st.w	sp[1680],r9
8000598e:	87 02       	st.w	r3[0x0],r2
80005990:	87 10       	st.w	r3[0x4],r0
80005992:	fb 48 06 8c 	st.w	sp[1676],r8
80005996:	58 78       	cp.w	r8,7
80005998:	e0 89 00 04 	brgt	800059a0 <_vfprintf_r+0x19b8>
8000599c:	2f 83       	sub	r3,-8
8000599e:	c0 b8       	rjmp	800059b4 <_vfprintf_r+0x19cc>
800059a0:	fa ca f9 78 	sub	r10,sp,-1672
800059a4:	02 9b       	mov	r11,r1
800059a6:	08 9c       	mov	r12,r4
800059a8:	fe b0 f3 12 	rcall	80003fcc <__sprint_r>
800059ac:	e0 81 02 9d 	brne	80005ee6 <_vfprintf_r+0x1efe>
800059b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800059b4:	21 06       	sub	r6,16
800059b6:	c0 48       	rjmp	800059be <_vfprintf_r+0x19d6>
800059b8:	fe c2 c3 30 	sub	r2,pc,-15568
800059bc:	31 00       	mov	r0,16
800059be:	fa f9 06 90 	ld.w	r9,sp[1680]
800059c2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059c6:	fe ca c3 3e 	sub	r10,pc,-15554
800059ca:	59 06       	cp.w	r6,16
800059cc:	fe 99 ff dd 	brgt	80005986 <_vfprintf_r+0x199e>
800059d0:	0c 09       	add	r9,r6
800059d2:	87 0a       	st.w	r3[0x0],r10
800059d4:	fb 49 06 90 	st.w	sp[1680],r9
800059d8:	2f f8       	sub	r8,-1
800059da:	87 16       	st.w	r3[0x4],r6
800059dc:	c5 39       	rjmp	80005c82 <_vfprintf_r+0x1c9a>
800059de:	fa fa 06 ac 	ld.w	r10,sp[1708]
800059e2:	58 0a       	cp.w	r10,0
800059e4:	e0 89 00 92 	brgt	80005b08 <_vfprintf_r+0x1b20>
800059e8:	fa f8 06 90 	ld.w	r8,sp[1680]
800059ec:	fe c9 c3 78 	sub	r9,pc,-15496
800059f0:	2f f8       	sub	r8,-1
800059f2:	87 09       	st.w	r3[0x0],r9
800059f4:	fb 48 06 90 	st.w	sp[1680],r8
800059f8:	30 19       	mov	r9,1
800059fa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800059fe:	87 19       	st.w	r3[0x4],r9
80005a00:	2f f8       	sub	r8,-1
80005a02:	fb 48 06 8c 	st.w	sp[1676],r8
80005a06:	58 78       	cp.w	r8,7
80005a08:	e0 89 00 04 	brgt	80005a10 <_vfprintf_r+0x1a28>
80005a0c:	2f 83       	sub	r3,-8
80005a0e:	c0 b8       	rjmp	80005a24 <_vfprintf_r+0x1a3c>
80005a10:	fa ca f9 78 	sub	r10,sp,-1672
80005a14:	02 9b       	mov	r11,r1
80005a16:	08 9c       	mov	r12,r4
80005a18:	fe b0 f2 da 	rcall	80003fcc <__sprint_r>
80005a1c:	e0 81 02 65 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005a20:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a24:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005a28:	58 08       	cp.w	r8,0
80005a2a:	c0 81       	brne	80005a3a <_vfprintf_r+0x1a52>
80005a2c:	40 6a       	lddsp	r10,sp[0x18]
80005a2e:	58 0a       	cp.w	r10,0
80005a30:	c0 51       	brne	80005a3a <_vfprintf_r+0x1a52>
80005a32:	ed b5 00 00 	bld	r5,0x0
80005a36:	e0 81 01 ed 	brne	80005e10 <_vfprintf_r+0x1e28>
80005a3a:	40 c9       	lddsp	r9,sp[0x30]
80005a3c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005a40:	2f f8       	sub	r8,-1
80005a42:	87 09       	st.w	r3[0x0],r9
80005a44:	fb 48 06 90 	st.w	sp[1680],r8
80005a48:	30 19       	mov	r9,1
80005a4a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005a4e:	87 19       	st.w	r3[0x4],r9
80005a50:	2f f8       	sub	r8,-1
80005a52:	fb 48 06 8c 	st.w	sp[1676],r8
80005a56:	58 78       	cp.w	r8,7
80005a58:	e0 89 00 04 	brgt	80005a60 <_vfprintf_r+0x1a78>
80005a5c:	2f 83       	sub	r3,-8
80005a5e:	c0 b8       	rjmp	80005a74 <_vfprintf_r+0x1a8c>
80005a60:	fa ca f9 78 	sub	r10,sp,-1672
80005a64:	02 9b       	mov	r11,r1
80005a66:	08 9c       	mov	r12,r4
80005a68:	fe b0 f2 b2 	rcall	80003fcc <__sprint_r>
80005a6c:	e0 81 02 3d 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005a70:	fa c3 f9 e0 	sub	r3,sp,-1568
80005a74:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005a78:	5c 32       	neg	r2
80005a7a:	58 02       	cp.w	r2,0
80005a7c:	e0 89 00 1d 	brgt	80005ab6 <_vfprintf_r+0x1ace>
80005a80:	c3 d8       	rjmp	80005afa <_vfprintf_r+0x1b12>
80005a82:	2f 09       	sub	r9,-16
80005a84:	2f f8       	sub	r8,-1
80005a86:	31 0e       	mov	lr,16
80005a88:	fb 49 06 90 	st.w	sp[1680],r9
80005a8c:	87 00       	st.w	r3[0x0],r0
80005a8e:	87 1e       	st.w	r3[0x4],lr
80005a90:	fb 48 06 8c 	st.w	sp[1676],r8
80005a94:	58 78       	cp.w	r8,7
80005a96:	e0 89 00 04 	brgt	80005a9e <_vfprintf_r+0x1ab6>
80005a9a:	2f 83       	sub	r3,-8
80005a9c:	c0 b8       	rjmp	80005ab2 <_vfprintf_r+0x1aca>
80005a9e:	fa ca f9 78 	sub	r10,sp,-1672
80005aa2:	02 9b       	mov	r11,r1
80005aa4:	08 9c       	mov	r12,r4
80005aa6:	fe b0 f2 93 	rcall	80003fcc <__sprint_r>
80005aaa:	e0 81 02 1e 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005aae:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ab2:	21 02       	sub	r2,16
80005ab4:	c0 38       	rjmp	80005aba <_vfprintf_r+0x1ad2>
80005ab6:	fe c0 c4 2e 	sub	r0,pc,-15314
80005aba:	fa f9 06 90 	ld.w	r9,sp[1680]
80005abe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ac2:	fe ca c4 3a 	sub	r10,pc,-15302
80005ac6:	59 02       	cp.w	r2,16
80005ac8:	fe 99 ff dd 	brgt	80005a82 <_vfprintf_r+0x1a9a>
80005acc:	04 09       	add	r9,r2
80005ace:	2f f8       	sub	r8,-1
80005ad0:	87 0a       	st.w	r3[0x0],r10
80005ad2:	fb 49 06 90 	st.w	sp[1680],r9
80005ad6:	87 12       	st.w	r3[0x4],r2
80005ad8:	fb 48 06 8c 	st.w	sp[1676],r8
80005adc:	58 78       	cp.w	r8,7
80005ade:	e0 89 00 04 	brgt	80005ae6 <_vfprintf_r+0x1afe>
80005ae2:	2f 83       	sub	r3,-8
80005ae4:	c0 b8       	rjmp	80005afa <_vfprintf_r+0x1b12>
80005ae6:	fa ca f9 78 	sub	r10,sp,-1672
80005aea:	02 9b       	mov	r11,r1
80005aec:	08 9c       	mov	r12,r4
80005aee:	fe b0 f2 6f 	rcall	80003fcc <__sprint_r>
80005af2:	e0 81 01 fa 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005af6:	fa c3 f9 e0 	sub	r3,sp,-1568
80005afa:	40 6c       	lddsp	r12,sp[0x18]
80005afc:	fa f8 06 90 	ld.w	r8,sp[1680]
80005b00:	87 06       	st.w	r3[0x0],r6
80005b02:	87 1c       	st.w	r3[0x4],r12
80005b04:	18 08       	add	r8,r12
80005b06:	cb 98       	rjmp	80005c78 <_vfprintf_r+0x1c90>
80005b08:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b0c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b10:	40 6b       	lddsp	r11,sp[0x18]
80005b12:	16 3a       	cp.w	r10,r11
80005b14:	c6 f5       	brlt	80005bf2 <_vfprintf_r+0x1c0a>
80005b16:	16 09       	add	r9,r11
80005b18:	2f f8       	sub	r8,-1
80005b1a:	87 06       	st.w	r3[0x0],r6
80005b1c:	fb 49 06 90 	st.w	sp[1680],r9
80005b20:	87 1b       	st.w	r3[0x4],r11
80005b22:	fb 48 06 8c 	st.w	sp[1676],r8
80005b26:	58 78       	cp.w	r8,7
80005b28:	e0 89 00 04 	brgt	80005b30 <_vfprintf_r+0x1b48>
80005b2c:	2f 83       	sub	r3,-8
80005b2e:	c0 b8       	rjmp	80005b44 <_vfprintf_r+0x1b5c>
80005b30:	fa ca f9 78 	sub	r10,sp,-1672
80005b34:	02 9b       	mov	r11,r1
80005b36:	08 9c       	mov	r12,r4
80005b38:	fe b0 f2 4a 	rcall	80003fcc <__sprint_r>
80005b3c:	e0 81 01 d5 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005b40:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b44:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005b48:	40 6a       	lddsp	r10,sp[0x18]
80005b4a:	14 16       	sub	r6,r10
80005b4c:	58 06       	cp.w	r6,0
80005b4e:	e0 89 00 1c 	brgt	80005b86 <_vfprintf_r+0x1b9e>
80005b52:	c3 d8       	rjmp	80005bcc <_vfprintf_r+0x1be4>
80005b54:	2f 09       	sub	r9,-16
80005b56:	2f f8       	sub	r8,-1
80005b58:	fb 49 06 90 	st.w	sp[1680],r9
80005b5c:	87 02       	st.w	r3[0x0],r2
80005b5e:	87 10       	st.w	r3[0x4],r0
80005b60:	fb 48 06 8c 	st.w	sp[1676],r8
80005b64:	58 78       	cp.w	r8,7
80005b66:	e0 89 00 04 	brgt	80005b6e <_vfprintf_r+0x1b86>
80005b6a:	2f 83       	sub	r3,-8
80005b6c:	c0 b8       	rjmp	80005b82 <_vfprintf_r+0x1b9a>
80005b6e:	fa ca f9 78 	sub	r10,sp,-1672
80005b72:	02 9b       	mov	r11,r1
80005b74:	08 9c       	mov	r12,r4
80005b76:	fe b0 f2 2b 	rcall	80003fcc <__sprint_r>
80005b7a:	e0 81 01 b6 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005b7e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b82:	21 06       	sub	r6,16
80005b84:	c0 48       	rjmp	80005b8c <_vfprintf_r+0x1ba4>
80005b86:	fe c2 c4 fe 	sub	r2,pc,-15106
80005b8a:	31 00       	mov	r0,16
80005b8c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005b90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005b94:	fe ca c5 0c 	sub	r10,pc,-15092
80005b98:	59 06       	cp.w	r6,16
80005b9a:	fe 99 ff dd 	brgt	80005b54 <_vfprintf_r+0x1b6c>
80005b9e:	0c 09       	add	r9,r6
80005ba0:	2f f8       	sub	r8,-1
80005ba2:	87 0a       	st.w	r3[0x0],r10
80005ba4:	fb 49 06 90 	st.w	sp[1680],r9
80005ba8:	87 16       	st.w	r3[0x4],r6
80005baa:	fb 48 06 8c 	st.w	sp[1676],r8
80005bae:	58 78       	cp.w	r8,7
80005bb0:	e0 89 00 04 	brgt	80005bb8 <_vfprintf_r+0x1bd0>
80005bb4:	2f 83       	sub	r3,-8
80005bb6:	c0 b8       	rjmp	80005bcc <_vfprintf_r+0x1be4>
80005bb8:	fa ca f9 78 	sub	r10,sp,-1672
80005bbc:	02 9b       	mov	r11,r1
80005bbe:	08 9c       	mov	r12,r4
80005bc0:	fe b0 f2 06 	rcall	80003fcc <__sprint_r>
80005bc4:	e0 81 01 91 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005bc8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005bcc:	ed b5 00 00 	bld	r5,0x0
80005bd0:	e0 81 01 20 	brne	80005e10 <_vfprintf_r+0x1e28>
80005bd4:	40 c9       	lddsp	r9,sp[0x30]
80005bd6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005bda:	2f f8       	sub	r8,-1
80005bdc:	87 09       	st.w	r3[0x0],r9
80005bde:	fb 48 06 90 	st.w	sp[1680],r8
80005be2:	30 19       	mov	r9,1
80005be4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005be8:	87 19       	st.w	r3[0x4],r9
80005bea:	2f f8       	sub	r8,-1
80005bec:	fb 48 06 8c 	st.w	sp[1676],r8
80005bf0:	c0 29       	rjmp	80005df4 <_vfprintf_r+0x1e0c>
80005bf2:	14 09       	add	r9,r10
80005bf4:	2f f8       	sub	r8,-1
80005bf6:	fb 49 06 90 	st.w	sp[1680],r9
80005bfa:	87 06       	st.w	r3[0x0],r6
80005bfc:	87 1a       	st.w	r3[0x4],r10
80005bfe:	fb 48 06 8c 	st.w	sp[1676],r8
80005c02:	58 78       	cp.w	r8,7
80005c04:	e0 89 00 04 	brgt	80005c0c <_vfprintf_r+0x1c24>
80005c08:	2f 83       	sub	r3,-8
80005c0a:	c0 b8       	rjmp	80005c20 <_vfprintf_r+0x1c38>
80005c0c:	fa ca f9 78 	sub	r10,sp,-1672
80005c10:	02 9b       	mov	r11,r1
80005c12:	08 9c       	mov	r12,r4
80005c14:	fe b0 f1 dc 	rcall	80003fcc <__sprint_r>
80005c18:	e0 81 01 67 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005c1c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c20:	40 c8       	lddsp	r8,sp[0x30]
80005c22:	87 08       	st.w	r3[0x0],r8
80005c24:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c28:	2f f8       	sub	r8,-1
80005c2a:	30 19       	mov	r9,1
80005c2c:	fb 48 06 90 	st.w	sp[1680],r8
80005c30:	87 19       	st.w	r3[0x4],r9
80005c32:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c36:	2f f8       	sub	r8,-1
80005c38:	fb 48 06 8c 	st.w	sp[1676],r8
80005c3c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005c40:	58 78       	cp.w	r8,7
80005c42:	e0 89 00 04 	brgt	80005c4a <_vfprintf_r+0x1c62>
80005c46:	2f 83       	sub	r3,-8
80005c48:	c0 b8       	rjmp	80005c5e <_vfprintf_r+0x1c76>
80005c4a:	fa ca f9 78 	sub	r10,sp,-1672
80005c4e:	02 9b       	mov	r11,r1
80005c50:	08 9c       	mov	r12,r4
80005c52:	fe b0 f1 bd 	rcall	80003fcc <__sprint_r>
80005c56:	e0 81 01 48 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005c5a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005c5e:	04 06       	add	r6,r2
80005c60:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005c64:	87 06       	st.w	r3[0x0],r6
80005c66:	fa f9 06 90 	ld.w	r9,sp[1680]
80005c6a:	40 66       	lddsp	r6,sp[0x18]
80005c6c:	40 6e       	lddsp	lr,sp[0x18]
80005c6e:	10 16       	sub	r6,r8
80005c70:	f2 08 01 08 	sub	r8,r9,r8
80005c74:	87 16       	st.w	r3[0x4],r6
80005c76:	1c 08       	add	r8,lr
80005c78:	fb 48 06 90 	st.w	sp[1680],r8
80005c7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005c80:	2f f8       	sub	r8,-1
80005c82:	fb 48 06 8c 	st.w	sp[1676],r8
80005c86:	cb 78       	rjmp	80005df4 <_vfprintf_r+0x1e0c>
80005c88:	40 6c       	lddsp	r12,sp[0x18]
80005c8a:	58 1c       	cp.w	r12,1
80005c8c:	e0 89 00 06 	brgt	80005c98 <_vfprintf_r+0x1cb0>
80005c90:	ed b5 00 00 	bld	r5,0x0
80005c94:	e0 81 00 85 	brne	80005d9e <_vfprintf_r+0x1db6>
80005c98:	fa f8 06 90 	ld.w	r8,sp[1680]
80005c9c:	2f f8       	sub	r8,-1
80005c9e:	30 19       	mov	r9,1
80005ca0:	fb 48 06 90 	st.w	sp[1680],r8
80005ca4:	87 06       	st.w	r3[0x0],r6
80005ca6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005caa:	87 19       	st.w	r3[0x4],r9
80005cac:	2f f8       	sub	r8,-1
80005cae:	fb 48 06 8c 	st.w	sp[1676],r8
80005cb2:	58 78       	cp.w	r8,7
80005cb4:	e0 89 00 04 	brgt	80005cbc <_vfprintf_r+0x1cd4>
80005cb8:	2f 83       	sub	r3,-8
80005cba:	c0 b8       	rjmp	80005cd0 <_vfprintf_r+0x1ce8>
80005cbc:	fa ca f9 78 	sub	r10,sp,-1672
80005cc0:	02 9b       	mov	r11,r1
80005cc2:	08 9c       	mov	r12,r4
80005cc4:	fe b0 f1 84 	rcall	80003fcc <__sprint_r>
80005cc8:	e0 81 01 0f 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005ccc:	fa c3 f9 e0 	sub	r3,sp,-1568
80005cd0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005cd4:	2f f8       	sub	r8,-1
80005cd6:	40 cb       	lddsp	r11,sp[0x30]
80005cd8:	fb 48 06 90 	st.w	sp[1680],r8
80005cdc:	30 19       	mov	r9,1
80005cde:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ce2:	87 0b       	st.w	r3[0x0],r11
80005ce4:	2f f8       	sub	r8,-1
80005ce6:	87 19       	st.w	r3[0x4],r9
80005ce8:	fb 48 06 8c 	st.w	sp[1676],r8
80005cec:	58 78       	cp.w	r8,7
80005cee:	e0 89 00 05 	brgt	80005cf8 <_vfprintf_r+0x1d10>
80005cf2:	2f 83       	sub	r3,-8
80005cf4:	c0 c8       	rjmp	80005d0c <_vfprintf_r+0x1d24>
80005cf6:	d7 03       	nop
80005cf8:	fa ca f9 78 	sub	r10,sp,-1672
80005cfc:	02 9b       	mov	r11,r1
80005cfe:	08 9c       	mov	r12,r4
80005d00:	fe b0 f1 66 	rcall	80003fcc <__sprint_r>
80005d04:	e0 81 00 f1 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005d08:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d0c:	30 08       	mov	r8,0
80005d0e:	30 09       	mov	r9,0
80005d10:	40 5b       	lddsp	r11,sp[0x14]
80005d12:	40 7a       	lddsp	r10,sp[0x1c]
80005d14:	e0 a0 16 53 	rcall	800089ba <__avr32_f64_cmp_eq>
80005d18:	40 68       	lddsp	r8,sp[0x18]
80005d1a:	20 18       	sub	r8,1
80005d1c:	58 0c       	cp.w	r12,0
80005d1e:	c0 d1       	brne	80005d38 <_vfprintf_r+0x1d50>
80005d20:	2f f6       	sub	r6,-1
80005d22:	87 18       	st.w	r3[0x4],r8
80005d24:	87 06       	st.w	r3[0x0],r6
80005d26:	fa f6 06 90 	ld.w	r6,sp[1680]
80005d2a:	10 06       	add	r6,r8
80005d2c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d30:	fb 46 06 90 	st.w	sp[1680],r6
80005d34:	2f f8       	sub	r8,-1
80005d36:	c3 18       	rjmp	80005d98 <_vfprintf_r+0x1db0>
80005d38:	10 96       	mov	r6,r8
80005d3a:	58 08       	cp.w	r8,0
80005d3c:	e0 89 00 1c 	brgt	80005d74 <_vfprintf_r+0x1d8c>
80005d40:	c4 b8       	rjmp	80005dd6 <_vfprintf_r+0x1dee>
80005d42:	2f 09       	sub	r9,-16
80005d44:	2f f8       	sub	r8,-1
80005d46:	fb 49 06 90 	st.w	sp[1680],r9
80005d4a:	87 02       	st.w	r3[0x0],r2
80005d4c:	87 10       	st.w	r3[0x4],r0
80005d4e:	fb 48 06 8c 	st.w	sp[1676],r8
80005d52:	58 78       	cp.w	r8,7
80005d54:	e0 89 00 04 	brgt	80005d5c <_vfprintf_r+0x1d74>
80005d58:	2f 83       	sub	r3,-8
80005d5a:	c0 b8       	rjmp	80005d70 <_vfprintf_r+0x1d88>
80005d5c:	fa ca f9 78 	sub	r10,sp,-1672
80005d60:	02 9b       	mov	r11,r1
80005d62:	08 9c       	mov	r12,r4
80005d64:	fe b0 f1 34 	rcall	80003fcc <__sprint_r>
80005d68:	e0 81 00 bf 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005d6c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005d70:	21 06       	sub	r6,16
80005d72:	c0 48       	rjmp	80005d7a <_vfprintf_r+0x1d92>
80005d74:	fe c2 c6 ec 	sub	r2,pc,-14612
80005d78:	31 00       	mov	r0,16
80005d7a:	fa f9 06 90 	ld.w	r9,sp[1680]
80005d7e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005d82:	fe ca c6 fa 	sub	r10,pc,-14598
80005d86:	59 06       	cp.w	r6,16
80005d88:	fe 99 ff dd 	brgt	80005d42 <_vfprintf_r+0x1d5a>
80005d8c:	0c 09       	add	r9,r6
80005d8e:	87 0a       	st.w	r3[0x0],r10
80005d90:	fb 49 06 90 	st.w	sp[1680],r9
80005d94:	2f f8       	sub	r8,-1
80005d96:	87 16       	st.w	r3[0x4],r6
80005d98:	fb 48 06 8c 	st.w	sp[1676],r8
80005d9c:	c0 e8       	rjmp	80005db8 <_vfprintf_r+0x1dd0>
80005d9e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005da2:	2f f8       	sub	r8,-1
80005da4:	30 19       	mov	r9,1
80005da6:	fb 48 06 90 	st.w	sp[1680],r8
80005daa:	87 06       	st.w	r3[0x0],r6
80005dac:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005db0:	87 19       	st.w	r3[0x4],r9
80005db2:	2f f8       	sub	r8,-1
80005db4:	fb 48 06 8c 	st.w	sp[1676],r8
80005db8:	58 78       	cp.w	r8,7
80005dba:	e0 89 00 04 	brgt	80005dc2 <_vfprintf_r+0x1dda>
80005dbe:	2f 83       	sub	r3,-8
80005dc0:	c0 b8       	rjmp	80005dd6 <_vfprintf_r+0x1dee>
80005dc2:	fa ca f9 78 	sub	r10,sp,-1672
80005dc6:	02 9b       	mov	r11,r1
80005dc8:	08 9c       	mov	r12,r4
80005dca:	fe b0 f1 01 	rcall	80003fcc <__sprint_r>
80005dce:	e0 81 00 8c 	brne	80005ee6 <_vfprintf_r+0x1efe>
80005dd2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005dd6:	40 ea       	lddsp	r10,sp[0x38]
80005dd8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ddc:	14 08       	add	r8,r10
80005dde:	fa c9 f9 64 	sub	r9,sp,-1692
80005de2:	fb 48 06 90 	st.w	sp[1680],r8
80005de6:	87 1a       	st.w	r3[0x4],r10
80005de8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005dec:	87 09       	st.w	r3[0x0],r9
80005dee:	2f f8       	sub	r8,-1
80005df0:	fb 48 06 8c 	st.w	sp[1676],r8
80005df4:	58 78       	cp.w	r8,7
80005df6:	e0 89 00 04 	brgt	80005dfe <_vfprintf_r+0x1e16>
80005dfa:	2f 83       	sub	r3,-8
80005dfc:	c0 a8       	rjmp	80005e10 <_vfprintf_r+0x1e28>
80005dfe:	fa ca f9 78 	sub	r10,sp,-1672
80005e02:	02 9b       	mov	r11,r1
80005e04:	08 9c       	mov	r12,r4
80005e06:	fe b0 f0 e3 	rcall	80003fcc <__sprint_r>
80005e0a:	c6 e1       	brne	80005ee6 <_vfprintf_r+0x1efe>
80005e0c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e10:	e2 15 00 04 	andl	r5,0x4,COH
80005e14:	c3 f0       	breq	80005e92 <_vfprintf_r+0x1eaa>
80005e16:	40 86       	lddsp	r6,sp[0x20]
80005e18:	40 39       	lddsp	r9,sp[0xc]
80005e1a:	12 16       	sub	r6,r9
80005e1c:	58 06       	cp.w	r6,0
80005e1e:	e0 89 00 1a 	brgt	80005e52 <_vfprintf_r+0x1e6a>
80005e22:	c3 88       	rjmp	80005e92 <_vfprintf_r+0x1eaa>
80005e24:	2f 09       	sub	r9,-16
80005e26:	2f f8       	sub	r8,-1
80005e28:	fb 49 06 90 	st.w	sp[1680],r9
80005e2c:	87 05       	st.w	r3[0x0],r5
80005e2e:	87 12       	st.w	r3[0x4],r2
80005e30:	fb 48 06 8c 	st.w	sp[1676],r8
80005e34:	58 78       	cp.w	r8,7
80005e36:	e0 89 00 04 	brgt	80005e3e <_vfprintf_r+0x1e56>
80005e3a:	2f 83       	sub	r3,-8
80005e3c:	c0 98       	rjmp	80005e4e <_vfprintf_r+0x1e66>
80005e3e:	00 9a       	mov	r10,r0
80005e40:	02 9b       	mov	r11,r1
80005e42:	08 9c       	mov	r12,r4
80005e44:	fe b0 f0 c4 	rcall	80003fcc <__sprint_r>
80005e48:	c4 f1       	brne	80005ee6 <_vfprintf_r+0x1efe>
80005e4a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005e4e:	21 06       	sub	r6,16
80005e50:	c0 68       	rjmp	80005e5c <_vfprintf_r+0x1e74>
80005e52:	fe c5 c7 da 	sub	r5,pc,-14374
80005e56:	31 02       	mov	r2,16
80005e58:	fa c0 f9 78 	sub	r0,sp,-1672
80005e5c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005e60:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005e64:	fe ca c7 ec 	sub	r10,pc,-14356
80005e68:	59 06       	cp.w	r6,16
80005e6a:	fe 99 ff dd 	brgt	80005e24 <_vfprintf_r+0x1e3c>
80005e6e:	0c 09       	add	r9,r6
80005e70:	2f f8       	sub	r8,-1
80005e72:	87 0a       	st.w	r3[0x0],r10
80005e74:	87 16       	st.w	r3[0x4],r6
80005e76:	fb 49 06 90 	st.w	sp[1680],r9
80005e7a:	fb 48 06 8c 	st.w	sp[1676],r8
80005e7e:	58 78       	cp.w	r8,7
80005e80:	e0 8a 00 09 	brle	80005e92 <_vfprintf_r+0x1eaa>
80005e84:	fa ca f9 78 	sub	r10,sp,-1672
80005e88:	02 9b       	mov	r11,r1
80005e8a:	08 9c       	mov	r12,r4
80005e8c:	fe b0 f0 a0 	rcall	80003fcc <__sprint_r>
80005e90:	c2 b1       	brne	80005ee6 <_vfprintf_r+0x1efe>
80005e92:	40 bc       	lddsp	r12,sp[0x2c]
80005e94:	40 36       	lddsp	r6,sp[0xc]
80005e96:	40 8e       	lddsp	lr,sp[0x20]
80005e98:	ec 0e 0c 48 	max	r8,r6,lr
80005e9c:	10 0c       	add	r12,r8
80005e9e:	50 bc       	stdsp	sp[0x2c],r12
80005ea0:	fa f8 06 90 	ld.w	r8,sp[1680]
80005ea4:	58 08       	cp.w	r8,0
80005ea6:	c0 80       	breq	80005eb6 <_vfprintf_r+0x1ece>
80005ea8:	fa ca f9 78 	sub	r10,sp,-1672
80005eac:	02 9b       	mov	r11,r1
80005eae:	08 9c       	mov	r12,r4
80005eb0:	fe b0 f0 8e 	rcall	80003fcc <__sprint_r>
80005eb4:	c1 91       	brne	80005ee6 <_vfprintf_r+0x1efe>
80005eb6:	30 0b       	mov	r11,0
80005eb8:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ebc:	fb 4b 06 8c 	st.w	sp[1676],r11
80005ec0:	fe 9f f1 22 	bral	80004104 <_vfprintf_r+0x11c>
80005ec4:	08 95       	mov	r5,r4
80005ec6:	fa f8 06 90 	ld.w	r8,sp[1680]
80005eca:	58 08       	cp.w	r8,0
80005ecc:	c0 80       	breq	80005edc <_vfprintf_r+0x1ef4>
80005ece:	08 9c       	mov	r12,r4
80005ed0:	fa ca f9 78 	sub	r10,sp,-1672
80005ed4:	02 9b       	mov	r11,r1
80005ed6:	fe b0 f0 7b 	rcall	80003fcc <__sprint_r>
80005eda:	c0 61       	brne	80005ee6 <_vfprintf_r+0x1efe>
80005edc:	30 08       	mov	r8,0
80005ede:	fb 48 06 8c 	st.w	sp[1676],r8
80005ee2:	c0 28       	rjmp	80005ee6 <_vfprintf_r+0x1efe>
80005ee4:	40 41       	lddsp	r1,sp[0x10]
80005ee6:	82 68       	ld.sh	r8,r1[0xc]
80005ee8:	ed b8 00 06 	bld	r8,0x6
80005eec:	c0 31       	brne	80005ef2 <_vfprintf_r+0x1f0a>
80005eee:	3f fa       	mov	r10,-1
80005ef0:	50 ba       	stdsp	sp[0x2c],r10
80005ef2:	40 bc       	lddsp	r12,sp[0x2c]
80005ef4:	fe 3d f9 44 	sub	sp,-1724
80005ef8:	d8 32       	popm	r0-r7,pc
80005efa:	d7 03       	nop

80005efc <__swsetup_r>:
80005efc:	d4 21       	pushm	r4-r7,lr
80005efe:	e0 68 01 00 	mov	r8,256
80005f02:	18 96       	mov	r6,r12
80005f04:	16 97       	mov	r7,r11
80005f06:	70 0c       	ld.w	r12,r8[0x0]
80005f08:	58 0c       	cp.w	r12,0
80005f0a:	c0 60       	breq	80005f16 <__swsetup_r+0x1a>
80005f0c:	78 68       	ld.w	r8,r12[0x18]
80005f0e:	58 08       	cp.w	r8,0
80005f10:	c0 31       	brne	80005f16 <__swsetup_r+0x1a>
80005f12:	e0 a0 07 b9 	rcall	80006e84 <__sinit>
80005f16:	fe c8 c7 6e 	sub	r8,pc,-14482
80005f1a:	10 37       	cp.w	r7,r8
80005f1c:	c0 61       	brne	80005f28 <__swsetup_r+0x2c>
80005f1e:	e0 68 01 00 	mov	r8,256
80005f22:	70 08       	ld.w	r8,r8[0x0]
80005f24:	70 07       	ld.w	r7,r8[0x0]
80005f26:	c1 28       	rjmp	80005f4a <__swsetup_r+0x4e>
80005f28:	fe c8 c7 60 	sub	r8,pc,-14496
80005f2c:	10 37       	cp.w	r7,r8
80005f2e:	c0 61       	brne	80005f3a <__swsetup_r+0x3e>
80005f30:	e0 68 01 00 	mov	r8,256
80005f34:	70 08       	ld.w	r8,r8[0x0]
80005f36:	70 17       	ld.w	r7,r8[0x4]
80005f38:	c0 98       	rjmp	80005f4a <__swsetup_r+0x4e>
80005f3a:	fe c8 c7 52 	sub	r8,pc,-14510
80005f3e:	10 37       	cp.w	r7,r8
80005f40:	c0 51       	brne	80005f4a <__swsetup_r+0x4e>
80005f42:	e0 68 01 00 	mov	r8,256
80005f46:	70 08       	ld.w	r8,r8[0x0]
80005f48:	70 27       	ld.w	r7,r8[0x8]
80005f4a:	8e 68       	ld.sh	r8,r7[0xc]
80005f4c:	ed b8 00 03 	bld	r8,0x3
80005f50:	c1 e0       	breq	80005f8c <__swsetup_r+0x90>
80005f52:	ed b8 00 04 	bld	r8,0x4
80005f56:	c3 e1       	brne	80005fd2 <__swsetup_r+0xd6>
80005f58:	ed b8 00 02 	bld	r8,0x2
80005f5c:	c1 51       	brne	80005f86 <__swsetup_r+0x8a>
80005f5e:	6e db       	ld.w	r11,r7[0x34]
80005f60:	58 0b       	cp.w	r11,0
80005f62:	c0 a0       	breq	80005f76 <__swsetup_r+0x7a>
80005f64:	ee c8 ff bc 	sub	r8,r7,-68
80005f68:	10 3b       	cp.w	r11,r8
80005f6a:	c0 40       	breq	80005f72 <__swsetup_r+0x76>
80005f6c:	0c 9c       	mov	r12,r6
80005f6e:	e0 a0 08 25 	rcall	80006fb8 <_free_r>
80005f72:	30 08       	mov	r8,0
80005f74:	8f d8       	st.w	r7[0x34],r8
80005f76:	8e 68       	ld.sh	r8,r7[0xc]
80005f78:	e0 18 ff db 	andl	r8,0xffdb
80005f7c:	ae 68       	st.h	r7[0xc],r8
80005f7e:	30 08       	mov	r8,0
80005f80:	8f 18       	st.w	r7[0x4],r8
80005f82:	6e 48       	ld.w	r8,r7[0x10]
80005f84:	8f 08       	st.w	r7[0x0],r8
80005f86:	8e 68       	ld.sh	r8,r7[0xc]
80005f88:	a3 b8       	sbr	r8,0x3
80005f8a:	ae 68       	st.h	r7[0xc],r8
80005f8c:	6e 48       	ld.w	r8,r7[0x10]
80005f8e:	58 08       	cp.w	r8,0
80005f90:	c0 b1       	brne	80005fa6 <__swsetup_r+0xaa>
80005f92:	8e 68       	ld.sh	r8,r7[0xc]
80005f94:	e2 18 02 80 	andl	r8,0x280,COH
80005f98:	e0 48 02 00 	cp.w	r8,512
80005f9c:	c0 50       	breq	80005fa6 <__swsetup_r+0xaa>
80005f9e:	0c 9c       	mov	r12,r6
80005fa0:	0e 9b       	mov	r11,r7
80005fa2:	e0 a0 0a 4b 	rcall	80007438 <__smakebuf_r>
80005fa6:	8e 69       	ld.sh	r9,r7[0xc]
80005fa8:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005fac:	c0 70       	breq	80005fba <__swsetup_r+0xbe>
80005fae:	30 08       	mov	r8,0
80005fb0:	8f 28       	st.w	r7[0x8],r8
80005fb2:	6e 58       	ld.w	r8,r7[0x14]
80005fb4:	5c 38       	neg	r8
80005fb6:	8f 68       	st.w	r7[0x18],r8
80005fb8:	c0 68       	rjmp	80005fc4 <__swsetup_r+0xc8>
80005fba:	ed b9 00 01 	bld	r9,0x1
80005fbe:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80005fc2:	8f 28       	st.w	r7[0x8],r8
80005fc4:	6e 48       	ld.w	r8,r7[0x10]
80005fc6:	58 08       	cp.w	r8,0
80005fc8:	c0 61       	brne	80005fd4 <__swsetup_r+0xd8>
80005fca:	8e 68       	ld.sh	r8,r7[0xc]
80005fcc:	ed b8 00 07 	bld	r8,0x7
80005fd0:	c0 21       	brne	80005fd4 <__swsetup_r+0xd8>
80005fd2:	dc 2a       	popm	r4-r7,pc,r12=-1
80005fd4:	d8 2a       	popm	r4-r7,pc,r12=0
80005fd6:	d7 03       	nop

80005fd8 <quorem>:
80005fd8:	d4 31       	pushm	r0-r7,lr
80005fda:	20 2d       	sub	sp,8
80005fdc:	18 97       	mov	r7,r12
80005fde:	78 48       	ld.w	r8,r12[0x10]
80005fe0:	76 46       	ld.w	r6,r11[0x10]
80005fe2:	0c 38       	cp.w	r8,r6
80005fe4:	c0 34       	brge	80005fea <quorem+0x12>
80005fe6:	30 0c       	mov	r12,0
80005fe8:	c8 58       	rjmp	800060f2 <quorem+0x11a>
80005fea:	ec c2 ff fc 	sub	r2,r6,-4
80005fee:	f6 c3 ff ec 	sub	r3,r11,-20
80005ff2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80005ff6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80005ffa:	2f f9       	sub	r9,-1
80005ffc:	20 16       	sub	r6,1
80005ffe:	f8 09 0d 08 	divu	r8,r12,r9
80006002:	f6 02 00 22 	add	r2,r11,r2<<0x2
80006006:	ee c4 ff ec 	sub	r4,r7,-20
8000600a:	10 95       	mov	r5,r8
8000600c:	58 08       	cp.w	r8,0
8000600e:	c4 10       	breq	80006090 <quorem+0xb8>
80006010:	30 09       	mov	r9,0
80006012:	06 9a       	mov	r10,r3
80006014:	08 98       	mov	r8,r4
80006016:	12 91       	mov	r1,r9
80006018:	50 0b       	stdsp	sp[0x0],r11
8000601a:	70 0e       	ld.w	lr,r8[0x0]
8000601c:	b1 8e       	lsr	lr,0x10
8000601e:	50 1e       	stdsp	sp[0x4],lr
80006020:	15 0e       	ld.w	lr,r10++
80006022:	fc 00 16 10 	lsr	r0,lr,0x10
80006026:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000602a:	ea 0e 03 41 	mac	r1,r5,lr
8000602e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80006032:	b1 81       	lsr	r1,0x10
80006034:	40 1b       	lddsp	r11,sp[0x4]
80006036:	ea 00 02 40 	mul	r0,r5,r0
8000603a:	e2 00 00 00 	add	r0,r1,r0
8000603e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80006042:	02 1b       	sub	r11,r1
80006044:	50 1b       	stdsp	sp[0x4],r11
80006046:	70 0b       	ld.w	r11,r8[0x0]
80006048:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000604c:	02 09       	add	r9,r1
8000604e:	f2 0e 01 0e 	sub	lr,r9,lr
80006052:	b0 1e       	st.h	r8[0x2],lr
80006054:	fc 09 14 10 	asr	r9,lr,0x10
80006058:	40 1e       	lddsp	lr,sp[0x4]
8000605a:	fc 09 00 09 	add	r9,lr,r9
8000605e:	b0 09       	st.h	r8[0x0],r9
80006060:	e0 01 16 10 	lsr	r1,r0,0x10
80006064:	2f c8       	sub	r8,-4
80006066:	b1 49       	asr	r9,0x10
80006068:	04 3a       	cp.w	r10,r2
8000606a:	fe 98 ff d8 	brls	8000601a <quorem+0x42>
8000606e:	40 0b       	lddsp	r11,sp[0x0]
80006070:	58 0c       	cp.w	r12,0
80006072:	c0 f1       	brne	80006090 <quorem+0xb8>
80006074:	ec c8 ff fb 	sub	r8,r6,-5
80006078:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000607c:	c0 28       	rjmp	80006080 <quorem+0xa8>
8000607e:	20 16       	sub	r6,1
80006080:	20 48       	sub	r8,4
80006082:	08 38       	cp.w	r8,r4
80006084:	e0 88 00 05 	brls	8000608e <quorem+0xb6>
80006088:	70 09       	ld.w	r9,r8[0x0]
8000608a:	58 09       	cp.w	r9,0
8000608c:	cf 90       	breq	8000607e <quorem+0xa6>
8000608e:	8f 46       	st.w	r7[0x10],r6
80006090:	0e 9c       	mov	r12,r7
80006092:	e0 a0 0c fb 	rcall	80007a88 <__mcmp>
80006096:	c2 d5       	brlt	800060f0 <quorem+0x118>
80006098:	2f f5       	sub	r5,-1
8000609a:	08 98       	mov	r8,r4
8000609c:	30 09       	mov	r9,0
8000609e:	07 0b       	ld.w	r11,r3++
800060a0:	f6 0a 16 10 	lsr	r10,r11,0x10
800060a4:	70 0c       	ld.w	r12,r8[0x0]
800060a6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800060aa:	f8 0e 16 10 	lsr	lr,r12,0x10
800060ae:	14 1e       	sub	lr,r10
800060b0:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800060b4:	16 1a       	sub	r10,r11
800060b6:	12 0a       	add	r10,r9
800060b8:	b0 1a       	st.h	r8[0x2],r10
800060ba:	b1 4a       	asr	r10,0x10
800060bc:	fc 0a 00 09 	add	r9,lr,r10
800060c0:	b0 09       	st.h	r8[0x0],r9
800060c2:	2f c8       	sub	r8,-4
800060c4:	b1 49       	asr	r9,0x10
800060c6:	04 33       	cp.w	r3,r2
800060c8:	fe 98 ff eb 	brls	8000609e <quorem+0xc6>
800060cc:	ec c8 ff fb 	sub	r8,r6,-5
800060d0:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800060d4:	58 09       	cp.w	r9,0
800060d6:	c0 d1       	brne	800060f0 <quorem+0x118>
800060d8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800060dc:	c0 28       	rjmp	800060e0 <quorem+0x108>
800060de:	20 16       	sub	r6,1
800060e0:	20 48       	sub	r8,4
800060e2:	08 38       	cp.w	r8,r4
800060e4:	e0 88 00 05 	brls	800060ee <quorem+0x116>
800060e8:	70 09       	ld.w	r9,r8[0x0]
800060ea:	58 09       	cp.w	r9,0
800060ec:	cf 90       	breq	800060de <quorem+0x106>
800060ee:	8f 46       	st.w	r7[0x10],r6
800060f0:	0a 9c       	mov	r12,r5
800060f2:	2f ed       	sub	sp,-8
800060f4:	d8 32       	popm	r0-r7,pc
800060f6:	d7 03       	nop

800060f8 <_dtoa_r>:
800060f8:	d4 31       	pushm	r0-r7,lr
800060fa:	21 ad       	sub	sp,104
800060fc:	fa c4 ff 74 	sub	r4,sp,-140
80006100:	18 97       	mov	r7,r12
80006102:	16 95       	mov	r5,r11
80006104:	68 2c       	ld.w	r12,r4[0x8]
80006106:	50 c9       	stdsp	sp[0x30],r9
80006108:	68 16       	ld.w	r6,r4[0x4]
8000610a:	68 09       	ld.w	r9,r4[0x0]
8000610c:	50 e8       	stdsp	sp[0x38],r8
8000610e:	14 94       	mov	r4,r10
80006110:	51 2c       	stdsp	sp[0x48],r12
80006112:	fa e5 00 08 	st.d	sp[8],r4
80006116:	51 59       	stdsp	sp[0x54],r9
80006118:	6e 95       	ld.w	r5,r7[0x24]
8000611a:	58 05       	cp.w	r5,0
8000611c:	c0 91       	brne	8000612e <_dtoa_r+0x36>
8000611e:	31 0c       	mov	r12,16
80006120:	e0 a0 09 ea 	rcall	800074f4 <malloc>
80006124:	99 35       	st.w	r12[0xc],r5
80006126:	8f 9c       	st.w	r7[0x24],r12
80006128:	99 15       	st.w	r12[0x4],r5
8000612a:	99 25       	st.w	r12[0x8],r5
8000612c:	99 05       	st.w	r12[0x0],r5
8000612e:	6e 99       	ld.w	r9,r7[0x24]
80006130:	72 08       	ld.w	r8,r9[0x0]
80006132:	58 08       	cp.w	r8,0
80006134:	c0 f0       	breq	80006152 <_dtoa_r+0x5a>
80006136:	72 1a       	ld.w	r10,r9[0x4]
80006138:	91 1a       	st.w	r8[0x4],r10
8000613a:	30 1a       	mov	r10,1
8000613c:	72 19       	ld.w	r9,r9[0x4]
8000613e:	f4 09 09 49 	lsl	r9,r10,r9
80006142:	10 9b       	mov	r11,r8
80006144:	91 29       	st.w	r8[0x8],r9
80006146:	0e 9c       	mov	r12,r7
80006148:	e0 a0 0c ba 	rcall	80007abc <_Bfree>
8000614c:	6e 98       	ld.w	r8,r7[0x24]
8000614e:	30 09       	mov	r9,0
80006150:	91 09       	st.w	r8[0x0],r9
80006152:	40 28       	lddsp	r8,sp[0x8]
80006154:	10 94       	mov	r4,r8
80006156:	58 08       	cp.w	r8,0
80006158:	c0 64       	brge	80006164 <_dtoa_r+0x6c>
8000615a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000615e:	50 28       	stdsp	sp[0x8],r8
80006160:	30 18       	mov	r8,1
80006162:	c0 28       	rjmp	80006166 <_dtoa_r+0x6e>
80006164:	30 08       	mov	r8,0
80006166:	8d 08       	st.w	r6[0x0],r8
80006168:	fc 1c 7f f0 	movh	r12,0x7ff0
8000616c:	40 26       	lddsp	r6,sp[0x8]
8000616e:	0c 98       	mov	r8,r6
80006170:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006174:	18 38       	cp.w	r8,r12
80006176:	c2 01       	brne	800061b6 <_dtoa_r+0xbe>
80006178:	e0 68 27 0f 	mov	r8,9999
8000617c:	41 5b       	lddsp	r11,sp[0x54]
8000617e:	97 08       	st.w	r11[0x0],r8
80006180:	40 3a       	lddsp	r10,sp[0xc]
80006182:	58 0a       	cp.w	r10,0
80006184:	c0 71       	brne	80006192 <_dtoa_r+0x9a>
80006186:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000618a:	c0 41       	brne	80006192 <_dtoa_r+0x9a>
8000618c:	fe cc c9 f4 	sub	r12,pc,-13836
80006190:	c0 38       	rjmp	80006196 <_dtoa_r+0x9e>
80006192:	fe cc c9 ee 	sub	r12,pc,-13842
80006196:	41 29       	lddsp	r9,sp[0x48]
80006198:	58 09       	cp.w	r9,0
8000619a:	e0 80 05 9a 	breq	80006cce <_dtoa_r+0xbd6>
8000619e:	f8 c8 ff fd 	sub	r8,r12,-3
800061a2:	f8 c9 ff f8 	sub	r9,r12,-8
800061a6:	11 8b       	ld.ub	r11,r8[0x0]
800061a8:	30 0a       	mov	r10,0
800061aa:	41 25       	lddsp	r5,sp[0x48]
800061ac:	f4 0b 18 00 	cp.b	r11,r10
800061b0:	f2 08 17 10 	movne	r8,r9
800061b4:	c1 68       	rjmp	800061e0 <_dtoa_r+0xe8>
800061b6:	fa ea 00 08 	ld.d	r10,sp[8]
800061ba:	30 08       	mov	r8,0
800061bc:	fa eb 00 3c 	st.d	sp[60],r10
800061c0:	30 09       	mov	r9,0
800061c2:	e0 a0 13 fc 	rcall	800089ba <__avr32_f64_cmp_eq>
800061c6:	c1 00       	breq	800061e6 <_dtoa_r+0xee>
800061c8:	30 18       	mov	r8,1
800061ca:	41 5a       	lddsp	r10,sp[0x54]
800061cc:	95 08       	st.w	r10[0x0],r8
800061ce:	fe cc cb 5a 	sub	r12,pc,-13478
800061d2:	41 29       	lddsp	r9,sp[0x48]
800061d4:	f8 08 00 08 	add	r8,r12,r8
800061d8:	58 09       	cp.w	r9,0
800061da:	e0 80 05 7a 	breq	80006cce <_dtoa_r+0xbd6>
800061de:	12 95       	mov	r5,r9
800061e0:	8b 08       	st.w	r5[0x0],r8
800061e2:	e0 8f 05 76 	bral	80006cce <_dtoa_r+0xbd6>
800061e6:	fa c8 ff 9c 	sub	r8,sp,-100
800061ea:	fa c9 ff a0 	sub	r9,sp,-96
800061ee:	fa ea 00 3c 	ld.d	r10,sp[60]
800061f2:	0e 9c       	mov	r12,r7
800061f4:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800061f8:	e0 a0 0c b4 	rcall	80007b60 <__d2b>
800061fc:	18 93       	mov	r3,r12
800061fe:	58 05       	cp.w	r5,0
80006200:	c0 d0       	breq	8000621a <_dtoa_r+0x122>
80006202:	fa ea 00 3c 	ld.d	r10,sp[60]
80006206:	30 04       	mov	r4,0
80006208:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000620c:	ea c5 03 ff 	sub	r5,r5,1023
80006210:	10 9b       	mov	r11,r8
80006212:	51 74       	stdsp	sp[0x5c],r4
80006214:	ea 1b 3f f0 	orh	r11,0x3ff0
80006218:	c2 58       	rjmp	80006262 <_dtoa_r+0x16a>
8000621a:	41 88       	lddsp	r8,sp[0x60]
8000621c:	41 9c       	lddsp	r12,sp[0x64]
8000621e:	10 0c       	add	r12,r8
80006220:	f8 c5 fb ce 	sub	r5,r12,-1074
80006224:	e0 45 00 20 	cp.w	r5,32
80006228:	e0 8a 00 0e 	brle	80006244 <_dtoa_r+0x14c>
8000622c:	f8 cc fb ee 	sub	r12,r12,-1042
80006230:	40 3b       	lddsp	r11,sp[0xc]
80006232:	ea 08 11 40 	rsub	r8,r5,64
80006236:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000623a:	ec 08 09 46 	lsl	r6,r6,r8
8000623e:	0c 4c       	or	r12,r6
80006240:	c0 78       	rjmp	8000624e <_dtoa_r+0x156>
80006242:	d7 03       	nop
80006244:	ea 0c 11 20 	rsub	r12,r5,32
80006248:	40 3a       	lddsp	r10,sp[0xc]
8000624a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000624e:	e0 a0 13 42 	rcall	800088d2 <__avr32_u32_to_f64>
80006252:	fc 18 fe 10 	movh	r8,0xfe10
80006256:	30 19       	mov	r9,1
80006258:	ea c5 04 33 	sub	r5,r5,1075
8000625c:	f0 0b 00 0b 	add	r11,r8,r11
80006260:	51 79       	stdsp	sp[0x5c],r9
80006262:	30 08       	mov	r8,0
80006264:	fc 19 3f f8 	movh	r9,0x3ff8
80006268:	e0 a0 11 ca 	rcall	800085fc <__avr32_f64_sub>
8000626c:	e0 68 43 61 	mov	r8,17249
80006270:	ea 18 63 6f 	orh	r8,0x636f
80006274:	e0 69 87 a7 	mov	r9,34727
80006278:	ea 19 3f d2 	orh	r9,0x3fd2
8000627c:	fe b0 e9 2a 	rcall	800034d0 <__avr32_f64_mul>
80006280:	e0 68 c8 b3 	mov	r8,51379
80006284:	ea 18 8b 60 	orh	r8,0x8b60
80006288:	e0 69 8a 28 	mov	r9,35368
8000628c:	ea 19 3f c6 	orh	r9,0x3fc6
80006290:	e0 a0 12 84 	rcall	80008798 <__avr32_f64_add>
80006294:	0a 9c       	mov	r12,r5
80006296:	14 90       	mov	r0,r10
80006298:	16 91       	mov	r1,r11
8000629a:	e0 a0 13 20 	rcall	800088da <__avr32_s32_to_f64>
8000629e:	e0 68 79 fb 	mov	r8,31227
800062a2:	ea 18 50 9f 	orh	r8,0x509f
800062a6:	e0 69 44 13 	mov	r9,17427
800062aa:	ea 19 3f d3 	orh	r9,0x3fd3
800062ae:	fe b0 e9 11 	rcall	800034d0 <__avr32_f64_mul>
800062b2:	14 98       	mov	r8,r10
800062b4:	16 99       	mov	r9,r11
800062b6:	00 9a       	mov	r10,r0
800062b8:	02 9b       	mov	r11,r1
800062ba:	e0 a0 12 6f 	rcall	80008798 <__avr32_f64_add>
800062be:	14 90       	mov	r0,r10
800062c0:	16 91       	mov	r1,r11
800062c2:	e0 a0 12 f5 	rcall	800088ac <__avr32_f64_to_s32>
800062c6:	30 08       	mov	r8,0
800062c8:	18 96       	mov	r6,r12
800062ca:	30 09       	mov	r9,0
800062cc:	00 9a       	mov	r10,r0
800062ce:	02 9b       	mov	r11,r1
800062d0:	e0 a0 13 bc 	rcall	80008a48 <__avr32_f64_cmp_lt>
800062d4:	c0 c0       	breq	800062ec <_dtoa_r+0x1f4>
800062d6:	0c 9c       	mov	r12,r6
800062d8:	e0 a0 13 01 	rcall	800088da <__avr32_s32_to_f64>
800062dc:	14 98       	mov	r8,r10
800062de:	16 99       	mov	r9,r11
800062e0:	00 9a       	mov	r10,r0
800062e2:	02 9b       	mov	r11,r1
800062e4:	e0 a0 13 6b 	rcall	800089ba <__avr32_f64_cmp_eq>
800062e8:	f7 b6 00 01 	subeq	r6,1
800062ec:	59 66       	cp.w	r6,22
800062ee:	e0 88 00 05 	brls	800062f8 <_dtoa_r+0x200>
800062f2:	30 18       	mov	r8,1
800062f4:	51 48       	stdsp	sp[0x50],r8
800062f6:	c1 38       	rjmp	8000631c <_dtoa_r+0x224>
800062f8:	fe c8 ca a4 	sub	r8,pc,-13660
800062fc:	fa ea 00 3c 	ld.d	r10,sp[60]
80006300:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006304:	e0 a0 13 a2 	rcall	80008a48 <__avr32_f64_cmp_lt>
80006308:	f9 b4 00 00 	moveq	r4,0
8000630c:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006310:	f7 b6 01 01 	subne	r6,1
80006314:	f9 bc 01 00 	movne	r12,0
80006318:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000631c:	41 90       	lddsp	r0,sp[0x64]
8000631e:	20 10       	sub	r0,1
80006320:	0a 10       	sub	r0,r5
80006322:	c0 46       	brmi	8000632a <_dtoa_r+0x232>
80006324:	50 40       	stdsp	sp[0x10],r0
80006326:	30 00       	mov	r0,0
80006328:	c0 48       	rjmp	80006330 <_dtoa_r+0x238>
8000632a:	30 0b       	mov	r11,0
8000632c:	5c 30       	neg	r0
8000632e:	50 4b       	stdsp	sp[0x10],r11
80006330:	ec 02 11 00 	rsub	r2,r6,0
80006334:	58 06       	cp.w	r6,0
80006336:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000633a:	f5 d6 e4 0a 	addge	r10,r10,r6
8000633e:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006342:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006346:	f9 b2 04 00 	movge	r2,0
8000634a:	e1 d6 e5 10 	sublt	r0,r0,r6
8000634e:	f9 b9 05 00 	movlt	r9,0
80006352:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006356:	40 c8       	lddsp	r8,sp[0x30]
80006358:	58 98       	cp.w	r8,9
8000635a:	e0 8b 00 20 	brhi	8000639a <_dtoa_r+0x2a2>
8000635e:	58 58       	cp.w	r8,5
80006360:	f9 b4 0a 01 	movle	r4,1
80006364:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006368:	f7 b5 09 04 	subgt	r5,4
8000636c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006370:	f9 b4 09 00 	movgt	r4,0
80006374:	40 cc       	lddsp	r12,sp[0x30]
80006376:	58 3c       	cp.w	r12,3
80006378:	c2 d0       	breq	800063d2 <_dtoa_r+0x2da>
8000637a:	e0 89 00 05 	brgt	80006384 <_dtoa_r+0x28c>
8000637e:	58 2c       	cp.w	r12,2
80006380:	c1 01       	brne	800063a0 <_dtoa_r+0x2a8>
80006382:	c1 88       	rjmp	800063b2 <_dtoa_r+0x2ba>
80006384:	40 cb       	lddsp	r11,sp[0x30]
80006386:	58 4b       	cp.w	r11,4
80006388:	c0 60       	breq	80006394 <_dtoa_r+0x29c>
8000638a:	58 5b       	cp.w	r11,5
8000638c:	c0 a1       	brne	800063a0 <_dtoa_r+0x2a8>
8000638e:	30 1a       	mov	r10,1
80006390:	50 da       	stdsp	sp[0x34],r10
80006392:	c2 28       	rjmp	800063d6 <_dtoa_r+0x2de>
80006394:	30 19       	mov	r9,1
80006396:	50 d9       	stdsp	sp[0x34],r9
80006398:	c0 f8       	rjmp	800063b6 <_dtoa_r+0x2be>
8000639a:	30 08       	mov	r8,0
8000639c:	30 14       	mov	r4,1
8000639e:	50 c8       	stdsp	sp[0x30],r8
800063a0:	3f f5       	mov	r5,-1
800063a2:	30 1c       	mov	r12,1
800063a4:	30 0b       	mov	r11,0
800063a6:	50 95       	stdsp	sp[0x24],r5
800063a8:	50 dc       	stdsp	sp[0x34],r12
800063aa:	0a 91       	mov	r1,r5
800063ac:	31 28       	mov	r8,18
800063ae:	50 eb       	stdsp	sp[0x38],r11
800063b0:	c2 08       	rjmp	800063f0 <_dtoa_r+0x2f8>
800063b2:	30 0a       	mov	r10,0
800063b4:	50 da       	stdsp	sp[0x34],r10
800063b6:	40 e9       	lddsp	r9,sp[0x38]
800063b8:	58 09       	cp.w	r9,0
800063ba:	e0 89 00 07 	brgt	800063c8 <_dtoa_r+0x2d0>
800063be:	30 18       	mov	r8,1
800063c0:	50 98       	stdsp	sp[0x24],r8
800063c2:	10 91       	mov	r1,r8
800063c4:	50 e8       	stdsp	sp[0x38],r8
800063c6:	c1 58       	rjmp	800063f0 <_dtoa_r+0x2f8>
800063c8:	40 e5       	lddsp	r5,sp[0x38]
800063ca:	50 95       	stdsp	sp[0x24],r5
800063cc:	0a 91       	mov	r1,r5
800063ce:	0a 98       	mov	r8,r5
800063d0:	c1 08       	rjmp	800063f0 <_dtoa_r+0x2f8>
800063d2:	30 0c       	mov	r12,0
800063d4:	50 dc       	stdsp	sp[0x34],r12
800063d6:	40 eb       	lddsp	r11,sp[0x38]
800063d8:	ec 0b 00 0b 	add	r11,r6,r11
800063dc:	50 9b       	stdsp	sp[0x24],r11
800063de:	16 98       	mov	r8,r11
800063e0:	2f f8       	sub	r8,-1
800063e2:	58 08       	cp.w	r8,0
800063e4:	e0 89 00 05 	brgt	800063ee <_dtoa_r+0x2f6>
800063e8:	10 91       	mov	r1,r8
800063ea:	30 18       	mov	r8,1
800063ec:	c0 28       	rjmp	800063f0 <_dtoa_r+0x2f8>
800063ee:	10 91       	mov	r1,r8
800063f0:	30 09       	mov	r9,0
800063f2:	6e 9a       	ld.w	r10,r7[0x24]
800063f4:	95 19       	st.w	r10[0x4],r9
800063f6:	30 49       	mov	r9,4
800063f8:	c0 68       	rjmp	80006404 <_dtoa_r+0x30c>
800063fa:	d7 03       	nop
800063fc:	6a 1a       	ld.w	r10,r5[0x4]
800063fe:	a1 79       	lsl	r9,0x1
80006400:	2f fa       	sub	r10,-1
80006402:	8b 1a       	st.w	r5[0x4],r10
80006404:	6e 95       	ld.w	r5,r7[0x24]
80006406:	f2 ca ff ec 	sub	r10,r9,-20
8000640a:	10 3a       	cp.w	r10,r8
8000640c:	fe 98 ff f8 	brls	800063fc <_dtoa_r+0x304>
80006410:	6a 1b       	ld.w	r11,r5[0x4]
80006412:	0e 9c       	mov	r12,r7
80006414:	e0 a0 0b 6e 	rcall	80007af0 <_Balloc>
80006418:	58 e1       	cp.w	r1,14
8000641a:	5f 88       	srls	r8
8000641c:	8b 0c       	st.w	r5[0x0],r12
8000641e:	f1 e4 00 04 	and	r4,r8,r4
80006422:	6e 98       	ld.w	r8,r7[0x24]
80006424:	70 08       	ld.w	r8,r8[0x0]
80006426:	50 88       	stdsp	sp[0x20],r8
80006428:	e0 80 01 82 	breq	8000672c <_dtoa_r+0x634>
8000642c:	58 06       	cp.w	r6,0
8000642e:	e0 8a 00 43 	brle	800064b4 <_dtoa_r+0x3bc>
80006432:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80006436:	fe c8 cb e2 	sub	r8,pc,-13342
8000643a:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000643e:	fa e5 00 18 	st.d	sp[24],r4
80006442:	ec 04 14 04 	asr	r4,r6,0x4
80006446:	ed b4 00 04 	bld	r4,0x4
8000644a:	c0 30       	breq	80006450 <_dtoa_r+0x358>
8000644c:	30 25       	mov	r5,2
8000644e:	c1 08       	rjmp	8000646e <_dtoa_r+0x376>
80006450:	fe c8 cb 34 	sub	r8,pc,-13516
80006454:	f0 e8 00 20 	ld.d	r8,r8[32]
80006458:	fa ea 00 3c 	ld.d	r10,sp[60]
8000645c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006460:	fe b0 e9 22 	rcall	800036a4 <__avr32_f64_div>
80006464:	30 35       	mov	r5,3
80006466:	14 98       	mov	r8,r10
80006468:	16 99       	mov	r9,r11
8000646a:	fa e9 00 08 	st.d	sp[8],r8
8000646e:	fe cc cb 52 	sub	r12,pc,-13486
80006472:	50 a3       	stdsp	sp[0x28],r3
80006474:	0c 93       	mov	r3,r6
80006476:	18 96       	mov	r6,r12
80006478:	c0 f8       	rjmp	80006496 <_dtoa_r+0x39e>
8000647a:	fa ea 00 18 	ld.d	r10,sp[24]
8000647e:	ed b4 00 00 	bld	r4,0x0
80006482:	c0 81       	brne	80006492 <_dtoa_r+0x39a>
80006484:	ec e8 00 00 	ld.d	r8,r6[0]
80006488:	2f f5       	sub	r5,-1
8000648a:	fe b0 e8 23 	rcall	800034d0 <__avr32_f64_mul>
8000648e:	fa eb 00 18 	st.d	sp[24],r10
80006492:	a1 54       	asr	r4,0x1
80006494:	2f 86       	sub	r6,-8
80006496:	58 04       	cp.w	r4,0
80006498:	cf 11       	brne	8000647a <_dtoa_r+0x382>
8000649a:	fa e8 00 18 	ld.d	r8,sp[24]
8000649e:	fa ea 00 08 	ld.d	r10,sp[8]
800064a2:	06 96       	mov	r6,r3
800064a4:	fe b0 e9 00 	rcall	800036a4 <__avr32_f64_div>
800064a8:	40 a3       	lddsp	r3,sp[0x28]
800064aa:	14 98       	mov	r8,r10
800064ac:	16 99       	mov	r9,r11
800064ae:	fa e9 00 08 	st.d	sp[8],r8
800064b2:	c2 f8       	rjmp	80006510 <_dtoa_r+0x418>
800064b4:	ec 08 11 00 	rsub	r8,r6,0
800064b8:	c0 31       	brne	800064be <_dtoa_r+0x3c6>
800064ba:	30 25       	mov	r5,2
800064bc:	c2 a8       	rjmp	80006510 <_dtoa_r+0x418>
800064be:	fe cc cb a2 	sub	r12,pc,-13406
800064c2:	f0 04 14 04 	asr	r4,r8,0x4
800064c6:	50 1c       	stdsp	sp[0x4],r12
800064c8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800064cc:	fe c9 cc 78 	sub	r9,pc,-13192
800064d0:	fa ea 00 3c 	ld.d	r10,sp[60]
800064d4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800064d8:	fe b0 e7 fc 	rcall	800034d0 <__avr32_f64_mul>
800064dc:	40 1c       	lddsp	r12,sp[0x4]
800064de:	50 63       	stdsp	sp[0x18],r3
800064e0:	30 25       	mov	r5,2
800064e2:	0c 93       	mov	r3,r6
800064e4:	fa eb 00 08 	st.d	sp[8],r10
800064e8:	18 96       	mov	r6,r12
800064ea:	c0 f8       	rjmp	80006508 <_dtoa_r+0x410>
800064ec:	fa ea 00 08 	ld.d	r10,sp[8]
800064f0:	ed b4 00 00 	bld	r4,0x0
800064f4:	c0 81       	brne	80006504 <_dtoa_r+0x40c>
800064f6:	ec e8 00 00 	ld.d	r8,r6[0]
800064fa:	2f f5       	sub	r5,-1
800064fc:	fe b0 e7 ea 	rcall	800034d0 <__avr32_f64_mul>
80006500:	fa eb 00 08 	st.d	sp[8],r10
80006504:	a1 54       	asr	r4,0x1
80006506:	2f 86       	sub	r6,-8
80006508:	58 04       	cp.w	r4,0
8000650a:	cf 11       	brne	800064ec <_dtoa_r+0x3f4>
8000650c:	06 96       	mov	r6,r3
8000650e:	40 63       	lddsp	r3,sp[0x18]
80006510:	41 4a       	lddsp	r10,sp[0x50]
80006512:	58 0a       	cp.w	r10,0
80006514:	c2 a0       	breq	80006568 <_dtoa_r+0x470>
80006516:	fa e8 00 08 	ld.d	r8,sp[8]
8000651a:	58 01       	cp.w	r1,0
8000651c:	5f 94       	srgt	r4
8000651e:	fa e9 00 18 	st.d	sp[24],r8
80006522:	30 08       	mov	r8,0
80006524:	fc 19 3f f0 	movh	r9,0x3ff0
80006528:	fa ea 00 18 	ld.d	r10,sp[24]
8000652c:	e0 a0 12 8e 	rcall	80008a48 <__avr32_f64_cmp_lt>
80006530:	f9 bc 00 00 	moveq	r12,0
80006534:	f9 bc 01 01 	movne	r12,1
80006538:	e9 ec 00 0c 	and	r12,r4,r12
8000653c:	c1 60       	breq	80006568 <_dtoa_r+0x470>
8000653e:	40 98       	lddsp	r8,sp[0x24]
80006540:	58 08       	cp.w	r8,0
80006542:	e0 8a 00 f1 	brle	80006724 <_dtoa_r+0x62c>
80006546:	30 08       	mov	r8,0
80006548:	fc 19 40 24 	movh	r9,0x4024
8000654c:	ec c4 00 01 	sub	r4,r6,1
80006550:	fa ea 00 18 	ld.d	r10,sp[24]
80006554:	2f f5       	sub	r5,-1
80006556:	50 64       	stdsp	sp[0x18],r4
80006558:	fe b0 e7 bc 	rcall	800034d0 <__avr32_f64_mul>
8000655c:	40 94       	lddsp	r4,sp[0x24]
8000655e:	14 98       	mov	r8,r10
80006560:	16 99       	mov	r9,r11
80006562:	fa e9 00 08 	st.d	sp[8],r8
80006566:	c0 38       	rjmp	8000656c <_dtoa_r+0x474>
80006568:	50 66       	stdsp	sp[0x18],r6
8000656a:	02 94       	mov	r4,r1
8000656c:	0a 9c       	mov	r12,r5
8000656e:	e0 a0 11 b6 	rcall	800088da <__avr32_s32_to_f64>
80006572:	fa e8 00 08 	ld.d	r8,sp[8]
80006576:	fe b0 e7 ad 	rcall	800034d0 <__avr32_f64_mul>
8000657a:	30 08       	mov	r8,0
8000657c:	fc 19 40 1c 	movh	r9,0x401c
80006580:	e0 a0 11 0c 	rcall	80008798 <__avr32_f64_add>
80006584:	14 98       	mov	r8,r10
80006586:	16 99       	mov	r9,r11
80006588:	fa e9 00 28 	st.d	sp[40],r8
8000658c:	fc 18 fc c0 	movh	r8,0xfcc0
80006590:	40 a5       	lddsp	r5,sp[0x28]
80006592:	10 05       	add	r5,r8
80006594:	50 a5       	stdsp	sp[0x28],r5
80006596:	58 04       	cp.w	r4,0
80006598:	c2 11       	brne	800065da <_dtoa_r+0x4e2>
8000659a:	fa ea 00 08 	ld.d	r10,sp[8]
8000659e:	30 08       	mov	r8,0
800065a0:	fc 19 40 14 	movh	r9,0x4014
800065a4:	e0 a0 10 2c 	rcall	800085fc <__avr32_f64_sub>
800065a8:	40 bc       	lddsp	r12,sp[0x2c]
800065aa:	fa eb 00 08 	st.d	sp[8],r10
800065ae:	14 98       	mov	r8,r10
800065b0:	16 99       	mov	r9,r11
800065b2:	18 9a       	mov	r10,r12
800065b4:	0a 9b       	mov	r11,r5
800065b6:	e0 a0 12 49 	rcall	80008a48 <__avr32_f64_cmp_lt>
800065ba:	e0 81 02 54 	brne	80006a62 <_dtoa_r+0x96a>
800065be:	0a 98       	mov	r8,r5
800065c0:	40 b9       	lddsp	r9,sp[0x2c]
800065c2:	ee 18 80 00 	eorh	r8,0x8000
800065c6:	fa ea 00 08 	ld.d	r10,sp[8]
800065ca:	10 95       	mov	r5,r8
800065cc:	12 98       	mov	r8,r9
800065ce:	0a 99       	mov	r9,r5
800065d0:	e0 a0 12 3c 	rcall	80008a48 <__avr32_f64_cmp_lt>
800065d4:	e0 81 02 3e 	brne	80006a50 <_dtoa_r+0x958>
800065d8:	ca 68       	rjmp	80006724 <_dtoa_r+0x62c>
800065da:	fe c9 cd 86 	sub	r9,pc,-12922
800065de:	e8 c8 00 01 	sub	r8,r4,1
800065e2:	40 d5       	lddsp	r5,sp[0x34]
800065e4:	58 05       	cp.w	r5,0
800065e6:	c4 f0       	breq	80006684 <_dtoa_r+0x58c>
800065e8:	30 0c       	mov	r12,0
800065ea:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800065ee:	51 3c       	stdsp	sp[0x4c],r12
800065f0:	30 0a       	mov	r10,0
800065f2:	fc 1b 3f e0 	movh	r11,0x3fe0
800065f6:	fe b0 e8 57 	rcall	800036a4 <__avr32_f64_div>
800065fa:	fa e8 00 28 	ld.d	r8,sp[40]
800065fe:	40 85       	lddsp	r5,sp[0x20]
80006600:	e0 a0 0f fe 	rcall	800085fc <__avr32_f64_sub>
80006604:	fa eb 00 28 	st.d	sp[40],r10
80006608:	fa ea 00 08 	ld.d	r10,sp[8]
8000660c:	e0 a0 11 50 	rcall	800088ac <__avr32_f64_to_s32>
80006610:	51 6c       	stdsp	sp[0x58],r12
80006612:	e0 a0 11 64 	rcall	800088da <__avr32_s32_to_f64>
80006616:	14 98       	mov	r8,r10
80006618:	16 99       	mov	r9,r11
8000661a:	fa ea 00 08 	ld.d	r10,sp[8]
8000661e:	e0 a0 0f ef 	rcall	800085fc <__avr32_f64_sub>
80006622:	fa eb 00 08 	st.d	sp[8],r10
80006626:	41 68       	lddsp	r8,sp[0x58]
80006628:	2d 08       	sub	r8,-48
8000662a:	0a c8       	st.b	r5++,r8
8000662c:	41 39       	lddsp	r9,sp[0x4c]
8000662e:	2f f9       	sub	r9,-1
80006630:	51 39       	stdsp	sp[0x4c],r9
80006632:	fa e8 00 28 	ld.d	r8,sp[40]
80006636:	e0 a0 12 09 	rcall	80008a48 <__avr32_f64_cmp_lt>
8000663a:	e0 81 03 39 	brne	80006cac <_dtoa_r+0xbb4>
8000663e:	fa e8 00 08 	ld.d	r8,sp[8]
80006642:	30 0a       	mov	r10,0
80006644:	fc 1b 3f f0 	movh	r11,0x3ff0
80006648:	e0 a0 0f da 	rcall	800085fc <__avr32_f64_sub>
8000664c:	fa e8 00 28 	ld.d	r8,sp[40]
80006650:	e0 a0 11 fc 	rcall	80008a48 <__avr32_f64_cmp_lt>
80006654:	fa ea 00 28 	ld.d	r10,sp[40]
80006658:	30 08       	mov	r8,0
8000665a:	fc 19 40 24 	movh	r9,0x4024
8000665e:	e0 81 00 da 	brne	80006812 <_dtoa_r+0x71a>
80006662:	41 3c       	lddsp	r12,sp[0x4c]
80006664:	08 3c       	cp.w	r12,r4
80006666:	c5 f4       	brge	80006724 <_dtoa_r+0x62c>
80006668:	fe b0 e7 34 	rcall	800034d0 <__avr32_f64_mul>
8000666c:	30 08       	mov	r8,0
8000666e:	fa eb 00 28 	st.d	sp[40],r10
80006672:	fc 19 40 24 	movh	r9,0x4024
80006676:	fa ea 00 08 	ld.d	r10,sp[8]
8000667a:	fe b0 e7 2b 	rcall	800034d0 <__avr32_f64_mul>
8000667e:	fa eb 00 08 	st.d	sp[8],r10
80006682:	cc 3b       	rjmp	80006608 <_dtoa_r+0x510>
80006684:	40 85       	lddsp	r5,sp[0x20]
80006686:	08 05       	add	r5,r4
80006688:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000668c:	51 35       	stdsp	sp[0x4c],r5
8000668e:	fa e8 00 28 	ld.d	r8,sp[40]
80006692:	40 85       	lddsp	r5,sp[0x20]
80006694:	fe b0 e7 1e 	rcall	800034d0 <__avr32_f64_mul>
80006698:	fa eb 00 28 	st.d	sp[40],r10
8000669c:	fa ea 00 08 	ld.d	r10,sp[8]
800066a0:	e0 a0 11 06 	rcall	800088ac <__avr32_f64_to_s32>
800066a4:	51 6c       	stdsp	sp[0x58],r12
800066a6:	e0 a0 11 1a 	rcall	800088da <__avr32_s32_to_f64>
800066aa:	14 98       	mov	r8,r10
800066ac:	16 99       	mov	r9,r11
800066ae:	fa ea 00 08 	ld.d	r10,sp[8]
800066b2:	e0 a0 0f a5 	rcall	800085fc <__avr32_f64_sub>
800066b6:	fa eb 00 08 	st.d	sp[8],r10
800066ba:	41 68       	lddsp	r8,sp[0x58]
800066bc:	2d 08       	sub	r8,-48
800066be:	0a c8       	st.b	r5++,r8
800066c0:	41 3c       	lddsp	r12,sp[0x4c]
800066c2:	18 35       	cp.w	r5,r12
800066c4:	c2 81       	brne	80006714 <_dtoa_r+0x61c>
800066c6:	30 08       	mov	r8,0
800066c8:	fc 19 3f e0 	movh	r9,0x3fe0
800066cc:	fa ea 00 28 	ld.d	r10,sp[40]
800066d0:	e0 a0 10 64 	rcall	80008798 <__avr32_f64_add>
800066d4:	40 85       	lddsp	r5,sp[0x20]
800066d6:	fa e8 00 08 	ld.d	r8,sp[8]
800066da:	08 05       	add	r5,r4
800066dc:	e0 a0 11 b6 	rcall	80008a48 <__avr32_f64_cmp_lt>
800066e0:	e0 81 00 99 	brne	80006812 <_dtoa_r+0x71a>
800066e4:	fa e8 00 28 	ld.d	r8,sp[40]
800066e8:	30 0a       	mov	r10,0
800066ea:	fc 1b 3f e0 	movh	r11,0x3fe0
800066ee:	e0 a0 0f 87 	rcall	800085fc <__avr32_f64_sub>
800066f2:	14 98       	mov	r8,r10
800066f4:	16 99       	mov	r9,r11
800066f6:	fa ea 00 08 	ld.d	r10,sp[8]
800066fa:	e0 a0 11 a7 	rcall	80008a48 <__avr32_f64_cmp_lt>
800066fe:	c1 30       	breq	80006724 <_dtoa_r+0x62c>
80006700:	33 09       	mov	r9,48
80006702:	0a 98       	mov	r8,r5
80006704:	11 7a       	ld.ub	r10,--r8
80006706:	f2 0a 18 00 	cp.b	r10,r9
8000670a:	e0 81 02 d1 	brne	80006cac <_dtoa_r+0xbb4>
8000670e:	10 95       	mov	r5,r8
80006710:	cf 9b       	rjmp	80006702 <_dtoa_r+0x60a>
80006712:	d7 03       	nop
80006714:	30 08       	mov	r8,0
80006716:	fc 19 40 24 	movh	r9,0x4024
8000671a:	fe b0 e6 db 	rcall	800034d0 <__avr32_f64_mul>
8000671e:	fa eb 00 08 	st.d	sp[8],r10
80006722:	cb db       	rjmp	8000669c <_dtoa_r+0x5a4>
80006724:	fa ea 00 3c 	ld.d	r10,sp[60]
80006728:	fa eb 00 08 	st.d	sp[8],r10
8000672c:	58 e6       	cp.w	r6,14
8000672e:	5f ab       	srle	r11
80006730:	41 8a       	lddsp	r10,sp[0x60]
80006732:	30 08       	mov	r8,0
80006734:	f4 09 11 ff 	rsub	r9,r10,-1
80006738:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000673c:	f0 09 18 00 	cp.b	r9,r8
80006740:	e0 80 00 82 	breq	80006844 <_dtoa_r+0x74c>
80006744:	40 ea       	lddsp	r10,sp[0x38]
80006746:	58 01       	cp.w	r1,0
80006748:	5f a9       	srle	r9
8000674a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000674e:	fe ca ce fa 	sub	r10,pc,-12550
80006752:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006756:	fa e5 00 10 	st.d	sp[16],r4
8000675a:	f0 09 18 00 	cp.b	r9,r8
8000675e:	c1 40       	breq	80006786 <_dtoa_r+0x68e>
80006760:	58 01       	cp.w	r1,0
80006762:	e0 81 01 77 	brne	80006a50 <_dtoa_r+0x958>
80006766:	30 08       	mov	r8,0
80006768:	fc 19 40 14 	movh	r9,0x4014
8000676c:	08 9a       	mov	r10,r4
8000676e:	0a 9b       	mov	r11,r5
80006770:	fe b0 e6 b0 	rcall	800034d0 <__avr32_f64_mul>
80006774:	fa e8 00 08 	ld.d	r8,sp[8]
80006778:	e0 a0 11 34 	rcall	800089e0 <__avr32_f64_cmp_ge>
8000677c:	e0 81 01 6a 	brne	80006a50 <_dtoa_r+0x958>
80006780:	02 92       	mov	r2,r1
80006782:	e0 8f 01 72 	bral	80006a66 <_dtoa_r+0x96e>
80006786:	40 85       	lddsp	r5,sp[0x20]
80006788:	30 14       	mov	r4,1
8000678a:	fa e8 00 10 	ld.d	r8,sp[16]
8000678e:	fa ea 00 08 	ld.d	r10,sp[8]
80006792:	fe b0 e7 89 	rcall	800036a4 <__avr32_f64_div>
80006796:	e0 a0 10 8b 	rcall	800088ac <__avr32_f64_to_s32>
8000679a:	18 92       	mov	r2,r12
8000679c:	e0 a0 10 9f 	rcall	800088da <__avr32_s32_to_f64>
800067a0:	fa e8 00 10 	ld.d	r8,sp[16]
800067a4:	fe b0 e6 96 	rcall	800034d0 <__avr32_f64_mul>
800067a8:	14 98       	mov	r8,r10
800067aa:	16 99       	mov	r9,r11
800067ac:	fa ea 00 08 	ld.d	r10,sp[8]
800067b0:	e0 a0 0f 26 	rcall	800085fc <__avr32_f64_sub>
800067b4:	fa eb 00 08 	st.d	sp[8],r10
800067b8:	e4 c8 ff d0 	sub	r8,r2,-48
800067bc:	0a c8       	st.b	r5++,r8
800067be:	fc 19 40 24 	movh	r9,0x4024
800067c2:	30 08       	mov	r8,0
800067c4:	02 34       	cp.w	r4,r1
800067c6:	c3 31       	brne	8000682c <_dtoa_r+0x734>
800067c8:	fa e8 00 08 	ld.d	r8,sp[8]
800067cc:	e0 a0 0f e6 	rcall	80008798 <__avr32_f64_add>
800067d0:	16 91       	mov	r1,r11
800067d2:	14 90       	mov	r0,r10
800067d4:	14 98       	mov	r8,r10
800067d6:	02 99       	mov	r9,r1
800067d8:	fa ea 00 10 	ld.d	r10,sp[16]
800067dc:	e0 a0 11 36 	rcall	80008a48 <__avr32_f64_cmp_lt>
800067e0:	c1 a1       	brne	80006814 <_dtoa_r+0x71c>
800067e2:	fa e8 00 10 	ld.d	r8,sp[16]
800067e6:	00 9a       	mov	r10,r0
800067e8:	02 9b       	mov	r11,r1
800067ea:	e0 a0 10 e8 	rcall	800089ba <__avr32_f64_cmp_eq>
800067ee:	e0 80 02 5e 	breq	80006caa <_dtoa_r+0xbb2>
800067f2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800067f6:	c0 f1       	brne	80006814 <_dtoa_r+0x71c>
800067f8:	e0 8f 02 59 	bral	80006caa <_dtoa_r+0xbb2>
800067fc:	40 8a       	lddsp	r10,sp[0x20]
800067fe:	14 38       	cp.w	r8,r10
80006800:	c0 30       	breq	80006806 <_dtoa_r+0x70e>
80006802:	10 95       	mov	r5,r8
80006804:	c0 98       	rjmp	80006816 <_dtoa_r+0x71e>
80006806:	33 08       	mov	r8,48
80006808:	40 89       	lddsp	r9,sp[0x20]
8000680a:	2f f6       	sub	r6,-1
8000680c:	b2 88       	st.b	r9[0x0],r8
8000680e:	40 88       	lddsp	r8,sp[0x20]
80006810:	c0 88       	rjmp	80006820 <_dtoa_r+0x728>
80006812:	40 66       	lddsp	r6,sp[0x18]
80006814:	33 99       	mov	r9,57
80006816:	0a 98       	mov	r8,r5
80006818:	11 7a       	ld.ub	r10,--r8
8000681a:	f2 0a 18 00 	cp.b	r10,r9
8000681e:	ce f0       	breq	800067fc <_dtoa_r+0x704>
80006820:	50 66       	stdsp	sp[0x18],r6
80006822:	11 89       	ld.ub	r9,r8[0x0]
80006824:	2f f9       	sub	r9,-1
80006826:	b0 89       	st.b	r8[0x0],r9
80006828:	e0 8f 02 42 	bral	80006cac <_dtoa_r+0xbb4>
8000682c:	fe b0 e6 52 	rcall	800034d0 <__avr32_f64_mul>
80006830:	2f f4       	sub	r4,-1
80006832:	fa eb 00 08 	st.d	sp[8],r10
80006836:	30 08       	mov	r8,0
80006838:	30 09       	mov	r9,0
8000683a:	e0 a0 10 c0 	rcall	800089ba <__avr32_f64_cmp_eq>
8000683e:	ca 60       	breq	8000678a <_dtoa_r+0x692>
80006840:	e0 8f 02 35 	bral	80006caa <_dtoa_r+0xbb2>
80006844:	40 d8       	lddsp	r8,sp[0x34]
80006846:	58 08       	cp.w	r8,0
80006848:	c0 51       	brne	80006852 <_dtoa_r+0x75a>
8000684a:	04 98       	mov	r8,r2
8000684c:	00 95       	mov	r5,r0
8000684e:	40 d4       	lddsp	r4,sp[0x34]
80006850:	c3 78       	rjmp	800068be <_dtoa_r+0x7c6>
80006852:	40 c5       	lddsp	r5,sp[0x30]
80006854:	58 15       	cp.w	r5,1
80006856:	e0 89 00 0f 	brgt	80006874 <_dtoa_r+0x77c>
8000685a:	41 74       	lddsp	r4,sp[0x5c]
8000685c:	58 04       	cp.w	r4,0
8000685e:	c0 40       	breq	80006866 <_dtoa_r+0x76e>
80006860:	f4 c9 fb cd 	sub	r9,r10,-1075
80006864:	c0 48       	rjmp	8000686c <_dtoa_r+0x774>
80006866:	41 99       	lddsp	r9,sp[0x64]
80006868:	f2 09 11 36 	rsub	r9,r9,54
8000686c:	04 98       	mov	r8,r2
8000686e:	00 95       	mov	r5,r0
80006870:	c1 c8       	rjmp	800068a8 <_dtoa_r+0x7b0>
80006872:	d7 03       	nop
80006874:	e2 c8 00 01 	sub	r8,r1,1
80006878:	58 01       	cp.w	r1,0
8000687a:	e0 05 17 40 	movge	r5,r0
8000687e:	e2 09 17 40 	movge	r9,r1
80006882:	e1 d1 e5 15 	sublt	r5,r0,r1
80006886:	f9 b9 05 00 	movlt	r9,0
8000688a:	10 32       	cp.w	r2,r8
8000688c:	e5 d8 e4 18 	subge	r8,r2,r8
80006890:	f1 d2 e5 18 	sublt	r8,r8,r2
80006894:	e5 d8 e5 02 	addlt	r2,r2,r8
80006898:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000689c:	f9 d8 e5 0c 	addlt	r12,r12,r8
800068a0:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800068a4:	f9 b8 05 00 	movlt	r8,0
800068a8:	40 4b       	lddsp	r11,sp[0x10]
800068aa:	12 0b       	add	r11,r9
800068ac:	50 08       	stdsp	sp[0x0],r8
800068ae:	50 4b       	stdsp	sp[0x10],r11
800068b0:	12 00       	add	r0,r9
800068b2:	30 1b       	mov	r11,1
800068b4:	0e 9c       	mov	r12,r7
800068b6:	e0 a0 0a d1 	rcall	80007e58 <__i2b>
800068ba:	40 08       	lddsp	r8,sp[0x0]
800068bc:	18 94       	mov	r4,r12
800068be:	40 4a       	lddsp	r10,sp[0x10]
800068c0:	58 05       	cp.w	r5,0
800068c2:	5f 99       	srgt	r9
800068c4:	58 0a       	cp.w	r10,0
800068c6:	5f 9a       	srgt	r10
800068c8:	f5 e9 00 09 	and	r9,r10,r9
800068cc:	c0 80       	breq	800068dc <_dtoa_r+0x7e4>
800068ce:	40 4c       	lddsp	r12,sp[0x10]
800068d0:	f8 05 0d 49 	min	r9,r12,r5
800068d4:	12 1c       	sub	r12,r9
800068d6:	12 10       	sub	r0,r9
800068d8:	50 4c       	stdsp	sp[0x10],r12
800068da:	12 15       	sub	r5,r9
800068dc:	58 02       	cp.w	r2,0
800068de:	e0 8a 00 27 	brle	8000692c <_dtoa_r+0x834>
800068e2:	40 db       	lddsp	r11,sp[0x34]
800068e4:	58 0b       	cp.w	r11,0
800068e6:	c1 d0       	breq	80006920 <_dtoa_r+0x828>
800068e8:	58 08       	cp.w	r8,0
800068ea:	e0 8a 00 17 	brle	80006918 <_dtoa_r+0x820>
800068ee:	10 9a       	mov	r10,r8
800068f0:	50 08       	stdsp	sp[0x0],r8
800068f2:	08 9b       	mov	r11,r4
800068f4:	0e 9c       	mov	r12,r7
800068f6:	e0 a0 0a f7 	rcall	80007ee4 <__pow5mult>
800068fa:	06 9a       	mov	r10,r3
800068fc:	18 9b       	mov	r11,r12
800068fe:	18 94       	mov	r4,r12
80006900:	0e 9c       	mov	r12,r7
80006902:	e0 a0 0a 2b 	rcall	80007d58 <__multiply>
80006906:	18 99       	mov	r9,r12
80006908:	06 9b       	mov	r11,r3
8000690a:	50 19       	stdsp	sp[0x4],r9
8000690c:	0e 9c       	mov	r12,r7
8000690e:	e0 a0 08 d7 	rcall	80007abc <_Bfree>
80006912:	40 19       	lddsp	r9,sp[0x4]
80006914:	40 08       	lddsp	r8,sp[0x0]
80006916:	12 93       	mov	r3,r9
80006918:	e4 08 01 0a 	sub	r10,r2,r8
8000691c:	c0 80       	breq	8000692c <_dtoa_r+0x834>
8000691e:	c0 28       	rjmp	80006922 <_dtoa_r+0x82a>
80006920:	04 9a       	mov	r10,r2
80006922:	06 9b       	mov	r11,r3
80006924:	0e 9c       	mov	r12,r7
80006926:	e0 a0 0a df 	rcall	80007ee4 <__pow5mult>
8000692a:	18 93       	mov	r3,r12
8000692c:	30 1b       	mov	r11,1
8000692e:	0e 9c       	mov	r12,r7
80006930:	e0 a0 0a 94 	rcall	80007e58 <__i2b>
80006934:	41 1a       	lddsp	r10,sp[0x44]
80006936:	18 92       	mov	r2,r12
80006938:	58 0a       	cp.w	r10,0
8000693a:	e0 8a 00 07 	brle	80006948 <_dtoa_r+0x850>
8000693e:	18 9b       	mov	r11,r12
80006940:	0e 9c       	mov	r12,r7
80006942:	e0 a0 0a d1 	rcall	80007ee4 <__pow5mult>
80006946:	18 92       	mov	r2,r12
80006948:	40 c9       	lddsp	r9,sp[0x30]
8000694a:	58 19       	cp.w	r9,1
8000694c:	e0 89 00 14 	brgt	80006974 <_dtoa_r+0x87c>
80006950:	40 38       	lddsp	r8,sp[0xc]
80006952:	58 08       	cp.w	r8,0
80006954:	c1 01       	brne	80006974 <_dtoa_r+0x87c>
80006956:	40 29       	lddsp	r9,sp[0x8]
80006958:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000695c:	c0 c1       	brne	80006974 <_dtoa_r+0x87c>
8000695e:	12 98       	mov	r8,r9
80006960:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006964:	c0 80       	breq	80006974 <_dtoa_r+0x87c>
80006966:	40 4c       	lddsp	r12,sp[0x10]
80006968:	30 1b       	mov	r11,1
8000696a:	2f fc       	sub	r12,-1
8000696c:	2f f0       	sub	r0,-1
8000696e:	50 4c       	stdsp	sp[0x10],r12
80006970:	50 6b       	stdsp	sp[0x18],r11
80006972:	c0 38       	rjmp	80006978 <_dtoa_r+0x880>
80006974:	30 0a       	mov	r10,0
80006976:	50 6a       	stdsp	sp[0x18],r10
80006978:	41 19       	lddsp	r9,sp[0x44]
8000697a:	58 09       	cp.w	r9,0
8000697c:	c0 31       	brne	80006982 <_dtoa_r+0x88a>
8000697e:	30 1c       	mov	r12,1
80006980:	c0 98       	rjmp	80006992 <_dtoa_r+0x89a>
80006982:	64 48       	ld.w	r8,r2[0x10]
80006984:	2f c8       	sub	r8,-4
80006986:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000698a:	e0 a0 08 08 	rcall	8000799a <__hi0bits>
8000698e:	f8 0c 11 20 	rsub	r12,r12,32
80006992:	40 4b       	lddsp	r11,sp[0x10]
80006994:	f8 0b 00 08 	add	r8,r12,r11
80006998:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000699c:	c0 c0       	breq	800069b4 <_dtoa_r+0x8bc>
8000699e:	f0 08 11 20 	rsub	r8,r8,32
800069a2:	58 48       	cp.w	r8,4
800069a4:	e0 8a 00 06 	brle	800069b0 <_dtoa_r+0x8b8>
800069a8:	20 48       	sub	r8,4
800069aa:	10 0b       	add	r11,r8
800069ac:	50 4b       	stdsp	sp[0x10],r11
800069ae:	c0 78       	rjmp	800069bc <_dtoa_r+0x8c4>
800069b0:	58 48       	cp.w	r8,4
800069b2:	c0 70       	breq	800069c0 <_dtoa_r+0x8c8>
800069b4:	40 4a       	lddsp	r10,sp[0x10]
800069b6:	2e 48       	sub	r8,-28
800069b8:	10 0a       	add	r10,r8
800069ba:	50 4a       	stdsp	sp[0x10],r10
800069bc:	10 00       	add	r0,r8
800069be:	10 05       	add	r5,r8
800069c0:	58 00       	cp.w	r0,0
800069c2:	e0 8a 00 08 	brle	800069d2 <_dtoa_r+0x8da>
800069c6:	06 9b       	mov	r11,r3
800069c8:	00 9a       	mov	r10,r0
800069ca:	0e 9c       	mov	r12,r7
800069cc:	e0 a0 09 82 	rcall	80007cd0 <__lshift>
800069d0:	18 93       	mov	r3,r12
800069d2:	40 49       	lddsp	r9,sp[0x10]
800069d4:	58 09       	cp.w	r9,0
800069d6:	e0 8a 00 08 	brle	800069e6 <_dtoa_r+0x8ee>
800069da:	04 9b       	mov	r11,r2
800069dc:	12 9a       	mov	r10,r9
800069de:	0e 9c       	mov	r12,r7
800069e0:	e0 a0 09 78 	rcall	80007cd0 <__lshift>
800069e4:	18 92       	mov	r2,r12
800069e6:	41 48       	lddsp	r8,sp[0x50]
800069e8:	58 08       	cp.w	r8,0
800069ea:	c1 b0       	breq	80006a20 <_dtoa_r+0x928>
800069ec:	04 9b       	mov	r11,r2
800069ee:	06 9c       	mov	r12,r3
800069f0:	e0 a0 08 4c 	rcall	80007a88 <__mcmp>
800069f4:	c1 64       	brge	80006a20 <_dtoa_r+0x928>
800069f6:	06 9b       	mov	r11,r3
800069f8:	30 09       	mov	r9,0
800069fa:	30 aa       	mov	r10,10
800069fc:	0e 9c       	mov	r12,r7
800069fe:	e0 a0 0a 35 	rcall	80007e68 <__multadd>
80006a02:	20 16       	sub	r6,1
80006a04:	18 93       	mov	r3,r12
80006a06:	40 dc       	lddsp	r12,sp[0x34]
80006a08:	58 0c       	cp.w	r12,0
80006a0a:	c0 31       	brne	80006a10 <_dtoa_r+0x918>
80006a0c:	40 91       	lddsp	r1,sp[0x24]
80006a0e:	c0 98       	rjmp	80006a20 <_dtoa_r+0x928>
80006a10:	08 9b       	mov	r11,r4
80006a12:	40 91       	lddsp	r1,sp[0x24]
80006a14:	30 09       	mov	r9,0
80006a16:	30 aa       	mov	r10,10
80006a18:	0e 9c       	mov	r12,r7
80006a1a:	e0 a0 0a 27 	rcall	80007e68 <__multadd>
80006a1e:	18 94       	mov	r4,r12
80006a20:	58 01       	cp.w	r1,0
80006a22:	5f a9       	srle	r9
80006a24:	40 cb       	lddsp	r11,sp[0x30]
80006a26:	58 2b       	cp.w	r11,2
80006a28:	5f 98       	srgt	r8
80006a2a:	f3 e8 00 08 	and	r8,r9,r8
80006a2e:	c2 50       	breq	80006a78 <_dtoa_r+0x980>
80006a30:	58 01       	cp.w	r1,0
80006a32:	c1 11       	brne	80006a54 <_dtoa_r+0x95c>
80006a34:	04 9b       	mov	r11,r2
80006a36:	02 99       	mov	r9,r1
80006a38:	30 5a       	mov	r10,5
80006a3a:	0e 9c       	mov	r12,r7
80006a3c:	e0 a0 0a 16 	rcall	80007e68 <__multadd>
80006a40:	18 92       	mov	r2,r12
80006a42:	18 9b       	mov	r11,r12
80006a44:	06 9c       	mov	r12,r3
80006a46:	e0 a0 08 21 	rcall	80007a88 <__mcmp>
80006a4a:	e0 89 00 0f 	brgt	80006a68 <_dtoa_r+0x970>
80006a4e:	c0 38       	rjmp	80006a54 <_dtoa_r+0x95c>
80006a50:	30 02       	mov	r2,0
80006a52:	04 94       	mov	r4,r2
80006a54:	40 ea       	lddsp	r10,sp[0x38]
80006a56:	30 09       	mov	r9,0
80006a58:	5c da       	com	r10
80006a5a:	40 85       	lddsp	r5,sp[0x20]
80006a5c:	50 6a       	stdsp	sp[0x18],r10
80006a5e:	50 49       	stdsp	sp[0x10],r9
80006a60:	c0 f9       	rjmp	80006c7e <_dtoa_r+0xb86>
80006a62:	08 92       	mov	r2,r4
80006a64:	40 66       	lddsp	r6,sp[0x18]
80006a66:	04 94       	mov	r4,r2
80006a68:	2f f6       	sub	r6,-1
80006a6a:	50 66       	stdsp	sp[0x18],r6
80006a6c:	33 18       	mov	r8,49
80006a6e:	40 85       	lddsp	r5,sp[0x20]
80006a70:	0a c8       	st.b	r5++,r8
80006a72:	30 08       	mov	r8,0
80006a74:	50 48       	stdsp	sp[0x10],r8
80006a76:	c0 49       	rjmp	80006c7e <_dtoa_r+0xb86>
80006a78:	40 dc       	lddsp	r12,sp[0x34]
80006a7a:	58 0c       	cp.w	r12,0
80006a7c:	e0 80 00 b5 	breq	80006be6 <_dtoa_r+0xaee>
80006a80:	58 05       	cp.w	r5,0
80006a82:	e0 8a 00 08 	brle	80006a92 <_dtoa_r+0x99a>
80006a86:	08 9b       	mov	r11,r4
80006a88:	0a 9a       	mov	r10,r5
80006a8a:	0e 9c       	mov	r12,r7
80006a8c:	e0 a0 09 22 	rcall	80007cd0 <__lshift>
80006a90:	18 94       	mov	r4,r12
80006a92:	40 6b       	lddsp	r11,sp[0x18]
80006a94:	58 0b       	cp.w	r11,0
80006a96:	c0 31       	brne	80006a9c <_dtoa_r+0x9a4>
80006a98:	08 9c       	mov	r12,r4
80006a9a:	c1 38       	rjmp	80006ac0 <_dtoa_r+0x9c8>
80006a9c:	68 1b       	ld.w	r11,r4[0x4]
80006a9e:	0e 9c       	mov	r12,r7
80006aa0:	e0 a0 08 28 	rcall	80007af0 <_Balloc>
80006aa4:	68 4a       	ld.w	r10,r4[0x10]
80006aa6:	18 95       	mov	r5,r12
80006aa8:	e8 cb ff f4 	sub	r11,r4,-12
80006aac:	2f ea       	sub	r10,-2
80006aae:	2f 4c       	sub	r12,-12
80006ab0:	a3 6a       	lsl	r10,0x2
80006ab2:	fe b0 e8 3f 	rcall	80003b30 <memcpy>
80006ab6:	0a 9b       	mov	r11,r5
80006ab8:	30 1a       	mov	r10,1
80006aba:	0e 9c       	mov	r12,r7
80006abc:	e0 a0 09 0a 	rcall	80007cd0 <__lshift>
80006ac0:	50 44       	stdsp	sp[0x10],r4
80006ac2:	40 3a       	lddsp	r10,sp[0xc]
80006ac4:	30 19       	mov	r9,1
80006ac6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006aca:	18 94       	mov	r4,r12
80006acc:	50 da       	stdsp	sp[0x34],r10
80006ace:	40 85       	lddsp	r5,sp[0x20]
80006ad0:	50 99       	stdsp	sp[0x24],r9
80006ad2:	50 26       	stdsp	sp[0x8],r6
80006ad4:	50 e1       	stdsp	sp[0x38],r1
80006ad6:	04 9b       	mov	r11,r2
80006ad8:	06 9c       	mov	r12,r3
80006ada:	fe b0 fa 7f 	rcall	80005fd8 <quorem>
80006ade:	40 4b       	lddsp	r11,sp[0x10]
80006ae0:	f8 c0 ff d0 	sub	r0,r12,-48
80006ae4:	06 9c       	mov	r12,r3
80006ae6:	e0 a0 07 d1 	rcall	80007a88 <__mcmp>
80006aea:	08 9a       	mov	r10,r4
80006aec:	50 6c       	stdsp	sp[0x18],r12
80006aee:	04 9b       	mov	r11,r2
80006af0:	0e 9c       	mov	r12,r7
80006af2:	e0 a0 08 87 	rcall	80007c00 <__mdiff>
80006af6:	18 91       	mov	r1,r12
80006af8:	78 38       	ld.w	r8,r12[0xc]
80006afa:	58 08       	cp.w	r8,0
80006afc:	c0 30       	breq	80006b02 <_dtoa_r+0xa0a>
80006afe:	30 16       	mov	r6,1
80006b00:	c0 68       	rjmp	80006b0c <_dtoa_r+0xa14>
80006b02:	18 9b       	mov	r11,r12
80006b04:	06 9c       	mov	r12,r3
80006b06:	e0 a0 07 c1 	rcall	80007a88 <__mcmp>
80006b0a:	18 96       	mov	r6,r12
80006b0c:	0e 9c       	mov	r12,r7
80006b0e:	02 9b       	mov	r11,r1
80006b10:	e0 a0 07 d6 	rcall	80007abc <_Bfree>
80006b14:	40 cc       	lddsp	r12,sp[0x30]
80006b16:	ed ec 10 08 	or	r8,r6,r12
80006b1a:	c0 d1       	brne	80006b34 <_dtoa_r+0xa3c>
80006b1c:	40 db       	lddsp	r11,sp[0x34]
80006b1e:	58 0b       	cp.w	r11,0
80006b20:	c0 a1       	brne	80006b34 <_dtoa_r+0xa3c>
80006b22:	40 26       	lddsp	r6,sp[0x8]
80006b24:	e0 40 00 39 	cp.w	r0,57
80006b28:	c3 00       	breq	80006b88 <_dtoa_r+0xa90>
80006b2a:	40 6a       	lddsp	r10,sp[0x18]
80006b2c:	58 0a       	cp.w	r10,0
80006b2e:	e0 89 00 24 	brgt	80006b76 <_dtoa_r+0xa7e>
80006b32:	c2 f8       	rjmp	80006b90 <_dtoa_r+0xa98>
80006b34:	40 69       	lddsp	r9,sp[0x18]
80006b36:	58 09       	cp.w	r9,0
80006b38:	c0 85       	brlt	80006b48 <_dtoa_r+0xa50>
80006b3a:	12 98       	mov	r8,r9
80006b3c:	40 cc       	lddsp	r12,sp[0x30]
80006b3e:	18 48       	or	r8,r12
80006b40:	c1 d1       	brne	80006b7a <_dtoa_r+0xa82>
80006b42:	40 db       	lddsp	r11,sp[0x34]
80006b44:	58 0b       	cp.w	r11,0
80006b46:	c1 a1       	brne	80006b7a <_dtoa_r+0xa82>
80006b48:	0c 99       	mov	r9,r6
80006b4a:	40 26       	lddsp	r6,sp[0x8]
80006b4c:	58 09       	cp.w	r9,0
80006b4e:	e0 8a 00 21 	brle	80006b90 <_dtoa_r+0xa98>
80006b52:	06 9b       	mov	r11,r3
80006b54:	30 1a       	mov	r10,1
80006b56:	0e 9c       	mov	r12,r7
80006b58:	e0 a0 08 bc 	rcall	80007cd0 <__lshift>
80006b5c:	04 9b       	mov	r11,r2
80006b5e:	18 93       	mov	r3,r12
80006b60:	e0 a0 07 94 	rcall	80007a88 <__mcmp>
80006b64:	e0 89 00 06 	brgt	80006b70 <_dtoa_r+0xa78>
80006b68:	c1 41       	brne	80006b90 <_dtoa_r+0xa98>
80006b6a:	ed b0 00 00 	bld	r0,0x0
80006b6e:	c1 11       	brne	80006b90 <_dtoa_r+0xa98>
80006b70:	e0 40 00 39 	cp.w	r0,57
80006b74:	c0 a0       	breq	80006b88 <_dtoa_r+0xa90>
80006b76:	2f f0       	sub	r0,-1
80006b78:	c0 c8       	rjmp	80006b90 <_dtoa_r+0xa98>
80006b7a:	58 06       	cp.w	r6,0
80006b7c:	e0 8a 00 0c 	brle	80006b94 <_dtoa_r+0xa9c>
80006b80:	40 26       	lddsp	r6,sp[0x8]
80006b82:	e0 40 00 39 	cp.w	r0,57
80006b86:	c0 41       	brne	80006b8e <_dtoa_r+0xa96>
80006b88:	33 98       	mov	r8,57
80006b8a:	0a c8       	st.b	r5++,r8
80006b8c:	c6 78       	rjmp	80006c5a <_dtoa_r+0xb62>
80006b8e:	2f f0       	sub	r0,-1
80006b90:	0a c0       	st.b	r5++,r0
80006b92:	c7 58       	rjmp	80006c7c <_dtoa_r+0xb84>
80006b94:	0a c0       	st.b	r5++,r0
80006b96:	40 9a       	lddsp	r10,sp[0x24]
80006b98:	40 e9       	lddsp	r9,sp[0x38]
80006b9a:	12 3a       	cp.w	r10,r9
80006b9c:	c4 30       	breq	80006c22 <_dtoa_r+0xb2a>
80006b9e:	06 9b       	mov	r11,r3
80006ba0:	30 09       	mov	r9,0
80006ba2:	30 aa       	mov	r10,10
80006ba4:	0e 9c       	mov	r12,r7
80006ba6:	e0 a0 09 61 	rcall	80007e68 <__multadd>
80006baa:	40 48       	lddsp	r8,sp[0x10]
80006bac:	18 93       	mov	r3,r12
80006bae:	08 38       	cp.w	r8,r4
80006bb0:	c0 91       	brne	80006bc2 <_dtoa_r+0xaca>
80006bb2:	10 9b       	mov	r11,r8
80006bb4:	30 09       	mov	r9,0
80006bb6:	30 aa       	mov	r10,10
80006bb8:	0e 9c       	mov	r12,r7
80006bba:	e0 a0 09 57 	rcall	80007e68 <__multadd>
80006bbe:	50 4c       	stdsp	sp[0x10],r12
80006bc0:	c0 e8       	rjmp	80006bdc <_dtoa_r+0xae4>
80006bc2:	40 4b       	lddsp	r11,sp[0x10]
80006bc4:	30 09       	mov	r9,0
80006bc6:	30 aa       	mov	r10,10
80006bc8:	0e 9c       	mov	r12,r7
80006bca:	e0 a0 09 4f 	rcall	80007e68 <__multadd>
80006bce:	08 9b       	mov	r11,r4
80006bd0:	50 4c       	stdsp	sp[0x10],r12
80006bd2:	30 09       	mov	r9,0
80006bd4:	30 aa       	mov	r10,10
80006bd6:	0e 9c       	mov	r12,r7
80006bd8:	e0 a0 09 48 	rcall	80007e68 <__multadd>
80006bdc:	18 94       	mov	r4,r12
80006bde:	40 9c       	lddsp	r12,sp[0x24]
80006be0:	2f fc       	sub	r12,-1
80006be2:	50 9c       	stdsp	sp[0x24],r12
80006be4:	c7 9b       	rjmp	80006ad6 <_dtoa_r+0x9de>
80006be6:	30 18       	mov	r8,1
80006be8:	06 90       	mov	r0,r3
80006bea:	40 85       	lddsp	r5,sp[0x20]
80006bec:	08 93       	mov	r3,r4
80006bee:	0c 94       	mov	r4,r6
80006bf0:	10 96       	mov	r6,r8
80006bf2:	04 9b       	mov	r11,r2
80006bf4:	00 9c       	mov	r12,r0
80006bf6:	fe b0 f9 f1 	rcall	80005fd8 <quorem>
80006bfa:	2d 0c       	sub	r12,-48
80006bfc:	0a cc       	st.b	r5++,r12
80006bfe:	02 36       	cp.w	r6,r1
80006c00:	c0 a4       	brge	80006c14 <_dtoa_r+0xb1c>
80006c02:	00 9b       	mov	r11,r0
80006c04:	30 09       	mov	r9,0
80006c06:	30 aa       	mov	r10,10
80006c08:	0e 9c       	mov	r12,r7
80006c0a:	2f f6       	sub	r6,-1
80006c0c:	e0 a0 09 2e 	rcall	80007e68 <__multadd>
80006c10:	18 90       	mov	r0,r12
80006c12:	cf 0b       	rjmp	80006bf2 <_dtoa_r+0xafa>
80006c14:	08 96       	mov	r6,r4
80006c16:	30 0b       	mov	r11,0
80006c18:	06 94       	mov	r4,r3
80006c1a:	50 4b       	stdsp	sp[0x10],r11
80006c1c:	00 93       	mov	r3,r0
80006c1e:	18 90       	mov	r0,r12
80006c20:	c0 28       	rjmp	80006c24 <_dtoa_r+0xb2c>
80006c22:	40 26       	lddsp	r6,sp[0x8]
80006c24:	06 9b       	mov	r11,r3
80006c26:	30 1a       	mov	r10,1
80006c28:	0e 9c       	mov	r12,r7
80006c2a:	e0 a0 08 53 	rcall	80007cd0 <__lshift>
80006c2e:	04 9b       	mov	r11,r2
80006c30:	18 93       	mov	r3,r12
80006c32:	e0 a0 07 2b 	rcall	80007a88 <__mcmp>
80006c36:	e0 89 00 12 	brgt	80006c5a <_dtoa_r+0xb62>
80006c3a:	c1 b1       	brne	80006c70 <_dtoa_r+0xb78>
80006c3c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80006c40:	c0 d1       	brne	80006c5a <_dtoa_r+0xb62>
80006c42:	c1 78       	rjmp	80006c70 <_dtoa_r+0xb78>
80006c44:	40 89       	lddsp	r9,sp[0x20]
80006c46:	12 38       	cp.w	r8,r9
80006c48:	c0 30       	breq	80006c4e <_dtoa_r+0xb56>
80006c4a:	10 95       	mov	r5,r8
80006c4c:	c0 88       	rjmp	80006c5c <_dtoa_r+0xb64>
80006c4e:	2f f6       	sub	r6,-1
80006c50:	50 66       	stdsp	sp[0x18],r6
80006c52:	33 18       	mov	r8,49
80006c54:	40 8c       	lddsp	r12,sp[0x20]
80006c56:	b8 88       	st.b	r12[0x0],r8
80006c58:	c1 38       	rjmp	80006c7e <_dtoa_r+0xb86>
80006c5a:	33 9a       	mov	r10,57
80006c5c:	0a 98       	mov	r8,r5
80006c5e:	11 79       	ld.ub	r9,--r8
80006c60:	f4 09 18 00 	cp.b	r9,r10
80006c64:	cf 00       	breq	80006c44 <_dtoa_r+0xb4c>
80006c66:	2f f9       	sub	r9,-1
80006c68:	b0 89       	st.b	r8[0x0],r9
80006c6a:	c0 98       	rjmp	80006c7c <_dtoa_r+0xb84>
80006c6c:	10 95       	mov	r5,r8
80006c6e:	c0 28       	rjmp	80006c72 <_dtoa_r+0xb7a>
80006c70:	33 09       	mov	r9,48
80006c72:	0a 98       	mov	r8,r5
80006c74:	11 7a       	ld.ub	r10,--r8
80006c76:	f2 0a 18 00 	cp.b	r10,r9
80006c7a:	cf 90       	breq	80006c6c <_dtoa_r+0xb74>
80006c7c:	50 66       	stdsp	sp[0x18],r6
80006c7e:	04 9b       	mov	r11,r2
80006c80:	0e 9c       	mov	r12,r7
80006c82:	e0 a0 07 1d 	rcall	80007abc <_Bfree>
80006c86:	58 04       	cp.w	r4,0
80006c88:	c1 20       	breq	80006cac <_dtoa_r+0xbb4>
80006c8a:	40 4b       	lddsp	r11,sp[0x10]
80006c8c:	08 3b       	cp.w	r11,r4
80006c8e:	5f 19       	srne	r9
80006c90:	58 0b       	cp.w	r11,0
80006c92:	5f 18       	srne	r8
80006c94:	f3 e8 00 08 	and	r8,r9,r8
80006c98:	c0 40       	breq	80006ca0 <_dtoa_r+0xba8>
80006c9a:	0e 9c       	mov	r12,r7
80006c9c:	e0 a0 07 10 	rcall	80007abc <_Bfree>
80006ca0:	08 9b       	mov	r11,r4
80006ca2:	0e 9c       	mov	r12,r7
80006ca4:	e0 a0 07 0c 	rcall	80007abc <_Bfree>
80006ca8:	c0 28       	rjmp	80006cac <_dtoa_r+0xbb4>
80006caa:	50 66       	stdsp	sp[0x18],r6
80006cac:	0e 9c       	mov	r12,r7
80006cae:	06 9b       	mov	r11,r3
80006cb0:	e0 a0 07 06 	rcall	80007abc <_Bfree>
80006cb4:	30 08       	mov	r8,0
80006cb6:	aa 88       	st.b	r5[0x0],r8
80006cb8:	40 68       	lddsp	r8,sp[0x18]
80006cba:	41 5a       	lddsp	r10,sp[0x54]
80006cbc:	2f f8       	sub	r8,-1
80006cbe:	41 29       	lddsp	r9,sp[0x48]
80006cc0:	95 08       	st.w	r10[0x0],r8
80006cc2:	40 8c       	lddsp	r12,sp[0x20]
80006cc4:	58 09       	cp.w	r9,0
80006cc6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006cca:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006cce:	2e 6d       	sub	sp,-104
80006cd0:	d8 32       	popm	r0-r7,pc
80006cd2:	d7 03       	nop

80006cd4 <_fflush_r>:
80006cd4:	d4 21       	pushm	r4-r7,lr
80006cd6:	16 97       	mov	r7,r11
80006cd8:	18 96       	mov	r6,r12
80006cda:	76 48       	ld.w	r8,r11[0x10]
80006cdc:	58 08       	cp.w	r8,0
80006cde:	c7 f0       	breq	80006ddc <_fflush_r+0x108>
80006ce0:	58 0c       	cp.w	r12,0
80006ce2:	c0 50       	breq	80006cec <_fflush_r+0x18>
80006ce4:	78 68       	ld.w	r8,r12[0x18]
80006ce6:	58 08       	cp.w	r8,0
80006ce8:	c0 21       	brne	80006cec <_fflush_r+0x18>
80006cea:	cc dc       	rcall	80006e84 <__sinit>
80006cec:	fe c8 d5 44 	sub	r8,pc,-10940
80006cf0:	10 37       	cp.w	r7,r8
80006cf2:	c0 31       	brne	80006cf8 <_fflush_r+0x24>
80006cf4:	6c 07       	ld.w	r7,r6[0x0]
80006cf6:	c0 c8       	rjmp	80006d0e <_fflush_r+0x3a>
80006cf8:	fe c8 d5 30 	sub	r8,pc,-10960
80006cfc:	10 37       	cp.w	r7,r8
80006cfe:	c0 31       	brne	80006d04 <_fflush_r+0x30>
80006d00:	6c 17       	ld.w	r7,r6[0x4]
80006d02:	c0 68       	rjmp	80006d0e <_fflush_r+0x3a>
80006d04:	fe c8 d5 1c 	sub	r8,pc,-10980
80006d08:	10 37       	cp.w	r7,r8
80006d0a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80006d0e:	8e 6a       	ld.sh	r10,r7[0xc]
80006d10:	14 98       	mov	r8,r10
80006d12:	ed ba 00 03 	bld	r10,0x3
80006d16:	c4 20       	breq	80006d9a <_fflush_r+0xc6>
80006d18:	ab ba       	sbr	r10,0xb
80006d1a:	ae 6a       	st.h	r7[0xc],r10
80006d1c:	6e 18       	ld.w	r8,r7[0x4]
80006d1e:	58 08       	cp.w	r8,0
80006d20:	e0 89 00 06 	brgt	80006d2c <_fflush_r+0x58>
80006d24:	6f 08       	ld.w	r8,r7[0x40]
80006d26:	58 08       	cp.w	r8,0
80006d28:	e0 8a 00 5a 	brle	80006ddc <_fflush_r+0x108>
80006d2c:	6e b8       	ld.w	r8,r7[0x2c]
80006d2e:	58 08       	cp.w	r8,0
80006d30:	c5 60       	breq	80006ddc <_fflush_r+0x108>
80006d32:	e2 1a 10 00 	andl	r10,0x1000,COH
80006d36:	c0 30       	breq	80006d3c <_fflush_r+0x68>
80006d38:	6f 55       	ld.w	r5,r7[0x54]
80006d3a:	c0 f8       	rjmp	80006d58 <_fflush_r+0x84>
80006d3c:	30 19       	mov	r9,1
80006d3e:	6e 8b       	ld.w	r11,r7[0x20]
80006d40:	0c 9c       	mov	r12,r6
80006d42:	5d 18       	icall	r8
80006d44:	18 95       	mov	r5,r12
80006d46:	5b fc       	cp.w	r12,-1
80006d48:	c0 81       	brne	80006d58 <_fflush_r+0x84>
80006d4a:	6c 38       	ld.w	r8,r6[0xc]
80006d4c:	59 d8       	cp.w	r8,29
80006d4e:	c4 70       	breq	80006ddc <_fflush_r+0x108>
80006d50:	8e 68       	ld.sh	r8,r7[0xc]
80006d52:	a7 a8       	sbr	r8,0x6
80006d54:	ae 68       	st.h	r7[0xc],r8
80006d56:	d8 22       	popm	r4-r7,pc
80006d58:	8e 68       	ld.sh	r8,r7[0xc]
80006d5a:	ed b8 00 02 	bld	r8,0x2
80006d5e:	c0 91       	brne	80006d70 <_fflush_r+0x9c>
80006d60:	6e 18       	ld.w	r8,r7[0x4]
80006d62:	10 15       	sub	r5,r8
80006d64:	6e d8       	ld.w	r8,r7[0x34]
80006d66:	58 08       	cp.w	r8,0
80006d68:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006d6c:	eb d8 e1 15 	subne	r5,r5,r8
80006d70:	6e b8       	ld.w	r8,r7[0x2c]
80006d72:	0c 9c       	mov	r12,r6
80006d74:	30 09       	mov	r9,0
80006d76:	0a 9a       	mov	r10,r5
80006d78:	6e 8b       	ld.w	r11,r7[0x20]
80006d7a:	5d 18       	icall	r8
80006d7c:	8e 68       	ld.sh	r8,r7[0xc]
80006d7e:	0a 3c       	cp.w	r12,r5
80006d80:	c2 61       	brne	80006dcc <_fflush_r+0xf8>
80006d82:	ab d8       	cbr	r8,0xb
80006d84:	30 0c       	mov	r12,0
80006d86:	6e 49       	ld.w	r9,r7[0x10]
80006d88:	ae 68       	st.h	r7[0xc],r8
80006d8a:	8f 1c       	st.w	r7[0x4],r12
80006d8c:	8f 09       	st.w	r7[0x0],r9
80006d8e:	ed b8 00 0c 	bld	r8,0xc
80006d92:	c2 51       	brne	80006ddc <_fflush_r+0x108>
80006d94:	ef 45 00 54 	st.w	r7[84],r5
80006d98:	d8 22       	popm	r4-r7,pc
80006d9a:	6e 45       	ld.w	r5,r7[0x10]
80006d9c:	58 05       	cp.w	r5,0
80006d9e:	c1 f0       	breq	80006ddc <_fflush_r+0x108>
80006da0:	6e 04       	ld.w	r4,r7[0x0]
80006da2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80006da6:	8f 05       	st.w	r7[0x0],r5
80006da8:	f9 b8 01 00 	movne	r8,0
80006dac:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006db0:	0a 14       	sub	r4,r5
80006db2:	8f 28       	st.w	r7[0x8],r8
80006db4:	c1 18       	rjmp	80006dd6 <_fflush_r+0x102>
80006db6:	08 99       	mov	r9,r4
80006db8:	0a 9a       	mov	r10,r5
80006dba:	6e a8       	ld.w	r8,r7[0x28]
80006dbc:	6e 8b       	ld.w	r11,r7[0x20]
80006dbe:	0c 9c       	mov	r12,r6
80006dc0:	5d 18       	icall	r8
80006dc2:	18 14       	sub	r4,r12
80006dc4:	58 0c       	cp.w	r12,0
80006dc6:	e0 89 00 07 	brgt	80006dd4 <_fflush_r+0x100>
80006dca:	8e 68       	ld.sh	r8,r7[0xc]
80006dcc:	a7 a8       	sbr	r8,0x6
80006dce:	3f fc       	mov	r12,-1
80006dd0:	ae 68       	st.h	r7[0xc],r8
80006dd2:	d8 22       	popm	r4-r7,pc
80006dd4:	18 05       	add	r5,r12
80006dd6:	58 04       	cp.w	r4,0
80006dd8:	fe 99 ff ef 	brgt	80006db6 <_fflush_r+0xe2>
80006ddc:	d8 2a       	popm	r4-r7,pc,r12=0
80006dde:	d7 03       	nop

80006de0 <__sfp_lock_acquire>:
80006de0:	5e fc       	retal	r12

80006de2 <__sfp_lock_release>:
80006de2:	5e fc       	retal	r12

80006de4 <_cleanup_r>:
80006de4:	d4 01       	pushm	lr
80006de6:	fe cb e8 6a 	sub	r11,pc,-6038
80006dea:	e0 a0 02 fd 	rcall	800073e4 <_fwalk>
80006dee:	d8 02       	popm	pc

80006df0 <__sfmoreglue>:
80006df0:	d4 21       	pushm	r4-r7,lr
80006df2:	16 95       	mov	r5,r11
80006df4:	f6 06 10 5c 	mul	r6,r11,92
80006df8:	ec cb ff f4 	sub	r11,r6,-12
80006dfc:	e0 a0 03 84 	rcall	80007504 <_malloc_r>
80006e00:	18 97       	mov	r7,r12
80006e02:	c0 90       	breq	80006e14 <__sfmoreglue+0x24>
80006e04:	99 15       	st.w	r12[0x4],r5
80006e06:	30 0b       	mov	r11,0
80006e08:	2f 4c       	sub	r12,-12
80006e0a:	0c 9a       	mov	r10,r6
80006e0c:	8f 2c       	st.w	r7[0x8],r12
80006e0e:	8f 0b       	st.w	r7[0x0],r11
80006e10:	e0 a0 05 bc 	rcall	80007988 <memset>
80006e14:	0e 9c       	mov	r12,r7
80006e16:	d8 22       	popm	r4-r7,pc

80006e18 <__sfp>:
80006e18:	d4 21       	pushm	r4-r7,lr
80006e1a:	fe c8 da 5a 	sub	r8,pc,-9638
80006e1e:	18 96       	mov	r6,r12
80006e20:	70 07       	ld.w	r7,r8[0x0]
80006e22:	6e 68       	ld.w	r8,r7[0x18]
80006e24:	58 08       	cp.w	r8,0
80006e26:	c0 31       	brne	80006e2c <__sfp+0x14>
80006e28:	0e 9c       	mov	r12,r7
80006e2a:	c2 dc       	rcall	80006e84 <__sinit>
80006e2c:	ee c7 ff 28 	sub	r7,r7,-216
80006e30:	30 05       	mov	r5,0
80006e32:	6e 2c       	ld.w	r12,r7[0x8]
80006e34:	6e 18       	ld.w	r8,r7[0x4]
80006e36:	c0 68       	rjmp	80006e42 <__sfp+0x2a>
80006e38:	98 69       	ld.sh	r9,r12[0xc]
80006e3a:	ea 09 19 00 	cp.h	r9,r5
80006e3e:	c1 10       	breq	80006e60 <__sfp+0x48>
80006e40:	2a 4c       	sub	r12,-92
80006e42:	20 18       	sub	r8,1
80006e44:	cf a7       	brpl	80006e38 <__sfp+0x20>
80006e46:	6e 08       	ld.w	r8,r7[0x0]
80006e48:	58 08       	cp.w	r8,0
80006e4a:	c0 61       	brne	80006e56 <__sfp+0x3e>
80006e4c:	30 4b       	mov	r11,4
80006e4e:	0c 9c       	mov	r12,r6
80006e50:	cd 0f       	rcall	80006df0 <__sfmoreglue>
80006e52:	8f 0c       	st.w	r7[0x0],r12
80006e54:	c0 30       	breq	80006e5a <__sfp+0x42>
80006e56:	6e 07       	ld.w	r7,r7[0x0]
80006e58:	ce db       	rjmp	80006e32 <__sfp+0x1a>
80006e5a:	30 c8       	mov	r8,12
80006e5c:	8d 38       	st.w	r6[0xc],r8
80006e5e:	d8 22       	popm	r4-r7,pc
80006e60:	30 08       	mov	r8,0
80006e62:	f9 48 00 4c 	st.w	r12[76],r8
80006e66:	99 08       	st.w	r12[0x0],r8
80006e68:	99 28       	st.w	r12[0x8],r8
80006e6a:	99 18       	st.w	r12[0x4],r8
80006e6c:	99 48       	st.w	r12[0x10],r8
80006e6e:	99 58       	st.w	r12[0x14],r8
80006e70:	99 68       	st.w	r12[0x18],r8
80006e72:	99 d8       	st.w	r12[0x34],r8
80006e74:	99 e8       	st.w	r12[0x38],r8
80006e76:	f9 48 00 48 	st.w	r12[72],r8
80006e7a:	3f f8       	mov	r8,-1
80006e7c:	b8 78       	st.h	r12[0xe],r8
80006e7e:	30 18       	mov	r8,1
80006e80:	b8 68       	st.h	r12[0xc],r8
80006e82:	d8 22       	popm	r4-r7,pc

80006e84 <__sinit>:
80006e84:	d4 21       	pushm	r4-r7,lr
80006e86:	18 96       	mov	r6,r12
80006e88:	78 67       	ld.w	r7,r12[0x18]
80006e8a:	58 07       	cp.w	r7,0
80006e8c:	c4 91       	brne	80006f1e <__sinit+0x9a>
80006e8e:	fe c8 00 aa 	sub	r8,pc,170
80006e92:	30 15       	mov	r5,1
80006e94:	99 a8       	st.w	r12[0x28],r8
80006e96:	f9 47 00 d8 	st.w	r12[216],r7
80006e9a:	f9 47 00 dc 	st.w	r12[220],r7
80006e9e:	f9 47 00 e0 	st.w	r12[224],r7
80006ea2:	99 65       	st.w	r12[0x18],r5
80006ea4:	cb af       	rcall	80006e18 <__sfp>
80006ea6:	8d 0c       	st.w	r6[0x0],r12
80006ea8:	0c 9c       	mov	r12,r6
80006eaa:	cb 7f       	rcall	80006e18 <__sfp>
80006eac:	8d 1c       	st.w	r6[0x4],r12
80006eae:	0c 9c       	mov	r12,r6
80006eb0:	cb 4f       	rcall	80006e18 <__sfp>
80006eb2:	6c 09       	ld.w	r9,r6[0x0]
80006eb4:	30 48       	mov	r8,4
80006eb6:	93 07       	st.w	r9[0x0],r7
80006eb8:	b2 68       	st.h	r9[0xc],r8
80006eba:	93 17       	st.w	r9[0x4],r7
80006ebc:	93 27       	st.w	r9[0x8],r7
80006ebe:	6c 18       	ld.w	r8,r6[0x4]
80006ec0:	b2 77       	st.h	r9[0xe],r7
80006ec2:	93 47       	st.w	r9[0x10],r7
80006ec4:	93 57       	st.w	r9[0x14],r7
80006ec6:	93 67       	st.w	r9[0x18],r7
80006ec8:	93 89       	st.w	r9[0x20],r9
80006eca:	91 07       	st.w	r8[0x0],r7
80006ecc:	91 17       	st.w	r8[0x4],r7
80006ece:	91 27       	st.w	r8[0x8],r7
80006ed0:	fe ce eb e4 	sub	lr,pc,-5148
80006ed4:	fe cb ec 14 	sub	r11,pc,-5100
80006ed8:	93 9e       	st.w	r9[0x24],lr
80006eda:	93 ab       	st.w	r9[0x28],r11
80006edc:	fe ca ec 3c 	sub	r10,pc,-5060
80006ee0:	fe c4 ec 48 	sub	r4,pc,-5048
80006ee4:	93 ba       	st.w	r9[0x2c],r10
80006ee6:	93 c4       	st.w	r9[0x30],r4
80006ee8:	30 99       	mov	r9,9
80006eea:	b0 69       	st.h	r8[0xc],r9
80006eec:	b0 75       	st.h	r8[0xe],r5
80006eee:	91 c4       	st.w	r8[0x30],r4
80006ef0:	91 47       	st.w	r8[0x10],r7
80006ef2:	91 57       	st.w	r8[0x14],r7
80006ef4:	91 67       	st.w	r8[0x18],r7
80006ef6:	91 88       	st.w	r8[0x20],r8
80006ef8:	91 9e       	st.w	r8[0x24],lr
80006efa:	91 ab       	st.w	r8[0x28],r11
80006efc:	91 ba       	st.w	r8[0x2c],r10
80006efe:	8d 2c       	st.w	r6[0x8],r12
80006f00:	31 28       	mov	r8,18
80006f02:	99 07       	st.w	r12[0x0],r7
80006f04:	b8 68       	st.h	r12[0xc],r8
80006f06:	99 17       	st.w	r12[0x4],r7
80006f08:	99 27       	st.w	r12[0x8],r7
80006f0a:	30 28       	mov	r8,2
80006f0c:	b8 78       	st.h	r12[0xe],r8
80006f0e:	99 c4       	st.w	r12[0x30],r4
80006f10:	99 67       	st.w	r12[0x18],r7
80006f12:	99 9e       	st.w	r12[0x24],lr
80006f14:	99 ab       	st.w	r12[0x28],r11
80006f16:	99 ba       	st.w	r12[0x2c],r10
80006f18:	99 47       	st.w	r12[0x10],r7
80006f1a:	99 57       	st.w	r12[0x14],r7
80006f1c:	99 8c       	st.w	r12[0x20],r12
80006f1e:	d8 22       	popm	r4-r7,pc

80006f20 <_malloc_trim_r>:
80006f20:	d4 21       	pushm	r4-r7,lr
80006f22:	16 95       	mov	r5,r11
80006f24:	18 97       	mov	r7,r12
80006f26:	e0 a0 05 38 	rcall	80007996 <__malloc_lock>
80006f2a:	e0 64 01 04 	mov	r4,260
80006f2e:	68 28       	ld.w	r8,r4[0x8]
80006f30:	70 16       	ld.w	r6,r8[0x4]
80006f32:	e0 16 ff fc 	andl	r6,0xfffc
80006f36:	ec c8 ff 91 	sub	r8,r6,-111
80006f3a:	f0 05 01 05 	sub	r5,r8,r5
80006f3e:	e0 15 ff 80 	andl	r5,0xff80
80006f42:	ea c5 00 80 	sub	r5,r5,128
80006f46:	e0 45 00 7f 	cp.w	r5,127
80006f4a:	e0 8a 00 25 	brle	80006f94 <_malloc_trim_r+0x74>
80006f4e:	30 0b       	mov	r11,0
80006f50:	0e 9c       	mov	r12,r7
80006f52:	e0 a0 09 93 	rcall	80008278 <_sbrk_r>
80006f56:	68 28       	ld.w	r8,r4[0x8]
80006f58:	0c 08       	add	r8,r6
80006f5a:	10 3c       	cp.w	r12,r8
80006f5c:	c1 c1       	brne	80006f94 <_malloc_trim_r+0x74>
80006f5e:	ea 0b 11 00 	rsub	r11,r5,0
80006f62:	0e 9c       	mov	r12,r7
80006f64:	e0 a0 09 8a 	rcall	80008278 <_sbrk_r>
80006f68:	5b fc       	cp.w	r12,-1
80006f6a:	c1 91       	brne	80006f9c <_malloc_trim_r+0x7c>
80006f6c:	30 0b       	mov	r11,0
80006f6e:	0e 9c       	mov	r12,r7
80006f70:	e0 a0 09 84 	rcall	80008278 <_sbrk_r>
80006f74:	68 28       	ld.w	r8,r4[0x8]
80006f76:	f8 08 01 09 	sub	r9,r12,r8
80006f7a:	58 f9       	cp.w	r9,15
80006f7c:	e0 8a 00 0c 	brle	80006f94 <_malloc_trim_r+0x74>
80006f80:	a1 a9       	sbr	r9,0x0
80006f82:	91 19       	st.w	r8[0x4],r9
80006f84:	e0 68 05 10 	mov	r8,1296
80006f88:	70 09       	ld.w	r9,r8[0x0]
80006f8a:	e0 68 06 34 	mov	r8,1588
80006f8e:	f8 09 01 09 	sub	r9,r12,r9
80006f92:	91 09       	st.w	r8[0x0],r9
80006f94:	0e 9c       	mov	r12,r7
80006f96:	e0 a0 05 01 	rcall	80007998 <__malloc_unlock>
80006f9a:	d8 2a       	popm	r4-r7,pc,r12=0
80006f9c:	68 28       	ld.w	r8,r4[0x8]
80006f9e:	0a 16       	sub	r6,r5
80006fa0:	a1 a6       	sbr	r6,0x0
80006fa2:	91 16       	st.w	r8[0x4],r6
80006fa4:	e0 68 06 34 	mov	r8,1588
80006fa8:	70 09       	ld.w	r9,r8[0x0]
80006faa:	0a 19       	sub	r9,r5
80006fac:	0e 9c       	mov	r12,r7
80006fae:	91 09       	st.w	r8[0x0],r9
80006fb0:	e0 a0 04 f4 	rcall	80007998 <__malloc_unlock>
80006fb4:	da 2a       	popm	r4-r7,pc,r12=1
80006fb6:	d7 03       	nop

80006fb8 <_free_r>:
80006fb8:	d4 21       	pushm	r4-r7,lr
80006fba:	16 96       	mov	r6,r11
80006fbc:	18 97       	mov	r7,r12
80006fbe:	58 0b       	cp.w	r11,0
80006fc0:	e0 80 00 c0 	breq	80007140 <_free_r+0x188>
80006fc4:	e0 a0 04 e9 	rcall	80007996 <__malloc_lock>
80006fc8:	20 86       	sub	r6,8
80006fca:	e0 6a 01 04 	mov	r10,260
80006fce:	6c 18       	ld.w	r8,r6[0x4]
80006fd0:	74 2e       	ld.w	lr,r10[0x8]
80006fd2:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80006fd6:	a1 c8       	cbr	r8,0x0
80006fd8:	ec 08 00 09 	add	r9,r6,r8
80006fdc:	72 1b       	ld.w	r11,r9[0x4]
80006fde:	e0 1b ff fc 	andl	r11,0xfffc
80006fe2:	1c 39       	cp.w	r9,lr
80006fe4:	c1 e1       	brne	80007020 <_free_r+0x68>
80006fe6:	f6 08 00 08 	add	r8,r11,r8
80006fea:	58 0c       	cp.w	r12,0
80006fec:	c0 81       	brne	80006ffc <_free_r+0x44>
80006fee:	6c 09       	ld.w	r9,r6[0x0]
80006ff0:	12 16       	sub	r6,r9
80006ff2:	12 08       	add	r8,r9
80006ff4:	6c 3b       	ld.w	r11,r6[0xc]
80006ff6:	6c 29       	ld.w	r9,r6[0x8]
80006ff8:	97 29       	st.w	r11[0x8],r9
80006ffa:	93 3b       	st.w	r9[0xc],r11
80006ffc:	10 99       	mov	r9,r8
80006ffe:	95 26       	st.w	r10[0x8],r6
80007000:	a1 a9       	sbr	r9,0x0
80007002:	8d 19       	st.w	r6[0x4],r9
80007004:	e0 69 05 0c 	mov	r9,1292
80007008:	72 09       	ld.w	r9,r9[0x0]
8000700a:	12 38       	cp.w	r8,r9
8000700c:	c0 63       	brcs	80007018 <_free_r+0x60>
8000700e:	e0 68 06 30 	mov	r8,1584
80007012:	0e 9c       	mov	r12,r7
80007014:	70 0b       	ld.w	r11,r8[0x0]
80007016:	c8 5f       	rcall	80006f20 <_malloc_trim_r>
80007018:	0e 9c       	mov	r12,r7
8000701a:	e0 a0 04 bf 	rcall	80007998 <__malloc_unlock>
8000701e:	d8 22       	popm	r4-r7,pc
80007020:	93 1b       	st.w	r9[0x4],r11
80007022:	58 0c       	cp.w	r12,0
80007024:	c0 30       	breq	8000702a <_free_r+0x72>
80007026:	30 0c       	mov	r12,0
80007028:	c1 08       	rjmp	80007048 <_free_r+0x90>
8000702a:	6c 0e       	ld.w	lr,r6[0x0]
8000702c:	f4 c5 ff f8 	sub	r5,r10,-8
80007030:	1c 16       	sub	r6,lr
80007032:	1c 08       	add	r8,lr
80007034:	6c 2e       	ld.w	lr,r6[0x8]
80007036:	0a 3e       	cp.w	lr,r5
80007038:	f9 bc 00 01 	moveq	r12,1
8000703c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007040:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007044:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007048:	f2 0b 00 0e 	add	lr,r9,r11
8000704c:	7c 1e       	ld.w	lr,lr[0x4]
8000704e:	ed be 00 00 	bld	lr,0x0
80007052:	c1 40       	breq	8000707a <_free_r+0xc2>
80007054:	16 08       	add	r8,r11
80007056:	58 0c       	cp.w	r12,0
80007058:	c0 d1       	brne	80007072 <_free_r+0xba>
8000705a:	e0 6e 01 04 	mov	lr,260
8000705e:	72 2b       	ld.w	r11,r9[0x8]
80007060:	2f 8e       	sub	lr,-8
80007062:	1c 3b       	cp.w	r11,lr
80007064:	c0 71       	brne	80007072 <_free_r+0xba>
80007066:	97 36       	st.w	r11[0xc],r6
80007068:	97 26       	st.w	r11[0x8],r6
8000706a:	8d 2b       	st.w	r6[0x8],r11
8000706c:	8d 3b       	st.w	r6[0xc],r11
8000706e:	30 1c       	mov	r12,1
80007070:	c0 58       	rjmp	8000707a <_free_r+0xc2>
80007072:	72 2b       	ld.w	r11,r9[0x8]
80007074:	72 39       	ld.w	r9,r9[0xc]
80007076:	93 2b       	st.w	r9[0x8],r11
80007078:	97 39       	st.w	r11[0xc],r9
8000707a:	10 99       	mov	r9,r8
8000707c:	ec 08 09 08 	st.w	r6[r8],r8
80007080:	a1 a9       	sbr	r9,0x0
80007082:	8d 19       	st.w	r6[0x4],r9
80007084:	58 0c       	cp.w	r12,0
80007086:	c5 a1       	brne	8000713a <_free_r+0x182>
80007088:	e0 48 01 ff 	cp.w	r8,511
8000708c:	e0 8b 00 13 	brhi	800070b2 <_free_r+0xfa>
80007090:	a3 98       	lsr	r8,0x3
80007092:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007096:	72 2b       	ld.w	r11,r9[0x8]
80007098:	8d 39       	st.w	r6[0xc],r9
8000709a:	8d 2b       	st.w	r6[0x8],r11
8000709c:	97 36       	st.w	r11[0xc],r6
8000709e:	93 26       	st.w	r9[0x8],r6
800070a0:	a3 48       	asr	r8,0x2
800070a2:	74 19       	ld.w	r9,r10[0x4]
800070a4:	30 1b       	mov	r11,1
800070a6:	f6 08 09 48 	lsl	r8,r11,r8
800070aa:	f3 e8 10 08 	or	r8,r9,r8
800070ae:	95 18       	st.w	r10[0x4],r8
800070b0:	c4 58       	rjmp	8000713a <_free_r+0x182>
800070b2:	f0 0b 16 09 	lsr	r11,r8,0x9
800070b6:	58 4b       	cp.w	r11,4
800070b8:	e0 8b 00 06 	brhi	800070c4 <_free_r+0x10c>
800070bc:	f0 0b 16 06 	lsr	r11,r8,0x6
800070c0:	2c 8b       	sub	r11,-56
800070c2:	c2 08       	rjmp	80007102 <_free_r+0x14a>
800070c4:	59 4b       	cp.w	r11,20
800070c6:	e0 8b 00 04 	brhi	800070ce <_free_r+0x116>
800070ca:	2a 5b       	sub	r11,-91
800070cc:	c1 b8       	rjmp	80007102 <_free_r+0x14a>
800070ce:	e0 4b 00 54 	cp.w	r11,84
800070d2:	e0 8b 00 06 	brhi	800070de <_free_r+0x126>
800070d6:	f0 0b 16 0c 	lsr	r11,r8,0xc
800070da:	29 2b       	sub	r11,-110
800070dc:	c1 38       	rjmp	80007102 <_free_r+0x14a>
800070de:	e0 4b 01 54 	cp.w	r11,340
800070e2:	e0 8b 00 06 	brhi	800070ee <_free_r+0x136>
800070e6:	f0 0b 16 0f 	lsr	r11,r8,0xf
800070ea:	28 9b       	sub	r11,-119
800070ec:	c0 b8       	rjmp	80007102 <_free_r+0x14a>
800070ee:	e0 4b 05 54 	cp.w	r11,1364
800070f2:	e0 88 00 05 	brls	800070fc <_free_r+0x144>
800070f6:	37 eb       	mov	r11,126
800070f8:	c0 58       	rjmp	80007102 <_free_r+0x14a>
800070fa:	d7 03       	nop
800070fc:	f0 0b 16 12 	lsr	r11,r8,0x12
80007100:	28 4b       	sub	r11,-124
80007102:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80007106:	78 29       	ld.w	r9,r12[0x8]
80007108:	18 39       	cp.w	r9,r12
8000710a:	c0 e1       	brne	80007126 <_free_r+0x16e>
8000710c:	74 18       	ld.w	r8,r10[0x4]
8000710e:	a3 4b       	asr	r11,0x2
80007110:	30 1c       	mov	r12,1
80007112:	f8 0b 09 4b 	lsl	r11,r12,r11
80007116:	f1 eb 10 0b 	or	r11,r8,r11
8000711a:	12 98       	mov	r8,r9
8000711c:	95 1b       	st.w	r10[0x4],r11
8000711e:	c0 a8       	rjmp	80007132 <_free_r+0x17a>
80007120:	72 29       	ld.w	r9,r9[0x8]
80007122:	18 39       	cp.w	r9,r12
80007124:	c0 60       	breq	80007130 <_free_r+0x178>
80007126:	72 1a       	ld.w	r10,r9[0x4]
80007128:	e0 1a ff fc 	andl	r10,0xfffc
8000712c:	14 38       	cp.w	r8,r10
8000712e:	cf 93       	brcs	80007120 <_free_r+0x168>
80007130:	72 38       	ld.w	r8,r9[0xc]
80007132:	8d 38       	st.w	r6[0xc],r8
80007134:	8d 29       	st.w	r6[0x8],r9
80007136:	93 36       	st.w	r9[0xc],r6
80007138:	91 26       	st.w	r8[0x8],r6
8000713a:	0e 9c       	mov	r12,r7
8000713c:	e0 a0 04 2e 	rcall	80007998 <__malloc_unlock>
80007140:	d8 22       	popm	r4-r7,pc
80007142:	d7 03       	nop

80007144 <__sfvwrite_r>:
80007144:	d4 31       	pushm	r0-r7,lr
80007146:	20 3d       	sub	sp,12
80007148:	14 94       	mov	r4,r10
8000714a:	18 95       	mov	r5,r12
8000714c:	16 97       	mov	r7,r11
8000714e:	74 28       	ld.w	r8,r10[0x8]
80007150:	58 08       	cp.w	r8,0
80007152:	e0 80 01 45 	breq	800073dc <__sfvwrite_r+0x298>
80007156:	96 68       	ld.sh	r8,r11[0xc]
80007158:	ed b8 00 03 	bld	r8,0x3
8000715c:	c0 41       	brne	80007164 <__sfvwrite_r+0x20>
8000715e:	76 48       	ld.w	r8,r11[0x10]
80007160:	58 08       	cp.w	r8,0
80007162:	c0 c1       	brne	8000717a <__sfvwrite_r+0x36>
80007164:	0e 9b       	mov	r11,r7
80007166:	0a 9c       	mov	r12,r5
80007168:	fe b0 f6 ca 	rcall	80005efc <__swsetup_r>
8000716c:	c0 70       	breq	8000717a <__sfvwrite_r+0x36>
8000716e:	8e 68       	ld.sh	r8,r7[0xc]
80007170:	a7 a8       	sbr	r8,0x6
80007172:	ae 68       	st.h	r7[0xc],r8
80007174:	30 98       	mov	r8,9
80007176:	8b 38       	st.w	r5[0xc],r8
80007178:	c3 09       	rjmp	800073d8 <__sfvwrite_r+0x294>
8000717a:	8e 63       	ld.sh	r3,r7[0xc]
8000717c:	68 00       	ld.w	r0,r4[0x0]
8000717e:	06 96       	mov	r6,r3
80007180:	e2 16 00 02 	andl	r6,0x2,COH
80007184:	c2 10       	breq	800071c6 <__sfvwrite_r+0x82>
80007186:	30 03       	mov	r3,0
80007188:	e0 62 04 00 	mov	r2,1024
8000718c:	06 96       	mov	r6,r3
8000718e:	c0 48       	rjmp	80007196 <__sfvwrite_r+0x52>
80007190:	60 03       	ld.w	r3,r0[0x0]
80007192:	60 16       	ld.w	r6,r0[0x4]
80007194:	2f 80       	sub	r0,-8
80007196:	58 06       	cp.w	r6,0
80007198:	cf c0       	breq	80007190 <__sfvwrite_r+0x4c>
8000719a:	e0 46 04 00 	cp.w	r6,1024
8000719e:	ec 09 17 80 	movls	r9,r6
800071a2:	e4 09 17 b0 	movhi	r9,r2
800071a6:	06 9a       	mov	r10,r3
800071a8:	6e a8       	ld.w	r8,r7[0x28]
800071aa:	6e 8b       	ld.w	r11,r7[0x20]
800071ac:	0a 9c       	mov	r12,r5
800071ae:	5d 18       	icall	r8
800071b0:	18 16       	sub	r6,r12
800071b2:	58 0c       	cp.w	r12,0
800071b4:	e0 8a 01 0f 	brle	800073d2 <__sfvwrite_r+0x28e>
800071b8:	68 28       	ld.w	r8,r4[0x8]
800071ba:	18 18       	sub	r8,r12
800071bc:	89 28       	st.w	r4[0x8],r8
800071be:	e0 80 01 0f 	breq	800073dc <__sfvwrite_r+0x298>
800071c2:	18 03       	add	r3,r12
800071c4:	ce 9b       	rjmp	80007196 <__sfvwrite_r+0x52>
800071c6:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800071ca:	c0 70       	breq	800071d8 <__sfvwrite_r+0x94>
800071cc:	50 06       	stdsp	sp[0x0],r6
800071ce:	0c 93       	mov	r3,r6
800071d0:	0c 91       	mov	r1,r6
800071d2:	50 15       	stdsp	sp[0x4],r5
800071d4:	08 92       	mov	r2,r4
800071d6:	c9 e8       	rjmp	80007312 <__sfvwrite_r+0x1ce>
800071d8:	06 96       	mov	r6,r3
800071da:	08 91       	mov	r1,r4
800071dc:	c0 48       	rjmp	800071e4 <__sfvwrite_r+0xa0>
800071de:	60 03       	ld.w	r3,r0[0x0]
800071e0:	60 16       	ld.w	r6,r0[0x4]
800071e2:	2f 80       	sub	r0,-8
800071e4:	58 06       	cp.w	r6,0
800071e6:	cf c0       	breq	800071de <__sfvwrite_r+0x9a>
800071e8:	8e 68       	ld.sh	r8,r7[0xc]
800071ea:	6e 24       	ld.w	r4,r7[0x8]
800071ec:	10 99       	mov	r9,r8
800071ee:	e2 19 02 00 	andl	r9,0x200,COH
800071f2:	c5 50       	breq	8000729c <__sfvwrite_r+0x158>
800071f4:	08 36       	cp.w	r6,r4
800071f6:	c4 33       	brcs	8000727c <__sfvwrite_r+0x138>
800071f8:	10 99       	mov	r9,r8
800071fa:	e2 19 04 80 	andl	r9,0x480,COH
800071fe:	c3 f0       	breq	8000727c <__sfvwrite_r+0x138>
80007200:	6e 4b       	ld.w	r11,r7[0x10]
80007202:	6e 09       	ld.w	r9,r7[0x0]
80007204:	16 19       	sub	r9,r11
80007206:	50 09       	stdsp	sp[0x0],r9
80007208:	6e 59       	ld.w	r9,r7[0x14]
8000720a:	10 9c       	mov	r12,r8
8000720c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007210:	30 28       	mov	r8,2
80007212:	f4 08 0c 08 	divs	r8,r10,r8
80007216:	fa e9 00 04 	st.d	sp[4],r8
8000721a:	10 94       	mov	r4,r8
8000721c:	40 09       	lddsp	r9,sp[0x0]
8000721e:	e2 1c 04 00 	andl	r12,0x400,COH
80007222:	2f f9       	sub	r9,-1
80007224:	0c 09       	add	r9,r6
80007226:	12 38       	cp.w	r8,r9
80007228:	f2 04 17 30 	movlo	r4,r9
8000722c:	58 0c       	cp.w	r12,0
8000722e:	c1 00       	breq	8000724e <__sfvwrite_r+0x10a>
80007230:	08 9b       	mov	r11,r4
80007232:	0a 9c       	mov	r12,r5
80007234:	c6 8d       	rcall	80007504 <_malloc_r>
80007236:	18 92       	mov	r2,r12
80007238:	c1 40       	breq	80007260 <__sfvwrite_r+0x11c>
8000723a:	40 0a       	lddsp	r10,sp[0x0]
8000723c:	6e 4b       	ld.w	r11,r7[0x10]
8000723e:	fe b0 e4 79 	rcall	80003b30 <memcpy>
80007242:	8e 68       	ld.sh	r8,r7[0xc]
80007244:	e0 18 fb 7f 	andl	r8,0xfb7f
80007248:	a7 b8       	sbr	r8,0x7
8000724a:	ae 68       	st.h	r7[0xc],r8
8000724c:	c0 d8       	rjmp	80007266 <__sfvwrite_r+0x122>
8000724e:	08 9a       	mov	r10,r4
80007250:	0a 9c       	mov	r12,r5
80007252:	e0 a0 06 8f 	rcall	80007f70 <_realloc_r>
80007256:	18 92       	mov	r2,r12
80007258:	c0 71       	brne	80007266 <__sfvwrite_r+0x122>
8000725a:	6e 4b       	ld.w	r11,r7[0x10]
8000725c:	0a 9c       	mov	r12,r5
8000725e:	ca de       	rcall	80006fb8 <_free_r>
80007260:	30 c8       	mov	r8,12
80007262:	8b 38       	st.w	r5[0xc],r8
80007264:	cb 78       	rjmp	800073d2 <__sfvwrite_r+0x28e>
80007266:	40 0a       	lddsp	r10,sp[0x0]
80007268:	40 09       	lddsp	r9,sp[0x0]
8000726a:	e8 0a 01 0a 	sub	r10,r4,r10
8000726e:	e4 09 00 08 	add	r8,r2,r9
80007272:	8f 54       	st.w	r7[0x14],r4
80007274:	8f 2a       	st.w	r7[0x8],r10
80007276:	8f 08       	st.w	r7[0x0],r8
80007278:	8f 42       	st.w	r7[0x10],r2
8000727a:	0c 94       	mov	r4,r6
8000727c:	08 36       	cp.w	r6,r4
8000727e:	ec 04 17 30 	movlo	r4,r6
80007282:	06 9b       	mov	r11,r3
80007284:	08 9a       	mov	r10,r4
80007286:	6e 0c       	ld.w	r12,r7[0x0]
80007288:	e0 a0 03 61 	rcall	8000794a <memmove>
8000728c:	6e 08       	ld.w	r8,r7[0x0]
8000728e:	08 08       	add	r8,r4
80007290:	8f 08       	st.w	r7[0x0],r8
80007292:	6e 28       	ld.w	r8,r7[0x8]
80007294:	08 18       	sub	r8,r4
80007296:	0c 94       	mov	r4,r6
80007298:	8f 28       	st.w	r7[0x8],r8
8000729a:	c3 08       	rjmp	800072fa <__sfvwrite_r+0x1b6>
8000729c:	08 36       	cp.w	r6,r4
8000729e:	5f ba       	srhi	r10
800072a0:	6e 0c       	ld.w	r12,r7[0x0]
800072a2:	6e 48       	ld.w	r8,r7[0x10]
800072a4:	10 3c       	cp.w	r12,r8
800072a6:	5f b8       	srhi	r8
800072a8:	f5 e8 00 08 	and	r8,r10,r8
800072ac:	f2 08 18 00 	cp.b	r8,r9
800072b0:	c0 e0       	breq	800072cc <__sfvwrite_r+0x188>
800072b2:	06 9b       	mov	r11,r3
800072b4:	08 9a       	mov	r10,r4
800072b6:	e0 a0 03 4a 	rcall	8000794a <memmove>
800072ba:	6e 08       	ld.w	r8,r7[0x0]
800072bc:	08 08       	add	r8,r4
800072be:	0e 9b       	mov	r11,r7
800072c0:	8f 08       	st.w	r7[0x0],r8
800072c2:	0a 9c       	mov	r12,r5
800072c4:	fe b0 fd 08 	rcall	80006cd4 <_fflush_r>
800072c8:	c1 90       	breq	800072fa <__sfvwrite_r+0x1b6>
800072ca:	c8 48       	rjmp	800073d2 <__sfvwrite_r+0x28e>
800072cc:	6e 59       	ld.w	r9,r7[0x14]
800072ce:	12 36       	cp.w	r6,r9
800072d0:	c0 a3       	brcs	800072e4 <__sfvwrite_r+0x1a0>
800072d2:	6e a8       	ld.w	r8,r7[0x28]
800072d4:	06 9a       	mov	r10,r3
800072d6:	6e 8b       	ld.w	r11,r7[0x20]
800072d8:	0a 9c       	mov	r12,r5
800072da:	5d 18       	icall	r8
800072dc:	18 94       	mov	r4,r12
800072de:	e0 89 00 0e 	brgt	800072fa <__sfvwrite_r+0x1b6>
800072e2:	c7 88       	rjmp	800073d2 <__sfvwrite_r+0x28e>
800072e4:	0c 9a       	mov	r10,r6
800072e6:	06 9b       	mov	r11,r3
800072e8:	e0 a0 03 31 	rcall	8000794a <memmove>
800072ec:	6e 08       	ld.w	r8,r7[0x0]
800072ee:	0c 08       	add	r8,r6
800072f0:	0c 94       	mov	r4,r6
800072f2:	8f 08       	st.w	r7[0x0],r8
800072f4:	6e 28       	ld.w	r8,r7[0x8]
800072f6:	0c 18       	sub	r8,r6
800072f8:	8f 28       	st.w	r7[0x8],r8
800072fa:	62 28       	ld.w	r8,r1[0x8]
800072fc:	08 18       	sub	r8,r4
800072fe:	83 28       	st.w	r1[0x8],r8
80007300:	c6 e0       	breq	800073dc <__sfvwrite_r+0x298>
80007302:	08 16       	sub	r6,r4
80007304:	08 03       	add	r3,r4
80007306:	c6 fb       	rjmp	800071e4 <__sfvwrite_r+0xa0>
80007308:	60 03       	ld.w	r3,r0[0x0]
8000730a:	60 11       	ld.w	r1,r0[0x4]
8000730c:	30 08       	mov	r8,0
8000730e:	2f 80       	sub	r0,-8
80007310:	50 08       	stdsp	sp[0x0],r8
80007312:	58 01       	cp.w	r1,0
80007314:	cf a0       	breq	80007308 <__sfvwrite_r+0x1c4>
80007316:	40 0a       	lddsp	r10,sp[0x0]
80007318:	58 0a       	cp.w	r10,0
8000731a:	c1 51       	brne	80007344 <__sfvwrite_r+0x200>
8000731c:	e2 c6 ff ff 	sub	r6,r1,-1
80007320:	02 9a       	mov	r10,r1
80007322:	30 ab       	mov	r11,10
80007324:	06 9c       	mov	r12,r3
80007326:	e0 a0 03 07 	rcall	80007934 <memchr>
8000732a:	f8 c8 ff ff 	sub	r8,r12,-1
8000732e:	58 0c       	cp.w	r12,0
80007330:	f1 d3 e1 16 	subne	r6,r8,r3
80007334:	f9 b9 01 01 	movne	r9,1
80007338:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000733c:	f9 b8 00 01 	moveq	r8,1
80007340:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007344:	02 36       	cp.w	r6,r1
80007346:	ec 04 17 80 	movls	r4,r6
8000734a:	e2 04 17 b0 	movhi	r4,r1
8000734e:	6e 59       	ld.w	r9,r7[0x14]
80007350:	6e 25       	ld.w	r5,r7[0x8]
80007352:	f2 05 00 05 	add	r5,r9,r5
80007356:	0a 34       	cp.w	r4,r5
80007358:	5f 9a       	srgt	r10
8000735a:	6e 0c       	ld.w	r12,r7[0x0]
8000735c:	6e 48       	ld.w	r8,r7[0x10]
8000735e:	10 3c       	cp.w	r12,r8
80007360:	5f b8       	srhi	r8
80007362:	f5 e8 00 08 	and	r8,r10,r8
80007366:	30 0a       	mov	r10,0
80007368:	f4 08 18 00 	cp.b	r8,r10
8000736c:	c0 e0       	breq	80007388 <__sfvwrite_r+0x244>
8000736e:	06 9b       	mov	r11,r3
80007370:	0a 9a       	mov	r10,r5
80007372:	e0 a0 02 ec 	rcall	8000794a <memmove>
80007376:	6e 08       	ld.w	r8,r7[0x0]
80007378:	0a 08       	add	r8,r5
8000737a:	0e 9b       	mov	r11,r7
8000737c:	8f 08       	st.w	r7[0x0],r8
8000737e:	40 1c       	lddsp	r12,sp[0x4]
80007380:	fe b0 fc aa 	rcall	80006cd4 <_fflush_r>
80007384:	c1 80       	breq	800073b4 <__sfvwrite_r+0x270>
80007386:	c2 68       	rjmp	800073d2 <__sfvwrite_r+0x28e>
80007388:	12 34       	cp.w	r4,r9
8000738a:	c0 a5       	brlt	8000739e <__sfvwrite_r+0x25a>
8000738c:	6e a8       	ld.w	r8,r7[0x28]
8000738e:	06 9a       	mov	r10,r3
80007390:	6e 8b       	ld.w	r11,r7[0x20]
80007392:	40 1c       	lddsp	r12,sp[0x4]
80007394:	5d 18       	icall	r8
80007396:	18 95       	mov	r5,r12
80007398:	e0 89 00 0e 	brgt	800073b4 <__sfvwrite_r+0x270>
8000739c:	c1 b8       	rjmp	800073d2 <__sfvwrite_r+0x28e>
8000739e:	08 9a       	mov	r10,r4
800073a0:	06 9b       	mov	r11,r3
800073a2:	e0 a0 02 d4 	rcall	8000794a <memmove>
800073a6:	6e 08       	ld.w	r8,r7[0x0]
800073a8:	08 08       	add	r8,r4
800073aa:	08 95       	mov	r5,r4
800073ac:	8f 08       	st.w	r7[0x0],r8
800073ae:	6e 28       	ld.w	r8,r7[0x8]
800073b0:	08 18       	sub	r8,r4
800073b2:	8f 28       	st.w	r7[0x8],r8
800073b4:	0a 16       	sub	r6,r5
800073b6:	c0 71       	brne	800073c4 <__sfvwrite_r+0x280>
800073b8:	0e 9b       	mov	r11,r7
800073ba:	40 1c       	lddsp	r12,sp[0x4]
800073bc:	fe b0 fc 8c 	rcall	80006cd4 <_fflush_r>
800073c0:	c0 91       	brne	800073d2 <__sfvwrite_r+0x28e>
800073c2:	50 06       	stdsp	sp[0x0],r6
800073c4:	64 28       	ld.w	r8,r2[0x8]
800073c6:	0a 18       	sub	r8,r5
800073c8:	85 28       	st.w	r2[0x8],r8
800073ca:	c0 90       	breq	800073dc <__sfvwrite_r+0x298>
800073cc:	0a 11       	sub	r1,r5
800073ce:	0a 03       	add	r3,r5
800073d0:	ca 1b       	rjmp	80007312 <__sfvwrite_r+0x1ce>
800073d2:	8e 68       	ld.sh	r8,r7[0xc]
800073d4:	a7 a8       	sbr	r8,0x6
800073d6:	ae 68       	st.h	r7[0xc],r8
800073d8:	3f fc       	mov	r12,-1
800073da:	c0 28       	rjmp	800073de <__sfvwrite_r+0x29a>
800073dc:	30 0c       	mov	r12,0
800073de:	2f dd       	sub	sp,-12
800073e0:	d8 32       	popm	r0-r7,pc
800073e2:	d7 03       	nop

800073e4 <_fwalk>:
800073e4:	d4 31       	pushm	r0-r7,lr
800073e6:	30 05       	mov	r5,0
800073e8:	16 91       	mov	r1,r11
800073ea:	f8 c7 ff 28 	sub	r7,r12,-216
800073ee:	0a 92       	mov	r2,r5
800073f0:	fe b0 fc f8 	rcall	80006de0 <__sfp_lock_acquire>
800073f4:	3f f3       	mov	r3,-1
800073f6:	c1 68       	rjmp	80007422 <_fwalk+0x3e>
800073f8:	6e 26       	ld.w	r6,r7[0x8]
800073fa:	6e 14       	ld.w	r4,r7[0x4]
800073fc:	2f 46       	sub	r6,-12
800073fe:	c0 c8       	rjmp	80007416 <_fwalk+0x32>
80007400:	8c 08       	ld.sh	r8,r6[0x0]
80007402:	e4 08 19 00 	cp.h	r8,r2
80007406:	c0 70       	breq	80007414 <_fwalk+0x30>
80007408:	8c 18       	ld.sh	r8,r6[0x2]
8000740a:	e6 08 19 00 	cp.h	r8,r3
8000740e:	c0 30       	breq	80007414 <_fwalk+0x30>
80007410:	5d 11       	icall	r1
80007412:	18 45       	or	r5,r12
80007414:	2a 46       	sub	r6,-92
80007416:	20 14       	sub	r4,1
80007418:	ec cc 00 0c 	sub	r12,r6,12
8000741c:	58 04       	cp.w	r4,0
8000741e:	cf 14       	brge	80007400 <_fwalk+0x1c>
80007420:	6e 07       	ld.w	r7,r7[0x0]
80007422:	58 07       	cp.w	r7,0
80007424:	ce a1       	brne	800073f8 <_fwalk+0x14>
80007426:	fe b0 fc de 	rcall	80006de2 <__sfp_lock_release>
8000742a:	0a 9c       	mov	r12,r5
8000742c:	d8 32       	popm	r0-r7,pc
8000742e:	d7 03       	nop

80007430 <_localeconv_r>:
80007430:	fe cc dc 28 	sub	r12,pc,-9176
80007434:	5e fc       	retal	r12
80007436:	d7 03       	nop

80007438 <__smakebuf_r>:
80007438:	d4 21       	pushm	r4-r7,lr
8000743a:	20 fd       	sub	sp,60
8000743c:	96 68       	ld.sh	r8,r11[0xc]
8000743e:	16 97       	mov	r7,r11
80007440:	18 96       	mov	r6,r12
80007442:	e2 18 00 02 	andl	r8,0x2,COH
80007446:	c3 c1       	brne	800074be <__smakebuf_r+0x86>
80007448:	96 7b       	ld.sh	r11,r11[0xe]
8000744a:	f0 0b 19 00 	cp.h	r11,r8
8000744e:	c0 55       	brlt	80007458 <__smakebuf_r+0x20>
80007450:	1a 9a       	mov	r10,sp
80007452:	e0 a0 08 9d 	rcall	8000858c <_fstat_r>
80007456:	c0 f4       	brge	80007474 <__smakebuf_r+0x3c>
80007458:	8e 65       	ld.sh	r5,r7[0xc]
8000745a:	0a 98       	mov	r8,r5
8000745c:	ab b8       	sbr	r8,0xb
8000745e:	e2 15 00 80 	andl	r5,0x80,COH
80007462:	ae 68       	st.h	r7[0xc],r8
80007464:	30 04       	mov	r4,0
80007466:	e0 68 04 00 	mov	r8,1024
8000746a:	f9 b5 01 40 	movne	r5,64
8000746e:	f0 05 17 00 	moveq	r5,r8
80007472:	c1 c8       	rjmp	800074aa <__smakebuf_r+0x72>
80007474:	40 18       	lddsp	r8,sp[0x4]
80007476:	e2 18 f0 00 	andl	r8,0xf000,COH
8000747a:	e0 48 20 00 	cp.w	r8,8192
8000747e:	5f 04       	sreq	r4
80007480:	e0 48 80 00 	cp.w	r8,32768
80007484:	c0 e1       	brne	800074a0 <__smakebuf_r+0x68>
80007486:	6e b9       	ld.w	r9,r7[0x2c]
80007488:	fe c8 f1 e8 	sub	r8,pc,-3608
8000748c:	10 39       	cp.w	r9,r8
8000748e:	c0 91       	brne	800074a0 <__smakebuf_r+0x68>
80007490:	8e 68       	ld.sh	r8,r7[0xc]
80007492:	e0 65 04 00 	mov	r5,1024
80007496:	ab a8       	sbr	r8,0xa
80007498:	ef 45 00 50 	st.w	r7[80],r5
8000749c:	ae 68       	st.h	r7[0xc],r8
8000749e:	c0 68       	rjmp	800074aa <__smakebuf_r+0x72>
800074a0:	8e 68       	ld.sh	r8,r7[0xc]
800074a2:	e0 65 04 00 	mov	r5,1024
800074a6:	ab b8       	sbr	r8,0xb
800074a8:	ae 68       	st.h	r7[0xc],r8
800074aa:	0a 9b       	mov	r11,r5
800074ac:	0c 9c       	mov	r12,r6
800074ae:	c2 bc       	rcall	80007504 <_malloc_r>
800074b0:	8e 68       	ld.sh	r8,r7[0xc]
800074b2:	c0 d1       	brne	800074cc <__smakebuf_r+0x94>
800074b4:	ed b8 00 09 	bld	r8,0x9
800074b8:	c1 b0       	breq	800074ee <__smakebuf_r+0xb6>
800074ba:	a1 b8       	sbr	r8,0x1
800074bc:	ae 68       	st.h	r7[0xc],r8
800074be:	ee c8 ff b9 	sub	r8,r7,-71
800074c2:	8f 48       	st.w	r7[0x10],r8
800074c4:	8f 08       	st.w	r7[0x0],r8
800074c6:	30 18       	mov	r8,1
800074c8:	8f 58       	st.w	r7[0x14],r8
800074ca:	c1 28       	rjmp	800074ee <__smakebuf_r+0xb6>
800074cc:	a7 b8       	sbr	r8,0x7
800074ce:	8f 4c       	st.w	r7[0x10],r12
800074d0:	ae 68       	st.h	r7[0xc],r8
800074d2:	8f 55       	st.w	r7[0x14],r5
800074d4:	fe c8 06 f0 	sub	r8,pc,1776
800074d8:	8f 0c       	st.w	r7[0x0],r12
800074da:	8d a8       	st.w	r6[0x28],r8
800074dc:	58 04       	cp.w	r4,0
800074de:	c0 80       	breq	800074ee <__smakebuf_r+0xb6>
800074e0:	8e 7c       	ld.sh	r12,r7[0xe]
800074e2:	e0 a0 07 47 	rcall	80008370 <isatty>
800074e6:	c0 40       	breq	800074ee <__smakebuf_r+0xb6>
800074e8:	8e 68       	ld.sh	r8,r7[0xc]
800074ea:	a1 a8       	sbr	r8,0x0
800074ec:	ae 68       	st.h	r7[0xc],r8
800074ee:	2f 1d       	sub	sp,-60
800074f0:	d8 22       	popm	r4-r7,pc
800074f2:	d7 03       	nop

800074f4 <malloc>:
800074f4:	d4 01       	pushm	lr
800074f6:	e0 68 01 00 	mov	r8,256
800074fa:	18 9b       	mov	r11,r12
800074fc:	70 0c       	ld.w	r12,r8[0x0]
800074fe:	c0 3c       	rcall	80007504 <_malloc_r>
80007500:	d8 02       	popm	pc
80007502:	d7 03       	nop

80007504 <_malloc_r>:
80007504:	d4 31       	pushm	r0-r7,lr
80007506:	f6 c8 ff f5 	sub	r8,r11,-11
8000750a:	18 95       	mov	r5,r12
8000750c:	10 97       	mov	r7,r8
8000750e:	e0 17 ff f8 	andl	r7,0xfff8
80007512:	59 68       	cp.w	r8,22
80007514:	f9 b7 08 10 	movls	r7,16
80007518:	16 37       	cp.w	r7,r11
8000751a:	5f 38       	srlo	r8
8000751c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007520:	c0 50       	breq	8000752a <_malloc_r+0x26>
80007522:	30 c8       	mov	r8,12
80007524:	99 38       	st.w	r12[0xc],r8
80007526:	e0 8f 01 f7 	bral	80007914 <_malloc_r+0x410>
8000752a:	e0 a0 02 36 	rcall	80007996 <__malloc_lock>
8000752e:	e0 47 01 f7 	cp.w	r7,503
80007532:	e0 8b 00 1d 	brhi	8000756c <_malloc_r+0x68>
80007536:	ee 03 16 03 	lsr	r3,r7,0x3
8000753a:	e0 68 01 04 	mov	r8,260
8000753e:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007542:	70 36       	ld.w	r6,r8[0xc]
80007544:	10 36       	cp.w	r6,r8
80007546:	c0 61       	brne	80007552 <_malloc_r+0x4e>
80007548:	ec c8 ff f8 	sub	r8,r6,-8
8000754c:	70 36       	ld.w	r6,r8[0xc]
8000754e:	10 36       	cp.w	r6,r8
80007550:	c0 c0       	breq	80007568 <_malloc_r+0x64>
80007552:	6c 18       	ld.w	r8,r6[0x4]
80007554:	e0 18 ff fc 	andl	r8,0xfffc
80007558:	6c 3a       	ld.w	r10,r6[0xc]
8000755a:	ec 08 00 09 	add	r9,r6,r8
8000755e:	0a 9c       	mov	r12,r5
80007560:	6c 28       	ld.w	r8,r6[0x8]
80007562:	95 28       	st.w	r10[0x8],r8
80007564:	91 3a       	st.w	r8[0xc],r10
80007566:	c4 78       	rjmp	800075f4 <_malloc_r+0xf0>
80007568:	2f e3       	sub	r3,-2
8000756a:	c4 d8       	rjmp	80007604 <_malloc_r+0x100>
8000756c:	ee 03 16 09 	lsr	r3,r7,0x9
80007570:	c0 41       	brne	80007578 <_malloc_r+0x74>
80007572:	ee 03 16 03 	lsr	r3,r7,0x3
80007576:	c2 68       	rjmp	800075c2 <_malloc_r+0xbe>
80007578:	58 43       	cp.w	r3,4
8000757a:	e0 8b 00 06 	brhi	80007586 <_malloc_r+0x82>
8000757e:	ee 03 16 06 	lsr	r3,r7,0x6
80007582:	2c 83       	sub	r3,-56
80007584:	c1 f8       	rjmp	800075c2 <_malloc_r+0xbe>
80007586:	59 43       	cp.w	r3,20
80007588:	e0 8b 00 04 	brhi	80007590 <_malloc_r+0x8c>
8000758c:	2a 53       	sub	r3,-91
8000758e:	c1 a8       	rjmp	800075c2 <_malloc_r+0xbe>
80007590:	e0 43 00 54 	cp.w	r3,84
80007594:	e0 8b 00 06 	brhi	800075a0 <_malloc_r+0x9c>
80007598:	ee 03 16 0c 	lsr	r3,r7,0xc
8000759c:	29 23       	sub	r3,-110
8000759e:	c1 28       	rjmp	800075c2 <_malloc_r+0xbe>
800075a0:	e0 43 01 54 	cp.w	r3,340
800075a4:	e0 8b 00 06 	brhi	800075b0 <_malloc_r+0xac>
800075a8:	ee 03 16 0f 	lsr	r3,r7,0xf
800075ac:	28 93       	sub	r3,-119
800075ae:	c0 a8       	rjmp	800075c2 <_malloc_r+0xbe>
800075b0:	e0 43 05 54 	cp.w	r3,1364
800075b4:	e0 88 00 04 	brls	800075bc <_malloc_r+0xb8>
800075b8:	37 e3       	mov	r3,126
800075ba:	c0 48       	rjmp	800075c2 <_malloc_r+0xbe>
800075bc:	ee 03 16 12 	lsr	r3,r7,0x12
800075c0:	28 43       	sub	r3,-124
800075c2:	e0 6a 01 04 	mov	r10,260
800075c6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800075ca:	74 36       	ld.w	r6,r10[0xc]
800075cc:	c1 98       	rjmp	800075fe <_malloc_r+0xfa>
800075ce:	6c 19       	ld.w	r9,r6[0x4]
800075d0:	e0 19 ff fc 	andl	r9,0xfffc
800075d4:	f2 07 01 0b 	sub	r11,r9,r7
800075d8:	58 fb       	cp.w	r11,15
800075da:	e0 8a 00 04 	brle	800075e2 <_malloc_r+0xde>
800075de:	20 13       	sub	r3,1
800075e0:	c1 18       	rjmp	80007602 <_malloc_r+0xfe>
800075e2:	6c 38       	ld.w	r8,r6[0xc]
800075e4:	58 0b       	cp.w	r11,0
800075e6:	c0 b5       	brlt	800075fc <_malloc_r+0xf8>
800075e8:	6c 2a       	ld.w	r10,r6[0x8]
800075ea:	ec 09 00 09 	add	r9,r6,r9
800075ee:	0a 9c       	mov	r12,r5
800075f0:	91 2a       	st.w	r8[0x8],r10
800075f2:	95 38       	st.w	r10[0xc],r8
800075f4:	72 18       	ld.w	r8,r9[0x4]
800075f6:	a1 a8       	sbr	r8,0x0
800075f8:	93 18       	st.w	r9[0x4],r8
800075fa:	cb c8       	rjmp	80007772 <_malloc_r+0x26e>
800075fc:	10 96       	mov	r6,r8
800075fe:	14 36       	cp.w	r6,r10
80007600:	ce 71       	brne	800075ce <_malloc_r+0xca>
80007602:	2f f3       	sub	r3,-1
80007604:	e0 6a 01 04 	mov	r10,260
80007608:	f4 cc ff f8 	sub	r12,r10,-8
8000760c:	78 26       	ld.w	r6,r12[0x8]
8000760e:	18 36       	cp.w	r6,r12
80007610:	c6 c0       	breq	800076e8 <_malloc_r+0x1e4>
80007612:	6c 19       	ld.w	r9,r6[0x4]
80007614:	e0 19 ff fc 	andl	r9,0xfffc
80007618:	f2 07 01 08 	sub	r8,r9,r7
8000761c:	58 f8       	cp.w	r8,15
8000761e:	e0 89 00 8f 	brgt	8000773c <_malloc_r+0x238>
80007622:	99 3c       	st.w	r12[0xc],r12
80007624:	99 2c       	st.w	r12[0x8],r12
80007626:	58 08       	cp.w	r8,0
80007628:	c0 55       	brlt	80007632 <_malloc_r+0x12e>
8000762a:	ec 09 00 09 	add	r9,r6,r9
8000762e:	0a 9c       	mov	r12,r5
80007630:	ce 2b       	rjmp	800075f4 <_malloc_r+0xf0>
80007632:	e0 49 01 ff 	cp.w	r9,511
80007636:	e0 8b 00 13 	brhi	8000765c <_malloc_r+0x158>
8000763a:	a3 99       	lsr	r9,0x3
8000763c:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007640:	70 2b       	ld.w	r11,r8[0x8]
80007642:	8d 38       	st.w	r6[0xc],r8
80007644:	8d 2b       	st.w	r6[0x8],r11
80007646:	97 36       	st.w	r11[0xc],r6
80007648:	91 26       	st.w	r8[0x8],r6
8000764a:	a3 49       	asr	r9,0x2
8000764c:	74 18       	ld.w	r8,r10[0x4]
8000764e:	30 1b       	mov	r11,1
80007650:	f6 09 09 49 	lsl	r9,r11,r9
80007654:	f1 e9 10 09 	or	r9,r8,r9
80007658:	95 19       	st.w	r10[0x4],r9
8000765a:	c4 78       	rjmp	800076e8 <_malloc_r+0x1e4>
8000765c:	f2 0a 16 09 	lsr	r10,r9,0x9
80007660:	58 4a       	cp.w	r10,4
80007662:	e0 8b 00 07 	brhi	80007670 <_malloc_r+0x16c>
80007666:	f2 0a 16 06 	lsr	r10,r9,0x6
8000766a:	2c 8a       	sub	r10,-56
8000766c:	c2 08       	rjmp	800076ac <_malloc_r+0x1a8>
8000766e:	d7 03       	nop
80007670:	59 4a       	cp.w	r10,20
80007672:	e0 8b 00 04 	brhi	8000767a <_malloc_r+0x176>
80007676:	2a 5a       	sub	r10,-91
80007678:	c1 a8       	rjmp	800076ac <_malloc_r+0x1a8>
8000767a:	e0 4a 00 54 	cp.w	r10,84
8000767e:	e0 8b 00 06 	brhi	8000768a <_malloc_r+0x186>
80007682:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007686:	29 2a       	sub	r10,-110
80007688:	c1 28       	rjmp	800076ac <_malloc_r+0x1a8>
8000768a:	e0 4a 01 54 	cp.w	r10,340
8000768e:	e0 8b 00 06 	brhi	8000769a <_malloc_r+0x196>
80007692:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007696:	28 9a       	sub	r10,-119
80007698:	c0 a8       	rjmp	800076ac <_malloc_r+0x1a8>
8000769a:	e0 4a 05 54 	cp.w	r10,1364
8000769e:	e0 88 00 04 	brls	800076a6 <_malloc_r+0x1a2>
800076a2:	37 ea       	mov	r10,126
800076a4:	c0 48       	rjmp	800076ac <_malloc_r+0x1a8>
800076a6:	f2 0a 16 12 	lsr	r10,r9,0x12
800076aa:	28 4a       	sub	r10,-124
800076ac:	e0 6b 01 04 	mov	r11,260
800076b0:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800076b4:	68 28       	ld.w	r8,r4[0x8]
800076b6:	08 38       	cp.w	r8,r4
800076b8:	c0 e1       	brne	800076d4 <_malloc_r+0x1d0>
800076ba:	76 19       	ld.w	r9,r11[0x4]
800076bc:	a3 4a       	asr	r10,0x2
800076be:	30 1e       	mov	lr,1
800076c0:	fc 0a 09 4a 	lsl	r10,lr,r10
800076c4:	f3 ea 10 0a 	or	r10,r9,r10
800076c8:	10 99       	mov	r9,r8
800076ca:	97 1a       	st.w	r11[0x4],r10
800076cc:	c0 a8       	rjmp	800076e0 <_malloc_r+0x1dc>
800076ce:	70 28       	ld.w	r8,r8[0x8]
800076d0:	08 38       	cp.w	r8,r4
800076d2:	c0 60       	breq	800076de <_malloc_r+0x1da>
800076d4:	70 1a       	ld.w	r10,r8[0x4]
800076d6:	e0 1a ff fc 	andl	r10,0xfffc
800076da:	14 39       	cp.w	r9,r10
800076dc:	cf 93       	brcs	800076ce <_malloc_r+0x1ca>
800076de:	70 39       	ld.w	r9,r8[0xc]
800076e0:	8d 39       	st.w	r6[0xc],r9
800076e2:	8d 28       	st.w	r6[0x8],r8
800076e4:	91 36       	st.w	r8[0xc],r6
800076e6:	93 26       	st.w	r9[0x8],r6
800076e8:	e6 08 14 02 	asr	r8,r3,0x2
800076ec:	30 1b       	mov	r11,1
800076ee:	e0 64 01 04 	mov	r4,260
800076f2:	f6 08 09 4b 	lsl	r11,r11,r8
800076f6:	68 18       	ld.w	r8,r4[0x4]
800076f8:	10 3b       	cp.w	r11,r8
800076fa:	e0 8b 00 69 	brhi	800077cc <_malloc_r+0x2c8>
800076fe:	f7 e8 00 09 	and	r9,r11,r8
80007702:	c0 b1       	brne	80007718 <_malloc_r+0x214>
80007704:	e0 13 ff fc 	andl	r3,0xfffc
80007708:	a1 7b       	lsl	r11,0x1
8000770a:	2f c3       	sub	r3,-4
8000770c:	c0 38       	rjmp	80007712 <_malloc_r+0x20e>
8000770e:	2f c3       	sub	r3,-4
80007710:	a1 7b       	lsl	r11,0x1
80007712:	f7 e8 00 09 	and	r9,r11,r8
80007716:	cf c0       	breq	8000770e <_malloc_r+0x20a>
80007718:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000771c:	06 92       	mov	r2,r3
8000771e:	1c 91       	mov	r1,lr
80007720:	62 36       	ld.w	r6,r1[0xc]
80007722:	c2 d8       	rjmp	8000777c <_malloc_r+0x278>
80007724:	6c 1a       	ld.w	r10,r6[0x4]
80007726:	e0 1a ff fc 	andl	r10,0xfffc
8000772a:	f4 07 01 08 	sub	r8,r10,r7
8000772e:	58 f8       	cp.w	r8,15
80007730:	e0 8a 00 15 	brle	8000775a <_malloc_r+0x256>
80007734:	6c 3a       	ld.w	r10,r6[0xc]
80007736:	6c 29       	ld.w	r9,r6[0x8]
80007738:	95 29       	st.w	r10[0x8],r9
8000773a:	93 3a       	st.w	r9[0xc],r10
8000773c:	0e 99       	mov	r9,r7
8000773e:	ec 07 00 07 	add	r7,r6,r7
80007742:	a1 a9       	sbr	r9,0x0
80007744:	99 37       	st.w	r12[0xc],r7
80007746:	99 27       	st.w	r12[0x8],r7
80007748:	8d 19       	st.w	r6[0x4],r9
8000774a:	ee 08 09 08 	st.w	r7[r8],r8
8000774e:	8f 2c       	st.w	r7[0x8],r12
80007750:	8f 3c       	st.w	r7[0xc],r12
80007752:	a1 a8       	sbr	r8,0x0
80007754:	0a 9c       	mov	r12,r5
80007756:	8f 18       	st.w	r7[0x4],r8
80007758:	c0 d8       	rjmp	80007772 <_malloc_r+0x26e>
8000775a:	6c 39       	ld.w	r9,r6[0xc]
8000775c:	58 08       	cp.w	r8,0
8000775e:	c0 e5       	brlt	8000777a <_malloc_r+0x276>
80007760:	ec 0a 00 0a 	add	r10,r6,r10
80007764:	74 18       	ld.w	r8,r10[0x4]
80007766:	a1 a8       	sbr	r8,0x0
80007768:	0a 9c       	mov	r12,r5
8000776a:	95 18       	st.w	r10[0x4],r8
8000776c:	6c 28       	ld.w	r8,r6[0x8]
8000776e:	93 28       	st.w	r9[0x8],r8
80007770:	91 39       	st.w	r8[0xc],r9
80007772:	c1 3d       	rcall	80007998 <__malloc_unlock>
80007774:	ec cc ff f8 	sub	r12,r6,-8
80007778:	d8 32       	popm	r0-r7,pc
8000777a:	12 96       	mov	r6,r9
8000777c:	02 36       	cp.w	r6,r1
8000777e:	cd 31       	brne	80007724 <_malloc_r+0x220>
80007780:	2f f2       	sub	r2,-1
80007782:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007786:	c0 30       	breq	8000778c <_malloc_r+0x288>
80007788:	2f 81       	sub	r1,-8
8000778a:	cc bb       	rjmp	80007720 <_malloc_r+0x21c>
8000778c:	1c 98       	mov	r8,lr
8000778e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007792:	c0 81       	brne	800077a2 <_malloc_r+0x29e>
80007794:	68 19       	ld.w	r9,r4[0x4]
80007796:	f6 08 11 ff 	rsub	r8,r11,-1
8000779a:	f3 e8 00 08 	and	r8,r9,r8
8000779e:	89 18       	st.w	r4[0x4],r8
800077a0:	c0 78       	rjmp	800077ae <_malloc_r+0x2aa>
800077a2:	f0 c9 00 08 	sub	r9,r8,8
800077a6:	20 13       	sub	r3,1
800077a8:	70 08       	ld.w	r8,r8[0x0]
800077aa:	12 38       	cp.w	r8,r9
800077ac:	cf 10       	breq	8000778e <_malloc_r+0x28a>
800077ae:	a1 7b       	lsl	r11,0x1
800077b0:	68 18       	ld.w	r8,r4[0x4]
800077b2:	10 3b       	cp.w	r11,r8
800077b4:	e0 8b 00 0c 	brhi	800077cc <_malloc_r+0x2c8>
800077b8:	58 0b       	cp.w	r11,0
800077ba:	c0 90       	breq	800077cc <_malloc_r+0x2c8>
800077bc:	04 93       	mov	r3,r2
800077be:	c0 38       	rjmp	800077c4 <_malloc_r+0x2c0>
800077c0:	2f c3       	sub	r3,-4
800077c2:	a1 7b       	lsl	r11,0x1
800077c4:	f7 e8 00 09 	and	r9,r11,r8
800077c8:	ca 81       	brne	80007718 <_malloc_r+0x214>
800077ca:	cf bb       	rjmp	800077c0 <_malloc_r+0x2bc>
800077cc:	68 23       	ld.w	r3,r4[0x8]
800077ce:	66 12       	ld.w	r2,r3[0x4]
800077d0:	e0 12 ff fc 	andl	r2,0xfffc
800077d4:	0e 32       	cp.w	r2,r7
800077d6:	5f 39       	srlo	r9
800077d8:	e4 07 01 08 	sub	r8,r2,r7
800077dc:	58 f8       	cp.w	r8,15
800077de:	5f aa       	srle	r10
800077e0:	f5 e9 10 09 	or	r9,r10,r9
800077e4:	e0 80 00 9a 	breq	80007918 <_malloc_r+0x414>
800077e8:	e0 68 06 30 	mov	r8,1584
800077ec:	70 01       	ld.w	r1,r8[0x0]
800077ee:	e0 68 05 10 	mov	r8,1296
800077f2:	2f 01       	sub	r1,-16
800077f4:	70 08       	ld.w	r8,r8[0x0]
800077f6:	0e 01       	add	r1,r7
800077f8:	5b f8       	cp.w	r8,-1
800077fa:	c0 40       	breq	80007802 <_malloc_r+0x2fe>
800077fc:	28 11       	sub	r1,-127
800077fe:	e0 11 ff 80 	andl	r1,0xff80
80007802:	02 9b       	mov	r11,r1
80007804:	0a 9c       	mov	r12,r5
80007806:	e0 a0 05 39 	rcall	80008278 <_sbrk_r>
8000780a:	18 96       	mov	r6,r12
8000780c:	5b fc       	cp.w	r12,-1
8000780e:	c7 50       	breq	800078f8 <_malloc_r+0x3f4>
80007810:	e6 02 00 08 	add	r8,r3,r2
80007814:	10 3c       	cp.w	r12,r8
80007816:	c0 32       	brcc	8000781c <_malloc_r+0x318>
80007818:	08 33       	cp.w	r3,r4
8000781a:	c6 f1       	brne	800078f8 <_malloc_r+0x3f4>
8000781c:	e0 6a 06 34 	mov	r10,1588
80007820:	74 09       	ld.w	r9,r10[0x0]
80007822:	e2 09 00 09 	add	r9,r1,r9
80007826:	95 09       	st.w	r10[0x0],r9
80007828:	10 36       	cp.w	r6,r8
8000782a:	c0 a1       	brne	8000783e <_malloc_r+0x33a>
8000782c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80007830:	c0 71       	brne	8000783e <_malloc_r+0x33a>
80007832:	e2 02 00 02 	add	r2,r1,r2
80007836:	68 28       	ld.w	r8,r4[0x8]
80007838:	a1 a2       	sbr	r2,0x0
8000783a:	91 12       	st.w	r8[0x4],r2
8000783c:	c4 f8       	rjmp	800078da <_malloc_r+0x3d6>
8000783e:	e0 6a 05 10 	mov	r10,1296
80007842:	74 0b       	ld.w	r11,r10[0x0]
80007844:	5b fb       	cp.w	r11,-1
80007846:	c0 31       	brne	8000784c <_malloc_r+0x348>
80007848:	95 06       	st.w	r10[0x0],r6
8000784a:	c0 78       	rjmp	80007858 <_malloc_r+0x354>
8000784c:	ec 09 00 09 	add	r9,r6,r9
80007850:	e0 6a 06 34 	mov	r10,1588
80007854:	10 19       	sub	r9,r8
80007856:	95 09       	st.w	r10[0x0],r9
80007858:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000785c:	f0 09 11 08 	rsub	r9,r8,8
80007860:	58 08       	cp.w	r8,0
80007862:	f2 08 17 10 	movne	r8,r9
80007866:	ed d8 e1 06 	addne	r6,r6,r8
8000786a:	28 08       	sub	r8,-128
8000786c:	ec 01 00 01 	add	r1,r6,r1
80007870:	0a 9c       	mov	r12,r5
80007872:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80007876:	f0 01 01 01 	sub	r1,r8,r1
8000787a:	02 9b       	mov	r11,r1
8000787c:	e0 a0 04 fe 	rcall	80008278 <_sbrk_r>
80007880:	e0 68 06 34 	mov	r8,1588
80007884:	5b fc       	cp.w	r12,-1
80007886:	ec 0c 17 00 	moveq	r12,r6
8000788a:	f9 b1 00 00 	moveq	r1,0
8000788e:	70 09       	ld.w	r9,r8[0x0]
80007890:	0c 1c       	sub	r12,r6
80007892:	89 26       	st.w	r4[0x8],r6
80007894:	02 0c       	add	r12,r1
80007896:	12 01       	add	r1,r9
80007898:	a1 ac       	sbr	r12,0x0
8000789a:	91 01       	st.w	r8[0x0],r1
8000789c:	8d 1c       	st.w	r6[0x4],r12
8000789e:	08 33       	cp.w	r3,r4
800078a0:	c1 d0       	breq	800078da <_malloc_r+0x3d6>
800078a2:	58 f2       	cp.w	r2,15
800078a4:	e0 8b 00 05 	brhi	800078ae <_malloc_r+0x3aa>
800078a8:	30 18       	mov	r8,1
800078aa:	8d 18       	st.w	r6[0x4],r8
800078ac:	c2 68       	rjmp	800078f8 <_malloc_r+0x3f4>
800078ae:	30 59       	mov	r9,5
800078b0:	20 c2       	sub	r2,12
800078b2:	e0 12 ff f8 	andl	r2,0xfff8
800078b6:	e6 02 00 08 	add	r8,r3,r2
800078ba:	91 29       	st.w	r8[0x8],r9
800078bc:	91 19       	st.w	r8[0x4],r9
800078be:	66 18       	ld.w	r8,r3[0x4]
800078c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800078c4:	e5 e8 10 08 	or	r8,r2,r8
800078c8:	87 18       	st.w	r3[0x4],r8
800078ca:	58 f2       	cp.w	r2,15
800078cc:	e0 88 00 07 	brls	800078da <_malloc_r+0x3d6>
800078d0:	e6 cb ff f8 	sub	r11,r3,-8
800078d4:	0a 9c       	mov	r12,r5
800078d6:	fe b0 fb 71 	rcall	80006fb8 <_free_r>
800078da:	e0 69 06 2c 	mov	r9,1580
800078de:	72 0a       	ld.w	r10,r9[0x0]
800078e0:	e0 68 06 34 	mov	r8,1588
800078e4:	70 08       	ld.w	r8,r8[0x0]
800078e6:	14 38       	cp.w	r8,r10
800078e8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800078ec:	e0 69 06 28 	mov	r9,1576
800078f0:	72 0a       	ld.w	r10,r9[0x0]
800078f2:	14 38       	cp.w	r8,r10
800078f4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800078f8:	68 28       	ld.w	r8,r4[0x8]
800078fa:	70 18       	ld.w	r8,r8[0x4]
800078fc:	e0 18 ff fc 	andl	r8,0xfffc
80007900:	0e 38       	cp.w	r8,r7
80007902:	5f 39       	srlo	r9
80007904:	0e 18       	sub	r8,r7
80007906:	58 f8       	cp.w	r8,15
80007908:	5f aa       	srle	r10
8000790a:	f5 e9 10 09 	or	r9,r10,r9
8000790e:	c0 50       	breq	80007918 <_malloc_r+0x414>
80007910:	0a 9c       	mov	r12,r5
80007912:	c4 3c       	rcall	80007998 <__malloc_unlock>
80007914:	d8 3a       	popm	r0-r7,pc,r12=0
80007916:	d7 03       	nop
80007918:	68 26       	ld.w	r6,r4[0x8]
8000791a:	a1 a8       	sbr	r8,0x0
8000791c:	0e 99       	mov	r9,r7
8000791e:	a1 a9       	sbr	r9,0x0
80007920:	8d 19       	st.w	r6[0x4],r9
80007922:	ec 07 00 07 	add	r7,r6,r7
80007926:	0a 9c       	mov	r12,r5
80007928:	89 27       	st.w	r4[0x8],r7
8000792a:	8f 18       	st.w	r7[0x4],r8
8000792c:	c3 6c       	rcall	80007998 <__malloc_unlock>
8000792e:	ec cc ff f8 	sub	r12,r6,-8
80007932:	d8 32       	popm	r0-r7,pc

80007934 <memchr>:
80007934:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80007938:	c0 68       	rjmp	80007944 <memchr+0x10>
8000793a:	20 1a       	sub	r10,1
8000793c:	19 88       	ld.ub	r8,r12[0x0]
8000793e:	16 38       	cp.w	r8,r11
80007940:	5e 0c       	reteq	r12
80007942:	2f fc       	sub	r12,-1
80007944:	58 0a       	cp.w	r10,0
80007946:	cf a1       	brne	8000793a <memchr+0x6>
80007948:	5e fa       	retal	r10

8000794a <memmove>:
8000794a:	d4 01       	pushm	lr
8000794c:	18 3b       	cp.w	r11,r12
8000794e:	c1 92       	brcc	80007980 <memmove+0x36>
80007950:	f6 0a 00 09 	add	r9,r11,r10
80007954:	12 3c       	cp.w	r12,r9
80007956:	c1 52       	brcc	80007980 <memmove+0x36>
80007958:	f8 0a 00 0b 	add	r11,r12,r10
8000795c:	30 08       	mov	r8,0
8000795e:	c0 68       	rjmp	8000796a <memmove+0x20>
80007960:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80007964:	20 1a       	sub	r10,1
80007966:	f6 08 0b 0e 	st.b	r11[r8],lr
8000796a:	20 18       	sub	r8,1
8000796c:	58 0a       	cp.w	r10,0
8000796e:	cf 91       	brne	80007960 <memmove+0x16>
80007970:	d8 02       	popm	pc
80007972:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007976:	20 1a       	sub	r10,1
80007978:	f8 08 0b 09 	st.b	r12[r8],r9
8000797c:	2f f8       	sub	r8,-1
8000797e:	c0 28       	rjmp	80007982 <memmove+0x38>
80007980:	30 08       	mov	r8,0
80007982:	58 0a       	cp.w	r10,0
80007984:	cf 71       	brne	80007972 <memmove+0x28>
80007986:	d8 02       	popm	pc

80007988 <memset>:
80007988:	18 98       	mov	r8,r12
8000798a:	c0 38       	rjmp	80007990 <memset+0x8>
8000798c:	10 cb       	st.b	r8++,r11
8000798e:	20 1a       	sub	r10,1
80007990:	58 0a       	cp.w	r10,0
80007992:	cf d1       	brne	8000798c <memset+0x4>
80007994:	5e fc       	retal	r12

80007996 <__malloc_lock>:
80007996:	5e fc       	retal	r12

80007998 <__malloc_unlock>:
80007998:	5e fc       	retal	r12

8000799a <__hi0bits>:
8000799a:	18 98       	mov	r8,r12
8000799c:	e0 1c 00 00 	andl	r12,0x0
800079a0:	f0 09 15 10 	lsl	r9,r8,0x10
800079a4:	58 0c       	cp.w	r12,0
800079a6:	f2 08 17 00 	moveq	r8,r9
800079aa:	f9 bc 00 10 	moveq	r12,16
800079ae:	f9 bc 01 00 	movne	r12,0
800079b2:	10 9a       	mov	r10,r8
800079b4:	f0 09 15 08 	lsl	r9,r8,0x8
800079b8:	e6 1a ff 00 	andh	r10,0xff00,COH
800079bc:	f7 bc 00 f8 	subeq	r12,-8
800079c0:	f2 08 17 00 	moveq	r8,r9
800079c4:	10 9a       	mov	r10,r8
800079c6:	f0 09 15 04 	lsl	r9,r8,0x4
800079ca:	e6 1a f0 00 	andh	r10,0xf000,COH
800079ce:	f7 bc 00 fc 	subeq	r12,-4
800079d2:	f2 08 17 00 	moveq	r8,r9
800079d6:	10 9a       	mov	r10,r8
800079d8:	f0 09 15 02 	lsl	r9,r8,0x2
800079dc:	e6 1a c0 00 	andh	r10,0xc000,COH
800079e0:	f7 bc 00 fe 	subeq	r12,-2
800079e4:	f2 08 17 00 	moveq	r8,r9
800079e8:	58 08       	cp.w	r8,0
800079ea:	5e 5c       	retlt	r12
800079ec:	ed b8 00 1e 	bld	r8,0x1e
800079f0:	f9 bc 01 20 	movne	r12,32
800079f4:	f7 bc 00 ff 	subeq	r12,-1
800079f8:	5e fc       	retal	r12

800079fa <__lo0bits>:
800079fa:	18 99       	mov	r9,r12
800079fc:	78 08       	ld.w	r8,r12[0x0]
800079fe:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80007a02:	c1 50       	breq	80007a2c <__lo0bits+0x32>
80007a04:	ed b8 00 00 	bld	r8,0x0
80007a08:	c0 21       	brne	80007a0c <__lo0bits+0x12>
80007a0a:	5e fd       	retal	0
80007a0c:	10 9b       	mov	r11,r8
80007a0e:	f0 0a 16 01 	lsr	r10,r8,0x1
80007a12:	e2 1b 00 02 	andl	r11,0x2,COH
80007a16:	a3 88       	lsr	r8,0x2
80007a18:	58 0b       	cp.w	r11,0
80007a1a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80007a1e:	f9 bc 01 01 	movne	r12,1
80007a22:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80007a26:	f9 bc 00 02 	moveq	r12,2
80007a2a:	5e fc       	retal	r12
80007a2c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80007a30:	f0 0b 16 10 	lsr	r11,r8,0x10
80007a34:	58 0a       	cp.w	r10,0
80007a36:	f6 08 17 00 	moveq	r8,r11
80007a3a:	f9 bc 00 10 	moveq	r12,16
80007a3e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80007a42:	f0 0a 16 08 	lsr	r10,r8,0x8
80007a46:	58 0b       	cp.w	r11,0
80007a48:	f7 bc 00 f8 	subeq	r12,-8
80007a4c:	f4 08 17 00 	moveq	r8,r10
80007a50:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80007a54:	f0 0a 16 04 	lsr	r10,r8,0x4
80007a58:	58 0b       	cp.w	r11,0
80007a5a:	f7 bc 00 fc 	subeq	r12,-4
80007a5e:	f4 08 17 00 	moveq	r8,r10
80007a62:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80007a66:	f0 0a 16 02 	lsr	r10,r8,0x2
80007a6a:	58 0b       	cp.w	r11,0
80007a6c:	f7 bc 00 fe 	subeq	r12,-2
80007a70:	f4 08 17 00 	moveq	r8,r10
80007a74:	ed b8 00 00 	bld	r8,0x0
80007a78:	c0 60       	breq	80007a84 <__lo0bits+0x8a>
80007a7a:	a1 98       	lsr	r8,0x1
80007a7c:	c0 31       	brne	80007a82 <__lo0bits+0x88>
80007a7e:	32 0c       	mov	r12,32
80007a80:	5e fc       	retal	r12
80007a82:	2f fc       	sub	r12,-1
80007a84:	93 08       	st.w	r9[0x0],r8
80007a86:	5e fc       	retal	r12

80007a88 <__mcmp>:
80007a88:	d4 01       	pushm	lr
80007a8a:	18 98       	mov	r8,r12
80007a8c:	76 49       	ld.w	r9,r11[0x10]
80007a8e:	78 4c       	ld.w	r12,r12[0x10]
80007a90:	12 1c       	sub	r12,r9
80007a92:	c1 31       	brne	80007ab8 <__mcmp+0x30>
80007a94:	2f b9       	sub	r9,-5
80007a96:	a3 69       	lsl	r9,0x2
80007a98:	12 0b       	add	r11,r9
80007a9a:	f0 09 00 09 	add	r9,r8,r9
80007a9e:	2e c8       	sub	r8,-20
80007aa0:	13 4e       	ld.w	lr,--r9
80007aa2:	17 4a       	ld.w	r10,--r11
80007aa4:	14 3e       	cp.w	lr,r10
80007aa6:	c0 60       	breq	80007ab2 <__mcmp+0x2a>
80007aa8:	f9 bc 03 ff 	movlo	r12,-1
80007aac:	f9 bc 02 01 	movhs	r12,1
80007ab0:	d8 02       	popm	pc
80007ab2:	10 39       	cp.w	r9,r8
80007ab4:	fe 9b ff f6 	brhi	80007aa0 <__mcmp+0x18>
80007ab8:	d8 02       	popm	pc
80007aba:	d7 03       	nop

80007abc <_Bfree>:
80007abc:	d4 21       	pushm	r4-r7,lr
80007abe:	18 97       	mov	r7,r12
80007ac0:	16 95       	mov	r5,r11
80007ac2:	78 96       	ld.w	r6,r12[0x24]
80007ac4:	58 06       	cp.w	r6,0
80007ac6:	c0 91       	brne	80007ad8 <_Bfree+0x1c>
80007ac8:	31 0c       	mov	r12,16
80007aca:	fe b0 fd 15 	rcall	800074f4 <malloc>
80007ace:	99 36       	st.w	r12[0xc],r6
80007ad0:	8f 9c       	st.w	r7[0x24],r12
80007ad2:	99 16       	st.w	r12[0x4],r6
80007ad4:	99 26       	st.w	r12[0x8],r6
80007ad6:	99 06       	st.w	r12[0x0],r6
80007ad8:	58 05       	cp.w	r5,0
80007ada:	c0 90       	breq	80007aec <_Bfree+0x30>
80007adc:	6a 19       	ld.w	r9,r5[0x4]
80007ade:	6e 98       	ld.w	r8,r7[0x24]
80007ae0:	70 38       	ld.w	r8,r8[0xc]
80007ae2:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80007ae6:	8b 0a       	st.w	r5[0x0],r10
80007ae8:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80007aec:	d8 22       	popm	r4-r7,pc
80007aee:	d7 03       	nop

80007af0 <_Balloc>:
80007af0:	d4 21       	pushm	r4-r7,lr
80007af2:	18 97       	mov	r7,r12
80007af4:	16 96       	mov	r6,r11
80007af6:	78 95       	ld.w	r5,r12[0x24]
80007af8:	58 05       	cp.w	r5,0
80007afa:	c0 91       	brne	80007b0c <_Balloc+0x1c>
80007afc:	31 0c       	mov	r12,16
80007afe:	fe b0 fc fb 	rcall	800074f4 <malloc>
80007b02:	99 35       	st.w	r12[0xc],r5
80007b04:	8f 9c       	st.w	r7[0x24],r12
80007b06:	99 15       	st.w	r12[0x4],r5
80007b08:	99 25       	st.w	r12[0x8],r5
80007b0a:	99 05       	st.w	r12[0x0],r5
80007b0c:	6e 95       	ld.w	r5,r7[0x24]
80007b0e:	6a 38       	ld.w	r8,r5[0xc]
80007b10:	58 08       	cp.w	r8,0
80007b12:	c0 b1       	brne	80007b28 <_Balloc+0x38>
80007b14:	31 0a       	mov	r10,16
80007b16:	30 4b       	mov	r11,4
80007b18:	0e 9c       	mov	r12,r7
80007b1a:	e0 a0 04 93 	rcall	80008440 <_calloc_r>
80007b1e:	8b 3c       	st.w	r5[0xc],r12
80007b20:	6e 98       	ld.w	r8,r7[0x24]
80007b22:	70 3c       	ld.w	r12,r8[0xc]
80007b24:	58 0c       	cp.w	r12,0
80007b26:	c1 b0       	breq	80007b5c <_Balloc+0x6c>
80007b28:	6e 98       	ld.w	r8,r7[0x24]
80007b2a:	70 38       	ld.w	r8,r8[0xc]
80007b2c:	f0 06 00 28 	add	r8,r8,r6<<0x2
80007b30:	70 0c       	ld.w	r12,r8[0x0]
80007b32:	58 0c       	cp.w	r12,0
80007b34:	c0 40       	breq	80007b3c <_Balloc+0x4c>
80007b36:	78 09       	ld.w	r9,r12[0x0]
80007b38:	91 09       	st.w	r8[0x0],r9
80007b3a:	c0 e8       	rjmp	80007b56 <_Balloc+0x66>
80007b3c:	0e 9c       	mov	r12,r7
80007b3e:	30 17       	mov	r7,1
80007b40:	0e 9b       	mov	r11,r7
80007b42:	ee 06 09 47 	lsl	r7,r7,r6
80007b46:	ee ca ff fb 	sub	r10,r7,-5
80007b4a:	a3 6a       	lsl	r10,0x2
80007b4c:	e0 a0 04 7a 	rcall	80008440 <_calloc_r>
80007b50:	c0 60       	breq	80007b5c <_Balloc+0x6c>
80007b52:	99 16       	st.w	r12[0x4],r6
80007b54:	99 27       	st.w	r12[0x8],r7
80007b56:	30 08       	mov	r8,0
80007b58:	99 38       	st.w	r12[0xc],r8
80007b5a:	99 48       	st.w	r12[0x10],r8
80007b5c:	d8 22       	popm	r4-r7,pc
80007b5e:	d7 03       	nop

80007b60 <__d2b>:
80007b60:	d4 31       	pushm	r0-r7,lr
80007b62:	20 2d       	sub	sp,8
80007b64:	16 93       	mov	r3,r11
80007b66:	12 96       	mov	r6,r9
80007b68:	10 95       	mov	r5,r8
80007b6a:	14 92       	mov	r2,r10
80007b6c:	30 1b       	mov	r11,1
80007b6e:	cc 1f       	rcall	80007af0 <_Balloc>
80007b70:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80007b74:	50 09       	stdsp	sp[0x0],r9
80007b76:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007b7a:	b5 a9       	sbr	r9,0x14
80007b7c:	f0 01 16 14 	lsr	r1,r8,0x14
80007b80:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007b84:	18 94       	mov	r4,r12
80007b86:	58 02       	cp.w	r2,0
80007b88:	c1 d0       	breq	80007bc2 <__d2b+0x62>
80007b8a:	fa cc ff f8 	sub	r12,sp,-8
80007b8e:	18 d2       	st.w	--r12,r2
80007b90:	c3 5f       	rcall	800079fa <__lo0bits>
80007b92:	40 18       	lddsp	r8,sp[0x4]
80007b94:	c0 d0       	breq	80007bae <__d2b+0x4e>
80007b96:	40 09       	lddsp	r9,sp[0x0]
80007b98:	f8 0a 11 20 	rsub	r10,r12,32
80007b9c:	f2 0a 09 4a 	lsl	r10,r9,r10
80007ba0:	f5 e8 10 08 	or	r8,r10,r8
80007ba4:	89 58       	st.w	r4[0x14],r8
80007ba6:	f2 0c 0a 49 	lsr	r9,r9,r12
80007baa:	50 09       	stdsp	sp[0x0],r9
80007bac:	c0 28       	rjmp	80007bb0 <__d2b+0x50>
80007bae:	89 58       	st.w	r4[0x14],r8
80007bb0:	40 08       	lddsp	r8,sp[0x0]
80007bb2:	58 08       	cp.w	r8,0
80007bb4:	f9 b3 01 02 	movne	r3,2
80007bb8:	f9 b3 00 01 	moveq	r3,1
80007bbc:	89 68       	st.w	r4[0x18],r8
80007bbe:	89 43       	st.w	r4[0x10],r3
80007bc0:	c0 88       	rjmp	80007bd0 <__d2b+0x70>
80007bc2:	1a 9c       	mov	r12,sp
80007bc4:	c1 bf       	rcall	800079fa <__lo0bits>
80007bc6:	30 13       	mov	r3,1
80007bc8:	40 08       	lddsp	r8,sp[0x0]
80007bca:	2e 0c       	sub	r12,-32
80007bcc:	89 43       	st.w	r4[0x10],r3
80007bce:	89 58       	st.w	r4[0x14],r8
80007bd0:	58 01       	cp.w	r1,0
80007bd2:	c0 90       	breq	80007be4 <__d2b+0x84>
80007bd4:	e2 c1 04 33 	sub	r1,r1,1075
80007bd8:	18 01       	add	r1,r12
80007bda:	8d 01       	st.w	r6[0x0],r1
80007bdc:	f8 0c 11 35 	rsub	r12,r12,53
80007be0:	8b 0c       	st.w	r5[0x0],r12
80007be2:	c0 c8       	rjmp	80007bfa <__d2b+0x9a>
80007be4:	e6 c8 ff fc 	sub	r8,r3,-4
80007be8:	f8 cc 04 32 	sub	r12,r12,1074
80007bec:	a5 73       	lsl	r3,0x5
80007bee:	8d 0c       	st.w	r6[0x0],r12
80007bf0:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80007bf4:	cd 3e       	rcall	8000799a <__hi0bits>
80007bf6:	18 13       	sub	r3,r12
80007bf8:	8b 03       	st.w	r5[0x0],r3
80007bfa:	08 9c       	mov	r12,r4
80007bfc:	2f ed       	sub	sp,-8
80007bfe:	d8 32       	popm	r0-r7,pc

80007c00 <__mdiff>:
80007c00:	d4 31       	pushm	r0-r7,lr
80007c02:	74 48       	ld.w	r8,r10[0x10]
80007c04:	76 45       	ld.w	r5,r11[0x10]
80007c06:	16 97       	mov	r7,r11
80007c08:	14 96       	mov	r6,r10
80007c0a:	10 15       	sub	r5,r8
80007c0c:	c1 31       	brne	80007c32 <__mdiff+0x32>
80007c0e:	2f b8       	sub	r8,-5
80007c10:	ee ce ff ec 	sub	lr,r7,-20
80007c14:	a3 68       	lsl	r8,0x2
80007c16:	f4 08 00 0b 	add	r11,r10,r8
80007c1a:	ee 08 00 08 	add	r8,r7,r8
80007c1e:	11 4a       	ld.w	r10,--r8
80007c20:	17 49       	ld.w	r9,--r11
80007c22:	12 3a       	cp.w	r10,r9
80007c24:	c0 30       	breq	80007c2a <__mdiff+0x2a>
80007c26:	c0 e2       	brcc	80007c42 <__mdiff+0x42>
80007c28:	c0 78       	rjmp	80007c36 <__mdiff+0x36>
80007c2a:	1c 38       	cp.w	r8,lr
80007c2c:	fe 9b ff f9 	brhi	80007c1e <__mdiff+0x1e>
80007c30:	c4 98       	rjmp	80007cc2 <__mdiff+0xc2>
80007c32:	58 05       	cp.w	r5,0
80007c34:	c0 64       	brge	80007c40 <__mdiff+0x40>
80007c36:	0e 98       	mov	r8,r7
80007c38:	30 15       	mov	r5,1
80007c3a:	0c 97       	mov	r7,r6
80007c3c:	10 96       	mov	r6,r8
80007c3e:	c0 28       	rjmp	80007c42 <__mdiff+0x42>
80007c40:	30 05       	mov	r5,0
80007c42:	6e 1b       	ld.w	r11,r7[0x4]
80007c44:	c5 6f       	rcall	80007af0 <_Balloc>
80007c46:	6e 49       	ld.w	r9,r7[0x10]
80007c48:	6c 44       	ld.w	r4,r6[0x10]
80007c4a:	99 35       	st.w	r12[0xc],r5
80007c4c:	2f b4       	sub	r4,-5
80007c4e:	f2 c5 ff fb 	sub	r5,r9,-5
80007c52:	ec 04 00 24 	add	r4,r6,r4<<0x2
80007c56:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007c5a:	2e c6       	sub	r6,-20
80007c5c:	2e c7       	sub	r7,-20
80007c5e:	f8 c8 ff ec 	sub	r8,r12,-20
80007c62:	30 0a       	mov	r10,0
80007c64:	0f 0e       	ld.w	lr,r7++
80007c66:	0d 0b       	ld.w	r11,r6++
80007c68:	fc 02 16 10 	lsr	r2,lr,0x10
80007c6c:	f6 03 16 10 	lsr	r3,r11,0x10
80007c70:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007c74:	e4 03 01 03 	sub	r3,r2,r3
80007c78:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007c7c:	fc 0b 01 0b 	sub	r11,lr,r11
80007c80:	f6 0a 00 0a 	add	r10,r11,r10
80007c84:	b0 1a       	st.h	r8[0x2],r10
80007c86:	b1 4a       	asr	r10,0x10
80007c88:	e6 0a 00 0a 	add	r10,r3,r10
80007c8c:	b0 0a       	st.h	r8[0x0],r10
80007c8e:	2f c8       	sub	r8,-4
80007c90:	b1 4a       	asr	r10,0x10
80007c92:	08 36       	cp.w	r6,r4
80007c94:	ce 83       	brcs	80007c64 <__mdiff+0x64>
80007c96:	c0 d8       	rjmp	80007cb0 <__mdiff+0xb0>
80007c98:	0f 0b       	ld.w	r11,r7++
80007c9a:	f6 0e 16 10 	lsr	lr,r11,0x10
80007c9e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007ca2:	16 0a       	add	r10,r11
80007ca4:	b0 1a       	st.h	r8[0x2],r10
80007ca6:	b1 4a       	asr	r10,0x10
80007ca8:	1c 0a       	add	r10,lr
80007caa:	b0 0a       	st.h	r8[0x0],r10
80007cac:	2f c8       	sub	r8,-4
80007cae:	b1 4a       	asr	r10,0x10
80007cb0:	0a 37       	cp.w	r7,r5
80007cb2:	cf 33       	brcs	80007c98 <__mdiff+0x98>
80007cb4:	c0 28       	rjmp	80007cb8 <__mdiff+0xb8>
80007cb6:	20 19       	sub	r9,1
80007cb8:	11 4a       	ld.w	r10,--r8
80007cba:	58 0a       	cp.w	r10,0
80007cbc:	cf d0       	breq	80007cb6 <__mdiff+0xb6>
80007cbe:	99 49       	st.w	r12[0x10],r9
80007cc0:	d8 32       	popm	r0-r7,pc
80007cc2:	30 0b       	mov	r11,0
80007cc4:	c1 6f       	rcall	80007af0 <_Balloc>
80007cc6:	30 18       	mov	r8,1
80007cc8:	99 48       	st.w	r12[0x10],r8
80007cca:	30 08       	mov	r8,0
80007ccc:	99 58       	st.w	r12[0x14],r8
80007cce:	d8 32       	popm	r0-r7,pc

80007cd0 <__lshift>:
80007cd0:	d4 31       	pushm	r0-r7,lr
80007cd2:	16 97       	mov	r7,r11
80007cd4:	76 46       	ld.w	r6,r11[0x10]
80007cd6:	f4 02 14 05 	asr	r2,r10,0x5
80007cda:	2f f6       	sub	r6,-1
80007cdc:	14 93       	mov	r3,r10
80007cde:	18 94       	mov	r4,r12
80007ce0:	04 06       	add	r6,r2
80007ce2:	76 1b       	ld.w	r11,r11[0x4]
80007ce4:	6e 28       	ld.w	r8,r7[0x8]
80007ce6:	c0 38       	rjmp	80007cec <__lshift+0x1c>
80007ce8:	2f fb       	sub	r11,-1
80007cea:	a1 78       	lsl	r8,0x1
80007cec:	10 36       	cp.w	r6,r8
80007cee:	fe 99 ff fd 	brgt	80007ce8 <__lshift+0x18>
80007cf2:	08 9c       	mov	r12,r4
80007cf4:	cf ee       	rcall	80007af0 <_Balloc>
80007cf6:	30 09       	mov	r9,0
80007cf8:	18 95       	mov	r5,r12
80007cfa:	f8 c8 ff ec 	sub	r8,r12,-20
80007cfe:	12 9a       	mov	r10,r9
80007d00:	c0 38       	rjmp	80007d06 <__lshift+0x36>
80007d02:	10 aa       	st.w	r8++,r10
80007d04:	2f f9       	sub	r9,-1
80007d06:	04 39       	cp.w	r9,r2
80007d08:	cf d5       	brlt	80007d02 <__lshift+0x32>
80007d0a:	6e 4b       	ld.w	r11,r7[0x10]
80007d0c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80007d10:	2f bb       	sub	r11,-5
80007d12:	ee c9 ff ec 	sub	r9,r7,-20
80007d16:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80007d1a:	58 03       	cp.w	r3,0
80007d1c:	c1 30       	breq	80007d42 <__lshift+0x72>
80007d1e:	e6 0c 11 20 	rsub	r12,r3,32
80007d22:	30 0a       	mov	r10,0
80007d24:	72 02       	ld.w	r2,r9[0x0]
80007d26:	e4 03 09 42 	lsl	r2,r2,r3
80007d2a:	04 4a       	or	r10,r2
80007d2c:	10 aa       	st.w	r8++,r10
80007d2e:	13 0a       	ld.w	r10,r9++
80007d30:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007d34:	16 39       	cp.w	r9,r11
80007d36:	cf 73       	brcs	80007d24 <__lshift+0x54>
80007d38:	91 0a       	st.w	r8[0x0],r10
80007d3a:	58 0a       	cp.w	r10,0
80007d3c:	c0 70       	breq	80007d4a <__lshift+0x7a>
80007d3e:	2f f6       	sub	r6,-1
80007d40:	c0 58       	rjmp	80007d4a <__lshift+0x7a>
80007d42:	13 0a       	ld.w	r10,r9++
80007d44:	10 aa       	st.w	r8++,r10
80007d46:	16 39       	cp.w	r9,r11
80007d48:	cf d3       	brcs	80007d42 <__lshift+0x72>
80007d4a:	08 9c       	mov	r12,r4
80007d4c:	20 16       	sub	r6,1
80007d4e:	0e 9b       	mov	r11,r7
80007d50:	8b 46       	st.w	r5[0x10],r6
80007d52:	cb 5e       	rcall	80007abc <_Bfree>
80007d54:	0a 9c       	mov	r12,r5
80007d56:	d8 32       	popm	r0-r7,pc

80007d58 <__multiply>:
80007d58:	d4 31       	pushm	r0-r7,lr
80007d5a:	20 2d       	sub	sp,8
80007d5c:	76 49       	ld.w	r9,r11[0x10]
80007d5e:	74 48       	ld.w	r8,r10[0x10]
80007d60:	16 96       	mov	r6,r11
80007d62:	14 95       	mov	r5,r10
80007d64:	10 39       	cp.w	r9,r8
80007d66:	ec 08 17 50 	movlt	r8,r6
80007d6a:	ea 06 17 50 	movlt	r6,r5
80007d6e:	f0 05 17 50 	movlt	r5,r8
80007d72:	6c 28       	ld.w	r8,r6[0x8]
80007d74:	76 43       	ld.w	r3,r11[0x10]
80007d76:	74 42       	ld.w	r2,r10[0x10]
80007d78:	76 1b       	ld.w	r11,r11[0x4]
80007d7a:	e4 03 00 07 	add	r7,r2,r3
80007d7e:	10 37       	cp.w	r7,r8
80007d80:	f7 bb 09 ff 	subgt	r11,-1
80007d84:	cb 6e       	rcall	80007af0 <_Balloc>
80007d86:	ee c4 ff fb 	sub	r4,r7,-5
80007d8a:	f8 c9 ff ec 	sub	r9,r12,-20
80007d8e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80007d92:	30 0a       	mov	r10,0
80007d94:	12 98       	mov	r8,r9
80007d96:	c0 28       	rjmp	80007d9a <__multiply+0x42>
80007d98:	10 aa       	st.w	r8++,r10
80007d9a:	08 38       	cp.w	r8,r4
80007d9c:	cf e3       	brcs	80007d98 <__multiply+0x40>
80007d9e:	2f b3       	sub	r3,-5
80007da0:	2f b2       	sub	r2,-5
80007da2:	ec 03 00 23 	add	r3,r6,r3<<0x2
80007da6:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007daa:	ec cb ff ec 	sub	r11,r6,-20
80007dae:	50 12       	stdsp	sp[0x4],r2
80007db0:	ea ca ff ec 	sub	r10,r5,-20
80007db4:	c4 48       	rjmp	80007e3c <__multiply+0xe4>
80007db6:	94 95       	ld.uh	r5,r10[0x2]
80007db8:	58 05       	cp.w	r5,0
80007dba:	c2 00       	breq	80007dfa <__multiply+0xa2>
80007dbc:	12 98       	mov	r8,r9
80007dbe:	16 96       	mov	r6,r11
80007dc0:	30 0e       	mov	lr,0
80007dc2:	50 09       	stdsp	sp[0x0],r9
80007dc4:	0d 02       	ld.w	r2,r6++
80007dc6:	e4 00 16 10 	lsr	r0,r2,0x10
80007dca:	70 01       	ld.w	r1,r8[0x0]
80007dcc:	70 09       	ld.w	r9,r8[0x0]
80007dce:	b1 81       	lsr	r1,0x10
80007dd0:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80007dd4:	e0 05 03 41 	mac	r1,r0,r5
80007dd8:	ab 32       	mul	r2,r5
80007dda:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007dde:	00 02       	add	r2,r0
80007de0:	e4 0e 00 0e 	add	lr,r2,lr
80007de4:	b0 1e       	st.h	r8[0x2],lr
80007de6:	b1 8e       	lsr	lr,0x10
80007de8:	1c 01       	add	r1,lr
80007dea:	b0 01       	st.h	r8[0x0],r1
80007dec:	e2 0e 16 10 	lsr	lr,r1,0x10
80007df0:	2f c8       	sub	r8,-4
80007df2:	06 36       	cp.w	r6,r3
80007df4:	ce 83       	brcs	80007dc4 <__multiply+0x6c>
80007df6:	40 09       	lddsp	r9,sp[0x0]
80007df8:	91 0e       	st.w	r8[0x0],lr
80007dfa:	94 86       	ld.uh	r6,r10[0x0]
80007dfc:	58 06       	cp.w	r6,0
80007dfe:	c1 d0       	breq	80007e38 <__multiply+0xe0>
80007e00:	72 02       	ld.w	r2,r9[0x0]
80007e02:	12 98       	mov	r8,r9
80007e04:	16 9e       	mov	lr,r11
80007e06:	30 05       	mov	r5,0
80007e08:	b0 12       	st.h	r8[0x2],r2
80007e0a:	1d 01       	ld.w	r1,lr++
80007e0c:	90 82       	ld.uh	r2,r8[0x0]
80007e0e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80007e12:	ad 30       	mul	r0,r6
80007e14:	e0 02 00 02 	add	r2,r0,r2
80007e18:	e4 05 00 05 	add	r5,r2,r5
80007e1c:	b0 05       	st.h	r8[0x0],r5
80007e1e:	b1 85       	lsr	r5,0x10
80007e20:	b1 81       	lsr	r1,0x10
80007e22:	2f c8       	sub	r8,-4
80007e24:	ad 31       	mul	r1,r6
80007e26:	90 92       	ld.uh	r2,r8[0x2]
80007e28:	e2 02 00 02 	add	r2,r1,r2
80007e2c:	0a 02       	add	r2,r5
80007e2e:	e4 05 16 10 	lsr	r5,r2,0x10
80007e32:	06 3e       	cp.w	lr,r3
80007e34:	ce a3       	brcs	80007e08 <__multiply+0xb0>
80007e36:	91 02       	st.w	r8[0x0],r2
80007e38:	2f ca       	sub	r10,-4
80007e3a:	2f c9       	sub	r9,-4
80007e3c:	40 18       	lddsp	r8,sp[0x4]
80007e3e:	10 3a       	cp.w	r10,r8
80007e40:	cb b3       	brcs	80007db6 <__multiply+0x5e>
80007e42:	c0 28       	rjmp	80007e46 <__multiply+0xee>
80007e44:	20 17       	sub	r7,1
80007e46:	58 07       	cp.w	r7,0
80007e48:	e0 8a 00 05 	brle	80007e52 <__multiply+0xfa>
80007e4c:	09 48       	ld.w	r8,--r4
80007e4e:	58 08       	cp.w	r8,0
80007e50:	cf a0       	breq	80007e44 <__multiply+0xec>
80007e52:	99 47       	st.w	r12[0x10],r7
80007e54:	2f ed       	sub	sp,-8
80007e56:	d8 32       	popm	r0-r7,pc

80007e58 <__i2b>:
80007e58:	d4 21       	pushm	r4-r7,lr
80007e5a:	16 97       	mov	r7,r11
80007e5c:	30 1b       	mov	r11,1
80007e5e:	c4 9e       	rcall	80007af0 <_Balloc>
80007e60:	30 19       	mov	r9,1
80007e62:	99 57       	st.w	r12[0x14],r7
80007e64:	99 49       	st.w	r12[0x10],r9
80007e66:	d8 22       	popm	r4-r7,pc

80007e68 <__multadd>:
80007e68:	d4 31       	pushm	r0-r7,lr
80007e6a:	30 08       	mov	r8,0
80007e6c:	12 95       	mov	r5,r9
80007e6e:	16 97       	mov	r7,r11
80007e70:	18 96       	mov	r6,r12
80007e72:	76 44       	ld.w	r4,r11[0x10]
80007e74:	f6 c9 ff ec 	sub	r9,r11,-20
80007e78:	72 0b       	ld.w	r11,r9[0x0]
80007e7a:	f6 0c 16 10 	lsr	r12,r11,0x10
80007e7e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007e82:	f4 0c 02 4c 	mul	r12,r10,r12
80007e86:	f4 0b 03 45 	mac	r5,r10,r11
80007e8a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007e8e:	b1 85       	lsr	r5,0x10
80007e90:	18 05       	add	r5,r12
80007e92:	ea 0c 15 10 	lsl	r12,r5,0x10
80007e96:	f8 0b 00 0b 	add	r11,r12,r11
80007e9a:	12 ab       	st.w	r9++,r11
80007e9c:	2f f8       	sub	r8,-1
80007e9e:	b1 85       	lsr	r5,0x10
80007ea0:	08 38       	cp.w	r8,r4
80007ea2:	ce b5       	brlt	80007e78 <__multadd+0x10>
80007ea4:	58 05       	cp.w	r5,0
80007ea6:	c1 c0       	breq	80007ede <__multadd+0x76>
80007ea8:	6e 28       	ld.w	r8,r7[0x8]
80007eaa:	10 34       	cp.w	r4,r8
80007eac:	c1 35       	brlt	80007ed2 <__multadd+0x6a>
80007eae:	6e 1b       	ld.w	r11,r7[0x4]
80007eb0:	0c 9c       	mov	r12,r6
80007eb2:	2f fb       	sub	r11,-1
80007eb4:	c1 ee       	rcall	80007af0 <_Balloc>
80007eb6:	6e 4a       	ld.w	r10,r7[0x10]
80007eb8:	ee cb ff f4 	sub	r11,r7,-12
80007ebc:	18 93       	mov	r3,r12
80007ebe:	2f ea       	sub	r10,-2
80007ec0:	2f 4c       	sub	r12,-12
80007ec2:	a3 6a       	lsl	r10,0x2
80007ec4:	fe b0 de 36 	rcall	80003b30 <memcpy>
80007ec8:	0e 9b       	mov	r11,r7
80007eca:	0c 9c       	mov	r12,r6
80007ecc:	fe b0 fd f8 	rcall	80007abc <_Bfree>
80007ed0:	06 97       	mov	r7,r3
80007ed2:	e8 c8 ff ff 	sub	r8,r4,-1
80007ed6:	2f b4       	sub	r4,-5
80007ed8:	8f 48       	st.w	r7[0x10],r8
80007eda:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007ede:	0e 9c       	mov	r12,r7
80007ee0:	d8 32       	popm	r0-r7,pc
80007ee2:	d7 03       	nop

80007ee4 <__pow5mult>:
80007ee4:	d4 31       	pushm	r0-r7,lr
80007ee6:	14 96       	mov	r6,r10
80007ee8:	18 97       	mov	r7,r12
80007eea:	16 94       	mov	r4,r11
80007eec:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80007ef0:	c0 90       	breq	80007f02 <__pow5mult+0x1e>
80007ef2:	20 18       	sub	r8,1
80007ef4:	fe c9 e6 ac 	sub	r9,pc,-6484
80007ef8:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80007efc:	30 09       	mov	r9,0
80007efe:	cb 5f       	rcall	80007e68 <__multadd>
80007f00:	18 94       	mov	r4,r12
80007f02:	a3 46       	asr	r6,0x2
80007f04:	c3 40       	breq	80007f6c <__pow5mult+0x88>
80007f06:	6e 95       	ld.w	r5,r7[0x24]
80007f08:	58 05       	cp.w	r5,0
80007f0a:	c0 91       	brne	80007f1c <__pow5mult+0x38>
80007f0c:	31 0c       	mov	r12,16
80007f0e:	fe b0 fa f3 	rcall	800074f4 <malloc>
80007f12:	99 35       	st.w	r12[0xc],r5
80007f14:	8f 9c       	st.w	r7[0x24],r12
80007f16:	99 15       	st.w	r12[0x4],r5
80007f18:	99 25       	st.w	r12[0x8],r5
80007f1a:	99 05       	st.w	r12[0x0],r5
80007f1c:	6e 93       	ld.w	r3,r7[0x24]
80007f1e:	66 25       	ld.w	r5,r3[0x8]
80007f20:	58 05       	cp.w	r5,0
80007f22:	c0 c1       	brne	80007f3a <__pow5mult+0x56>
80007f24:	e0 6b 02 71 	mov	r11,625
80007f28:	0e 9c       	mov	r12,r7
80007f2a:	c9 7f       	rcall	80007e58 <__i2b>
80007f2c:	87 2c       	st.w	r3[0x8],r12
80007f2e:	30 08       	mov	r8,0
80007f30:	18 95       	mov	r5,r12
80007f32:	99 08       	st.w	r12[0x0],r8
80007f34:	c0 38       	rjmp	80007f3a <__pow5mult+0x56>
80007f36:	06 9c       	mov	r12,r3
80007f38:	18 95       	mov	r5,r12
80007f3a:	ed b6 00 00 	bld	r6,0x0
80007f3e:	c0 b1       	brne	80007f54 <__pow5mult+0x70>
80007f40:	08 9b       	mov	r11,r4
80007f42:	0a 9a       	mov	r10,r5
80007f44:	0e 9c       	mov	r12,r7
80007f46:	c0 9f       	rcall	80007d58 <__multiply>
80007f48:	08 9b       	mov	r11,r4
80007f4a:	18 93       	mov	r3,r12
80007f4c:	0e 9c       	mov	r12,r7
80007f4e:	06 94       	mov	r4,r3
80007f50:	fe b0 fd b6 	rcall	80007abc <_Bfree>
80007f54:	a1 56       	asr	r6,0x1
80007f56:	c0 b0       	breq	80007f6c <__pow5mult+0x88>
80007f58:	6a 03       	ld.w	r3,r5[0x0]
80007f5a:	58 03       	cp.w	r3,0
80007f5c:	ce d1       	brne	80007f36 <__pow5mult+0x52>
80007f5e:	0a 9a       	mov	r10,r5
80007f60:	0a 9b       	mov	r11,r5
80007f62:	0e 9c       	mov	r12,r7
80007f64:	cf ae       	rcall	80007d58 <__multiply>
80007f66:	8b 0c       	st.w	r5[0x0],r12
80007f68:	99 03       	st.w	r12[0x0],r3
80007f6a:	ce 7b       	rjmp	80007f38 <__pow5mult+0x54>
80007f6c:	08 9c       	mov	r12,r4
80007f6e:	d8 32       	popm	r0-r7,pc

80007f70 <_realloc_r>:
80007f70:	d4 31       	pushm	r0-r7,lr
80007f72:	20 1d       	sub	sp,4
80007f74:	16 94       	mov	r4,r11
80007f76:	18 92       	mov	r2,r12
80007f78:	14 9b       	mov	r11,r10
80007f7a:	58 04       	cp.w	r4,0
80007f7c:	c0 51       	brne	80007f86 <_realloc_r+0x16>
80007f7e:	fe b0 fa c3 	rcall	80007504 <_malloc_r>
80007f82:	18 95       	mov	r5,r12
80007f84:	c5 39       	rjmp	8000822a <_realloc_r+0x2ba>
80007f86:	50 0a       	stdsp	sp[0x0],r10
80007f88:	fe b0 fd 07 	rcall	80007996 <__malloc_lock>
80007f8c:	40 0b       	lddsp	r11,sp[0x0]
80007f8e:	f6 c8 ff f5 	sub	r8,r11,-11
80007f92:	e8 c1 00 08 	sub	r1,r4,8
80007f96:	10 96       	mov	r6,r8
80007f98:	62 1c       	ld.w	r12,r1[0x4]
80007f9a:	e0 16 ff f8 	andl	r6,0xfff8
80007f9e:	59 68       	cp.w	r8,22
80007fa0:	f9 b6 08 10 	movls	r6,16
80007fa4:	16 36       	cp.w	r6,r11
80007fa6:	5f 38       	srlo	r8
80007fa8:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007fac:	c0 50       	breq	80007fb6 <_realloc_r+0x46>
80007fae:	30 c8       	mov	r8,12
80007fb0:	30 05       	mov	r5,0
80007fb2:	85 38       	st.w	r2[0xc],r8
80007fb4:	c3 b9       	rjmp	8000822a <_realloc_r+0x2ba>
80007fb6:	18 90       	mov	r0,r12
80007fb8:	e0 10 ff fc 	andl	r0,0xfffc
80007fbc:	0c 30       	cp.w	r0,r6
80007fbe:	e0 84 01 0b 	brge	800081d4 <_realloc_r+0x264>
80007fc2:	e0 68 01 04 	mov	r8,260
80007fc6:	e2 00 00 09 	add	r9,r1,r0
80007fca:	70 25       	ld.w	r5,r8[0x8]
80007fcc:	0a 39       	cp.w	r9,r5
80007fce:	c0 90       	breq	80007fe0 <_realloc_r+0x70>
80007fd0:	72 1a       	ld.w	r10,r9[0x4]
80007fd2:	a1 ca       	cbr	r10,0x0
80007fd4:	f2 0a 00 0a 	add	r10,r9,r10
80007fd8:	74 1a       	ld.w	r10,r10[0x4]
80007fda:	ed ba 00 00 	bld	r10,0x0
80007fde:	c2 20       	breq	80008022 <_realloc_r+0xb2>
80007fe0:	72 1a       	ld.w	r10,r9[0x4]
80007fe2:	e0 1a ff fc 	andl	r10,0xfffc
80007fe6:	f4 00 00 03 	add	r3,r10,r0
80007fea:	0a 39       	cp.w	r9,r5
80007fec:	c1 31       	brne	80008012 <_realloc_r+0xa2>
80007fee:	ec c7 ff f0 	sub	r7,r6,-16
80007ff2:	0e 33       	cp.w	r3,r7
80007ff4:	c1 95       	brlt	80008026 <_realloc_r+0xb6>
80007ff6:	e2 06 00 09 	add	r9,r1,r6
80007ffa:	0c 13       	sub	r3,r6
80007ffc:	a1 a3       	sbr	r3,0x0
80007ffe:	93 13       	st.w	r9[0x4],r3
80008000:	91 29       	st.w	r8[0x8],r9
80008002:	04 9c       	mov	r12,r2
80008004:	62 18       	ld.w	r8,r1[0x4]
80008006:	08 95       	mov	r5,r4
80008008:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000800c:	10 46       	or	r6,r8
8000800e:	83 16       	st.w	r1[0x4],r6
80008010:	c0 b9       	rjmp	80008226 <_realloc_r+0x2b6>
80008012:	0c 33       	cp.w	r3,r6
80008014:	c0 95       	brlt	80008026 <_realloc_r+0xb6>
80008016:	72 28       	ld.w	r8,r9[0x8]
80008018:	02 97       	mov	r7,r1
8000801a:	72 39       	ld.w	r9,r9[0xc]
8000801c:	93 28       	st.w	r9[0x8],r8
8000801e:	91 39       	st.w	r8[0xc],r9
80008020:	cd c8       	rjmp	800081d8 <_realloc_r+0x268>
80008022:	30 0a       	mov	r10,0
80008024:	14 99       	mov	r9,r10
80008026:	ed bc 00 00 	bld	r12,0x0
8000802a:	e0 80 00 95 	breq	80008154 <_realloc_r+0x1e4>
8000802e:	62 07       	ld.w	r7,r1[0x0]
80008030:	e2 07 01 07 	sub	r7,r1,r7
80008034:	6e 1c       	ld.w	r12,r7[0x4]
80008036:	e0 1c ff fc 	andl	r12,0xfffc
8000803a:	58 09       	cp.w	r9,0
8000803c:	c5 60       	breq	800080e8 <_realloc_r+0x178>
8000803e:	f8 00 00 03 	add	r3,r12,r0
80008042:	0a 39       	cp.w	r9,r5
80008044:	c4 81       	brne	800080d4 <_realloc_r+0x164>
80008046:	14 03       	add	r3,r10
80008048:	ec c9 ff f0 	sub	r9,r6,-16
8000804c:	12 33       	cp.w	r3,r9
8000804e:	c4 d5       	brlt	800080e8 <_realloc_r+0x178>
80008050:	6e 3a       	ld.w	r10,r7[0xc]
80008052:	6e 29       	ld.w	r9,r7[0x8]
80008054:	95 29       	st.w	r10[0x8],r9
80008056:	93 3a       	st.w	r9[0xc],r10
80008058:	ee c5 ff f8 	sub	r5,r7,-8
8000805c:	e0 ca 00 04 	sub	r10,r0,4
80008060:	e0 4a 00 24 	cp.w	r10,36
80008064:	e0 8b 00 25 	brhi	800080ae <_realloc_r+0x13e>
80008068:	0a 99       	mov	r9,r5
8000806a:	59 3a       	cp.w	r10,19
8000806c:	e0 88 00 1a 	brls	800080a0 <_realloc_r+0x130>
80008070:	09 09       	ld.w	r9,r4++
80008072:	8b 09       	st.w	r5[0x0],r9
80008074:	09 09       	ld.w	r9,r4++
80008076:	8f 39       	st.w	r7[0xc],r9
80008078:	ee c9 ff f0 	sub	r9,r7,-16
8000807c:	59 ba       	cp.w	r10,27
8000807e:	e0 88 00 11 	brls	800080a0 <_realloc_r+0x130>
80008082:	09 0b       	ld.w	r11,r4++
80008084:	93 0b       	st.w	r9[0x0],r11
80008086:	09 09       	ld.w	r9,r4++
80008088:	8f 59       	st.w	r7[0x14],r9
8000808a:	ee c9 ff e8 	sub	r9,r7,-24
8000808e:	e0 4a 00 24 	cp.w	r10,36
80008092:	c0 71       	brne	800080a0 <_realloc_r+0x130>
80008094:	09 0a       	ld.w	r10,r4++
80008096:	93 0a       	st.w	r9[0x0],r10
80008098:	ee c9 ff e0 	sub	r9,r7,-32
8000809c:	09 0a       	ld.w	r10,r4++
8000809e:	8f 7a       	st.w	r7[0x1c],r10
800080a0:	09 0a       	ld.w	r10,r4++
800080a2:	12 aa       	st.w	r9++,r10
800080a4:	68 0a       	ld.w	r10,r4[0x0]
800080a6:	93 0a       	st.w	r9[0x0],r10
800080a8:	68 1a       	ld.w	r10,r4[0x4]
800080aa:	93 1a       	st.w	r9[0x4],r10
800080ac:	c0 78       	rjmp	800080ba <_realloc_r+0x14a>
800080ae:	50 08       	stdsp	sp[0x0],r8
800080b0:	08 9b       	mov	r11,r4
800080b2:	0a 9c       	mov	r12,r5
800080b4:	fe b0 fc 4b 	rcall	8000794a <memmove>
800080b8:	40 08       	lddsp	r8,sp[0x0]
800080ba:	ee 06 00 09 	add	r9,r7,r6
800080be:	0c 13       	sub	r3,r6
800080c0:	a1 a3       	sbr	r3,0x0
800080c2:	93 13       	st.w	r9[0x4],r3
800080c4:	91 29       	st.w	r8[0x8],r9
800080c6:	04 9c       	mov	r12,r2
800080c8:	6e 18       	ld.w	r8,r7[0x4]
800080ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800080ce:	10 46       	or	r6,r8
800080d0:	8f 16       	st.w	r7[0x4],r6
800080d2:	ca a8       	rjmp	80008226 <_realloc_r+0x2b6>
800080d4:	14 03       	add	r3,r10
800080d6:	0c 33       	cp.w	r3,r6
800080d8:	c0 85       	brlt	800080e8 <_realloc_r+0x178>
800080da:	72 28       	ld.w	r8,r9[0x8]
800080dc:	72 39       	ld.w	r9,r9[0xc]
800080de:	93 28       	st.w	r9[0x8],r8
800080e0:	91 39       	st.w	r8[0xc],r9
800080e2:	6e 28       	ld.w	r8,r7[0x8]
800080e4:	6e 39       	ld.w	r9,r7[0xc]
800080e6:	c0 78       	rjmp	800080f4 <_realloc_r+0x184>
800080e8:	f8 00 00 03 	add	r3,r12,r0
800080ec:	0c 33       	cp.w	r3,r6
800080ee:	c3 35       	brlt	80008154 <_realloc_r+0x1e4>
800080f0:	6e 39       	ld.w	r9,r7[0xc]
800080f2:	6e 28       	ld.w	r8,r7[0x8]
800080f4:	93 28       	st.w	r9[0x8],r8
800080f6:	91 39       	st.w	r8[0xc],r9
800080f8:	e0 ca 00 04 	sub	r10,r0,4
800080fc:	ee cc ff f8 	sub	r12,r7,-8
80008100:	e0 4a 00 24 	cp.w	r10,36
80008104:	e0 8b 00 24 	brhi	8000814c <_realloc_r+0x1dc>
80008108:	59 3a       	cp.w	r10,19
8000810a:	e0 88 00 1a 	brls	8000813e <_realloc_r+0x1ce>
8000810e:	09 08       	ld.w	r8,r4++
80008110:	99 08       	st.w	r12[0x0],r8
80008112:	09 08       	ld.w	r8,r4++
80008114:	8f 38       	st.w	r7[0xc],r8
80008116:	ee cc ff f0 	sub	r12,r7,-16
8000811a:	59 ba       	cp.w	r10,27
8000811c:	e0 88 00 11 	brls	8000813e <_realloc_r+0x1ce>
80008120:	09 08       	ld.w	r8,r4++
80008122:	99 08       	st.w	r12[0x0],r8
80008124:	09 08       	ld.w	r8,r4++
80008126:	8f 58       	st.w	r7[0x14],r8
80008128:	ee cc ff e8 	sub	r12,r7,-24
8000812c:	e0 4a 00 24 	cp.w	r10,36
80008130:	c0 71       	brne	8000813e <_realloc_r+0x1ce>
80008132:	09 08       	ld.w	r8,r4++
80008134:	99 08       	st.w	r12[0x0],r8
80008136:	ee cc ff e0 	sub	r12,r7,-32
8000813a:	09 08       	ld.w	r8,r4++
8000813c:	8f 78       	st.w	r7[0x1c],r8
8000813e:	09 08       	ld.w	r8,r4++
80008140:	18 a8       	st.w	r12++,r8
80008142:	68 08       	ld.w	r8,r4[0x0]
80008144:	99 08       	st.w	r12[0x0],r8
80008146:	68 18       	ld.w	r8,r4[0x4]
80008148:	99 18       	st.w	r12[0x4],r8
8000814a:	c4 78       	rjmp	800081d8 <_realloc_r+0x268>
8000814c:	08 9b       	mov	r11,r4
8000814e:	fe b0 fb fe 	rcall	8000794a <memmove>
80008152:	c4 38       	rjmp	800081d8 <_realloc_r+0x268>
80008154:	04 9c       	mov	r12,r2
80008156:	fe b0 f9 d7 	rcall	80007504 <_malloc_r>
8000815a:	18 95       	mov	r5,r12
8000815c:	c3 a0       	breq	800081d0 <_realloc_r+0x260>
8000815e:	62 18       	ld.w	r8,r1[0x4]
80008160:	f8 c9 00 08 	sub	r9,r12,8
80008164:	a1 c8       	cbr	r8,0x0
80008166:	e2 08 00 08 	add	r8,r1,r8
8000816a:	10 39       	cp.w	r9,r8
8000816c:	c0 71       	brne	8000817a <_realloc_r+0x20a>
8000816e:	72 13       	ld.w	r3,r9[0x4]
80008170:	02 97       	mov	r7,r1
80008172:	e0 13 ff fc 	andl	r3,0xfffc
80008176:	00 03       	add	r3,r0
80008178:	c3 08       	rjmp	800081d8 <_realloc_r+0x268>
8000817a:	e0 ca 00 04 	sub	r10,r0,4
8000817e:	e0 4a 00 24 	cp.w	r10,36
80008182:	e0 8b 00 20 	brhi	800081c2 <_realloc_r+0x252>
80008186:	08 99       	mov	r9,r4
80008188:	18 98       	mov	r8,r12
8000818a:	59 3a       	cp.w	r10,19
8000818c:	e0 88 00 14 	brls	800081b4 <_realloc_r+0x244>
80008190:	13 0b       	ld.w	r11,r9++
80008192:	10 ab       	st.w	r8++,r11
80008194:	13 0b       	ld.w	r11,r9++
80008196:	10 ab       	st.w	r8++,r11
80008198:	59 ba       	cp.w	r10,27
8000819a:	e0 88 00 0d 	brls	800081b4 <_realloc_r+0x244>
8000819e:	13 0b       	ld.w	r11,r9++
800081a0:	10 ab       	st.w	r8++,r11
800081a2:	13 0b       	ld.w	r11,r9++
800081a4:	10 ab       	st.w	r8++,r11
800081a6:	e0 4a 00 24 	cp.w	r10,36
800081aa:	c0 51       	brne	800081b4 <_realloc_r+0x244>
800081ac:	13 0a       	ld.w	r10,r9++
800081ae:	10 aa       	st.w	r8++,r10
800081b0:	13 0a       	ld.w	r10,r9++
800081b2:	10 aa       	st.w	r8++,r10
800081b4:	13 0a       	ld.w	r10,r9++
800081b6:	10 aa       	st.w	r8++,r10
800081b8:	72 0a       	ld.w	r10,r9[0x0]
800081ba:	91 0a       	st.w	r8[0x0],r10
800081bc:	72 19       	ld.w	r9,r9[0x4]
800081be:	91 19       	st.w	r8[0x4],r9
800081c0:	c0 48       	rjmp	800081c8 <_realloc_r+0x258>
800081c2:	08 9b       	mov	r11,r4
800081c4:	fe b0 fb c3 	rcall	8000794a <memmove>
800081c8:	08 9b       	mov	r11,r4
800081ca:	04 9c       	mov	r12,r2
800081cc:	fe b0 f6 f6 	rcall	80006fb8 <_free_r>
800081d0:	04 9c       	mov	r12,r2
800081d2:	c2 a8       	rjmp	80008226 <_realloc_r+0x2b6>
800081d4:	00 93       	mov	r3,r0
800081d6:	02 97       	mov	r7,r1
800081d8:	e6 06 01 09 	sub	r9,r3,r6
800081dc:	6e 18       	ld.w	r8,r7[0x4]
800081de:	58 f9       	cp.w	r9,15
800081e0:	e0 88 00 16 	brls	8000820c <_realloc_r+0x29c>
800081e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800081e8:	ed e8 10 08 	or	r8,r6,r8
800081ec:	8f 18       	st.w	r7[0x4],r8
800081ee:	12 98       	mov	r8,r9
800081f0:	a1 a8       	sbr	r8,0x0
800081f2:	ee 06 00 0b 	add	r11,r7,r6
800081f6:	f6 09 00 09 	add	r9,r11,r9
800081fa:	97 18       	st.w	r11[0x4],r8
800081fc:	72 18       	ld.w	r8,r9[0x4]
800081fe:	a1 a8       	sbr	r8,0x0
80008200:	2f 8b       	sub	r11,-8
80008202:	93 18       	st.w	r9[0x4],r8
80008204:	04 9c       	mov	r12,r2
80008206:	fe b0 f6 d9 	rcall	80006fb8 <_free_r>
8000820a:	c0 b8       	rjmp	80008220 <_realloc_r+0x2b0>
8000820c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008210:	e7 e8 10 08 	or	r8,r3,r8
80008214:	8f 18       	st.w	r7[0x4],r8
80008216:	ee 03 00 03 	add	r3,r7,r3
8000821a:	66 18       	ld.w	r8,r3[0x4]
8000821c:	a1 a8       	sbr	r8,0x0
8000821e:	87 18       	st.w	r3[0x4],r8
80008220:	04 9c       	mov	r12,r2
80008222:	ee c5 ff f8 	sub	r5,r7,-8
80008226:	fe b0 fb b9 	rcall	80007998 <__malloc_unlock>
8000822a:	0a 9c       	mov	r12,r5
8000822c:	2f fd       	sub	sp,-4
8000822e:	d8 32       	popm	r0-r7,pc

80008230 <__isinfd>:
80008230:	14 98       	mov	r8,r10
80008232:	fc 19 7f f0 	movh	r9,0x7ff0
80008236:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000823a:	f0 0b 11 00 	rsub	r11,r8,0
8000823e:	f7 e8 10 08 	or	r8,r11,r8
80008242:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008246:	f2 08 01 08 	sub	r8,r9,r8
8000824a:	f0 0c 11 00 	rsub	r12,r8,0
8000824e:	f9 e8 10 08 	or	r8,r12,r8
80008252:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008256:	2f fc       	sub	r12,-1
80008258:	5e fc       	retal	r12

8000825a <__isnand>:
8000825a:	14 98       	mov	r8,r10
8000825c:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008260:	f0 0c 11 00 	rsub	r12,r8,0
80008264:	10 4c       	or	r12,r8
80008266:	fc 18 7f f0 	movh	r8,0x7ff0
8000826a:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000826e:	f0 0c 01 0c 	sub	r12,r8,r12
80008272:	bf 9c       	lsr	r12,0x1f
80008274:	5e fc       	retal	r12
80008276:	d7 03       	nop

80008278 <_sbrk_r>:
80008278:	d4 21       	pushm	r4-r7,lr
8000827a:	30 08       	mov	r8,0
8000827c:	18 97       	mov	r7,r12
8000827e:	e0 66 06 70 	mov	r6,1648
80008282:	16 9c       	mov	r12,r11
80008284:	8d 08       	st.w	r6[0x0],r8
80008286:	ca fc       	rcall	800083e4 <_sbrk>
80008288:	5b fc       	cp.w	r12,-1
8000828a:	c0 51       	brne	80008294 <_sbrk_r+0x1c>
8000828c:	6c 08       	ld.w	r8,r6[0x0]
8000828e:	58 08       	cp.w	r8,0
80008290:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008294:	d8 22       	popm	r4-r7,pc
80008296:	d7 03       	nop

80008298 <__sclose>:
80008298:	d4 01       	pushm	lr
8000829a:	96 7b       	ld.sh	r11,r11[0xe]
8000829c:	cf ec       	rcall	80008498 <_close_r>
8000829e:	d8 02       	popm	pc

800082a0 <__sseek>:
800082a0:	d4 21       	pushm	r4-r7,lr
800082a2:	16 97       	mov	r7,r11
800082a4:	96 7b       	ld.sh	r11,r11[0xe]
800082a6:	c8 5d       	rcall	800085b0 <_lseek_r>
800082a8:	8e 68       	ld.sh	r8,r7[0xc]
800082aa:	10 99       	mov	r9,r8
800082ac:	ad c8       	cbr	r8,0xc
800082ae:	ad a9       	sbr	r9,0xc
800082b0:	5b fc       	cp.w	r12,-1
800082b2:	ef f8 0c 06 	st.heq	r7[0xc],r8
800082b6:	ef f9 1c 06 	st.hne	r7[0xc],r9
800082ba:	ef fc 1a 15 	st.wne	r7[0x54],r12
800082be:	d8 22       	popm	r4-r7,pc

800082c0 <__swrite>:
800082c0:	d4 21       	pushm	r4-r7,lr
800082c2:	96 68       	ld.sh	r8,r11[0xc]
800082c4:	16 97       	mov	r7,r11
800082c6:	14 95       	mov	r5,r10
800082c8:	12 94       	mov	r4,r9
800082ca:	e2 18 01 00 	andl	r8,0x100,COH
800082ce:	18 96       	mov	r6,r12
800082d0:	c0 50       	breq	800082da <__swrite+0x1a>
800082d2:	30 29       	mov	r9,2
800082d4:	30 0a       	mov	r10,0
800082d6:	96 7b       	ld.sh	r11,r11[0xe]
800082d8:	c6 cd       	rcall	800085b0 <_lseek_r>
800082da:	8e 68       	ld.sh	r8,r7[0xc]
800082dc:	ad c8       	cbr	r8,0xc
800082de:	08 99       	mov	r9,r4
800082e0:	0a 9a       	mov	r10,r5
800082e2:	8e 7b       	ld.sh	r11,r7[0xe]
800082e4:	0c 9c       	mov	r12,r6
800082e6:	ae 68       	st.h	r7[0xc],r8
800082e8:	c9 ac       	rcall	8000841c <_write_r>
800082ea:	d8 22       	popm	r4-r7,pc

800082ec <__sread>:
800082ec:	d4 21       	pushm	r4-r7,lr
800082ee:	16 97       	mov	r7,r11
800082f0:	96 7b       	ld.sh	r11,r11[0xe]
800082f2:	c7 1d       	rcall	800085d4 <_read_r>
800082f4:	c0 65       	brlt	80008300 <__sread+0x14>
800082f6:	6f 58       	ld.w	r8,r7[0x54]
800082f8:	18 08       	add	r8,r12
800082fa:	ef 48 00 54 	st.w	r7[84],r8
800082fe:	d8 22       	popm	r4-r7,pc
80008300:	8e 68       	ld.sh	r8,r7[0xc]
80008302:	ad c8       	cbr	r8,0xc
80008304:	ae 68       	st.h	r7[0xc],r8
80008306:	d8 22       	popm	r4-r7,pc

80008308 <strlen>:
80008308:	30 09       	mov	r9,0
8000830a:	18 98       	mov	r8,r12
8000830c:	c0 28       	rjmp	80008310 <strlen+0x8>
8000830e:	2f f8       	sub	r8,-1
80008310:	11 8a       	ld.ub	r10,r8[0x0]
80008312:	f2 0a 18 00 	cp.b	r10,r9
80008316:	cf c1       	brne	8000830e <strlen+0x6>
80008318:	f0 0c 01 0c 	sub	r12,r8,r12
8000831c:	5e fc       	retal	r12
8000831e:	d7 03       	nop

80008320 <_close>:
80008320:	30 28       	mov	r8,2
80008322:	d6 73       	breakpoint
80008324:	3f fc       	mov	r12,-1
80008326:	35 8b       	mov	r11,88
80008328:	58 0c       	cp.w	r12,0
8000832a:	5e 4c       	retge	r12
8000832c:	e0 6a 06 70 	mov	r10,1648
80008330:	95 0b       	st.w	r10[0x0],r11
80008332:	5e fc       	retal	r12

80008334 <_lseek>:
80008334:	30 58       	mov	r8,5
80008336:	d6 73       	breakpoint
80008338:	3f fc       	mov	r12,-1
8000833a:	35 8b       	mov	r11,88
8000833c:	58 0c       	cp.w	r12,0
8000833e:	5e 4c       	retge	r12
80008340:	e0 6a 06 70 	mov	r10,1648
80008344:	95 0b       	st.w	r10[0x0],r11
80008346:	5e fc       	retal	r12

80008348 <_read>:
80008348:	30 38       	mov	r8,3
8000834a:	d6 73       	breakpoint
8000834c:	3f fc       	mov	r12,-1
8000834e:	35 8b       	mov	r11,88
80008350:	58 0c       	cp.w	r12,0
80008352:	5e 4c       	retge	r12
80008354:	e0 6a 06 70 	mov	r10,1648
80008358:	95 0b       	st.w	r10[0x0],r11
8000835a:	5e fc       	retal	r12

8000835c <_write>:
8000835c:	30 48       	mov	r8,4
8000835e:	d6 73       	breakpoint
80008360:	3f fc       	mov	r12,-1
80008362:	35 8b       	mov	r11,88
80008364:	58 0c       	cp.w	r12,0
80008366:	5e 4c       	retge	r12
80008368:	e0 6a 06 70 	mov	r10,1648
8000836c:	95 0b       	st.w	r10[0x0],r11
8000836e:	5e fc       	retal	r12

80008370 <isatty>:
80008370:	30 b8       	mov	r8,11
80008372:	d6 73       	breakpoint
80008374:	3f fc       	mov	r12,-1
80008376:	35 8b       	mov	r11,88
80008378:	58 0c       	cp.w	r12,0
8000837a:	5e 4c       	retge	r12
8000837c:	e0 6a 06 70 	mov	r10,1648
80008380:	95 0b       	st.w	r10[0x0],r11
80008382:	5e fc       	retal	r12

80008384 <_fstat_host>:
80008384:	30 98       	mov	r8,9
80008386:	d6 73       	breakpoint
80008388:	3f fc       	mov	r12,-1
8000838a:	35 8b       	mov	r11,88
8000838c:	58 0c       	cp.w	r12,0
8000838e:	5e 4c       	retge	r12
80008390:	e0 6a 06 70 	mov	r10,1648
80008394:	95 0b       	st.w	r10[0x0],r11
80008396:	5e fc       	retal	r12

80008398 <_fstat>:
80008398:	d4 21       	pushm	r4-r7,lr
8000839a:	21 0d       	sub	sp,64
8000839c:	16 97       	mov	r7,r11
8000839e:	1a 9b       	mov	r11,sp
800083a0:	cf 2f       	rcall	80008384 <_fstat_host>
800083a2:	c0 34       	brge	800083a8 <_fstat+0x10>
800083a4:	3f fc       	mov	r12,-1
800083a6:	c1 c8       	rjmp	800083de <_fstat+0x46>
800083a8:	40 08       	lddsp	r8,sp[0x0]
800083aa:	ae 08       	st.h	r7[0x0],r8
800083ac:	40 18       	lddsp	r8,sp[0x4]
800083ae:	ae 18       	st.h	r7[0x2],r8
800083b0:	40 28       	lddsp	r8,sp[0x8]
800083b2:	8f 18       	st.w	r7[0x4],r8
800083b4:	40 38       	lddsp	r8,sp[0xc]
800083b6:	ae 48       	st.h	r7[0x8],r8
800083b8:	40 48       	lddsp	r8,sp[0x10]
800083ba:	ae 58       	st.h	r7[0xa],r8
800083bc:	40 58       	lddsp	r8,sp[0x14]
800083be:	ae 68       	st.h	r7[0xc],r8
800083c0:	40 68       	lddsp	r8,sp[0x18]
800083c2:	ae 78       	st.h	r7[0xe],r8
800083c4:	40 88       	lddsp	r8,sp[0x20]
800083c6:	8f 48       	st.w	r7[0x10],r8
800083c8:	40 a8       	lddsp	r8,sp[0x28]
800083ca:	8f b8       	st.w	r7[0x2c],r8
800083cc:	40 c8       	lddsp	r8,sp[0x30]
800083ce:	8f c8       	st.w	r7[0x30],r8
800083d0:	40 d8       	lddsp	r8,sp[0x34]
800083d2:	8f 58       	st.w	r7[0x14],r8
800083d4:	40 e8       	lddsp	r8,sp[0x38]
800083d6:	30 0c       	mov	r12,0
800083d8:	8f 78       	st.w	r7[0x1c],r8
800083da:	40 f8       	lddsp	r8,sp[0x3c]
800083dc:	8f 98       	st.w	r7[0x24],r8
800083de:	2f 0d       	sub	sp,-64
800083e0:	d8 22       	popm	r4-r7,pc
800083e2:	d7 03       	nop

800083e4 <_sbrk>:
800083e4:	d4 01       	pushm	lr
800083e6:	e0 68 06 5c 	mov	r8,1628
800083ea:	70 09       	ld.w	r9,r8[0x0]
800083ec:	58 09       	cp.w	r9,0
800083ee:	c0 41       	brne	800083f6 <_sbrk+0x12>
800083f0:	e0 69 06 78 	mov	r9,1656
800083f4:	91 09       	st.w	r8[0x0],r9
800083f6:	e0 69 06 5c 	mov	r9,1628
800083fa:	e0 6a f0 00 	mov	r10,61440
800083fe:	72 08       	ld.w	r8,r9[0x0]
80008400:	f0 0c 00 0c 	add	r12,r8,r12
80008404:	14 3c       	cp.w	r12,r10
80008406:	e0 8b 00 04 	brhi	8000840e <_sbrk+0x2a>
8000840a:	93 0c       	st.w	r9[0x0],r12
8000840c:	c0 58       	rjmp	80008416 <_sbrk+0x32>
8000840e:	c5 5c       	rcall	800084b8 <__errno>
80008410:	30 c8       	mov	r8,12
80008412:	99 08       	st.w	r12[0x0],r8
80008414:	3f f8       	mov	r8,-1
80008416:	10 9c       	mov	r12,r8
80008418:	d8 02       	popm	pc
8000841a:	d7 03       	nop

8000841c <_write_r>:
8000841c:	d4 21       	pushm	r4-r7,lr
8000841e:	16 98       	mov	r8,r11
80008420:	18 97       	mov	r7,r12
80008422:	10 9c       	mov	r12,r8
80008424:	30 08       	mov	r8,0
80008426:	14 9b       	mov	r11,r10
80008428:	e0 66 06 70 	mov	r6,1648
8000842c:	12 9a       	mov	r10,r9
8000842e:	8d 08       	st.w	r6[0x0],r8
80008430:	c9 6f       	rcall	8000835c <_write>
80008432:	5b fc       	cp.w	r12,-1
80008434:	c0 51       	brne	8000843e <_write_r+0x22>
80008436:	6c 08       	ld.w	r8,r6[0x0]
80008438:	58 08       	cp.w	r8,0
8000843a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000843e:	d8 22       	popm	r4-r7,pc

80008440 <_calloc_r>:
80008440:	d4 21       	pushm	r4-r7,lr
80008442:	f4 0b 02 4b 	mul	r11,r10,r11
80008446:	fe b0 f8 5f 	rcall	80007504 <_malloc_r>
8000844a:	18 97       	mov	r7,r12
8000844c:	c2 30       	breq	80008492 <_calloc_r+0x52>
8000844e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008452:	e0 1a ff fc 	andl	r10,0xfffc
80008456:	20 4a       	sub	r10,4
80008458:	e0 4a 00 24 	cp.w	r10,36
8000845c:	e0 8b 00 18 	brhi	8000848c <_calloc_r+0x4c>
80008460:	18 98       	mov	r8,r12
80008462:	59 3a       	cp.w	r10,19
80008464:	e0 88 00 0f 	brls	80008482 <_calloc_r+0x42>
80008468:	30 09       	mov	r9,0
8000846a:	10 a9       	st.w	r8++,r9
8000846c:	10 a9       	st.w	r8++,r9
8000846e:	59 ba       	cp.w	r10,27
80008470:	e0 88 00 09 	brls	80008482 <_calloc_r+0x42>
80008474:	10 a9       	st.w	r8++,r9
80008476:	10 a9       	st.w	r8++,r9
80008478:	e0 4a 00 24 	cp.w	r10,36
8000847c:	c0 31       	brne	80008482 <_calloc_r+0x42>
8000847e:	10 a9       	st.w	r8++,r9
80008480:	10 a9       	st.w	r8++,r9
80008482:	30 09       	mov	r9,0
80008484:	10 a9       	st.w	r8++,r9
80008486:	91 19       	st.w	r8[0x4],r9
80008488:	91 09       	st.w	r8[0x0],r9
8000848a:	c0 48       	rjmp	80008492 <_calloc_r+0x52>
8000848c:	30 0b       	mov	r11,0
8000848e:	fe b0 fa 7d 	rcall	80007988 <memset>
80008492:	0e 9c       	mov	r12,r7
80008494:	d8 22       	popm	r4-r7,pc
80008496:	d7 03       	nop

80008498 <_close_r>:
80008498:	d4 21       	pushm	r4-r7,lr
8000849a:	30 08       	mov	r8,0
8000849c:	18 97       	mov	r7,r12
8000849e:	e0 66 06 70 	mov	r6,1648
800084a2:	16 9c       	mov	r12,r11
800084a4:	8d 08       	st.w	r6[0x0],r8
800084a6:	c3 df       	rcall	80008320 <_close>
800084a8:	5b fc       	cp.w	r12,-1
800084aa:	c0 51       	brne	800084b4 <_close_r+0x1c>
800084ac:	6c 08       	ld.w	r8,r6[0x0]
800084ae:	58 08       	cp.w	r8,0
800084b0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800084b4:	d8 22       	popm	r4-r7,pc
800084b6:	d7 03       	nop

800084b8 <__errno>:
800084b8:	e0 68 01 00 	mov	r8,256
800084bc:	70 0c       	ld.w	r12,r8[0x0]
800084be:	2f 4c       	sub	r12,-12
800084c0:	5e fc       	retal	r12
800084c2:	d7 03       	nop

800084c4 <_fclose_r>:
800084c4:	d4 21       	pushm	r4-r7,lr
800084c6:	18 96       	mov	r6,r12
800084c8:	16 97       	mov	r7,r11
800084ca:	58 0b       	cp.w	r11,0
800084cc:	c0 31       	brne	800084d2 <_fclose_r+0xe>
800084ce:	16 95       	mov	r5,r11
800084d0:	c5 38       	rjmp	80008576 <_fclose_r+0xb2>
800084d2:	fe b0 f4 87 	rcall	80006de0 <__sfp_lock_acquire>
800084d6:	58 06       	cp.w	r6,0
800084d8:	c0 70       	breq	800084e6 <_fclose_r+0x22>
800084da:	6c 68       	ld.w	r8,r6[0x18]
800084dc:	58 08       	cp.w	r8,0
800084de:	c0 41       	brne	800084e6 <_fclose_r+0x22>
800084e0:	0c 9c       	mov	r12,r6
800084e2:	fe b0 f4 d1 	rcall	80006e84 <__sinit>
800084e6:	fe c8 ed 3e 	sub	r8,pc,-4802
800084ea:	10 37       	cp.w	r7,r8
800084ec:	c0 31       	brne	800084f2 <_fclose_r+0x2e>
800084ee:	6c 07       	ld.w	r7,r6[0x0]
800084f0:	c0 c8       	rjmp	80008508 <_fclose_r+0x44>
800084f2:	fe c8 ed 2a 	sub	r8,pc,-4822
800084f6:	10 37       	cp.w	r7,r8
800084f8:	c0 31       	brne	800084fe <_fclose_r+0x3a>
800084fa:	6c 17       	ld.w	r7,r6[0x4]
800084fc:	c0 68       	rjmp	80008508 <_fclose_r+0x44>
800084fe:	fe c8 ed 16 	sub	r8,pc,-4842
80008502:	10 37       	cp.w	r7,r8
80008504:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008508:	8e 69       	ld.sh	r9,r7[0xc]
8000850a:	30 08       	mov	r8,0
8000850c:	f0 09 19 00 	cp.h	r9,r8
80008510:	c0 51       	brne	8000851a <_fclose_r+0x56>
80008512:	fe b0 f4 68 	rcall	80006de2 <__sfp_lock_release>
80008516:	30 05       	mov	r5,0
80008518:	c2 f8       	rjmp	80008576 <_fclose_r+0xb2>
8000851a:	0e 9b       	mov	r11,r7
8000851c:	0c 9c       	mov	r12,r6
8000851e:	fe b0 f3 db 	rcall	80006cd4 <_fflush_r>
80008522:	6e c8       	ld.w	r8,r7[0x30]
80008524:	18 95       	mov	r5,r12
80008526:	58 08       	cp.w	r8,0
80008528:	c0 60       	breq	80008534 <_fclose_r+0x70>
8000852a:	6e 8b       	ld.w	r11,r7[0x20]
8000852c:	0c 9c       	mov	r12,r6
8000852e:	5d 18       	icall	r8
80008530:	f9 b5 05 ff 	movlt	r5,-1
80008534:	8e 68       	ld.sh	r8,r7[0xc]
80008536:	ed b8 00 07 	bld	r8,0x7
8000853a:	c0 51       	brne	80008544 <_fclose_r+0x80>
8000853c:	6e 4b       	ld.w	r11,r7[0x10]
8000853e:	0c 9c       	mov	r12,r6
80008540:	fe b0 f5 3c 	rcall	80006fb8 <_free_r>
80008544:	6e db       	ld.w	r11,r7[0x34]
80008546:	58 0b       	cp.w	r11,0
80008548:	c0 a0       	breq	8000855c <_fclose_r+0x98>
8000854a:	ee c8 ff bc 	sub	r8,r7,-68
8000854e:	10 3b       	cp.w	r11,r8
80008550:	c0 40       	breq	80008558 <_fclose_r+0x94>
80008552:	0c 9c       	mov	r12,r6
80008554:	fe b0 f5 32 	rcall	80006fb8 <_free_r>
80008558:	30 08       	mov	r8,0
8000855a:	8f d8       	st.w	r7[0x34],r8
8000855c:	6f 2b       	ld.w	r11,r7[0x48]
8000855e:	58 0b       	cp.w	r11,0
80008560:	c0 70       	breq	8000856e <_fclose_r+0xaa>
80008562:	0c 9c       	mov	r12,r6
80008564:	fe b0 f5 2a 	rcall	80006fb8 <_free_r>
80008568:	30 08       	mov	r8,0
8000856a:	ef 48 00 48 	st.w	r7[72],r8
8000856e:	30 08       	mov	r8,0
80008570:	ae 68       	st.h	r7[0xc],r8
80008572:	fe b0 f4 38 	rcall	80006de2 <__sfp_lock_release>
80008576:	0a 9c       	mov	r12,r5
80008578:	d8 22       	popm	r4-r7,pc
8000857a:	d7 03       	nop

8000857c <fclose>:
8000857c:	d4 01       	pushm	lr
8000857e:	e0 68 01 00 	mov	r8,256
80008582:	18 9b       	mov	r11,r12
80008584:	70 0c       	ld.w	r12,r8[0x0]
80008586:	c9 ff       	rcall	800084c4 <_fclose_r>
80008588:	d8 02       	popm	pc
8000858a:	d7 03       	nop

8000858c <_fstat_r>:
8000858c:	d4 21       	pushm	r4-r7,lr
8000858e:	16 98       	mov	r8,r11
80008590:	18 97       	mov	r7,r12
80008592:	10 9c       	mov	r12,r8
80008594:	30 08       	mov	r8,0
80008596:	e0 66 06 70 	mov	r6,1648
8000859a:	14 9b       	mov	r11,r10
8000859c:	8d 08       	st.w	r6[0x0],r8
8000859e:	cf de       	rcall	80008398 <_fstat>
800085a0:	5b fc       	cp.w	r12,-1
800085a2:	c0 51       	brne	800085ac <_fstat_r+0x20>
800085a4:	6c 08       	ld.w	r8,r6[0x0]
800085a6:	58 08       	cp.w	r8,0
800085a8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085ac:	d8 22       	popm	r4-r7,pc
800085ae:	d7 03       	nop

800085b0 <_lseek_r>:
800085b0:	d4 21       	pushm	r4-r7,lr
800085b2:	16 98       	mov	r8,r11
800085b4:	18 97       	mov	r7,r12
800085b6:	10 9c       	mov	r12,r8
800085b8:	30 08       	mov	r8,0
800085ba:	14 9b       	mov	r11,r10
800085bc:	e0 66 06 70 	mov	r6,1648
800085c0:	12 9a       	mov	r10,r9
800085c2:	8d 08       	st.w	r6[0x0],r8
800085c4:	cb 8e       	rcall	80008334 <_lseek>
800085c6:	5b fc       	cp.w	r12,-1
800085c8:	c0 51       	brne	800085d2 <_lseek_r+0x22>
800085ca:	6c 08       	ld.w	r8,r6[0x0]
800085cc:	58 08       	cp.w	r8,0
800085ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085d2:	d8 22       	popm	r4-r7,pc

800085d4 <_read_r>:
800085d4:	d4 21       	pushm	r4-r7,lr
800085d6:	16 98       	mov	r8,r11
800085d8:	18 97       	mov	r7,r12
800085da:	10 9c       	mov	r12,r8
800085dc:	30 08       	mov	r8,0
800085de:	14 9b       	mov	r11,r10
800085e0:	e0 66 06 70 	mov	r6,1648
800085e4:	12 9a       	mov	r10,r9
800085e6:	8d 08       	st.w	r6[0x0],r8
800085e8:	cb 0e       	rcall	80008348 <_read>
800085ea:	5b fc       	cp.w	r12,-1
800085ec:	c0 51       	brne	800085f6 <_read_r+0x22>
800085ee:	6c 08       	ld.w	r8,r6[0x0]
800085f0:	58 08       	cp.w	r8,0
800085f2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800085f6:	d8 22       	popm	r4-r7,pc

800085f8 <__avr32_f64_sub_from_add>:
800085f8:	ee 19 80 00 	eorh	r9,0x8000

800085fc <__avr32_f64_sub>:
800085fc:	f7 e9 20 0c 	eor	r12,r11,r9
80008600:	e0 86 00 ca 	brmi	80008794 <__avr32_f64_add_from_sub>
80008604:	eb cd 40 e0 	pushm	r5-r7,lr
80008608:	16 9c       	mov	r12,r11
8000860a:	e6 1c 80 00 	andh	r12,0x8000,COH
8000860e:	bf db       	cbr	r11,0x1f
80008610:	bf d9       	cbr	r9,0x1f
80008612:	10 3a       	cp.w	r10,r8
80008614:	f2 0b 13 00 	cpc	r11,r9
80008618:	c0 92       	brcc	8000862a <__avr32_f64_sub+0x2e>
8000861a:	16 97       	mov	r7,r11
8000861c:	12 9b       	mov	r11,r9
8000861e:	0e 99       	mov	r9,r7
80008620:	14 97       	mov	r7,r10
80008622:	10 9a       	mov	r10,r8
80008624:	0e 98       	mov	r8,r7
80008626:	ee 1c 80 00 	eorh	r12,0x8000
8000862a:	f6 07 16 14 	lsr	r7,r11,0x14
8000862e:	ab 7b       	lsl	r11,0xb
80008630:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008634:	ab 7a       	lsl	r10,0xb
80008636:	bf bb       	sbr	r11,0x1f
80008638:	f2 06 16 14 	lsr	r6,r9,0x14
8000863c:	c4 40       	breq	800086c4 <__avr32_f64_sub_opL_subnormal>
8000863e:	ab 79       	lsl	r9,0xb
80008640:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008644:	ab 78       	lsl	r8,0xb
80008646:	bf b9       	sbr	r9,0x1f

80008648 <__avr32_f64_sub_opL_subnormal_done>:
80008648:	e0 47 07 ff 	cp.w	r7,2047
8000864c:	c4 f0       	breq	800086ea <__avr32_f64_sub_opH_nan_or_inf>
8000864e:	0e 26       	rsub	r6,r7
80008650:	c1 20       	breq	80008674 <__avr32_f64_sub_shift_done>
80008652:	ec 05 11 20 	rsub	r5,r6,32
80008656:	e0 46 00 20 	cp.w	r6,32
8000865a:	c7 c2       	brcc	80008752 <__avr32_f64_sub_longshift>
8000865c:	f0 05 09 4e 	lsl	lr,r8,r5
80008660:	f2 05 09 45 	lsl	r5,r9,r5
80008664:	f0 06 0a 48 	lsr	r8,r8,r6
80008668:	f2 06 0a 49 	lsr	r9,r9,r6
8000866c:	0a 48       	or	r8,r5
8000866e:	58 0e       	cp.w	lr,0
80008670:	5f 1e       	srne	lr
80008672:	1c 48       	or	r8,lr

80008674 <__avr32_f64_sub_shift_done>:
80008674:	10 1a       	sub	r10,r8
80008676:	f6 09 01 4b 	sbc	r11,r11,r9
8000867a:	f6 06 12 00 	clz	r6,r11
8000867e:	c0 e0       	breq	8000869a <__avr32_f64_sub_longnormalize_done>
80008680:	c7 83       	brcs	80008770 <__avr32_f64_sub_longnormalize>
80008682:	ec 0e 11 20 	rsub	lr,r6,32
80008686:	f6 06 09 4b 	lsl	r11,r11,r6
8000868a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000868e:	1c 4b       	or	r11,lr
80008690:	f4 06 09 4a 	lsl	r10,r10,r6
80008694:	0c 17       	sub	r7,r6
80008696:	e0 8a 00 39 	brle	80008708 <__avr32_f64_sub_subnormal_result>

8000869a <__avr32_f64_sub_longnormalize_done>:
8000869a:	f4 09 15 15 	lsl	r9,r10,0x15
8000869e:	ab 9a       	lsr	r10,0xb
800086a0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800086a4:	ab 9b       	lsr	r11,0xb
800086a6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800086aa:	18 4b       	or	r11,r12

800086ac <__avr32_f64_sub_round>:
800086ac:	fc 17 80 00 	movh	r7,0x8000
800086b0:	ed ba 00 00 	bld	r10,0x0
800086b4:	f7 b7 01 ff 	subne	r7,-1
800086b8:	0e 39       	cp.w	r9,r7
800086ba:	5f 29       	srhs	r9
800086bc:	12 0a       	add	r10,r9
800086be:	5c 0b       	acr	r11
800086c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800086c4 <__avr32_f64_sub_opL_subnormal>:
800086c4:	ab 79       	lsl	r9,0xb
800086c6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800086ca:	ab 78       	lsl	r8,0xb
800086cc:	f3 e8 10 0e 	or	lr,r9,r8
800086d0:	f9 b6 01 01 	movne	r6,1
800086d4:	ee 0e 11 00 	rsub	lr,r7,0
800086d8:	f9 b7 00 01 	moveq	r7,1
800086dc:	ef bb 00 1f 	bst	r11,0x1f
800086e0:	f7 ea 10 0e 	or	lr,r11,r10
800086e4:	f9 b7 00 00 	moveq	r7,0
800086e8:	cb 0b       	rjmp	80008648 <__avr32_f64_sub_opL_subnormal_done>

800086ea <__avr32_f64_sub_opH_nan_or_inf>:
800086ea:	bf db       	cbr	r11,0x1f
800086ec:	f7 ea 10 0e 	or	lr,r11,r10
800086f0:	c0 81       	brne	80008700 <__avr32_f64_sub_return_nan>
800086f2:	e0 46 07 ff 	cp.w	r6,2047
800086f6:	c0 50       	breq	80008700 <__avr32_f64_sub_return_nan>
800086f8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800086fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008700 <__avr32_f64_sub_return_nan>:
80008700:	3f fa       	mov	r10,-1
80008702:	3f fb       	mov	r11,-1
80008704:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008708 <__avr32_f64_sub_subnormal_result>:
80008708:	5c 37       	neg	r7
8000870a:	2f f7       	sub	r7,-1
8000870c:	f1 b7 04 c0 	satu	r7,0x6
80008710:	e0 47 00 20 	cp.w	r7,32
80008714:	c1 14       	brge	80008736 <__avr32_f64_sub_subnormal_result+0x2e>
80008716:	ee 08 11 20 	rsub	r8,r7,32
8000871a:	f4 08 09 49 	lsl	r9,r10,r8
8000871e:	5f 16       	srne	r6
80008720:	f4 07 0a 4a 	lsr	r10,r10,r7
80008724:	0c 4a       	or	r10,r6
80008726:	f6 08 09 49 	lsl	r9,r11,r8
8000872a:	f5 e9 10 0a 	or	r10,r10,r9
8000872e:	f4 07 0a 4b 	lsr	r11,r10,r7
80008732:	30 07       	mov	r7,0
80008734:	cb 3b       	rjmp	8000869a <__avr32_f64_sub_longnormalize_done>
80008736:	ee 08 11 40 	rsub	r8,r7,64
8000873a:	f6 08 09 49 	lsl	r9,r11,r8
8000873e:	14 49       	or	r9,r10
80008740:	5f 16       	srne	r6
80008742:	f6 07 0a 4a 	lsr	r10,r11,r7
80008746:	0c 4a       	or	r10,r6
80008748:	30 0b       	mov	r11,0
8000874a:	30 07       	mov	r7,0
8000874c:	ca 7b       	rjmp	8000869a <__avr32_f64_sub_longnormalize_done>
8000874e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008752 <__avr32_f64_sub_longshift>:
80008752:	f1 b6 04 c0 	satu	r6,0x6
80008756:	f0 0e 17 00 	moveq	lr,r8
8000875a:	c0 40       	breq	80008762 <__avr32_f64_sub_longshift+0x10>
8000875c:	f2 05 09 4e 	lsl	lr,r9,r5
80008760:	10 4e       	or	lr,r8
80008762:	f2 06 0a 48 	lsr	r8,r9,r6
80008766:	30 09       	mov	r9,0
80008768:	58 0e       	cp.w	lr,0
8000876a:	5f 1e       	srne	lr
8000876c:	1c 48       	or	r8,lr
8000876e:	c8 3b       	rjmp	80008674 <__avr32_f64_sub_shift_done>

80008770 <__avr32_f64_sub_longnormalize>:
80008770:	f4 06 12 00 	clz	r6,r10
80008774:	f9 b7 03 00 	movlo	r7,0
80008778:	f9 b6 03 00 	movlo	r6,0
8000877c:	f9 bc 03 00 	movlo	r12,0
80008780:	f7 b6 02 e0 	subhs	r6,-32
80008784:	f4 06 09 4b 	lsl	r11,r10,r6
80008788:	30 0a       	mov	r10,0
8000878a:	0c 17       	sub	r7,r6
8000878c:	fe 9a ff be 	brle	80008708 <__avr32_f64_sub_subnormal_result>
80008790:	c8 5b       	rjmp	8000869a <__avr32_f64_sub_longnormalize_done>
80008792:	d7 03       	nop

80008794 <__avr32_f64_add_from_sub>:
80008794:	ee 19 80 00 	eorh	r9,0x8000

80008798 <__avr32_f64_add>:
80008798:	f7 e9 20 0c 	eor	r12,r11,r9
8000879c:	fe 96 ff 2e 	brmi	800085f8 <__avr32_f64_sub_from_add>
800087a0:	eb cd 40 e0 	pushm	r5-r7,lr
800087a4:	16 9c       	mov	r12,r11
800087a6:	e6 1c 80 00 	andh	r12,0x8000,COH
800087aa:	bf db       	cbr	r11,0x1f
800087ac:	bf d9       	cbr	r9,0x1f
800087ae:	12 3b       	cp.w	r11,r9
800087b0:	c0 72       	brcc	800087be <__avr32_f64_add+0x26>
800087b2:	16 97       	mov	r7,r11
800087b4:	12 9b       	mov	r11,r9
800087b6:	0e 99       	mov	r9,r7
800087b8:	14 97       	mov	r7,r10
800087ba:	10 9a       	mov	r10,r8
800087bc:	0e 98       	mov	r8,r7
800087be:	30 0e       	mov	lr,0
800087c0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800087c4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800087c8:	b5 ab       	sbr	r11,0x14
800087ca:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800087ce:	c6 20       	breq	80008892 <__avr32_f64_add_op2_subnormal>
800087d0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800087d4:	b5 a9       	sbr	r9,0x14
800087d6:	e0 47 07 ff 	cp.w	r7,2047
800087da:	c2 80       	breq	8000882a <__avr32_f64_add_opH_nan_or_inf>
800087dc:	0e 26       	rsub	r6,r7
800087de:	c1 20       	breq	80008802 <__avr32_f64_add_shift_done>
800087e0:	e0 46 00 36 	cp.w	r6,54
800087e4:	c1 52       	brcc	8000880e <__avr32_f64_add_res_of_done>
800087e6:	ec 05 11 20 	rsub	r5,r6,32
800087ea:	e0 46 00 20 	cp.w	r6,32
800087ee:	c3 52       	brcc	80008858 <__avr32_f64_add_longshift>
800087f0:	f0 05 09 4e 	lsl	lr,r8,r5
800087f4:	f2 05 09 45 	lsl	r5,r9,r5
800087f8:	f0 06 0a 48 	lsr	r8,r8,r6
800087fc:	f2 06 0a 49 	lsr	r9,r9,r6
80008800:	0a 48       	or	r8,r5

80008802 <__avr32_f64_add_shift_done>:
80008802:	10 0a       	add	r10,r8
80008804:	f6 09 00 4b 	adc	r11,r11,r9
80008808:	ed bb 00 15 	bld	r11,0x15
8000880c:	c3 40       	breq	80008874 <__avr32_f64_add_res_of>

8000880e <__avr32_f64_add_res_of_done>:
8000880e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008812:	18 4b       	or	r11,r12

80008814 <__avr32_f64_add_round>:
80008814:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80008818:	18 4e       	or	lr,r12
8000881a:	ee 1e 80 00 	eorh	lr,0x8000
8000881e:	f1 be 04 20 	satu	lr,0x1
80008822:	1c 0a       	add	r10,lr
80008824:	5c 0b       	acr	r11
80008826:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000882a <__avr32_f64_add_opH_nan_or_inf>:
8000882a:	b5 cb       	cbr	r11,0x14
8000882c:	f7 ea 10 0e 	or	lr,r11,r10
80008830:	c1 01       	brne	80008850 <__avr32_f64_add_return_nan>
80008832:	e0 46 07 ff 	cp.w	r6,2047
80008836:	c0 30       	breq	8000883c <__avr32_f64_add_opL_nan_or_inf>
80008838:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000883c <__avr32_f64_add_opL_nan_or_inf>:
8000883c:	b5 c9       	cbr	r9,0x14
8000883e:	f3 e8 10 0e 	or	lr,r9,r8
80008842:	c0 71       	brne	80008850 <__avr32_f64_add_return_nan>
80008844:	30 0a       	mov	r10,0
80008846:	fc 1b 7f f0 	movh	r11,0x7ff0
8000884a:	18 4b       	or	r11,r12
8000884c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008850 <__avr32_f64_add_return_nan>:
80008850:	3f fa       	mov	r10,-1
80008852:	3f fb       	mov	r11,-1
80008854:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008858 <__avr32_f64_add_longshift>:
80008858:	f1 b6 04 c0 	satu	r6,0x6
8000885c:	f0 0e 17 00 	moveq	lr,r8
80008860:	c0 60       	breq	8000886c <__avr32_f64_add_longshift+0x14>
80008862:	f2 05 09 4e 	lsl	lr,r9,r5
80008866:	58 08       	cp.w	r8,0
80008868:	5f 18       	srne	r8
8000886a:	10 4e       	or	lr,r8
8000886c:	f2 06 0a 48 	lsr	r8,r9,r6
80008870:	30 09       	mov	r9,0
80008872:	cc 8b       	rjmp	80008802 <__avr32_f64_add_shift_done>

80008874 <__avr32_f64_add_res_of>:
80008874:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008878:	a1 9b       	lsr	r11,0x1
8000887a:	5d 0a       	ror	r10
8000887c:	5d 0e       	ror	lr
8000887e:	2f f7       	sub	r7,-1
80008880:	e0 47 07 ff 	cp.w	r7,2047
80008884:	f9 ba 00 00 	moveq	r10,0
80008888:	f9 bb 00 00 	moveq	r11,0
8000888c:	f9 be 00 00 	moveq	lr,0
80008890:	cb fb       	rjmp	8000880e <__avr32_f64_add_res_of_done>

80008892 <__avr32_f64_add_op2_subnormal>:
80008892:	30 16       	mov	r6,1
80008894:	58 07       	cp.w	r7,0
80008896:	ca 01       	brne	800087d6 <__avr32_f64_add+0x3e>
80008898:	b5 cb       	cbr	r11,0x14
8000889a:	10 0a       	add	r10,r8
8000889c:	f6 09 00 4b 	adc	r11,r11,r9
800088a0:	18 4b       	or	r11,r12
800088a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800088a6:	d7 03       	nop

800088a8 <__avr32_f64_to_u32>:
800088a8:	58 0b       	cp.w	r11,0
800088aa:	5e 6d       	retmi	0

800088ac <__avr32_f64_to_s32>:
800088ac:	f6 0c 15 01 	lsl	r12,r11,0x1
800088b0:	b5 9c       	lsr	r12,0x15
800088b2:	e0 2c 03 ff 	sub	r12,1023
800088b6:	5e 3d       	retlo	0
800088b8:	f8 0c 11 1f 	rsub	r12,r12,31
800088bc:	16 99       	mov	r9,r11
800088be:	ab 7b       	lsl	r11,0xb
800088c0:	bf bb       	sbr	r11,0x1f
800088c2:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800088c6:	f6 0c 0a 4b 	lsr	r11,r11,r12
800088ca:	a1 79       	lsl	r9,0x1
800088cc:	5e 2b       	reths	r11
800088ce:	5c 3b       	neg	r11
800088d0:	5e fb       	retal	r11

800088d2 <__avr32_u32_to_f64>:
800088d2:	f8 cb 00 00 	sub	r11,r12,0
800088d6:	30 0c       	mov	r12,0
800088d8:	c0 38       	rjmp	800088de <__avr32_s32_to_f64+0x4>

800088da <__avr32_s32_to_f64>:
800088da:	18 9b       	mov	r11,r12
800088dc:	5c 4b       	abs	r11
800088de:	30 0a       	mov	r10,0
800088e0:	5e 0b       	reteq	r11
800088e2:	d4 01       	pushm	lr
800088e4:	e0 69 04 1e 	mov	r9,1054
800088e8:	f6 08 12 00 	clz	r8,r11
800088ec:	c1 70       	breq	8000891a <__avr32_s32_to_f64+0x40>
800088ee:	c0 c3       	brcs	80008906 <__avr32_s32_to_f64+0x2c>
800088f0:	f0 0e 11 20 	rsub	lr,r8,32
800088f4:	f6 08 09 4b 	lsl	r11,r11,r8
800088f8:	f4 0e 0a 4e 	lsr	lr,r10,lr
800088fc:	1c 4b       	or	r11,lr
800088fe:	f4 08 09 4a 	lsl	r10,r10,r8
80008902:	10 19       	sub	r9,r8
80008904:	c0 b8       	rjmp	8000891a <__avr32_s32_to_f64+0x40>
80008906:	f4 08 12 00 	clz	r8,r10
8000890a:	f9 b8 03 00 	movlo	r8,0
8000890e:	f7 b8 02 e0 	subhs	r8,-32
80008912:	f4 08 09 4b 	lsl	r11,r10,r8
80008916:	30 0a       	mov	r10,0
80008918:	10 19       	sub	r9,r8
8000891a:	58 09       	cp.w	r9,0
8000891c:	e0 89 00 30 	brgt	8000897c <__avr32_s32_to_f64+0xa2>
80008920:	5c 39       	neg	r9
80008922:	2f f9       	sub	r9,-1
80008924:	e0 49 00 36 	cp.w	r9,54
80008928:	c0 43       	brcs	80008930 <__avr32_s32_to_f64+0x56>
8000892a:	30 0b       	mov	r11,0
8000892c:	30 0a       	mov	r10,0
8000892e:	c2 68       	rjmp	8000897a <__avr32_s32_to_f64+0xa0>
80008930:	2f 69       	sub	r9,-10
80008932:	f2 08 11 20 	rsub	r8,r9,32
80008936:	e0 49 00 20 	cp.w	r9,32
8000893a:	c0 b2       	brcc	80008950 <__avr32_s32_to_f64+0x76>
8000893c:	f4 08 09 4e 	lsl	lr,r10,r8
80008940:	f6 08 09 48 	lsl	r8,r11,r8
80008944:	f4 09 0a 4a 	lsr	r10,r10,r9
80008948:	f6 09 0a 4b 	lsr	r11,r11,r9
8000894c:	10 4b       	or	r11,r8
8000894e:	c0 88       	rjmp	8000895e <__avr32_s32_to_f64+0x84>
80008950:	f6 08 09 4e 	lsl	lr,r11,r8
80008954:	14 4e       	or	lr,r10
80008956:	16 9a       	mov	r10,r11
80008958:	30 0b       	mov	r11,0
8000895a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000895e:	ed ba 00 00 	bld	r10,0x0
80008962:	c0 92       	brcc	80008974 <__avr32_s32_to_f64+0x9a>
80008964:	1c 7e       	tst	lr,lr
80008966:	c0 41       	brne	8000896e <__avr32_s32_to_f64+0x94>
80008968:	ed ba 00 01 	bld	r10,0x1
8000896c:	c0 42       	brcc	80008974 <__avr32_s32_to_f64+0x9a>
8000896e:	2f fa       	sub	r10,-1
80008970:	f7 bb 02 ff 	subhs	r11,-1
80008974:	5c fc       	rol	r12
80008976:	5d 0b       	ror	r11
80008978:	5d 0a       	ror	r10
8000897a:	d8 02       	popm	pc
8000897c:	e0 68 03 ff 	mov	r8,1023
80008980:	ed ba 00 0b 	bld	r10,0xb
80008984:	f7 b8 00 ff 	subeq	r8,-1
80008988:	10 0a       	add	r10,r8
8000898a:	5c 0b       	acr	r11
8000898c:	f7 b9 03 fe 	sublo	r9,-2
80008990:	e0 49 07 ff 	cp.w	r9,2047
80008994:	c0 55       	brlt	8000899e <__avr32_s32_to_f64+0xc4>
80008996:	30 0a       	mov	r10,0
80008998:	fc 1b ff e0 	movh	r11,0xffe0
8000899c:	c0 c8       	rjmp	800089b4 <__floatsidf_return_op1>
8000899e:	ed bb 00 1f 	bld	r11,0x1f
800089a2:	f7 b9 01 01 	subne	r9,1
800089a6:	ab 9a       	lsr	r10,0xb
800089a8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800089ac:	a1 7b       	lsl	r11,0x1
800089ae:	ab 9b       	lsr	r11,0xb
800089b0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800089b4 <__floatsidf_return_op1>:
800089b4:	a1 7c       	lsl	r12,0x1
800089b6:	5d 0b       	ror	r11
800089b8:	d8 02       	popm	pc

800089ba <__avr32_f64_cmp_eq>:
800089ba:	10 3a       	cp.w	r10,r8
800089bc:	f2 0b 13 00 	cpc	r11,r9
800089c0:	c0 80       	breq	800089d0 <__avr32_f64_cmp_eq+0x16>
800089c2:	a1 7b       	lsl	r11,0x1
800089c4:	a1 79       	lsl	r9,0x1
800089c6:	14 4b       	or	r11,r10
800089c8:	12 4b       	or	r11,r9
800089ca:	10 4b       	or	r11,r8
800089cc:	5e 0f       	reteq	1
800089ce:	5e fd       	retal	0
800089d0:	a1 7b       	lsl	r11,0x1
800089d2:	fc 1c ff e0 	movh	r12,0xffe0
800089d6:	58 0a       	cp.w	r10,0
800089d8:	f8 0b 13 00 	cpc	r11,r12
800089dc:	5e 8f       	retls	1
800089de:	5e fd       	retal	0

800089e0 <__avr32_f64_cmp_ge>:
800089e0:	1a de       	st.w	--sp,lr
800089e2:	1a d7       	st.w	--sp,r7
800089e4:	a1 7b       	lsl	r11,0x1
800089e6:	5f 3c       	srlo	r12
800089e8:	a1 79       	lsl	r9,0x1
800089ea:	5f 37       	srlo	r7
800089ec:	5c fc       	rol	r12
800089ee:	fc 1e ff e0 	movh	lr,0xffe0
800089f2:	58 0a       	cp.w	r10,0
800089f4:	fc 0b 13 00 	cpc	r11,lr
800089f8:	e0 8b 00 1d 	brhi	80008a32 <__avr32_f64_cmp_ge+0x52>
800089fc:	58 08       	cp.w	r8,0
800089fe:	fc 09 13 00 	cpc	r9,lr
80008a02:	e0 8b 00 18 	brhi	80008a32 <__avr32_f64_cmp_ge+0x52>
80008a06:	58 0b       	cp.w	r11,0
80008a08:	f5 ba 00 00 	subfeq	r10,0
80008a0c:	c1 50       	breq	80008a36 <__avr32_f64_cmp_ge+0x56>
80008a0e:	1b 07       	ld.w	r7,sp++
80008a10:	1b 0e       	ld.w	lr,sp++
80008a12:	58 3c       	cp.w	r12,3
80008a14:	c0 a0       	breq	80008a28 <__avr32_f64_cmp_ge+0x48>
80008a16:	58 1c       	cp.w	r12,1
80008a18:	c0 33       	brcs	80008a1e <__avr32_f64_cmp_ge+0x3e>
80008a1a:	5e 0f       	reteq	1
80008a1c:	5e 1d       	retne	0
80008a1e:	10 3a       	cp.w	r10,r8
80008a20:	f2 0b 13 00 	cpc	r11,r9
80008a24:	5e 2f       	reths	1
80008a26:	5e 3d       	retlo	0
80008a28:	14 38       	cp.w	r8,r10
80008a2a:	f6 09 13 00 	cpc	r9,r11
80008a2e:	5e 2f       	reths	1
80008a30:	5e 3d       	retlo	0
80008a32:	1b 07       	ld.w	r7,sp++
80008a34:	d8 0a       	popm	pc,r12=0
80008a36:	58 17       	cp.w	r7,1
80008a38:	5f 0c       	sreq	r12
80008a3a:	58 09       	cp.w	r9,0
80008a3c:	f5 b8 00 00 	subfeq	r8,0
80008a40:	1b 07       	ld.w	r7,sp++
80008a42:	1b 0e       	ld.w	lr,sp++
80008a44:	5e 0f       	reteq	1
80008a46:	5e fc       	retal	r12

80008a48 <__avr32_f64_cmp_lt>:
80008a48:	1a de       	st.w	--sp,lr
80008a4a:	1a d7       	st.w	--sp,r7
80008a4c:	a1 7b       	lsl	r11,0x1
80008a4e:	5f 3c       	srlo	r12
80008a50:	a1 79       	lsl	r9,0x1
80008a52:	5f 37       	srlo	r7
80008a54:	5c fc       	rol	r12
80008a56:	fc 1e ff e0 	movh	lr,0xffe0
80008a5a:	58 0a       	cp.w	r10,0
80008a5c:	fc 0b 13 00 	cpc	r11,lr
80008a60:	e0 8b 00 1d 	brhi	80008a9a <__avr32_f64_cmp_lt+0x52>
80008a64:	58 08       	cp.w	r8,0
80008a66:	fc 09 13 00 	cpc	r9,lr
80008a6a:	e0 8b 00 18 	brhi	80008a9a <__avr32_f64_cmp_lt+0x52>
80008a6e:	58 0b       	cp.w	r11,0
80008a70:	f5 ba 00 00 	subfeq	r10,0
80008a74:	c1 50       	breq	80008a9e <__avr32_f64_cmp_lt+0x56>
80008a76:	1b 07       	ld.w	r7,sp++
80008a78:	1b 0e       	ld.w	lr,sp++
80008a7a:	58 3c       	cp.w	r12,3
80008a7c:	c0 a0       	breq	80008a90 <__avr32_f64_cmp_lt+0x48>
80008a7e:	58 1c       	cp.w	r12,1
80008a80:	c0 33       	brcs	80008a86 <__avr32_f64_cmp_lt+0x3e>
80008a82:	5e 0d       	reteq	0
80008a84:	5e 1f       	retne	1
80008a86:	10 3a       	cp.w	r10,r8
80008a88:	f2 0b 13 00 	cpc	r11,r9
80008a8c:	5e 2d       	reths	0
80008a8e:	5e 3f       	retlo	1
80008a90:	14 38       	cp.w	r8,r10
80008a92:	f6 09 13 00 	cpc	r9,r11
80008a96:	5e 2d       	reths	0
80008a98:	5e 3f       	retlo	1
80008a9a:	1b 07       	ld.w	r7,sp++
80008a9c:	d8 0a       	popm	pc,r12=0
80008a9e:	58 17       	cp.w	r7,1
80008aa0:	5f 1c       	srne	r12
80008aa2:	58 09       	cp.w	r9,0
80008aa4:	f5 b8 00 00 	subfeq	r8,0
80008aa8:	1b 07       	ld.w	r7,sp++
80008aaa:	1b 0e       	ld.w	lr,sp++
80008aac:	5e 0d       	reteq	0
80008aae:	5e fc       	retal	r12

80008ab0 <__avr32_udiv64>:
80008ab0:	d4 31       	pushm	r0-r7,lr
80008ab2:	1a 97       	mov	r7,sp
80008ab4:	20 3d       	sub	sp,12
80008ab6:	10 9c       	mov	r12,r8
80008ab8:	12 9e       	mov	lr,r9
80008aba:	14 93       	mov	r3,r10
80008abc:	58 09       	cp.w	r9,0
80008abe:	e0 81 00 bd 	brne	80008c38 <__avr32_udiv64+0x188>
80008ac2:	16 38       	cp.w	r8,r11
80008ac4:	e0 88 00 40 	brls	80008b44 <__avr32_udiv64+0x94>
80008ac8:	f0 08 12 00 	clz	r8,r8
80008acc:	c0 d0       	breq	80008ae6 <__avr32_udiv64+0x36>
80008ace:	f6 08 09 4b 	lsl	r11,r11,r8
80008ad2:	f0 09 11 20 	rsub	r9,r8,32
80008ad6:	f8 08 09 4c 	lsl	r12,r12,r8
80008ada:	f4 09 0a 49 	lsr	r9,r10,r9
80008ade:	f4 08 09 43 	lsl	r3,r10,r8
80008ae2:	f3 eb 10 0b 	or	r11,r9,r11
80008ae6:	f8 0e 16 10 	lsr	lr,r12,0x10
80008aea:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008aee:	f6 0e 0d 00 	divu	r0,r11,lr
80008af2:	e6 0b 16 10 	lsr	r11,r3,0x10
80008af6:	00 99       	mov	r9,r0
80008af8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008afc:	e0 0a 02 48 	mul	r8,r0,r10
80008b00:	10 3b       	cp.w	r11,r8
80008b02:	c0 a2       	brcc	80008b16 <__avr32_udiv64+0x66>
80008b04:	20 19       	sub	r9,1
80008b06:	18 0b       	add	r11,r12
80008b08:	18 3b       	cp.w	r11,r12
80008b0a:	c0 63       	brcs	80008b16 <__avr32_udiv64+0x66>
80008b0c:	10 3b       	cp.w	r11,r8
80008b0e:	f7 b9 03 01 	sublo	r9,1
80008b12:	f7 dc e3 0b 	addcs	r11,r11,r12
80008b16:	f6 08 01 01 	sub	r1,r11,r8
80008b1a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008b1e:	e2 0e 0d 00 	divu	r0,r1,lr
80008b22:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008b26:	00 98       	mov	r8,r0
80008b28:	e0 0a 02 4a 	mul	r10,r0,r10
80008b2c:	14 33       	cp.w	r3,r10
80008b2e:	c0 82       	brcc	80008b3e <__avr32_udiv64+0x8e>
80008b30:	20 18       	sub	r8,1
80008b32:	18 03       	add	r3,r12
80008b34:	18 33       	cp.w	r3,r12
80008b36:	c0 43       	brcs	80008b3e <__avr32_udiv64+0x8e>
80008b38:	14 33       	cp.w	r3,r10
80008b3a:	f7 b8 03 01 	sublo	r8,1
80008b3e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80008b42:	cd f8       	rjmp	80008d00 <__avr32_udiv64+0x250>
80008b44:	58 08       	cp.w	r8,0
80008b46:	c0 51       	brne	80008b50 <__avr32_udiv64+0xa0>
80008b48:	30 19       	mov	r9,1
80008b4a:	f2 08 0d 08 	divu	r8,r9,r8
80008b4e:	10 9c       	mov	r12,r8
80008b50:	f8 06 12 00 	clz	r6,r12
80008b54:	c0 41       	brne	80008b5c <__avr32_udiv64+0xac>
80008b56:	18 1b       	sub	r11,r12
80008b58:	30 19       	mov	r9,1
80008b5a:	c4 08       	rjmp	80008bda <__avr32_udiv64+0x12a>
80008b5c:	ec 01 11 20 	rsub	r1,r6,32
80008b60:	f4 01 0a 49 	lsr	r9,r10,r1
80008b64:	f8 06 09 4c 	lsl	r12,r12,r6
80008b68:	f6 06 09 48 	lsl	r8,r11,r6
80008b6c:	f6 01 0a 41 	lsr	r1,r11,r1
80008b70:	f3 e8 10 08 	or	r8,r9,r8
80008b74:	f8 03 16 10 	lsr	r3,r12,0x10
80008b78:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008b7c:	e2 03 0d 00 	divu	r0,r1,r3
80008b80:	f0 0b 16 10 	lsr	r11,r8,0x10
80008b84:	00 9e       	mov	lr,r0
80008b86:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008b8a:	e0 05 02 49 	mul	r9,r0,r5
80008b8e:	12 3b       	cp.w	r11,r9
80008b90:	c0 a2       	brcc	80008ba4 <__avr32_udiv64+0xf4>
80008b92:	20 1e       	sub	lr,1
80008b94:	18 0b       	add	r11,r12
80008b96:	18 3b       	cp.w	r11,r12
80008b98:	c0 63       	brcs	80008ba4 <__avr32_udiv64+0xf4>
80008b9a:	12 3b       	cp.w	r11,r9
80008b9c:	f7 be 03 01 	sublo	lr,1
80008ba0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008ba4:	12 1b       	sub	r11,r9
80008ba6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008baa:	f6 03 0d 02 	divu	r2,r11,r3
80008bae:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008bb2:	04 99       	mov	r9,r2
80008bb4:	e4 05 02 4b 	mul	r11,r2,r5
80008bb8:	16 38       	cp.w	r8,r11
80008bba:	c0 a2       	brcc	80008bce <__avr32_udiv64+0x11e>
80008bbc:	20 19       	sub	r9,1
80008bbe:	18 08       	add	r8,r12
80008bc0:	18 38       	cp.w	r8,r12
80008bc2:	c0 63       	brcs	80008bce <__avr32_udiv64+0x11e>
80008bc4:	16 38       	cp.w	r8,r11
80008bc6:	f7 b9 03 01 	sublo	r9,1
80008bca:	f1 dc e3 08 	addcs	r8,r8,r12
80008bce:	f4 06 09 43 	lsl	r3,r10,r6
80008bd2:	f0 0b 01 0b 	sub	r11,r8,r11
80008bd6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80008bda:	f8 06 16 10 	lsr	r6,r12,0x10
80008bde:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008be2:	f6 06 0d 00 	divu	r0,r11,r6
80008be6:	e6 0b 16 10 	lsr	r11,r3,0x10
80008bea:	00 9a       	mov	r10,r0
80008bec:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008bf0:	e0 0e 02 48 	mul	r8,r0,lr
80008bf4:	10 3b       	cp.w	r11,r8
80008bf6:	c0 a2       	brcc	80008c0a <__avr32_udiv64+0x15a>
80008bf8:	20 1a       	sub	r10,1
80008bfa:	18 0b       	add	r11,r12
80008bfc:	18 3b       	cp.w	r11,r12
80008bfe:	c0 63       	brcs	80008c0a <__avr32_udiv64+0x15a>
80008c00:	10 3b       	cp.w	r11,r8
80008c02:	f7 ba 03 01 	sublo	r10,1
80008c06:	f7 dc e3 0b 	addcs	r11,r11,r12
80008c0a:	f6 08 01 01 	sub	r1,r11,r8
80008c0e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80008c12:	e2 06 0d 00 	divu	r0,r1,r6
80008c16:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80008c1a:	00 98       	mov	r8,r0
80008c1c:	e0 0e 02 4b 	mul	r11,r0,lr
80008c20:	16 33       	cp.w	r3,r11
80008c22:	c0 82       	brcc	80008c32 <__avr32_udiv64+0x182>
80008c24:	20 18       	sub	r8,1
80008c26:	18 03       	add	r3,r12
80008c28:	18 33       	cp.w	r3,r12
80008c2a:	c0 43       	brcs	80008c32 <__avr32_udiv64+0x182>
80008c2c:	16 33       	cp.w	r3,r11
80008c2e:	f7 b8 03 01 	sublo	r8,1
80008c32:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80008c36:	c6 98       	rjmp	80008d08 <__avr32_udiv64+0x258>
80008c38:	16 39       	cp.w	r9,r11
80008c3a:	e0 8b 00 65 	brhi	80008d04 <__avr32_udiv64+0x254>
80008c3e:	f2 09 12 00 	clz	r9,r9
80008c42:	c0 b1       	brne	80008c58 <__avr32_udiv64+0x1a8>
80008c44:	10 3a       	cp.w	r10,r8
80008c46:	5f 2a       	srhs	r10
80008c48:	1c 3b       	cp.w	r11,lr
80008c4a:	5f b8       	srhi	r8
80008c4c:	10 4a       	or	r10,r8
80008c4e:	f2 0a 18 00 	cp.b	r10,r9
80008c52:	c5 90       	breq	80008d04 <__avr32_udiv64+0x254>
80008c54:	30 18       	mov	r8,1
80008c56:	c5 98       	rjmp	80008d08 <__avr32_udiv64+0x258>
80008c58:	f0 09 09 46 	lsl	r6,r8,r9
80008c5c:	f2 03 11 20 	rsub	r3,r9,32
80008c60:	fc 09 09 4e 	lsl	lr,lr,r9
80008c64:	f0 03 0a 48 	lsr	r8,r8,r3
80008c68:	f6 09 09 4c 	lsl	r12,r11,r9
80008c6c:	f4 03 0a 42 	lsr	r2,r10,r3
80008c70:	ef 46 ff f4 	st.w	r7[-12],r6
80008c74:	f6 03 0a 43 	lsr	r3,r11,r3
80008c78:	18 42       	or	r2,r12
80008c7a:	f1 ee 10 0c 	or	r12,r8,lr
80008c7e:	f8 01 16 10 	lsr	r1,r12,0x10
80008c82:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008c86:	e6 01 0d 04 	divu	r4,r3,r1
80008c8a:	e4 03 16 10 	lsr	r3,r2,0x10
80008c8e:	08 9e       	mov	lr,r4
80008c90:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008c94:	e8 06 02 48 	mul	r8,r4,r6
80008c98:	10 33       	cp.w	r3,r8
80008c9a:	c0 a2       	brcc	80008cae <__avr32_udiv64+0x1fe>
80008c9c:	20 1e       	sub	lr,1
80008c9e:	18 03       	add	r3,r12
80008ca0:	18 33       	cp.w	r3,r12
80008ca2:	c0 63       	brcs	80008cae <__avr32_udiv64+0x1fe>
80008ca4:	10 33       	cp.w	r3,r8
80008ca6:	f7 be 03 01 	sublo	lr,1
80008caa:	e7 dc e3 03 	addcs	r3,r3,r12
80008cae:	10 13       	sub	r3,r8
80008cb0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008cb4:	e6 01 0d 00 	divu	r0,r3,r1
80008cb8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008cbc:	00 98       	mov	r8,r0
80008cbe:	e0 06 02 46 	mul	r6,r0,r6
80008cc2:	0c 3b       	cp.w	r11,r6
80008cc4:	c0 a2       	brcc	80008cd8 <__avr32_udiv64+0x228>
80008cc6:	20 18       	sub	r8,1
80008cc8:	18 0b       	add	r11,r12
80008cca:	18 3b       	cp.w	r11,r12
80008ccc:	c0 63       	brcs	80008cd8 <__avr32_udiv64+0x228>
80008cce:	0c 3b       	cp.w	r11,r6
80008cd0:	f7 dc e3 0b 	addcs	r11,r11,r12
80008cd4:	f7 b8 03 01 	sublo	r8,1
80008cd8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008cdc:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008ce0:	0c 1b       	sub	r11,r6
80008ce2:	f0 04 06 42 	mulu.d	r2,r8,r4
80008ce6:	06 95       	mov	r5,r3
80008ce8:	16 35       	cp.w	r5,r11
80008cea:	e0 8b 00 0a 	brhi	80008cfe <__avr32_udiv64+0x24e>
80008cee:	5f 0b       	sreq	r11
80008cf0:	f4 09 09 49 	lsl	r9,r10,r9
80008cf4:	12 32       	cp.w	r2,r9
80008cf6:	5f b9       	srhi	r9
80008cf8:	f7 e9 00 09 	and	r9,r11,r9
80008cfc:	c0 60       	breq	80008d08 <__avr32_udiv64+0x258>
80008cfe:	20 18       	sub	r8,1
80008d00:	30 09       	mov	r9,0
80008d02:	c0 38       	rjmp	80008d08 <__avr32_udiv64+0x258>
80008d04:	30 09       	mov	r9,0
80008d06:	12 98       	mov	r8,r9
80008d08:	10 9a       	mov	r10,r8
80008d0a:	12 93       	mov	r3,r9
80008d0c:	10 92       	mov	r2,r8
80008d0e:	12 9b       	mov	r11,r9
80008d10:	2f dd       	sub	sp,-12
80008d12:	d8 32       	popm	r0-r7,pc

80008d14 <__avr32_umod64>:
80008d14:	d4 31       	pushm	r0-r7,lr
80008d16:	1a 97       	mov	r7,sp
80008d18:	20 3d       	sub	sp,12
80008d1a:	10 9c       	mov	r12,r8
80008d1c:	12 95       	mov	r5,r9
80008d1e:	14 9e       	mov	lr,r10
80008d20:	16 91       	mov	r1,r11
80008d22:	16 96       	mov	r6,r11
80008d24:	58 09       	cp.w	r9,0
80008d26:	e0 81 00 81 	brne	80008e28 <__avr32_umod64+0x114>
80008d2a:	16 38       	cp.w	r8,r11
80008d2c:	e0 88 00 12 	brls	80008d50 <__avr32_umod64+0x3c>
80008d30:	f0 08 12 00 	clz	r8,r8
80008d34:	c4 e0       	breq	80008dd0 <__avr32_umod64+0xbc>
80008d36:	f6 08 09 46 	lsl	r6,r11,r8
80008d3a:	f8 08 09 4c 	lsl	r12,r12,r8
80008d3e:	f0 0b 11 20 	rsub	r11,r8,32
80008d42:	f4 08 09 4e 	lsl	lr,r10,r8
80008d46:	f4 0b 0a 4b 	lsr	r11,r10,r11
80008d4a:	f7 e6 10 06 	or	r6,r11,r6
80008d4e:	c4 18       	rjmp	80008dd0 <__avr32_umod64+0xbc>
80008d50:	58 08       	cp.w	r8,0
80008d52:	c0 51       	brne	80008d5c <__avr32_umod64+0x48>
80008d54:	30 19       	mov	r9,1
80008d56:	f2 08 0d 08 	divu	r8,r9,r8
80008d5a:	10 9c       	mov	r12,r8
80008d5c:	f8 08 12 00 	clz	r8,r12
80008d60:	c0 31       	brne	80008d66 <__avr32_umod64+0x52>
80008d62:	18 16       	sub	r6,r12
80008d64:	c3 68       	rjmp	80008dd0 <__avr32_umod64+0xbc>
80008d66:	f0 03 11 20 	rsub	r3,r8,32
80008d6a:	f4 03 0a 4b 	lsr	r11,r10,r3
80008d6e:	f8 08 09 4c 	lsl	r12,r12,r8
80008d72:	ec 08 09 49 	lsl	r9,r6,r8
80008d76:	ec 03 0a 43 	lsr	r3,r6,r3
80008d7a:	f7 e9 10 09 	or	r9,r11,r9
80008d7e:	f8 05 16 10 	lsr	r5,r12,0x10
80008d82:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008d86:	e6 05 0d 02 	divu	r2,r3,r5
80008d8a:	f2 0e 16 10 	lsr	lr,r9,0x10
80008d8e:	ec 02 02 4b 	mul	r11,r6,r2
80008d92:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008d96:	16 3e       	cp.w	lr,r11
80008d98:	c0 72       	brcc	80008da6 <__avr32_umod64+0x92>
80008d9a:	18 0e       	add	lr,r12
80008d9c:	18 3e       	cp.w	lr,r12
80008d9e:	c0 43       	brcs	80008da6 <__avr32_umod64+0x92>
80008da0:	16 3e       	cp.w	lr,r11
80008da2:	fd dc e3 0e 	addcs	lr,lr,r12
80008da6:	fc 0b 01 03 	sub	r3,lr,r11
80008daa:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008dae:	e6 05 0d 02 	divu	r2,r3,r5
80008db2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008db6:	a5 36       	mul	r6,r2
80008db8:	0c 39       	cp.w	r9,r6
80008dba:	c0 72       	brcc	80008dc8 <__avr32_umod64+0xb4>
80008dbc:	18 09       	add	r9,r12
80008dbe:	18 39       	cp.w	r9,r12
80008dc0:	c0 43       	brcs	80008dc8 <__avr32_umod64+0xb4>
80008dc2:	0c 39       	cp.w	r9,r6
80008dc4:	f3 dc e3 09 	addcs	r9,r9,r12
80008dc8:	f2 06 01 06 	sub	r6,r9,r6
80008dcc:	f4 08 09 4e 	lsl	lr,r10,r8
80008dd0:	f8 0a 16 10 	lsr	r10,r12,0x10
80008dd4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008dd8:	ec 0a 0d 02 	divu	r2,r6,r10
80008ddc:	fc 09 16 10 	lsr	r9,lr,0x10
80008de0:	ea 02 02 4b 	mul	r11,r5,r2
80008de4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008de8:	16 39       	cp.w	r9,r11
80008dea:	c0 72       	brcc	80008df8 <__avr32_umod64+0xe4>
80008dec:	18 09       	add	r9,r12
80008dee:	18 39       	cp.w	r9,r12
80008df0:	c0 43       	brcs	80008df8 <__avr32_umod64+0xe4>
80008df2:	16 39       	cp.w	r9,r11
80008df4:	f3 dc e3 09 	addcs	r9,r9,r12
80008df8:	f2 0b 01 0b 	sub	r11,r9,r11
80008dfc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008e00:	f6 0a 0d 0a 	divu	r10,r11,r10
80008e04:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008e08:	ea 0a 02 4a 	mul	r10,r5,r10
80008e0c:	14 3e       	cp.w	lr,r10
80008e0e:	c0 72       	brcc	80008e1c <__avr32_umod64+0x108>
80008e10:	18 0e       	add	lr,r12
80008e12:	18 3e       	cp.w	lr,r12
80008e14:	c0 43       	brcs	80008e1c <__avr32_umod64+0x108>
80008e16:	14 3e       	cp.w	lr,r10
80008e18:	fd dc e3 0e 	addcs	lr,lr,r12
80008e1c:	fc 0a 01 0a 	sub	r10,lr,r10
80008e20:	30 0b       	mov	r11,0
80008e22:	f4 08 0a 4a 	lsr	r10,r10,r8
80008e26:	c7 b8       	rjmp	80008f1c <__avr32_umod64+0x208>
80008e28:	16 39       	cp.w	r9,r11
80008e2a:	e0 8b 00 79 	brhi	80008f1c <__avr32_umod64+0x208>
80008e2e:	f2 09 12 00 	clz	r9,r9
80008e32:	c1 21       	brne	80008e56 <__avr32_umod64+0x142>
80008e34:	10 3a       	cp.w	r10,r8
80008e36:	5f 2b       	srhs	r11
80008e38:	0a 31       	cp.w	r1,r5
80008e3a:	5f ba       	srhi	r10
80008e3c:	f7 ea 10 0a 	or	r10,r11,r10
80008e40:	f2 0a 18 00 	cp.b	r10,r9
80008e44:	c0 60       	breq	80008e50 <__avr32_umod64+0x13c>
80008e46:	fc 08 01 0c 	sub	r12,lr,r8
80008e4a:	e2 05 01 46 	sbc	r6,r1,r5
80008e4e:	18 9e       	mov	lr,r12
80008e50:	0c 9b       	mov	r11,r6
80008e52:	1c 9a       	mov	r10,lr
80008e54:	c6 48       	rjmp	80008f1c <__avr32_umod64+0x208>
80008e56:	ea 09 09 4c 	lsl	r12,r5,r9
80008e5a:	f2 06 11 20 	rsub	r6,r9,32
80008e5e:	f6 09 09 4b 	lsl	r11,r11,r9
80008e62:	f0 09 09 42 	lsl	r2,r8,r9
80008e66:	ef 46 ff f4 	st.w	r7[-12],r6
80008e6a:	f0 06 0a 48 	lsr	r8,r8,r6
80008e6e:	18 48       	or	r8,r12
80008e70:	e2 06 0a 4c 	lsr	r12,r1,r6
80008e74:	f4 09 09 43 	lsl	r3,r10,r9
80008e78:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008e7c:	f4 06 0a 4a 	lsr	r10,r10,r6
80008e80:	16 4a       	or	r10,r11
80008e82:	f0 0b 16 10 	lsr	r11,r8,0x10
80008e86:	f8 0b 0d 04 	divu	r4,r12,r11
80008e8a:	f4 0c 16 10 	lsr	r12,r10,0x10
80008e8e:	08 91       	mov	r1,r4
80008e90:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008e94:	e8 0e 02 46 	mul	r6,r4,lr
80008e98:	0c 3c       	cp.w	r12,r6
80008e9a:	c0 a2       	brcc	80008eae <__avr32_umod64+0x19a>
80008e9c:	20 11       	sub	r1,1
80008e9e:	10 0c       	add	r12,r8
80008ea0:	10 3c       	cp.w	r12,r8
80008ea2:	c0 63       	brcs	80008eae <__avr32_umod64+0x19a>
80008ea4:	0c 3c       	cp.w	r12,r6
80008ea6:	f7 b1 03 01 	sublo	r1,1
80008eaa:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008eae:	0c 1c       	sub	r12,r6
80008eb0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008eb4:	f8 0b 0d 04 	divu	r4,r12,r11
80008eb8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008ebc:	08 96       	mov	r6,r4
80008ebe:	e8 0e 02 4e 	mul	lr,r4,lr
80008ec2:	1c 3b       	cp.w	r11,lr
80008ec4:	c0 a2       	brcc	80008ed8 <__avr32_umod64+0x1c4>
80008ec6:	20 16       	sub	r6,1
80008ec8:	10 0b       	add	r11,r8
80008eca:	10 3b       	cp.w	r11,r8
80008ecc:	c0 63       	brcs	80008ed8 <__avr32_umod64+0x1c4>
80008ece:	1c 3b       	cp.w	r11,lr
80008ed0:	f7 b6 03 01 	sublo	r6,1
80008ed4:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008ed8:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008edc:	1c 1b       	sub	r11,lr
80008ede:	e2 02 06 40 	mulu.d	r0,r1,r2
80008ee2:	00 9e       	mov	lr,r0
80008ee4:	02 9c       	mov	r12,r1
80008ee6:	16 3c       	cp.w	r12,r11
80008ee8:	e0 8b 00 08 	brhi	80008ef8 <__avr32_umod64+0x1e4>
80008eec:	5f 06       	sreq	r6
80008eee:	06 30       	cp.w	r0,r3
80008ef0:	5f ba       	srhi	r10
80008ef2:	ed ea 00 0a 	and	r10,r6,r10
80008ef6:	c0 60       	breq	80008f02 <__avr32_umod64+0x1ee>
80008ef8:	fc 02 01 04 	sub	r4,lr,r2
80008efc:	f8 08 01 4c 	sbc	r12,r12,r8
80008f00:	08 9e       	mov	lr,r4
80008f02:	e6 0e 01 0a 	sub	r10,r3,lr
80008f06:	f6 0c 01 4c 	sbc	r12,r11,r12
80008f0a:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008f0e:	f8 09 0a 4b 	lsr	r11,r12,r9
80008f12:	f4 09 0a 4a 	lsr	r10,r10,r9
80008f16:	f8 01 09 4c 	lsl	r12,r12,r1
80008f1a:	18 4a       	or	r10,r12
80008f1c:	2f dd       	sub	sp,-12
80008f1e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009000:	c0 08       	rjmp	80009000 <_evba>
	...

80009004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009004:	c0 08       	rjmp	80009004 <_handle_TLB_Multiple_Hit>
	...

80009008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009008:	c0 08       	rjmp	80009008 <_handle_Bus_Error_Data_Fetch>
	...

8000900c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000900c:	c0 08       	rjmp	8000900c <_handle_Bus_Error_Instruction_Fetch>
	...

80009010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009010:	c0 08       	rjmp	80009010 <_handle_NMI>
	...

80009014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009014:	c0 08       	rjmp	80009014 <_handle_Instruction_Address>
	...

80009018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009018:	c0 08       	rjmp	80009018 <_handle_ITLB_Protection>
	...

8000901c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000901c:	c0 08       	rjmp	8000901c <_handle_Breakpoint>
	...

80009020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009020:	c0 08       	rjmp	80009020 <_handle_Illegal_Opcode>
	...

80009024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009024:	c0 08       	rjmp	80009024 <_handle_Unimplemented_Instruction>
	...

80009028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009028:	c0 08       	rjmp	80009028 <_handle_Privilege_Violation>
	...

8000902c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000902c:	c0 08       	rjmp	8000902c <_handle_Floating_Point>
	...

80009030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009030:	c0 08       	rjmp	80009030 <_handle_Coprocessor_Absent>
	...

80009034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009034:	c0 08       	rjmp	80009034 <_handle_Data_Address_Read>
	...

80009038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009038:	c0 08       	rjmp	80009038 <_handle_Data_Address_Write>
	...

8000903c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000903c:	c0 08       	rjmp	8000903c <_handle_DTLB_Protection_Read>
	...

80009040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009040:	c0 08       	rjmp	80009040 <_handle_DTLB_Protection_Write>
	...

80009044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009044:	c0 08       	rjmp	80009044 <_handle_DTLB_Modified>
	...

80009050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009050:	c0 08       	rjmp	80009050 <_handle_ITLB_Miss>
	...

80009060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009060:	c0 08       	rjmp	80009060 <_handle_DTLB_Miss_Read>
	...

80009070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009070:	c0 08       	rjmp	80009070 <_handle_DTLB_Miss_Write>
	...

80009100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009100:	c0 08       	rjmp	80009100 <_handle_Supervisor_Call>
80009102:	d7 03       	nop

80009104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009104:	30 0c       	mov	r12,0
80009106:	fe b0 d0 09 	rcall	80003118 <_get_interrupt_handler>
8000910a:	58 0c       	cp.w	r12,0
8000910c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009110:	d6 03       	rete

80009112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009112:	30 1c       	mov	r12,1
80009114:	fe b0 d0 02 	rcall	80003118 <_get_interrupt_handler>
80009118:	58 0c       	cp.w	r12,0
8000911a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000911e:	d6 03       	rete

80009120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009120:	30 2c       	mov	r12,2
80009122:	fe b0 cf fb 	rcall	80003118 <_get_interrupt_handler>
80009126:	58 0c       	cp.w	r12,0
80009128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000912c:	d6 03       	rete

8000912e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000912e:	30 3c       	mov	r12,3
80009130:	fe b0 cf f4 	rcall	80003118 <_get_interrupt_handler>
80009134:	58 0c       	cp.w	r12,0
80009136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000913a:	d6 03       	rete
8000913c:	d7 03       	nop
8000913e:	d7 03       	nop
80009140:	d7 03       	nop
80009142:	d7 03       	nop
80009144:	d7 03       	nop
80009146:	d7 03       	nop
80009148:	d7 03       	nop
8000914a:	d7 03       	nop
8000914c:	d7 03       	nop
8000914e:	d7 03       	nop
80009150:	d7 03       	nop
80009152:	d7 03       	nop
80009154:	d7 03       	nop
80009156:	d7 03       	nop
80009158:	d7 03       	nop
8000915a:	d7 03       	nop
8000915c:	d7 03       	nop
8000915e:	d7 03       	nop
80009160:	d7 03       	nop
80009162:	d7 03       	nop
80009164:	d7 03       	nop
80009166:	d7 03       	nop
80009168:	d7 03       	nop
8000916a:	d7 03       	nop
8000916c:	d7 03       	nop
8000916e:	d7 03       	nop
80009170:	d7 03       	nop
80009172:	d7 03       	nop
80009174:	d7 03       	nop
80009176:	d7 03       	nop
80009178:	d7 03       	nop
8000917a:	d7 03       	nop
8000917c:	d7 03       	nop
8000917e:	d7 03       	nop
80009180:	d7 03       	nop
80009182:	d7 03       	nop
80009184:	d7 03       	nop
80009186:	d7 03       	nop
80009188:	d7 03       	nop
8000918a:	d7 03       	nop
8000918c:	d7 03       	nop
8000918e:	d7 03       	nop
80009190:	d7 03       	nop
80009192:	d7 03       	nop
80009194:	d7 03       	nop
80009196:	d7 03       	nop
80009198:	d7 03       	nop
8000919a:	d7 03       	nop
8000919c:	d7 03       	nop
8000919e:	d7 03       	nop
800091a0:	d7 03       	nop
800091a2:	d7 03       	nop
800091a4:	d7 03       	nop
800091a6:	d7 03       	nop
800091a8:	d7 03       	nop
800091aa:	d7 03       	nop
800091ac:	d7 03       	nop
800091ae:	d7 03       	nop
800091b0:	d7 03       	nop
800091b2:	d7 03       	nop
800091b4:	d7 03       	nop
800091b6:	d7 03       	nop
800091b8:	d7 03       	nop
800091ba:	d7 03       	nop
800091bc:	d7 03       	nop
800091be:	d7 03       	nop
800091c0:	d7 03       	nop
800091c2:	d7 03       	nop
800091c4:	d7 03       	nop
800091c6:	d7 03       	nop
800091c8:	d7 03       	nop
800091ca:	d7 03       	nop
800091cc:	d7 03       	nop
800091ce:	d7 03       	nop
800091d0:	d7 03       	nop
800091d2:	d7 03       	nop
800091d4:	d7 03       	nop
800091d6:	d7 03       	nop
800091d8:	d7 03       	nop
800091da:	d7 03       	nop
800091dc:	d7 03       	nop
800091de:	d7 03       	nop
800091e0:	d7 03       	nop
800091e2:	d7 03       	nop
800091e4:	d7 03       	nop
800091e6:	d7 03       	nop
800091e8:	d7 03       	nop
800091ea:	d7 03       	nop
800091ec:	d7 03       	nop
800091ee:	d7 03       	nop
800091f0:	d7 03       	nop
800091f2:	d7 03       	nop
800091f4:	d7 03       	nop
800091f6:	d7 03       	nop
800091f8:	d7 03       	nop
800091fa:	d7 03       	nop
800091fc:	d7 03       	nop
800091fe:	d7 03       	nop
